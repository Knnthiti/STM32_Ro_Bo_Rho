
Ro_Bo_Rho.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3c0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800c548  0800c548  0000d548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5e0  0800c5e0  0000e110  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5e0  0800c5e0  0000d5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5e8  0800c5e8  0000e110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5e8  0800c5e8  0000d5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c5ec  0800c5ec  0000d5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  0800c5f0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e110  2**0
                  CONTENTS
 10 .bss          00002310  20000110  20000110  0000e110  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002420  20002420  0000e110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e110  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eb35  00000000  00000000  0000e140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045a5  00000000  00000000  0002cc75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ba8  00000000  00000000  00031220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001595  00000000  00000000  00032dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002749c  00000000  00000000  0003435d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000244d8  00000000  00000000  0005b7f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1656  00000000  00000000  0007fcd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00161327  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000075f8  00000000  00000000  0016136c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00168964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000110 	.word	0x20000110
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c530 	.word	0x0800c530

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000114 	.word	0x20000114
 80001c4:	0800c530 	.word	0x0800c530

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f001 fe20 	bl	8002100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 fa62 	bl	8000988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 ffac 	bl	8001420 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004c8:	f000 fbd6 	bl	8000c78 <MX_TIM2_Init>
  MX_TIM4_Init();
 80004cc:	f000 fc7c 	bl	8000dc8 <MX_TIM4_Init>
  MX_ADC1_Init();
 80004d0:	f000 fac4 	bl	8000a5c <MX_ADC1_Init>
  MX_SPI2_Init();
 80004d4:	f000 fb42 	bl	8000b5c <MX_SPI2_Init>
  MX_TIM1_Init();
 80004d8:	f000 fb76 	bl	8000bc8 <MX_TIM1_Init>
  MX_TIM8_Init();
 80004dc:	f000 fd1c 	bl	8000f18 <MX_TIM8_Init>
  MX_TIM9_Init();
 80004e0:	f000 fd72 	bl	8000fc8 <MX_TIM9_Init>
  MX_TIM10_Init();
 80004e4:	f000 fdc0 	bl	8001068 <MX_TIM10_Init>
  MX_TIM11_Init();
 80004e8:	f000 fe0c 	bl	8001104 <MX_TIM11_Init>
  MX_TIM12_Init();
 80004ec:	f000 fe58 	bl	80011a0 <MX_TIM12_Init>
  MX_TIM13_Init();
 80004f0:	f000 fea6 	bl	8001240 <MX_TIM13_Init>
  MX_TIM14_Init();
 80004f4:	f000 fef2 	bl	80012dc <MX_TIM14_Init>
  MX_USART2_UART_Init();
 80004f8:	f000 ff68 	bl	80013cc <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80004fc:	f00b fad2 	bl	800baa4 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8000500:	f000 ff3a 	bl	8001378 <MX_UART4_Init>
  MX_I2C2_Init();
 8000504:	f000 fafc 	bl	8000b00 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000508:	f000 fc0a 	bl	8000d20 <MX_TIM3_Init>
  MX_TIM5_Init();
 800050c:	f000 fcb0 	bl	8000e70 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
   Motor_setup_LF(&htim14   ,&htim5    ,"PC05");
 8000510:	4a4a      	ldr	r2, [pc, #296]	@ (800063c <main+0x184>)
 8000512:	494b      	ldr	r1, [pc, #300]	@ (8000640 <main+0x188>)
 8000514:	484b      	ldr	r0, [pc, #300]	@ (8000644 <main+0x18c>)
 8000516:	f007 ff73 	bl	8008400 <Motor_setup_LF>
   Motor_setup_LB(&htim12   ,&htim1    ,"PE12");
 800051a:	4a4b      	ldr	r2, [pc, #300]	@ (8000648 <main+0x190>)
 800051c:	494b      	ldr	r1, [pc, #300]	@ (800064c <main+0x194>)
 800051e:	484c      	ldr	r0, [pc, #304]	@ (8000650 <main+0x198>)
 8000520:	f007 ff9c 	bl	800845c <Motor_setup_LB>
   Motor_setup_RF(&htim11   ,&htim8    ,"PE01");
 8000524:	4a4b      	ldr	r2, [pc, #300]	@ (8000654 <main+0x19c>)
 8000526:	494c      	ldr	r1, [pc, #304]	@ (8000658 <main+0x1a0>)
 8000528:	484c      	ldr	r0, [pc, #304]	@ (800065c <main+0x1a4>)
 800052a:	f007 ffc5 	bl	80084b8 <Motor_setup_RF>
   Motor_setup_RB(&htim12   ,&htim4    ,"PD09");
 800052e:	4a4c      	ldr	r2, [pc, #304]	@ (8000660 <main+0x1a8>)
 8000530:	494c      	ldr	r1, [pc, #304]	@ (8000664 <main+0x1ac>)
 8000532:	4847      	ldr	r0, [pc, #284]	@ (8000650 <main+0x198>)
 8000534:	f007 ffee 	bl	8008514 <Motor_setup_RB>
   Motor_setup_EXTRA1(&htim9,&htim3    ,"PC13");
 8000538:	4a4b      	ldr	r2, [pc, #300]	@ (8000668 <main+0x1b0>)
 800053a:	494c      	ldr	r1, [pc, #304]	@ (800066c <main+0x1b4>)
 800053c:	484c      	ldr	r0, [pc, #304]	@ (8000670 <main+0x1b8>)
 800053e:	f008 f817 	bl	8008570 <Motor_setup_EXTRA1>
   Motor_setup_EXTRA2(&htim10,&htim2   ,"PE00");
 8000542:	4a4c      	ldr	r2, [pc, #304]	@ (8000674 <main+0x1bc>)
 8000544:	494c      	ldr	r1, [pc, #304]	@ (8000678 <main+0x1c0>)
 8000546:	484d      	ldr	r0, [pc, #308]	@ (800067c <main+0x1c4>)
 8000548:	f008 f840 	bl	80085cc <Motor_setup_EXTRA2>

   Setup_Gear_Ratio(27);
 800054c:	201b      	movs	r0, #27
 800054e:	f008 f88b 	bl	8008668 <Setup_Gear_Ratio>
   Setup_CPR(68);
 8000552:	2044      	movs	r0, #68	@ 0x44
 8000554:	f008 f878 	bl	8008648 <Setup_CPR>
   Setup_frequency_Motor(100);
 8000558:	2064      	movs	r0, #100	@ 0x64
 800055a:	f008 f895 	bl	8008688 <Setup_frequency_Motor>

   Setup_PID_LF(1.0 ,0.0 ,0.1 ,0 ,300);
 800055e:	ed9f 2a48 	vldr	s4, [pc, #288]	@ 8000680 <main+0x1c8>
 8000562:	eddf 1a48 	vldr	s3, [pc, #288]	@ 8000684 <main+0x1cc>
 8000566:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 8000688 <main+0x1d0>
 800056a:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8000684 <main+0x1cc>
 800056e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000572:	f008 f921 	bl	80087b8 <Setup_PID_LF>
   Setup_PID_LB(1.0 ,0.0 ,0.1 ,0 ,300);
 8000576:	ed9f 2a42 	vldr	s4, [pc, #264]	@ 8000680 <main+0x1c8>
 800057a:	eddf 1a42 	vldr	s3, [pc, #264]	@ 8000684 <main+0x1cc>
 800057e:	ed9f 1a42 	vldr	s2, [pc, #264]	@ 8000688 <main+0x1d0>
 8000582:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8000684 <main+0x1cc>
 8000586:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800058a:	f008 f941 	bl	8008810 <Setup_PID_LB>
   Setup_PID_RF(1.0 ,0.0 ,0.1 ,0 ,300);
 800058e:	ed9f 2a3c 	vldr	s4, [pc, #240]	@ 8000680 <main+0x1c8>
 8000592:	eddf 1a3c 	vldr	s3, [pc, #240]	@ 8000684 <main+0x1cc>
 8000596:	ed9f 1a3c 	vldr	s2, [pc, #240]	@ 8000688 <main+0x1d0>
 800059a:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8000684 <main+0x1cc>
 800059e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80005a2:	f008 f961 	bl	8008868 <Setup_PID_RF>
   Setup_PID_RB(1.0 ,0.0 ,0.1 ,0 ,300);
 80005a6:	ed9f 2a36 	vldr	s4, [pc, #216]	@ 8000680 <main+0x1c8>
 80005aa:	eddf 1a36 	vldr	s3, [pc, #216]	@ 8000684 <main+0x1cc>
 80005ae:	ed9f 1a36 	vldr	s2, [pc, #216]	@ 8000688 <main+0x1d0>
 80005b2:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8000684 <main+0x1cc>
 80005b6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80005ba:	f008 f981 	bl	80088c0 <Setup_PID_RB>
//   Setup_PID_EXTRA1(0.5 ,0.1 ,0 ,0 ,280);
//   Setup_PID_EXTRA2(0.5 ,0.1 ,0 ,0 ,280);

   Setup_frequency_Forward_Kinematic(100);
 80005be:	2064      	movs	r0, #100	@ 0x64
 80005c0:	f009 f9b8 	bl	8009934 <Setup_frequency_Forward_Kinematic>
   Setup_Forward_Kinematic(0.23f ,0.23f ,0.06f);
 80005c4:	ed9f 1a31 	vldr	s2, [pc, #196]	@ 800068c <main+0x1d4>
 80005c8:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8000690 <main+0x1d8>
 80005cc:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8000690 <main+0x1d8>
 80005d0:	f009 f992 	bl	80098f8 <Setup_Forward_Kinematic>

   Setup_Inverse_Kinematic(0.23f ,0.23f ,0.06f);
 80005d4:	ed9f 1a2d 	vldr	s2, [pc, #180]	@ 800068c <main+0x1d4>
 80005d8:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8000690 <main+0x1d8>
 80005dc:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8000690 <main+0x1d8>
 80005e0:	f009 f9b8 	bl	8009954 <Setup_Inverse_Kinematic>

   //UAST2 esp_s3_zero to STM32
   HAL_UART_Receive_IT(&huart2, (uint8_t *)&Str_PS2, sizeof(Str_PS2));
 80005e4:	2208      	movs	r2, #8
 80005e6:	492b      	ldr	r1, [pc, #172]	@ (8000694 <main+0x1dc>)
 80005e8:	482b      	ldr	r0, [pc, #172]	@ (8000698 <main+0x1e0>)
 80005ea:	f005 fc9d 	bl	8005f28 <HAL_UART_Receive_IT>
    /* USER CODE BEGIN 3 */

//	  CDC_Transmit_FS((uint8_t*)RPM ,6);
//	  HAL_Delay(1000);

	  if ((uwTick - PastTime) > 10) {
 80005ee:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <main+0x1e4>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a2b      	ldr	r2, [pc, #172]	@ (80006a0 <main+0x1e8>)
 80005f4:	6812      	ldr	r2, [r2, #0]
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	2b0a      	cmp	r3, #10
 80005fa:	d9f8      	bls.n	80005ee <main+0x136>
	    PastTime = uwTick;
 80005fc:	4b27      	ldr	r3, [pc, #156]	@ (800069c <main+0x1e4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	461a      	mov	r2, r3
 8000602:	4b27      	ldr	r3, [pc, #156]	@ (80006a0 <main+0x1e8>)
 8000604:	601a      	str	r2, [r3, #0]

	    if (((uwTick - last_uart_data_time) < UART_TIMEOUT_MS) && (Str_PS2.Header[0] == 'R') && (Str_PS2.Header[1] == 'B')) {
 8000606:	4b25      	ldr	r3, [pc, #148]	@ (800069c <main+0x1e4>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <main+0x1ec>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000614:	d24a      	bcs.n	80006ac <main+0x1f4>
 8000616:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <main+0x1dc>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b52      	cmp	r3, #82	@ 0x52
 800061c:	d146      	bne.n	80006ac <main+0x1f4>
 800061e:	4b1d      	ldr	r3, [pc, #116]	@ (8000694 <main+0x1dc>)
 8000620:	785b      	ldrb	r3, [r3, #1]
 8000622:	2b42      	cmp	r3, #66	@ 0x42
 8000624:	d142      	bne.n	80006ac <main+0x1f4>
	      digitalWrite("PE07", 1);
 8000626:	2101      	movs	r1, #1
 8000628:	481f      	ldr	r0, [pc, #124]	@ (80006a8 <main+0x1f0>)
 800062a:	f008 fdff 	bl	800922c <digitalWrite>

	      Str_PS2.Header[0] = 0;
 800062e:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <main+0x1dc>)
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
	      Str_PS2.Header[1] = 0;
 8000634:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <main+0x1dc>)
 8000636:	2200      	movs	r2, #0
 8000638:	705a      	strb	r2, [r3, #1]
 800063a:	e06e      	b.n	800071a <main+0x262>
 800063c:	0800c548 	.word	0x0800c548
 8000640:	20000340 	.word	0x20000340
 8000644:	20000538 	.word	0x20000538
 8000648:	0800c550 	.word	0x0800c550
 800064c:	20000220 	.word	0x20000220
 8000650:	200004a8 	.word	0x200004a8
 8000654:	0800c558 	.word	0x0800c558
 8000658:	20000388 	.word	0x20000388
 800065c:	20000460 	.word	0x20000460
 8000660:	0800c560 	.word	0x0800c560
 8000664:	200002f8 	.word	0x200002f8
 8000668:	0800c568 	.word	0x0800c568
 800066c:	200002b0 	.word	0x200002b0
 8000670:	200003d0 	.word	0x200003d0
 8000674:	0800c570 	.word	0x0800c570
 8000678:	20000268 	.word	0x20000268
 800067c:	20000418 	.word	0x20000418
 8000680:	43960000 	.word	0x43960000
 8000684:	00000000 	.word	0x00000000
 8000688:	3dcccccd 	.word	0x3dcccccd
 800068c:	3d75c28f 	.word	0x3d75c28f
 8000690:	3e6b851f 	.word	0x3e6b851f
 8000694:	20000640 	.word	0x20000640
 8000698:	200005c8 	.word	0x200005c8
 800069c:	20000648 	.word	0x20000648
 80006a0:	20000624 	.word	0x20000624
 80006a4:	2000061c 	.word	0x2000061c
 80006a8:	0800c578 	.word	0x0800c578
	    } else {
	      if (!uart_resetting && ((uwTick - last_uart_data_time) > UART_TIMEOUT_MS)) {
 80006ac:	4ba3      	ldr	r3, [pc, #652]	@ (800093c <main+0x484>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d120      	bne.n	80006f6 <main+0x23e>
 80006b4:	4ba2      	ldr	r3, [pc, #648]	@ (8000940 <main+0x488>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4ba2      	ldr	r3, [pc, #648]	@ (8000944 <main+0x48c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80006c2:	d918      	bls.n	80006f6 <main+0x23e>
	        uart_resetting = 1;  // ตั้ง flag เพื่อป้องกัน reset ซ้ำซ้อน
 80006c4:	4b9d      	ldr	r3, [pc, #628]	@ (800093c <main+0x484>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]

	        HAL_UART_DeInit(&huart2);
 80006ca:	489f      	ldr	r0, [pc, #636]	@ (8000948 <main+0x490>)
 80006cc:	f005 fbfa 	bl	8005ec4 <HAL_UART_DeInit>
	        HAL_Delay(10);
 80006d0:	200a      	movs	r0, #10
 80006d2:	f001 fd87 	bl	80021e4 <HAL_Delay>
	        MX_USART2_UART_Init();
 80006d6:	f000 fe79 	bl	80013cc <MX_USART2_UART_Init>

	        HAL_UART_Receive_IT(&huart2, (uint8_t *)&Str_PS2, sizeof(Str_PS2));
 80006da:	2208      	movs	r2, #8
 80006dc:	499b      	ldr	r1, [pc, #620]	@ (800094c <main+0x494>)
 80006de:	489a      	ldr	r0, [pc, #616]	@ (8000948 <main+0x490>)
 80006e0:	f005 fc22 	bl	8005f28 <HAL_UART_Receive_IT>

	        memset(&Str_PS2, 0, sizeof(Str_PS2));
 80006e4:	2208      	movs	r2, #8
 80006e6:	2100      	movs	r1, #0
 80006e8:	4898      	ldr	r0, [pc, #608]	@ (800094c <main+0x494>)
 80006ea:	f00b fee7 	bl	800c4bc <memset>

	        digitalWrite("PE07", 0);
 80006ee:	2100      	movs	r1, #0
 80006f0:	4897      	ldr	r0, [pc, #604]	@ (8000950 <main+0x498>)
 80006f2:	f008 fd9b 	bl	800922c <digitalWrite>
	      }
	      // หยุดมอเตอร์เพื่อความปลอดภัย
	      Motor_DutyCycle_LF(0);
 80006f6:	2000      	movs	r0, #0
 80006f8:	f008 f9b8 	bl	8008a6c <Motor_DutyCycle_LF>
	      Motor_DutyCycle_LB(0);
 80006fc:	2000      	movs	r0, #0
 80006fe:	f008 fa0d 	bl	8008b1c <Motor_DutyCycle_LB>
	      Motor_DutyCycle_RF(0);
 8000702:	2000      	movs	r0, #0
 8000704:	f008 fa66 	bl	8008bd4 <Motor_DutyCycle_RF>
	      Motor_DutyCycle_RB(0);
 8000708:	2000      	movs	r0, #0
 800070a:	f008 fabf 	bl	8008c8c <Motor_DutyCycle_RB>

	      Motor_DutyCycle_EXTRA1(0);
 800070e:	2000      	movs	r0, #0
 8000710:	f008 fb14 	bl	8008d3c <Motor_DutyCycle_EXTRA1>
	      Motor_DutyCycle_EXTRA2(0);
 8000714:	2000      	movs	r0, #0
 8000716:	f008 fb69 	bl	8008dec <Motor_DutyCycle_EXTRA2>
	    }

	    Vx = map(Str_PS2.stickValue[0], 100.0f, -100.0f, 2.3f, -2.3f);
 800071a:	4b8c      	ldr	r3, [pc, #560]	@ (800094c <main+0x494>)
 800071c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000720:	ee07 3a90 	vmov	s15, r3
 8000724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000728:	ed9f 2a8a 	vldr	s4, [pc, #552]	@ 8000954 <main+0x49c>
 800072c:	eddf 1a8a 	vldr	s3, [pc, #552]	@ 8000958 <main+0x4a0>
 8000730:	ed9f 1a8a 	vldr	s2, [pc, #552]	@ 800095c <main+0x4a4>
 8000734:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 8000960 <main+0x4a8>
 8000738:	eeb0 0a67 	vmov.f32	s0, s15
 800073c:	f009 f9f2 	bl	8009b24 <map>
 8000740:	eef0 7a40 	vmov.f32	s15, s0
 8000744:	4b87      	ldr	r3, [pc, #540]	@ (8000964 <main+0x4ac>)
 8000746:	edc3 7a00 	vstr	s15, [r3]
	    Vy = map(Str_PS2.stickValue[1], 100.0f, -100.0f, 2.3f, -2.3f);
 800074a:	4b80      	ldr	r3, [pc, #512]	@ (800094c <main+0x494>)
 800074c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000750:	ee07 3a90 	vmov	s15, r3
 8000754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000758:	ed9f 2a7e 	vldr	s4, [pc, #504]	@ 8000954 <main+0x49c>
 800075c:	eddf 1a7e 	vldr	s3, [pc, #504]	@ 8000958 <main+0x4a0>
 8000760:	ed9f 1a7e 	vldr	s2, [pc, #504]	@ 800095c <main+0x4a4>
 8000764:	eddf 0a7e 	vldr	s1, [pc, #504]	@ 8000960 <main+0x4a8>
 8000768:	eeb0 0a67 	vmov.f32	s0, s15
 800076c:	f009 f9da 	bl	8009b24 <map>
 8000770:	eef0 7a40 	vmov.f32	s15, s0
 8000774:	4b7c      	ldr	r3, [pc, #496]	@ (8000968 <main+0x4b0>)
 8000776:	edc3 7a00 	vstr	s15, [r3]
	    Vz = map(Str_PS2.stickValue[3], 100.0f, -100.0f, 4.0f, -4.0f);
 800077a:	4b74      	ldr	r3, [pc, #464]	@ (800094c <main+0x494>)
 800077c:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8000780:	ee07 3a90 	vmov	s15, r3
 8000784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000788:	eeb9 2a00 	vmov.f32	s4, #144	@ 0xc0800000 -4.0
 800078c:	eef1 1a00 	vmov.f32	s3, #16	@ 0x40800000  4.0
 8000790:	ed9f 1a72 	vldr	s2, [pc, #456]	@ 800095c <main+0x4a4>
 8000794:	eddf 0a72 	vldr	s1, [pc, #456]	@ 8000960 <main+0x4a8>
 8000798:	eeb0 0a67 	vmov.f32	s0, s15
 800079c:	f009 f9c2 	bl	8009b24 <map>
 80007a0:	eef0 7a40 	vmov.f32	s15, s0
 80007a4:	4b71      	ldr	r3, [pc, #452]	@ (800096c <main+0x4b4>)
 80007a6:	edc3 7a00 	vstr	s15, [r3]
	    // count[2] = getCount(&htim8);
	    // count[3] = getCount(&htim4);
	    // count[4] = getCount(&htim2);
	    // count[5] = getCount(&htim3);

	    RPM[0] = getRPM_TIM_Wheel(&htim5, LF);
 80007aa:	2100      	movs	r1, #0
 80007ac:	4870      	ldr	r0, [pc, #448]	@ (8000970 <main+0x4b8>)
 80007ae:	f007 ff95 	bl	80086dc <getRPM_TIM_Wheel>
 80007b2:	eef0 7a40 	vmov.f32	s15, s0
 80007b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007ba:	ee17 3a90 	vmov	r3, s15
 80007be:	b21a      	sxth	r2, r3
 80007c0:	4b6c      	ldr	r3, [pc, #432]	@ (8000974 <main+0x4bc>)
 80007c2:	801a      	strh	r2, [r3, #0]
	    RPM[1] = -getRPM_TIM_Wheel(&htim1, LB);
 80007c4:	2101      	movs	r1, #1
 80007c6:	486c      	ldr	r0, [pc, #432]	@ (8000978 <main+0x4c0>)
 80007c8:	f007 ff88 	bl	80086dc <getRPM_TIM_Wheel>
 80007cc:	eef0 7a40 	vmov.f32	s15, s0
 80007d0:	eef1 7a67 	vneg.f32	s15, s15
 80007d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007d8:	ee17 3a90 	vmov	r3, s15
 80007dc:	b21a      	sxth	r2, r3
 80007de:	4b65      	ldr	r3, [pc, #404]	@ (8000974 <main+0x4bc>)
 80007e0:	805a      	strh	r2, [r3, #2]
	    RPM[2] = getRPM_TIM_Wheel(&htim8, RF);
 80007e2:	2102      	movs	r1, #2
 80007e4:	4865      	ldr	r0, [pc, #404]	@ (800097c <main+0x4c4>)
 80007e6:	f007 ff79 	bl	80086dc <getRPM_TIM_Wheel>
 80007ea:	eef0 7a40 	vmov.f32	s15, s0
 80007ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007f2:	ee17 3a90 	vmov	r3, s15
 80007f6:	b21a      	sxth	r2, r3
 80007f8:	4b5e      	ldr	r3, [pc, #376]	@ (8000974 <main+0x4bc>)
 80007fa:	809a      	strh	r2, [r3, #4]
	    RPM[3] = getRPM_TIM_Wheel(&htim4, RB);
 80007fc:	2103      	movs	r1, #3
 80007fe:	4860      	ldr	r0, [pc, #384]	@ (8000980 <main+0x4c8>)
 8000800:	f007 ff6c 	bl	80086dc <getRPM_TIM_Wheel>
 8000804:	eef0 7a40 	vmov.f32	s15, s0
 8000808:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800080c:	ee17 3a90 	vmov	r3, s15
 8000810:	b21a      	sxth	r2, r3
 8000812:	4b58      	ldr	r3, [pc, #352]	@ (8000974 <main+0x4bc>)
 8000814:	80da      	strh	r2, [r3, #6]
	    // RPM[5] = getRPM_TIM_Wheel(&htim2, EXTRA2);

	    // Odometry_Forward_Kinematic(getRPM_to_Rad_s(RPM[0]), getRPM_to_Rad_s(RPM[1]), getRPM_to_Rad_s(RPM[2]), getRPM_to_Rad_s(RPM[3]));
	    // x = get_Vz();

	    Inverse_Kinematic(Vx, Vy, Vz);
 8000816:	4b53      	ldr	r3, [pc, #332]	@ (8000964 <main+0x4ac>)
 8000818:	edd3 7a00 	vldr	s15, [r3]
 800081c:	4b52      	ldr	r3, [pc, #328]	@ (8000968 <main+0x4b0>)
 800081e:	ed93 7a00 	vldr	s14, [r3]
 8000822:	4b52      	ldr	r3, [pc, #328]	@ (800096c <main+0x4b4>)
 8000824:	edd3 6a00 	vldr	s13, [r3]
 8000828:	eeb0 1a66 	vmov.f32	s2, s13
 800082c:	eef0 0a47 	vmov.f32	s1, s14
 8000830:	eeb0 0a67 	vmov.f32	s0, s15
 8000834:	f009 f8ac 	bl	8009990 <Inverse_Kinematic>

	    PID[0] = Motor_Speed_LF(getRad_s_to_RPM(get_w_LF()), RPM[0]);
 8000838:	f009 f93c 	bl	8009ab4 <get_w_LF>
 800083c:	eef0 7a40 	vmov.f32	s15, s0
 8000840:	eeb0 0a67 	vmov.f32	s0, s15
 8000844:	f007 ff30 	bl	80086a8 <getRad_s_to_RPM>
 8000848:	eef0 7a40 	vmov.f32	s15, s0
 800084c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000850:	ee17 3a90 	vmov	r3, s15
 8000854:	b21b      	sxth	r3, r3
 8000856:	4a47      	ldr	r2, [pc, #284]	@ (8000974 <main+0x4bc>)
 8000858:	f9b2 2000 	ldrsh.w	r2, [r2]
 800085c:	ee07 2a90 	vmov	s15, r2
 8000860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000864:	eeb0 0a67 	vmov.f32	s0, s15
 8000868:	4618      	mov	r0, r3
 800086a:	f008 fb17 	bl	8008e9c <Motor_Speed_LF>
 800086e:	eef0 7a40 	vmov.f32	s15, s0
 8000872:	4b44      	ldr	r3, [pc, #272]	@ (8000984 <main+0x4cc>)
 8000874:	edc3 7a00 	vstr	s15, [r3]
	    PID[1] = Motor_Speed_LB(getRad_s_to_RPM(get_w_LB()), RPM[1]);
 8000878:	f009 f92a 	bl	8009ad0 <get_w_LB>
 800087c:	eef0 7a40 	vmov.f32	s15, s0
 8000880:	eeb0 0a67 	vmov.f32	s0, s15
 8000884:	f007 ff10 	bl	80086a8 <getRad_s_to_RPM>
 8000888:	eef0 7a40 	vmov.f32	s15, s0
 800088c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000890:	ee17 3a90 	vmov	r3, s15
 8000894:	b21b      	sxth	r3, r3
 8000896:	4a37      	ldr	r2, [pc, #220]	@ (8000974 <main+0x4bc>)
 8000898:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800089c:	ee07 2a90 	vmov	s15, r2
 80008a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008a4:	eeb0 0a67 	vmov.f32	s0, s15
 80008a8:	4618      	mov	r0, r3
 80008aa:	f008 fb69 	bl	8008f80 <Motor_Speed_LB>
 80008ae:	eef0 7a40 	vmov.f32	s15, s0
 80008b2:	4b34      	ldr	r3, [pc, #208]	@ (8000984 <main+0x4cc>)
 80008b4:	edc3 7a01 	vstr	s15, [r3, #4]
	    PID[2] = Motor_Speed_RF(getRad_s_to_RPM(get_w_RF()), RPM[2]);
 80008b8:	f009 f918 	bl	8009aec <get_w_RF>
 80008bc:	eef0 7a40 	vmov.f32	s15, s0
 80008c0:	eeb0 0a67 	vmov.f32	s0, s15
 80008c4:	f007 fef0 	bl	80086a8 <getRad_s_to_RPM>
 80008c8:	eef0 7a40 	vmov.f32	s15, s0
 80008cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008d0:	ee17 3a90 	vmov	r3, s15
 80008d4:	b21b      	sxth	r3, r3
 80008d6:	4a27      	ldr	r2, [pc, #156]	@ (8000974 <main+0x4bc>)
 80008d8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80008dc:	ee07 2a90 	vmov	s15, r2
 80008e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008e4:	eeb0 0a67 	vmov.f32	s0, s15
 80008e8:	4618      	mov	r0, r3
 80008ea:	f008 fbbb 	bl	8009064 <Motor_Speed_RF>
 80008ee:	eef0 7a40 	vmov.f32	s15, s0
 80008f2:	4b24      	ldr	r3, [pc, #144]	@ (8000984 <main+0x4cc>)
 80008f4:	edc3 7a02 	vstr	s15, [r3, #8]
	    PID[3] = Motor_Speed_RB(getRad_s_to_RPM(get_w_RB()), RPM[3]);
 80008f8:	f009 f906 	bl	8009b08 <get_w_RB>
 80008fc:	eef0 7a40 	vmov.f32	s15, s0
 8000900:	eeb0 0a67 	vmov.f32	s0, s15
 8000904:	f007 fed0 	bl	80086a8 <getRad_s_to_RPM>
 8000908:	eef0 7a40 	vmov.f32	s15, s0
 800090c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000910:	ee17 3a90 	vmov	r3, s15
 8000914:	b21b      	sxth	r3, r3
 8000916:	4a17      	ldr	r2, [pc, #92]	@ (8000974 <main+0x4bc>)
 8000918:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800091c:	ee07 2a90 	vmov	s15, r2
 8000920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000924:	eeb0 0a67 	vmov.f32	s0, s15
 8000928:	4618      	mov	r0, r3
 800092a:	f008 fc0d 	bl	8009148 <Motor_Speed_RB>
 800092e:	eef0 7a40 	vmov.f32	s15, s0
 8000932:	4b14      	ldr	r3, [pc, #80]	@ (8000984 <main+0x4cc>)
 8000934:	edc3 7a03 	vstr	s15, [r3, #12]
	  if ((uwTick - PastTime) > 10) {
 8000938:	e659      	b.n	80005ee <main+0x136>
 800093a:	bf00      	nop
 800093c:	20000620 	.word	0x20000620
 8000940:	20000648 	.word	0x20000648
 8000944:	2000061c 	.word	0x2000061c
 8000948:	200005c8 	.word	0x200005c8
 800094c:	20000640 	.word	0x20000640
 8000950:	0800c578 	.word	0x0800c578
 8000954:	c0133333 	.word	0xc0133333
 8000958:	40133333 	.word	0x40133333
 800095c:	c2c80000 	.word	0xc2c80000
 8000960:	42c80000 	.word	0x42c80000
 8000964:	20000610 	.word	0x20000610
 8000968:	20000614 	.word	0x20000614
 800096c:	20000618 	.word	0x20000618
 8000970:	20000340 	.word	0x20000340
 8000974:	20000000 	.word	0x20000000
 8000978:	20000220 	.word	0x20000220
 800097c:	20000388 	.word	0x20000388
 8000980:	200002f8 	.word	0x200002f8
 8000984:	20000628 	.word	0x20000628

08000988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b094      	sub	sp, #80	@ 0x50
 800098c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098e:	f107 0320 	add.w	r3, r7, #32
 8000992:	2230      	movs	r2, #48	@ 0x30
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f00b fd90 	bl	800c4bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099c:	f107 030c 	add.w	r3, r7, #12
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	4b28      	ldr	r3, [pc, #160]	@ (8000a54 <SystemClock_Config+0xcc>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b4:	4a27      	ldr	r2, [pc, #156]	@ (8000a54 <SystemClock_Config+0xcc>)
 80009b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80009bc:	4b25      	ldr	r3, [pc, #148]	@ (8000a54 <SystemClock_Config+0xcc>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	4b22      	ldr	r3, [pc, #136]	@ (8000a58 <SystemClock_Config+0xd0>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a21      	ldr	r2, [pc, #132]	@ (8000a58 <SystemClock_Config+0xd0>)
 80009d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d6:	6013      	str	r3, [r2, #0]
 80009d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a58 <SystemClock_Config+0xd0>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e4:	2301      	movs	r3, #1
 80009e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ee:	2302      	movs	r3, #2
 80009f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 7;
 80009f8:	2307      	movs	r3, #7
 80009fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009fc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a00:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a02:	2304      	movs	r3, #4
 8000a04:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000a06:	2308      	movs	r3, #8
 8000a08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0a:	f107 0320 	add.w	r3, r7, #32
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f003 fe8c 	bl	800472c <HAL_RCC_OscConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a1a:	f000 fde7 	bl	80015ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1e:	230f      	movs	r3, #15
 8000a20:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a22:	2302      	movs	r3, #2
 8000a24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a2a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	2103      	movs	r1, #3
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f004 f8ed 	bl	8004c1c <HAL_RCC_ClockConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a48:	f000 fdd0 	bl	80015ec <Error_Handler>
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	3750      	adds	r7, #80	@ 0x50
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40007000 	.word	0x40007000

08000a5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a62:	463b      	mov	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a6e:	4b21      	ldr	r3, [pc, #132]	@ (8000af4 <MX_ADC1_Init+0x98>)
 8000a70:	4a21      	ldr	r2, [pc, #132]	@ (8000af8 <MX_ADC1_Init+0x9c>)
 8000a72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a74:	4b1f      	ldr	r3, [pc, #124]	@ (8000af4 <MX_ADC1_Init+0x98>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000af4 <MX_ADC1_Init+0x98>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a80:	4b1c      	ldr	r3, [pc, #112]	@ (8000af4 <MX_ADC1_Init+0x98>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a86:	4b1b      	ldr	r3, [pc, #108]	@ (8000af4 <MX_ADC1_Init+0x98>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a8c:	4b19      	ldr	r3, [pc, #100]	@ (8000af4 <MX_ADC1_Init+0x98>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a94:	4b17      	ldr	r3, [pc, #92]	@ (8000af4 <MX_ADC1_Init+0x98>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a9a:	4b16      	ldr	r3, [pc, #88]	@ (8000af4 <MX_ADC1_Init+0x98>)
 8000a9c:	4a17      	ldr	r2, [pc, #92]	@ (8000afc <MX_ADC1_Init+0xa0>)
 8000a9e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	@ (8000af4 <MX_ADC1_Init+0x98>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	@ (8000af4 <MX_ADC1_Init+0x98>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000aac:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <MX_ADC1_Init+0x98>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <MX_ADC1_Init+0x98>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aba:	480e      	ldr	r0, [pc, #56]	@ (8000af4 <MX_ADC1_Init+0x98>)
 8000abc:	f001 fbb6 	bl	800222c <HAL_ADC_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ac6:	f000 fd91 	bl	80015ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000aca:	2304      	movs	r3, #4
 8000acc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4806      	ldr	r0, [pc, #24]	@ (8000af4 <MX_ADC1_Init+0x98>)
 8000adc:	f001 fbea 	bl	80022b4 <HAL_ADC_ConfigChannel>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ae6:	f000 fd81 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2000012c 	.word	0x2000012c
 8000af8:	40012000 	.word	0x40012000
 8000afc:	0f000001 	.word	0x0f000001

08000b00 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <MX_I2C2_Init+0x50>)
 8000b06:	4a13      	ldr	r2, [pc, #76]	@ (8000b54 <MX_I2C2_Init+0x54>)
 8000b08:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <MX_I2C2_Init+0x50>)
 8000b0c:	4a12      	ldr	r2, [pc, #72]	@ (8000b58 <MX_I2C2_Init+0x58>)
 8000b0e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	@ (8000b50 <MX_I2C2_Init+0x50>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <MX_I2C2_Init+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b50 <MX_I2C2_Init+0x50>)
 8000b1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b22:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <MX_I2C2_Init+0x50>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	@ (8000b50 <MX_I2C2_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b30:	4b07      	ldr	r3, [pc, #28]	@ (8000b50 <MX_I2C2_Init+0x50>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b36:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <MX_I2C2_Init+0x50>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b3c:	4804      	ldr	r0, [pc, #16]	@ (8000b50 <MX_I2C2_Init+0x50>)
 8000b3e:	f002 fa5f 	bl	8003000 <HAL_I2C_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b48:	f000 fd50 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000174 	.word	0x20000174
 8000b54:	40005800 	.word	0x40005800
 8000b58:	00061a80 	.word	0x00061a80

08000b5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b60:	4b17      	ldr	r3, [pc, #92]	@ (8000bc0 <MX_SPI2_Init+0x64>)
 8000b62:	4a18      	ldr	r2, [pc, #96]	@ (8000bc4 <MX_SPI2_Init+0x68>)
 8000b64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b66:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <MX_SPI2_Init+0x64>)
 8000b68:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b6e:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <MX_SPI2_Init+0x64>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b74:	4b12      	ldr	r3, [pc, #72]	@ (8000bc0 <MX_SPI2_Init+0x64>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <MX_SPI2_Init+0x64>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc0 <MX_SPI2_Init+0x64>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <MX_SPI2_Init+0x64>)
 8000b88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <MX_SPI2_Init+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b94:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc0 <MX_SPI2_Init+0x64>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b9a:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_SPI2_Init+0x64>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	@ (8000bc0 <MX_SPI2_Init+0x64>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <MX_SPI2_Init+0x64>)
 8000ba8:	220a      	movs	r2, #10
 8000baa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bac:	4804      	ldr	r0, [pc, #16]	@ (8000bc0 <MX_SPI2_Init+0x64>)
 8000bae:	f004 fa55 	bl	800505c <HAL_SPI_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000bb8:	f000 fd18 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200001c8 	.word	0x200001c8
 8000bc4:	40003800 	.word	0x40003800

08000bc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08c      	sub	sp, #48	@ 0x30
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	2224      	movs	r2, #36	@ 0x24
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f00b fc70 	bl	800c4bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000be4:	4b22      	ldr	r3, [pc, #136]	@ (8000c70 <MX_TIM1_Init+0xa8>)
 8000be6:	4a23      	ldr	r2, [pc, #140]	@ (8000c74 <MX_TIM1_Init+0xac>)
 8000be8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bea:	4b21      	ldr	r3, [pc, #132]	@ (8000c70 <MX_TIM1_Init+0xa8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c70 <MX_TIM1_Init+0xa8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c70 <MX_TIM1_Init+0xa8>)
 8000bf8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bfc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c70 <MX_TIM1_Init+0xa8>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c04:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <MX_TIM1_Init+0xa8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0a:	4b19      	ldr	r3, [pc, #100]	@ (8000c70 <MX_TIM1_Init+0xa8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c10:	2303      	movs	r3, #3
 8000c12:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c14:	2300      	movs	r3, #0
 8000c16:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480d      	ldr	r0, [pc, #52]	@ (8000c70 <MX_TIM1_Init+0xa8>)
 8000c3c:	f004 fbfe 	bl	800543c <HAL_TIM_Encoder_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000c46:	f000 fcd1 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	4619      	mov	r1, r3
 8000c56:	4806      	ldr	r0, [pc, #24]	@ (8000c70 <MX_TIM1_Init+0xa8>)
 8000c58:	f005 f868 	bl	8005d2c <HAL_TIMEx_MasterConfigSynchronization>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000c62:	f000 fcc3 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	3730      	adds	r7, #48	@ 0x30
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000220 	.word	0x20000220
 8000c74:	40010000 	.word	0x40010000

08000c78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	@ 0x30
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	2224      	movs	r2, #36	@ 0x24
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f00b fc18 	bl	800c4bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c94:	4b21      	ldr	r3, [pc, #132]	@ (8000d1c <MX_TIM2_Init+0xa4>)
 8000c96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000d1c <MX_TIM2_Init+0xa4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d1c <MX_TIM2_Init+0xa4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <MX_TIM2_Init+0xa4>)
 8000caa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d1c <MX_TIM2_Init+0xa4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb6:	4b19      	ldr	r3, [pc, #100]	@ (8000d1c <MX_TIM2_Init+0xa4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	480d      	ldr	r0, [pc, #52]	@ (8000d1c <MX_TIM2_Init+0xa4>)
 8000ce8:	f004 fba8 	bl	800543c <HAL_TIM_Encoder_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000cf2:	f000 fc7b 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	4619      	mov	r1, r3
 8000d02:	4806      	ldr	r0, [pc, #24]	@ (8000d1c <MX_TIM2_Init+0xa4>)
 8000d04:	f005 f812 	bl	8005d2c <HAL_TIMEx_MasterConfigSynchronization>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000d0e:	f000 fc6d 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	3730      	adds	r7, #48	@ 0x30
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000268 	.word	0x20000268

08000d20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08c      	sub	sp, #48	@ 0x30
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d26:	f107 030c 	add.w	r3, r7, #12
 8000d2a:	2224      	movs	r2, #36	@ 0x24
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f00b fbc4 	bl	800c4bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d3c:	4b20      	ldr	r3, [pc, #128]	@ (8000dc0 <MX_TIM3_Init+0xa0>)
 8000d3e:	4a21      	ldr	r2, [pc, #132]	@ (8000dc4 <MX_TIM3_Init+0xa4>)
 8000d40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d42:	4b1f      	ldr	r3, [pc, #124]	@ (8000dc0 <MX_TIM3_Init+0xa0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d48:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc0 <MX_TIM3_Init+0xa0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc0 <MX_TIM3_Init+0xa0>)
 8000d50:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d56:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <MX_TIM3_Init+0xa0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5c:	4b18      	ldr	r3, [pc, #96]	@ (8000dc0 <MX_TIM3_Init+0xa0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d62:	2303      	movs	r3, #3
 8000d64:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480c      	ldr	r0, [pc, #48]	@ (8000dc0 <MX_TIM3_Init+0xa0>)
 8000d8e:	f004 fb55 	bl	800543c <HAL_TIM_Encoder_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000d98:	f000 fc28 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	4619      	mov	r1, r3
 8000da8:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <MX_TIM3_Init+0xa0>)
 8000daa:	f004 ffbf 	bl	8005d2c <HAL_TIMEx_MasterConfigSynchronization>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000db4:	f000 fc1a 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000db8:	bf00      	nop
 8000dba:	3730      	adds	r7, #48	@ 0x30
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200002b0 	.word	0x200002b0
 8000dc4:	40000400 	.word	0x40000400

08000dc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08c      	sub	sp, #48	@ 0x30
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	2224      	movs	r2, #36	@ 0x24
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f00b fb70 	bl	800c4bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000de4:	4b20      	ldr	r3, [pc, #128]	@ (8000e68 <MX_TIM4_Init+0xa0>)
 8000de6:	4a21      	ldr	r2, [pc, #132]	@ (8000e6c <MX_TIM4_Init+0xa4>)
 8000de8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000dea:	4b1f      	ldr	r3, [pc, #124]	@ (8000e68 <MX_TIM4_Init+0xa0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000df0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e68 <MX_TIM4_Init+0xa0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000df6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e68 <MX_TIM4_Init+0xa0>)
 8000df8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dfc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e68 <MX_TIM4_Init+0xa0>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e04:	4b18      	ldr	r3, [pc, #96]	@ (8000e68 <MX_TIM4_Init+0xa0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e12:	2301      	movs	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e22:	2301      	movs	r3, #1
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	4619      	mov	r1, r3
 8000e34:	480c      	ldr	r0, [pc, #48]	@ (8000e68 <MX_TIM4_Init+0xa0>)
 8000e36:	f004 fb01 	bl	800543c <HAL_TIM_Encoder_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000e40:	f000 fbd4 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e44:	2300      	movs	r3, #0
 8000e46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <MX_TIM4_Init+0xa0>)
 8000e52:	f004 ff6b 	bl	8005d2c <HAL_TIMEx_MasterConfigSynchronization>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000e5c:	f000 fbc6 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e60:	bf00      	nop
 8000e62:	3730      	adds	r7, #48	@ 0x30
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200002f8 	.word	0x200002f8
 8000e6c:	40000800 	.word	0x40000800

08000e70 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08c      	sub	sp, #48	@ 0x30
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	2224      	movs	r2, #36	@ 0x24
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f00b fb1c 	bl	800c4bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e8c:	4b20      	ldr	r3, [pc, #128]	@ (8000f10 <MX_TIM5_Init+0xa0>)
 8000e8e:	4a21      	ldr	r2, [pc, #132]	@ (8000f14 <MX_TIM5_Init+0xa4>)
 8000e90:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e92:	4b1f      	ldr	r3, [pc, #124]	@ (8000f10 <MX_TIM5_Init+0xa0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b1d      	ldr	r3, [pc, #116]	@ (8000f10 <MX_TIM5_Init+0xa0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f10 <MX_TIM5_Init+0xa0>)
 8000ea0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ea4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f10 <MX_TIM5_Init+0xa0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eac:	4b18      	ldr	r3, [pc, #96]	@ (8000f10 <MX_TIM5_Init+0xa0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	4619      	mov	r1, r3
 8000edc:	480c      	ldr	r0, [pc, #48]	@ (8000f10 <MX_TIM5_Init+0xa0>)
 8000ede:	f004 faad 	bl	800543c <HAL_TIM_Encoder_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000ee8:	f000 fb80 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eec:	2300      	movs	r3, #0
 8000eee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	@ (8000f10 <MX_TIM5_Init+0xa0>)
 8000efa:	f004 ff17 	bl	8005d2c <HAL_TIMEx_MasterConfigSynchronization>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000f04:	f000 fb72 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f08:	bf00      	nop
 8000f0a:	3730      	adds	r7, #48	@ 0x30
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20000340 	.word	0x20000340
 8000f14:	40000c00 	.word	0x40000c00

08000f18 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	@ 0x30
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	2224      	movs	r2, #36	@ 0x24
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f00b fac8 	bl	800c4bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f34:	4b22      	ldr	r3, [pc, #136]	@ (8000fc0 <MX_TIM8_Init+0xa8>)
 8000f36:	4a23      	ldr	r2, [pc, #140]	@ (8000fc4 <MX_TIM8_Init+0xac>)
 8000f38:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000f3a:	4b21      	ldr	r3, [pc, #132]	@ (8000fc0 <MX_TIM8_Init+0xa8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f40:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc0 <MX_TIM8_Init+0xa8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc0 <MX_TIM8_Init+0xa8>)
 8000f48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f4c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc0 <MX_TIM8_Init+0xa8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc0 <MX_TIM8_Init+0xa8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5a:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <MX_TIM8_Init+0xa8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f60:	2303      	movs	r3, #3
 8000f62:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f74:	2300      	movs	r3, #0
 8000f76:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000f84:	f107 030c 	add.w	r3, r7, #12
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480d      	ldr	r0, [pc, #52]	@ (8000fc0 <MX_TIM8_Init+0xa8>)
 8000f8c:	f004 fa56 	bl	800543c <HAL_TIM_Encoder_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8000f96:	f000 fb29 	bl	80015ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4806      	ldr	r0, [pc, #24]	@ (8000fc0 <MX_TIM8_Init+0xa8>)
 8000fa8:	f004 fec0 	bl	8005d2c <HAL_TIMEx_MasterConfigSynchronization>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8000fb2:	f000 fb1b 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	3730      	adds	r7, #48	@ 0x30
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000388 	.word	0x20000388
 8000fc4:	40010400 	.word	0x40010400

08000fc8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
 8000fdc:	615a      	str	r2, [r3, #20]
 8000fde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	@ (8001060 <MX_TIM9_Init+0x98>)
 8000fe2:	4a20      	ldr	r2, [pc, #128]	@ (8001064 <MX_TIM9_Init+0x9c>)
 8000fe4:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 2-1;
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8001060 <MX_TIM9_Init+0x98>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fec:	4b1c      	ldr	r3, [pc, #112]	@ (8001060 <MX_TIM9_Init+0x98>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4096-1;
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8001060 <MX_TIM9_Init+0x98>)
 8000ff4:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000ff8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffa:	4b19      	ldr	r3, [pc, #100]	@ (8001060 <MX_TIM9_Init+0x98>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001000:	4b17      	ldr	r3, [pc, #92]	@ (8001060 <MX_TIM9_Init+0x98>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001006:	4816      	ldr	r0, [pc, #88]	@ (8001060 <MX_TIM9_Init+0x98>)
 8001008:	f004 f900 	bl	800520c <HAL_TIM_PWM_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001012:	f000 faeb 	bl	80015ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001016:	2360      	movs	r3, #96	@ 0x60
 8001018:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	2200      	movs	r2, #0
 800102a:	4619      	mov	r1, r3
 800102c:	480c      	ldr	r0, [pc, #48]	@ (8001060 <MX_TIM9_Init+0x98>)
 800102e:	f004 fb39 	bl	80056a4 <HAL_TIM_PWM_ConfigChannel>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001038:	f000 fad8 	bl	80015ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	2204      	movs	r2, #4
 8001040:	4619      	mov	r1, r3
 8001042:	4807      	ldr	r0, [pc, #28]	@ (8001060 <MX_TIM9_Init+0x98>)
 8001044:	f004 fb2e 	bl	80056a4 <HAL_TIM_PWM_ConfigChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 800104e:	f000 facd 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001052:	4803      	ldr	r0, [pc, #12]	@ (8001060 <MX_TIM9_Init+0x98>)
 8001054:	f000 fe1a 	bl	8001c8c <HAL_TIM_MspPostInit>

}
 8001058:	bf00      	nop
 800105a:	3720      	adds	r7, #32
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200003d0 	.word	0x200003d0
 8001064:	40014000 	.word	0x40014000

08001068 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
 800107c:	615a      	str	r2, [r3, #20]
 800107e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001080:	4b1e      	ldr	r3, [pc, #120]	@ (80010fc <MX_TIM10_Init+0x94>)
 8001082:	4a1f      	ldr	r2, [pc, #124]	@ (8001100 <MX_TIM10_Init+0x98>)
 8001084:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 2-1;
 8001086:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <MX_TIM10_Init+0x94>)
 8001088:	2201      	movs	r2, #1
 800108a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108c:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <MX_TIM10_Init+0x94>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4096-1;
 8001092:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <MX_TIM10_Init+0x94>)
 8001094:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001098:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109a:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <MX_TIM10_Init+0x94>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a0:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <MX_TIM10_Init+0x94>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80010a6:	4815      	ldr	r0, [pc, #84]	@ (80010fc <MX_TIM10_Init+0x94>)
 80010a8:	f004 f861 	bl	800516e <HAL_TIM_Base_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80010b2:	f000 fa9b 	bl	80015ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80010b6:	4811      	ldr	r0, [pc, #68]	@ (80010fc <MX_TIM10_Init+0x94>)
 80010b8:	f004 f8a8 	bl	800520c <HAL_TIM_PWM_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80010c2:	f000 fa93 	bl	80015ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010c6:	2360      	movs	r3, #96	@ 0x60
 80010c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	2200      	movs	r2, #0
 80010da:	4619      	mov	r1, r3
 80010dc:	4807      	ldr	r0, [pc, #28]	@ (80010fc <MX_TIM10_Init+0x94>)
 80010de:	f004 fae1 	bl	80056a4 <HAL_TIM_PWM_ConfigChannel>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80010e8:	f000 fa80 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80010ec:	4803      	ldr	r0, [pc, #12]	@ (80010fc <MX_TIM10_Init+0x94>)
 80010ee:	f000 fdcd 	bl	8001c8c <HAL_TIM_MspPostInit>

}
 80010f2:	bf00      	nop
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000418 	.word	0x20000418
 8001100:	40014400 	.word	0x40014400

08001104 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
 8001118:	615a      	str	r2, [r3, #20]
 800111a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800111c:	4b1e      	ldr	r3, [pc, #120]	@ (8001198 <MX_TIM11_Init+0x94>)
 800111e:	4a1f      	ldr	r2, [pc, #124]	@ (800119c <MX_TIM11_Init+0x98>)
 8001120:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2-1;
 8001122:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <MX_TIM11_Init+0x94>)
 8001124:	2201      	movs	r2, #1
 8001126:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001128:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <MX_TIM11_Init+0x94>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 4096-1;
 800112e:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <MX_TIM11_Init+0x94>)
 8001130:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001134:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001136:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <MX_TIM11_Init+0x94>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113c:	4b16      	ldr	r3, [pc, #88]	@ (8001198 <MX_TIM11_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001142:	4815      	ldr	r0, [pc, #84]	@ (8001198 <MX_TIM11_Init+0x94>)
 8001144:	f004 f813 	bl	800516e <HAL_TIM_Base_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800114e:	f000 fa4d 	bl	80015ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001152:	4811      	ldr	r0, [pc, #68]	@ (8001198 <MX_TIM11_Init+0x94>)
 8001154:	f004 f85a 	bl	800520c <HAL_TIM_PWM_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800115e:	f000 fa45 	bl	80015ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001162:	2360      	movs	r3, #96	@ 0x60
 8001164:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2200      	movs	r2, #0
 8001176:	4619      	mov	r1, r3
 8001178:	4807      	ldr	r0, [pc, #28]	@ (8001198 <MX_TIM11_Init+0x94>)
 800117a:	f004 fa93 	bl	80056a4 <HAL_TIM_PWM_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001184:	f000 fa32 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001188:	4803      	ldr	r0, [pc, #12]	@ (8001198 <MX_TIM11_Init+0x94>)
 800118a:	f000 fd7f 	bl	8001c8c <HAL_TIM_MspPostInit>

}
 800118e:	bf00      	nop
 8001190:	3720      	adds	r7, #32
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000460 	.word	0x20000460
 800119c:	40014800 	.word	0x40014800

080011a0 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
 80011b4:	615a      	str	r2, [r3, #20]
 80011b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80011b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001238 <MX_TIM12_Init+0x98>)
 80011ba:	4a20      	ldr	r2, [pc, #128]	@ (800123c <MX_TIM12_Init+0x9c>)
 80011bc:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 2-1;
 80011be:	4b1e      	ldr	r3, [pc, #120]	@ (8001238 <MX_TIM12_Init+0x98>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001238 <MX_TIM12_Init+0x98>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4096-1;
 80011ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001238 <MX_TIM12_Init+0x98>)
 80011cc:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80011d0:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d2:	4b19      	ldr	r3, [pc, #100]	@ (8001238 <MX_TIM12_Init+0x98>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d8:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <MX_TIM12_Init+0x98>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80011de:	4816      	ldr	r0, [pc, #88]	@ (8001238 <MX_TIM12_Init+0x98>)
 80011e0:	f004 f814 	bl	800520c <HAL_TIM_PWM_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80011ea:	f000 f9ff 	bl	80015ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ee:	2360      	movs	r3, #96	@ 0x60
 80011f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2200      	movs	r2, #0
 8001202:	4619      	mov	r1, r3
 8001204:	480c      	ldr	r0, [pc, #48]	@ (8001238 <MX_TIM12_Init+0x98>)
 8001206:	f004 fa4d 	bl	80056a4 <HAL_TIM_PWM_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001210:	f000 f9ec 	bl	80015ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2204      	movs	r2, #4
 8001218:	4619      	mov	r1, r3
 800121a:	4807      	ldr	r0, [pc, #28]	@ (8001238 <MX_TIM12_Init+0x98>)
 800121c:	f004 fa42 	bl	80056a4 <HAL_TIM_PWM_ConfigChannel>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001226:	f000 f9e1 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800122a:	4803      	ldr	r0, [pc, #12]	@ (8001238 <MX_TIM12_Init+0x98>)
 800122c:	f000 fd2e 	bl	8001c8c <HAL_TIM_MspPostInit>

}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200004a8 	.word	0x200004a8
 800123c:	40001800 	.word	0x40001800

08001240 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
 8001254:	615a      	str	r2, [r3, #20]
 8001256:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001258:	4b1e      	ldr	r3, [pc, #120]	@ (80012d4 <MX_TIM13_Init+0x94>)
 800125a:	4a1f      	ldr	r2, [pc, #124]	@ (80012d8 <MX_TIM13_Init+0x98>)
 800125c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2-1;
 800125e:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <MX_TIM13_Init+0x94>)
 8001260:	2201      	movs	r2, #1
 8001262:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <MX_TIM13_Init+0x94>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 4096-1;
 800126a:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <MX_TIM13_Init+0x94>)
 800126c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001270:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001272:	4b18      	ldr	r3, [pc, #96]	@ (80012d4 <MX_TIM13_Init+0x94>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001278:	4b16      	ldr	r3, [pc, #88]	@ (80012d4 <MX_TIM13_Init+0x94>)
 800127a:	2200      	movs	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800127e:	4815      	ldr	r0, [pc, #84]	@ (80012d4 <MX_TIM13_Init+0x94>)
 8001280:	f003 ff75 	bl	800516e <HAL_TIM_Base_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800128a:	f000 f9af 	bl	80015ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800128e:	4811      	ldr	r0, [pc, #68]	@ (80012d4 <MX_TIM13_Init+0x94>)
 8001290:	f003 ffbc 	bl	800520c <HAL_TIM_PWM_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800129a:	f000 f9a7 	bl	80015ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800129e:	2360      	movs	r3, #96	@ 0x60
 80012a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2200      	movs	r2, #0
 80012b2:	4619      	mov	r1, r3
 80012b4:	4807      	ldr	r0, [pc, #28]	@ (80012d4 <MX_TIM13_Init+0x94>)
 80012b6:	f004 f9f5 	bl	80056a4 <HAL_TIM_PWM_ConfigChannel>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80012c0:	f000 f994 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80012c4:	4803      	ldr	r0, [pc, #12]	@ (80012d4 <MX_TIM13_Init+0x94>)
 80012c6:	f000 fce1 	bl	8001c8c <HAL_TIM_MspPostInit>

}
 80012ca:	bf00      	nop
 80012cc:	3720      	adds	r7, #32
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200004f0 	.word	0x200004f0
 80012d8:	40001c00 	.word	0x40001c00

080012dc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
 80012f0:	615a      	str	r2, [r3, #20]
 80012f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80012f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001370 <MX_TIM14_Init+0x94>)
 80012f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001374 <MX_TIM14_Init+0x98>)
 80012f8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 2-1;
 80012fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001370 <MX_TIM14_Init+0x94>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001300:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <MX_TIM14_Init+0x94>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4096-1;
 8001306:	4b1a      	ldr	r3, [pc, #104]	@ (8001370 <MX_TIM14_Init+0x94>)
 8001308:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800130c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130e:	4b18      	ldr	r3, [pc, #96]	@ (8001370 <MX_TIM14_Init+0x94>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001314:	4b16      	ldr	r3, [pc, #88]	@ (8001370 <MX_TIM14_Init+0x94>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800131a:	4815      	ldr	r0, [pc, #84]	@ (8001370 <MX_TIM14_Init+0x94>)
 800131c:	f003 ff27 	bl	800516e <HAL_TIM_Base_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001326:	f000 f961 	bl	80015ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800132a:	4811      	ldr	r0, [pc, #68]	@ (8001370 <MX_TIM14_Init+0x94>)
 800132c:	f003 ff6e 	bl	800520c <HAL_TIM_PWM_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001336:	f000 f959 	bl	80015ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800133a:	2360      	movs	r3, #96	@ 0x60
 800133c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	2200      	movs	r2, #0
 800134e:	4619      	mov	r1, r3
 8001350:	4807      	ldr	r0, [pc, #28]	@ (8001370 <MX_TIM14_Init+0x94>)
 8001352:	f004 f9a7 	bl	80056a4 <HAL_TIM_PWM_ConfigChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800135c:	f000 f946 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001360:	4803      	ldr	r0, [pc, #12]	@ (8001370 <MX_TIM14_Init+0x94>)
 8001362:	f000 fc93 	bl	8001c8c <HAL_TIM_MspPostInit>

}
 8001366:	bf00      	nop
 8001368:	3720      	adds	r7, #32
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000538 	.word	0x20000538
 8001374:	40002000 	.word	0x40002000

08001378 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <MX_UART4_Init+0x4c>)
 800137e:	4a12      	ldr	r2, [pc, #72]	@ (80013c8 <MX_UART4_Init+0x50>)
 8001380:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001382:	4b10      	ldr	r3, [pc, #64]	@ (80013c4 <MX_UART4_Init+0x4c>)
 8001384:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001388:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <MX_UART4_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <MX_UART4_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	@ (80013c4 <MX_UART4_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <MX_UART4_Init+0x4c>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	@ (80013c4 <MX_UART4_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b06      	ldr	r3, [pc, #24]	@ (80013c4 <MX_UART4_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <MX_UART4_Init+0x4c>)
 80013b0:	f004 fd38 	bl	8005e24 <HAL_UART_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80013ba:	f000 f917 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000580 	.word	0x20000580
 80013c8:	40004c00 	.word	0x40004c00

080013cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013d0:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	@ (800141c <MX_USART2_UART_Init+0x50>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013d6:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 80013f0:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013f2:	2204      	movs	r2, #4
 80013f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b06      	ldr	r3, [pc, #24]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	@ (8001418 <MX_USART2_UART_Init+0x4c>)
 8001404:	f004 fd0e 	bl	8005e24 <HAL_UART_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800140e:	f000 f8ed 	bl	80015ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200005c8 	.word	0x200005c8
 800141c:	40004400 	.word	0x40004400

08001420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	@ 0x30
 8001424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	4b54      	ldr	r3, [pc, #336]	@ (800158c <MX_GPIO_Init+0x16c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a53      	ldr	r2, [pc, #332]	@ (800158c <MX_GPIO_Init+0x16c>)
 8001440:	f043 0310 	orr.w	r3, r3, #16
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b51      	ldr	r3, [pc, #324]	@ (800158c <MX_GPIO_Init+0x16c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	4b4d      	ldr	r3, [pc, #308]	@ (800158c <MX_GPIO_Init+0x16c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a4c      	ldr	r2, [pc, #304]	@ (800158c <MX_GPIO_Init+0x16c>)
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b4a      	ldr	r3, [pc, #296]	@ (800158c <MX_GPIO_Init+0x16c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b46      	ldr	r3, [pc, #280]	@ (800158c <MX_GPIO_Init+0x16c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a45      	ldr	r2, [pc, #276]	@ (800158c <MX_GPIO_Init+0x16c>)
 8001478:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b43      	ldr	r3, [pc, #268]	@ (800158c <MX_GPIO_Init+0x16c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b3f      	ldr	r3, [pc, #252]	@ (800158c <MX_GPIO_Init+0x16c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a3e      	ldr	r2, [pc, #248]	@ (800158c <MX_GPIO_Init+0x16c>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b3c      	ldr	r3, [pc, #240]	@ (800158c <MX_GPIO_Init+0x16c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	4b38      	ldr	r3, [pc, #224]	@ (800158c <MX_GPIO_Init+0x16c>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a37      	ldr	r2, [pc, #220]	@ (800158c <MX_GPIO_Init+0x16c>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b35      	ldr	r3, [pc, #212]	@ (800158c <MX_GPIO_Init+0x16c>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	4b31      	ldr	r3, [pc, #196]	@ (800158c <MX_GPIO_Init+0x16c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a30      	ldr	r2, [pc, #192]	@ (800158c <MX_GPIO_Init+0x16c>)
 80014cc:	f043 0308 	orr.w	r3, r3, #8
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b2e      	ldr	r3, [pc, #184]	@ (800158c <MX_GPIO_Init+0x16c>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CE_1_Pin|CE_2_Pin|GPIO_PIN_7|GPIO_PIN_8
 80014de:	2200      	movs	r2, #0
 80014e0:	f24b 518f 	movw	r1, #46479	@ 0xb58f
 80014e4:	482a      	ldr	r0, [pc, #168]	@ (8001590 <MX_GPIO_Init+0x170>)
 80014e6:	f001 fd71 	bl	8002fcc <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|LB_DIGI_R_Pin|GPIO_PIN_13|GPIO_PIN_15
                          |EXTRA2_DIGI_R_Pin|RF_DIGI_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EXTRA1_DIGI_R_Pin|LF_DIGI_R_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	f242 0120 	movw	r1, #8224	@ 0x2020
 80014f0:	4828      	ldr	r0, [pc, #160]	@ (8001594 <MX_GPIO_Init+0x174>)
 80014f2:	f001 fd6b 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2101      	movs	r1, #1
 80014fa:	4827      	ldr	r0, [pc, #156]	@ (8001598 <MX_GPIO_Init+0x178>)
 80014fc:	f001 fd66 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RB_DIGI_R_GPIO_Port, RB_DIGI_R_Pin, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001506:	4825      	ldr	r0, [pc, #148]	@ (800159c <MX_GPIO_Init+0x17c>)
 8001508:	f001 fd60 	bl	8002fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_1_Pin CE_2_Pin PE7 PE8
                           PE10 LB_DIGI_R_Pin PE13 PE15
                           EXTRA2_DIGI_R_Pin RF_DIGI_R_Pin */
  GPIO_InitStruct.Pin = CE_1_Pin|CE_2_Pin|GPIO_PIN_7|GPIO_PIN_8
 800150c:	f24b 538f 	movw	r3, #46479	@ 0xb58f
 8001510:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|LB_DIGI_R_Pin|GPIO_PIN_13|GPIO_PIN_15
                          |EXTRA2_DIGI_R_Pin|RF_DIGI_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	4619      	mov	r1, r3
 8001524:	481a      	ldr	r0, [pc, #104]	@ (8001590 <MX_GPIO_Init+0x170>)
 8001526:	f001 fab9 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTRA1_DIGI_R_Pin LF_DIGI_R_Pin */
  GPIO_InitStruct.Pin = EXTRA1_DIGI_R_Pin|LF_DIGI_R_Pin;
 800152a:	f242 0320 	movw	r3, #8224	@ 0x2020
 800152e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	2301      	movs	r3, #1
 8001532:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	4619      	mov	r1, r3
 8001542:	4814      	ldr	r0, [pc, #80]	@ (8001594 <MX_GPIO_Init+0x174>)
 8001544:	f001 faaa 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001548:	2301      	movs	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	2301      	movs	r3, #1
 800154e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4619      	mov	r1, r3
 800155e:	480e      	ldr	r0, [pc, #56]	@ (8001598 <MX_GPIO_Init+0x178>)
 8001560:	f001 fa9c 	bl	8002a9c <HAL_GPIO_Init>

  /*Configure GPIO pin : RB_DIGI_R_Pin */
  GPIO_InitStruct.Pin = RB_DIGI_R_Pin;
 8001564:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RB_DIGI_R_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	4619      	mov	r1, r3
 800157c:	4807      	ldr	r0, [pc, #28]	@ (800159c <MX_GPIO_Init+0x17c>)
 800157e:	f001 fa8d 	bl	8002a9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001582:	bf00      	nop
 8001584:	3730      	adds	r7, #48	@ 0x30
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	40021000 	.word	0x40021000
 8001594:	40020800 	.word	0x40020800
 8001598:	40020400 	.word	0x40020400
 800159c:	40020c00 	.word	0x40020c00

080015a0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	 if (huart->Instance == USART2){
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a09      	ldr	r2, [pc, #36]	@ (80015d4 <HAL_UART_RxCpltCallback+0x34>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d10b      	bne.n	80015ca <HAL_UART_RxCpltCallback+0x2a>
	    last_uart_data_time = uwTick;
 80015b2:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <HAL_UART_RxCpltCallback+0x38>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a09      	ldr	r2, [pc, #36]	@ (80015dc <HAL_UART_RxCpltCallback+0x3c>)
 80015b8:	6013      	str	r3, [r2, #0]
	    uart_resetting = 0;  // กลับสู่สถานะปกติเมื่อมีข้อมูลเข้า
 80015ba:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <HAL_UART_RxCpltCallback+0x40>)
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
	    HAL_UART_Receive_IT(&huart2, (uint8_t *)&Str_PS2, sizeof(Str_PS2));
 80015c0:	2208      	movs	r2, #8
 80015c2:	4908      	ldr	r1, [pc, #32]	@ (80015e4 <HAL_UART_RxCpltCallback+0x44>)
 80015c4:	4808      	ldr	r0, [pc, #32]	@ (80015e8 <HAL_UART_RxCpltCallback+0x48>)
 80015c6:	f004 fcaf 	bl	8005f28 <HAL_UART_Receive_IT>
	 }
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40004400 	.word	0x40004400
 80015d8:	20000648 	.word	0x20000648
 80015dc:	2000061c 	.word	0x2000061c
 80015e0:	20000620 	.word	0x20000620
 80015e4:	20000640 	.word	0x20000640
 80015e8:	200005c8 	.word	0x200005c8

080015ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f0:	b672      	cpsid	i
}
 80015f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <Error_Handler+0x8>

080015f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <HAL_MspInit+0x4c>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001606:	4a0f      	ldr	r2, [pc, #60]	@ (8001644 <HAL_MspInit+0x4c>)
 8001608:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800160c:	6453      	str	r3, [r2, #68]	@ 0x44
 800160e:	4b0d      	ldr	r3, [pc, #52]	@ (8001644 <HAL_MspInit+0x4c>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <HAL_MspInit+0x4c>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	4a08      	ldr	r2, [pc, #32]	@ (8001644 <HAL_MspInit+0x4c>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001628:	6413      	str	r3, [r2, #64]	@ 0x40
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_MspInit+0x4c>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800

08001648 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	@ 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a24      	ldr	r2, [pc, #144]	@ (80016f8 <HAL_ADC_MspInit+0xb0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d141      	bne.n	80016ee <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b23      	ldr	r3, [pc, #140]	@ (80016fc <HAL_ADC_MspInit+0xb4>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001672:	4a22      	ldr	r2, [pc, #136]	@ (80016fc <HAL_ADC_MspInit+0xb4>)
 8001674:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001678:	6453      	str	r3, [r2, #68]	@ 0x44
 800167a:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <HAL_ADC_MspInit+0xb4>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <HAL_ADC_MspInit+0xb4>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4a1b      	ldr	r2, [pc, #108]	@ (80016fc <HAL_ADC_MspInit+0xb4>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <HAL_ADC_MspInit+0xb4>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f003 0304 	and.w	r3, r3, #4
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
 80016a6:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <HAL_ADC_MspInit+0xb4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a14      	ldr	r2, [pc, #80]	@ (80016fc <HAL_ADC_MspInit+0xb4>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b12      	ldr	r3, [pc, #72]	@ (80016fc <HAL_ADC_MspInit+0xb4>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016be:	2303      	movs	r3, #3
 80016c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c2:	2303      	movs	r3, #3
 80016c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	480b      	ldr	r0, [pc, #44]	@ (8001700 <HAL_ADC_MspInit+0xb8>)
 80016d2:	f001 f9e3 	bl	8002a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016d6:	2330      	movs	r3, #48	@ 0x30
 80016d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016da:	2303      	movs	r3, #3
 80016dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	4806      	ldr	r0, [pc, #24]	@ (8001704 <HAL_ADC_MspInit+0xbc>)
 80016ea:	f001 f9d7 	bl	8002a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016ee:	bf00      	nop
 80016f0:	3728      	adds	r7, #40	@ 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40012000 	.word	0x40012000
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020800 	.word	0x40020800
 8001704:	40020000 	.word	0x40020000

08001708 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	@ 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a19      	ldr	r2, [pc, #100]	@ (800178c <HAL_I2C_MspInit+0x84>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d12c      	bne.n	8001784 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	613b      	str	r3, [r7, #16]
 800172e:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <HAL_I2C_MspInit+0x88>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a17      	ldr	r2, [pc, #92]	@ (8001790 <HAL_I2C_MspInit+0x88>)
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <HAL_I2C_MspInit+0x88>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001746:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800174a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800174c:	2312      	movs	r3, #18
 800174e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001754:	2303      	movs	r3, #3
 8001756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001758:	2304      	movs	r3, #4
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175c:	f107 0314 	add.w	r3, r7, #20
 8001760:	4619      	mov	r1, r3
 8001762:	480c      	ldr	r0, [pc, #48]	@ (8001794 <HAL_I2C_MspInit+0x8c>)
 8001764:	f001 f99a 	bl	8002a9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <HAL_I2C_MspInit+0x88>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001770:	4a07      	ldr	r2, [pc, #28]	@ (8001790 <HAL_I2C_MspInit+0x88>)
 8001772:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001776:	6413      	str	r3, [r2, #64]	@ 0x40
 8001778:	4b05      	ldr	r3, [pc, #20]	@ (8001790 <HAL_I2C_MspInit+0x88>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001784:	bf00      	nop
 8001786:	3728      	adds	r7, #40	@ 0x28
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40005800 	.word	0x40005800
 8001790:	40023800 	.word	0x40023800
 8001794:	40020400 	.word	0x40020400

08001798 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	@ 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a28      	ldr	r2, [pc, #160]	@ (8001858 <HAL_SPI_MspInit+0xc0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d14a      	bne.n	8001850 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b27      	ldr	r3, [pc, #156]	@ (800185c <HAL_SPI_MspInit+0xc4>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	4a26      	ldr	r2, [pc, #152]	@ (800185c <HAL_SPI_MspInit+0xc4>)
 80017c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ca:	4b24      	ldr	r3, [pc, #144]	@ (800185c <HAL_SPI_MspInit+0xc4>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b20      	ldr	r3, [pc, #128]	@ (800185c <HAL_SPI_MspInit+0xc4>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a1f      	ldr	r2, [pc, #124]	@ (800185c <HAL_SPI_MspInit+0xc4>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <HAL_SPI_MspInit+0xc4>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	4b19      	ldr	r3, [pc, #100]	@ (800185c <HAL_SPI_MspInit+0xc4>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a18      	ldr	r2, [pc, #96]	@ (800185c <HAL_SPI_MspInit+0xc4>)
 80017fc:	f043 0302 	orr.w	r3, r3, #2
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b16      	ldr	r3, [pc, #88]	@ (800185c <HAL_SPI_MspInit+0xc4>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800180e:	230c      	movs	r3, #12
 8001810:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800181e:	2305      	movs	r3, #5
 8001820:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	4619      	mov	r1, r3
 8001828:	480d      	ldr	r0, [pc, #52]	@ (8001860 <HAL_SPI_MspInit+0xc8>)
 800182a:	f001 f937 	bl	8002a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800182e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183c:	2303      	movs	r3, #3
 800183e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001840:	2305      	movs	r3, #5
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	4619      	mov	r1, r3
 800184a:	4806      	ldr	r0, [pc, #24]	@ (8001864 <HAL_SPI_MspInit+0xcc>)
 800184c:	f001 f926 	bl	8002a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001850:	bf00      	nop
 8001852:	3728      	adds	r7, #40	@ 0x28
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40003800 	.word	0x40003800
 800185c:	40023800 	.word	0x40023800
 8001860:	40020800 	.word	0x40020800
 8001864:	40020400 	.word	0x40020400

08001868 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b094      	sub	sp, #80	@ 0x50
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a8c      	ldr	r2, [pc, #560]	@ (8001ab8 <HAL_TIM_Encoder_MspInit+0x250>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d12d      	bne.n	80018e6 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800188e:	4b8b      	ldr	r3, [pc, #556]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001892:	4a8a      	ldr	r2, [pc, #552]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6453      	str	r3, [r2, #68]	@ 0x44
 800189a:	4b88      	ldr	r3, [pc, #544]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80018aa:	4b84      	ldr	r3, [pc, #528]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ae:	4a83      	ldr	r2, [pc, #524]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 80018b0:	f043 0310 	orr.w	r3, r3, #16
 80018b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b6:	4b81      	ldr	r3, [pc, #516]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	f003 0310 	and.w	r3, r3, #16
 80018be:	637b      	str	r3, [r7, #52]	@ 0x34
 80018c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80018c2:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80018c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018cc:	2302      	movs	r3, #2
 80018ce:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d0:	2303      	movs	r3, #3
 80018d2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018d4:	2301      	movs	r3, #1
 80018d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018d8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80018dc:	4619      	mov	r1, r3
 80018de:	4878      	ldr	r0, [pc, #480]	@ (8001ac0 <HAL_TIM_Encoder_MspInit+0x258>)
 80018e0:	f001 f8dc 	bl	8002a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80018e4:	e12b      	b.n	8001b3e <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM2)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018ee:	d14b      	bne.n	8001988 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018f0:	2300      	movs	r3, #0
 80018f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80018f4:	4b71      	ldr	r3, [pc, #452]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 80018f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f8:	4a70      	ldr	r2, [pc, #448]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001900:	4b6e      	ldr	r3, [pc, #440]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 8001902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	633b      	str	r3, [r7, #48]	@ 0x30
 800190a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190c:	2300      	movs	r3, #0
 800190e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001910:	4b6a      	ldr	r3, [pc, #424]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 8001912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001914:	4a69      	ldr	r2, [pc, #420]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6313      	str	r3, [r2, #48]	@ 0x30
 800191c:	4b67      	ldr	r3, [pc, #412]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 800191e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001928:	2300      	movs	r3, #0
 800192a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800192c:	4b63      	ldr	r3, [pc, #396]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001930:	4a62      	ldr	r2, [pc, #392]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 8001932:	f043 0302 	orr.w	r3, r3, #2
 8001936:	6313      	str	r3, [r2, #48]	@ 0x30
 8001938:	4b60      	ldr	r3, [pc, #384]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = EN_X_A_Pin;
 8001944:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001948:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001956:	2301      	movs	r3, #1
 8001958:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(EN_X_A_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800195e:	4619      	mov	r1, r3
 8001960:	4858      	ldr	r0, [pc, #352]	@ (8001ac4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001962:	f001 f89b 	bl	8002a9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EN_X_B_Pin;
 8001966:	2308      	movs	r3, #8
 8001968:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001976:	2301      	movs	r3, #1
 8001978:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(EN_X_B_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800197e:	4619      	mov	r1, r3
 8001980:	4851      	ldr	r0, [pc, #324]	@ (8001ac8 <HAL_TIM_Encoder_MspInit+0x260>)
 8001982:	f001 f88b 	bl	8002a9c <HAL_GPIO_Init>
}
 8001986:	e0da      	b.n	8001b3e <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM3)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a4f      	ldr	r2, [pc, #316]	@ (8001acc <HAL_TIM_Encoder_MspInit+0x264>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d12c      	bne.n	80019ec <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	@ 0x24
 8001996:	4b49      	ldr	r3, [pc, #292]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	4a48      	ldr	r2, [pc, #288]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a2:	4b46      	ldr	r3, [pc, #280]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	623b      	str	r3, [r7, #32]
 80019b2:	4b42      	ldr	r3, [pc, #264]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	4a41      	ldr	r2, [pc, #260]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019be:	4b3f      	ldr	r3, [pc, #252]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	623b      	str	r3, [r7, #32]
 80019c8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = EN_Y_A_Pin|EN_Y_B_Pin;
 80019ca:	2330      	movs	r3, #48	@ 0x30
 80019cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019d2:	2302      	movs	r3, #2
 80019d4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019da:	2302      	movs	r3, #2
 80019dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019de:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80019e2:	4619      	mov	r1, r3
 80019e4:	4838      	ldr	r0, [pc, #224]	@ (8001ac8 <HAL_TIM_Encoder_MspInit+0x260>)
 80019e6:	f001 f859 	bl	8002a9c <HAL_GPIO_Init>
}
 80019ea:	e0a8      	b.n	8001b3e <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM4)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a37      	ldr	r2, [pc, #220]	@ (8001ad0 <HAL_TIM_Encoder_MspInit+0x268>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d12d      	bne.n	8001a52 <HAL_TIM_Encoder_MspInit+0x1ea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	4b30      	ldr	r3, [pc, #192]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	4a2f      	ldr	r2, [pc, #188]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a06:	4b2d      	ldr	r3, [pc, #180]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	4b29      	ldr	r3, [pc, #164]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	4a28      	ldr	r2, [pc, #160]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 8001a1c:	f043 0308 	orr.w	r3, r3, #8
 8001a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a22:	4b26      	ldr	r3, [pc, #152]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	61bb      	str	r3, [r7, #24]
 8001a2c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a2e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a40:	2302      	movs	r3, #2
 8001a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a44:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4822      	ldr	r0, [pc, #136]	@ (8001ad4 <HAL_TIM_Encoder_MspInit+0x26c>)
 8001a4c:	f001 f826 	bl	8002a9c <HAL_GPIO_Init>
}
 8001a50:	e075      	b.n	8001b3e <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM5)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a20      	ldr	r2, [pc, #128]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d13f      	bne.n	8001adc <HAL_TIM_Encoder_MspInit+0x274>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	4b16      	ldr	r3, [pc, #88]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	4a15      	ldr	r2, [pc, #84]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 8001a66:	f043 0308 	orr.w	r3, r3, #8
 8001a6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6c:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a70:	f003 0308 	and.w	r3, r3, #8
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a80:	4a0e      	ldr	r2, [pc, #56]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a88:	4b0c      	ldr	r3, [pc, #48]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x254>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a94:	2303      	movs	r3, #3
 8001a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001aac:	4619      	mov	r1, r3
 8001aae:	4805      	ldr	r0, [pc, #20]	@ (8001ac4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001ab0:	f000 fff4 	bl	8002a9c <HAL_GPIO_Init>
}
 8001ab4:	e043      	b.n	8001b3e <HAL_TIM_Encoder_MspInit+0x2d6>
 8001ab6:	bf00      	nop
 8001ab8:	40010000 	.word	0x40010000
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	40000400 	.word	0x40000400
 8001ad0:	40000800 	.word	0x40000800
 8001ad4:	40020c00 	.word	0x40020c00
 8001ad8:	40000c00 	.word	0x40000c00
  else if(htim_encoder->Instance==TIM8)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a19      	ldr	r2, [pc, #100]	@ (8001b48 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d12b      	bne.n	8001b3e <HAL_TIM_Encoder_MspInit+0x2d6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	4a17      	ldr	r2, [pc, #92]	@ (8001b4c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001af0:	f043 0302 	orr.w	r3, r3, #2
 8001af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001af6:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	4a10      	ldr	r2, [pc, #64]	@ (8001b4c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001b0c:	f043 0304 	orr.w	r3, r3, #4
 8001b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b12:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b1e:	23c0      	movs	r3, #192	@ 0xc0
 8001b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b26:	2302      	movs	r3, #2
 8001b28:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b32:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b36:	4619      	mov	r1, r3
 8001b38:	4805      	ldr	r0, [pc, #20]	@ (8001b50 <HAL_TIM_Encoder_MspInit+0x2e8>)
 8001b3a:	f000 ffaf 	bl	8002a9c <HAL_GPIO_Init>
}
 8001b3e:	bf00      	nop
 8001b40:	3750      	adds	r7, #80	@ 0x50
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40010400 	.word	0x40010400
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020800 	.word	0x40020800

08001b54 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a15      	ldr	r2, [pc, #84]	@ (8001bb8 <HAL_TIM_PWM_MspInit+0x64>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d10e      	bne.n	8001b84 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <HAL_TIM_PWM_MspInit+0x68>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6e:	4a13      	ldr	r2, [pc, #76]	@ (8001bbc <HAL_TIM_PWM_MspInit+0x68>)
 8001b70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <HAL_TIM_PWM_MspInit+0x68>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001b82:	e012      	b.n	8001baa <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc0 <HAL_TIM_PWM_MspInit+0x6c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d10d      	bne.n	8001baa <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <HAL_TIM_PWM_MspInit+0x68>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b96:	4a09      	ldr	r2, [pc, #36]	@ (8001bbc <HAL_TIM_PWM_MspInit+0x68>)
 8001b98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b9e:	4b07      	ldr	r3, [pc, #28]	@ (8001bbc <HAL_TIM_PWM_MspInit+0x68>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40014000 	.word	0x40014000
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40001800 	.word	0x40001800

08001bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a29      	ldr	r2, [pc, #164]	@ (8001c78 <HAL_TIM_Base_MspInit+0xb4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d10e      	bne.n	8001bf4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	4b28      	ldr	r3, [pc, #160]	@ (8001c7c <HAL_TIM_Base_MspInit+0xb8>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bde:	4a27      	ldr	r2, [pc, #156]	@ (8001c7c <HAL_TIM_Base_MspInit+0xb8>)
 8001be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001be6:	4b25      	ldr	r3, [pc, #148]	@ (8001c7c <HAL_TIM_Base_MspInit+0xb8>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001bf2:	e03a      	b.n	8001c6a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a21      	ldr	r2, [pc, #132]	@ (8001c80 <HAL_TIM_Base_MspInit+0xbc>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d10e      	bne.n	8001c1c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	4b1e      	ldr	r3, [pc, #120]	@ (8001c7c <HAL_TIM_Base_MspInit+0xb8>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c06:	4a1d      	ldr	r2, [pc, #116]	@ (8001c7c <HAL_TIM_Base_MspInit+0xb8>)
 8001c08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c7c <HAL_TIM_Base_MspInit+0xb8>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c16:	613b      	str	r3, [r7, #16]
 8001c18:	693b      	ldr	r3, [r7, #16]
}
 8001c1a:	e026      	b.n	8001c6a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM13)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a18      	ldr	r2, [pc, #96]	@ (8001c84 <HAL_TIM_Base_MspInit+0xc0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d10e      	bne.n	8001c44 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b14      	ldr	r3, [pc, #80]	@ (8001c7c <HAL_TIM_Base_MspInit+0xb8>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	4a13      	ldr	r2, [pc, #76]	@ (8001c7c <HAL_TIM_Base_MspInit+0xb8>)
 8001c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c36:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <HAL_TIM_Base_MspInit+0xb8>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
}
 8001c42:	e012      	b.n	8001c6a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM14)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0f      	ldr	r2, [pc, #60]	@ (8001c88 <HAL_TIM_Base_MspInit+0xc4>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d10d      	bne.n	8001c6a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	4b0a      	ldr	r3, [pc, #40]	@ (8001c7c <HAL_TIM_Base_MspInit+0xb8>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	4a09      	ldr	r2, [pc, #36]	@ (8001c7c <HAL_TIM_Base_MspInit+0xb8>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5e:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <HAL_TIM_Base_MspInit+0xb8>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
}
 8001c6a:	bf00      	nop
 8001c6c:	371c      	adds	r7, #28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40014400 	.word	0x40014400
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40014800 	.word	0x40014800
 8001c84:	40001c00 	.word	0x40001c00
 8001c88:	40002000 	.word	0x40002000

08001c8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08e      	sub	sp, #56	@ 0x38
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a6d      	ldr	r2, [pc, #436]	@ (8001e60 <HAL_TIM_MspPostInit+0x1d4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d11e      	bne.n	8001cec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
 8001cb2:	4b6c      	ldr	r3, [pc, #432]	@ (8001e64 <HAL_TIM_MspPostInit+0x1d8>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	4a6b      	ldr	r2, [pc, #428]	@ (8001e64 <HAL_TIM_MspPostInit+0x1d8>)
 8001cb8:	f043 0310 	orr.w	r3, r3, #16
 8001cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cbe:	4b69      	ldr	r3, [pc, #420]	@ (8001e64 <HAL_TIM_MspPostInit+0x1d8>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	623b      	str	r3, [r7, #32]
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = EXTRA1_PWM_L_Pin|SERVO_1_Pin;
 8001cca:	2360      	movs	r3, #96	@ 0x60
 8001ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4860      	ldr	r0, [pc, #384]	@ (8001e68 <HAL_TIM_MspPostInit+0x1dc>)
 8001ce6:	f000 fed9 	bl	8002a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001cea:	e0b5      	b.n	8001e58 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM10)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a5e      	ldr	r2, [pc, #376]	@ (8001e6c <HAL_TIM_MspPostInit+0x1e0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d11f      	bne.n	8001d36 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	4b5a      	ldr	r3, [pc, #360]	@ (8001e64 <HAL_TIM_MspPostInit+0x1d8>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	4a59      	ldr	r2, [pc, #356]	@ (8001e64 <HAL_TIM_MspPostInit+0x1d8>)
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d06:	4b57      	ldr	r3, [pc, #348]	@ (8001e64 <HAL_TIM_MspPostInit+0x1d8>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	61fb      	str	r3, [r7, #28]
 8001d10:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = EXTRA2_PWM_L_Pin;
 8001d12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001d24:	2303      	movs	r3, #3
 8001d26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(EXTRA2_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001d28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4850      	ldr	r0, [pc, #320]	@ (8001e70 <HAL_TIM_MspPostInit+0x1e4>)
 8001d30:	f000 feb4 	bl	8002a9c <HAL_GPIO_Init>
}
 8001d34:	e090      	b.n	8001e58 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM11)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a4e      	ldr	r2, [pc, #312]	@ (8001e74 <HAL_TIM_MspPostInit+0x1e8>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d11f      	bne.n	8001d80 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d40:	2300      	movs	r3, #0
 8001d42:	61bb      	str	r3, [r7, #24]
 8001d44:	4b47      	ldr	r3, [pc, #284]	@ (8001e64 <HAL_TIM_MspPostInit+0x1d8>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d48:	4a46      	ldr	r2, [pc, #280]	@ (8001e64 <HAL_TIM_MspPostInit+0x1d8>)
 8001d4a:	f043 0302 	orr.w	r3, r3, #2
 8001d4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d50:	4b44      	ldr	r3, [pc, #272]	@ (8001e64 <HAL_TIM_MspPostInit+0x1d8>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	61bb      	str	r3, [r7, #24]
 8001d5a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RF_PWM_L_Pin;
 8001d5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RF_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001d72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d76:	4619      	mov	r1, r3
 8001d78:	483d      	ldr	r0, [pc, #244]	@ (8001e70 <HAL_TIM_MspPostInit+0x1e4>)
 8001d7a:	f000 fe8f 	bl	8002a9c <HAL_GPIO_Init>
}
 8001d7e:	e06b      	b.n	8001e58 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM12)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a3c      	ldr	r2, [pc, #240]	@ (8001e78 <HAL_TIM_MspPostInit+0x1ec>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d11f      	bne.n	8001dca <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	4b35      	ldr	r3, [pc, #212]	@ (8001e64 <HAL_TIM_MspPostInit+0x1d8>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	4a34      	ldr	r2, [pc, #208]	@ (8001e64 <HAL_TIM_MspPostInit+0x1d8>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9a:	4b32      	ldr	r3, [pc, #200]	@ (8001e64 <HAL_TIM_MspPostInit+0x1d8>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LB_PWM_L_Pin|RB_PWM_L_Pin;
 8001da6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001daa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001db8:	2309      	movs	r3, #9
 8001dba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	482b      	ldr	r0, [pc, #172]	@ (8001e70 <HAL_TIM_MspPostInit+0x1e4>)
 8001dc4:	f000 fe6a 	bl	8002a9c <HAL_GPIO_Init>
}
 8001dc8:	e046      	b.n	8001e58 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM13)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a2b      	ldr	r2, [pc, #172]	@ (8001e7c <HAL_TIM_MspPostInit+0x1f0>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d11e      	bne.n	8001e12 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	4b22      	ldr	r3, [pc, #136]	@ (8001e64 <HAL_TIM_MspPostInit+0x1d8>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ddc:	4a21      	ldr	r2, [pc, #132]	@ (8001e64 <HAL_TIM_MspPostInit+0x1d8>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e64 <HAL_TIM_MspPostInit+0x1d8>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO_2_Pin;
 8001df0:	2340      	movs	r3, #64	@ 0x40
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001e00:	2309      	movs	r3, #9
 8001e02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SERVO_2_GPIO_Port, &GPIO_InitStruct);
 8001e04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e08:	4619      	mov	r1, r3
 8001e0a:	481d      	ldr	r0, [pc, #116]	@ (8001e80 <HAL_TIM_MspPostInit+0x1f4>)
 8001e0c:	f000 fe46 	bl	8002a9c <HAL_GPIO_Init>
}
 8001e10:	e022      	b.n	8001e58 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM14)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a1b      	ldr	r2, [pc, #108]	@ (8001e84 <HAL_TIM_MspPostInit+0x1f8>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d11d      	bne.n	8001e58 <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	4b10      	ldr	r3, [pc, #64]	@ (8001e64 <HAL_TIM_MspPostInit+0x1d8>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e24:	4a0f      	ldr	r2, [pc, #60]	@ (8001e64 <HAL_TIM_MspPostInit+0x1d8>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e64 <HAL_TIM_MspPostInit+0x1d8>)
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LF_PWM_L_Pin;
 8001e38:	2380      	movs	r3, #128	@ 0x80
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2300      	movs	r3, #0
 8001e46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001e48:	2309      	movs	r3, #9
 8001e4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LF_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001e4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e50:	4619      	mov	r1, r3
 8001e52:	480b      	ldr	r0, [pc, #44]	@ (8001e80 <HAL_TIM_MspPostInit+0x1f4>)
 8001e54:	f000 fe22 	bl	8002a9c <HAL_GPIO_Init>
}
 8001e58:	bf00      	nop
 8001e5a:	3738      	adds	r7, #56	@ 0x38
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40014000 	.word	0x40014000
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40014400 	.word	0x40014400
 8001e70:	40020400 	.word	0x40020400
 8001e74:	40014800 	.word	0x40014800
 8001e78:	40001800 	.word	0x40001800
 8001e7c:	40001c00 	.word	0x40001c00
 8001e80:	40020000 	.word	0x40020000
 8001e84:	40002000 	.word	0x40002000

08001e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08c      	sub	sp, #48	@ 0x30
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 031c 	add.w	r3, r7, #28
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a36      	ldr	r2, [pc, #216]	@ (8001f80 <HAL_UART_MspInit+0xf8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d12d      	bne.n	8001f06 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61bb      	str	r3, [r7, #24]
 8001eae:	4b35      	ldr	r3, [pc, #212]	@ (8001f84 <HAL_UART_MspInit+0xfc>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	4a34      	ldr	r2, [pc, #208]	@ (8001f84 <HAL_UART_MspInit+0xfc>)
 8001eb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eba:	4b32      	ldr	r3, [pc, #200]	@ (8001f84 <HAL_UART_MspInit+0xfc>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ec2:	61bb      	str	r3, [r7, #24]
 8001ec4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	4b2e      	ldr	r3, [pc, #184]	@ (8001f84 <HAL_UART_MspInit+0xfc>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	4a2d      	ldr	r2, [pc, #180]	@ (8001f84 <HAL_UART_MspInit+0xfc>)
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8001f84 <HAL_UART_MspInit+0xfc>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ee2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	4619      	mov	r1, r3
 8001efe:	4822      	ldr	r0, [pc, #136]	@ (8001f88 <HAL_UART_MspInit+0x100>)
 8001f00:	f000 fdcc 	bl	8002a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f04:	e038      	b.n	8001f78 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a20      	ldr	r2, [pc, #128]	@ (8001f8c <HAL_UART_MspInit+0x104>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d133      	bne.n	8001f78 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f10:	2300      	movs	r3, #0
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	4b1b      	ldr	r3, [pc, #108]	@ (8001f84 <HAL_UART_MspInit+0xfc>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f18:	4a1a      	ldr	r2, [pc, #104]	@ (8001f84 <HAL_UART_MspInit+0xfc>)
 8001f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f20:	4b18      	ldr	r3, [pc, #96]	@ (8001f84 <HAL_UART_MspInit+0xfc>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	4b14      	ldr	r3, [pc, #80]	@ (8001f84 <HAL_UART_MspInit+0xfc>)
 8001f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f34:	4a13      	ldr	r2, [pc, #76]	@ (8001f84 <HAL_UART_MspInit+0xfc>)
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3c:	4b11      	ldr	r3, [pc, #68]	@ (8001f84 <HAL_UART_MspInit+0xfc>)
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f48:	230c      	movs	r3, #12
 8001f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f58:	2307      	movs	r3, #7
 8001f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5c:	f107 031c 	add.w	r3, r7, #28
 8001f60:	4619      	mov	r1, r3
 8001f62:	480b      	ldr	r0, [pc, #44]	@ (8001f90 <HAL_UART_MspInit+0x108>)
 8001f64:	f000 fd9a 	bl	8002a9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	2026      	movs	r0, #38	@ 0x26
 8001f6e:	f000 fcbe 	bl	80028ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f72:	2026      	movs	r0, #38	@ 0x26
 8001f74:	f000 fcd7 	bl	8002926 <HAL_NVIC_EnableIRQ>
}
 8001f78:	bf00      	nop
 8001f7a:	3730      	adds	r7, #48	@ 0x30
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40004c00 	.word	0x40004c00
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020800 	.word	0x40020800
 8001f8c:	40004400 	.word	0x40004400
 8001f90:	40020000 	.word	0x40020000

08001f94 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a12      	ldr	r2, [pc, #72]	@ (8001fec <HAL_UART_MspDeInit+0x58>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d10b      	bne.n	8001fbe <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8001fa6:	4b12      	ldr	r3, [pc, #72]	@ (8001ff0 <HAL_UART_MspDeInit+0x5c>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	4a11      	ldr	r2, [pc, #68]	@ (8001ff0 <HAL_UART_MspDeInit+0x5c>)
 8001fac:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001fb0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 8001fb2:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8001fb6:	480f      	ldr	r0, [pc, #60]	@ (8001ff4 <HAL_UART_MspDeInit+0x60>)
 8001fb8:	f000 ff0c 	bl	8002dd4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001fbc:	e011      	b.n	8001fe2 <HAL_UART_MspDeInit+0x4e>
  else if(huart->Instance==USART2)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff8 <HAL_UART_MspDeInit+0x64>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d10c      	bne.n	8001fe2 <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001fc8:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <HAL_UART_MspDeInit+0x5c>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fcc:	4a08      	ldr	r2, [pc, #32]	@ (8001ff0 <HAL_UART_MspDeInit+0x5c>)
 8001fce:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001fd2:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001fd4:	210c      	movs	r1, #12
 8001fd6:	4809      	ldr	r0, [pc, #36]	@ (8001ffc <HAL_UART_MspDeInit+0x68>)
 8001fd8:	f000 fefc 	bl	8002dd4 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001fdc:	2026      	movs	r0, #38	@ 0x26
 8001fde:	f000 fcb0 	bl	8002942 <HAL_NVIC_DisableIRQ>
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40004c00 	.word	0x40004c00
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40004400 	.word	0x40004400
 8001ffc:	40020000 	.word	0x40020000

08002000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <NMI_Handler+0x4>

08002008 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <HardFault_Handler+0x4>

08002010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <MemManage_Handler+0x4>

08002018 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <BusFault_Handler+0x4>

08002020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <UsageFault_Handler+0x4>

08002028 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002056:	f000 f8a5 	bl	80021a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002064:	4802      	ldr	r0, [pc, #8]	@ (8002070 <USART2_IRQHandler+0x10>)
 8002066:	f003 ff85 	bl	8005f74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	200005c8 	.word	0x200005c8

08002074 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002078:	4802      	ldr	r0, [pc, #8]	@ (8002084 <OTG_FS_IRQHandler+0x10>)
 800207a:	f001 fa49 	bl	8003510 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20001d1c 	.word	0x20001d1c

08002088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800208c:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <SystemInit+0x20>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002092:	4a05      	ldr	r2, [pc, #20]	@ (80020a8 <SystemInit+0x20>)
 8002094:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002098:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <Reset_Handler>:
 80020ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020e4 <LoopFillZerobss+0xe>
 80020b0:	f7ff ffea 	bl	8002088 <SystemInit>
 80020b4:	480c      	ldr	r0, [pc, #48]	@ (80020e8 <LoopFillZerobss+0x12>)
 80020b6:	490d      	ldr	r1, [pc, #52]	@ (80020ec <LoopFillZerobss+0x16>)
 80020b8:	4a0d      	ldr	r2, [pc, #52]	@ (80020f0 <LoopFillZerobss+0x1a>)
 80020ba:	2300      	movs	r3, #0
 80020bc:	e002      	b.n	80020c4 <LoopCopyDataInit>

080020be <CopyDataInit>:
 80020be:	58d4      	ldr	r4, [r2, r3]
 80020c0:	50c4      	str	r4, [r0, r3]
 80020c2:	3304      	adds	r3, #4

080020c4 <LoopCopyDataInit>:
 80020c4:	18c4      	adds	r4, r0, r3
 80020c6:	428c      	cmp	r4, r1
 80020c8:	d3f9      	bcc.n	80020be <CopyDataInit>
 80020ca:	4a0a      	ldr	r2, [pc, #40]	@ (80020f4 <LoopFillZerobss+0x1e>)
 80020cc:	4c0a      	ldr	r4, [pc, #40]	@ (80020f8 <LoopFillZerobss+0x22>)
 80020ce:	2300      	movs	r3, #0
 80020d0:	e001      	b.n	80020d6 <LoopFillZerobss>

080020d2 <FillZerobss>:
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	3204      	adds	r2, #4

080020d6 <LoopFillZerobss>:
 80020d6:	42a2      	cmp	r2, r4
 80020d8:	d3fb      	bcc.n	80020d2 <FillZerobss>
 80020da:	f00a f9f7 	bl	800c4cc <__libc_init_array>
 80020de:	f7fe f9eb 	bl	80004b8 <main>
 80020e2:	4770      	bx	lr
 80020e4:	20020000 	.word	0x20020000
 80020e8:	20000000 	.word	0x20000000
 80020ec:	20000110 	.word	0x20000110
 80020f0:	0800c5f0 	.word	0x0800c5f0
 80020f4:	20000110 	.word	0x20000110
 80020f8:	20002420 	.word	0x20002420

080020fc <ADC_IRQHandler>:
 80020fc:	e7fe      	b.n	80020fc <ADC_IRQHandler>
	...

08002100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002104:	4b0e      	ldr	r3, [pc, #56]	@ (8002140 <HAL_Init+0x40>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0d      	ldr	r2, [pc, #52]	@ (8002140 <HAL_Init+0x40>)
 800210a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800210e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002110:	4b0b      	ldr	r3, [pc, #44]	@ (8002140 <HAL_Init+0x40>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0a      	ldr	r2, [pc, #40]	@ (8002140 <HAL_Init+0x40>)
 8002116:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800211a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800211c:	4b08      	ldr	r3, [pc, #32]	@ (8002140 <HAL_Init+0x40>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a07      	ldr	r2, [pc, #28]	@ (8002140 <HAL_Init+0x40>)
 8002122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002126:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002128:	2003      	movs	r0, #3
 800212a:	f000 fbd5 	bl	80028d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800212e:	200f      	movs	r0, #15
 8002130:	f000 f808 	bl	8002144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002134:	f7ff fa60 	bl	80015f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023c00 	.word	0x40023c00

08002144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800214c:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <HAL_InitTick+0x54>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b12      	ldr	r3, [pc, #72]	@ (800219c <HAL_InitTick+0x58>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	4619      	mov	r1, r3
 8002156:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800215a:	fbb3 f3f1 	udiv	r3, r3, r1
 800215e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002162:	4618      	mov	r0, r3
 8002164:	f000 fbfb 	bl	800295e <HAL_SYSTICK_Config>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e00e      	b.n	8002190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b0f      	cmp	r3, #15
 8002176:	d80a      	bhi.n	800218e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002178:	2200      	movs	r2, #0
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	f04f 30ff 	mov.w	r0, #4294967295
 8002180:	f000 fbb5 	bl	80028ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002184:	4a06      	ldr	r2, [pc, #24]	@ (80021a0 <HAL_InitTick+0x5c>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	e000      	b.n	8002190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	2000000c 	.word	0x2000000c
 800219c:	20000014 	.word	0x20000014
 80021a0:	20000010 	.word	0x20000010

080021a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a8:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <HAL_IncTick+0x20>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <HAL_IncTick+0x24>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4413      	add	r3, r2
 80021b4:	4a04      	ldr	r2, [pc, #16]	@ (80021c8 <HAL_IncTick+0x24>)
 80021b6:	6013      	str	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000014 	.word	0x20000014
 80021c8:	20000648 	.word	0x20000648

080021cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return uwTick;
 80021d0:	4b03      	ldr	r3, [pc, #12]	@ (80021e0 <HAL_GetTick+0x14>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000648 	.word	0x20000648

080021e4 <HAL_Delay>:
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)

{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021ec:	f7ff ffee 	bl	80021cc <HAL_GetTick>
 80021f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fc:	d005      	beq.n	800220a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <HAL_Delay+0x44>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4413      	add	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800220a:	bf00      	nop
 800220c:	f7ff ffde 	bl	80021cc <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	429a      	cmp	r2, r3
 800221a:	d8f7      	bhi.n	800220c <HAL_Delay+0x28>
  {
  }
}
 800221c:	bf00      	nop
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000014 	.word	0x20000014

0800222c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e033      	b.n	80022aa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	d109      	bne.n	800225e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f7ff f9fc 	bl	8001648 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	2b00      	cmp	r3, #0
 8002268:	d118      	bne.n	800229c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002272:	f023 0302 	bic.w	r3, r3, #2
 8002276:	f043 0202 	orr.w	r2, r3, #2
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f93a 	bl	80024f8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	f023 0303 	bic.w	r3, r3, #3
 8002292:	f043 0201 	orr.w	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	641a      	str	r2, [r3, #64]	@ 0x40
 800229a:	e001      	b.n	80022a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x1c>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e105      	b.n	80024dc <HAL_ADC_ConfigChannel+0x228>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b09      	cmp	r3, #9
 80022de:	d925      	bls.n	800232c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68d9      	ldr	r1, [r3, #12]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	3b1e      	subs	r3, #30
 80022f6:	2207      	movs	r2, #7
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43da      	mvns	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	400a      	ands	r2, r1
 8002304:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68d9      	ldr	r1, [r3, #12]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	b29b      	uxth	r3, r3
 8002316:	4618      	mov	r0, r3
 8002318:	4603      	mov	r3, r0
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4403      	add	r3, r0
 800231e:	3b1e      	subs	r3, #30
 8002320:	409a      	lsls	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	e022      	b.n	8002372 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6919      	ldr	r1, [r3, #16]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	4613      	mov	r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4413      	add	r3, r2
 8002340:	2207      	movs	r2, #7
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	400a      	ands	r2, r1
 800234e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6919      	ldr	r1, [r3, #16]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	4618      	mov	r0, r3
 8002362:	4603      	mov	r3, r0
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4403      	add	r3, r0
 8002368:	409a      	lsls	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b06      	cmp	r3, #6
 8002378:	d824      	bhi.n	80023c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	3b05      	subs	r3, #5
 800238c:	221f      	movs	r2, #31
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	400a      	ands	r2, r1
 800239a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	3b05      	subs	r3, #5
 80023b6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80023c2:	e04c      	b.n	800245e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b0c      	cmp	r3, #12
 80023ca:	d824      	bhi.n	8002416 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	3b23      	subs	r3, #35	@ 0x23
 80023de:	221f      	movs	r2, #31
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43da      	mvns	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	400a      	ands	r2, r1
 80023ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	4618      	mov	r0, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	3b23      	subs	r3, #35	@ 0x23
 8002408:	fa00 f203 	lsl.w	r2, r0, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	631a      	str	r2, [r3, #48]	@ 0x30
 8002414:	e023      	b.n	800245e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	3b41      	subs	r3, #65	@ 0x41
 8002428:	221f      	movs	r2, #31
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43da      	mvns	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	400a      	ands	r2, r1
 8002436:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	b29b      	uxth	r3, r3
 8002444:	4618      	mov	r0, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	3b41      	subs	r3, #65	@ 0x41
 8002452:	fa00 f203 	lsl.w	r2, r0, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800245e:	4b22      	ldr	r3, [pc, #136]	@ (80024e8 <HAL_ADC_ConfigChannel+0x234>)
 8002460:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a21      	ldr	r2, [pc, #132]	@ (80024ec <HAL_ADC_ConfigChannel+0x238>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d109      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x1cc>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b12      	cmp	r3, #18
 8002472:	d105      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a19      	ldr	r2, [pc, #100]	@ (80024ec <HAL_ADC_ConfigChannel+0x238>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d123      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x21e>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b10      	cmp	r3, #16
 8002490:	d003      	beq.n	800249a <HAL_ADC_ConfigChannel+0x1e6>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b11      	cmp	r3, #17
 8002498:	d11b      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b10      	cmp	r3, #16
 80024ac:	d111      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024ae:	4b10      	ldr	r3, [pc, #64]	@ (80024f0 <HAL_ADC_ConfigChannel+0x23c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a10      	ldr	r2, [pc, #64]	@ (80024f4 <HAL_ADC_ConfigChannel+0x240>)
 80024b4:	fba2 2303 	umull	r2, r3, r2, r3
 80024b8:	0c9a      	lsrs	r2, r3, #18
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024c4:	e002      	b.n	80024cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f9      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	40012300 	.word	0x40012300
 80024ec:	40012000 	.word	0x40012000
 80024f0:	2000000c 	.word	0x2000000c
 80024f4:	431bde83 	.word	0x431bde83

080024f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002500:	4b79      	ldr	r3, [pc, #484]	@ (80026e8 <ADC_Init+0x1f0>)
 8002502:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	431a      	orrs	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800252c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	021a      	lsls	r2, r3, #8
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002550:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002572:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6899      	ldr	r1, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258a:	4a58      	ldr	r2, [pc, #352]	@ (80026ec <ADC_Init+0x1f4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d022      	beq.n	80025d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800259e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6899      	ldr	r1, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	430a      	orrs	r2, r1
 80025b0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6899      	ldr	r1, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	e00f      	b.n	80025f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025f4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0202 	bic.w	r2, r2, #2
 8002604:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6899      	ldr	r1, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	7e1b      	ldrb	r3, [r3, #24]
 8002610:	005a      	lsls	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d01b      	beq.n	800265c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002632:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002642:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6859      	ldr	r1, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264e:	3b01      	subs	r3, #1
 8002650:	035a      	lsls	r2, r3, #13
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	430a      	orrs	r2, r1
 8002658:	605a      	str	r2, [r3, #4]
 800265a:	e007      	b.n	800266c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800266a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800267a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	3b01      	subs	r3, #1
 8002688:	051a      	lsls	r2, r3, #20
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6899      	ldr	r1, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026ae:	025a      	lsls	r2, r3, #9
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	430a      	orrs	r2, r1
 80026b6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6899      	ldr	r1, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	029a      	lsls	r2, r3, #10
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	609a      	str	r2, [r3, #8]
}
 80026dc:	bf00      	nop
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	40012300 	.word	0x40012300
 80026ec:	0f000001 	.word	0x0f000001

080026f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002700:	4b0c      	ldr	r3, [pc, #48]	@ (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800270c:	4013      	ands	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002718:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800271c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002722:	4a04      	ldr	r2, [pc, #16]	@ (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	60d3      	str	r3, [r2, #12]
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800273c:	4b04      	ldr	r3, [pc, #16]	@ (8002750 <__NVIC_GetPriorityGrouping+0x18>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	f003 0307 	and.w	r3, r3, #7
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	2b00      	cmp	r3, #0
 8002764:	db0b      	blt.n	800277e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	4907      	ldr	r1, [pc, #28]	@ (800278c <__NVIC_EnableIRQ+0x38>)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	2001      	movs	r0, #1
 8002776:	fa00 f202 	lsl.w	r2, r0, r2
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000e100 	.word	0xe000e100

08002790 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	db12      	blt.n	80027c8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	490a      	ldr	r1, [pc, #40]	@ (80027d4 <__NVIC_DisableIRQ+0x44>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2001      	movs	r0, #1
 80027b2:	fa00 f202 	lsl.w	r2, r0, r2
 80027b6:	3320      	adds	r3, #32
 80027b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80027bc:	f3bf 8f4f 	dsb	sy
}
 80027c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027c2:	f3bf 8f6f 	isb	sy
}
 80027c6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000e100 	.word	0xe000e100

080027d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	6039      	str	r1, [r7, #0]
 80027e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	db0a      	blt.n	8002802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	490c      	ldr	r1, [pc, #48]	@ (8002824 <__NVIC_SetPriority+0x4c>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	0112      	lsls	r2, r2, #4
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	440b      	add	r3, r1
 80027fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002800:	e00a      	b.n	8002818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4908      	ldr	r1, [pc, #32]	@ (8002828 <__NVIC_SetPriority+0x50>)
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	3b04      	subs	r3, #4
 8002810:	0112      	lsls	r2, r2, #4
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	440b      	add	r3, r1
 8002816:	761a      	strb	r2, [r3, #24]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000e100 	.word	0xe000e100
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	@ 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f1c3 0307 	rsb	r3, r3, #7
 8002846:	2b04      	cmp	r3, #4
 8002848:	bf28      	it	cs
 800284a:	2304      	movcs	r3, #4
 800284c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3304      	adds	r3, #4
 8002852:	2b06      	cmp	r3, #6
 8002854:	d902      	bls.n	800285c <NVIC_EncodePriority+0x30>
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3b03      	subs	r3, #3
 800285a:	e000      	b.n	800285e <NVIC_EncodePriority+0x32>
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	f04f 32ff 	mov.w	r2, #4294967295
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43da      	mvns	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	401a      	ands	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002874:	f04f 31ff 	mov.w	r1, #4294967295
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	43d9      	mvns	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	4313      	orrs	r3, r2
         );
}
 8002886:	4618      	mov	r0, r3
 8002888:	3724      	adds	r7, #36	@ 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028a4:	d301      	bcc.n	80028aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028a6:	2301      	movs	r3, #1
 80028a8:	e00f      	b.n	80028ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028aa:	4a0a      	ldr	r2, [pc, #40]	@ (80028d4 <SysTick_Config+0x40>)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028b2:	210f      	movs	r1, #15
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295
 80028b8:	f7ff ff8e 	bl	80027d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028bc:	4b05      	ldr	r3, [pc, #20]	@ (80028d4 <SysTick_Config+0x40>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c2:	4b04      	ldr	r3, [pc, #16]	@ (80028d4 <SysTick_Config+0x40>)
 80028c4:	2207      	movs	r2, #7
 80028c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	e000e010 	.word	0xe000e010

080028d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff ff05 	bl	80026f0 <__NVIC_SetPriorityGrouping>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	4603      	mov	r3, r0
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002900:	f7ff ff1a 	bl	8002738 <__NVIC_GetPriorityGrouping>
 8002904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	6978      	ldr	r0, [r7, #20]
 800290c:	f7ff ff8e 	bl	800282c <NVIC_EncodePriority>
 8002910:	4602      	mov	r2, r0
 8002912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff5d 	bl	80027d8 <__NVIC_SetPriority>
}
 800291e:	bf00      	nop
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff0d 	bl	8002754 <__NVIC_EnableIRQ>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0
 8002948:	4603      	mov	r3, r0
 800294a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800294c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ff1d 	bl	8002790 <__NVIC_DisableIRQ>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff ff94 	bl	8002894 <SysTick_Config>
 800296c:	4603      	mov	r3, r0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b084      	sub	sp, #16
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002982:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002984:	f7ff fc22 	bl	80021cc <HAL_GetTick>
 8002988:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d008      	beq.n	80029a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2280      	movs	r2, #128	@ 0x80
 800299a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e052      	b.n	8002a4e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0216 	bic.w	r2, r2, #22
 80029b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695a      	ldr	r2, [r3, #20]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d103      	bne.n	80029d8 <HAL_DMA_Abort+0x62>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d007      	beq.n	80029e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0208 	bic.w	r2, r2, #8
 80029e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029f8:	e013      	b.n	8002a22 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029fa:	f7ff fbe7 	bl	80021cc <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b05      	cmp	r3, #5
 8002a06:	d90c      	bls.n	8002a22 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2203      	movs	r2, #3
 8002a12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e015      	b.n	8002a4e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1e4      	bne.n	80029fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a34:	223f      	movs	r2, #63	@ 0x3f
 8002a36:	409a      	lsls	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d004      	beq.n	8002a74 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2280      	movs	r2, #128	@ 0x80
 8002a6e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e00c      	b.n	8002a8e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2205      	movs	r2, #5
 8002a78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0201 	bic.w	r2, r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b089      	sub	sp, #36	@ 0x24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61fb      	str	r3, [r7, #28]
 8002ab6:	e16b      	b.n	8002d90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ab8:	2201      	movs	r2, #1
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	697a      	ldr	r2, [r7, #20]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	f040 815a 	bne.w	8002d8a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d005      	beq.n	8002aee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d130      	bne.n	8002b50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	2203      	movs	r2, #3
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4013      	ands	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b24:	2201      	movs	r2, #1
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	4013      	ands	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	f003 0201 	and.w	r2, r3, #1
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d017      	beq.n	8002b8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	2203      	movs	r2, #3
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0303 	and.w	r3, r3, #3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d123      	bne.n	8002be0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	08da      	lsrs	r2, r3, #3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3208      	adds	r2, #8
 8002ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	220f      	movs	r2, #15
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	08da      	lsrs	r2, r3, #3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	3208      	adds	r2, #8
 8002bda:	69b9      	ldr	r1, [r7, #24]
 8002bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	2203      	movs	r2, #3
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 0203 	and.w	r2, r3, #3
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80b4 	beq.w	8002d8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	4b60      	ldr	r3, [pc, #384]	@ (8002da8 <HAL_GPIO_Init+0x30c>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2a:	4a5f      	ldr	r2, [pc, #380]	@ (8002da8 <HAL_GPIO_Init+0x30c>)
 8002c2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c32:	4b5d      	ldr	r3, [pc, #372]	@ (8002da8 <HAL_GPIO_Init+0x30c>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c3e:	4a5b      	ldr	r2, [pc, #364]	@ (8002dac <HAL_GPIO_Init+0x310>)
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	089b      	lsrs	r3, r3, #2
 8002c44:	3302      	adds	r3, #2
 8002c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	220f      	movs	r2, #15
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a52      	ldr	r2, [pc, #328]	@ (8002db0 <HAL_GPIO_Init+0x314>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d02b      	beq.n	8002cc2 <HAL_GPIO_Init+0x226>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a51      	ldr	r2, [pc, #324]	@ (8002db4 <HAL_GPIO_Init+0x318>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d025      	beq.n	8002cbe <HAL_GPIO_Init+0x222>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a50      	ldr	r2, [pc, #320]	@ (8002db8 <HAL_GPIO_Init+0x31c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01f      	beq.n	8002cba <HAL_GPIO_Init+0x21e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a4f      	ldr	r2, [pc, #316]	@ (8002dbc <HAL_GPIO_Init+0x320>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d019      	beq.n	8002cb6 <HAL_GPIO_Init+0x21a>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a4e      	ldr	r2, [pc, #312]	@ (8002dc0 <HAL_GPIO_Init+0x324>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d013      	beq.n	8002cb2 <HAL_GPIO_Init+0x216>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a4d      	ldr	r2, [pc, #308]	@ (8002dc4 <HAL_GPIO_Init+0x328>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00d      	beq.n	8002cae <HAL_GPIO_Init+0x212>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a4c      	ldr	r2, [pc, #304]	@ (8002dc8 <HAL_GPIO_Init+0x32c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d007      	beq.n	8002caa <HAL_GPIO_Init+0x20e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a4b      	ldr	r2, [pc, #300]	@ (8002dcc <HAL_GPIO_Init+0x330>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d101      	bne.n	8002ca6 <HAL_GPIO_Init+0x20a>
 8002ca2:	2307      	movs	r3, #7
 8002ca4:	e00e      	b.n	8002cc4 <HAL_GPIO_Init+0x228>
 8002ca6:	2308      	movs	r3, #8
 8002ca8:	e00c      	b.n	8002cc4 <HAL_GPIO_Init+0x228>
 8002caa:	2306      	movs	r3, #6
 8002cac:	e00a      	b.n	8002cc4 <HAL_GPIO_Init+0x228>
 8002cae:	2305      	movs	r3, #5
 8002cb0:	e008      	b.n	8002cc4 <HAL_GPIO_Init+0x228>
 8002cb2:	2304      	movs	r3, #4
 8002cb4:	e006      	b.n	8002cc4 <HAL_GPIO_Init+0x228>
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e004      	b.n	8002cc4 <HAL_GPIO_Init+0x228>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e002      	b.n	8002cc4 <HAL_GPIO_Init+0x228>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_GPIO_Init+0x228>
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	69fa      	ldr	r2, [r7, #28]
 8002cc6:	f002 0203 	and.w	r2, r2, #3
 8002cca:	0092      	lsls	r2, r2, #2
 8002ccc:	4093      	lsls	r3, r2
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cd4:	4935      	ldr	r1, [pc, #212]	@ (8002dac <HAL_GPIO_Init+0x310>)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	3302      	adds	r3, #2
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ce2:	4b3b      	ldr	r3, [pc, #236]	@ (8002dd0 <HAL_GPIO_Init+0x334>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d06:	4a32      	ldr	r2, [pc, #200]	@ (8002dd0 <HAL_GPIO_Init+0x334>)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d0c:	4b30      	ldr	r3, [pc, #192]	@ (8002dd0 <HAL_GPIO_Init+0x334>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	43db      	mvns	r3, r3
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d30:	4a27      	ldr	r2, [pc, #156]	@ (8002dd0 <HAL_GPIO_Init+0x334>)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d36:	4b26      	ldr	r3, [pc, #152]	@ (8002dd0 <HAL_GPIO_Init+0x334>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd0 <HAL_GPIO_Init+0x334>)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d60:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd0 <HAL_GPIO_Init+0x334>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d84:	4a12      	ldr	r2, [pc, #72]	@ (8002dd0 <HAL_GPIO_Init+0x334>)
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	61fb      	str	r3, [r7, #28]
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	2b0f      	cmp	r3, #15
 8002d94:	f67f ae90 	bls.w	8002ab8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d98:	bf00      	nop
 8002d9a:	bf00      	nop
 8002d9c:	3724      	adds	r7, #36	@ 0x24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40013800 	.word	0x40013800
 8002db0:	40020000 	.word	0x40020000
 8002db4:	40020400 	.word	0x40020400
 8002db8:	40020800 	.word	0x40020800
 8002dbc:	40020c00 	.word	0x40020c00
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40021400 	.word	0x40021400
 8002dc8:	40021800 	.word	0x40021800
 8002dcc:	40021c00 	.word	0x40021c00
 8002dd0:	40013c00 	.word	0x40013c00

08002dd4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b087      	sub	sp, #28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	e0cd      	b.n	8002f8c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002df0:	2201      	movs	r2, #1
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	f040 80bd 	bne.w	8002f86 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002e0c:	4a65      	ldr	r2, [pc, #404]	@ (8002fa4 <HAL_GPIO_DeInit+0x1d0>)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	089b      	lsrs	r3, r3, #2
 8002e12:	3302      	adds	r3, #2
 8002e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e18:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	220f      	movs	r2, #15
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a5d      	ldr	r2, [pc, #372]	@ (8002fa8 <HAL_GPIO_DeInit+0x1d4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d02b      	beq.n	8002e8e <HAL_GPIO_DeInit+0xba>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a5c      	ldr	r2, [pc, #368]	@ (8002fac <HAL_GPIO_DeInit+0x1d8>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d025      	beq.n	8002e8a <HAL_GPIO_DeInit+0xb6>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a5b      	ldr	r2, [pc, #364]	@ (8002fb0 <HAL_GPIO_DeInit+0x1dc>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01f      	beq.n	8002e86 <HAL_GPIO_DeInit+0xb2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a5a      	ldr	r2, [pc, #360]	@ (8002fb4 <HAL_GPIO_DeInit+0x1e0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d019      	beq.n	8002e82 <HAL_GPIO_DeInit+0xae>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a59      	ldr	r2, [pc, #356]	@ (8002fb8 <HAL_GPIO_DeInit+0x1e4>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_GPIO_DeInit+0xaa>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a58      	ldr	r2, [pc, #352]	@ (8002fbc <HAL_GPIO_DeInit+0x1e8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00d      	beq.n	8002e7a <HAL_GPIO_DeInit+0xa6>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a57      	ldr	r2, [pc, #348]	@ (8002fc0 <HAL_GPIO_DeInit+0x1ec>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <HAL_GPIO_DeInit+0xa2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a56      	ldr	r2, [pc, #344]	@ (8002fc4 <HAL_GPIO_DeInit+0x1f0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_GPIO_DeInit+0x9e>
 8002e6e:	2307      	movs	r3, #7
 8002e70:	e00e      	b.n	8002e90 <HAL_GPIO_DeInit+0xbc>
 8002e72:	2308      	movs	r3, #8
 8002e74:	e00c      	b.n	8002e90 <HAL_GPIO_DeInit+0xbc>
 8002e76:	2306      	movs	r3, #6
 8002e78:	e00a      	b.n	8002e90 <HAL_GPIO_DeInit+0xbc>
 8002e7a:	2305      	movs	r3, #5
 8002e7c:	e008      	b.n	8002e90 <HAL_GPIO_DeInit+0xbc>
 8002e7e:	2304      	movs	r3, #4
 8002e80:	e006      	b.n	8002e90 <HAL_GPIO_DeInit+0xbc>
 8002e82:	2303      	movs	r3, #3
 8002e84:	e004      	b.n	8002e90 <HAL_GPIO_DeInit+0xbc>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e002      	b.n	8002e90 <HAL_GPIO_DeInit+0xbc>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <HAL_GPIO_DeInit+0xbc>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	f002 0203 	and.w	r2, r2, #3
 8002e96:	0092      	lsls	r2, r2, #2
 8002e98:	4093      	lsls	r3, r2
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d132      	bne.n	8002f06 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002ea0:	4b49      	ldr	r3, [pc, #292]	@ (8002fc8 <HAL_GPIO_DeInit+0x1f4>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	4947      	ldr	r1, [pc, #284]	@ (8002fc8 <HAL_GPIO_DeInit+0x1f4>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002eae:	4b46      	ldr	r3, [pc, #280]	@ (8002fc8 <HAL_GPIO_DeInit+0x1f4>)
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	4944      	ldr	r1, [pc, #272]	@ (8002fc8 <HAL_GPIO_DeInit+0x1f4>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002ebc:	4b42      	ldr	r3, [pc, #264]	@ (8002fc8 <HAL_GPIO_DeInit+0x1f4>)
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	4940      	ldr	r1, [pc, #256]	@ (8002fc8 <HAL_GPIO_DeInit+0x1f4>)
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002eca:	4b3f      	ldr	r3, [pc, #252]	@ (8002fc8 <HAL_GPIO_DeInit+0x1f4>)
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	493d      	ldr	r1, [pc, #244]	@ (8002fc8 <HAL_GPIO_DeInit+0x1f4>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	220f      	movs	r2, #15
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002ee8:	4a2e      	ldr	r2, [pc, #184]	@ (8002fa4 <HAL_GPIO_DeInit+0x1d0>)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	089b      	lsrs	r3, r3, #2
 8002eee:	3302      	adds	r3, #2
 8002ef0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	482a      	ldr	r0, [pc, #168]	@ (8002fa4 <HAL_GPIO_DeInit+0x1d0>)
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	089b      	lsrs	r3, r3, #2
 8002efe:	400a      	ands	r2, r1
 8002f00:	3302      	adds	r3, #2
 8002f02:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	2103      	movs	r1, #3
 8002f10:	fa01 f303 	lsl.w	r3, r1, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	401a      	ands	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	08da      	lsrs	r2, r3, #3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3208      	adds	r2, #8
 8002f24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	220f      	movs	r2, #15
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	08d2      	lsrs	r2, r2, #3
 8002f3c:	4019      	ands	r1, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3208      	adds	r2, #8
 8002f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	2103      	movs	r1, #3
 8002f50:	fa01 f303 	lsl.w	r3, r1, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	401a      	ands	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	2101      	movs	r1, #1
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	401a      	ands	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	2103      	movs	r1, #3
 8002f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	401a      	ands	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b0f      	cmp	r3, #15
 8002f90:	f67f af2e 	bls.w	8002df0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40013800 	.word	0x40013800
 8002fa8:	40020000 	.word	0x40020000
 8002fac:	40020400 	.word	0x40020400
 8002fb0:	40020800 	.word	0x40020800
 8002fb4:	40020c00 	.word	0x40020c00
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40021400 	.word	0x40021400
 8002fc0:	40021800 	.word	0x40021800
 8002fc4:	40021c00 	.word	0x40021c00
 8002fc8:	40013c00 	.word	0x40013c00

08002fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	807b      	strh	r3, [r7, #2]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fdc:	787b      	ldrb	r3, [r7, #1]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fe8:	e003      	b.n	8002ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fea:	887b      	ldrh	r3, [r7, #2]
 8002fec:	041a      	lsls	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	619a      	str	r2, [r3, #24]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e12b      	b.n	800326a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fe fb6e 	bl	8001708 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2224      	movs	r2, #36	@ 0x24
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003052:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003062:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003064:	f001 ffd2 	bl	800500c <HAL_RCC_GetPCLK1Freq>
 8003068:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4a81      	ldr	r2, [pc, #516]	@ (8003274 <HAL_I2C_Init+0x274>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d807      	bhi.n	8003084 <HAL_I2C_Init+0x84>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4a80      	ldr	r2, [pc, #512]	@ (8003278 <HAL_I2C_Init+0x278>)
 8003078:	4293      	cmp	r3, r2
 800307a:	bf94      	ite	ls
 800307c:	2301      	movls	r3, #1
 800307e:	2300      	movhi	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	e006      	b.n	8003092 <HAL_I2C_Init+0x92>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4a7d      	ldr	r2, [pc, #500]	@ (800327c <HAL_I2C_Init+0x27c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	bf94      	ite	ls
 800308c:	2301      	movls	r3, #1
 800308e:	2300      	movhi	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e0e7      	b.n	800326a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4a78      	ldr	r2, [pc, #480]	@ (8003280 <HAL_I2C_Init+0x280>)
 800309e:	fba2 2303 	umull	r2, r3, r2, r3
 80030a2:	0c9b      	lsrs	r3, r3, #18
 80030a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4a6a      	ldr	r2, [pc, #424]	@ (8003274 <HAL_I2C_Init+0x274>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d802      	bhi.n	80030d4 <HAL_I2C_Init+0xd4>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	3301      	adds	r3, #1
 80030d2:	e009      	b.n	80030e8 <HAL_I2C_Init+0xe8>
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	4a69      	ldr	r2, [pc, #420]	@ (8003284 <HAL_I2C_Init+0x284>)
 80030e0:	fba2 2303 	umull	r2, r3, r2, r3
 80030e4:	099b      	lsrs	r3, r3, #6
 80030e6:	3301      	adds	r3, #1
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	430b      	orrs	r3, r1
 80030ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	495c      	ldr	r1, [pc, #368]	@ (8003274 <HAL_I2C_Init+0x274>)
 8003104:	428b      	cmp	r3, r1
 8003106:	d819      	bhi.n	800313c <HAL_I2C_Init+0x13c>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	1e59      	subs	r1, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	fbb1 f3f3 	udiv	r3, r1, r3
 8003116:	1c59      	adds	r1, r3, #1
 8003118:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800311c:	400b      	ands	r3, r1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_I2C_Init+0x138>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1e59      	subs	r1, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003130:	3301      	adds	r3, #1
 8003132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003136:	e051      	b.n	80031dc <HAL_I2C_Init+0x1dc>
 8003138:	2304      	movs	r3, #4
 800313a:	e04f      	b.n	80031dc <HAL_I2C_Init+0x1dc>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d111      	bne.n	8003168 <HAL_I2C_Init+0x168>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1e58      	subs	r0, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	440b      	add	r3, r1
 8003152:	fbb0 f3f3 	udiv	r3, r0, r3
 8003156:	3301      	adds	r3, #1
 8003158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800315c:	2b00      	cmp	r3, #0
 800315e:	bf0c      	ite	eq
 8003160:	2301      	moveq	r3, #1
 8003162:	2300      	movne	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	e012      	b.n	800318e <HAL_I2C_Init+0x18e>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	1e58      	subs	r0, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	0099      	lsls	r1, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	fbb0 f3f3 	udiv	r3, r0, r3
 800317e:	3301      	adds	r3, #1
 8003180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003184:	2b00      	cmp	r3, #0
 8003186:	bf0c      	ite	eq
 8003188:	2301      	moveq	r3, #1
 800318a:	2300      	movne	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_Init+0x196>
 8003192:	2301      	movs	r3, #1
 8003194:	e022      	b.n	80031dc <HAL_I2C_Init+0x1dc>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10e      	bne.n	80031bc <HAL_I2C_Init+0x1bc>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1e58      	subs	r0, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6859      	ldr	r1, [r3, #4]
 80031a6:	460b      	mov	r3, r1
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	440b      	add	r3, r1
 80031ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b0:	3301      	adds	r3, #1
 80031b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031ba:	e00f      	b.n	80031dc <HAL_I2C_Init+0x1dc>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1e58      	subs	r0, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6859      	ldr	r1, [r3, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	0099      	lsls	r1, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d2:	3301      	adds	r3, #1
 80031d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	6809      	ldr	r1, [r1, #0]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69da      	ldr	r2, [r3, #28]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800320a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6911      	ldr	r1, [r2, #16]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	68d2      	ldr	r2, [r2, #12]
 8003216:	4311      	orrs	r1, r2
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	430b      	orrs	r3, r1
 800321e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	000186a0 	.word	0x000186a0
 8003278:	001e847f 	.word	0x001e847f
 800327c:	003d08ff 	.word	0x003d08ff
 8003280:	431bde83 	.word	0x431bde83
 8003284:	10624dd3 	.word	0x10624dd3

08003288 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af02      	add	r7, sp, #8
 800328e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e101      	b.n	800349e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d106      	bne.n	80032ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f008 fded 	bl	800be94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2203      	movs	r2, #3
 80032be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032c8:	d102      	bne.n	80032d0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f003 fe62 	bl	8006f9e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	7c1a      	ldrb	r2, [r3, #16]
 80032e2:	f88d 2000 	strb.w	r2, [sp]
 80032e6:	3304      	adds	r3, #4
 80032e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032ea:	f003 fd41 	bl	8006d70 <USB_CoreInit>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0ce      	b.n	800349e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2100      	movs	r1, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f003 fe5a 	bl	8006fc0 <USB_SetCurrentMode>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d005      	beq.n	800331e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2202      	movs	r2, #2
 8003316:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e0bf      	b.n	800349e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800331e:	2300      	movs	r3, #0
 8003320:	73fb      	strb	r3, [r7, #15]
 8003322:	e04a      	b.n	80033ba <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003324:	7bfa      	ldrb	r2, [r7, #15]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	3315      	adds	r3, #21
 8003334:	2201      	movs	r2, #1
 8003336:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003338:	7bfa      	ldrb	r2, [r7, #15]
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	4613      	mov	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	440b      	add	r3, r1
 8003346:	3314      	adds	r3, #20
 8003348:	7bfa      	ldrb	r2, [r7, #15]
 800334a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800334c:	7bfa      	ldrb	r2, [r7, #15]
 800334e:	7bfb      	ldrb	r3, [r7, #15]
 8003350:	b298      	uxth	r0, r3
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	332e      	adds	r3, #46	@ 0x2e
 8003360:	4602      	mov	r2, r0
 8003362:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003364:	7bfa      	ldrb	r2, [r7, #15]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	3318      	adds	r3, #24
 8003374:	2200      	movs	r2, #0
 8003376:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003378:	7bfa      	ldrb	r2, [r7, #15]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	331c      	adds	r3, #28
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800338c:	7bfa      	ldrb	r2, [r7, #15]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	3320      	adds	r3, #32
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033a0:	7bfa      	ldrb	r2, [r7, #15]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	440b      	add	r3, r1
 80033ae:	3324      	adds	r3, #36	@ 0x24
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
 80033b6:	3301      	adds	r3, #1
 80033b8:	73fb      	strb	r3, [r7, #15]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	791b      	ldrb	r3, [r3, #4]
 80033be:	7bfa      	ldrb	r2, [r7, #15]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d3af      	bcc.n	8003324 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033c4:	2300      	movs	r3, #0
 80033c6:	73fb      	strb	r3, [r7, #15]
 80033c8:	e044      	b.n	8003454 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033ca:	7bfa      	ldrb	r2, [r7, #15]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80033dc:	2200      	movs	r2, #0
 80033de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033e0:	7bfa      	ldrb	r2, [r7, #15]
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80033f2:	7bfa      	ldrb	r2, [r7, #15]
 80033f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033f6:	7bfa      	ldrb	r2, [r7, #15]
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	4413      	add	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003408:	2200      	movs	r2, #0
 800340a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800340c:	7bfa      	ldrb	r2, [r7, #15]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	4413      	add	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800341e:	2200      	movs	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003422:	7bfa      	ldrb	r2, [r7, #15]
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003438:	7bfa      	ldrb	r2, [r7, #15]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4413      	add	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800344a:	2200      	movs	r2, #0
 800344c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	3301      	adds	r3, #1
 8003452:	73fb      	strb	r3, [r7, #15]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	791b      	ldrb	r3, [r3, #4]
 8003458:	7bfa      	ldrb	r2, [r7, #15]
 800345a:	429a      	cmp	r2, r3
 800345c:	d3b5      	bcc.n	80033ca <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	7c1a      	ldrb	r2, [r3, #16]
 8003466:	f88d 2000 	strb.w	r2, [sp]
 800346a:	3304      	adds	r3, #4
 800346c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800346e:	f003 fdf3 	bl	8007058 <USB_DevInit>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e00c      	b.n	800349e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f004 fe3d 	bl	8008116 <USB_DevDisconnect>

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_PCD_Start+0x1c>
 80034be:	2302      	movs	r3, #2
 80034c0:	e022      	b.n	8003508 <HAL_PCD_Start+0x62>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d009      	beq.n	80034ea <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d105      	bne.n	80034ea <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f003 fd44 	bl	8006f7c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f004 fdeb 	bl	80080d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003510:	b590      	push	{r4, r7, lr}
 8003512:	b08d      	sub	sp, #52	@ 0x34
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f004 fea9 	bl	800827e <USB_GetMode>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	f040 848c 	bne.w	8003e4c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4618      	mov	r0, r3
 800353a:	f004 fe0d 	bl	8008158 <USB_ReadInterrupts>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 8482 	beq.w	8003e4a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	0a1b      	lsrs	r3, r3, #8
 8003550:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f004 fdfa 	bl	8008158 <USB_ReadInterrupts>
 8003564:	4603      	mov	r3, r0
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b02      	cmp	r3, #2
 800356c:	d107      	bne.n	800357e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695a      	ldr	r2, [r3, #20]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f002 0202 	and.w	r2, r2, #2
 800357c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f004 fde8 	bl	8008158 <USB_ReadInterrupts>
 8003588:	4603      	mov	r3, r0
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b10      	cmp	r3, #16
 8003590:	d161      	bne.n	8003656 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699a      	ldr	r2, [r3, #24]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0210 	bic.w	r2, r2, #16
 80035a0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f003 020f 	and.w	r2, r3, #15
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	4413      	add	r3, r2
 80035be:	3304      	adds	r3, #4
 80035c0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	0c5b      	lsrs	r3, r3, #17
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d124      	bne.n	8003618 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d035      	beq.n	8003646 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80035e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	461a      	mov	r2, r3
 80035ec:	6a38      	ldr	r0, [r7, #32]
 80035ee:	f004 fc1f 	bl	8007e30 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	091b      	lsrs	r3, r3, #4
 80035fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035fe:	441a      	add	r2, r3
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	695a      	ldr	r2, [r3, #20]
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	091b      	lsrs	r3, r3, #4
 800360c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003610:	441a      	add	r2, r3
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	615a      	str	r2, [r3, #20]
 8003616:	e016      	b.n	8003646 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	0c5b      	lsrs	r3, r3, #17
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	2b06      	cmp	r3, #6
 8003622:	d110      	bne.n	8003646 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800362a:	2208      	movs	r2, #8
 800362c:	4619      	mov	r1, r3
 800362e:	6a38      	ldr	r0, [r7, #32]
 8003630:	f004 fbfe 	bl	8007e30 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	695a      	ldr	r2, [r3, #20]
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	091b      	lsrs	r3, r3, #4
 800363c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003640:	441a      	add	r2, r3
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699a      	ldr	r2, [r3, #24]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0210 	orr.w	r2, r2, #16
 8003654:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f004 fd7c 	bl	8008158 <USB_ReadInterrupts>
 8003660:	4603      	mov	r3, r0
 8003662:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003666:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800366a:	f040 80a7 	bne.w	80037bc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800366e:	2300      	movs	r3, #0
 8003670:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f004 fd81 	bl	800817e <USB_ReadDevAllOutEpInterrupt>
 800367c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800367e:	e099      	b.n	80037b4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 808e 	beq.w	80037a8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003692:	b2d2      	uxtb	r2, r2
 8003694:	4611      	mov	r1, r2
 8003696:	4618      	mov	r0, r3
 8003698:	f004 fda5 	bl	80081e6 <USB_ReadDevOutEPInterrupt>
 800369c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00c      	beq.n	80036c2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80036a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036b4:	461a      	mov	r2, r3
 80036b6:	2301      	movs	r3, #1
 80036b8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80036ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fea3 	bl	8004408 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00c      	beq.n	80036e6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80036cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036d8:	461a      	mov	r2, r3
 80036da:	2308      	movs	r3, #8
 80036dc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80036de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 ff79 	bl	80045d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80036f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f2:	015a      	lsls	r2, r3, #5
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036fc:	461a      	mov	r2, r3
 80036fe:	2310      	movs	r3, #16
 8003700:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d030      	beq.n	800376e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003714:	2b80      	cmp	r3, #128	@ 0x80
 8003716:	d109      	bne.n	800372c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	69fa      	ldr	r2, [r7, #28]
 8003722:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003726:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800372a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800372c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800372e:	4613      	mov	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4413      	add	r3, r2
 800373e:	3304      	adds	r3, #4
 8003740:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	78db      	ldrb	r3, [r3, #3]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d108      	bne.n	800375c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2200      	movs	r2, #0
 800374e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003752:	b2db      	uxtb	r3, r3
 8003754:	4619      	mov	r1, r3
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f008 fca2 	bl	800c0a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800375c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375e:	015a      	lsls	r2, r3, #5
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	4413      	add	r3, r2
 8003764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003768:	461a      	mov	r2, r3
 800376a:	2302      	movs	r3, #2
 800376c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	4413      	add	r3, r2
 8003780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003784:	461a      	mov	r2, r3
 8003786:	2320      	movs	r3, #32
 8003788:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d009      	beq.n	80037a8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	4413      	add	r3, r2
 800379c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037a0:	461a      	mov	r2, r3
 80037a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037a6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80037a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037aa:	3301      	adds	r3, #1
 80037ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80037ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b0:	085b      	lsrs	r3, r3, #1
 80037b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80037b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f47f af62 	bne.w	8003680 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f004 fcc9 	bl	8008158 <USB_ReadInterrupts>
 80037c6:	4603      	mov	r3, r0
 80037c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037d0:	f040 80db 	bne.w	800398a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f004 fcea 	bl	80081b2 <USB_ReadDevAllInEpInterrupt>
 80037de:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80037e0:	2300      	movs	r3, #0
 80037e2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80037e4:	e0cd      	b.n	8003982 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80037e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80c2 	beq.w	8003976 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	4611      	mov	r1, r2
 80037fc:	4618      	mov	r0, r3
 80037fe:	f004 fd10 	bl	8008222 <USB_ReadDevInEPInterrupt>
 8003802:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d057      	beq.n	80038be <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800380e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	2201      	movs	r2, #1
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003822:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	43db      	mvns	r3, r3
 8003828:	69f9      	ldr	r1, [r7, #28]
 800382a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800382e:	4013      	ands	r3, r2
 8003830:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800383e:	461a      	mov	r2, r3
 8003840:	2301      	movs	r3, #1
 8003842:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	799b      	ldrb	r3, [r3, #6]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d132      	bne.n	80038b2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	3320      	adds	r3, #32
 800385c:	6819      	ldr	r1, [r3, #0]
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003862:	4613      	mov	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4403      	add	r3, r0
 800386c:	331c      	adds	r3, #28
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4419      	add	r1, r3
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003876:	4613      	mov	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4403      	add	r3, r0
 8003880:	3320      	adds	r3, #32
 8003882:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003886:	2b00      	cmp	r3, #0
 8003888:	d113      	bne.n	80038b2 <HAL_PCD_IRQHandler+0x3a2>
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800388e:	4613      	mov	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	3324      	adds	r3, #36	@ 0x24
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d108      	bne.n	80038b2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6818      	ldr	r0, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038aa:	461a      	mov	r2, r3
 80038ac:	2101      	movs	r1, #1
 80038ae:	f004 fd17 	bl	80082e0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80038b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	4619      	mov	r1, r3
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f008 fb6c 	bl	800bf96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d008      	beq.n	80038da <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80038c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038d4:	461a      	mov	r2, r3
 80038d6:	2308      	movs	r3, #8
 80038d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f003 0310 	and.w	r3, r3, #16
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80038e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038f0:	461a      	mov	r2, r3
 80038f2:	2310      	movs	r3, #16
 80038f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	4413      	add	r3, r2
 8003908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800390c:	461a      	mov	r2, r3
 800390e:	2340      	movs	r3, #64	@ 0x40
 8003910:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d023      	beq.n	8003964 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800391c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800391e:	6a38      	ldr	r0, [r7, #32]
 8003920:	f003 fcfe 	bl	8007320 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003926:	4613      	mov	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4413      	add	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	3310      	adds	r3, #16
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	4413      	add	r3, r2
 8003934:	3304      	adds	r3, #4
 8003936:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	78db      	ldrb	r3, [r3, #3]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d108      	bne.n	8003952 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	2200      	movs	r2, #0
 8003944:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003948:	b2db      	uxtb	r3, r3
 800394a:	4619      	mov	r1, r3
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f008 fbb9 	bl	800c0c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	4413      	add	r3, r2
 800395a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800395e:	461a      	mov	r2, r3
 8003960:	2302      	movs	r3, #2
 8003962:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800396e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fcbd 	bl	80042f0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003978:	3301      	adds	r3, #1
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800397c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800397e:	085b      	lsrs	r3, r3, #1
 8003980:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003984:	2b00      	cmp	r3, #0
 8003986:	f47f af2e 	bne.w	80037e6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f004 fbe2 	bl	8008158 <USB_ReadInterrupts>
 8003994:	4603      	mov	r3, r0
 8003996:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800399a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800399e:	d122      	bne.n	80039e6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d108      	bne.n	80039d0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80039c6:	2100      	movs	r1, #0
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fea3 	bl	8004714 <HAL_PCDEx_LPM_Callback>
 80039ce:	e002      	b.n	80039d6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f008 fb57 	bl	800c084 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695a      	ldr	r2, [r3, #20]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80039e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f004 fbb4 	bl	8008158 <USB_ReadInterrupts>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039fa:	d112      	bne.n	8003a22 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d102      	bne.n	8003a12 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f008 fb13 	bl	800c038 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695a      	ldr	r2, [r3, #20]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003a20:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f004 fb96 	bl	8008158 <USB_ReadInterrupts>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a36:	f040 80b7 	bne.w	8003ba8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2110      	movs	r1, #16
 8003a54:	4618      	mov	r0, r3
 8003a56:	f003 fc63 	bl	8007320 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a5e:	e046      	b.n	8003aee <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a72:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a84:	0151      	lsls	r1, r2, #5
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	440a      	add	r2, r1
 8003a8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003aa6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ab8:	0151      	lsls	r1, r2, #5
 8003aba:	69fa      	ldr	r2, [r7, #28]
 8003abc:	440a      	add	r2, r1
 8003abe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ac2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ac6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	4413      	add	r3, r2
 8003ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ad8:	0151      	lsls	r1, r2, #5
 8003ada:	69fa      	ldr	r2, [r7, #28]
 8003adc:	440a      	add	r2, r1
 8003ade:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ae2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ae6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aea:	3301      	adds	r3, #1
 8003aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	791b      	ldrb	r3, [r3, #4]
 8003af2:	461a      	mov	r2, r3
 8003af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d3b2      	bcc.n	8003a60 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	69fa      	ldr	r2, [r7, #28]
 8003b04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b08:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003b0c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	7bdb      	ldrb	r3, [r3, #15]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d016      	beq.n	8003b44 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b20:	69fa      	ldr	r2, [r7, #28]
 8003b22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b26:	f043 030b 	orr.w	r3, r3, #11
 8003b2a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b36:	69fa      	ldr	r2, [r7, #28]
 8003b38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b3c:	f043 030b 	orr.w	r3, r3, #11
 8003b40:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b42:	e015      	b.n	8003b70 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	69fa      	ldr	r2, [r7, #28]
 8003b4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b52:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b56:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003b5a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	69fa      	ldr	r2, [r7, #28]
 8003b66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b6a:	f043 030b 	orr.w	r3, r3, #11
 8003b6e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69fa      	ldr	r2, [r7, #28]
 8003b7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b7e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003b82:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b92:	461a      	mov	r2, r3
 8003b94:	f004 fba4 	bl	80082e0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003ba6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f004 fad3 	bl	8008158 <USB_ReadInterrupts>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bbc:	d123      	bne.n	8003c06 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f004 fb69 	bl	800829a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f003 fc20 	bl	8007412 <USB_GetDevSpeed>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681c      	ldr	r4, [r3, #0]
 8003bde:	f001 fa09 	bl	8004ff4 <HAL_RCC_GetHCLKFreq>
 8003be2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003be8:	461a      	mov	r2, r3
 8003bea:	4620      	mov	r0, r4
 8003bec:	f003 f924 	bl	8006e38 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f008 f9f8 	bl	800bfe6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695a      	ldr	r2, [r3, #20]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003c04:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f004 faa4 	bl	8008158 <USB_ReadInterrupts>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d10a      	bne.n	8003c30 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f008 f9d5 	bl	800bfca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695a      	ldr	r2, [r3, #20]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f002 0208 	and.w	r2, r2, #8
 8003c2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f004 fa8f 	bl	8008158 <USB_ReadInterrupts>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c40:	2b80      	cmp	r3, #128	@ 0x80
 8003c42:	d123      	bne.n	8003c8c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c50:	2301      	movs	r3, #1
 8003c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c54:	e014      	b.n	8003c80 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	440b      	add	r3, r1
 8003c64:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d105      	bne.n	8003c7a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	4619      	mov	r1, r3
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 fb0a 	bl	800428e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	791b      	ldrb	r3, [r3, #4]
 8003c84:	461a      	mov	r2, r3
 8003c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d3e4      	bcc.n	8003c56 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f004 fa61 	bl	8008158 <USB_ReadInterrupts>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c9c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ca0:	d13c      	bne.n	8003d1c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ca6:	e02b      	b.n	8003d00 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cb8:	6879      	ldr	r1, [r7, #4]
 8003cba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	3318      	adds	r3, #24
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d115      	bne.n	8003cfa <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003cce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	da12      	bge.n	8003cfa <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cd8:	4613      	mov	r3, r2
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	3317      	adds	r3, #23
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 faca 	bl	800428e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	791b      	ldrb	r3, [r3, #4]
 8003d04:	461a      	mov	r2, r3
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d3cd      	bcc.n	8003ca8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	695a      	ldr	r2, [r3, #20]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003d1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f004 fa19 	bl	8008158 <USB_ReadInterrupts>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d2c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d30:	d156      	bne.n	8003de0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d32:	2301      	movs	r3, #1
 8003d34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d36:	e045      	b.n	8003dc4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d12e      	bne.n	8003dbe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d60:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	da2b      	bge.n	8003dbe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003d72:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d121      	bne.n	8003dbe <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d7e:	4613      	mov	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	440b      	add	r3, r1
 8003d88:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003d98:	6a3b      	ldr	r3, [r7, #32]
 8003d9a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003db6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003dba:	6053      	str	r3, [r2, #4]
            break;
 8003dbc:	e008      	b.n	8003dd0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	791b      	ldrb	r3, [r3, #4]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d3b3      	bcc.n	8003d38 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695a      	ldr	r2, [r3, #20]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003dde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f004 f9b7 	bl	8008158 <USB_ReadInterrupts>
 8003dea:	4603      	mov	r3, r0
 8003dec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df4:	d10a      	bne.n	8003e0c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f008 f976 	bl	800c0e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	695a      	ldr	r2, [r3, #20]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003e0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f004 f9a1 	bl	8008158 <USB_ReadInterrupts>
 8003e16:	4603      	mov	r3, r0
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d115      	bne.n	8003e4c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f008 f966 	bl	800c104 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6859      	ldr	r1, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	605a      	str	r2, [r3, #4]
 8003e48:	e000      	b.n	8003e4c <HAL_PCD_IRQHandler+0x93c>
      return;
 8003e4a:	bf00      	nop
    }
  }
}
 8003e4c:	3734      	adds	r7, #52	@ 0x34
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd90      	pop	{r4, r7, pc}

08003e52 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b082      	sub	sp, #8
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d101      	bne.n	8003e6c <HAL_PCD_SetAddress+0x1a>
 8003e68:	2302      	movs	r3, #2
 8003e6a:	e012      	b.n	8003e92 <HAL_PCD_SetAddress+0x40>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	78fa      	ldrb	r2, [r7, #3]
 8003e78:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	78fa      	ldrb	r2, [r7, #3]
 8003e80:	4611      	mov	r1, r2
 8003e82:	4618      	mov	r0, r3
 8003e84:	f004 f900 	bl	8008088 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
 8003ea2:	4608      	mov	r0, r1
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	70fb      	strb	r3, [r7, #3]
 8003eac:	460b      	mov	r3, r1
 8003eae:	803b      	strh	r3, [r7, #0]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	da0f      	bge.n	8003ee0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	f003 020f 	and.w	r2, r3, #15
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	4413      	add	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	3310      	adds	r3, #16
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2201      	movs	r2, #1
 8003edc:	705a      	strb	r2, [r3, #1]
 8003ede:	e00f      	b.n	8003f00 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	f003 020f 	and.w	r2, r3, #15
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f00:	78fb      	ldrb	r3, [r7, #3]
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003f0c:	883b      	ldrh	r3, [r7, #0]
 8003f0e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	78ba      	ldrb	r2, [r7, #2]
 8003f1a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	785b      	ldrb	r3, [r3, #1]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d004      	beq.n	8003f2e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f2e:	78bb      	ldrb	r3, [r7, #2]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d102      	bne.n	8003f3a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_PCD_EP_Open+0xae>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e00e      	b.n	8003f66 <HAL_PCD_EP_Open+0xcc>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68f9      	ldr	r1, [r7, #12]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f003 fa80 	bl	800745c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003f64:	7afb      	ldrb	r3, [r7, #11]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	460b      	mov	r3, r1
 8003f78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	da0f      	bge.n	8003fa2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f82:	78fb      	ldrb	r3, [r7, #3]
 8003f84:	f003 020f 	and.w	r2, r3, #15
 8003f88:	4613      	mov	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	3310      	adds	r3, #16
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	4413      	add	r3, r2
 8003f96:	3304      	adds	r3, #4
 8003f98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	705a      	strb	r2, [r3, #1]
 8003fa0:	e00f      	b.n	8003fc2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fa2:	78fb      	ldrb	r3, [r7, #3]
 8003fa4:	f003 020f 	and.w	r2, r3, #15
 8003fa8:	4613      	mov	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3304      	adds	r3, #4
 8003fba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_PCD_EP_Close+0x6e>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e00e      	b.n	8003ffa <HAL_PCD_EP_Close+0x8c>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68f9      	ldr	r1, [r7, #12]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f003 fabe 	bl	800756c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b086      	sub	sp, #24
 8004006:	af00      	add	r7, sp, #0
 8004008:	60f8      	str	r0, [r7, #12]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
 800400e:	460b      	mov	r3, r1
 8004010:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004012:	7afb      	ldrb	r3, [r7, #11]
 8004014:	f003 020f 	and.w	r2, r3, #15
 8004018:	4613      	mov	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4413      	add	r3, r2
 8004028:	3304      	adds	r3, #4
 800402a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2200      	movs	r2, #0
 800403c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2200      	movs	r2, #0
 8004042:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004044:	7afb      	ldrb	r3, [r7, #11]
 8004046:	f003 030f 	and.w	r3, r3, #15
 800404a:	b2da      	uxtb	r2, r3
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	799b      	ldrb	r3, [r3, #6]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d102      	bne.n	800405e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6818      	ldr	r0, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	799b      	ldrb	r3, [r3, #6]
 8004066:	461a      	mov	r2, r3
 8004068:	6979      	ldr	r1, [r7, #20]
 800406a:	f003 fb5b 	bl	8007724 <USB_EPStartXfer>

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	f003 020f 	and.w	r2, r3, #15
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	4613      	mov	r3, r2
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	4413      	add	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800409a:	681b      	ldr	r3, [r3, #0]
}
 800409c:	4618      	mov	r0, r3
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	607a      	str	r2, [r7, #4]
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	460b      	mov	r3, r1
 80040b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040b8:	7afb      	ldrb	r3, [r7, #11]
 80040ba:	f003 020f 	and.w	r2, r3, #15
 80040be:	4613      	mov	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	4413      	add	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	3310      	adds	r3, #16
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	3304      	adds	r3, #4
 80040ce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	2200      	movs	r2, #0
 80040e0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2201      	movs	r2, #1
 80040e6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040e8:	7afb      	ldrb	r3, [r7, #11]
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	799b      	ldrb	r3, [r3, #6]
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d102      	bne.n	8004102 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6818      	ldr	r0, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	799b      	ldrb	r3, [r3, #6]
 800410a:	461a      	mov	r2, r3
 800410c:	6979      	ldr	r1, [r7, #20]
 800410e:	f003 fb09 	bl	8007724 <USB_EPStartXfer>

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	460b      	mov	r3, r1
 8004126:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	7912      	ldrb	r2, [r2, #4]
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e04f      	b.n	80041da <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800413a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800413e:	2b00      	cmp	r3, #0
 8004140:	da0f      	bge.n	8004162 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004142:	78fb      	ldrb	r3, [r7, #3]
 8004144:	f003 020f 	and.w	r2, r3, #15
 8004148:	4613      	mov	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	4413      	add	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	3310      	adds	r3, #16
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	4413      	add	r3, r2
 8004156:	3304      	adds	r3, #4
 8004158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	705a      	strb	r2, [r3, #1]
 8004160:	e00d      	b.n	800417e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004162:	78fa      	ldrb	r2, [r7, #3]
 8004164:	4613      	mov	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	4413      	add	r3, r2
 8004174:	3304      	adds	r3, #4
 8004176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2201      	movs	r2, #1
 8004182:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	f003 030f 	and.w	r3, r3, #15
 800418a:	b2da      	uxtb	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_PCD_EP_SetStall+0x82>
 800419a:	2302      	movs	r3, #2
 800419c:	e01d      	b.n	80041da <HAL_PCD_EP_SetStall+0xbe>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68f9      	ldr	r1, [r7, #12]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f003 fe97 	bl	8007ee0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041b2:	78fb      	ldrb	r3, [r7, #3]
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d109      	bne.n	80041d0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6818      	ldr	r0, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	7999      	ldrb	r1, [r3, #6]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041ca:	461a      	mov	r2, r3
 80041cc:	f004 f888 	bl	80082e0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	460b      	mov	r3, r1
 80041ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041ee:	78fb      	ldrb	r3, [r7, #3]
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	7912      	ldrb	r2, [r2, #4]
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d901      	bls.n	8004200 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e042      	b.n	8004286 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004204:	2b00      	cmp	r3, #0
 8004206:	da0f      	bge.n	8004228 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	f003 020f 	and.w	r2, r3, #15
 800420e:	4613      	mov	r3, r2
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	4413      	add	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	3310      	adds	r3, #16
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	4413      	add	r3, r2
 800421c:	3304      	adds	r3, #4
 800421e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	705a      	strb	r2, [r3, #1]
 8004226:	e00f      	b.n	8004248 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004228:	78fb      	ldrb	r3, [r7, #3]
 800422a:	f003 020f 	and.w	r2, r3, #15
 800422e:	4613      	mov	r3, r2
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	4413      	add	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	4413      	add	r3, r2
 800423e:	3304      	adds	r3, #4
 8004240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2200      	movs	r2, #0
 8004246:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800424e:	78fb      	ldrb	r3, [r7, #3]
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	b2da      	uxtb	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_PCD_EP_ClrStall+0x86>
 8004264:	2302      	movs	r3, #2
 8004266:	e00e      	b.n	8004286 <HAL_PCD_EP_ClrStall+0xa4>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68f9      	ldr	r1, [r7, #12]
 8004276:	4618      	mov	r0, r3
 8004278:	f003 fea0 	bl	8007fbc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b084      	sub	sp, #16
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	460b      	mov	r3, r1
 8004298:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800429a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	da0c      	bge.n	80042bc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042a2:	78fb      	ldrb	r3, [r7, #3]
 80042a4:	f003 020f 	and.w	r2, r3, #15
 80042a8:	4613      	mov	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	3310      	adds	r3, #16
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	4413      	add	r3, r2
 80042b6:	3304      	adds	r3, #4
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	e00c      	b.n	80042d6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	f003 020f 	and.w	r2, r3, #15
 80042c2:	4613      	mov	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	4413      	add	r3, r2
 80042d2:	3304      	adds	r3, #4
 80042d4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68f9      	ldr	r1, [r7, #12]
 80042dc:	4618      	mov	r0, r3
 80042de:	f003 fcbf 	bl	8007c60 <USB_EPStopXfer>
 80042e2:	4603      	mov	r3, r0
 80042e4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80042e6:	7afb      	ldrb	r3, [r7, #11]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08a      	sub	sp, #40	@ 0x28
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	4613      	mov	r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	4413      	add	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	3310      	adds	r3, #16
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	4413      	add	r3, r2
 8004314:	3304      	adds	r3, #4
 8004316:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	429a      	cmp	r2, r3
 8004322:	d901      	bls.n	8004328 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e06b      	b.n	8004400 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	429a      	cmp	r2, r3
 800433c:	d902      	bls.n	8004344 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	3303      	adds	r3, #3
 8004348:	089b      	lsrs	r3, r3, #2
 800434a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800434c:	e02a      	b.n	80043a4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	69fa      	ldr	r2, [r7, #28]
 8004360:	429a      	cmp	r2, r3
 8004362:	d902      	bls.n	800436a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	3303      	adds	r3, #3
 800436e:	089b      	lsrs	r3, r3, #2
 8004370:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	68d9      	ldr	r1, [r3, #12]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	b2da      	uxtb	r2, r3
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	4603      	mov	r3, r0
 8004386:	6978      	ldr	r0, [r7, #20]
 8004388:	f003 fd14 	bl	8007db4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	441a      	add	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	695a      	ldr	r2, [r3, #20]
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	441a      	add	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d809      	bhi.n	80043ce <PCD_WriteEmptyTxFifo+0xde>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	695a      	ldr	r2, [r3, #20]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d203      	bcs.n	80043ce <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1bf      	bne.n	800434e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d811      	bhi.n	80043fe <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	2201      	movs	r2, #1
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	43db      	mvns	r3, r3
 80043f4:	6939      	ldr	r1, [r7, #16]
 80043f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043fa:	4013      	ands	r3, r2
 80043fc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3720      	adds	r7, #32
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	333c      	adds	r3, #60	@ 0x3c
 8004420:	3304      	adds	r3, #4
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	015a      	lsls	r2, r3, #5
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	4413      	add	r3, r2
 800442e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	799b      	ldrb	r3, [r3, #6]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d17b      	bne.n	8004536 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b00      	cmp	r3, #0
 8004446:	d015      	beq.n	8004474 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	4a61      	ldr	r2, [pc, #388]	@ (80045d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	f240 80b9 	bls.w	80045c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80b3 	beq.w	80045c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	4413      	add	r3, r2
 8004466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800446a:	461a      	mov	r2, r3
 800446c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004470:	6093      	str	r3, [r2, #8]
 8004472:	e0a7      	b.n	80045c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800448a:	461a      	mov	r2, r3
 800448c:	2320      	movs	r3, #32
 800448e:	6093      	str	r3, [r2, #8]
 8004490:	e098      	b.n	80045c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004498:	2b00      	cmp	r3, #0
 800449a:	f040 8093 	bne.w	80045c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	4a4b      	ldr	r2, [pc, #300]	@ (80045d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d90f      	bls.n	80044c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00a      	beq.n	80044c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044bc:	461a      	mov	r2, r3
 80044be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044c2:	6093      	str	r3, [r2, #8]
 80044c4:	e07e      	b.n	80045c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	4613      	mov	r3, r2
 80044ca:	00db      	lsls	r3, r3, #3
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	4413      	add	r3, r2
 80044d8:	3304      	adds	r3, #4
 80044da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a1a      	ldr	r2, [r3, #32]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	0159      	lsls	r1, r3, #5
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	440b      	add	r3, r1
 80044e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f2:	1ad2      	subs	r2, r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d114      	bne.n	8004528 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d109      	bne.n	800451a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6818      	ldr	r0, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004510:	461a      	mov	r2, r3
 8004512:	2101      	movs	r1, #1
 8004514:	f003 fee4 	bl	80082e0 <USB_EP0_OutStart>
 8004518:	e006      	b.n	8004528 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	441a      	add	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	4619      	mov	r1, r3
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f007 fd16 	bl	800bf60 <HAL_PCD_DataOutStageCallback>
 8004534:	e046      	b.n	80045c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	4a26      	ldr	r2, [pc, #152]	@ (80045d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d124      	bne.n	8004588 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00a      	beq.n	800455e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004554:	461a      	mov	r2, r3
 8004556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800455a:	6093      	str	r3, [r2, #8]
 800455c:	e032      	b.n	80045c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004574:	461a      	mov	r2, r3
 8004576:	2320      	movs	r3, #32
 8004578:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	4619      	mov	r1, r3
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f007 fced 	bl	800bf60 <HAL_PCD_DataOutStageCallback>
 8004586:	e01d      	b.n	80045c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d114      	bne.n	80045b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	4613      	mov	r3, r2
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d108      	bne.n	80045b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80045b0:	461a      	mov	r2, r3
 80045b2:	2100      	movs	r1, #0
 80045b4:	f003 fe94 	bl	80082e0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	4619      	mov	r1, r3
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f007 fcce 	bl	800bf60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3720      	adds	r7, #32
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	4f54300a 	.word	0x4f54300a
 80045d4:	4f54310a 	.word	0x4f54310a

080045d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	333c      	adds	r3, #60	@ 0x3c
 80045f0:	3304      	adds	r3, #4
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4a15      	ldr	r2, [pc, #84]	@ (8004660 <PCD_EP_OutSetupPacket_int+0x88>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d90e      	bls.n	800462c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004614:	2b00      	cmp	r3, #0
 8004616:	d009      	beq.n	800462c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004624:	461a      	mov	r2, r3
 8004626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800462a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f007 fc85 	bl	800bf3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4a0a      	ldr	r2, [pc, #40]	@ (8004660 <PCD_EP_OutSetupPacket_int+0x88>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d90c      	bls.n	8004654 <PCD_EP_OutSetupPacket_int+0x7c>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	799b      	ldrb	r3, [r3, #6]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d108      	bne.n	8004654 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800464c:	461a      	mov	r2, r3
 800464e:	2101      	movs	r1, #1
 8004650:	f003 fe46 	bl	80082e0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	4f54300a 	.word	0x4f54300a

08004664 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	70fb      	strb	r3, [r7, #3]
 8004670:	4613      	mov	r3, r2
 8004672:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d107      	bne.n	8004692 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004682:	883b      	ldrh	r3, [r7, #0]
 8004684:	0419      	lsls	r1, r3, #16
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	430a      	orrs	r2, r1
 800468e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004690:	e028      	b.n	80046e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004698:	0c1b      	lsrs	r3, r3, #16
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	4413      	add	r3, r2
 800469e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80046a0:	2300      	movs	r3, #0
 80046a2:	73fb      	strb	r3, [r7, #15]
 80046a4:	e00d      	b.n	80046c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	3340      	adds	r3, #64	@ 0x40
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	0c1b      	lsrs	r3, r3, #16
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	4413      	add	r3, r2
 80046ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	3301      	adds	r3, #1
 80046c0:	73fb      	strb	r3, [r7, #15]
 80046c2:	7bfa      	ldrb	r2, [r7, #15]
 80046c4:	78fb      	ldrb	r3, [r7, #3]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d3ec      	bcc.n	80046a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80046cc:	883b      	ldrh	r3, [r7, #0]
 80046ce:	0418      	lsls	r0, r3, #16
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6819      	ldr	r1, [r3, #0]
 80046d4:	78fb      	ldrb	r3, [r7, #3]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	4302      	orrs	r2, r0
 80046dc:	3340      	adds	r3, #64	@ 0x40
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	460b      	mov	r3, r1
 80046fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	887a      	ldrh	r2, [r7, #2]
 8004704:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e267      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d075      	beq.n	8004836 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800474a:	4b88      	ldr	r3, [pc, #544]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 030c 	and.w	r3, r3, #12
 8004752:	2b04      	cmp	r3, #4
 8004754:	d00c      	beq.n	8004770 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004756:	4b85      	ldr	r3, [pc, #532]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800475e:	2b08      	cmp	r3, #8
 8004760:	d112      	bne.n	8004788 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004762:	4b82      	ldr	r3, [pc, #520]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800476a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800476e:	d10b      	bne.n	8004788 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004770:	4b7e      	ldr	r3, [pc, #504]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d05b      	beq.n	8004834 <HAL_RCC_OscConfig+0x108>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d157      	bne.n	8004834 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e242      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004790:	d106      	bne.n	80047a0 <HAL_RCC_OscConfig+0x74>
 8004792:	4b76      	ldr	r3, [pc, #472]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a75      	ldr	r2, [pc, #468]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	e01d      	b.n	80047dc <HAL_RCC_OscConfig+0xb0>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047a8:	d10c      	bne.n	80047c4 <HAL_RCC_OscConfig+0x98>
 80047aa:	4b70      	ldr	r3, [pc, #448]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a6f      	ldr	r2, [pc, #444]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	4b6d      	ldr	r3, [pc, #436]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a6c      	ldr	r2, [pc, #432]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	e00b      	b.n	80047dc <HAL_RCC_OscConfig+0xb0>
 80047c4:	4b69      	ldr	r3, [pc, #420]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a68      	ldr	r2, [pc, #416]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	4b66      	ldr	r3, [pc, #408]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a65      	ldr	r2, [pc, #404]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80047d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d013      	beq.n	800480c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e4:	f7fd fcf2 	bl	80021cc <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047ec:	f7fd fcee 	bl	80021cc <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b64      	cmp	r3, #100	@ 0x64
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e207      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fe:	4b5b      	ldr	r3, [pc, #364]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0f0      	beq.n	80047ec <HAL_RCC_OscConfig+0xc0>
 800480a:	e014      	b.n	8004836 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480c:	f7fd fcde 	bl	80021cc <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004814:	f7fd fcda 	bl	80021cc <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b64      	cmp	r3, #100	@ 0x64
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e1f3      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004826:	4b51      	ldr	r3, [pc, #324]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1f0      	bne.n	8004814 <HAL_RCC_OscConfig+0xe8>
 8004832:	e000      	b.n	8004836 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d063      	beq.n	800490a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004842:	4b4a      	ldr	r3, [pc, #296]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 030c 	and.w	r3, r3, #12
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00b      	beq.n	8004866 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800484e:	4b47      	ldr	r3, [pc, #284]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004856:	2b08      	cmp	r3, #8
 8004858:	d11c      	bne.n	8004894 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800485a:	4b44      	ldr	r3, [pc, #272]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d116      	bne.n	8004894 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004866:	4b41      	ldr	r3, [pc, #260]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <HAL_RCC_OscConfig+0x152>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d001      	beq.n	800487e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e1c7      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487e:	4b3b      	ldr	r3, [pc, #236]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4937      	ldr	r1, [pc, #220]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 800488e:	4313      	orrs	r3, r2
 8004890:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004892:	e03a      	b.n	800490a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d020      	beq.n	80048de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800489c:	4b34      	ldr	r3, [pc, #208]	@ (8004970 <HAL_RCC_OscConfig+0x244>)
 800489e:	2201      	movs	r2, #1
 80048a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a2:	f7fd fc93 	bl	80021cc <HAL_GetTick>
 80048a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a8:	e008      	b.n	80048bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048aa:	f7fd fc8f 	bl	80021cc <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d901      	bls.n	80048bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e1a8      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048bc:	4b2b      	ldr	r3, [pc, #172]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d0f0      	beq.n	80048aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048c8:	4b28      	ldr	r3, [pc, #160]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	4925      	ldr	r1, [pc, #148]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	600b      	str	r3, [r1, #0]
 80048dc:	e015      	b.n	800490a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048de:	4b24      	ldr	r3, [pc, #144]	@ (8004970 <HAL_RCC_OscConfig+0x244>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e4:	f7fd fc72 	bl	80021cc <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ec:	f7fd fc6e 	bl	80021cc <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e187      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048fe:	4b1b      	ldr	r3, [pc, #108]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d036      	beq.n	8004984 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d016      	beq.n	800494c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800491e:	4b15      	ldr	r3, [pc, #84]	@ (8004974 <HAL_RCC_OscConfig+0x248>)
 8004920:	2201      	movs	r2, #1
 8004922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004924:	f7fd fc52 	bl	80021cc <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800492c:	f7fd fc4e 	bl	80021cc <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e167      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800493e:	4b0b      	ldr	r3, [pc, #44]	@ (800496c <HAL_RCC_OscConfig+0x240>)
 8004940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCC_OscConfig+0x200>
 800494a:	e01b      	b.n	8004984 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800494c:	4b09      	ldr	r3, [pc, #36]	@ (8004974 <HAL_RCC_OscConfig+0x248>)
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004952:	f7fd fc3b 	bl	80021cc <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004958:	e00e      	b.n	8004978 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800495a:	f7fd fc37 	bl	80021cc <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d907      	bls.n	8004978 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e150      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
 800496c:	40023800 	.word	0x40023800
 8004970:	42470000 	.word	0x42470000
 8004974:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004978:	4b88      	ldr	r3, [pc, #544]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 800497a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1ea      	bne.n	800495a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 8097 	beq.w	8004ac0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004992:	2300      	movs	r3, #0
 8004994:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004996:	4b81      	ldr	r3, [pc, #516]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10f      	bne.n	80049c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049a2:	2300      	movs	r3, #0
 80049a4:	60bb      	str	r3, [r7, #8]
 80049a6:	4b7d      	ldr	r3, [pc, #500]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 80049a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049aa:	4a7c      	ldr	r2, [pc, #496]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 80049ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80049b2:	4b7a      	ldr	r3, [pc, #488]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 80049b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049ba:	60bb      	str	r3, [r7, #8]
 80049bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049be:	2301      	movs	r3, #1
 80049c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049c2:	4b77      	ldr	r3, [pc, #476]	@ (8004ba0 <HAL_RCC_OscConfig+0x474>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d118      	bne.n	8004a00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ce:	4b74      	ldr	r3, [pc, #464]	@ (8004ba0 <HAL_RCC_OscConfig+0x474>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a73      	ldr	r2, [pc, #460]	@ (8004ba0 <HAL_RCC_OscConfig+0x474>)
 80049d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049da:	f7fd fbf7 	bl	80021cc <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e0:	e008      	b.n	80049f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049e2:	f7fd fbf3 	bl	80021cc <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e10c      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f4:	4b6a      	ldr	r3, [pc, #424]	@ (8004ba0 <HAL_RCC_OscConfig+0x474>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0f0      	beq.n	80049e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d106      	bne.n	8004a16 <HAL_RCC_OscConfig+0x2ea>
 8004a08:	4b64      	ldr	r3, [pc, #400]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0c:	4a63      	ldr	r2, [pc, #396]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a14:	e01c      	b.n	8004a50 <HAL_RCC_OscConfig+0x324>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	2b05      	cmp	r3, #5
 8004a1c:	d10c      	bne.n	8004a38 <HAL_RCC_OscConfig+0x30c>
 8004a1e:	4b5f      	ldr	r3, [pc, #380]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a22:	4a5e      	ldr	r2, [pc, #376]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a24:	f043 0304 	orr.w	r3, r3, #4
 8004a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a2a:	4b5c      	ldr	r3, [pc, #368]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a2e:	4a5b      	ldr	r2, [pc, #364]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a30:	f043 0301 	orr.w	r3, r3, #1
 8004a34:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a36:	e00b      	b.n	8004a50 <HAL_RCC_OscConfig+0x324>
 8004a38:	4b58      	ldr	r3, [pc, #352]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a3c:	4a57      	ldr	r2, [pc, #348]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a3e:	f023 0301 	bic.w	r3, r3, #1
 8004a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a44:	4b55      	ldr	r3, [pc, #340]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a48:	4a54      	ldr	r2, [pc, #336]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a4a:	f023 0304 	bic.w	r3, r3, #4
 8004a4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d015      	beq.n	8004a84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a58:	f7fd fbb8 	bl	80021cc <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a5e:	e00a      	b.n	8004a76 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a60:	f7fd fbb4 	bl	80021cc <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e0cb      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a76:	4b49      	ldr	r3, [pc, #292]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0ee      	beq.n	8004a60 <HAL_RCC_OscConfig+0x334>
 8004a82:	e014      	b.n	8004aae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a84:	f7fd fba2 	bl	80021cc <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a8a:	e00a      	b.n	8004aa2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a8c:	f7fd fb9e 	bl	80021cc <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d901      	bls.n	8004aa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	e0b5      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aa2:	4b3e      	ldr	r3, [pc, #248]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1ee      	bne.n	8004a8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004aae:	7dfb      	ldrb	r3, [r7, #23]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d105      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab4:	4b39      	ldr	r3, [pc, #228]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab8:	4a38      	ldr	r2, [pc, #224]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004aba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004abe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 80a1 	beq.w	8004c0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aca:	4b34      	ldr	r3, [pc, #208]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 030c 	and.w	r3, r3, #12
 8004ad2:	2b08      	cmp	r3, #8
 8004ad4:	d05c      	beq.n	8004b90 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d141      	bne.n	8004b62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ade:	4b31      	ldr	r3, [pc, #196]	@ (8004ba4 <HAL_RCC_OscConfig+0x478>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae4:	f7fd fb72 	bl	80021cc <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aec:	f7fd fb6e 	bl	80021cc <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e087      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afe:	4b27      	ldr	r3, [pc, #156]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1f0      	bne.n	8004aec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69da      	ldr	r2, [r3, #28]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b18:	019b      	lsls	r3, r3, #6
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b20:	085b      	lsrs	r3, r3, #1
 8004b22:	3b01      	subs	r3, #1
 8004b24:	041b      	lsls	r3, r3, #16
 8004b26:	431a      	orrs	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2c:	061b      	lsls	r3, r3, #24
 8004b2e:	491b      	ldr	r1, [pc, #108]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b34:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba4 <HAL_RCC_OscConfig+0x478>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3a:	f7fd fb47 	bl	80021cc <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b40:	e008      	b.n	8004b54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b42:	f7fd fb43 	bl	80021cc <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e05c      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b54:	4b11      	ldr	r3, [pc, #68]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0f0      	beq.n	8004b42 <HAL_RCC_OscConfig+0x416>
 8004b60:	e054      	b.n	8004c0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b62:	4b10      	ldr	r3, [pc, #64]	@ (8004ba4 <HAL_RCC_OscConfig+0x478>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b68:	f7fd fb30 	bl	80021cc <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b70:	f7fd fb2c 	bl	80021cc <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e045      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b82:	4b06      	ldr	r3, [pc, #24]	@ (8004b9c <HAL_RCC_OscConfig+0x470>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x444>
 8004b8e:	e03d      	b.n	8004c0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d107      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e038      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	40007000 	.word	0x40007000
 8004ba4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8004c18 <HAL_RCC_OscConfig+0x4ec>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d028      	beq.n	8004c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d121      	bne.n	8004c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d11a      	bne.n	8004c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bd8:	4013      	ands	r3, r2
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bde:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d111      	bne.n	8004c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bee:	085b      	lsrs	r3, r3, #1
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d107      	bne.n	8004c08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d001      	beq.n	8004c0c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40023800 	.word	0x40023800

08004c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e0cc      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c30:	4b68      	ldr	r3, [pc, #416]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d90c      	bls.n	8004c58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3e:	4b65      	ldr	r3, [pc, #404]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c46:	4b63      	ldr	r3, [pc, #396]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d001      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e0b8      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d020      	beq.n	8004ca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c70:	4b59      	ldr	r3, [pc, #356]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	4a58      	ldr	r2, [pc, #352]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0308 	and.w	r3, r3, #8
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c88:	4b53      	ldr	r3, [pc, #332]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	4a52      	ldr	r2, [pc, #328]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c94:	4b50      	ldr	r3, [pc, #320]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	494d      	ldr	r1, [pc, #308]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d044      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d107      	bne.n	8004cca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cba:	4b47      	ldr	r3, [pc, #284]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d119      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e07f      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d003      	beq.n	8004cda <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cd6:	2b03      	cmp	r3, #3
 8004cd8:	d107      	bne.n	8004cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cda:	4b3f      	ldr	r3, [pc, #252]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d109      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e06f      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cea:	4b3b      	ldr	r3, [pc, #236]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e067      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cfa:	4b37      	ldr	r3, [pc, #220]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f023 0203 	bic.w	r2, r3, #3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	4934      	ldr	r1, [pc, #208]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d0c:	f7fd fa5e 	bl	80021cc <HAL_GetTick>
 8004d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d12:	e00a      	b.n	8004d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d14:	f7fd fa5a 	bl	80021cc <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e04f      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d2a:	4b2b      	ldr	r3, [pc, #172]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 020c 	and.w	r2, r3, #12
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d1eb      	bne.n	8004d14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d3c:	4b25      	ldr	r3, [pc, #148]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d20c      	bcs.n	8004d64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4a:	4b22      	ldr	r3, [pc, #136]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d52:	4b20      	ldr	r3, [pc, #128]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d001      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e032      	b.n	8004dca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d008      	beq.n	8004d82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d70:	4b19      	ldr	r3, [pc, #100]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	4916      	ldr	r1, [pc, #88]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d009      	beq.n	8004da2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d8e:	4b12      	ldr	r3, [pc, #72]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	490e      	ldr	r1, [pc, #56]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004da2:	f000 f821 	bl	8004de8 <HAL_RCC_GetSysClockFreq>
 8004da6:	4602      	mov	r2, r0
 8004da8:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	091b      	lsrs	r3, r3, #4
 8004dae:	f003 030f 	and.w	r3, r3, #15
 8004db2:	490a      	ldr	r1, [pc, #40]	@ (8004ddc <HAL_RCC_ClockConfig+0x1c0>)
 8004db4:	5ccb      	ldrb	r3, [r1, r3]
 8004db6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dba:	4a09      	ldr	r2, [pc, #36]	@ (8004de0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004dbe:	4b09      	ldr	r3, [pc, #36]	@ (8004de4 <HAL_RCC_ClockConfig+0x1c8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fd f9be 	bl	8002144 <HAL_InitTick>

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40023c00 	.word	0x40023c00
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	0800c5c8 	.word	0x0800c5c8
 8004de0:	2000000c 	.word	0x2000000c
 8004de4:	20000010 	.word	0x20000010

08004de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dec:	b094      	sub	sp, #80	@ 0x50
 8004dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e00:	4b79      	ldr	r3, [pc, #484]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 030c 	and.w	r3, r3, #12
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d00d      	beq.n	8004e28 <HAL_RCC_GetSysClockFreq+0x40>
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	f200 80e1 	bhi.w	8004fd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <HAL_RCC_GetSysClockFreq+0x34>
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d003      	beq.n	8004e22 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e1a:	e0db      	b.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e1c:	4b73      	ldr	r3, [pc, #460]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x204>)
 8004e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e20:	e0db      	b.n	8004fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e22:	4b73      	ldr	r3, [pc, #460]	@ (8004ff0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e26:	e0d8      	b.n	8004fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e28:	4b6f      	ldr	r3, [pc, #444]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e30:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e32:	4b6d      	ldr	r3, [pc, #436]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d063      	beq.n	8004f06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e3e:	4b6a      	ldr	r3, [pc, #424]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	099b      	lsrs	r3, r3, #6
 8004e44:	2200      	movs	r2, #0
 8004e46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e50:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e52:	2300      	movs	r3, #0
 8004e54:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004e5a:	4622      	mov	r2, r4
 8004e5c:	462b      	mov	r3, r5
 8004e5e:	f04f 0000 	mov.w	r0, #0
 8004e62:	f04f 0100 	mov.w	r1, #0
 8004e66:	0159      	lsls	r1, r3, #5
 8004e68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e6c:	0150      	lsls	r0, r2, #5
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4621      	mov	r1, r4
 8004e74:	1a51      	subs	r1, r2, r1
 8004e76:	6139      	str	r1, [r7, #16]
 8004e78:	4629      	mov	r1, r5
 8004e7a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e7e:	617b      	str	r3, [r7, #20]
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e8c:	4659      	mov	r1, fp
 8004e8e:	018b      	lsls	r3, r1, #6
 8004e90:	4651      	mov	r1, sl
 8004e92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e96:	4651      	mov	r1, sl
 8004e98:	018a      	lsls	r2, r1, #6
 8004e9a:	4651      	mov	r1, sl
 8004e9c:	ebb2 0801 	subs.w	r8, r2, r1
 8004ea0:	4659      	mov	r1, fp
 8004ea2:	eb63 0901 	sbc.w	r9, r3, r1
 8004ea6:	f04f 0200 	mov.w	r2, #0
 8004eaa:	f04f 0300 	mov.w	r3, #0
 8004eae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004eb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eba:	4690      	mov	r8, r2
 8004ebc:	4699      	mov	r9, r3
 8004ebe:	4623      	mov	r3, r4
 8004ec0:	eb18 0303 	adds.w	r3, r8, r3
 8004ec4:	60bb      	str	r3, [r7, #8]
 8004ec6:	462b      	mov	r3, r5
 8004ec8:	eb49 0303 	adc.w	r3, r9, r3
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	f04f 0300 	mov.w	r3, #0
 8004ed6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004eda:	4629      	mov	r1, r5
 8004edc:	024b      	lsls	r3, r1, #9
 8004ede:	4621      	mov	r1, r4
 8004ee0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	024a      	lsls	r2, r1, #9
 8004ee8:	4610      	mov	r0, r2
 8004eea:	4619      	mov	r1, r3
 8004eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eee:	2200      	movs	r2, #0
 8004ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ef2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ef4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ef8:	f7fb f966 	bl	80001c8 <__aeabi_uldivmod>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4613      	mov	r3, r2
 8004f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f04:	e058      	b.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f06:	4b38      	ldr	r3, [pc, #224]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	099b      	lsrs	r3, r3, #6
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	4618      	mov	r0, r3
 8004f10:	4611      	mov	r1, r2
 8004f12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f16:	623b      	str	r3, [r7, #32]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f20:	4642      	mov	r2, r8
 8004f22:	464b      	mov	r3, r9
 8004f24:	f04f 0000 	mov.w	r0, #0
 8004f28:	f04f 0100 	mov.w	r1, #0
 8004f2c:	0159      	lsls	r1, r3, #5
 8004f2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f32:	0150      	lsls	r0, r2, #5
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4641      	mov	r1, r8
 8004f3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f3e:	4649      	mov	r1, r9
 8004f40:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f58:	ebb2 040a 	subs.w	r4, r2, sl
 8004f5c:	eb63 050b 	sbc.w	r5, r3, fp
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	00eb      	lsls	r3, r5, #3
 8004f6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f6e:	00e2      	lsls	r2, r4, #3
 8004f70:	4614      	mov	r4, r2
 8004f72:	461d      	mov	r5, r3
 8004f74:	4643      	mov	r3, r8
 8004f76:	18e3      	adds	r3, r4, r3
 8004f78:	603b      	str	r3, [r7, #0]
 8004f7a:	464b      	mov	r3, r9
 8004f7c:	eb45 0303 	adc.w	r3, r5, r3
 8004f80:	607b      	str	r3, [r7, #4]
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	f04f 0300 	mov.w	r3, #0
 8004f8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f8e:	4629      	mov	r1, r5
 8004f90:	028b      	lsls	r3, r1, #10
 8004f92:	4621      	mov	r1, r4
 8004f94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f98:	4621      	mov	r1, r4
 8004f9a:	028a      	lsls	r2, r1, #10
 8004f9c:	4610      	mov	r0, r2
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	61bb      	str	r3, [r7, #24]
 8004fa6:	61fa      	str	r2, [r7, #28]
 8004fa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fac:	f7fb f90c 	bl	80001c8 <__aeabi_uldivmod>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	0c1b      	lsrs	r3, r3, #16
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004fc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fd2:	e002      	b.n	8004fda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fd4:	4b05      	ldr	r3, [pc, #20]	@ (8004fec <HAL_RCC_GetSysClockFreq+0x204>)
 8004fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3750      	adds	r7, #80	@ 0x50
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fe6:	bf00      	nop
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	00f42400 	.word	0x00f42400
 8004ff0:	007a1200 	.word	0x007a1200

08004ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ff8:	4b03      	ldr	r3, [pc, #12]	@ (8005008 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	2000000c 	.word	0x2000000c

0800500c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005010:	f7ff fff0 	bl	8004ff4 <HAL_RCC_GetHCLKFreq>
 8005014:	4602      	mov	r2, r0
 8005016:	4b05      	ldr	r3, [pc, #20]	@ (800502c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	0a9b      	lsrs	r3, r3, #10
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	4903      	ldr	r1, [pc, #12]	@ (8005030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005022:	5ccb      	ldrb	r3, [r1, r3]
 8005024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005028:	4618      	mov	r0, r3
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40023800 	.word	0x40023800
 8005030:	0800c5d8 	.word	0x0800c5d8

08005034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005038:	f7ff ffdc 	bl	8004ff4 <HAL_RCC_GetHCLKFreq>
 800503c:	4602      	mov	r2, r0
 800503e:	4b05      	ldr	r3, [pc, #20]	@ (8005054 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	0b5b      	lsrs	r3, r3, #13
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	4903      	ldr	r1, [pc, #12]	@ (8005058 <HAL_RCC_GetPCLK2Freq+0x24>)
 800504a:	5ccb      	ldrb	r3, [r1, r3]
 800504c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005050:	4618      	mov	r0, r3
 8005052:	bd80      	pop	{r7, pc}
 8005054:	40023800 	.word	0x40023800
 8005058:	0800c5d8 	.word	0x0800c5d8

0800505c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e07b      	b.n	8005166 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005072:	2b00      	cmp	r3, #0
 8005074:	d108      	bne.n	8005088 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800507e:	d009      	beq.n	8005094 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	61da      	str	r2, [r3, #28]
 8005086:	e005      	b.n	8005094 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d106      	bne.n	80050b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7fc fb72 	bl	8001798 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005104:	431a      	orrs	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005118:	ea42 0103 	orr.w	r1, r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005120:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	0c1b      	lsrs	r3, r3, #16
 8005132:	f003 0104 	and.w	r1, r3, #4
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513a:	f003 0210 	and.w	r2, r3, #16
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69da      	ldr	r2, [r3, #28]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005154:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b082      	sub	sp, #8
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d101      	bne.n	8005180 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e041      	b.n	8005204 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d106      	bne.n	800519a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7fc fd15 	bl	8001bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2202      	movs	r2, #2
 800519e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3304      	adds	r3, #4
 80051aa:	4619      	mov	r1, r3
 80051ac:	4610      	mov	r0, r2
 80051ae:	f000 fb3b 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e041      	b.n	80052a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fc fc8e 	bl	8001b54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3304      	adds	r3, #4
 8005248:	4619      	mov	r1, r3
 800524a:	4610      	mov	r0, r2
 800524c:	f000 faec 	bl	8005828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d109      	bne.n	80052d0 <HAL_TIM_PWM_Start+0x24>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	bf14      	ite	ne
 80052c8:	2301      	movne	r3, #1
 80052ca:	2300      	moveq	r3, #0
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	e022      	b.n	8005316 <HAL_TIM_PWM_Start+0x6a>
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d109      	bne.n	80052ea <HAL_TIM_PWM_Start+0x3e>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b01      	cmp	r3, #1
 80052e0:	bf14      	ite	ne
 80052e2:	2301      	movne	r3, #1
 80052e4:	2300      	moveq	r3, #0
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	e015      	b.n	8005316 <HAL_TIM_PWM_Start+0x6a>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d109      	bne.n	8005304 <HAL_TIM_PWM_Start+0x58>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	bf14      	ite	ne
 80052fc:	2301      	movne	r3, #1
 80052fe:	2300      	moveq	r3, #0
 8005300:	b2db      	uxtb	r3, r3
 8005302:	e008      	b.n	8005316 <HAL_TIM_PWM_Start+0x6a>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b01      	cmp	r3, #1
 800530e:	bf14      	ite	ne
 8005310:	2301      	movne	r3, #1
 8005312:	2300      	moveq	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e07c      	b.n	8005418 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d104      	bne.n	800532e <HAL_TIM_PWM_Start+0x82>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800532c:	e013      	b.n	8005356 <HAL_TIM_PWM_Start+0xaa>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b04      	cmp	r3, #4
 8005332:	d104      	bne.n	800533e <HAL_TIM_PWM_Start+0x92>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800533c:	e00b      	b.n	8005356 <HAL_TIM_PWM_Start+0xaa>
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b08      	cmp	r3, #8
 8005342:	d104      	bne.n	800534e <HAL_TIM_PWM_Start+0xa2>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800534c:	e003      	b.n	8005356 <HAL_TIM_PWM_Start+0xaa>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2202      	movs	r2, #2
 8005352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2201      	movs	r2, #1
 800535c:	6839      	ldr	r1, [r7, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f000 fcbe 	bl	8005ce0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a2d      	ldr	r2, [pc, #180]	@ (8005420 <HAL_TIM_PWM_Start+0x174>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d004      	beq.n	8005378 <HAL_TIM_PWM_Start+0xcc>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a2c      	ldr	r2, [pc, #176]	@ (8005424 <HAL_TIM_PWM_Start+0x178>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d101      	bne.n	800537c <HAL_TIM_PWM_Start+0xd0>
 8005378:	2301      	movs	r3, #1
 800537a:	e000      	b.n	800537e <HAL_TIM_PWM_Start+0xd2>
 800537c:	2300      	movs	r3, #0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d007      	beq.n	8005392 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005390:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a22      	ldr	r2, [pc, #136]	@ (8005420 <HAL_TIM_PWM_Start+0x174>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d022      	beq.n	80053e2 <HAL_TIM_PWM_Start+0x136>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053a4:	d01d      	beq.n	80053e2 <HAL_TIM_PWM_Start+0x136>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005428 <HAL_TIM_PWM_Start+0x17c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d018      	beq.n	80053e2 <HAL_TIM_PWM_Start+0x136>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a1d      	ldr	r2, [pc, #116]	@ (800542c <HAL_TIM_PWM_Start+0x180>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d013      	beq.n	80053e2 <HAL_TIM_PWM_Start+0x136>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a1c      	ldr	r2, [pc, #112]	@ (8005430 <HAL_TIM_PWM_Start+0x184>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00e      	beq.n	80053e2 <HAL_TIM_PWM_Start+0x136>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a16      	ldr	r2, [pc, #88]	@ (8005424 <HAL_TIM_PWM_Start+0x178>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d009      	beq.n	80053e2 <HAL_TIM_PWM_Start+0x136>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a18      	ldr	r2, [pc, #96]	@ (8005434 <HAL_TIM_PWM_Start+0x188>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d004      	beq.n	80053e2 <HAL_TIM_PWM_Start+0x136>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a16      	ldr	r2, [pc, #88]	@ (8005438 <HAL_TIM_PWM_Start+0x18c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d111      	bne.n	8005406 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b06      	cmp	r3, #6
 80053f2:	d010      	beq.n	8005416 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0201 	orr.w	r2, r2, #1
 8005402:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005404:	e007      	b.n	8005416 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f042 0201 	orr.w	r2, r2, #1
 8005414:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3710      	adds	r7, #16
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	40010000 	.word	0x40010000
 8005424:	40010400 	.word	0x40010400
 8005428:	40000400 	.word	0x40000400
 800542c:	40000800 	.word	0x40000800
 8005430:	40000c00 	.word	0x40000c00
 8005434:	40014000 	.word	0x40014000
 8005438:	40001800 	.word	0x40001800

0800543c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e097      	b.n	8005580 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d106      	bne.n	800546a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f7fc f9ff 	bl	8001868 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2202      	movs	r2, #2
 800546e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	6812      	ldr	r2, [r2, #0]
 800547c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005480:	f023 0307 	bic.w	r3, r3, #7
 8005484:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	3304      	adds	r3, #4
 800548e:	4619      	mov	r1, r3
 8005490:	4610      	mov	r0, r2
 8005492:	f000 f9c9 	bl	8005828 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054be:	f023 0303 	bic.w	r3, r3, #3
 80054c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	4313      	orrs	r3, r2
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80054dc:	f023 030c 	bic.w	r3, r3, #12
 80054e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	021b      	lsls	r3, r3, #8
 80054f8:	4313      	orrs	r3, r2
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	011a      	lsls	r2, r3, #4
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	031b      	lsls	r3, r3, #12
 800550c:	4313      	orrs	r3, r2
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800551a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005522:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	4313      	orrs	r3, r2
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2201      	movs	r2, #1
 8005562:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005598:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80055a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80055b0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d110      	bne.n	80055da <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d102      	bne.n	80055c4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80055be:	7b7b      	ldrb	r3, [r7, #13]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d001      	beq.n	80055c8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e069      	b.n	800569c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055d8:	e031      	b.n	800563e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d110      	bne.n	8005602 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055e0:	7bbb      	ldrb	r3, [r7, #14]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d102      	bne.n	80055ec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055e6:	7b3b      	ldrb	r3, [r7, #12]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d001      	beq.n	80055f0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e055      	b.n	800569c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005600:	e01d      	b.n	800563e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d108      	bne.n	800561a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005608:	7bbb      	ldrb	r3, [r7, #14]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d105      	bne.n	800561a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800560e:	7b7b      	ldrb	r3, [r7, #13]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d102      	bne.n	800561a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005614:	7b3b      	ldrb	r3, [r7, #12]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d001      	beq.n	800561e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e03e      	b.n	800569c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2202      	movs	r2, #2
 8005622:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2202      	movs	r2, #2
 800562a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2202      	movs	r2, #2
 8005632:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2202      	movs	r2, #2
 800563a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <HAL_TIM_Encoder_Start+0xc4>
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	2b04      	cmp	r3, #4
 8005648:	d008      	beq.n	800565c <HAL_TIM_Encoder_Start+0xd4>
 800564a:	e00f      	b.n	800566c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2201      	movs	r2, #1
 8005652:	2100      	movs	r1, #0
 8005654:	4618      	mov	r0, r3
 8005656:	f000 fb43 	bl	8005ce0 <TIM_CCxChannelCmd>
      break;
 800565a:	e016      	b.n	800568a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2201      	movs	r2, #1
 8005662:	2104      	movs	r1, #4
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fb3b 	bl	8005ce0 <TIM_CCxChannelCmd>
      break;
 800566a:	e00e      	b.n	800568a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2201      	movs	r2, #1
 8005672:	2100      	movs	r1, #0
 8005674:	4618      	mov	r0, r3
 8005676:	f000 fb33 	bl	8005ce0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2201      	movs	r2, #1
 8005680:	2104      	movs	r1, #4
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fb2c 	bl	8005ce0 <TIM_CCxChannelCmd>
      break;
 8005688:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f042 0201 	orr.w	r2, r2, #1
 8005698:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056b0:	2300      	movs	r3, #0
 80056b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056be:	2302      	movs	r3, #2
 80056c0:	e0ae      	b.n	8005820 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b0c      	cmp	r3, #12
 80056ce:	f200 809f 	bhi.w	8005810 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80056d2:	a201      	add	r2, pc, #4	@ (adr r2, 80056d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d8:	0800570d 	.word	0x0800570d
 80056dc:	08005811 	.word	0x08005811
 80056e0:	08005811 	.word	0x08005811
 80056e4:	08005811 	.word	0x08005811
 80056e8:	0800574d 	.word	0x0800574d
 80056ec:	08005811 	.word	0x08005811
 80056f0:	08005811 	.word	0x08005811
 80056f4:	08005811 	.word	0x08005811
 80056f8:	0800578f 	.word	0x0800578f
 80056fc:	08005811 	.word	0x08005811
 8005700:	08005811 	.word	0x08005811
 8005704:	08005811 	.word	0x08005811
 8005708:	080057cf 	.word	0x080057cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68b9      	ldr	r1, [r7, #8]
 8005712:	4618      	mov	r0, r3
 8005714:	f000 f934 	bl	8005980 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699a      	ldr	r2, [r3, #24]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0208 	orr.w	r2, r2, #8
 8005726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699a      	ldr	r2, [r3, #24]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0204 	bic.w	r2, r2, #4
 8005736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6999      	ldr	r1, [r3, #24]
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	691a      	ldr	r2, [r3, #16]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	430a      	orrs	r2, r1
 8005748:	619a      	str	r2, [r3, #24]
      break;
 800574a:	e064      	b.n	8005816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68b9      	ldr	r1, [r7, #8]
 8005752:	4618      	mov	r0, r3
 8005754:	f000 f984 	bl	8005a60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	699a      	ldr	r2, [r3, #24]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	699a      	ldr	r2, [r3, #24]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6999      	ldr	r1, [r3, #24]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	021a      	lsls	r2, r3, #8
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	619a      	str	r2, [r3, #24]
      break;
 800578c:	e043      	b.n	8005816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68b9      	ldr	r1, [r7, #8]
 8005794:	4618      	mov	r0, r3
 8005796:	f000 f9d9 	bl	8005b4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69da      	ldr	r2, [r3, #28]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f042 0208 	orr.w	r2, r2, #8
 80057a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	69da      	ldr	r2, [r3, #28]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0204 	bic.w	r2, r2, #4
 80057b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69d9      	ldr	r1, [r3, #28]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	61da      	str	r2, [r3, #28]
      break;
 80057cc:	e023      	b.n	8005816 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68b9      	ldr	r1, [r7, #8]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f000 fa2d 	bl	8005c34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	69da      	ldr	r2, [r3, #28]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	69da      	ldr	r2, [r3, #28]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69d9      	ldr	r1, [r3, #28]
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	021a      	lsls	r2, r3, #8
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	61da      	str	r2, [r3, #28]
      break;
 800580e:	e002      	b.n	8005816 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	75fb      	strb	r3, [r7, #23]
      break;
 8005814:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800581e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a46      	ldr	r2, [pc, #280]	@ (8005954 <TIM_Base_SetConfig+0x12c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d013      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005846:	d00f      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a43      	ldr	r2, [pc, #268]	@ (8005958 <TIM_Base_SetConfig+0x130>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d00b      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a42      	ldr	r2, [pc, #264]	@ (800595c <TIM_Base_SetConfig+0x134>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d007      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a41      	ldr	r2, [pc, #260]	@ (8005960 <TIM_Base_SetConfig+0x138>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d003      	beq.n	8005868 <TIM_Base_SetConfig+0x40>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a40      	ldr	r2, [pc, #256]	@ (8005964 <TIM_Base_SetConfig+0x13c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d108      	bne.n	800587a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800586e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a35      	ldr	r2, [pc, #212]	@ (8005954 <TIM_Base_SetConfig+0x12c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d02b      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005888:	d027      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a32      	ldr	r2, [pc, #200]	@ (8005958 <TIM_Base_SetConfig+0x130>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d023      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a31      	ldr	r2, [pc, #196]	@ (800595c <TIM_Base_SetConfig+0x134>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d01f      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a30      	ldr	r2, [pc, #192]	@ (8005960 <TIM_Base_SetConfig+0x138>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d01b      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a2f      	ldr	r2, [pc, #188]	@ (8005964 <TIM_Base_SetConfig+0x13c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d017      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a2e      	ldr	r2, [pc, #184]	@ (8005968 <TIM_Base_SetConfig+0x140>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d013      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a2d      	ldr	r2, [pc, #180]	@ (800596c <TIM_Base_SetConfig+0x144>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00f      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a2c      	ldr	r2, [pc, #176]	@ (8005970 <TIM_Base_SetConfig+0x148>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00b      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005974 <TIM_Base_SetConfig+0x14c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d007      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a2a      	ldr	r2, [pc, #168]	@ (8005978 <TIM_Base_SetConfig+0x150>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d003      	beq.n	80058da <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a29      	ldr	r2, [pc, #164]	@ (800597c <TIM_Base_SetConfig+0x154>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d108      	bne.n	80058ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a10      	ldr	r2, [pc, #64]	@ (8005954 <TIM_Base_SetConfig+0x12c>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d003      	beq.n	8005920 <TIM_Base_SetConfig+0xf8>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a12      	ldr	r2, [pc, #72]	@ (8005964 <TIM_Base_SetConfig+0x13c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d103      	bne.n	8005928 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	691a      	ldr	r2, [r3, #16]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b01      	cmp	r3, #1
 8005938:	d105      	bne.n	8005946 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f023 0201 	bic.w	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	611a      	str	r2, [r3, #16]
  }
}
 8005946:	bf00      	nop
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	40010000 	.word	0x40010000
 8005958:	40000400 	.word	0x40000400
 800595c:	40000800 	.word	0x40000800
 8005960:	40000c00 	.word	0x40000c00
 8005964:	40010400 	.word	0x40010400
 8005968:	40014000 	.word	0x40014000
 800596c:	40014400 	.word	0x40014400
 8005970:	40014800 	.word	0x40014800
 8005974:	40001800 	.word	0x40001800
 8005978:	40001c00 	.word	0x40001c00
 800597c:	40002000 	.word	0x40002000

08005980 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f023 0201 	bic.w	r2, r3, #1
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f023 0303 	bic.w	r3, r3, #3
 80059b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4313      	orrs	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f023 0302 	bic.w	r3, r3, #2
 80059c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a20      	ldr	r2, [pc, #128]	@ (8005a58 <TIM_OC1_SetConfig+0xd8>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d003      	beq.n	80059e4 <TIM_OC1_SetConfig+0x64>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a1f      	ldr	r2, [pc, #124]	@ (8005a5c <TIM_OC1_SetConfig+0xdc>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d10c      	bne.n	80059fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	f023 0308 	bic.w	r3, r3, #8
 80059ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f023 0304 	bic.w	r3, r3, #4
 80059fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a15      	ldr	r2, [pc, #84]	@ (8005a58 <TIM_OC1_SetConfig+0xd8>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d003      	beq.n	8005a0e <TIM_OC1_SetConfig+0x8e>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a14      	ldr	r2, [pc, #80]	@ (8005a5c <TIM_OC1_SetConfig+0xdc>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d111      	bne.n	8005a32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	621a      	str	r2, [r3, #32]
}
 8005a4c:	bf00      	nop
 8005a4e:	371c      	adds	r7, #28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	40010000 	.word	0x40010000
 8005a5c:	40010400 	.word	0x40010400

08005a60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	f023 0210 	bic.w	r2, r3, #16
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	021b      	lsls	r3, r3, #8
 8005a9e:	68fa      	ldr	r2, [r7, #12]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f023 0320 	bic.w	r3, r3, #32
 8005aaa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a22      	ldr	r2, [pc, #136]	@ (8005b44 <TIM_OC2_SetConfig+0xe4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d003      	beq.n	8005ac8 <TIM_OC2_SetConfig+0x68>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a21      	ldr	r2, [pc, #132]	@ (8005b48 <TIM_OC2_SetConfig+0xe8>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d10d      	bne.n	8005ae4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ae2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a17      	ldr	r2, [pc, #92]	@ (8005b44 <TIM_OC2_SetConfig+0xe4>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d003      	beq.n	8005af4 <TIM_OC2_SetConfig+0x94>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a16      	ldr	r2, [pc, #88]	@ (8005b48 <TIM_OC2_SetConfig+0xe8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d113      	bne.n	8005b1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005afa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	697a      	ldr	r2, [r7, #20]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	40010000 	.word	0x40010000
 8005b48:	40010400 	.word	0x40010400

08005b4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f023 0303 	bic.w	r3, r3, #3
 8005b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	021b      	lsls	r3, r3, #8
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a21      	ldr	r2, [pc, #132]	@ (8005c2c <TIM_OC3_SetConfig+0xe0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d003      	beq.n	8005bb2 <TIM_OC3_SetConfig+0x66>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a20      	ldr	r2, [pc, #128]	@ (8005c30 <TIM_OC3_SetConfig+0xe4>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d10d      	bne.n	8005bce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	021b      	lsls	r3, r3, #8
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a16      	ldr	r2, [pc, #88]	@ (8005c2c <TIM_OC3_SetConfig+0xe0>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d003      	beq.n	8005bde <TIM_OC3_SetConfig+0x92>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a15      	ldr	r2, [pc, #84]	@ (8005c30 <TIM_OC3_SetConfig+0xe4>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d113      	bne.n	8005c06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005be4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	011b      	lsls	r3, r3, #4
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	621a      	str	r2, [r3, #32]
}
 8005c20:	bf00      	nop
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	40010000 	.word	0x40010000
 8005c30:	40010400 	.word	0x40010400

08005c34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	021b      	lsls	r3, r3, #8
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	031b      	lsls	r3, r3, #12
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a12      	ldr	r2, [pc, #72]	@ (8005cd8 <TIM_OC4_SetConfig+0xa4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d003      	beq.n	8005c9c <TIM_OC4_SetConfig+0x68>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a11      	ldr	r2, [pc, #68]	@ (8005cdc <TIM_OC4_SetConfig+0xa8>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d109      	bne.n	8005cb0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ca2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	019b      	lsls	r3, r3, #6
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	621a      	str	r2, [r3, #32]
}
 8005cca:	bf00      	nop
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	40010000 	.word	0x40010000
 8005cdc:	40010400 	.word	0x40010400

08005ce0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f003 031f 	and.w	r3, r3, #31
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6a1a      	ldr	r2, [r3, #32]
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	43db      	mvns	r3, r3
 8005d02:	401a      	ands	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a1a      	ldr	r2, [r3, #32]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	f003 031f 	and.w	r3, r3, #31
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	fa01 f303 	lsl.w	r3, r1, r3
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	621a      	str	r2, [r3, #32]
}
 8005d1e:	bf00      	nop
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
	...

08005d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e05a      	b.n	8005dfa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a21      	ldr	r2, [pc, #132]	@ (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d022      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d90:	d01d      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1d      	ldr	r2, [pc, #116]	@ (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d018      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d013      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a1a      	ldr	r2, [pc, #104]	@ (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00e      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a18      	ldr	r2, [pc, #96]	@ (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d009      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a17      	ldr	r2, [pc, #92]	@ (8005e1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d004      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a15      	ldr	r2, [pc, #84]	@ (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d10c      	bne.n	8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	40010000 	.word	0x40010000
 8005e0c:	40000400 	.word	0x40000400
 8005e10:	40000800 	.word	0x40000800
 8005e14:	40000c00 	.word	0x40000c00
 8005e18:	40010400 	.word	0x40010400
 8005e1c:	40014000 	.word	0x40014000
 8005e20:	40001800 	.word	0x40001800

08005e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e042      	b.n	8005ebc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f7fc f81c 	bl	8001e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2224      	movs	r2, #36	@ 0x24
 8005e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 fd0d 	bl	8006888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	691a      	ldr	r2, [r3, #16]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	695a      	ldr	r2, [r3, #20]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68da      	ldr	r2, [r3, #12]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2220      	movs	r2, #32
 8005ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e024      	b.n	8005f20 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2224      	movs	r2, #36	@ 0x24
 8005eda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005eec:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7fc f850 	bl	8001f94 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	4613      	mov	r3, r2
 8005f34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b20      	cmp	r3, #32
 8005f40:	d112      	bne.n	8005f68 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d002      	beq.n	8005f4e <HAL_UART_Receive_IT+0x26>
 8005f48:	88fb      	ldrh	r3, [r7, #6]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e00b      	b.n	8005f6a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f58:	88fb      	ldrh	r3, [r7, #6]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	68b9      	ldr	r1, [r7, #8]
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 faba 	bl	80064d8 <UART_Start_Receive_IT>
 8005f64:	4603      	mov	r3, r0
 8005f66:	e000      	b.n	8005f6a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005f68:	2302      	movs	r3, #2
  }
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b0ba      	sub	sp, #232	@ 0xe8
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005faa:	f003 030f 	and.w	r3, r3, #15
 8005fae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10f      	bne.n	8005fda <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fbe:	f003 0320 	and.w	r3, r3, #32
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d009      	beq.n	8005fda <HAL_UART_IRQHandler+0x66>
 8005fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fb99 	bl	800670a <UART_Receive_IT>
      return;
 8005fd8:	e25b      	b.n	8006492 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005fda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 80de 	beq.w	80061a0 <HAL_UART_IRQHandler+0x22c>
 8005fe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d106      	bne.n	8005ffe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ff4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 80d1 	beq.w	80061a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00b      	beq.n	8006022 <HAL_UART_IRQHandler+0xae>
 800600a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800600e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006012:	2b00      	cmp	r3, #0
 8006014:	d005      	beq.n	8006022 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800601a:	f043 0201 	orr.w	r2, r3, #1
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006026:	f003 0304 	and.w	r3, r3, #4
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00b      	beq.n	8006046 <HAL_UART_IRQHandler+0xd2>
 800602e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006032:	f003 0301 	and.w	r3, r3, #1
 8006036:	2b00      	cmp	r3, #0
 8006038:	d005      	beq.n	8006046 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800603e:	f043 0202 	orr.w	r2, r3, #2
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00b      	beq.n	800606a <HAL_UART_IRQHandler+0xf6>
 8006052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d005      	beq.n	800606a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006062:	f043 0204 	orr.w	r2, r3, #4
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800606a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800606e:	f003 0308 	and.w	r3, r3, #8
 8006072:	2b00      	cmp	r3, #0
 8006074:	d011      	beq.n	800609a <HAL_UART_IRQHandler+0x126>
 8006076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b00      	cmp	r3, #0
 8006080:	d105      	bne.n	800608e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d005      	beq.n	800609a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006092:	f043 0208 	orr.w	r2, r3, #8
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f000 81f2 	beq.w	8006488 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a8:	f003 0320 	and.w	r3, r3, #32
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d008      	beq.n	80060c2 <HAL_UART_IRQHandler+0x14e>
 80060b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060b4:	f003 0320 	and.w	r3, r3, #32
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d002      	beq.n	80060c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fb24 	bl	800670a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060cc:	2b40      	cmp	r3, #64	@ 0x40
 80060ce:	bf0c      	ite	eq
 80060d0:	2301      	moveq	r3, #1
 80060d2:	2300      	movne	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060de:	f003 0308 	and.w	r3, r3, #8
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d103      	bne.n	80060ee <HAL_UART_IRQHandler+0x17a>
 80060e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d04f      	beq.n	800618e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fa2c 	bl	800654c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060fe:	2b40      	cmp	r3, #64	@ 0x40
 8006100:	d141      	bne.n	8006186 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	3314      	adds	r3, #20
 8006108:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006110:	e853 3f00 	ldrex	r3, [r3]
 8006114:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006118:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800611c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006120:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3314      	adds	r3, #20
 800612a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800612e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006132:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006136:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800613a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800613e:	e841 2300 	strex	r3, r2, [r1]
 8006142:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1d9      	bne.n	8006102 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d013      	beq.n	800617e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800615a:	4a7e      	ldr	r2, [pc, #504]	@ (8006354 <HAL_UART_IRQHandler+0x3e0>)
 800615c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006162:	4618      	mov	r0, r3
 8006164:	f7fc fc77 	bl	8002a56 <HAL_DMA_Abort_IT>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d016      	beq.n	800619c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006172:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006178:	4610      	mov	r0, r2
 800617a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800617c:	e00e      	b.n	800619c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f994 	bl	80064ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006184:	e00a      	b.n	800619c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 f990 	bl	80064ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800618c:	e006      	b.n	800619c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f98c 	bl	80064ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800619a:	e175      	b.n	8006488 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800619c:	bf00      	nop
    return;
 800619e:	e173      	b.n	8006488 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	f040 814f 	bne.w	8006448 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80061aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ae:	f003 0310 	and.w	r3, r3, #16
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 8148 	beq.w	8006448 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80061b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061bc:	f003 0310 	and.w	r3, r3, #16
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 8141 	beq.w	8006448 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061c6:	2300      	movs	r3, #0
 80061c8:	60bb      	str	r3, [r7, #8]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	60bb      	str	r3, [r7, #8]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	60bb      	str	r3, [r7, #8]
 80061da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e6:	2b40      	cmp	r3, #64	@ 0x40
 80061e8:	f040 80b6 	bne.w	8006358 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 8145 	beq.w	800648c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006206:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800620a:	429a      	cmp	r2, r3
 800620c:	f080 813e 	bcs.w	800648c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006216:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006222:	f000 8088 	beq.w	8006336 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	330c      	adds	r3, #12
 800622c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006230:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800623c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006244:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	330c      	adds	r3, #12
 800624e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006252:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006256:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800625e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006262:	e841 2300 	strex	r3, r2, [r1]
 8006266:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800626a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1d9      	bne.n	8006226 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3314      	adds	r3, #20
 8006278:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800627c:	e853 3f00 	ldrex	r3, [r3]
 8006280:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006282:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006284:	f023 0301 	bic.w	r3, r3, #1
 8006288:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3314      	adds	r3, #20
 8006292:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006296:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800629a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800629e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80062a2:	e841 2300 	strex	r3, r2, [r1]
 80062a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80062a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1e1      	bne.n	8006272 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3314      	adds	r3, #20
 80062b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062b8:	e853 3f00 	ldrex	r3, [r3]
 80062bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80062be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3314      	adds	r3, #20
 80062ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80062d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80062d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80062d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80062e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1e3      	bne.n	80062ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	330c      	adds	r3, #12
 80062fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062fe:	e853 3f00 	ldrex	r3, [r3]
 8006302:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006304:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006306:	f023 0310 	bic.w	r3, r3, #16
 800630a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	330c      	adds	r3, #12
 8006314:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006318:	65ba      	str	r2, [r7, #88]	@ 0x58
 800631a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800631e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006320:	e841 2300 	strex	r3, r2, [r1]
 8006324:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1e3      	bne.n	80062f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006330:	4618      	mov	r0, r3
 8006332:	f7fc fb20 	bl	8002976 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2202      	movs	r2, #2
 800633a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006344:	b29b      	uxth	r3, r3
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	b29b      	uxth	r3, r3
 800634a:	4619      	mov	r1, r3
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f8b7 	bl	80064c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006352:	e09b      	b.n	800648c <HAL_UART_IRQHandler+0x518>
 8006354:	08006613 	.word	0x08006613
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006360:	b29b      	uxth	r3, r3
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	f000 808e 	beq.w	8006490 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006374:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 8089 	beq.w	8006490 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	330c      	adds	r3, #12
 8006384:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006388:	e853 3f00 	ldrex	r3, [r3]
 800638c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800638e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006390:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006394:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	330c      	adds	r3, #12
 800639e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80063a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80063a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063aa:	e841 2300 	strex	r3, r2, [r1]
 80063ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1e3      	bne.n	800637e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3314      	adds	r3, #20
 80063bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c0:	e853 3f00 	ldrex	r3, [r3]
 80063c4:	623b      	str	r3, [r7, #32]
   return(result);
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	f023 0301 	bic.w	r3, r3, #1
 80063cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3314      	adds	r3, #20
 80063d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80063da:	633a      	str	r2, [r7, #48]	@ 0x30
 80063dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e3      	bne.n	80063b6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	330c      	adds	r3, #12
 8006402:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	e853 3f00 	ldrex	r3, [r3]
 800640a:	60fb      	str	r3, [r7, #12]
   return(result);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0310 	bic.w	r3, r3, #16
 8006412:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	330c      	adds	r3, #12
 800641c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006420:	61fa      	str	r2, [r7, #28]
 8006422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006424:	69b9      	ldr	r1, [r7, #24]
 8006426:	69fa      	ldr	r2, [r7, #28]
 8006428:	e841 2300 	strex	r3, r2, [r1]
 800642c:	617b      	str	r3, [r7, #20]
   return(result);
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1e3      	bne.n	80063fc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800643a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f83d 	bl	80064c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006446:	e023      	b.n	8006490 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800644c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006450:	2b00      	cmp	r3, #0
 8006452:	d009      	beq.n	8006468 <HAL_UART_IRQHandler+0x4f4>
 8006454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800645c:	2b00      	cmp	r3, #0
 800645e:	d003      	beq.n	8006468 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f8ea 	bl	800663a <UART_Transmit_IT>
    return;
 8006466:	e014      	b.n	8006492 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800646c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00e      	beq.n	8006492 <HAL_UART_IRQHandler+0x51e>
 8006474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800647c:	2b00      	cmp	r3, #0
 800647e:	d008      	beq.n	8006492 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f92a 	bl	80066da <UART_EndTransmit_IT>
    return;
 8006486:	e004      	b.n	8006492 <HAL_UART_IRQHandler+0x51e>
    return;
 8006488:	bf00      	nop
 800648a:	e002      	b.n	8006492 <HAL_UART_IRQHandler+0x51e>
      return;
 800648c:	bf00      	nop
 800648e:	e000      	b.n	8006492 <HAL_UART_IRQHandler+0x51e>
      return;
 8006490:	bf00      	nop
  }
}
 8006492:	37e8      	adds	r7, #232	@ 0xe8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	460b      	mov	r3, r1
 80064ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	4613      	mov	r3, r2
 80064e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	88fa      	ldrh	r2, [r7, #6]
 80064f0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	88fa      	ldrh	r2, [r7, #6]
 80064f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2222      	movs	r2, #34	@ 0x22
 8006502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d007      	beq.n	800651e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68da      	ldr	r2, [r3, #12]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800651c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	695a      	ldr	r2, [r3, #20]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f042 0201 	orr.w	r2, r2, #1
 800652c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f042 0220 	orr.w	r2, r2, #32
 800653c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800654c:	b480      	push	{r7}
 800654e:	b095      	sub	sp, #84	@ 0x54
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	330c      	adds	r3, #12
 800655a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800655e:	e853 3f00 	ldrex	r3, [r3]
 8006562:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006566:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800656a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	330c      	adds	r3, #12
 8006572:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006574:	643a      	str	r2, [r7, #64]	@ 0x40
 8006576:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006578:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800657a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800657c:	e841 2300 	strex	r3, r2, [r1]
 8006580:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1e5      	bne.n	8006554 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3314      	adds	r3, #20
 800658e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	e853 3f00 	ldrex	r3, [r3]
 8006596:	61fb      	str	r3, [r7, #28]
   return(result);
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	f023 0301 	bic.w	r3, r3, #1
 800659e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3314      	adds	r3, #20
 80065a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065b0:	e841 2300 	strex	r3, r2, [r1]
 80065b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1e5      	bne.n	8006588 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d119      	bne.n	80065f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	330c      	adds	r3, #12
 80065ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	e853 3f00 	ldrex	r3, [r3]
 80065d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f023 0310 	bic.w	r3, r3, #16
 80065da:	647b      	str	r3, [r7, #68]	@ 0x44
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	330c      	adds	r3, #12
 80065e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065e4:	61ba      	str	r2, [r7, #24]
 80065e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e8:	6979      	ldr	r1, [r7, #20]
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	e841 2300 	strex	r3, r2, [r1]
 80065f0:	613b      	str	r3, [r7, #16]
   return(result);
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d1e5      	bne.n	80065c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2220      	movs	r2, #32
 80065fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006606:	bf00      	nop
 8006608:	3754      	adds	r7, #84	@ 0x54
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f7ff ff3d 	bl	80064ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006632:	bf00      	nop
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800663a:	b480      	push	{r7}
 800663c:	b085      	sub	sp, #20
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b21      	cmp	r3, #33	@ 0x21
 800664c:	d13e      	bne.n	80066cc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006656:	d114      	bne.n	8006682 <UART_Transmit_IT+0x48>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d110      	bne.n	8006682 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	461a      	mov	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006674:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	1c9a      	adds	r2, r3, #2
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	621a      	str	r2, [r3, #32]
 8006680:	e008      	b.n	8006694 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	1c59      	adds	r1, r3, #1
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	6211      	str	r1, [r2, #32]
 800668c:	781a      	ldrb	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006698:	b29b      	uxth	r3, r3
 800669a:	3b01      	subs	r3, #1
 800669c:	b29b      	uxth	r3, r3
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	4619      	mov	r1, r3
 80066a2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d10f      	bne.n	80066c8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066b6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066c6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066c8:	2300      	movs	r3, #0
 80066ca:	e000      	b.n	80066ce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066cc:	2302      	movs	r3, #2
  }
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr

080066da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b082      	sub	sp, #8
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68da      	ldr	r2, [r3, #12]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2220      	movs	r2, #32
 80066f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7ff fecc 	bl	8006498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3708      	adds	r7, #8
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}

0800670a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b08c      	sub	sp, #48	@ 0x30
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b22      	cmp	r3, #34	@ 0x22
 800671c:	f040 80ae 	bne.w	800687c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006728:	d117      	bne.n	800675a <UART_Receive_IT+0x50>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d113      	bne.n	800675a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006732:	2300      	movs	r3, #0
 8006734:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800673a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	b29b      	uxth	r3, r3
 8006744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006748:	b29a      	uxth	r2, r3
 800674a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800674c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006752:	1c9a      	adds	r2, r3, #2
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	629a      	str	r2, [r3, #40]	@ 0x28
 8006758:	e026      	b.n	80067a8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006760:	2300      	movs	r3, #0
 8006762:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800676c:	d007      	beq.n	800677e <UART_Receive_IT+0x74>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10a      	bne.n	800678c <UART_Receive_IT+0x82>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d106      	bne.n	800678c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	b2da      	uxtb	r2, r3
 8006786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006788:	701a      	strb	r2, [r3, #0]
 800678a:	e008      	b.n	800679e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	b2db      	uxtb	r3, r3
 8006794:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006798:	b2da      	uxtb	r2, r3
 800679a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800679c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a2:	1c5a      	adds	r2, r3, #1
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	3b01      	subs	r3, #1
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	4619      	mov	r1, r3
 80067b6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d15d      	bne.n	8006878 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 0220 	bic.w	r2, r2, #32
 80067ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68da      	ldr	r2, [r3, #12]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	695a      	ldr	r2, [r3, #20]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f022 0201 	bic.w	r2, r2, #1
 80067ea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2220      	movs	r2, #32
 80067f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d135      	bne.n	800686e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	330c      	adds	r3, #12
 800680e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	e853 3f00 	ldrex	r3, [r3]
 8006816:	613b      	str	r3, [r7, #16]
   return(result);
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f023 0310 	bic.w	r3, r3, #16
 800681e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	330c      	adds	r3, #12
 8006826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006828:	623a      	str	r2, [r7, #32]
 800682a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682c:	69f9      	ldr	r1, [r7, #28]
 800682e:	6a3a      	ldr	r2, [r7, #32]
 8006830:	e841 2300 	strex	r3, r2, [r1]
 8006834:	61bb      	str	r3, [r7, #24]
   return(result);
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1e5      	bne.n	8006808 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0310 	and.w	r3, r3, #16
 8006846:	2b10      	cmp	r3, #16
 8006848:	d10a      	bne.n	8006860 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800684a:	2300      	movs	r3, #0
 800684c:	60fb      	str	r3, [r7, #12]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006864:	4619      	mov	r1, r3
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7ff fe2a 	bl	80064c0 <HAL_UARTEx_RxEventCallback>
 800686c:	e002      	b.n	8006874 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fa fe96 	bl	80015a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	e002      	b.n	800687e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	e000      	b.n	800687e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800687c:	2302      	movs	r3, #2
  }
}
 800687e:	4618      	mov	r0, r3
 8006880:	3730      	adds	r7, #48	@ 0x30
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
	...

08006888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800688c:	b0c0      	sub	sp, #256	@ 0x100
 800688e:	af00      	add	r7, sp, #0
 8006890:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80068a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068a4:	68d9      	ldr	r1, [r3, #12]
 80068a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	ea40 0301 	orr.w	r3, r0, r1
 80068b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068b6:	689a      	ldr	r2, [r3, #8]
 80068b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	431a      	orrs	r2, r3
 80068c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	431a      	orrs	r2, r3
 80068c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80068d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80068e0:	f021 010c 	bic.w	r1, r1, #12
 80068e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068ee:	430b      	orrs	r3, r1
 80068f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80068fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006902:	6999      	ldr	r1, [r3, #24]
 8006904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	ea40 0301 	orr.w	r3, r0, r1
 800690e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	4b8f      	ldr	r3, [pc, #572]	@ (8006b54 <UART_SetConfig+0x2cc>)
 8006918:	429a      	cmp	r2, r3
 800691a:	d005      	beq.n	8006928 <UART_SetConfig+0xa0>
 800691c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	4b8d      	ldr	r3, [pc, #564]	@ (8006b58 <UART_SetConfig+0x2d0>)
 8006924:	429a      	cmp	r2, r3
 8006926:	d104      	bne.n	8006932 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006928:	f7fe fb84 	bl	8005034 <HAL_RCC_GetPCLK2Freq>
 800692c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006930:	e003      	b.n	800693a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006932:	f7fe fb6b 	bl	800500c <HAL_RCC_GetPCLK1Freq>
 8006936:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800693a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006944:	f040 810c 	bne.w	8006b60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800694c:	2200      	movs	r2, #0
 800694e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006952:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006956:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800695a:	4622      	mov	r2, r4
 800695c:	462b      	mov	r3, r5
 800695e:	1891      	adds	r1, r2, r2
 8006960:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006962:	415b      	adcs	r3, r3
 8006964:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006966:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800696a:	4621      	mov	r1, r4
 800696c:	eb12 0801 	adds.w	r8, r2, r1
 8006970:	4629      	mov	r1, r5
 8006972:	eb43 0901 	adc.w	r9, r3, r1
 8006976:	f04f 0200 	mov.w	r2, #0
 800697a:	f04f 0300 	mov.w	r3, #0
 800697e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006982:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006986:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800698a:	4690      	mov	r8, r2
 800698c:	4699      	mov	r9, r3
 800698e:	4623      	mov	r3, r4
 8006990:	eb18 0303 	adds.w	r3, r8, r3
 8006994:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006998:	462b      	mov	r3, r5
 800699a:	eb49 0303 	adc.w	r3, r9, r3
 800699e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80069a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80069ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80069b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80069b6:	460b      	mov	r3, r1
 80069b8:	18db      	adds	r3, r3, r3
 80069ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80069bc:	4613      	mov	r3, r2
 80069be:	eb42 0303 	adc.w	r3, r2, r3
 80069c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80069c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80069c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80069cc:	f7f9 fbfc 	bl	80001c8 <__aeabi_uldivmod>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	4b61      	ldr	r3, [pc, #388]	@ (8006b5c <UART_SetConfig+0x2d4>)
 80069d6:	fba3 2302 	umull	r2, r3, r3, r2
 80069da:	095b      	lsrs	r3, r3, #5
 80069dc:	011c      	lsls	r4, r3, #4
 80069de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069e2:	2200      	movs	r2, #0
 80069e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80069ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80069f0:	4642      	mov	r2, r8
 80069f2:	464b      	mov	r3, r9
 80069f4:	1891      	adds	r1, r2, r2
 80069f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80069f8:	415b      	adcs	r3, r3
 80069fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006a00:	4641      	mov	r1, r8
 8006a02:	eb12 0a01 	adds.w	sl, r2, r1
 8006a06:	4649      	mov	r1, r9
 8006a08:	eb43 0b01 	adc.w	fp, r3, r1
 8006a0c:	f04f 0200 	mov.w	r2, #0
 8006a10:	f04f 0300 	mov.w	r3, #0
 8006a14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a20:	4692      	mov	sl, r2
 8006a22:	469b      	mov	fp, r3
 8006a24:	4643      	mov	r3, r8
 8006a26:	eb1a 0303 	adds.w	r3, sl, r3
 8006a2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a2e:	464b      	mov	r3, r9
 8006a30:	eb4b 0303 	adc.w	r3, fp, r3
 8006a34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006a48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	18db      	adds	r3, r3, r3
 8006a50:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a52:	4613      	mov	r3, r2
 8006a54:	eb42 0303 	adc.w	r3, r2, r3
 8006a58:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006a5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006a62:	f7f9 fbb1 	bl	80001c8 <__aeabi_uldivmod>
 8006a66:	4602      	mov	r2, r0
 8006a68:	460b      	mov	r3, r1
 8006a6a:	4611      	mov	r1, r2
 8006a6c:	4b3b      	ldr	r3, [pc, #236]	@ (8006b5c <UART_SetConfig+0x2d4>)
 8006a6e:	fba3 2301 	umull	r2, r3, r3, r1
 8006a72:	095b      	lsrs	r3, r3, #5
 8006a74:	2264      	movs	r2, #100	@ 0x64
 8006a76:	fb02 f303 	mul.w	r3, r2, r3
 8006a7a:	1acb      	subs	r3, r1, r3
 8006a7c:	00db      	lsls	r3, r3, #3
 8006a7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006a82:	4b36      	ldr	r3, [pc, #216]	@ (8006b5c <UART_SetConfig+0x2d4>)
 8006a84:	fba3 2302 	umull	r2, r3, r3, r2
 8006a88:	095b      	lsrs	r3, r3, #5
 8006a8a:	005b      	lsls	r3, r3, #1
 8006a8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006a90:	441c      	add	r4, r3
 8006a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a96:	2200      	movs	r2, #0
 8006a98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006aa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006aa4:	4642      	mov	r2, r8
 8006aa6:	464b      	mov	r3, r9
 8006aa8:	1891      	adds	r1, r2, r2
 8006aaa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006aac:	415b      	adcs	r3, r3
 8006aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ab0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006ab4:	4641      	mov	r1, r8
 8006ab6:	1851      	adds	r1, r2, r1
 8006ab8:	6339      	str	r1, [r7, #48]	@ 0x30
 8006aba:	4649      	mov	r1, r9
 8006abc:	414b      	adcs	r3, r1
 8006abe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ac0:	f04f 0200 	mov.w	r2, #0
 8006ac4:	f04f 0300 	mov.w	r3, #0
 8006ac8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006acc:	4659      	mov	r1, fp
 8006ace:	00cb      	lsls	r3, r1, #3
 8006ad0:	4651      	mov	r1, sl
 8006ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ad6:	4651      	mov	r1, sl
 8006ad8:	00ca      	lsls	r2, r1, #3
 8006ada:	4610      	mov	r0, r2
 8006adc:	4619      	mov	r1, r3
 8006ade:	4603      	mov	r3, r0
 8006ae0:	4642      	mov	r2, r8
 8006ae2:	189b      	adds	r3, r3, r2
 8006ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ae8:	464b      	mov	r3, r9
 8006aea:	460a      	mov	r2, r1
 8006aec:	eb42 0303 	adc.w	r3, r2, r3
 8006af0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006b00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006b04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006b08:	460b      	mov	r3, r1
 8006b0a:	18db      	adds	r3, r3, r3
 8006b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b0e:	4613      	mov	r3, r2
 8006b10:	eb42 0303 	adc.w	r3, r2, r3
 8006b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006b1e:	f7f9 fb53 	bl	80001c8 <__aeabi_uldivmod>
 8006b22:	4602      	mov	r2, r0
 8006b24:	460b      	mov	r3, r1
 8006b26:	4b0d      	ldr	r3, [pc, #52]	@ (8006b5c <UART_SetConfig+0x2d4>)
 8006b28:	fba3 1302 	umull	r1, r3, r3, r2
 8006b2c:	095b      	lsrs	r3, r3, #5
 8006b2e:	2164      	movs	r1, #100	@ 0x64
 8006b30:	fb01 f303 	mul.w	r3, r1, r3
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	3332      	adds	r3, #50	@ 0x32
 8006b3a:	4a08      	ldr	r2, [pc, #32]	@ (8006b5c <UART_SetConfig+0x2d4>)
 8006b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b40:	095b      	lsrs	r3, r3, #5
 8006b42:	f003 0207 	and.w	r2, r3, #7
 8006b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4422      	add	r2, r4
 8006b4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b50:	e106      	b.n	8006d60 <UART_SetConfig+0x4d8>
 8006b52:	bf00      	nop
 8006b54:	40011000 	.word	0x40011000
 8006b58:	40011400 	.word	0x40011400
 8006b5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b64:	2200      	movs	r2, #0
 8006b66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006b6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006b72:	4642      	mov	r2, r8
 8006b74:	464b      	mov	r3, r9
 8006b76:	1891      	adds	r1, r2, r2
 8006b78:	6239      	str	r1, [r7, #32]
 8006b7a:	415b      	adcs	r3, r3
 8006b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b82:	4641      	mov	r1, r8
 8006b84:	1854      	adds	r4, r2, r1
 8006b86:	4649      	mov	r1, r9
 8006b88:	eb43 0501 	adc.w	r5, r3, r1
 8006b8c:	f04f 0200 	mov.w	r2, #0
 8006b90:	f04f 0300 	mov.w	r3, #0
 8006b94:	00eb      	lsls	r3, r5, #3
 8006b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b9a:	00e2      	lsls	r2, r4, #3
 8006b9c:	4614      	mov	r4, r2
 8006b9e:	461d      	mov	r5, r3
 8006ba0:	4643      	mov	r3, r8
 8006ba2:	18e3      	adds	r3, r4, r3
 8006ba4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ba8:	464b      	mov	r3, r9
 8006baa:	eb45 0303 	adc.w	r3, r5, r3
 8006bae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006bbe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006bc2:	f04f 0200 	mov.w	r2, #0
 8006bc6:	f04f 0300 	mov.w	r3, #0
 8006bca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006bce:	4629      	mov	r1, r5
 8006bd0:	008b      	lsls	r3, r1, #2
 8006bd2:	4621      	mov	r1, r4
 8006bd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bd8:	4621      	mov	r1, r4
 8006bda:	008a      	lsls	r2, r1, #2
 8006bdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006be0:	f7f9 faf2 	bl	80001c8 <__aeabi_uldivmod>
 8006be4:	4602      	mov	r2, r0
 8006be6:	460b      	mov	r3, r1
 8006be8:	4b60      	ldr	r3, [pc, #384]	@ (8006d6c <UART_SetConfig+0x4e4>)
 8006bea:	fba3 2302 	umull	r2, r3, r3, r2
 8006bee:	095b      	lsrs	r3, r3, #5
 8006bf0:	011c      	lsls	r4, r3, #4
 8006bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006bfc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006c00:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006c04:	4642      	mov	r2, r8
 8006c06:	464b      	mov	r3, r9
 8006c08:	1891      	adds	r1, r2, r2
 8006c0a:	61b9      	str	r1, [r7, #24]
 8006c0c:	415b      	adcs	r3, r3
 8006c0e:	61fb      	str	r3, [r7, #28]
 8006c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c14:	4641      	mov	r1, r8
 8006c16:	1851      	adds	r1, r2, r1
 8006c18:	6139      	str	r1, [r7, #16]
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	414b      	adcs	r3, r1
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	f04f 0200 	mov.w	r2, #0
 8006c24:	f04f 0300 	mov.w	r3, #0
 8006c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c2c:	4659      	mov	r1, fp
 8006c2e:	00cb      	lsls	r3, r1, #3
 8006c30:	4651      	mov	r1, sl
 8006c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c36:	4651      	mov	r1, sl
 8006c38:	00ca      	lsls	r2, r1, #3
 8006c3a:	4610      	mov	r0, r2
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	4603      	mov	r3, r0
 8006c40:	4642      	mov	r2, r8
 8006c42:	189b      	adds	r3, r3, r2
 8006c44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c48:	464b      	mov	r3, r9
 8006c4a:	460a      	mov	r2, r1
 8006c4c:	eb42 0303 	adc.w	r3, r2, r3
 8006c50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c5e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006c60:	f04f 0200 	mov.w	r2, #0
 8006c64:	f04f 0300 	mov.w	r3, #0
 8006c68:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006c6c:	4649      	mov	r1, r9
 8006c6e:	008b      	lsls	r3, r1, #2
 8006c70:	4641      	mov	r1, r8
 8006c72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c76:	4641      	mov	r1, r8
 8006c78:	008a      	lsls	r2, r1, #2
 8006c7a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006c7e:	f7f9 faa3 	bl	80001c8 <__aeabi_uldivmod>
 8006c82:	4602      	mov	r2, r0
 8006c84:	460b      	mov	r3, r1
 8006c86:	4611      	mov	r1, r2
 8006c88:	4b38      	ldr	r3, [pc, #224]	@ (8006d6c <UART_SetConfig+0x4e4>)
 8006c8a:	fba3 2301 	umull	r2, r3, r3, r1
 8006c8e:	095b      	lsrs	r3, r3, #5
 8006c90:	2264      	movs	r2, #100	@ 0x64
 8006c92:	fb02 f303 	mul.w	r3, r2, r3
 8006c96:	1acb      	subs	r3, r1, r3
 8006c98:	011b      	lsls	r3, r3, #4
 8006c9a:	3332      	adds	r3, #50	@ 0x32
 8006c9c:	4a33      	ldr	r2, [pc, #204]	@ (8006d6c <UART_SetConfig+0x4e4>)
 8006c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca2:	095b      	lsrs	r3, r3, #5
 8006ca4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ca8:	441c      	add	r4, r3
 8006caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cae:	2200      	movs	r2, #0
 8006cb0:	673b      	str	r3, [r7, #112]	@ 0x70
 8006cb2:	677a      	str	r2, [r7, #116]	@ 0x74
 8006cb4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006cb8:	4642      	mov	r2, r8
 8006cba:	464b      	mov	r3, r9
 8006cbc:	1891      	adds	r1, r2, r2
 8006cbe:	60b9      	str	r1, [r7, #8]
 8006cc0:	415b      	adcs	r3, r3
 8006cc2:	60fb      	str	r3, [r7, #12]
 8006cc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cc8:	4641      	mov	r1, r8
 8006cca:	1851      	adds	r1, r2, r1
 8006ccc:	6039      	str	r1, [r7, #0]
 8006cce:	4649      	mov	r1, r9
 8006cd0:	414b      	adcs	r3, r1
 8006cd2:	607b      	str	r3, [r7, #4]
 8006cd4:	f04f 0200 	mov.w	r2, #0
 8006cd8:	f04f 0300 	mov.w	r3, #0
 8006cdc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ce0:	4659      	mov	r1, fp
 8006ce2:	00cb      	lsls	r3, r1, #3
 8006ce4:	4651      	mov	r1, sl
 8006ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cea:	4651      	mov	r1, sl
 8006cec:	00ca      	lsls	r2, r1, #3
 8006cee:	4610      	mov	r0, r2
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	4642      	mov	r2, r8
 8006cf6:	189b      	adds	r3, r3, r2
 8006cf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cfa:	464b      	mov	r3, r9
 8006cfc:	460a      	mov	r2, r1
 8006cfe:	eb42 0303 	adc.w	r3, r2, r3
 8006d02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d0e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006d10:	f04f 0200 	mov.w	r2, #0
 8006d14:	f04f 0300 	mov.w	r3, #0
 8006d18:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006d1c:	4649      	mov	r1, r9
 8006d1e:	008b      	lsls	r3, r1, #2
 8006d20:	4641      	mov	r1, r8
 8006d22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d26:	4641      	mov	r1, r8
 8006d28:	008a      	lsls	r2, r1, #2
 8006d2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006d2e:	f7f9 fa4b 	bl	80001c8 <__aeabi_uldivmod>
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	4b0d      	ldr	r3, [pc, #52]	@ (8006d6c <UART_SetConfig+0x4e4>)
 8006d38:	fba3 1302 	umull	r1, r3, r3, r2
 8006d3c:	095b      	lsrs	r3, r3, #5
 8006d3e:	2164      	movs	r1, #100	@ 0x64
 8006d40:	fb01 f303 	mul.w	r3, r1, r3
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	011b      	lsls	r3, r3, #4
 8006d48:	3332      	adds	r3, #50	@ 0x32
 8006d4a:	4a08      	ldr	r2, [pc, #32]	@ (8006d6c <UART_SetConfig+0x4e4>)
 8006d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006d50:	095b      	lsrs	r3, r3, #5
 8006d52:	f003 020f 	and.w	r2, r3, #15
 8006d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4422      	add	r2, r4
 8006d5e:	609a      	str	r2, [r3, #8]
}
 8006d60:	bf00      	nop
 8006d62:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006d66:	46bd      	mov	sp, r7
 8006d68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d6c:	51eb851f 	.word	0x51eb851f

08006d70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d70:	b084      	sub	sp, #16
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b084      	sub	sp, #16
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	f107 001c 	add.w	r0, r7, #28
 8006d7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d82:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d123      	bne.n	8006dd2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d8e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006d9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006db2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d105      	bne.n	8006dc6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f001 fae8 	bl	800839c <USB_CoreReset>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	73fb      	strb	r3, [r7, #15]
 8006dd0:	e01b      	b.n	8006e0a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f001 fadc 	bl	800839c <USB_CoreReset>
 8006de4:	4603      	mov	r3, r0
 8006de6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006de8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d106      	bne.n	8006dfe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	639a      	str	r2, [r3, #56]	@ 0x38
 8006dfc:	e005      	b.n	8006e0a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e0a:	7fbb      	ldrb	r3, [r7, #30]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d10b      	bne.n	8006e28 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	f043 0206 	orr.w	r2, r3, #6
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f043 0220 	orr.w	r2, r3, #32
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e34:	b004      	add	sp, #16
 8006e36:	4770      	bx	lr

08006e38 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	4613      	mov	r3, r2
 8006e44:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006e46:	79fb      	ldrb	r3, [r7, #7]
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d165      	bne.n	8006f18 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	4a41      	ldr	r2, [pc, #260]	@ (8006f54 <USB_SetTurnaroundTime+0x11c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d906      	bls.n	8006e62 <USB_SetTurnaroundTime+0x2a>
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	4a40      	ldr	r2, [pc, #256]	@ (8006f58 <USB_SetTurnaroundTime+0x120>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d202      	bcs.n	8006e62 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006e5c:	230f      	movs	r3, #15
 8006e5e:	617b      	str	r3, [r7, #20]
 8006e60:	e062      	b.n	8006f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	4a3c      	ldr	r2, [pc, #240]	@ (8006f58 <USB_SetTurnaroundTime+0x120>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d306      	bcc.n	8006e78 <USB_SetTurnaroundTime+0x40>
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	4a3b      	ldr	r2, [pc, #236]	@ (8006f5c <USB_SetTurnaroundTime+0x124>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d202      	bcs.n	8006e78 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006e72:	230e      	movs	r3, #14
 8006e74:	617b      	str	r3, [r7, #20]
 8006e76:	e057      	b.n	8006f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	4a38      	ldr	r2, [pc, #224]	@ (8006f5c <USB_SetTurnaroundTime+0x124>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d306      	bcc.n	8006e8e <USB_SetTurnaroundTime+0x56>
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	4a37      	ldr	r2, [pc, #220]	@ (8006f60 <USB_SetTurnaroundTime+0x128>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d202      	bcs.n	8006e8e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006e88:	230d      	movs	r3, #13
 8006e8a:	617b      	str	r3, [r7, #20]
 8006e8c:	e04c      	b.n	8006f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	4a33      	ldr	r2, [pc, #204]	@ (8006f60 <USB_SetTurnaroundTime+0x128>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d306      	bcc.n	8006ea4 <USB_SetTurnaroundTime+0x6c>
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	4a32      	ldr	r2, [pc, #200]	@ (8006f64 <USB_SetTurnaroundTime+0x12c>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d802      	bhi.n	8006ea4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006e9e:	230c      	movs	r3, #12
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	e041      	b.n	8006f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	4a2f      	ldr	r2, [pc, #188]	@ (8006f64 <USB_SetTurnaroundTime+0x12c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d906      	bls.n	8006eba <USB_SetTurnaroundTime+0x82>
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	4a2e      	ldr	r2, [pc, #184]	@ (8006f68 <USB_SetTurnaroundTime+0x130>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d802      	bhi.n	8006eba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006eb4:	230b      	movs	r3, #11
 8006eb6:	617b      	str	r3, [r7, #20]
 8006eb8:	e036      	b.n	8006f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8006f68 <USB_SetTurnaroundTime+0x130>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d906      	bls.n	8006ed0 <USB_SetTurnaroundTime+0x98>
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	4a29      	ldr	r2, [pc, #164]	@ (8006f6c <USB_SetTurnaroundTime+0x134>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d802      	bhi.n	8006ed0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006eca:	230a      	movs	r3, #10
 8006ecc:	617b      	str	r3, [r7, #20]
 8006ece:	e02b      	b.n	8006f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	4a26      	ldr	r2, [pc, #152]	@ (8006f6c <USB_SetTurnaroundTime+0x134>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d906      	bls.n	8006ee6 <USB_SetTurnaroundTime+0xae>
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	4a25      	ldr	r2, [pc, #148]	@ (8006f70 <USB_SetTurnaroundTime+0x138>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d202      	bcs.n	8006ee6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006ee0:	2309      	movs	r3, #9
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	e020      	b.n	8006f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	4a21      	ldr	r2, [pc, #132]	@ (8006f70 <USB_SetTurnaroundTime+0x138>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d306      	bcc.n	8006efc <USB_SetTurnaroundTime+0xc4>
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	4a20      	ldr	r2, [pc, #128]	@ (8006f74 <USB_SetTurnaroundTime+0x13c>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d802      	bhi.n	8006efc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006ef6:	2308      	movs	r3, #8
 8006ef8:	617b      	str	r3, [r7, #20]
 8006efa:	e015      	b.n	8006f28 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	4a1d      	ldr	r2, [pc, #116]	@ (8006f74 <USB_SetTurnaroundTime+0x13c>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d906      	bls.n	8006f12 <USB_SetTurnaroundTime+0xda>
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	4a1c      	ldr	r2, [pc, #112]	@ (8006f78 <USB_SetTurnaroundTime+0x140>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d202      	bcs.n	8006f12 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006f0c:	2307      	movs	r3, #7
 8006f0e:	617b      	str	r3, [r7, #20]
 8006f10:	e00a      	b.n	8006f28 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006f12:	2306      	movs	r3, #6
 8006f14:	617b      	str	r3, [r7, #20]
 8006f16:	e007      	b.n	8006f28 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006f18:	79fb      	ldrb	r3, [r7, #7]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d102      	bne.n	8006f24 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006f1e:	2309      	movs	r3, #9
 8006f20:	617b      	str	r3, [r7, #20]
 8006f22:	e001      	b.n	8006f28 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006f24:	2309      	movs	r3, #9
 8006f26:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	68da      	ldr	r2, [r3, #12]
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	029b      	lsls	r3, r3, #10
 8006f3c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006f40:	431a      	orrs	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	371c      	adds	r7, #28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	00d8acbf 	.word	0x00d8acbf
 8006f58:	00e4e1c0 	.word	0x00e4e1c0
 8006f5c:	00f42400 	.word	0x00f42400
 8006f60:	01067380 	.word	0x01067380
 8006f64:	011a499f 	.word	0x011a499f
 8006f68:	01312cff 	.word	0x01312cff
 8006f6c:	014ca43f 	.word	0x014ca43f
 8006f70:	016e3600 	.word	0x016e3600
 8006f74:	01a6ab1f 	.word	0x01a6ab1f
 8006f78:	01e84800 	.word	0x01e84800

08006f7c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f043 0201 	orr.w	r2, r3, #1
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f023 0201 	bic.w	r2, r3, #1
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006fdc:	78fb      	ldrb	r3, [r7, #3]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d115      	bne.n	800700e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006fee:	200a      	movs	r0, #10
 8006ff0:	f7fb f8f8 	bl	80021e4 <HAL_Delay>
      ms += 10U;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	330a      	adds	r3, #10
 8006ff8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f001 f93f 	bl	800827e <USB_GetMode>
 8007000:	4603      	mov	r3, r0
 8007002:	2b01      	cmp	r3, #1
 8007004:	d01e      	beq.n	8007044 <USB_SetCurrentMode+0x84>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2bc7      	cmp	r3, #199	@ 0xc7
 800700a:	d9f0      	bls.n	8006fee <USB_SetCurrentMode+0x2e>
 800700c:	e01a      	b.n	8007044 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800700e:	78fb      	ldrb	r3, [r7, #3]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d115      	bne.n	8007040 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007020:	200a      	movs	r0, #10
 8007022:	f7fb f8df 	bl	80021e4 <HAL_Delay>
      ms += 10U;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	330a      	adds	r3, #10
 800702a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f001 f926 	bl	800827e <USB_GetMode>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d005      	beq.n	8007044 <USB_SetCurrentMode+0x84>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2bc7      	cmp	r3, #199	@ 0xc7
 800703c:	d9f0      	bls.n	8007020 <USB_SetCurrentMode+0x60>
 800703e:	e001      	b.n	8007044 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e005      	b.n	8007050 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2bc8      	cmp	r3, #200	@ 0xc8
 8007048:	d101      	bne.n	800704e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e000      	b.n	8007050 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007058:	b084      	sub	sp, #16
 800705a:	b580      	push	{r7, lr}
 800705c:	b086      	sub	sp, #24
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007066:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800706a:	2300      	movs	r3, #0
 800706c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007072:	2300      	movs	r3, #0
 8007074:	613b      	str	r3, [r7, #16]
 8007076:	e009      	b.n	800708c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	3340      	adds	r3, #64	@ 0x40
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	2200      	movs	r2, #0
 8007084:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	3301      	adds	r3, #1
 800708a:	613b      	str	r3, [r7, #16]
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	2b0e      	cmp	r3, #14
 8007090:	d9f2      	bls.n	8007078 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007092:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007096:	2b00      	cmp	r3, #0
 8007098:	d11c      	bne.n	80070d4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070a8:	f043 0302 	orr.w	r3, r3, #2
 80070ac:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070be:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80070d2:	e00b      	b.n	80070ec <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80070f2:	461a      	mov	r2, r3
 80070f4:	2300      	movs	r3, #0
 80070f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d10d      	bne.n	800711c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007100:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007104:	2b00      	cmp	r3, #0
 8007106:	d104      	bne.n	8007112 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007108:	2100      	movs	r1, #0
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f968 	bl	80073e0 <USB_SetDevSpeed>
 8007110:	e008      	b.n	8007124 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007112:	2101      	movs	r1, #1
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 f963 	bl	80073e0 <USB_SetDevSpeed>
 800711a:	e003      	b.n	8007124 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800711c:	2103      	movs	r1, #3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f95e 	bl	80073e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007124:	2110      	movs	r1, #16
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f8fa 	bl	8007320 <USB_FlushTxFifo>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f924 	bl	8007384 <USB_FlushRxFifo>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800714c:	461a      	mov	r2, r3
 800714e:	2300      	movs	r3, #0
 8007150:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007158:	461a      	mov	r2, r3
 800715a:	2300      	movs	r3, #0
 800715c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007164:	461a      	mov	r2, r3
 8007166:	2300      	movs	r3, #0
 8007168:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800716a:	2300      	movs	r3, #0
 800716c:	613b      	str	r3, [r7, #16]
 800716e:	e043      	b.n	80071f8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	015a      	lsls	r2, r3, #5
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4413      	add	r3, r2
 8007178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007182:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007186:	d118      	bne.n	80071ba <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10a      	bne.n	80071a4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	015a      	lsls	r2, r3, #5
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	4413      	add	r3, r2
 8007196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800719a:	461a      	mov	r2, r3
 800719c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	e013      	b.n	80071cc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071b0:	461a      	mov	r2, r3
 80071b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80071b6:	6013      	str	r3, [r2, #0]
 80071b8:	e008      	b.n	80071cc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071c6:	461a      	mov	r2, r3
 80071c8:	2300      	movs	r3, #0
 80071ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	015a      	lsls	r2, r3, #5
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071d8:	461a      	mov	r2, r3
 80071da:	2300      	movs	r3, #0
 80071dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	015a      	lsls	r2, r3, #5
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	4413      	add	r3, r2
 80071e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071ea:	461a      	mov	r2, r3
 80071ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80071f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	3301      	adds	r3, #1
 80071f6:	613b      	str	r3, [r7, #16]
 80071f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80071fc:	461a      	mov	r2, r3
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	4293      	cmp	r3, r2
 8007202:	d3b5      	bcc.n	8007170 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007204:	2300      	movs	r3, #0
 8007206:	613b      	str	r3, [r7, #16]
 8007208:	e043      	b.n	8007292 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	015a      	lsls	r2, r3, #5
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	4413      	add	r3, r2
 8007212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800721c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007220:	d118      	bne.n	8007254 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10a      	bne.n	800723e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4413      	add	r3, r2
 8007230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007234:	461a      	mov	r2, r3
 8007236:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800723a:	6013      	str	r3, [r2, #0]
 800723c:	e013      	b.n	8007266 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	015a      	lsls	r2, r3, #5
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	4413      	add	r3, r2
 8007246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800724a:	461a      	mov	r2, r3
 800724c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007250:	6013      	str	r3, [r2, #0]
 8007252:	e008      	b.n	8007266 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	015a      	lsls	r2, r3, #5
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	4413      	add	r3, r2
 800725c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007260:	461a      	mov	r2, r3
 8007262:	2300      	movs	r3, #0
 8007264:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4413      	add	r3, r2
 800726e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007272:	461a      	mov	r2, r3
 8007274:	2300      	movs	r3, #0
 8007276:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	015a      	lsls	r2, r3, #5
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4413      	add	r3, r2
 8007280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007284:	461a      	mov	r2, r3
 8007286:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800728a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	3301      	adds	r3, #1
 8007290:	613b      	str	r3, [r7, #16]
 8007292:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007296:	461a      	mov	r2, r3
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	4293      	cmp	r3, r2
 800729c:	d3b5      	bcc.n	800720a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80072be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80072c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d105      	bne.n	80072d4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	f043 0210 	orr.w	r2, r3, #16
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	699a      	ldr	r2, [r3, #24]
 80072d8:	4b10      	ldr	r3, [pc, #64]	@ (800731c <USB_DevInit+0x2c4>)
 80072da:	4313      	orrs	r3, r2
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80072e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d005      	beq.n	80072f4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	f043 0208 	orr.w	r2, r3, #8
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80072f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d107      	bne.n	800730c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007304:	f043 0304 	orr.w	r3, r3, #4
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800730c:	7dfb      	ldrb	r3, [r7, #23]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007318:	b004      	add	sp, #16
 800731a:	4770      	bx	lr
 800731c:	803c3800 	.word	0x803c3800

08007320 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	3301      	adds	r3, #1
 8007332:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800733a:	d901      	bls.n	8007340 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e01b      	b.n	8007378 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	2b00      	cmp	r3, #0
 8007346:	daf2      	bge.n	800732e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007348:	2300      	movs	r3, #0
 800734a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	019b      	lsls	r3, r3, #6
 8007350:	f043 0220 	orr.w	r2, r3, #32
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	3301      	adds	r3, #1
 800735c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007364:	d901      	bls.n	800736a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e006      	b.n	8007378 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	f003 0320 	and.w	r3, r3, #32
 8007372:	2b20      	cmp	r3, #32
 8007374:	d0f0      	beq.n	8007358 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3714      	adds	r7, #20
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	3301      	adds	r3, #1
 8007394:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800739c:	d901      	bls.n	80073a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e018      	b.n	80073d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	daf2      	bge.n	8007390 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80073aa:	2300      	movs	r3, #0
 80073ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2210      	movs	r2, #16
 80073b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	3301      	adds	r3, #1
 80073b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073c0:	d901      	bls.n	80073c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e006      	b.n	80073d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	f003 0310 	and.w	r3, r3, #16
 80073ce:	2b10      	cmp	r3, #16
 80073d0:	d0f0      	beq.n	80073b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	460b      	mov	r3, r1
 80073ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	78fb      	ldrb	r3, [r7, #3]
 80073fa:	68f9      	ldr	r1, [r7, #12]
 80073fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007400:	4313      	orrs	r3, r2
 8007402:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007412:	b480      	push	{r7}
 8007414:	b087      	sub	sp, #28
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f003 0306 	and.w	r3, r3, #6
 800742a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d102      	bne.n	8007438 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007432:	2300      	movs	r3, #0
 8007434:	75fb      	strb	r3, [r7, #23]
 8007436:	e00a      	b.n	800744e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2b02      	cmp	r3, #2
 800743c:	d002      	beq.n	8007444 <USB_GetDevSpeed+0x32>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2b06      	cmp	r3, #6
 8007442:	d102      	bne.n	800744a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007444:	2302      	movs	r3, #2
 8007446:	75fb      	strb	r3, [r7, #23]
 8007448:	e001      	b.n	800744e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800744a:	230f      	movs	r3, #15
 800744c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800744e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007450:	4618      	mov	r0, r3
 8007452:	371c      	adds	r7, #28
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	785b      	ldrb	r3, [r3, #1]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d13a      	bne.n	80074ee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800747e:	69da      	ldr	r2, [r3, #28]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	f003 030f 	and.w	r3, r3, #15
 8007488:	2101      	movs	r1, #1
 800748a:	fa01 f303 	lsl.w	r3, r1, r3
 800748e:	b29b      	uxth	r3, r3
 8007490:	68f9      	ldr	r1, [r7, #12]
 8007492:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007496:	4313      	orrs	r3, r2
 8007498:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	015a      	lsls	r2, r3, #5
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	4413      	add	r3, r2
 80074a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d155      	bne.n	800755c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	791b      	ldrb	r3, [r3, #4]
 80074ca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80074cc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	059b      	lsls	r3, r3, #22
 80074d2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80074d4:	4313      	orrs	r3, r2
 80074d6:	68ba      	ldr	r2, [r7, #8]
 80074d8:	0151      	lsls	r1, r2, #5
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	440a      	add	r2, r1
 80074de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074ea:	6013      	str	r3, [r2, #0]
 80074ec:	e036      	b.n	800755c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074f4:	69da      	ldr	r2, [r3, #28]
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	f003 030f 	and.w	r3, r3, #15
 80074fe:	2101      	movs	r1, #1
 8007500:	fa01 f303 	lsl.w	r3, r1, r3
 8007504:	041b      	lsls	r3, r3, #16
 8007506:	68f9      	ldr	r1, [r7, #12]
 8007508:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800750c:	4313      	orrs	r3, r2
 800750e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	015a      	lsls	r2, r3, #5
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	4413      	add	r3, r2
 8007518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d11a      	bne.n	800755c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	015a      	lsls	r2, r3, #5
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	4413      	add	r3, r2
 800752e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	791b      	ldrb	r3, [r3, #4]
 8007540:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007542:	430b      	orrs	r3, r1
 8007544:	4313      	orrs	r3, r2
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	0151      	lsls	r1, r2, #5
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	440a      	add	r2, r1
 800754e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007552:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007556:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800755a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
	...

0800756c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	785b      	ldrb	r3, [r3, #1]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d161      	bne.n	800764c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	4413      	add	r3, r2
 8007590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800759a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800759e:	d11f      	bne.n	80075e0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68ba      	ldr	r2, [r7, #8]
 80075b0:	0151      	lsls	r1, r2, #5
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	440a      	add	r2, r1
 80075b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80075be:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	0151      	lsls	r1, r2, #5
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	440a      	add	r2, r1
 80075d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80075de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	f003 030f 	and.w	r3, r3, #15
 80075f0:	2101      	movs	r1, #1
 80075f2:	fa01 f303 	lsl.w	r3, r1, r3
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	43db      	mvns	r3, r3
 80075fa:	68f9      	ldr	r1, [r7, #12]
 80075fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007600:	4013      	ands	r3, r2
 8007602:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800760a:	69da      	ldr	r2, [r3, #28]
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	f003 030f 	and.w	r3, r3, #15
 8007614:	2101      	movs	r1, #1
 8007616:	fa01 f303 	lsl.w	r3, r1, r3
 800761a:	b29b      	uxth	r3, r3
 800761c:	43db      	mvns	r3, r3
 800761e:	68f9      	ldr	r1, [r7, #12]
 8007620:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007624:	4013      	ands	r3, r2
 8007626:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	015a      	lsls	r2, r3, #5
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4413      	add	r3, r2
 8007630:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	0159      	lsls	r1, r3, #5
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	440b      	add	r3, r1
 800763e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007642:	4619      	mov	r1, r3
 8007644:	4b35      	ldr	r3, [pc, #212]	@ (800771c <USB_DeactivateEndpoint+0x1b0>)
 8007646:	4013      	ands	r3, r2
 8007648:	600b      	str	r3, [r1, #0]
 800764a:	e060      	b.n	800770e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	015a      	lsls	r2, r3, #5
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	4413      	add	r3, r2
 8007654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800765e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007662:	d11f      	bne.n	80076a4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68ba      	ldr	r2, [r7, #8]
 8007674:	0151      	lsls	r1, r2, #5
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	440a      	add	r2, r1
 800767a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800767e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007682:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	0151      	lsls	r1, r2, #5
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	440a      	add	r2, r1
 800769a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800769e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80076a2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	f003 030f 	and.w	r3, r3, #15
 80076b4:	2101      	movs	r1, #1
 80076b6:	fa01 f303 	lsl.w	r3, r1, r3
 80076ba:	041b      	lsls	r3, r3, #16
 80076bc:	43db      	mvns	r3, r3
 80076be:	68f9      	ldr	r1, [r7, #12]
 80076c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076c4:	4013      	ands	r3, r2
 80076c6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ce:	69da      	ldr	r2, [r3, #28]
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	f003 030f 	and.w	r3, r3, #15
 80076d8:	2101      	movs	r1, #1
 80076da:	fa01 f303 	lsl.w	r3, r1, r3
 80076de:	041b      	lsls	r3, r3, #16
 80076e0:	43db      	mvns	r3, r3
 80076e2:	68f9      	ldr	r1, [r7, #12]
 80076e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076e8:	4013      	ands	r3, r2
 80076ea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	015a      	lsls	r2, r3, #5
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	4413      	add	r3, r2
 80076f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	0159      	lsls	r1, r3, #5
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	440b      	add	r3, r1
 8007702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007706:	4619      	mov	r1, r3
 8007708:	4b05      	ldr	r3, [pc, #20]	@ (8007720 <USB_DeactivateEndpoint+0x1b4>)
 800770a:	4013      	ands	r3, r2
 800770c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	ec337800 	.word	0xec337800
 8007720:	eff37800 	.word	0xeff37800

08007724 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b08a      	sub	sp, #40	@ 0x28
 8007728:	af02      	add	r7, sp, #8
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	4613      	mov	r3, r2
 8007730:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	785b      	ldrb	r3, [r3, #1]
 8007740:	2b01      	cmp	r3, #1
 8007742:	f040 817f 	bne.w	8007a44 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d132      	bne.n	80077b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	015a      	lsls	r2, r3, #5
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	4413      	add	r3, r2
 8007756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	69ba      	ldr	r2, [r7, #24]
 800775e:	0151      	lsls	r1, r2, #5
 8007760:	69fa      	ldr	r2, [r7, #28]
 8007762:	440a      	add	r2, r1
 8007764:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007768:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800776c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007770:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	015a      	lsls	r2, r3, #5
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	4413      	add	r3, r2
 800777a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	69ba      	ldr	r2, [r7, #24]
 8007782:	0151      	lsls	r1, r2, #5
 8007784:	69fa      	ldr	r2, [r7, #28]
 8007786:	440a      	add	r2, r1
 8007788:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800778c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007790:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	015a      	lsls	r2, r3, #5
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	4413      	add	r3, r2
 800779a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	69ba      	ldr	r2, [r7, #24]
 80077a2:	0151      	lsls	r1, r2, #5
 80077a4:	69fa      	ldr	r2, [r7, #28]
 80077a6:	440a      	add	r2, r1
 80077a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077ac:	0cdb      	lsrs	r3, r3, #19
 80077ae:	04db      	lsls	r3, r3, #19
 80077b0:	6113      	str	r3, [r2, #16]
 80077b2:	e097      	b.n	80078e4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	69ba      	ldr	r2, [r7, #24]
 80077c4:	0151      	lsls	r1, r2, #5
 80077c6:	69fa      	ldr	r2, [r7, #28]
 80077c8:	440a      	add	r2, r1
 80077ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077ce:	0cdb      	lsrs	r3, r3, #19
 80077d0:	04db      	lsls	r3, r3, #19
 80077d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	69ba      	ldr	r2, [r7, #24]
 80077e4:	0151      	lsls	r1, r2, #5
 80077e6:	69fa      	ldr	r2, [r7, #28]
 80077e8:	440a      	add	r2, r1
 80077ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077ee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80077f2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80077f6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d11a      	bne.n	8007834 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	691a      	ldr	r2, [r3, #16]
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	429a      	cmp	r2, r3
 8007808:	d903      	bls.n	8007812 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	689a      	ldr	r2, [r3, #8]
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	015a      	lsls	r2, r3, #5
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	4413      	add	r3, r2
 800781a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	0151      	lsls	r1, r2, #5
 8007824:	69fa      	ldr	r2, [r7, #28]
 8007826:	440a      	add	r2, r1
 8007828:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800782c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007830:	6113      	str	r3, [r2, #16]
 8007832:	e044      	b.n	80078be <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	691a      	ldr	r2, [r3, #16]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	4413      	add	r3, r2
 800783e:	1e5a      	subs	r2, r3, #1
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	fbb2 f3f3 	udiv	r3, r2, r3
 8007848:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	4413      	add	r3, r2
 8007852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007856:	691a      	ldr	r2, [r3, #16]
 8007858:	8afb      	ldrh	r3, [r7, #22]
 800785a:	04d9      	lsls	r1, r3, #19
 800785c:	4ba4      	ldr	r3, [pc, #656]	@ (8007af0 <USB_EPStartXfer+0x3cc>)
 800785e:	400b      	ands	r3, r1
 8007860:	69b9      	ldr	r1, [r7, #24]
 8007862:	0148      	lsls	r0, r1, #5
 8007864:	69f9      	ldr	r1, [r7, #28]
 8007866:	4401      	add	r1, r0
 8007868:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800786c:	4313      	orrs	r3, r2
 800786e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	791b      	ldrb	r3, [r3, #4]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d122      	bne.n	80078be <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	4413      	add	r3, r2
 8007880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	69ba      	ldr	r2, [r7, #24]
 8007888:	0151      	lsls	r1, r2, #5
 800788a:	69fa      	ldr	r2, [r7, #28]
 800788c:	440a      	add	r2, r1
 800788e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007892:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007896:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078a4:	691a      	ldr	r2, [r3, #16]
 80078a6:	8afb      	ldrh	r3, [r7, #22]
 80078a8:	075b      	lsls	r3, r3, #29
 80078aa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80078ae:	69b9      	ldr	r1, [r7, #24]
 80078b0:	0148      	lsls	r0, r1, #5
 80078b2:	69f9      	ldr	r1, [r7, #28]
 80078b4:	4401      	add	r1, r0
 80078b6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80078ba:	4313      	orrs	r3, r2
 80078bc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	015a      	lsls	r2, r3, #5
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	4413      	add	r3, r2
 80078c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078ca:	691a      	ldr	r2, [r3, #16]
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	691b      	ldr	r3, [r3, #16]
 80078d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078d4:	69b9      	ldr	r1, [r7, #24]
 80078d6:	0148      	lsls	r0, r1, #5
 80078d8:	69f9      	ldr	r1, [r7, #28]
 80078da:	4401      	add	r1, r0
 80078dc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80078e0:	4313      	orrs	r3, r2
 80078e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80078e4:	79fb      	ldrb	r3, [r7, #7]
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	d14b      	bne.n	8007982 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d009      	beq.n	8007906 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078fe:	461a      	mov	r2, r3
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	69db      	ldr	r3, [r3, #28]
 8007904:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	791b      	ldrb	r3, [r3, #4]
 800790a:	2b01      	cmp	r3, #1
 800790c:	d128      	bne.n	8007960 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800791a:	2b00      	cmp	r3, #0
 800791c:	d110      	bne.n	8007940 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	4413      	add	r3, r2
 8007926:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	69ba      	ldr	r2, [r7, #24]
 800792e:	0151      	lsls	r1, r2, #5
 8007930:	69fa      	ldr	r2, [r7, #28]
 8007932:	440a      	add	r2, r1
 8007934:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007938:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800793c:	6013      	str	r3, [r2, #0]
 800793e:	e00f      	b.n	8007960 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	4413      	add	r3, r2
 8007948:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	0151      	lsls	r1, r2, #5
 8007952:	69fa      	ldr	r2, [r7, #28]
 8007954:	440a      	add	r2, r1
 8007956:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800795a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800795e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	69fb      	ldr	r3, [r7, #28]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	69ba      	ldr	r2, [r7, #24]
 8007970:	0151      	lsls	r1, r2, #5
 8007972:	69fa      	ldr	r2, [r7, #28]
 8007974:	440a      	add	r2, r1
 8007976:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800797a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800797e:	6013      	str	r3, [r2, #0]
 8007980:	e166      	b.n	8007c50 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	015a      	lsls	r2, r3, #5
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	4413      	add	r3, r2
 800798a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	0151      	lsls	r1, r2, #5
 8007994:	69fa      	ldr	r2, [r7, #28]
 8007996:	440a      	add	r2, r1
 8007998:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800799c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80079a0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	791b      	ldrb	r3, [r3, #4]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d015      	beq.n	80079d6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 814e 	beq.w	8007c50 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	f003 030f 	and.w	r3, r3, #15
 80079c4:	2101      	movs	r1, #1
 80079c6:	fa01 f303 	lsl.w	r3, r1, r3
 80079ca:	69f9      	ldr	r1, [r7, #28]
 80079cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079d0:	4313      	orrs	r3, r2
 80079d2:	634b      	str	r3, [r1, #52]	@ 0x34
 80079d4:	e13c      	b.n	8007c50 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d110      	bne.n	8007a08 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	015a      	lsls	r2, r3, #5
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	4413      	add	r3, r2
 80079ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	0151      	lsls	r1, r2, #5
 80079f8:	69fa      	ldr	r2, [r7, #28]
 80079fa:	440a      	add	r2, r1
 80079fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007a04:	6013      	str	r3, [r2, #0]
 8007a06:	e00f      	b.n	8007a28 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	015a      	lsls	r2, r3, #5
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	4413      	add	r3, r2
 8007a10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	69ba      	ldr	r2, [r7, #24]
 8007a18:	0151      	lsls	r1, r2, #5
 8007a1a:	69fa      	ldr	r2, [r7, #28]
 8007a1c:	440a      	add	r2, r1
 8007a1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a26:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	68d9      	ldr	r1, [r3, #12]
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	781a      	ldrb	r2, [r3, #0]
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	b298      	uxth	r0, r3
 8007a36:	79fb      	ldrb	r3, [r7, #7]
 8007a38:	9300      	str	r3, [sp, #0]
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 f9b9 	bl	8007db4 <USB_WritePacket>
 8007a42:	e105      	b.n	8007c50 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	69ba      	ldr	r2, [r7, #24]
 8007a54:	0151      	lsls	r1, r2, #5
 8007a56:	69fa      	ldr	r2, [r7, #28]
 8007a58:	440a      	add	r2, r1
 8007a5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a5e:	0cdb      	lsrs	r3, r3, #19
 8007a60:	04db      	lsls	r3, r3, #19
 8007a62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	69ba      	ldr	r2, [r7, #24]
 8007a74:	0151      	lsls	r1, r2, #5
 8007a76:	69fa      	ldr	r2, [r7, #28]
 8007a78:	440a      	add	r2, r1
 8007a7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a7e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007a82:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007a86:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d132      	bne.n	8007af4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	689a      	ldr	r2, [r3, #8]
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	689a      	ldr	r2, [r3, #8]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	015a      	lsls	r2, r3, #5
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ab2:	691a      	ldr	r2, [r3, #16]
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	6a1b      	ldr	r3, [r3, #32]
 8007ab8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007abc:	69b9      	ldr	r1, [r7, #24]
 8007abe:	0148      	lsls	r0, r1, #5
 8007ac0:	69f9      	ldr	r1, [r7, #28]
 8007ac2:	4401      	add	r1, r0
 8007ac4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	69ba      	ldr	r2, [r7, #24]
 8007adc:	0151      	lsls	r1, r2, #5
 8007ade:	69fa      	ldr	r2, [r7, #28]
 8007ae0:	440a      	add	r2, r1
 8007ae2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ae6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007aea:	6113      	str	r3, [r2, #16]
 8007aec:	e062      	b.n	8007bb4 <USB_EPStartXfer+0x490>
 8007aee:	bf00      	nop
 8007af0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d123      	bne.n	8007b44 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b08:	691a      	ldr	r2, [r3, #16]
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b12:	69b9      	ldr	r1, [r7, #24]
 8007b14:	0148      	lsls	r0, r1, #5
 8007b16:	69f9      	ldr	r1, [r7, #28]
 8007b18:	4401      	add	r1, r0
 8007b1a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	0151      	lsls	r1, r2, #5
 8007b34:	69fa      	ldr	r2, [r7, #28]
 8007b36:	440a      	add	r2, r1
 8007b38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b3c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b40:	6113      	str	r3, [r2, #16]
 8007b42:	e037      	b.n	8007bb4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	691a      	ldr	r2, [r3, #16]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	1e5a      	subs	r2, r3, #1
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b58:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	8afa      	ldrh	r2, [r7, #22]
 8007b60:	fb03 f202 	mul.w	r2, r3, r2
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	015a      	lsls	r2, r3, #5
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b74:	691a      	ldr	r2, [r3, #16]
 8007b76:	8afb      	ldrh	r3, [r7, #22]
 8007b78:	04d9      	lsls	r1, r3, #19
 8007b7a:	4b38      	ldr	r3, [pc, #224]	@ (8007c5c <USB_EPStartXfer+0x538>)
 8007b7c:	400b      	ands	r3, r1
 8007b7e:	69b9      	ldr	r1, [r7, #24]
 8007b80:	0148      	lsls	r0, r1, #5
 8007b82:	69f9      	ldr	r1, [r7, #28]
 8007b84:	4401      	add	r1, r0
 8007b86:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	015a      	lsls	r2, r3, #5
 8007b92:	69fb      	ldr	r3, [r7, #28]
 8007b94:	4413      	add	r3, r2
 8007b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b9a:	691a      	ldr	r2, [r3, #16]
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ba4:	69b9      	ldr	r1, [r7, #24]
 8007ba6:	0148      	lsls	r0, r1, #5
 8007ba8:	69f9      	ldr	r1, [r7, #28]
 8007baa:	4401      	add	r1, r0
 8007bac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007bb4:	79fb      	ldrb	r3, [r7, #7]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d10d      	bne.n	8007bd6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d009      	beq.n	8007bd6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	68d9      	ldr	r1, [r3, #12]
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	015a      	lsls	r2, r3, #5
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	4413      	add	r3, r2
 8007bce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bd2:	460a      	mov	r2, r1
 8007bd4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	791b      	ldrb	r3, [r3, #4]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d128      	bne.n	8007c30 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d110      	bne.n	8007c10 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007bee:	69bb      	ldr	r3, [r7, #24]
 8007bf0:	015a      	lsls	r2, r3, #5
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	69ba      	ldr	r2, [r7, #24]
 8007bfe:	0151      	lsls	r1, r2, #5
 8007c00:	69fa      	ldr	r2, [r7, #28]
 8007c02:	440a      	add	r2, r1
 8007c04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007c0c:	6013      	str	r3, [r2, #0]
 8007c0e:	e00f      	b.n	8007c30 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	015a      	lsls	r2, r3, #5
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	4413      	add	r3, r2
 8007c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	69ba      	ldr	r2, [r7, #24]
 8007c20:	0151      	lsls	r1, r2, #5
 8007c22:	69fa      	ldr	r2, [r7, #28]
 8007c24:	440a      	add	r2, r1
 8007c26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c30:	69bb      	ldr	r3, [r7, #24]
 8007c32:	015a      	lsls	r2, r3, #5
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	69ba      	ldr	r2, [r7, #24]
 8007c40:	0151      	lsls	r1, r2, #5
 8007c42:	69fa      	ldr	r2, [r7, #28]
 8007c44:	440a      	add	r2, r1
 8007c46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c4a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007c4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3720      	adds	r7, #32
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	1ff80000 	.word	0x1ff80000

08007c60 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	785b      	ldrb	r3, [r3, #1]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d14a      	bne.n	8007d14 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c96:	f040 8086 	bne.w	8007da6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	7812      	ldrb	r2, [r2, #0]
 8007cae:	0151      	lsls	r1, r2, #5
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	440a      	add	r2, r1
 8007cb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cb8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007cbc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	015a      	lsls	r2, r3, #5
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	7812      	ldrb	r2, [r2, #0]
 8007cd2:	0151      	lsls	r1, r2, #5
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	440a      	add	r2, r1
 8007cd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cdc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ce0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d902      	bls.n	8007cf8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	75fb      	strb	r3, [r7, #23]
          break;
 8007cf6:	e056      	b.n	8007da6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d10:	d0e7      	beq.n	8007ce2 <USB_EPStopXfer+0x82>
 8007d12:	e048      	b.n	8007da6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	015a      	lsls	r2, r3, #5
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d2c:	d13b      	bne.n	8007da6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	015a      	lsls	r2, r3, #5
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	4413      	add	r3, r2
 8007d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	7812      	ldrb	r2, [r2, #0]
 8007d42:	0151      	lsls	r1, r2, #5
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	440a      	add	r2, r1
 8007d48:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007d50:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	7812      	ldrb	r2, [r2, #0]
 8007d66:	0151      	lsls	r1, r2, #5
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	440a      	add	r2, r1
 8007d6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d74:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	3301      	adds	r3, #1
 8007d7a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d902      	bls.n	8007d8c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	75fb      	strb	r3, [r7, #23]
          break;
 8007d8a:	e00c      	b.n	8007da6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	015a      	lsls	r2, r3, #5
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	4413      	add	r3, r2
 8007d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007da0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007da4:	d0e7      	beq.n	8007d76 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	371c      	adds	r7, #28
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b089      	sub	sp, #36	@ 0x24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	71fb      	strb	r3, [r7, #7]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007dd2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d123      	bne.n	8007e22 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007dda:	88bb      	ldrh	r3, [r7, #4]
 8007ddc:	3303      	adds	r3, #3
 8007dde:	089b      	lsrs	r3, r3, #2
 8007de0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007de2:	2300      	movs	r3, #0
 8007de4:	61bb      	str	r3, [r7, #24]
 8007de6:	e018      	b.n	8007e1a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007de8:	79fb      	ldrb	r3, [r7, #7]
 8007dea:	031a      	lsls	r2, r3, #12
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	4413      	add	r3, r2
 8007df0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007df4:	461a      	mov	r2, r3
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e02:	69fb      	ldr	r3, [r7, #28]
 8007e04:	3301      	adds	r3, #1
 8007e06:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	3301      	adds	r3, #1
 8007e12:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	3301      	adds	r3, #1
 8007e18:	61bb      	str	r3, [r7, #24]
 8007e1a:	69ba      	ldr	r2, [r7, #24]
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d3e2      	bcc.n	8007de8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3724      	adds	r7, #36	@ 0x24
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b08b      	sub	sp, #44	@ 0x2c
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007e46:	88fb      	ldrh	r3, [r7, #6]
 8007e48:	089b      	lsrs	r3, r3, #2
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007e4e:	88fb      	ldrh	r3, [r7, #6]
 8007e50:	f003 0303 	and.w	r3, r3, #3
 8007e54:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007e56:	2300      	movs	r3, #0
 8007e58:	623b      	str	r3, [r7, #32]
 8007e5a:	e014      	b.n	8007e86 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e66:	601a      	str	r2, [r3, #0]
    pDest++;
 8007e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e70:	3301      	adds	r3, #1
 8007e72:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e76:	3301      	adds	r3, #1
 8007e78:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007e80:	6a3b      	ldr	r3, [r7, #32]
 8007e82:	3301      	adds	r3, #1
 8007e84:	623b      	str	r3, [r7, #32]
 8007e86:	6a3a      	ldr	r2, [r7, #32]
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d3e6      	bcc.n	8007e5c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007e8e:	8bfb      	ldrh	r3, [r7, #30]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d01e      	beq.n	8007ed2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007e94:	2300      	movs	r3, #0
 8007e96:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	f107 0310 	add.w	r3, r7, #16
 8007ea4:	6812      	ldr	r2, [r2, #0]
 8007ea6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	00db      	lsls	r3, r3, #3
 8007eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb8:	701a      	strb	r2, [r3, #0]
      i++;
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	3301      	adds	r3, #1
 8007ebe:	623b      	str	r3, [r7, #32]
      pDest++;
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007ec6:	8bfb      	ldrh	r3, [r7, #30]
 8007ec8:	3b01      	subs	r3, #1
 8007eca:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007ecc:	8bfb      	ldrh	r3, [r7, #30]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1ea      	bne.n	8007ea8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	372c      	adds	r7, #44	@ 0x2c
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b085      	sub	sp, #20
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	785b      	ldrb	r3, [r3, #1]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d12c      	bne.n	8007f56 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	015a      	lsls	r2, r3, #5
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4413      	add	r3, r2
 8007f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	db12      	blt.n	8007f34 <USB_EPSetStall+0x54>
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00f      	beq.n	8007f34 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	015a      	lsls	r2, r3, #5
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	0151      	lsls	r1, r2, #5
 8007f26:	68fa      	ldr	r2, [r7, #12]
 8007f28:	440a      	add	r2, r1
 8007f2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f2e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007f32:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	015a      	lsls	r2, r3, #5
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	4413      	add	r3, r2
 8007f3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	0151      	lsls	r1, r2, #5
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	440a      	add	r2, r1
 8007f4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007f52:	6013      	str	r3, [r2, #0]
 8007f54:	e02b      	b.n	8007fae <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	015a      	lsls	r2, r3, #5
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	db12      	blt.n	8007f8e <USB_EPSetStall+0xae>
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d00f      	beq.n	8007f8e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	0151      	lsls	r1, r2, #5
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	440a      	add	r2, r1
 8007f84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f88:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007f8c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	015a      	lsls	r2, r3, #5
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	4413      	add	r3, r2
 8007f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	0151      	lsls	r1, r2, #5
 8007fa0:	68fa      	ldr	r2, [r7, #12]
 8007fa2:	440a      	add	r2, r1
 8007fa4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fa8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007fac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	785b      	ldrb	r3, [r3, #1]
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d128      	bne.n	800802a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68ba      	ldr	r2, [r7, #8]
 8007fe8:	0151      	lsls	r1, r2, #5
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	440a      	add	r2, r1
 8007fee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ff2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ff6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	791b      	ldrb	r3, [r3, #4]
 8007ffc:	2b03      	cmp	r3, #3
 8007ffe:	d003      	beq.n	8008008 <USB_EPClearStall+0x4c>
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	791b      	ldrb	r3, [r3, #4]
 8008004:	2b02      	cmp	r3, #2
 8008006:	d138      	bne.n	800807a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	0151      	lsls	r1, r2, #5
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	440a      	add	r2, r1
 800801e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008026:	6013      	str	r3, [r2, #0]
 8008028:	e027      	b.n	800807a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	015a      	lsls	r2, r3, #5
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	4413      	add	r3, r2
 8008032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	0151      	lsls	r1, r2, #5
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	440a      	add	r2, r1
 8008040:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008044:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008048:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	791b      	ldrb	r3, [r3, #4]
 800804e:	2b03      	cmp	r3, #3
 8008050:	d003      	beq.n	800805a <USB_EPClearStall+0x9e>
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	791b      	ldrb	r3, [r3, #4]
 8008056:	2b02      	cmp	r3, #2
 8008058:	d10f      	bne.n	800807a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	015a      	lsls	r2, r3, #5
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	4413      	add	r3, r2
 8008062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	0151      	lsls	r1, r2, #5
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	440a      	add	r2, r1
 8008070:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008074:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008078:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	460b      	mov	r3, r1
 8008092:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68fa      	ldr	r2, [r7, #12]
 80080a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80080aa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	78fb      	ldrb	r3, [r7, #3]
 80080b6:	011b      	lsls	r3, r3, #4
 80080b8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80080bc:	68f9      	ldr	r1, [r7, #12]
 80080be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080c2:	4313      	orrs	r3, r2
 80080c4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80080c6:	2300      	movs	r3, #0
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b085      	sub	sp, #20
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80080ee:	f023 0303 	bic.w	r3, r3, #3
 80080f2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	68fa      	ldr	r2, [r7, #12]
 80080fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008102:	f023 0302 	bic.w	r3, r3, #2
 8008106:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008108:	2300      	movs	r3, #0
}
 800810a:	4618      	mov	r0, r3
 800810c:	3714      	adds	r7, #20
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008116:	b480      	push	{r7}
 8008118:	b085      	sub	sp, #20
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008130:	f023 0303 	bic.w	r3, r3, #3
 8008134:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	68fa      	ldr	r2, [r7, #12]
 8008140:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008144:	f043 0302 	orr.w	r3, r3, #2
 8008148:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	4013      	ands	r3, r2
 800816e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008170:	68fb      	ldr	r3, [r7, #12]
}
 8008172:	4618      	mov	r0, r3
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr

0800817e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800817e:	b480      	push	{r7}
 8008180:	b085      	sub	sp, #20
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800819a:	69db      	ldr	r3, [r3, #28]
 800819c:	68ba      	ldr	r2, [r7, #8]
 800819e:	4013      	ands	r3, r2
 80081a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	0c1b      	lsrs	r3, r3, #16
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b085      	sub	sp, #20
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081ce:	69db      	ldr	r3, [r3, #28]
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	4013      	ands	r3, r2
 80081d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	b29b      	uxth	r3, r3
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b085      	sub	sp, #20
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	460b      	mov	r3, r1
 80081f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80081f6:	78fb      	ldrb	r3, [r7, #3]
 80081f8:	015a      	lsls	r2, r3, #5
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	4013      	ands	r3, r2
 8008212:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008214:	68bb      	ldr	r3, [r7, #8]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008222:	b480      	push	{r7}
 8008224:	b087      	sub	sp, #28
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	460b      	mov	r3, r1
 800822c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008242:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008244:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008246:	78fb      	ldrb	r3, [r7, #3]
 8008248:	f003 030f 	and.w	r3, r3, #15
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	fa22 f303 	lsr.w	r3, r2, r3
 8008252:	01db      	lsls	r3, r3, #7
 8008254:	b2db      	uxtb	r3, r3
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	4313      	orrs	r3, r2
 800825a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800825c:	78fb      	ldrb	r3, [r7, #3]
 800825e:	015a      	lsls	r2, r3, #5
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	4413      	add	r3, r2
 8008264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	4013      	ands	r3, r2
 800826e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008270:	68bb      	ldr	r3, [r7, #8]
}
 8008272:	4618      	mov	r0, r3
 8008274:	371c      	adds	r7, #28
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr

0800827e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800827e:	b480      	push	{r7}
 8008280:	b083      	sub	sp, #12
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	f003 0301 	and.w	r3, r3, #1
}
 800828e:	4618      	mov	r0, r3
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr

0800829a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800829a:	b480      	push	{r7}
 800829c:	b085      	sub	sp, #20
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082b4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80082b8:	f023 0307 	bic.w	r3, r3, #7
 80082bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b087      	sub	sp, #28
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	460b      	mov	r3, r1
 80082ea:	607a      	str	r2, [r7, #4]
 80082ec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	333c      	adds	r3, #60	@ 0x3c
 80082f6:	3304      	adds	r3, #4
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	4a26      	ldr	r2, [pc, #152]	@ (8008398 <USB_EP0_OutStart+0xb8>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d90a      	bls.n	800831a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008310:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008314:	d101      	bne.n	800831a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	e037      	b.n	800838a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008320:	461a      	mov	r2, r3
 8008322:	2300      	movs	r3, #0
 8008324:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008334:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008338:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008348:	f043 0318 	orr.w	r3, r3, #24
 800834c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800835c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008360:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008362:	7afb      	ldrb	r3, [r7, #11]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d10f      	bne.n	8008388 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800836e:	461a      	mov	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008382:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008386:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	371c      	adds	r7, #28
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	4f54300a 	.word	0x4f54300a

0800839c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800839c:	b480      	push	{r7}
 800839e:	b085      	sub	sp, #20
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	3301      	adds	r3, #1
 80083ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083b4:	d901      	bls.n	80083ba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80083b6:	2303      	movs	r3, #3
 80083b8:	e01b      	b.n	80083f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	daf2      	bge.n	80083a8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80083c2:	2300      	movs	r3, #0
 80083c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	f043 0201 	orr.w	r2, r3, #1
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	3301      	adds	r3, #1
 80083d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083de:	d901      	bls.n	80083e4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e006      	b.n	80083f2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	f003 0301 	and.w	r3, r3, #1
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d0f0      	beq.n	80083d2 <USB_CoreReset+0x36>

  return HAL_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3714      	adds	r7, #20
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
	...

08008400 <Motor_setup_LF>:
char* IN_RF;
char* IN_RB;
char* IN_EXTRA1;
char* IN_EXTRA2;

void Motor_setup_LF(TIM_HandleTypeDef *_TIM_14_CH1 ,TIM_HandleTypeDef *_TIM_5  ,char* _IN_LF){
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
	//Motor_setup_LF(PWM_TIM ,Encoder_TIM   ,IN_LF);

	LF_PWM = _TIM_14_CH1;
 800840c:	4a0f      	ldr	r2, [pc, #60]	@ (800844c <Motor_setup_LF+0x4c>)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	6013      	str	r3, [r2, #0]
	EN_LF      = _TIM_5;
 8008412:	4a0f      	ldr	r2, [pc, #60]	@ (8008450 <Motor_setup_LF+0x50>)
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(LF_PWM, TIM_CHANNEL_1);       //PWM
 8008418:	4b0c      	ldr	r3, [pc, #48]	@ (800844c <Motor_setup_LF+0x4c>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2100      	movs	r1, #0
 800841e:	4618      	mov	r0, r3
 8008420:	f7fc ff44 	bl	80052ac <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_LF , TIM_CHANNEL_ALL);     //Encoder
 8008424:	4b0a      	ldr	r3, [pc, #40]	@ (8008450 <Motor_setup_LF+0x50>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	213c      	movs	r1, #60	@ 0x3c
 800842a:	4618      	mov	r0, r3
 800842c:	f7fd f8ac 	bl	8005588 <HAL_TIM_Encoder_Start>

	IN_LF = _IN_LF;
 8008430:	4a08      	ldr	r2, [pc, #32]	@ (8008454 <Motor_setup_LF+0x54>)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6013      	str	r3, [r2, #0]

	DutyCycle_LF_MAX = (LF_PWM->Init.Period);
 8008436:	4b05      	ldr	r3, [pc, #20]	@ (800844c <Motor_setup_LF+0x4c>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	b21a      	sxth	r2, r3
 800843e:	4b06      	ldr	r3, [pc, #24]	@ (8008458 <Motor_setup_LF+0x58>)
 8008440:	801a      	strh	r2, [r3, #0]

}
 8008442:	bf00      	nop
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	20000664 	.word	0x20000664
 8008450:	2000064c 	.word	0x2000064c
 8008454:	20000688 	.word	0x20000688
 8008458:	2000067c 	.word	0x2000067c

0800845c <Motor_setup_LB>:

void Motor_setup_LB(TIM_HandleTypeDef *_TIM_12_CH1 ,TIM_HandleTypeDef *_TIM_1  ,char* _IN_LB){
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
    //Motor_setup_LB(PWM_TIM ,Encoder_TIM  ,IN1_LB ,IN2_LB);

	LB_PWM = _TIM_12_CH1;
 8008468:	4a0f      	ldr	r2, [pc, #60]	@ (80084a8 <Motor_setup_LB+0x4c>)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6013      	str	r3, [r2, #0]
	EN_LB      = _TIM_1;
 800846e:	4a0f      	ldr	r2, [pc, #60]	@ (80084ac <Motor_setup_LB+0x50>)
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(LB_PWM, TIM_CHANNEL_1);       //PWM
 8008474:	4b0c      	ldr	r3, [pc, #48]	@ (80084a8 <Motor_setup_LB+0x4c>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2100      	movs	r1, #0
 800847a:	4618      	mov	r0, r3
 800847c:	f7fc ff16 	bl	80052ac <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_LB , TIM_CHANNEL_ALL);     //Encoder
 8008480:	4b0a      	ldr	r3, [pc, #40]	@ (80084ac <Motor_setup_LB+0x50>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	213c      	movs	r1, #60	@ 0x3c
 8008486:	4618      	mov	r0, r3
 8008488:	f7fd f87e 	bl	8005588 <HAL_TIM_Encoder_Start>

	IN_LB = _IN_LB;
 800848c:	4a08      	ldr	r2, [pc, #32]	@ (80084b0 <Motor_setup_LB+0x54>)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6013      	str	r3, [r2, #0]

	DutyCycle_LB_MAX = (LB_PWM->Init.Period);
 8008492:	4b05      	ldr	r3, [pc, #20]	@ (80084a8 <Motor_setup_LB+0x4c>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	b21a      	sxth	r2, r3
 800849a:	4b06      	ldr	r3, [pc, #24]	@ (80084b4 <Motor_setup_LB+0x58>)
 800849c:	801a      	strh	r2, [r3, #0]

}
 800849e:	bf00      	nop
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20000668 	.word	0x20000668
 80084ac:	20000650 	.word	0x20000650
 80084b0:	2000068c 	.word	0x2000068c
 80084b4:	2000067e 	.word	0x2000067e

080084b8 <Motor_setup_RF>:

void Motor_setup_RF(TIM_HandleTypeDef *_TIM_11_CH1  ,TIM_HandleTypeDef *_TIM_8  ,char* _IN_RF){
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
    //Motor_setup_RF(PWM_TIM ,Encoder_TIM   ,IN1_RF ,IN2_RF);

	RF_PWM = _TIM_11_CH1;
 80084c4:	4a0f      	ldr	r2, [pc, #60]	@ (8008504 <Motor_setup_RF+0x4c>)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6013      	str	r3, [r2, #0]
	EN_RF  = _TIM_8;
 80084ca:	4a0f      	ldr	r2, [pc, #60]	@ (8008508 <Motor_setup_RF+0x50>)
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(RF_PWM, TIM_CHANNEL_1);           //PWM
 80084d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008504 <Motor_setup_RF+0x4c>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2100      	movs	r1, #0
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fc fee8 	bl	80052ac <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_RF , TIM_CHANNEL_ALL);     //Encoder
 80084dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008508 <Motor_setup_RF+0x50>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	213c      	movs	r1, #60	@ 0x3c
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7fd f850 	bl	8005588 <HAL_TIM_Encoder_Start>

	IN_RF = _IN_RF;
 80084e8:	4a08      	ldr	r2, [pc, #32]	@ (800850c <Motor_setup_RF+0x54>)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6013      	str	r3, [r2, #0]

	DutyCycle_RF_MAX = (RF_PWM->Init.Period);
 80084ee:	4b05      	ldr	r3, [pc, #20]	@ (8008504 <Motor_setup_RF+0x4c>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	b21a      	sxth	r2, r3
 80084f6:	4b06      	ldr	r3, [pc, #24]	@ (8008510 <Motor_setup_RF+0x58>)
 80084f8:	801a      	strh	r2, [r3, #0]

}
 80084fa:	bf00      	nop
 80084fc:	3710      	adds	r7, #16
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	2000066c 	.word	0x2000066c
 8008508:	20000654 	.word	0x20000654
 800850c:	20000690 	.word	0x20000690
 8008510:	20000680 	.word	0x20000680

08008514 <Motor_setup_RB>:

void Motor_setup_RB(TIM_HandleTypeDef *_TIM_12_CH2   ,TIM_HandleTypeDef *_TIM_4 ,char* _IN_RB){
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	RB_PWM = _TIM_12_CH2;
 8008520:	4a0f      	ldr	r2, [pc, #60]	@ (8008560 <Motor_setup_RB+0x4c>)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6013      	str	r3, [r2, #0]
	EN_RB  = _TIM_4;
 8008526:	4a0f      	ldr	r2, [pc, #60]	@ (8008564 <Motor_setup_RB+0x50>)
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(RB_PWM, TIM_CHANNEL_2);            //PWM
 800852c:	4b0c      	ldr	r3, [pc, #48]	@ (8008560 <Motor_setup_RB+0x4c>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2104      	movs	r1, #4
 8008532:	4618      	mov	r0, r3
 8008534:	f7fc feba 	bl	80052ac <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_RB , TIM_CHANNEL_ALL);      //Encoder
 8008538:	4b0a      	ldr	r3, [pc, #40]	@ (8008564 <Motor_setup_RB+0x50>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	213c      	movs	r1, #60	@ 0x3c
 800853e:	4618      	mov	r0, r3
 8008540:	f7fd f822 	bl	8005588 <HAL_TIM_Encoder_Start>

	IN_RB = _IN_RB;
 8008544:	4a08      	ldr	r2, [pc, #32]	@ (8008568 <Motor_setup_RB+0x54>)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6013      	str	r3, [r2, #0]

	DutyCycle_RB_MAX = (RB_PWM->Init.Period);
 800854a:	4b05      	ldr	r3, [pc, #20]	@ (8008560 <Motor_setup_RB+0x4c>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68db      	ldr	r3, [r3, #12]
 8008550:	b21a      	sxth	r2, r3
 8008552:	4b06      	ldr	r3, [pc, #24]	@ (800856c <Motor_setup_RB+0x58>)
 8008554:	801a      	strh	r2, [r3, #0]

}
 8008556:	bf00      	nop
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	20000670 	.word	0x20000670
 8008564:	20000658 	.word	0x20000658
 8008568:	20000694 	.word	0x20000694
 800856c:	20000682 	.word	0x20000682

08008570 <Motor_setup_EXTRA1>:

void Motor_setup_EXTRA1(TIM_HandleTypeDef *_TIM_9_CH1  ,TIM_HandleTypeDef *_TIM_3  ,char* _IN_EXTRA1){
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	EXTRA1_PWM = _TIM_9_CH1;
 800857c:	4a0f      	ldr	r2, [pc, #60]	@ (80085bc <Motor_setup_EXTRA1+0x4c>)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6013      	str	r3, [r2, #0]
	EN_X  = _TIM_3;
 8008582:	4a0f      	ldr	r2, [pc, #60]	@ (80085c0 <Motor_setup_EXTRA1+0x50>)
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(EXTRA1_PWM, TIM_CHANNEL_1);            //PWM
 8008588:	4b0c      	ldr	r3, [pc, #48]	@ (80085bc <Motor_setup_EXTRA1+0x4c>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2100      	movs	r1, #0
 800858e:	4618      	mov	r0, r3
 8008590:	f7fc fe8c 	bl	80052ac <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_X , TIM_CHANNEL_ALL);      //Encoder
 8008594:	4b0a      	ldr	r3, [pc, #40]	@ (80085c0 <Motor_setup_EXTRA1+0x50>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	213c      	movs	r1, #60	@ 0x3c
 800859a:	4618      	mov	r0, r3
 800859c:	f7fc fff4 	bl	8005588 <HAL_TIM_Encoder_Start>

	IN_EXTRA1 = _IN_EXTRA1;
 80085a0:	4a08      	ldr	r2, [pc, #32]	@ (80085c4 <Motor_setup_EXTRA1+0x54>)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6013      	str	r3, [r2, #0]

	DutyCycle_EXTRA1_MAX = (EXTRA1_PWM->Init.Period);
 80085a6:	4b05      	ldr	r3, [pc, #20]	@ (80085bc <Motor_setup_EXTRA1+0x4c>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	b21a      	sxth	r2, r3
 80085ae:	4b06      	ldr	r3, [pc, #24]	@ (80085c8 <Motor_setup_EXTRA1+0x58>)
 80085b0:	801a      	strh	r2, [r3, #0]

}
 80085b2:	bf00      	nop
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	20000674 	.word	0x20000674
 80085c0:	2000065c 	.word	0x2000065c
 80085c4:	20000698 	.word	0x20000698
 80085c8:	20000684 	.word	0x20000684

080085cc <Motor_setup_EXTRA2>:

void Motor_setup_EXTRA2(TIM_HandleTypeDef *_TIM_10_CH1  ,TIM_HandleTypeDef *_TIM_2 ,char* _IN_EXTRA2){
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	EXTRA2_PWM = _TIM_10_CH1;
 80085d8:	4a0f      	ldr	r2, [pc, #60]	@ (8008618 <Motor_setup_EXTRA2+0x4c>)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6013      	str	r3, [r2, #0]
	EN_Y  = _TIM_2;
 80085de:	4a0f      	ldr	r2, [pc, #60]	@ (800861c <Motor_setup_EXTRA2+0x50>)
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(EXTRA2_PWM, TIM_CHANNEL_1);            //PWM
 80085e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008618 <Motor_setup_EXTRA2+0x4c>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2100      	movs	r1, #0
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fc fe5e 	bl	80052ac <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_Y , TIM_CHANNEL_ALL);      //Encoder
 80085f0:	4b0a      	ldr	r3, [pc, #40]	@ (800861c <Motor_setup_EXTRA2+0x50>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	213c      	movs	r1, #60	@ 0x3c
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fc ffc6 	bl	8005588 <HAL_TIM_Encoder_Start>

	IN_EXTRA2 = _IN_EXTRA2;
 80085fc:	4a08      	ldr	r2, [pc, #32]	@ (8008620 <Motor_setup_EXTRA2+0x54>)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6013      	str	r3, [r2, #0]

	DutyCycle_EXTRA2_MAX = (EXTRA2_PWM->Init.Period);
 8008602:	4b05      	ldr	r3, [pc, #20]	@ (8008618 <Motor_setup_EXTRA2+0x4c>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	b21a      	sxth	r2, r3
 800860a:	4b06      	ldr	r3, [pc, #24]	@ (8008624 <Motor_setup_EXTRA2+0x58>)
 800860c:	801a      	strh	r2, [r3, #0]

}
 800860e:	bf00      	nop
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	20000678 	.word	0x20000678
 800861c:	20000660 	.word	0x20000660
 8008620:	2000069c 	.word	0x2000069c
 8008624:	20000686 	.word	0x20000686

08008628 <getCount>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////PID///////////////////////////////////////////////////////////////

int16_t getCount(TIM_HandleTypeDef *TIM){
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
	int16_t count = ((int16_t)(TIM->Instance->CNT));
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008636:	81fb      	strh	r3, [r7, #14]

	return count;
 8008638:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3714      	adds	r7, #20
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <Setup_CPR>:

float _RPM[6] = {0 ,0 ,0 ,0 ,0 ,0}; //Speed   //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

uint16_t CPR = 68;

void Setup_CPR(uint16_t _CPR){
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	4603      	mov	r3, r0
 8008650:	80fb      	strh	r3, [r7, #6]
	CPR = _CPR;
 8008652:	4a04      	ldr	r2, [pc, #16]	@ (8008664 <Setup_CPR+0x1c>)
 8008654:	88fb      	ldrh	r3, [r7, #6]
 8008656:	8013      	strh	r3, [r2, #0]
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr
 8008664:	20000018 	.word	0x20000018

08008668 <Setup_Gear_Ratio>:

uint16_t Gear_Ratio = 48;

void Setup_Gear_Ratio(uint16_t _Gear_Ratio){
 8008668:	b480      	push	{r7}
 800866a:	b083      	sub	sp, #12
 800866c:	af00      	add	r7, sp, #0
 800866e:	4603      	mov	r3, r0
 8008670:	80fb      	strh	r3, [r7, #6]
	Gear_Ratio = _Gear_Ratio;
 8008672:	4a04      	ldr	r2, [pc, #16]	@ (8008684 <Setup_Gear_Ratio+0x1c>)
 8008674:	88fb      	ldrh	r3, [r7, #6]
 8008676:	8013      	strh	r3, [r2, #0]
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr
 8008684:	2000001a 	.word	0x2000001a

08008688 <Setup_frequency_Motor>:

void Setup_frequency_Motor(uint16_t freq){
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	4603      	mov	r3, r0
 8008690:	80fb      	strh	r3, [r7, #6]
	_freq = freq;
 8008692:	4a04      	ldr	r2, [pc, #16]	@ (80086a4 <Setup_frequency_Motor+0x1c>)
 8008694:	88fb      	ldrh	r3, [r7, #6]
 8008696:	8013      	strh	r3, [r2, #0]
}
 8008698:	bf00      	nop
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr
 80086a4:	20000016 	.word	0x20000016

080086a8 <getRad_s_to_RPM>:
	float Rad_s = RPM * 0.10472f;

	return Rad_s;
}

float getRad_s_to_RPM(float Rad_s){
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	ed87 0a01 	vstr	s0, [r7, #4]
	float RPM__ = Rad_s * 9.549297f;
 80086b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80086b6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80086d8 <getRad_s_to_RPM+0x30>
 80086ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80086be:	edc7 7a03 	vstr	s15, [r7, #12]

	return RPM__;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	ee07 3a90 	vmov	s15, r3
}
 80086c8:	eeb0 0a67 	vmov.f32	s0, s15
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	4118c9ec 	.word	0x4118c9ec

080086dc <getRPM_TIM_Wheel>:

float getRPM_TIM_Wheel(TIM_HandleTypeDef *TIM ,uint8_t _Wheel){
 80086dc:	b590      	push	{r4, r7, lr}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	460b      	mov	r3, r1
 80086e6:	70fb      	strb	r3, [r7, #3]
	Present_Count[_Wheel] = (int16_t)getCount(TIM);
 80086e8:	78fc      	ldrb	r4, [r7, #3]
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f7ff ff9c 	bl	8008628 <getCount>
 80086f0:	4603      	mov	r3, r0
 80086f2:	461a      	mov	r2, r3
 80086f4:	4b29      	ldr	r3, [pc, #164]	@ (800879c <getRPM_TIM_Wheel+0xc0>)
 80086f6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	// V = count/t = count*freq
	_RPM[_Wheel] = (float)((int16_t)(Present_Count[_Wheel] - Past_Count[_Wheel]) * _freq);
 80086fa:	78fb      	ldrb	r3, [r7, #3]
 80086fc:	4a27      	ldr	r2, [pc, #156]	@ (800879c <getRPM_TIM_Wheel+0xc0>)
 80086fe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8008702:	b29a      	uxth	r2, r3
 8008704:	78fb      	ldrb	r3, [r7, #3]
 8008706:	4926      	ldr	r1, [pc, #152]	@ (80087a0 <getRPM_TIM_Wheel+0xc4>)
 8008708:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800870c:	b29b      	uxth	r3, r3
 800870e:	1ad3      	subs	r3, r2, r3
 8008710:	b29b      	uxth	r3, r3
 8008712:	b21b      	sxth	r3, r3
 8008714:	461a      	mov	r2, r3
 8008716:	4b23      	ldr	r3, [pc, #140]	@ (80087a4 <getRPM_TIM_Wheel+0xc8>)
 8008718:	881b      	ldrh	r3, [r3, #0]
 800871a:	fb03 f202 	mul.w	r2, r3, r2
 800871e:	78fb      	ldrb	r3, [r7, #3]
 8008720:	ee07 2a90 	vmov	s15, r2
 8008724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008728:	4a1f      	ldr	r2, [pc, #124]	@ (80087a8 <getRPM_TIM_Wheel+0xcc>)
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	4413      	add	r3, r2
 800872e:	edc3 7a00 	vstr	s15, [r3]
	_RPM[_Wheel] = (float)(((_RPM[_Wheel]* 60.0f)/CPR )/Gear_Ratio);
 8008732:	78fb      	ldrb	r3, [r7, #3]
 8008734:	4a1c      	ldr	r2, [pc, #112]	@ (80087a8 <getRPM_TIM_Wheel+0xcc>)
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4413      	add	r3, r2
 800873a:	edd3 7a00 	vldr	s15, [r3]
 800873e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80087ac <getRPM_TIM_Wheel+0xd0>
 8008742:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008746:	4b1a      	ldr	r3, [pc, #104]	@ (80087b0 <getRPM_TIM_Wheel+0xd4>)
 8008748:	881b      	ldrh	r3, [r3, #0]
 800874a:	ee07 3a90 	vmov	s15, r3
 800874e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008752:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008756:	4b17      	ldr	r3, [pc, #92]	@ (80087b4 <getRPM_TIM_Wheel+0xd8>)
 8008758:	881b      	ldrh	r3, [r3, #0]
 800875a:	ee07 3a90 	vmov	s15, r3
 800875e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008762:	78fb      	ldrb	r3, [r7, #3]
 8008764:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008768:	4a0f      	ldr	r2, [pc, #60]	@ (80087a8 <getRPM_TIM_Wheel+0xcc>)
 800876a:	009b      	lsls	r3, r3, #2
 800876c:	4413      	add	r3, r2
 800876e:	edc3 7a00 	vstr	s15, [r3]

	Past_Count[_Wheel] = Present_Count[_Wheel];
 8008772:	78fa      	ldrb	r2, [r7, #3]
 8008774:	78fb      	ldrb	r3, [r7, #3]
 8008776:	4909      	ldr	r1, [pc, #36]	@ (800879c <getRPM_TIM_Wheel+0xc0>)
 8008778:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800877c:	4a08      	ldr	r2, [pc, #32]	@ (80087a0 <getRPM_TIM_Wheel+0xc4>)
 800877e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return _RPM[_Wheel];
 8008782:	78fb      	ldrb	r3, [r7, #3]
 8008784:	4a08      	ldr	r2, [pc, #32]	@ (80087a8 <getRPM_TIM_Wheel+0xcc>)
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	ee07 3a90 	vmov	s15, r3
}
 8008790:	eeb0 0a67 	vmov.f32	s0, s15
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	bd90      	pop	{r4, r7, pc}
 800879a:	bf00      	nop
 800879c:	200006a0 	.word	0x200006a0
 80087a0:	200006ac 	.word	0x200006ac
 80087a4:	20000016 	.word	0x20000016
 80087a8:	200006b8 	.word	0x200006b8
 80087ac:	42700000 	.word	0x42700000
 80087b0:	20000018 	.word	0x20000018
 80087b4:	2000001a 	.word	0x2000001a

080087b8 <Setup_PID_LF>:

float min_speed[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2
float max_speed[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2


void Setup_PID_LF(float Kp_LF ,float Ki_LF ,float Kd_LF ,float min_speed_LF ,float max_speed_LF){
 80087b8:	b480      	push	{r7}
 80087ba:	b087      	sub	sp, #28
 80087bc:	af00      	add	r7, sp, #0
 80087be:	ed87 0a05 	vstr	s0, [r7, #20]
 80087c2:	edc7 0a04 	vstr	s1, [r7, #16]
 80087c6:	ed87 1a03 	vstr	s2, [r7, #12]
 80087ca:	edc7 1a02 	vstr	s3, [r7, #8]
 80087ce:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[0] = Kp_LF;
 80087d2:	4a0a      	ldr	r2, [pc, #40]	@ (80087fc <Setup_PID_LF+0x44>)
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	6013      	str	r3, [r2, #0]
	Ki_Wheel[0] = Ki_LF;
 80087d8:	4a09      	ldr	r2, [pc, #36]	@ (8008800 <Setup_PID_LF+0x48>)
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	6013      	str	r3, [r2, #0]
	Kd_Wheel[0] = Kd_LF;
 80087de:	4a09      	ldr	r2, [pc, #36]	@ (8008804 <Setup_PID_LF+0x4c>)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6013      	str	r3, [r2, #0]

	min_speed[0] = min_speed_LF;
 80087e4:	4a08      	ldr	r2, [pc, #32]	@ (8008808 <Setup_PID_LF+0x50>)
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	6013      	str	r3, [r2, #0]
	max_speed[0] = max_speed_LF;
 80087ea:	4a08      	ldr	r2, [pc, #32]	@ (800880c <Setup_PID_LF+0x54>)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6013      	str	r3, [r2, #0]
}
 80087f0:	bf00      	nop
 80087f2:	371c      	adds	r7, #28
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr
 80087fc:	200006d0 	.word	0x200006d0
 8008800:	200006e8 	.word	0x200006e8
 8008804:	20000700 	.word	0x20000700
 8008808:	20000718 	.word	0x20000718
 800880c:	20000730 	.word	0x20000730

08008810 <Setup_PID_LB>:

void Setup_PID_LB(float Kp_LB ,float Ki_LB ,float Kd_LB ,float min_speed_LB ,float max_speed_LB){
 8008810:	b480      	push	{r7}
 8008812:	b087      	sub	sp, #28
 8008814:	af00      	add	r7, sp, #0
 8008816:	ed87 0a05 	vstr	s0, [r7, #20]
 800881a:	edc7 0a04 	vstr	s1, [r7, #16]
 800881e:	ed87 1a03 	vstr	s2, [r7, #12]
 8008822:	edc7 1a02 	vstr	s3, [r7, #8]
 8008826:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[1] = Kp_LB;
 800882a:	4a0a      	ldr	r2, [pc, #40]	@ (8008854 <Setup_PID_LB+0x44>)
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	6053      	str	r3, [r2, #4]
	Ki_Wheel[1] = Ki_LB;
 8008830:	4a09      	ldr	r2, [pc, #36]	@ (8008858 <Setup_PID_LB+0x48>)
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	6053      	str	r3, [r2, #4]
	Kd_Wheel[1] = Kd_LB;
 8008836:	4a09      	ldr	r2, [pc, #36]	@ (800885c <Setup_PID_LB+0x4c>)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6053      	str	r3, [r2, #4]

	min_speed[1] = min_speed_LB;
 800883c:	4a08      	ldr	r2, [pc, #32]	@ (8008860 <Setup_PID_LB+0x50>)
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	6053      	str	r3, [r2, #4]
	max_speed[1] = max_speed_LB;
 8008842:	4a08      	ldr	r2, [pc, #32]	@ (8008864 <Setup_PID_LB+0x54>)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6053      	str	r3, [r2, #4]
}
 8008848:	bf00      	nop
 800884a:	371c      	adds	r7, #28
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr
 8008854:	200006d0 	.word	0x200006d0
 8008858:	200006e8 	.word	0x200006e8
 800885c:	20000700 	.word	0x20000700
 8008860:	20000718 	.word	0x20000718
 8008864:	20000730 	.word	0x20000730

08008868 <Setup_PID_RF>:

void Setup_PID_RF(float Kp_RF ,float Ki_RF ,float Kd_RF ,float min_speed_RF ,float max_speed_RF){
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	ed87 0a05 	vstr	s0, [r7, #20]
 8008872:	edc7 0a04 	vstr	s1, [r7, #16]
 8008876:	ed87 1a03 	vstr	s2, [r7, #12]
 800887a:	edc7 1a02 	vstr	s3, [r7, #8]
 800887e:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[2] = Kp_RF;
 8008882:	4a0a      	ldr	r2, [pc, #40]	@ (80088ac <Setup_PID_RF+0x44>)
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	6093      	str	r3, [r2, #8]
	Ki_Wheel[2] = Ki_RF;
 8008888:	4a09      	ldr	r2, [pc, #36]	@ (80088b0 <Setup_PID_RF+0x48>)
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	6093      	str	r3, [r2, #8]
	Kd_Wheel[2] = Kd_RF;
 800888e:	4a09      	ldr	r2, [pc, #36]	@ (80088b4 <Setup_PID_RF+0x4c>)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	6093      	str	r3, [r2, #8]

	min_speed[2] = min_speed_RF;
 8008894:	4a08      	ldr	r2, [pc, #32]	@ (80088b8 <Setup_PID_RF+0x50>)
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	6093      	str	r3, [r2, #8]
	max_speed[2] = max_speed_RF;
 800889a:	4a08      	ldr	r2, [pc, #32]	@ (80088bc <Setup_PID_RF+0x54>)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6093      	str	r3, [r2, #8]
}
 80088a0:	bf00      	nop
 80088a2:	371c      	adds	r7, #28
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr
 80088ac:	200006d0 	.word	0x200006d0
 80088b0:	200006e8 	.word	0x200006e8
 80088b4:	20000700 	.word	0x20000700
 80088b8:	20000718 	.word	0x20000718
 80088bc:	20000730 	.word	0x20000730

080088c0 <Setup_PID_RB>:

void Setup_PID_RB(float Kp_RB ,float Ki_RB ,float Kd_RB ,float min_speed_RB ,float max_speed_RB){
 80088c0:	b480      	push	{r7}
 80088c2:	b087      	sub	sp, #28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	ed87 0a05 	vstr	s0, [r7, #20]
 80088ca:	edc7 0a04 	vstr	s1, [r7, #16]
 80088ce:	ed87 1a03 	vstr	s2, [r7, #12]
 80088d2:	edc7 1a02 	vstr	s3, [r7, #8]
 80088d6:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[3] = Kp_RB;
 80088da:	4a0a      	ldr	r2, [pc, #40]	@ (8008904 <Setup_PID_RB+0x44>)
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	60d3      	str	r3, [r2, #12]
	Ki_Wheel[3] = Ki_RB;
 80088e0:	4a09      	ldr	r2, [pc, #36]	@ (8008908 <Setup_PID_RB+0x48>)
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	60d3      	str	r3, [r2, #12]
	Kd_Wheel[3] = Kd_RB;
 80088e6:	4a09      	ldr	r2, [pc, #36]	@ (800890c <Setup_PID_RB+0x4c>)
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	60d3      	str	r3, [r2, #12]

	min_speed[3] = min_speed_RB;
 80088ec:	4a08      	ldr	r2, [pc, #32]	@ (8008910 <Setup_PID_RB+0x50>)
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	60d3      	str	r3, [r2, #12]
	max_speed[3] = max_speed_RB;
 80088f2:	4a08      	ldr	r2, [pc, #32]	@ (8008914 <Setup_PID_RB+0x54>)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	60d3      	str	r3, [r2, #12]
}
 80088f8:	bf00      	nop
 80088fa:	371c      	adds	r7, #28
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr
 8008904:	200006d0 	.word	0x200006d0
 8008908:	200006e8 	.word	0x200006e8
 800890c:	20000700 	.word	0x20000700
 8008910:	20000718 	.word	0x20000718
 8008914:	20000730 	.word	0x20000730

08008918 <PID_Speed>:

float Past_Error[6]   = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float Output_PID[6]    = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float PID_Speed(float _Setpoint ,int16_t RPM ,uint8_t _Wheel){
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	ed87 0a01 	vstr	s0, [r7, #4]
 8008922:	4603      	mov	r3, r0
 8008924:	460a      	mov	r2, r1
 8008926:	807b      	strh	r3, [r7, #2]
 8008928:	4613      	mov	r3, r2
 800892a:	707b      	strb	r3, [r7, #1]
//	  case 4 : getRPM_TIM_Wheel(EN_X ,EXTRA1 ); break;
//	  case 5 : getRPM_TIM_Wheel(EN_Y ,EXTRA2 ); break;
//	}

//	Error_Speed[_Wheel] = _Setpoint-_RPM[_Wheel];
	Error_Speed[_Wheel] = _Setpoint-RPM;
 800892c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008930:	ee07 3a90 	vmov	s15, r3
 8008934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008938:	787b      	ldrb	r3, [r7, #1]
 800893a:	ed97 7a01 	vldr	s14, [r7, #4]
 800893e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008942:	4a41      	ldr	r2, [pc, #260]	@ (8008a48 <PID_Speed+0x130>)
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4413      	add	r3, r2
 8008948:	edc3 7a00 	vstr	s15, [r3]

	Proportional[_Wheel] = Error_Speed[_Wheel];
 800894c:	787a      	ldrb	r2, [r7, #1]
 800894e:	787b      	ldrb	r3, [r7, #1]
 8008950:	493d      	ldr	r1, [pc, #244]	@ (8008a48 <PID_Speed+0x130>)
 8008952:	0092      	lsls	r2, r2, #2
 8008954:	440a      	add	r2, r1
 8008956:	6812      	ldr	r2, [r2, #0]
 8008958:	493c      	ldr	r1, [pc, #240]	@ (8008a4c <PID_Speed+0x134>)
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	440b      	add	r3, r1
 800895e:	601a      	str	r2, [r3, #0]
	Integnator[_Wheel]   += Error_Speed[_Wheel];
 8008960:	787b      	ldrb	r3, [r7, #1]
 8008962:	4a3b      	ldr	r2, [pc, #236]	@ (8008a50 <PID_Speed+0x138>)
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	4413      	add	r3, r2
 8008968:	ed93 7a00 	vldr	s14, [r3]
 800896c:	787b      	ldrb	r3, [r7, #1]
 800896e:	4a36      	ldr	r2, [pc, #216]	@ (8008a48 <PID_Speed+0x130>)
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	edd3 7a00 	vldr	s15, [r3]
 8008978:	787b      	ldrb	r3, [r7, #1]
 800897a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800897e:	4a34      	ldr	r2, [pc, #208]	@ (8008a50 <PID_Speed+0x138>)
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	4413      	add	r3, r2
 8008984:	edc3 7a00 	vstr	s15, [r3]
	Derivative[_Wheel]   = Error_Speed[_Wheel] - Past_Error[_Wheel];
 8008988:	787b      	ldrb	r3, [r7, #1]
 800898a:	4a2f      	ldr	r2, [pc, #188]	@ (8008a48 <PID_Speed+0x130>)
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	ed93 7a00 	vldr	s14, [r3]
 8008994:	787b      	ldrb	r3, [r7, #1]
 8008996:	4a2f      	ldr	r2, [pc, #188]	@ (8008a54 <PID_Speed+0x13c>)
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4413      	add	r3, r2
 800899c:	edd3 7a00 	vldr	s15, [r3]
 80089a0:	787b      	ldrb	r3, [r7, #1]
 80089a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089a6:	4a2c      	ldr	r2, [pc, #176]	@ (8008a58 <PID_Speed+0x140>)
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	edc3 7a00 	vstr	s15, [r3]

	Past_Error[_Wheel] = Error_Speed[_Wheel];
 80089b0:	787a      	ldrb	r2, [r7, #1]
 80089b2:	787b      	ldrb	r3, [r7, #1]
 80089b4:	4924      	ldr	r1, [pc, #144]	@ (8008a48 <PID_Speed+0x130>)
 80089b6:	0092      	lsls	r2, r2, #2
 80089b8:	440a      	add	r2, r1
 80089ba:	6812      	ldr	r2, [r2, #0]
 80089bc:	4925      	ldr	r1, [pc, #148]	@ (8008a54 <PID_Speed+0x13c>)
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	440b      	add	r3, r1
 80089c2:	601a      	str	r2, [r3, #0]

	Output_PID[_Wheel]  = (float)((Proportional[_Wheel]*Kp_Wheel[_Wheel]) + (Integnator[_Wheel]*Ki_Wheel[_Wheel]) + (Derivative[_Wheel]*Kd_Wheel[_Wheel]));
 80089c4:	787b      	ldrb	r3, [r7, #1]
 80089c6:	4a21      	ldr	r2, [pc, #132]	@ (8008a4c <PID_Speed+0x134>)
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4413      	add	r3, r2
 80089cc:	ed93 7a00 	vldr	s14, [r3]
 80089d0:	787b      	ldrb	r3, [r7, #1]
 80089d2:	4a22      	ldr	r2, [pc, #136]	@ (8008a5c <PID_Speed+0x144>)
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	4413      	add	r3, r2
 80089d8:	edd3 7a00 	vldr	s15, [r3]
 80089dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80089e0:	787b      	ldrb	r3, [r7, #1]
 80089e2:	4a1b      	ldr	r2, [pc, #108]	@ (8008a50 <PID_Speed+0x138>)
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4413      	add	r3, r2
 80089e8:	edd3 6a00 	vldr	s13, [r3]
 80089ec:	787b      	ldrb	r3, [r7, #1]
 80089ee:	4a1c      	ldr	r2, [pc, #112]	@ (8008a60 <PID_Speed+0x148>)
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4413      	add	r3, r2
 80089f4:	edd3 7a00 	vldr	s15, [r3]
 80089f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80089fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a00:	787b      	ldrb	r3, [r7, #1]
 8008a02:	4a15      	ldr	r2, [pc, #84]	@ (8008a58 <PID_Speed+0x140>)
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	4413      	add	r3, r2
 8008a08:	edd3 6a00 	vldr	s13, [r3]
 8008a0c:	787b      	ldrb	r3, [r7, #1]
 8008a0e:	4a15      	ldr	r2, [pc, #84]	@ (8008a64 <PID_Speed+0x14c>)
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	edd3 7a00 	vldr	s15, [r3]
 8008a18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a1c:	787b      	ldrb	r3, [r7, #1]
 8008a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a22:	4a11      	ldr	r2, [pc, #68]	@ (8008a68 <PID_Speed+0x150>)
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	edc3 7a00 	vstr	s15, [r3]


	return Output_PID[_Wheel];
 8008a2c:	787b      	ldrb	r3, [r7, #1]
 8008a2e:	4a0e      	ldr	r2, [pc, #56]	@ (8008a68 <PID_Speed+0x150>)
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	ee07 3a90 	vmov	s15, r3
}
 8008a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr
 8008a48:	20000748 	.word	0x20000748
 8008a4c:	20000760 	.word	0x20000760
 8008a50:	20000778 	.word	0x20000778
 8008a54:	200007a8 	.word	0x200007a8
 8008a58:	20000790 	.word	0x20000790
 8008a5c:	200006d0 	.word	0x200006d0
 8008a60:	200006e8 	.word	0x200006e8
 8008a64:	20000700 	.word	0x20000700
 8008a68:	200007c0 	.word	0x200007c0

08008a6c <Motor_DutyCycle_LF>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////Motor////////////////////////////////////////////////////////////////////
void Motor_DutyCycle_LF(int16_t DutyCycle_LF){
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	4603      	mov	r3, r0
 8008a74:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_LF > DutyCycle_LF_MAX) {
 8008a76:	4b26      	ldr	r3, [pc, #152]	@ (8008b10 <Motor_DutyCycle_LF+0xa4>)
 8008a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a7c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	dd03      	ble.n	8008a8c <Motor_DutyCycle_LF+0x20>
	    DutyCycle_LF = DutyCycle_LF_MAX;
 8008a84:	4b22      	ldr	r3, [pc, #136]	@ (8008b10 <Motor_DutyCycle_LF+0xa4>)
 8008a86:	881b      	ldrh	r3, [r3, #0]
 8008a88:	80fb      	strh	r3, [r7, #6]
 8008a8a:	e00e      	b.n	8008aaa <Motor_DutyCycle_LF+0x3e>
	} else if (DutyCycle_LF < -DutyCycle_LF_MAX) {
 8008a8c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008a90:	4b1f      	ldr	r3, [pc, #124]	@ (8008b10 <Motor_DutyCycle_LF+0xa4>)
 8008a92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a96:	425b      	negs	r3, r3
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	da06      	bge.n	8008aaa <Motor_DutyCycle_LF+0x3e>
		DutyCycle_LF = -DutyCycle_LF_MAX;
 8008a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8008b10 <Motor_DutyCycle_LF+0xa4>)
 8008a9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	425b      	negs	r3, r3
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	80fb      	strh	r3, [r7, #6]
	}

	LF_PWM->Instance->CCR1 = (DutyCycle_LF > 0) ? (int16_t)DutyCycle_LF : (DutyCycle_LF_MAX + (int16_t)DutyCycle_LF);
 8008aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	dd02      	ble.n	8008ab8 <Motor_DutyCycle_LF+0x4c>
 8008ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ab6:	e006      	b.n	8008ac6 <Motor_DutyCycle_LF+0x5a>
 8008ab8:	4b15      	ldr	r3, [pc, #84]	@ (8008b10 <Motor_DutyCycle_LF+0xa4>)
 8008aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	4a13      	ldr	r2, [pc, #76]	@ (8008b14 <Motor_DutyCycle_LF+0xa8>)
 8008ac8:	6812      	ldr	r2, [r2, #0]
 8008aca:	6812      	ldr	r2, [r2, #0]
 8008acc:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_LF , (DutyCycle_LF < 0) ? 1 : 0);
 8008ace:	4b12      	ldr	r3, [pc, #72]	@ (8008b18 <Motor_DutyCycle_LF+0xac>)
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ad6:	13db      	asrs	r3, r3, #15
 8008ad8:	b21b      	sxth	r3, r3
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	f003 0301 	and.w	r3, r3, #1
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	f000 fba1 	bl	800922c <digitalWrite>

	if(DutyCycle_LF == 0){
 8008aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10a      	bne.n	8008b08 <Motor_DutyCycle_LF+0x9c>
	   LF_PWM->Instance->CCR1 = 0;
 8008af2:	4b08      	ldr	r3, [pc, #32]	@ (8008b14 <Motor_DutyCycle_LF+0xa8>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2200      	movs	r2, #0
 8008afa:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_LF ,0);
 8008afc:	4b06      	ldr	r3, [pc, #24]	@ (8008b18 <Motor_DutyCycle_LF+0xac>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2100      	movs	r1, #0
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 fb92 	bl	800922c <digitalWrite>
	}
}
 8008b08:	bf00      	nop
 8008b0a:	3708      	adds	r7, #8
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	2000067c 	.word	0x2000067c
 8008b14:	20000664 	.word	0x20000664
 8008b18:	20000688 	.word	0x20000688

08008b1c <Motor_DutyCycle_LB>:

void Motor_DutyCycle_LB(int16_t DutyCycle_LB){
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	4603      	mov	r3, r0
 8008b24:	80fb      	strh	r3, [r7, #6]
	DutyCycle_LB = -DutyCycle_LB;
 8008b26:	88fb      	ldrh	r3, [r7, #6]
 8008b28:	425b      	negs	r3, r3
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_LB > DutyCycle_LB_MAX) {
 8008b2e:	4b26      	ldr	r3, [pc, #152]	@ (8008bc8 <Motor_DutyCycle_LB+0xac>)
 8008b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b34:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	dd03      	ble.n	8008b44 <Motor_DutyCycle_LB+0x28>
		DutyCycle_LB = DutyCycle_LB_MAX;
 8008b3c:	4b22      	ldr	r3, [pc, #136]	@ (8008bc8 <Motor_DutyCycle_LB+0xac>)
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	80fb      	strh	r3, [r7, #6]
 8008b42:	e00e      	b.n	8008b62 <Motor_DutyCycle_LB+0x46>
	} else if (DutyCycle_LB < -DutyCycle_LB_MAX) {
 8008b44:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008b48:	4b1f      	ldr	r3, [pc, #124]	@ (8008bc8 <Motor_DutyCycle_LB+0xac>)
 8008b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b4e:	425b      	negs	r3, r3
 8008b50:	429a      	cmp	r2, r3
 8008b52:	da06      	bge.n	8008b62 <Motor_DutyCycle_LB+0x46>
		DutyCycle_LB = -DutyCycle_LB_MAX;
 8008b54:	4b1c      	ldr	r3, [pc, #112]	@ (8008bc8 <Motor_DutyCycle_LB+0xac>)
 8008b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	425b      	negs	r3, r3
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	80fb      	strh	r3, [r7, #6]
	}

	LB_PWM->Instance->CCR1 = (DutyCycle_LB > 0) ? (int16_t)DutyCycle_LB : (DutyCycle_LB_MAX + (int16_t)DutyCycle_LB);
 8008b62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	dd02      	ble.n	8008b70 <Motor_DutyCycle_LB+0x54>
 8008b6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b6e:	e006      	b.n	8008b7e <Motor_DutyCycle_LB+0x62>
 8008b70:	4b15      	ldr	r3, [pc, #84]	@ (8008bc8 <Motor_DutyCycle_LB+0xac>)
 8008b72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b76:	461a      	mov	r2, r3
 8008b78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	4a13      	ldr	r2, [pc, #76]	@ (8008bcc <Motor_DutyCycle_LB+0xb0>)
 8008b80:	6812      	ldr	r2, [r2, #0]
 8008b82:	6812      	ldr	r2, [r2, #0]
 8008b84:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_LB , (DutyCycle_LB < 0) ? 1 : 0);
 8008b86:	4b12      	ldr	r3, [pc, #72]	@ (8008bd0 <Motor_DutyCycle_LB+0xb4>)
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b8e:	13db      	asrs	r3, r3, #15
 8008b90:	b21b      	sxth	r3, r3
 8008b92:	b2db      	uxtb	r3, r3
 8008b94:	f003 0301 	and.w	r3, r3, #1
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	4610      	mov	r0, r2
 8008b9e:	f000 fb45 	bl	800922c <digitalWrite>

	if(DutyCycle_LB == 0){
 8008ba2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10a      	bne.n	8008bc0 <Motor_DutyCycle_LB+0xa4>
	   LB_PWM->Instance->CCR1 = 0;
 8008baa:	4b08      	ldr	r3, [pc, #32]	@ (8008bcc <Motor_DutyCycle_LB+0xb0>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_LB ,0);
 8008bb4:	4b06      	ldr	r3, [pc, #24]	@ (8008bd0 <Motor_DutyCycle_LB+0xb4>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2100      	movs	r1, #0
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f000 fb36 	bl	800922c <digitalWrite>
	}
}
 8008bc0:	bf00      	nop
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	2000067e 	.word	0x2000067e
 8008bcc:	20000668 	.word	0x20000668
 8008bd0:	2000068c 	.word	0x2000068c

08008bd4 <Motor_DutyCycle_RF>:

void Motor_DutyCycle_RF(int16_t DutyCycle_RF){
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	4603      	mov	r3, r0
 8008bdc:	80fb      	strh	r3, [r7, #6]
	DutyCycle_RF = -DutyCycle_RF;
 8008bde:	88fb      	ldrh	r3, [r7, #6]
 8008be0:	425b      	negs	r3, r3
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_RF > DutyCycle_RF_MAX) {
 8008be6:	4b26      	ldr	r3, [pc, #152]	@ (8008c80 <Motor_DutyCycle_RF+0xac>)
 8008be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	dd03      	ble.n	8008bfc <Motor_DutyCycle_RF+0x28>
		DutyCycle_RF = DutyCycle_RF_MAX;
 8008bf4:	4b22      	ldr	r3, [pc, #136]	@ (8008c80 <Motor_DutyCycle_RF+0xac>)
 8008bf6:	881b      	ldrh	r3, [r3, #0]
 8008bf8:	80fb      	strh	r3, [r7, #6]
 8008bfa:	e00e      	b.n	8008c1a <Motor_DutyCycle_RF+0x46>
	} else if (DutyCycle_RF < -DutyCycle_RF_MAX) {
 8008bfc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008c00:	4b1f      	ldr	r3, [pc, #124]	@ (8008c80 <Motor_DutyCycle_RF+0xac>)
 8008c02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c06:	425b      	negs	r3, r3
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	da06      	bge.n	8008c1a <Motor_DutyCycle_RF+0x46>
		DutyCycle_RF = -DutyCycle_RF_MAX;
 8008c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8008c80 <Motor_DutyCycle_RF+0xac>)
 8008c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	425b      	negs	r3, r3
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	80fb      	strh	r3, [r7, #6]
	}

	RF_PWM->Instance->CCR1 = (DutyCycle_RF > 0) ? (int16_t)DutyCycle_RF : (DutyCycle_RF_MAX + (int16_t)DutyCycle_RF);
 8008c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	dd02      	ble.n	8008c28 <Motor_DutyCycle_RF+0x54>
 8008c22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c26:	e006      	b.n	8008c36 <Motor_DutyCycle_RF+0x62>
 8008c28:	4b15      	ldr	r3, [pc, #84]	@ (8008c80 <Motor_DutyCycle_RF+0xac>)
 8008c2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c34:	4413      	add	r3, r2
 8008c36:	4a13      	ldr	r2, [pc, #76]	@ (8008c84 <Motor_DutyCycle_RF+0xb0>)
 8008c38:	6812      	ldr	r2, [r2, #0]
 8008c3a:	6812      	ldr	r2, [r2, #0]
 8008c3c:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_RF , (DutyCycle_RF < 0) ? 1 : 0);
 8008c3e:	4b12      	ldr	r3, [pc, #72]	@ (8008c88 <Motor_DutyCycle_RF+0xb4>)
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c46:	13db      	asrs	r3, r3, #15
 8008c48:	b21b      	sxth	r3, r3
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	f003 0301 	and.w	r3, r3, #1
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	4619      	mov	r1, r3
 8008c54:	4610      	mov	r0, r2
 8008c56:	f000 fae9 	bl	800922c <digitalWrite>

	if(DutyCycle_RF == 0){
 8008c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10a      	bne.n	8008c78 <Motor_DutyCycle_RF+0xa4>
	   RF_PWM->Instance->CCR1 = 0;
 8008c62:	4b08      	ldr	r3, [pc, #32]	@ (8008c84 <Motor_DutyCycle_RF+0xb0>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_RF ,0);
 8008c6c:	4b06      	ldr	r3, [pc, #24]	@ (8008c88 <Motor_DutyCycle_RF+0xb4>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2100      	movs	r1, #0
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 fada 	bl	800922c <digitalWrite>
	}
}
 8008c78:	bf00      	nop
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	20000680 	.word	0x20000680
 8008c84:	2000066c 	.word	0x2000066c
 8008c88:	20000690 	.word	0x20000690

08008c8c <Motor_DutyCycle_RB>:

void Motor_DutyCycle_RB(int16_t DutyCycle_RB){
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	4603      	mov	r3, r0
 8008c94:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_RB > DutyCycle_RB_MAX) {
 8008c96:	4b26      	ldr	r3, [pc, #152]	@ (8008d30 <Motor_DutyCycle_RB+0xa4>)
 8008c98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c9c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	dd03      	ble.n	8008cac <Motor_DutyCycle_RB+0x20>
		DutyCycle_RB = DutyCycle_RB_MAX;
 8008ca4:	4b22      	ldr	r3, [pc, #136]	@ (8008d30 <Motor_DutyCycle_RB+0xa4>)
 8008ca6:	881b      	ldrh	r3, [r3, #0]
 8008ca8:	80fb      	strh	r3, [r7, #6]
 8008caa:	e00e      	b.n	8008cca <Motor_DutyCycle_RB+0x3e>
	} else if (DutyCycle_RB < -DutyCycle_RB_MAX) {
 8008cac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8008d30 <Motor_DutyCycle_RB+0xa4>)
 8008cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cb6:	425b      	negs	r3, r3
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	da06      	bge.n	8008cca <Motor_DutyCycle_RB+0x3e>
	    DutyCycle_RB = -DutyCycle_RB_MAX;
 8008cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8008d30 <Motor_DutyCycle_RB+0xa4>)
 8008cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	425b      	negs	r3, r3
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	80fb      	strh	r3, [r7, #6]
	}

	RB_PWM->Instance->CCR2 = (DutyCycle_RB > 0) ? (int16_t)DutyCycle_RB : (DutyCycle_RB_MAX + (int16_t)DutyCycle_RB);
 8008cca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	dd02      	ble.n	8008cd8 <Motor_DutyCycle_RB+0x4c>
 8008cd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cd6:	e006      	b.n	8008ce6 <Motor_DutyCycle_RB+0x5a>
 8008cd8:	4b15      	ldr	r3, [pc, #84]	@ (8008d30 <Motor_DutyCycle_RB+0xa4>)
 8008cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cde:	461a      	mov	r2, r3
 8008ce0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	4a13      	ldr	r2, [pc, #76]	@ (8008d34 <Motor_DutyCycle_RB+0xa8>)
 8008ce8:	6812      	ldr	r2, [r2, #0]
 8008cea:	6812      	ldr	r2, [r2, #0]
 8008cec:	6393      	str	r3, [r2, #56]	@ 0x38

	digitalWrite(IN_RB , (DutyCycle_RB < 0) ? 1 : 0);
 8008cee:	4b12      	ldr	r3, [pc, #72]	@ (8008d38 <Motor_DutyCycle_RB+0xac>)
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cf6:	13db      	asrs	r3, r3, #15
 8008cf8:	b21b      	sxth	r3, r3
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	f003 0301 	and.w	r3, r3, #1
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	4619      	mov	r1, r3
 8008d04:	4610      	mov	r0, r2
 8008d06:	f000 fa91 	bl	800922c <digitalWrite>

	if(DutyCycle_RB == 0){
 8008d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10a      	bne.n	8008d28 <Motor_DutyCycle_RB+0x9c>
	    RB_PWM->Instance->CCR2 = 0;
 8008d12:	4b08      	ldr	r3, [pc, #32]	@ (8008d34 <Motor_DutyCycle_RB+0xa8>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	639a      	str	r2, [r3, #56]	@ 0x38
		digitalWrite(IN_RB ,0);
 8008d1c:	4b06      	ldr	r3, [pc, #24]	@ (8008d38 <Motor_DutyCycle_RB+0xac>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2100      	movs	r1, #0
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 fa82 	bl	800922c <digitalWrite>
	}
}
 8008d28:	bf00      	nop
 8008d2a:	3708      	adds	r7, #8
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	20000682 	.word	0x20000682
 8008d34:	20000670 	.word	0x20000670
 8008d38:	20000694 	.word	0x20000694

08008d3c <Motor_DutyCycle_EXTRA1>:

void Motor_DutyCycle_EXTRA1(int16_t DutyCycle_EXTRA1){
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	4603      	mov	r3, r0
 8008d44:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_EXTRA1 > DutyCycle_EXTRA1_MAX) {
 8008d46:	4b26      	ldr	r3, [pc, #152]	@ (8008de0 <Motor_DutyCycle_EXTRA1+0xa4>)
 8008d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	dd03      	ble.n	8008d5c <Motor_DutyCycle_EXTRA1+0x20>
		DutyCycle_EXTRA1 = DutyCycle_EXTRA1_MAX;
 8008d54:	4b22      	ldr	r3, [pc, #136]	@ (8008de0 <Motor_DutyCycle_EXTRA1+0xa4>)
 8008d56:	881b      	ldrh	r3, [r3, #0]
 8008d58:	80fb      	strh	r3, [r7, #6]
 8008d5a:	e00e      	b.n	8008d7a <Motor_DutyCycle_EXTRA1+0x3e>
	} else if (DutyCycle_EXTRA1 < -DutyCycle_EXTRA1_MAX) {
 8008d5c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008d60:	4b1f      	ldr	r3, [pc, #124]	@ (8008de0 <Motor_DutyCycle_EXTRA1+0xa4>)
 8008d62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d66:	425b      	negs	r3, r3
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	da06      	bge.n	8008d7a <Motor_DutyCycle_EXTRA1+0x3e>
		DutyCycle_EXTRA1 = -DutyCycle_EXTRA1_MAX;
 8008d6c:	4b1c      	ldr	r3, [pc, #112]	@ (8008de0 <Motor_DutyCycle_EXTRA1+0xa4>)
 8008d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	425b      	negs	r3, r3
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	80fb      	strh	r3, [r7, #6]
	}

	EXTRA1_PWM->Instance->CCR1 = (DutyCycle_EXTRA1 > 0) ? (int16_t)DutyCycle_EXTRA1 : (DutyCycle_EXTRA1_MAX + (int16_t)DutyCycle_EXTRA1);
 8008d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	dd02      	ble.n	8008d88 <Motor_DutyCycle_EXTRA1+0x4c>
 8008d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d86:	e006      	b.n	8008d96 <Motor_DutyCycle_EXTRA1+0x5a>
 8008d88:	4b15      	ldr	r3, [pc, #84]	@ (8008de0 <Motor_DutyCycle_EXTRA1+0xa4>)
 8008d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d94:	4413      	add	r3, r2
 8008d96:	4a13      	ldr	r2, [pc, #76]	@ (8008de4 <Motor_DutyCycle_EXTRA1+0xa8>)
 8008d98:	6812      	ldr	r2, [r2, #0]
 8008d9a:	6812      	ldr	r2, [r2, #0]
 8008d9c:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_EXTRA1 , (DutyCycle_EXTRA1 < 0) ? 1 : 0);
 8008d9e:	4b12      	ldr	r3, [pc, #72]	@ (8008de8 <Motor_DutyCycle_EXTRA1+0xac>)
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008da6:	13db      	asrs	r3, r3, #15
 8008da8:	b21b      	sxth	r3, r3
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	f003 0301 	and.w	r3, r3, #1
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	4619      	mov	r1, r3
 8008db4:	4610      	mov	r0, r2
 8008db6:	f000 fa39 	bl	800922c <digitalWrite>

	if(DutyCycle_EXTRA1 == 0){
 8008dba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d10a      	bne.n	8008dd8 <Motor_DutyCycle_EXTRA1+0x9c>
		EXTRA1_PWM->Instance->CCR1 = 0;
 8008dc2:	4b08      	ldr	r3, [pc, #32]	@ (8008de4 <Motor_DutyCycle_EXTRA1+0xa8>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	635a      	str	r2, [r3, #52]	@ 0x34
	    digitalWrite(IN_EXTRA1 ,0);
 8008dcc:	4b06      	ldr	r3, [pc, #24]	@ (8008de8 <Motor_DutyCycle_EXTRA1+0xac>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f000 fa2a 	bl	800922c <digitalWrite>
	}
}
 8008dd8:	bf00      	nop
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	20000684 	.word	0x20000684
 8008de4:	20000674 	.word	0x20000674
 8008de8:	20000698 	.word	0x20000698

08008dec <Motor_DutyCycle_EXTRA2>:

void Motor_DutyCycle_EXTRA2(int16_t DutyCycle_EXTRA2){
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	4603      	mov	r3, r0
 8008df4:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_EXTRA2 > DutyCycle_EXTRA2_MAX) {
 8008df6:	4b26      	ldr	r3, [pc, #152]	@ (8008e90 <Motor_DutyCycle_EXTRA2+0xa4>)
 8008df8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008dfc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	dd03      	ble.n	8008e0c <Motor_DutyCycle_EXTRA2+0x20>
		DutyCycle_EXTRA2 = DutyCycle_EXTRA2_MAX;
 8008e04:	4b22      	ldr	r3, [pc, #136]	@ (8008e90 <Motor_DutyCycle_EXTRA2+0xa4>)
 8008e06:	881b      	ldrh	r3, [r3, #0]
 8008e08:	80fb      	strh	r3, [r7, #6]
 8008e0a:	e00e      	b.n	8008e2a <Motor_DutyCycle_EXTRA2+0x3e>
	} else if (DutyCycle_EXTRA2 < -DutyCycle_EXTRA2_MAX) {
 8008e0c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008e10:	4b1f      	ldr	r3, [pc, #124]	@ (8008e90 <Motor_DutyCycle_EXTRA2+0xa4>)
 8008e12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e16:	425b      	negs	r3, r3
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	da06      	bge.n	8008e2a <Motor_DutyCycle_EXTRA2+0x3e>
		DutyCycle_EXTRA2 = -DutyCycle_EXTRA2_MAX;
 8008e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8008e90 <Motor_DutyCycle_EXTRA2+0xa4>)
 8008e1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	425b      	negs	r3, r3
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	80fb      	strh	r3, [r7, #6]
	}

	EXTRA2_PWM->Instance->CCR1 = (DutyCycle_EXTRA2 > 0) ? (int16_t)DutyCycle_EXTRA2 : (DutyCycle_EXTRA2_MAX + (int16_t)DutyCycle_EXTRA2);
 8008e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	dd02      	ble.n	8008e38 <Motor_DutyCycle_EXTRA2+0x4c>
 8008e32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e36:	e006      	b.n	8008e46 <Motor_DutyCycle_EXTRA2+0x5a>
 8008e38:	4b15      	ldr	r3, [pc, #84]	@ (8008e90 <Motor_DutyCycle_EXTRA2+0xa4>)
 8008e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e44:	4413      	add	r3, r2
 8008e46:	4a13      	ldr	r2, [pc, #76]	@ (8008e94 <Motor_DutyCycle_EXTRA2+0xa8>)
 8008e48:	6812      	ldr	r2, [r2, #0]
 8008e4a:	6812      	ldr	r2, [r2, #0]
 8008e4c:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_EXTRA2 , (DutyCycle_EXTRA2 < 0) ? 1 : 0);
 8008e4e:	4b12      	ldr	r3, [pc, #72]	@ (8008e98 <Motor_DutyCycle_EXTRA2+0xac>)
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e56:	13db      	asrs	r3, r3, #15
 8008e58:	b21b      	sxth	r3, r3
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	f003 0301 	and.w	r3, r3, #1
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	4619      	mov	r1, r3
 8008e64:	4610      	mov	r0, r2
 8008e66:	f000 f9e1 	bl	800922c <digitalWrite>

	if(DutyCycle_EXTRA2 == 0){
 8008e6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10a      	bne.n	8008e88 <Motor_DutyCycle_EXTRA2+0x9c>
	     EXTRA2_PWM->Instance->CCR1 = 0;
 8008e72:	4b08      	ldr	r3, [pc, #32]	@ (8008e94 <Motor_DutyCycle_EXTRA2+0xa8>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	635a      	str	r2, [r3, #52]	@ 0x34
		 digitalWrite(IN_EXTRA2 ,0);
 8008e7c:	4b06      	ldr	r3, [pc, #24]	@ (8008e98 <Motor_DutyCycle_EXTRA2+0xac>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2100      	movs	r1, #0
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 f9d2 	bl	800922c <digitalWrite>
	}
}
 8008e88:	bf00      	nop
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	20000686 	.word	0x20000686
 8008e94:	20000678 	.word	0x20000678
 8008e98:	2000069c 	.word	0x2000069c

08008e9c <Motor_Speed_LF>:

int16_t Duty_Cycle[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float Motor_Speed_LF(int16_t RPM_INPUT ,float RPM_LF){
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	ed87 0a00 	vstr	s0, [r7]
 8008ea8:	80fb      	strh	r3, [r7, #6]
	if (RPM_LF > max_speed[0]) {
 8008eaa:	4b30      	ldr	r3, [pc, #192]	@ (8008f6c <Motor_Speed_LF+0xd0>)
 8008eac:	edd3 7a00 	vldr	s15, [r3]
 8008eb0:	ed97 7a00 	vldr	s14, [r7]
 8008eb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ebc:	dd03      	ble.n	8008ec6 <Motor_Speed_LF+0x2a>
	   RPM_LF = max_speed[0];
 8008ebe:	4b2b      	ldr	r3, [pc, #172]	@ (8008f6c <Motor_Speed_LF+0xd0>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	603b      	str	r3, [r7, #0]
 8008ec4:	e012      	b.n	8008eec <Motor_Speed_LF+0x50>
	} else if (RPM_LF < -max_speed[0]) {
 8008ec6:	4b29      	ldr	r3, [pc, #164]	@ (8008f6c <Motor_Speed_LF+0xd0>)
 8008ec8:	edd3 7a00 	vldr	s15, [r3]
 8008ecc:	eef1 7a67 	vneg.f32	s15, s15
 8008ed0:	ed97 7a00 	vldr	s14, [r7]
 8008ed4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008edc:	d506      	bpl.n	8008eec <Motor_Speed_LF+0x50>
	   RPM_LF = -max_speed[0];
 8008ede:	4b23      	ldr	r3, [pc, #140]	@ (8008f6c <Motor_Speed_LF+0xd0>)
 8008ee0:	edd3 7a00 	vldr	s15, [r3]
 8008ee4:	eef1 7a67 	vneg.f32	s15, s15
 8008ee8:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_LF , 0);
 8008eec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ef0:	ee07 3a90 	vmov	s15, r3
 8008ef4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008ef8:	edd7 7a00 	vldr	s15, [r7]
 8008efc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f00:	ee17 3a90 	vmov	r3, s15
 8008f04:	b21b      	sxth	r3, r3
 8008f06:	2100      	movs	r1, #0
 8008f08:	4618      	mov	r0, r3
 8008f0a:	eeb0 0a47 	vmov.f32	s0, s14
 8008f0e:	f7ff fd03 	bl	8008918 <PID_Speed>

	Duty_Cycle[0] = (int16_t)((Output_PID[0] / ((float)(max_speed[0] - min_speed[0]))) * DutyCycle_LF_MAX);
 8008f12:	4b17      	ldr	r3, [pc, #92]	@ (8008f70 <Motor_Speed_LF+0xd4>)
 8008f14:	edd3 6a00 	vldr	s13, [r3]
 8008f18:	4b14      	ldr	r3, [pc, #80]	@ (8008f6c <Motor_Speed_LF+0xd0>)
 8008f1a:	ed93 7a00 	vldr	s14, [r3]
 8008f1e:	4b15      	ldr	r3, [pc, #84]	@ (8008f74 <Motor_Speed_LF+0xd8>)
 8008f20:	edd3 7a00 	vldr	s15, [r3]
 8008f24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f2c:	4b12      	ldr	r3, [pc, #72]	@ (8008f78 <Motor_Speed_LF+0xdc>)
 8008f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f32:	ee07 3a90 	vmov	s15, r3
 8008f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f42:	ee17 3a90 	vmov	r3, s15
 8008f46:	b21a      	sxth	r2, r3
 8008f48:	4b0c      	ldr	r3, [pc, #48]	@ (8008f7c <Motor_Speed_LF+0xe0>)
 8008f4a:	801a      	strh	r2, [r3, #0]

	Motor_DutyCycle_LF(Duty_Cycle[0]);
 8008f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8008f7c <Motor_Speed_LF+0xe0>)
 8008f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7ff fd8a 	bl	8008a6c <Motor_DutyCycle_LF>

//	return _RPM[0];
	return Output_PID[0];
 8008f58:	4b05      	ldr	r3, [pc, #20]	@ (8008f70 <Motor_Speed_LF+0xd4>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	ee07 3a90 	vmov	s15, r3
}
 8008f60:	eeb0 0a67 	vmov.f32	s0, s15
 8008f64:	3708      	adds	r7, #8
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	20000730 	.word	0x20000730
 8008f70:	200007c0 	.word	0x200007c0
 8008f74:	20000718 	.word	0x20000718
 8008f78:	2000067c 	.word	0x2000067c
 8008f7c:	200007d8 	.word	0x200007d8

08008f80 <Motor_Speed_LB>:

float Motor_Speed_LB(int16_t RPM_INPUT ,float RPM_LB){
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	4603      	mov	r3, r0
 8008f88:	ed87 0a00 	vstr	s0, [r7]
 8008f8c:	80fb      	strh	r3, [r7, #6]
	if (RPM_LB > max_speed[1]) {
 8008f8e:	4b30      	ldr	r3, [pc, #192]	@ (8009050 <Motor_Speed_LB+0xd0>)
 8008f90:	edd3 7a01 	vldr	s15, [r3, #4]
 8008f94:	ed97 7a00 	vldr	s14, [r7]
 8008f98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fa0:	dd03      	ble.n	8008faa <Motor_Speed_LB+0x2a>
	   RPM_LB = max_speed[1];
 8008fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8009050 <Motor_Speed_LB+0xd0>)
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	603b      	str	r3, [r7, #0]
 8008fa8:	e012      	b.n	8008fd0 <Motor_Speed_LB+0x50>
	} else if (RPM_LB < -max_speed[1]) {
 8008faa:	4b29      	ldr	r3, [pc, #164]	@ (8009050 <Motor_Speed_LB+0xd0>)
 8008fac:	edd3 7a01 	vldr	s15, [r3, #4]
 8008fb0:	eef1 7a67 	vneg.f32	s15, s15
 8008fb4:	ed97 7a00 	vldr	s14, [r7]
 8008fb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fc0:	d506      	bpl.n	8008fd0 <Motor_Speed_LB+0x50>
	   RPM_LB = -max_speed[1];
 8008fc2:	4b23      	ldr	r3, [pc, #140]	@ (8009050 <Motor_Speed_LB+0xd0>)
 8008fc4:	edd3 7a01 	vldr	s15, [r3, #4]
 8008fc8:	eef1 7a67 	vneg.f32	s15, s15
 8008fcc:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_LB ,1);
 8008fd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008fd4:	ee07 3a90 	vmov	s15, r3
 8008fd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008fdc:	edd7 7a00 	vldr	s15, [r7]
 8008fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008fe4:	ee17 3a90 	vmov	r3, s15
 8008fe8:	b21b      	sxth	r3, r3
 8008fea:	2101      	movs	r1, #1
 8008fec:	4618      	mov	r0, r3
 8008fee:	eeb0 0a47 	vmov.f32	s0, s14
 8008ff2:	f7ff fc91 	bl	8008918 <PID_Speed>

	Duty_Cycle[1] = (int16_t)((Output_PID[1]/((float)(max_speed[1] - min_speed[1]))) * DutyCycle_LB_MAX);
 8008ff6:	4b17      	ldr	r3, [pc, #92]	@ (8009054 <Motor_Speed_LB+0xd4>)
 8008ff8:	edd3 6a01 	vldr	s13, [r3, #4]
 8008ffc:	4b14      	ldr	r3, [pc, #80]	@ (8009050 <Motor_Speed_LB+0xd0>)
 8008ffe:	ed93 7a01 	vldr	s14, [r3, #4]
 8009002:	4b15      	ldr	r3, [pc, #84]	@ (8009058 <Motor_Speed_LB+0xd8>)
 8009004:	edd3 7a01 	vldr	s15, [r3, #4]
 8009008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800900c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009010:	4b12      	ldr	r3, [pc, #72]	@ (800905c <Motor_Speed_LB+0xdc>)
 8009012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009016:	ee07 3a90 	vmov	s15, r3
 800901a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800901e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009022:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009026:	ee17 3a90 	vmov	r3, s15
 800902a:	b21a      	sxth	r2, r3
 800902c:	4b0c      	ldr	r3, [pc, #48]	@ (8009060 <Motor_Speed_LB+0xe0>)
 800902e:	805a      	strh	r2, [r3, #2]

	Motor_DutyCycle_LB(Duty_Cycle[1]);
 8009030:	4b0b      	ldr	r3, [pc, #44]	@ (8009060 <Motor_Speed_LB+0xe0>)
 8009032:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009036:	4618      	mov	r0, r3
 8009038:	f7ff fd70 	bl	8008b1c <Motor_DutyCycle_LB>

//	return _RPM[1];
	return Output_PID[1];
 800903c:	4b05      	ldr	r3, [pc, #20]	@ (8009054 <Motor_Speed_LB+0xd4>)
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	ee07 3a90 	vmov	s15, r3
}
 8009044:	eeb0 0a67 	vmov.f32	s0, s15
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	20000730 	.word	0x20000730
 8009054:	200007c0 	.word	0x200007c0
 8009058:	20000718 	.word	0x20000718
 800905c:	2000067e 	.word	0x2000067e
 8009060:	200007d8 	.word	0x200007d8

08009064 <Motor_Speed_RF>:

float Motor_Speed_RF(int16_t RPM_INPUT ,float RPM_RF){
 8009064:	b580      	push	{r7, lr}
 8009066:	b082      	sub	sp, #8
 8009068:	af00      	add	r7, sp, #0
 800906a:	4603      	mov	r3, r0
 800906c:	ed87 0a00 	vstr	s0, [r7]
 8009070:	80fb      	strh	r3, [r7, #6]
	if (RPM_RF > max_speed[2]) {
 8009072:	4b30      	ldr	r3, [pc, #192]	@ (8009134 <Motor_Speed_RF+0xd0>)
 8009074:	edd3 7a02 	vldr	s15, [r3, #8]
 8009078:	ed97 7a00 	vldr	s14, [r7]
 800907c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009084:	dd03      	ble.n	800908e <Motor_Speed_RF+0x2a>
	   RPM_RF = max_speed[2];
 8009086:	4b2b      	ldr	r3, [pc, #172]	@ (8009134 <Motor_Speed_RF+0xd0>)
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	603b      	str	r3, [r7, #0]
 800908c:	e012      	b.n	80090b4 <Motor_Speed_RF+0x50>
	} else if (RPM_RF < -max_speed[2]) {
 800908e:	4b29      	ldr	r3, [pc, #164]	@ (8009134 <Motor_Speed_RF+0xd0>)
 8009090:	edd3 7a02 	vldr	s15, [r3, #8]
 8009094:	eef1 7a67 	vneg.f32	s15, s15
 8009098:	ed97 7a00 	vldr	s14, [r7]
 800909c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a4:	d506      	bpl.n	80090b4 <Motor_Speed_RF+0x50>
	   RPM_RF = -max_speed[2];
 80090a6:	4b23      	ldr	r3, [pc, #140]	@ (8009134 <Motor_Speed_RF+0xd0>)
 80090a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80090ac:	eef1 7a67 	vneg.f32	s15, s15
 80090b0:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_RF ,2);
 80090b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80090b8:	ee07 3a90 	vmov	s15, r3
 80090bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80090c0:	edd7 7a00 	vldr	s15, [r7]
 80090c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090c8:	ee17 3a90 	vmov	r3, s15
 80090cc:	b21b      	sxth	r3, r3
 80090ce:	2102      	movs	r1, #2
 80090d0:	4618      	mov	r0, r3
 80090d2:	eeb0 0a47 	vmov.f32	s0, s14
 80090d6:	f7ff fc1f 	bl	8008918 <PID_Speed>

	Duty_Cycle[2] = (int16_t)((Output_PID[2]/((float)(max_speed[2] - min_speed[2]))) * DutyCycle_RF_MAX);
 80090da:	4b17      	ldr	r3, [pc, #92]	@ (8009138 <Motor_Speed_RF+0xd4>)
 80090dc:	edd3 6a02 	vldr	s13, [r3, #8]
 80090e0:	4b14      	ldr	r3, [pc, #80]	@ (8009134 <Motor_Speed_RF+0xd0>)
 80090e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80090e6:	4b15      	ldr	r3, [pc, #84]	@ (800913c <Motor_Speed_RF+0xd8>)
 80090e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80090ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090f4:	4b12      	ldr	r3, [pc, #72]	@ (8009140 <Motor_Speed_RF+0xdc>)
 80090f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090fa:	ee07 3a90 	vmov	s15, r3
 80090fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009106:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800910a:	ee17 3a90 	vmov	r3, s15
 800910e:	b21a      	sxth	r2, r3
 8009110:	4b0c      	ldr	r3, [pc, #48]	@ (8009144 <Motor_Speed_RF+0xe0>)
 8009112:	809a      	strh	r2, [r3, #4]

	Motor_DutyCycle_RF(Duty_Cycle[2]);
 8009114:	4b0b      	ldr	r3, [pc, #44]	@ (8009144 <Motor_Speed_RF+0xe0>)
 8009116:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800911a:	4618      	mov	r0, r3
 800911c:	f7ff fd5a 	bl	8008bd4 <Motor_DutyCycle_RF>

//	return _RPM[2];
	return Output_PID[2];
 8009120:	4b05      	ldr	r3, [pc, #20]	@ (8009138 <Motor_Speed_RF+0xd4>)
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	ee07 3a90 	vmov	s15, r3
}
 8009128:	eeb0 0a67 	vmov.f32	s0, s15
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	20000730 	.word	0x20000730
 8009138:	200007c0 	.word	0x200007c0
 800913c:	20000718 	.word	0x20000718
 8009140:	20000680 	.word	0x20000680
 8009144:	200007d8 	.word	0x200007d8

08009148 <Motor_Speed_RB>:

float Motor_Speed_RB(int16_t RPM_INPUT ,float RPM_RB){
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	4603      	mov	r3, r0
 8009150:	ed87 0a00 	vstr	s0, [r7]
 8009154:	80fb      	strh	r3, [r7, #6]
	if (RPM_RB > max_speed[3]) {
 8009156:	4b30      	ldr	r3, [pc, #192]	@ (8009218 <Motor_Speed_RB+0xd0>)
 8009158:	edd3 7a03 	vldr	s15, [r3, #12]
 800915c:	ed97 7a00 	vldr	s14, [r7]
 8009160:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009168:	dd03      	ble.n	8009172 <Motor_Speed_RB+0x2a>
		RPM_RB = max_speed[3];
 800916a:	4b2b      	ldr	r3, [pc, #172]	@ (8009218 <Motor_Speed_RB+0xd0>)
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	603b      	str	r3, [r7, #0]
 8009170:	e012      	b.n	8009198 <Motor_Speed_RB+0x50>
	} else if (RPM_RB < -max_speed[3]) {
 8009172:	4b29      	ldr	r3, [pc, #164]	@ (8009218 <Motor_Speed_RB+0xd0>)
 8009174:	edd3 7a03 	vldr	s15, [r3, #12]
 8009178:	eef1 7a67 	vneg.f32	s15, s15
 800917c:	ed97 7a00 	vldr	s14, [r7]
 8009180:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009188:	d506      	bpl.n	8009198 <Motor_Speed_RB+0x50>
		RPM_RB = -max_speed[3];
 800918a:	4b23      	ldr	r3, [pc, #140]	@ (8009218 <Motor_Speed_RB+0xd0>)
 800918c:	edd3 7a03 	vldr	s15, [r3, #12]
 8009190:	eef1 7a67 	vneg.f32	s15, s15
 8009194:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_RB ,3);
 8009198:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800919c:	ee07 3a90 	vmov	s15, r3
 80091a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80091a4:	edd7 7a00 	vldr	s15, [r7]
 80091a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80091ac:	ee17 3a90 	vmov	r3, s15
 80091b0:	b21b      	sxth	r3, r3
 80091b2:	2103      	movs	r1, #3
 80091b4:	4618      	mov	r0, r3
 80091b6:	eeb0 0a47 	vmov.f32	s0, s14
 80091ba:	f7ff fbad 	bl	8008918 <PID_Speed>

	Duty_Cycle[3] = (int16_t)((Output_PID[3]/((float)(max_speed[3] - min_speed[3]))) * DutyCycle_RB_MAX);
 80091be:	4b17      	ldr	r3, [pc, #92]	@ (800921c <Motor_Speed_RB+0xd4>)
 80091c0:	edd3 6a03 	vldr	s13, [r3, #12]
 80091c4:	4b14      	ldr	r3, [pc, #80]	@ (8009218 <Motor_Speed_RB+0xd0>)
 80091c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80091ca:	4b15      	ldr	r3, [pc, #84]	@ (8009220 <Motor_Speed_RB+0xd8>)
 80091cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80091d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091d8:	4b12      	ldr	r3, [pc, #72]	@ (8009224 <Motor_Speed_RB+0xdc>)
 80091da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091de:	ee07 3a90 	vmov	s15, r3
 80091e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80091ee:	ee17 3a90 	vmov	r3, s15
 80091f2:	b21a      	sxth	r2, r3
 80091f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009228 <Motor_Speed_RB+0xe0>)
 80091f6:	80da      	strh	r2, [r3, #6]

	Motor_DutyCycle_RB(Duty_Cycle[3]);
 80091f8:	4b0b      	ldr	r3, [pc, #44]	@ (8009228 <Motor_Speed_RB+0xe0>)
 80091fa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80091fe:	4618      	mov	r0, r3
 8009200:	f7ff fd44 	bl	8008c8c <Motor_DutyCycle_RB>

//	return _RPM[3];
	return Output_PID[3];
 8009204:	4b05      	ldr	r3, [pc, #20]	@ (800921c <Motor_Speed_RB+0xd4>)
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	ee07 3a90 	vmov	s15, r3
}
 800920c:	eeb0 0a67 	vmov.f32	s0, s15
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20000730 	.word	0x20000730
 800921c:	200007c0 	.word	0x200007c0
 8009220:	20000718 	.word	0x20000718
 8009224:	20000682 	.word	0x20000682
 8009228:	200007d8 	.word	0x200007d8

0800922c <digitalWrite>:

//	return _RPM[5];
	return Output_PID[5];
}

void digitalWrite(char* _PIN , uint8_t vlue){
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	460b      	mov	r3, r1
 8009236:	70fb      	strb	r3, [r7, #3]
	uint8_t PIN = (_PIN[2] - '0') * 10 + (_PIN[3] - '0');
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	3302      	adds	r3, #2
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	3b30      	subs	r3, #48	@ 0x30
 8009240:	b2db      	uxtb	r3, r3
 8009242:	461a      	mov	r2, r3
 8009244:	0092      	lsls	r2, r2, #2
 8009246:	4413      	add	r3, r2
 8009248:	005b      	lsls	r3, r3, #1
 800924a:	b2da      	uxtb	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	3303      	adds	r3, #3
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	4413      	add	r3, r2
 8009254:	b2db      	uxtb	r3, r3
 8009256:	3b30      	subs	r3, #48	@ 0x30
 8009258:	73fb      	strb	r3, [r7, #15]

	if (_PIN[1] == 'A') {
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	3301      	adds	r3, #1
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	2b41      	cmp	r3, #65	@ 0x41
 8009262:	f040 809f 	bne.w	80093a4 <digitalWrite+0x178>
	        switch (PIN) {
 8009266:	7bfb      	ldrb	r3, [r7, #15]
 8009268:	2b0f      	cmp	r3, #15
 800926a:	f200 833f 	bhi.w	80098ec <digitalWrite+0x6c0>
 800926e:	a201      	add	r2, pc, #4	@ (adr r2, 8009274 <digitalWrite+0x48>)
 8009270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009274:	080092b5 	.word	0x080092b5
 8009278:	080092c3 	.word	0x080092c3
 800927c:	080092d1 	.word	0x080092d1
 8009280:	080092df 	.word	0x080092df
 8009284:	080092ed 	.word	0x080092ed
 8009288:	080092fb 	.word	0x080092fb
 800928c:	08009309 	.word	0x08009309
 8009290:	08009317 	.word	0x08009317
 8009294:	08009325 	.word	0x08009325
 8009298:	08009335 	.word	0x08009335
 800929c:	08009345 	.word	0x08009345
 80092a0:	08009355 	.word	0x08009355
 80092a4:	08009365 	.word	0x08009365
 80092a8:	08009375 	.word	0x08009375
 80092ac:	08009385 	.word	0x08009385
 80092b0:	08009395 	.word	0x08009395
	            case 0: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, vlue); break;
 80092b4:	78fb      	ldrb	r3, [r7, #3]
 80092b6:	461a      	mov	r2, r3
 80092b8:	2101      	movs	r1, #1
 80092ba:	48bd      	ldr	r0, [pc, #756]	@ (80095b0 <digitalWrite+0x384>)
 80092bc:	f7f9 fe86 	bl	8002fcc <HAL_GPIO_WritePin>
 80092c0:	e314      	b.n	80098ec <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, vlue); break;
 80092c2:	78fb      	ldrb	r3, [r7, #3]
 80092c4:	461a      	mov	r2, r3
 80092c6:	2102      	movs	r1, #2
 80092c8:	48b9      	ldr	r0, [pc, #740]	@ (80095b0 <digitalWrite+0x384>)
 80092ca:	f7f9 fe7f 	bl	8002fcc <HAL_GPIO_WritePin>
 80092ce:	e30d      	b.n	80098ec <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, vlue); break;
 80092d0:	78fb      	ldrb	r3, [r7, #3]
 80092d2:	461a      	mov	r2, r3
 80092d4:	2104      	movs	r1, #4
 80092d6:	48b6      	ldr	r0, [pc, #728]	@ (80095b0 <digitalWrite+0x384>)
 80092d8:	f7f9 fe78 	bl	8002fcc <HAL_GPIO_WritePin>
 80092dc:	e306      	b.n	80098ec <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, vlue); break;
 80092de:	78fb      	ldrb	r3, [r7, #3]
 80092e0:	461a      	mov	r2, r3
 80092e2:	2108      	movs	r1, #8
 80092e4:	48b2      	ldr	r0, [pc, #712]	@ (80095b0 <digitalWrite+0x384>)
 80092e6:	f7f9 fe71 	bl	8002fcc <HAL_GPIO_WritePin>
 80092ea:	e2ff      	b.n	80098ec <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, vlue); break;
 80092ec:	78fb      	ldrb	r3, [r7, #3]
 80092ee:	461a      	mov	r2, r3
 80092f0:	2110      	movs	r1, #16
 80092f2:	48af      	ldr	r0, [pc, #700]	@ (80095b0 <digitalWrite+0x384>)
 80092f4:	f7f9 fe6a 	bl	8002fcc <HAL_GPIO_WritePin>
 80092f8:	e2f8      	b.n	80098ec <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, vlue); break;
 80092fa:	78fb      	ldrb	r3, [r7, #3]
 80092fc:	461a      	mov	r2, r3
 80092fe:	2120      	movs	r1, #32
 8009300:	48ab      	ldr	r0, [pc, #684]	@ (80095b0 <digitalWrite+0x384>)
 8009302:	f7f9 fe63 	bl	8002fcc <HAL_GPIO_WritePin>
 8009306:	e2f1      	b.n	80098ec <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, vlue); break;
 8009308:	78fb      	ldrb	r3, [r7, #3]
 800930a:	461a      	mov	r2, r3
 800930c:	2140      	movs	r1, #64	@ 0x40
 800930e:	48a8      	ldr	r0, [pc, #672]	@ (80095b0 <digitalWrite+0x384>)
 8009310:	f7f9 fe5c 	bl	8002fcc <HAL_GPIO_WritePin>
 8009314:	e2ea      	b.n	80098ec <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, vlue); break;
 8009316:	78fb      	ldrb	r3, [r7, #3]
 8009318:	461a      	mov	r2, r3
 800931a:	2180      	movs	r1, #128	@ 0x80
 800931c:	48a4      	ldr	r0, [pc, #656]	@ (80095b0 <digitalWrite+0x384>)
 800931e:	f7f9 fe55 	bl	8002fcc <HAL_GPIO_WritePin>
 8009322:	e2e3      	b.n	80098ec <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, vlue); break;
 8009324:	78fb      	ldrb	r3, [r7, #3]
 8009326:	461a      	mov	r2, r3
 8009328:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800932c:	48a0      	ldr	r0, [pc, #640]	@ (80095b0 <digitalWrite+0x384>)
 800932e:	f7f9 fe4d 	bl	8002fcc <HAL_GPIO_WritePin>
 8009332:	e2db      	b.n	80098ec <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, vlue); break;
 8009334:	78fb      	ldrb	r3, [r7, #3]
 8009336:	461a      	mov	r2, r3
 8009338:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800933c:	489c      	ldr	r0, [pc, #624]	@ (80095b0 <digitalWrite+0x384>)
 800933e:	f7f9 fe45 	bl	8002fcc <HAL_GPIO_WritePin>
 8009342:	e2d3      	b.n	80098ec <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, vlue); break;
 8009344:	78fb      	ldrb	r3, [r7, #3]
 8009346:	461a      	mov	r2, r3
 8009348:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800934c:	4898      	ldr	r0, [pc, #608]	@ (80095b0 <digitalWrite+0x384>)
 800934e:	f7f9 fe3d 	bl	8002fcc <HAL_GPIO_WritePin>
 8009352:	e2cb      	b.n	80098ec <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, vlue); break;
 8009354:	78fb      	ldrb	r3, [r7, #3]
 8009356:	461a      	mov	r2, r3
 8009358:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800935c:	4894      	ldr	r0, [pc, #592]	@ (80095b0 <digitalWrite+0x384>)
 800935e:	f7f9 fe35 	bl	8002fcc <HAL_GPIO_WritePin>
 8009362:	e2c3      	b.n	80098ec <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, vlue); break;
 8009364:	78fb      	ldrb	r3, [r7, #3]
 8009366:	461a      	mov	r2, r3
 8009368:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800936c:	4890      	ldr	r0, [pc, #576]	@ (80095b0 <digitalWrite+0x384>)
 800936e:	f7f9 fe2d 	bl	8002fcc <HAL_GPIO_WritePin>
 8009372:	e2bb      	b.n	80098ec <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, vlue); break;
 8009374:	78fb      	ldrb	r3, [r7, #3]
 8009376:	461a      	mov	r2, r3
 8009378:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800937c:	488c      	ldr	r0, [pc, #560]	@ (80095b0 <digitalWrite+0x384>)
 800937e:	f7f9 fe25 	bl	8002fcc <HAL_GPIO_WritePin>
 8009382:	e2b3      	b.n	80098ec <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, vlue); break;
 8009384:	78fb      	ldrb	r3, [r7, #3]
 8009386:	461a      	mov	r2, r3
 8009388:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800938c:	4888      	ldr	r0, [pc, #544]	@ (80095b0 <digitalWrite+0x384>)
 800938e:	f7f9 fe1d 	bl	8002fcc <HAL_GPIO_WritePin>
 8009392:	e2ab      	b.n	80098ec <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, vlue); break;
 8009394:	78fb      	ldrb	r3, [r7, #3]
 8009396:	461a      	mov	r2, r3
 8009398:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800939c:	4884      	ldr	r0, [pc, #528]	@ (80095b0 <digitalWrite+0x384>)
 800939e:	f7f9 fe15 	bl	8002fcc <HAL_GPIO_WritePin>
 80093a2:	e2a3      	b.n	80098ec <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'B') {
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	3301      	adds	r3, #1
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	2b42      	cmp	r3, #66	@ 0x42
 80093ac:	f040 80a0 	bne.w	80094f0 <digitalWrite+0x2c4>
	        switch (PIN) {
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
 80093b2:	2b0f      	cmp	r3, #15
 80093b4:	f200 829a 	bhi.w	80098ec <digitalWrite+0x6c0>
 80093b8:	a201      	add	r2, pc, #4	@ (adr r2, 80093c0 <digitalWrite+0x194>)
 80093ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093be:	bf00      	nop
 80093c0:	08009401 	.word	0x08009401
 80093c4:	0800940f 	.word	0x0800940f
 80093c8:	0800941d 	.word	0x0800941d
 80093cc:	0800942b 	.word	0x0800942b
 80093d0:	08009439 	.word	0x08009439
 80093d4:	08009447 	.word	0x08009447
 80093d8:	08009455 	.word	0x08009455
 80093dc:	08009463 	.word	0x08009463
 80093e0:	08009471 	.word	0x08009471
 80093e4:	08009481 	.word	0x08009481
 80093e8:	08009491 	.word	0x08009491
 80093ec:	080094a1 	.word	0x080094a1
 80093f0:	080094b1 	.word	0x080094b1
 80093f4:	080094c1 	.word	0x080094c1
 80093f8:	080094d1 	.word	0x080094d1
 80093fc:	080094e1 	.word	0x080094e1
	            case 0: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, vlue); break;
 8009400:	78fb      	ldrb	r3, [r7, #3]
 8009402:	461a      	mov	r2, r3
 8009404:	2101      	movs	r1, #1
 8009406:	486b      	ldr	r0, [pc, #428]	@ (80095b4 <digitalWrite+0x388>)
 8009408:	f7f9 fde0 	bl	8002fcc <HAL_GPIO_WritePin>
 800940c:	e26e      	b.n	80098ec <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, vlue); break;
 800940e:	78fb      	ldrb	r3, [r7, #3]
 8009410:	461a      	mov	r2, r3
 8009412:	2102      	movs	r1, #2
 8009414:	4867      	ldr	r0, [pc, #412]	@ (80095b4 <digitalWrite+0x388>)
 8009416:	f7f9 fdd9 	bl	8002fcc <HAL_GPIO_WritePin>
 800941a:	e267      	b.n	80098ec <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, vlue); break;
 800941c:	78fb      	ldrb	r3, [r7, #3]
 800941e:	461a      	mov	r2, r3
 8009420:	2104      	movs	r1, #4
 8009422:	4864      	ldr	r0, [pc, #400]	@ (80095b4 <digitalWrite+0x388>)
 8009424:	f7f9 fdd2 	bl	8002fcc <HAL_GPIO_WritePin>
 8009428:	e260      	b.n	80098ec <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, vlue); break;
 800942a:	78fb      	ldrb	r3, [r7, #3]
 800942c:	461a      	mov	r2, r3
 800942e:	2108      	movs	r1, #8
 8009430:	4860      	ldr	r0, [pc, #384]	@ (80095b4 <digitalWrite+0x388>)
 8009432:	f7f9 fdcb 	bl	8002fcc <HAL_GPIO_WritePin>
 8009436:	e259      	b.n	80098ec <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, vlue); break;
 8009438:	78fb      	ldrb	r3, [r7, #3]
 800943a:	461a      	mov	r2, r3
 800943c:	2110      	movs	r1, #16
 800943e:	485d      	ldr	r0, [pc, #372]	@ (80095b4 <digitalWrite+0x388>)
 8009440:	f7f9 fdc4 	bl	8002fcc <HAL_GPIO_WritePin>
 8009444:	e252      	b.n	80098ec <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, vlue); break;
 8009446:	78fb      	ldrb	r3, [r7, #3]
 8009448:	461a      	mov	r2, r3
 800944a:	2120      	movs	r1, #32
 800944c:	4859      	ldr	r0, [pc, #356]	@ (80095b4 <digitalWrite+0x388>)
 800944e:	f7f9 fdbd 	bl	8002fcc <HAL_GPIO_WritePin>
 8009452:	e24b      	b.n	80098ec <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, vlue); break;
 8009454:	78fb      	ldrb	r3, [r7, #3]
 8009456:	461a      	mov	r2, r3
 8009458:	2140      	movs	r1, #64	@ 0x40
 800945a:	4856      	ldr	r0, [pc, #344]	@ (80095b4 <digitalWrite+0x388>)
 800945c:	f7f9 fdb6 	bl	8002fcc <HAL_GPIO_WritePin>
 8009460:	e244      	b.n	80098ec <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, vlue); break;
 8009462:	78fb      	ldrb	r3, [r7, #3]
 8009464:	461a      	mov	r2, r3
 8009466:	2180      	movs	r1, #128	@ 0x80
 8009468:	4852      	ldr	r0, [pc, #328]	@ (80095b4 <digitalWrite+0x388>)
 800946a:	f7f9 fdaf 	bl	8002fcc <HAL_GPIO_WritePin>
 800946e:	e23d      	b.n	80098ec <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, vlue); break;
 8009470:	78fb      	ldrb	r3, [r7, #3]
 8009472:	461a      	mov	r2, r3
 8009474:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009478:	484e      	ldr	r0, [pc, #312]	@ (80095b4 <digitalWrite+0x388>)
 800947a:	f7f9 fda7 	bl	8002fcc <HAL_GPIO_WritePin>
 800947e:	e235      	b.n	80098ec <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, vlue); break;
 8009480:	78fb      	ldrb	r3, [r7, #3]
 8009482:	461a      	mov	r2, r3
 8009484:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009488:	484a      	ldr	r0, [pc, #296]	@ (80095b4 <digitalWrite+0x388>)
 800948a:	f7f9 fd9f 	bl	8002fcc <HAL_GPIO_WritePin>
 800948e:	e22d      	b.n	80098ec <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, vlue); break;
 8009490:	78fb      	ldrb	r3, [r7, #3]
 8009492:	461a      	mov	r2, r3
 8009494:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009498:	4846      	ldr	r0, [pc, #280]	@ (80095b4 <digitalWrite+0x388>)
 800949a:	f7f9 fd97 	bl	8002fcc <HAL_GPIO_WritePin>
 800949e:	e225      	b.n	80098ec <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, vlue); break;
 80094a0:	78fb      	ldrb	r3, [r7, #3]
 80094a2:	461a      	mov	r2, r3
 80094a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80094a8:	4842      	ldr	r0, [pc, #264]	@ (80095b4 <digitalWrite+0x388>)
 80094aa:	f7f9 fd8f 	bl	8002fcc <HAL_GPIO_WritePin>
 80094ae:	e21d      	b.n	80098ec <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, vlue); break;
 80094b0:	78fb      	ldrb	r3, [r7, #3]
 80094b2:	461a      	mov	r2, r3
 80094b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80094b8:	483e      	ldr	r0, [pc, #248]	@ (80095b4 <digitalWrite+0x388>)
 80094ba:	f7f9 fd87 	bl	8002fcc <HAL_GPIO_WritePin>
 80094be:	e215      	b.n	80098ec <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, vlue); break;
 80094c0:	78fb      	ldrb	r3, [r7, #3]
 80094c2:	461a      	mov	r2, r3
 80094c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80094c8:	483a      	ldr	r0, [pc, #232]	@ (80095b4 <digitalWrite+0x388>)
 80094ca:	f7f9 fd7f 	bl	8002fcc <HAL_GPIO_WritePin>
 80094ce:	e20d      	b.n	80098ec <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, vlue); break;
 80094d0:	78fb      	ldrb	r3, [r7, #3]
 80094d2:	461a      	mov	r2, r3
 80094d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80094d8:	4836      	ldr	r0, [pc, #216]	@ (80095b4 <digitalWrite+0x388>)
 80094da:	f7f9 fd77 	bl	8002fcc <HAL_GPIO_WritePin>
 80094de:	e205      	b.n	80098ec <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, vlue); break;
 80094e0:	78fb      	ldrb	r3, [r7, #3]
 80094e2:	461a      	mov	r2, r3
 80094e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80094e8:	4832      	ldr	r0, [pc, #200]	@ (80095b4 <digitalWrite+0x388>)
 80094ea:	f7f9 fd6f 	bl	8002fcc <HAL_GPIO_WritePin>
 80094ee:	e1fd      	b.n	80098ec <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'C') {
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	3301      	adds	r3, #1
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	2b43      	cmp	r3, #67	@ 0x43
 80094f8:	f040 80a7 	bne.w	800964a <digitalWrite+0x41e>
	        switch (PIN) {
 80094fc:	7bfb      	ldrb	r3, [r7, #15]
 80094fe:	2b0f      	cmp	r3, #15
 8009500:	f200 81f4 	bhi.w	80098ec <digitalWrite+0x6c0>
 8009504:	a201      	add	r2, pc, #4	@ (adr r2, 800950c <digitalWrite+0x2e0>)
 8009506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800950a:	bf00      	nop
 800950c:	0800954d 	.word	0x0800954d
 8009510:	0800955b 	.word	0x0800955b
 8009514:	08009569 	.word	0x08009569
 8009518:	08009577 	.word	0x08009577
 800951c:	08009585 	.word	0x08009585
 8009520:	08009593 	.word	0x08009593
 8009524:	080095a1 	.word	0x080095a1
 8009528:	080095bd 	.word	0x080095bd
 800952c:	080095cb 	.word	0x080095cb
 8009530:	080095db 	.word	0x080095db
 8009534:	080095eb 	.word	0x080095eb
 8009538:	080095fb 	.word	0x080095fb
 800953c:	0800960b 	.word	0x0800960b
 8009540:	0800961b 	.word	0x0800961b
 8009544:	0800962b 	.word	0x0800962b
 8009548:	0800963b 	.word	0x0800963b
	            case 0: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, vlue); break;
 800954c:	78fb      	ldrb	r3, [r7, #3]
 800954e:	461a      	mov	r2, r3
 8009550:	2101      	movs	r1, #1
 8009552:	4819      	ldr	r0, [pc, #100]	@ (80095b8 <digitalWrite+0x38c>)
 8009554:	f7f9 fd3a 	bl	8002fcc <HAL_GPIO_WritePin>
 8009558:	e1c8      	b.n	80098ec <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, vlue); break;
 800955a:	78fb      	ldrb	r3, [r7, #3]
 800955c:	461a      	mov	r2, r3
 800955e:	2102      	movs	r1, #2
 8009560:	4815      	ldr	r0, [pc, #84]	@ (80095b8 <digitalWrite+0x38c>)
 8009562:	f7f9 fd33 	bl	8002fcc <HAL_GPIO_WritePin>
 8009566:	e1c1      	b.n	80098ec <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, vlue); break;
 8009568:	78fb      	ldrb	r3, [r7, #3]
 800956a:	461a      	mov	r2, r3
 800956c:	2104      	movs	r1, #4
 800956e:	4812      	ldr	r0, [pc, #72]	@ (80095b8 <digitalWrite+0x38c>)
 8009570:	f7f9 fd2c 	bl	8002fcc <HAL_GPIO_WritePin>
 8009574:	e1ba      	b.n	80098ec <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, vlue); break;
 8009576:	78fb      	ldrb	r3, [r7, #3]
 8009578:	461a      	mov	r2, r3
 800957a:	2108      	movs	r1, #8
 800957c:	480e      	ldr	r0, [pc, #56]	@ (80095b8 <digitalWrite+0x38c>)
 800957e:	f7f9 fd25 	bl	8002fcc <HAL_GPIO_WritePin>
 8009582:	e1b3      	b.n	80098ec <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, vlue); break;
 8009584:	78fb      	ldrb	r3, [r7, #3]
 8009586:	461a      	mov	r2, r3
 8009588:	2110      	movs	r1, #16
 800958a:	480b      	ldr	r0, [pc, #44]	@ (80095b8 <digitalWrite+0x38c>)
 800958c:	f7f9 fd1e 	bl	8002fcc <HAL_GPIO_WritePin>
 8009590:	e1ac      	b.n	80098ec <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, vlue); break;
 8009592:	78fb      	ldrb	r3, [r7, #3]
 8009594:	461a      	mov	r2, r3
 8009596:	2120      	movs	r1, #32
 8009598:	4807      	ldr	r0, [pc, #28]	@ (80095b8 <digitalWrite+0x38c>)
 800959a:	f7f9 fd17 	bl	8002fcc <HAL_GPIO_WritePin>
 800959e:	e1a5      	b.n	80098ec <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, vlue); break;
 80095a0:	78fb      	ldrb	r3, [r7, #3]
 80095a2:	461a      	mov	r2, r3
 80095a4:	2140      	movs	r1, #64	@ 0x40
 80095a6:	4804      	ldr	r0, [pc, #16]	@ (80095b8 <digitalWrite+0x38c>)
 80095a8:	f7f9 fd10 	bl	8002fcc <HAL_GPIO_WritePin>
 80095ac:	e19e      	b.n	80098ec <digitalWrite+0x6c0>
 80095ae:	bf00      	nop
 80095b0:	40020000 	.word	0x40020000
 80095b4:	40020400 	.word	0x40020400
 80095b8:	40020800 	.word	0x40020800
	            case 7: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, vlue); break;
 80095bc:	78fb      	ldrb	r3, [r7, #3]
 80095be:	461a      	mov	r2, r3
 80095c0:	2180      	movs	r1, #128	@ 0x80
 80095c2:	48bb      	ldr	r0, [pc, #748]	@ (80098b0 <digitalWrite+0x684>)
 80095c4:	f7f9 fd02 	bl	8002fcc <HAL_GPIO_WritePin>
 80095c8:	e190      	b.n	80098ec <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, vlue); break;
 80095ca:	78fb      	ldrb	r3, [r7, #3]
 80095cc:	461a      	mov	r2, r3
 80095ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80095d2:	48b7      	ldr	r0, [pc, #732]	@ (80098b0 <digitalWrite+0x684>)
 80095d4:	f7f9 fcfa 	bl	8002fcc <HAL_GPIO_WritePin>
 80095d8:	e188      	b.n	80098ec <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, vlue); break;
 80095da:	78fb      	ldrb	r3, [r7, #3]
 80095dc:	461a      	mov	r2, r3
 80095de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80095e2:	48b3      	ldr	r0, [pc, #716]	@ (80098b0 <digitalWrite+0x684>)
 80095e4:	f7f9 fcf2 	bl	8002fcc <HAL_GPIO_WritePin>
 80095e8:	e180      	b.n	80098ec <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, vlue); break;
 80095ea:	78fb      	ldrb	r3, [r7, #3]
 80095ec:	461a      	mov	r2, r3
 80095ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80095f2:	48af      	ldr	r0, [pc, #700]	@ (80098b0 <digitalWrite+0x684>)
 80095f4:	f7f9 fcea 	bl	8002fcc <HAL_GPIO_WritePin>
 80095f8:	e178      	b.n	80098ec <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, vlue); break;
 80095fa:	78fb      	ldrb	r3, [r7, #3]
 80095fc:	461a      	mov	r2, r3
 80095fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009602:	48ab      	ldr	r0, [pc, #684]	@ (80098b0 <digitalWrite+0x684>)
 8009604:	f7f9 fce2 	bl	8002fcc <HAL_GPIO_WritePin>
 8009608:	e170      	b.n	80098ec <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, vlue); break;
 800960a:	78fb      	ldrb	r3, [r7, #3]
 800960c:	461a      	mov	r2, r3
 800960e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009612:	48a7      	ldr	r0, [pc, #668]	@ (80098b0 <digitalWrite+0x684>)
 8009614:	f7f9 fcda 	bl	8002fcc <HAL_GPIO_WritePin>
 8009618:	e168      	b.n	80098ec <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, vlue); break;
 800961a:	78fb      	ldrb	r3, [r7, #3]
 800961c:	461a      	mov	r2, r3
 800961e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009622:	48a3      	ldr	r0, [pc, #652]	@ (80098b0 <digitalWrite+0x684>)
 8009624:	f7f9 fcd2 	bl	8002fcc <HAL_GPIO_WritePin>
 8009628:	e160      	b.n	80098ec <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, vlue); break;
 800962a:	78fb      	ldrb	r3, [r7, #3]
 800962c:	461a      	mov	r2, r3
 800962e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009632:	489f      	ldr	r0, [pc, #636]	@ (80098b0 <digitalWrite+0x684>)
 8009634:	f7f9 fcca 	bl	8002fcc <HAL_GPIO_WritePin>
 8009638:	e158      	b.n	80098ec <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, vlue); break;
 800963a:	78fb      	ldrb	r3, [r7, #3]
 800963c:	461a      	mov	r2, r3
 800963e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009642:	489b      	ldr	r0, [pc, #620]	@ (80098b0 <digitalWrite+0x684>)
 8009644:	f7f9 fcc2 	bl	8002fcc <HAL_GPIO_WritePin>
 8009648:	e150      	b.n	80098ec <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'D') {
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	3301      	adds	r3, #1
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	2b44      	cmp	r3, #68	@ 0x44
 8009652:	f040 809f 	bne.w	8009794 <digitalWrite+0x568>
	        switch (PIN) {
 8009656:	7bfb      	ldrb	r3, [r7, #15]
 8009658:	2b0f      	cmp	r3, #15
 800965a:	f200 8147 	bhi.w	80098ec <digitalWrite+0x6c0>
 800965e:	a201      	add	r2, pc, #4	@ (adr r2, 8009664 <digitalWrite+0x438>)
 8009660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009664:	080096a5 	.word	0x080096a5
 8009668:	080096b3 	.word	0x080096b3
 800966c:	080096c1 	.word	0x080096c1
 8009670:	080096cf 	.word	0x080096cf
 8009674:	080096dd 	.word	0x080096dd
 8009678:	080096eb 	.word	0x080096eb
 800967c:	080096f9 	.word	0x080096f9
 8009680:	08009707 	.word	0x08009707
 8009684:	08009715 	.word	0x08009715
 8009688:	08009725 	.word	0x08009725
 800968c:	08009735 	.word	0x08009735
 8009690:	08009745 	.word	0x08009745
 8009694:	08009755 	.word	0x08009755
 8009698:	08009765 	.word	0x08009765
 800969c:	08009775 	.word	0x08009775
 80096a0:	08009785 	.word	0x08009785
	            case 0: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, vlue); break;
 80096a4:	78fb      	ldrb	r3, [r7, #3]
 80096a6:	461a      	mov	r2, r3
 80096a8:	2101      	movs	r1, #1
 80096aa:	4882      	ldr	r0, [pc, #520]	@ (80098b4 <digitalWrite+0x688>)
 80096ac:	f7f9 fc8e 	bl	8002fcc <HAL_GPIO_WritePin>
 80096b0:	e11c      	b.n	80098ec <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, vlue); break;
 80096b2:	78fb      	ldrb	r3, [r7, #3]
 80096b4:	461a      	mov	r2, r3
 80096b6:	2102      	movs	r1, #2
 80096b8:	487e      	ldr	r0, [pc, #504]	@ (80098b4 <digitalWrite+0x688>)
 80096ba:	f7f9 fc87 	bl	8002fcc <HAL_GPIO_WritePin>
 80096be:	e115      	b.n	80098ec <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, vlue); break;
 80096c0:	78fb      	ldrb	r3, [r7, #3]
 80096c2:	461a      	mov	r2, r3
 80096c4:	2104      	movs	r1, #4
 80096c6:	487b      	ldr	r0, [pc, #492]	@ (80098b4 <digitalWrite+0x688>)
 80096c8:	f7f9 fc80 	bl	8002fcc <HAL_GPIO_WritePin>
 80096cc:	e10e      	b.n	80098ec <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, vlue); break;
 80096ce:	78fb      	ldrb	r3, [r7, #3]
 80096d0:	461a      	mov	r2, r3
 80096d2:	2108      	movs	r1, #8
 80096d4:	4877      	ldr	r0, [pc, #476]	@ (80098b4 <digitalWrite+0x688>)
 80096d6:	f7f9 fc79 	bl	8002fcc <HAL_GPIO_WritePin>
 80096da:	e107      	b.n	80098ec <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, vlue); break;
 80096dc:	78fb      	ldrb	r3, [r7, #3]
 80096de:	461a      	mov	r2, r3
 80096e0:	2110      	movs	r1, #16
 80096e2:	4874      	ldr	r0, [pc, #464]	@ (80098b4 <digitalWrite+0x688>)
 80096e4:	f7f9 fc72 	bl	8002fcc <HAL_GPIO_WritePin>
 80096e8:	e100      	b.n	80098ec <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, vlue); break;
 80096ea:	78fb      	ldrb	r3, [r7, #3]
 80096ec:	461a      	mov	r2, r3
 80096ee:	2120      	movs	r1, #32
 80096f0:	4870      	ldr	r0, [pc, #448]	@ (80098b4 <digitalWrite+0x688>)
 80096f2:	f7f9 fc6b 	bl	8002fcc <HAL_GPIO_WritePin>
 80096f6:	e0f9      	b.n	80098ec <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, vlue); break;
 80096f8:	78fb      	ldrb	r3, [r7, #3]
 80096fa:	461a      	mov	r2, r3
 80096fc:	2140      	movs	r1, #64	@ 0x40
 80096fe:	486d      	ldr	r0, [pc, #436]	@ (80098b4 <digitalWrite+0x688>)
 8009700:	f7f9 fc64 	bl	8002fcc <HAL_GPIO_WritePin>
 8009704:	e0f2      	b.n	80098ec <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, vlue); break;
 8009706:	78fb      	ldrb	r3, [r7, #3]
 8009708:	461a      	mov	r2, r3
 800970a:	2180      	movs	r1, #128	@ 0x80
 800970c:	4869      	ldr	r0, [pc, #420]	@ (80098b4 <digitalWrite+0x688>)
 800970e:	f7f9 fc5d 	bl	8002fcc <HAL_GPIO_WritePin>
 8009712:	e0eb      	b.n	80098ec <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, vlue); break;
 8009714:	78fb      	ldrb	r3, [r7, #3]
 8009716:	461a      	mov	r2, r3
 8009718:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800971c:	4865      	ldr	r0, [pc, #404]	@ (80098b4 <digitalWrite+0x688>)
 800971e:	f7f9 fc55 	bl	8002fcc <HAL_GPIO_WritePin>
 8009722:	e0e3      	b.n	80098ec <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, vlue); break;
 8009724:	78fb      	ldrb	r3, [r7, #3]
 8009726:	461a      	mov	r2, r3
 8009728:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800972c:	4861      	ldr	r0, [pc, #388]	@ (80098b4 <digitalWrite+0x688>)
 800972e:	f7f9 fc4d 	bl	8002fcc <HAL_GPIO_WritePin>
 8009732:	e0db      	b.n	80098ec <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, vlue); break;
 8009734:	78fb      	ldrb	r3, [r7, #3]
 8009736:	461a      	mov	r2, r3
 8009738:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800973c:	485d      	ldr	r0, [pc, #372]	@ (80098b4 <digitalWrite+0x688>)
 800973e:	f7f9 fc45 	bl	8002fcc <HAL_GPIO_WritePin>
 8009742:	e0d3      	b.n	80098ec <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, vlue); break;
 8009744:	78fb      	ldrb	r3, [r7, #3]
 8009746:	461a      	mov	r2, r3
 8009748:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800974c:	4859      	ldr	r0, [pc, #356]	@ (80098b4 <digitalWrite+0x688>)
 800974e:	f7f9 fc3d 	bl	8002fcc <HAL_GPIO_WritePin>
 8009752:	e0cb      	b.n	80098ec <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, vlue); break;
 8009754:	78fb      	ldrb	r3, [r7, #3]
 8009756:	461a      	mov	r2, r3
 8009758:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800975c:	4855      	ldr	r0, [pc, #340]	@ (80098b4 <digitalWrite+0x688>)
 800975e:	f7f9 fc35 	bl	8002fcc <HAL_GPIO_WritePin>
 8009762:	e0c3      	b.n	80098ec <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, vlue); break;
 8009764:	78fb      	ldrb	r3, [r7, #3]
 8009766:	461a      	mov	r2, r3
 8009768:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800976c:	4851      	ldr	r0, [pc, #324]	@ (80098b4 <digitalWrite+0x688>)
 800976e:	f7f9 fc2d 	bl	8002fcc <HAL_GPIO_WritePin>
 8009772:	e0bb      	b.n	80098ec <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, vlue); break;
 8009774:	78fb      	ldrb	r3, [r7, #3]
 8009776:	461a      	mov	r2, r3
 8009778:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800977c:	484d      	ldr	r0, [pc, #308]	@ (80098b4 <digitalWrite+0x688>)
 800977e:	f7f9 fc25 	bl	8002fcc <HAL_GPIO_WritePin>
 8009782:	e0b3      	b.n	80098ec <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, vlue); break;
 8009784:	78fb      	ldrb	r3, [r7, #3]
 8009786:	461a      	mov	r2, r3
 8009788:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800978c:	4849      	ldr	r0, [pc, #292]	@ (80098b4 <digitalWrite+0x688>)
 800978e:	f7f9 fc1d 	bl	8002fcc <HAL_GPIO_WritePin>
 8009792:	e0ab      	b.n	80098ec <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'E') {
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	3301      	adds	r3, #1
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	2b45      	cmp	r3, #69	@ 0x45
 800979c:	f040 80a6 	bne.w	80098ec <digitalWrite+0x6c0>
	        switch (PIN) {
 80097a0:	7bfb      	ldrb	r3, [r7, #15]
 80097a2:	2b0f      	cmp	r3, #15
 80097a4:	f200 80a2 	bhi.w	80098ec <digitalWrite+0x6c0>
 80097a8:	a201      	add	r2, pc, #4	@ (adr r2, 80097b0 <digitalWrite+0x584>)
 80097aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ae:	bf00      	nop
 80097b0:	080097f1 	.word	0x080097f1
 80097b4:	080097ff 	.word	0x080097ff
 80097b8:	0800980d 	.word	0x0800980d
 80097bc:	0800981b 	.word	0x0800981b
 80097c0:	08009829 	.word	0x08009829
 80097c4:	08009837 	.word	0x08009837
 80097c8:	08009845 	.word	0x08009845
 80097cc:	08009853 	.word	0x08009853
 80097d0:	08009861 	.word	0x08009861
 80097d4:	08009871 	.word	0x08009871
 80097d8:	08009881 	.word	0x08009881
 80097dc:	08009891 	.word	0x08009891
 80097e0:	080098a1 	.word	0x080098a1
 80097e4:	080098bd 	.word	0x080098bd
 80097e8:	080098cd 	.word	0x080098cd
 80097ec:	080098dd 	.word	0x080098dd
	            case 0: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, vlue); break;
 80097f0:	78fb      	ldrb	r3, [r7, #3]
 80097f2:	461a      	mov	r2, r3
 80097f4:	2101      	movs	r1, #1
 80097f6:	4830      	ldr	r0, [pc, #192]	@ (80098b8 <digitalWrite+0x68c>)
 80097f8:	f7f9 fbe8 	bl	8002fcc <HAL_GPIO_WritePin>
 80097fc:	e076      	b.n	80098ec <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, vlue); break;
 80097fe:	78fb      	ldrb	r3, [r7, #3]
 8009800:	461a      	mov	r2, r3
 8009802:	2102      	movs	r1, #2
 8009804:	482c      	ldr	r0, [pc, #176]	@ (80098b8 <digitalWrite+0x68c>)
 8009806:	f7f9 fbe1 	bl	8002fcc <HAL_GPIO_WritePin>
 800980a:	e06f      	b.n	80098ec <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, vlue); break;
 800980c:	78fb      	ldrb	r3, [r7, #3]
 800980e:	461a      	mov	r2, r3
 8009810:	2104      	movs	r1, #4
 8009812:	4829      	ldr	r0, [pc, #164]	@ (80098b8 <digitalWrite+0x68c>)
 8009814:	f7f9 fbda 	bl	8002fcc <HAL_GPIO_WritePin>
 8009818:	e068      	b.n	80098ec <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, vlue); break;
 800981a:	78fb      	ldrb	r3, [r7, #3]
 800981c:	461a      	mov	r2, r3
 800981e:	2108      	movs	r1, #8
 8009820:	4825      	ldr	r0, [pc, #148]	@ (80098b8 <digitalWrite+0x68c>)
 8009822:	f7f9 fbd3 	bl	8002fcc <HAL_GPIO_WritePin>
 8009826:	e061      	b.n	80098ec <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, vlue); break;
 8009828:	78fb      	ldrb	r3, [r7, #3]
 800982a:	461a      	mov	r2, r3
 800982c:	2110      	movs	r1, #16
 800982e:	4822      	ldr	r0, [pc, #136]	@ (80098b8 <digitalWrite+0x68c>)
 8009830:	f7f9 fbcc 	bl	8002fcc <HAL_GPIO_WritePin>
 8009834:	e05a      	b.n	80098ec <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, vlue); break;
 8009836:	78fb      	ldrb	r3, [r7, #3]
 8009838:	461a      	mov	r2, r3
 800983a:	2120      	movs	r1, #32
 800983c:	481e      	ldr	r0, [pc, #120]	@ (80098b8 <digitalWrite+0x68c>)
 800983e:	f7f9 fbc5 	bl	8002fcc <HAL_GPIO_WritePin>
 8009842:	e053      	b.n	80098ec <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, vlue); break;
 8009844:	78fb      	ldrb	r3, [r7, #3]
 8009846:	461a      	mov	r2, r3
 8009848:	2140      	movs	r1, #64	@ 0x40
 800984a:	481b      	ldr	r0, [pc, #108]	@ (80098b8 <digitalWrite+0x68c>)
 800984c:	f7f9 fbbe 	bl	8002fcc <HAL_GPIO_WritePin>
 8009850:	e04c      	b.n	80098ec <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, vlue); break;
 8009852:	78fb      	ldrb	r3, [r7, #3]
 8009854:	461a      	mov	r2, r3
 8009856:	2180      	movs	r1, #128	@ 0x80
 8009858:	4817      	ldr	r0, [pc, #92]	@ (80098b8 <digitalWrite+0x68c>)
 800985a:	f7f9 fbb7 	bl	8002fcc <HAL_GPIO_WritePin>
 800985e:	e045      	b.n	80098ec <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, vlue); break;
 8009860:	78fb      	ldrb	r3, [r7, #3]
 8009862:	461a      	mov	r2, r3
 8009864:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009868:	4813      	ldr	r0, [pc, #76]	@ (80098b8 <digitalWrite+0x68c>)
 800986a:	f7f9 fbaf 	bl	8002fcc <HAL_GPIO_WritePin>
 800986e:	e03d      	b.n	80098ec <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, vlue); break;
 8009870:	78fb      	ldrb	r3, [r7, #3]
 8009872:	461a      	mov	r2, r3
 8009874:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009878:	480f      	ldr	r0, [pc, #60]	@ (80098b8 <digitalWrite+0x68c>)
 800987a:	f7f9 fba7 	bl	8002fcc <HAL_GPIO_WritePin>
 800987e:	e035      	b.n	80098ec <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, vlue); break;
 8009880:	78fb      	ldrb	r3, [r7, #3]
 8009882:	461a      	mov	r2, r3
 8009884:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009888:	480b      	ldr	r0, [pc, #44]	@ (80098b8 <digitalWrite+0x68c>)
 800988a:	f7f9 fb9f 	bl	8002fcc <HAL_GPIO_WritePin>
 800988e:	e02d      	b.n	80098ec <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, vlue); break;
 8009890:	78fb      	ldrb	r3, [r7, #3]
 8009892:	461a      	mov	r2, r3
 8009894:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009898:	4807      	ldr	r0, [pc, #28]	@ (80098b8 <digitalWrite+0x68c>)
 800989a:	f7f9 fb97 	bl	8002fcc <HAL_GPIO_WritePin>
 800989e:	e025      	b.n	80098ec <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, vlue); break;
 80098a0:	78fb      	ldrb	r3, [r7, #3]
 80098a2:	461a      	mov	r2, r3
 80098a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80098a8:	4803      	ldr	r0, [pc, #12]	@ (80098b8 <digitalWrite+0x68c>)
 80098aa:	f7f9 fb8f 	bl	8002fcc <HAL_GPIO_WritePin>
 80098ae:	e01d      	b.n	80098ec <digitalWrite+0x6c0>
 80098b0:	40020800 	.word	0x40020800
 80098b4:	40020c00 	.word	0x40020c00
 80098b8:	40021000 	.word	0x40021000
	            case 13: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, vlue); break;
 80098bc:	78fb      	ldrb	r3, [r7, #3]
 80098be:	461a      	mov	r2, r3
 80098c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80098c4:	480b      	ldr	r0, [pc, #44]	@ (80098f4 <digitalWrite+0x6c8>)
 80098c6:	f7f9 fb81 	bl	8002fcc <HAL_GPIO_WritePin>
 80098ca:	e00f      	b.n	80098ec <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, vlue); break;
 80098cc:	78fb      	ldrb	r3, [r7, #3]
 80098ce:	461a      	mov	r2, r3
 80098d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80098d4:	4807      	ldr	r0, [pc, #28]	@ (80098f4 <digitalWrite+0x6c8>)
 80098d6:	f7f9 fb79 	bl	8002fcc <HAL_GPIO_WritePin>
 80098da:	e007      	b.n	80098ec <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, vlue); break;
 80098dc:	78fb      	ldrb	r3, [r7, #3]
 80098de:	461a      	mov	r2, r3
 80098e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80098e4:	4803      	ldr	r0, [pc, #12]	@ (80098f4 <digitalWrite+0x6c8>)
 80098e6:	f7f9 fb71 	bl	8002fcc <HAL_GPIO_WritePin>
 80098ea:	bf00      	nop
	        }
	    }
}
 80098ec:	bf00      	nop
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	40021000 	.word	0x40021000

080098f8 <Setup_Forward_Kinematic>:

float _Lx;
float _Ly;
float _Radius_wheel;

void Setup_Forward_Kinematic(float Lx ,float Ly ,float Radius_wheel){
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	ed87 0a03 	vstr	s0, [r7, #12]
 8009902:	edc7 0a02 	vstr	s1, [r7, #8]
 8009906:	ed87 1a01 	vstr	s2, [r7, #4]
	_Lx = Lx;
 800990a:	4a07      	ldr	r2, [pc, #28]	@ (8009928 <Setup_Forward_Kinematic+0x30>)
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	6013      	str	r3, [r2, #0]
	_Ly = Ly;
 8009910:	4a06      	ldr	r2, [pc, #24]	@ (800992c <Setup_Forward_Kinematic+0x34>)
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	6013      	str	r3, [r2, #0]
	_Radius_wheel = Radius_wheel;
 8009916:	4a06      	ldr	r2, [pc, #24]	@ (8009930 <Setup_Forward_Kinematic+0x38>)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6013      	str	r3, [r2, #0]
}
 800991c:	bf00      	nop
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	200007e4 	.word	0x200007e4
 800992c:	200007e8 	.word	0x200007e8
 8009930:	200007ec 	.word	0x200007ec

08009934 <Setup_frequency_Forward_Kinematic>:

float _Pos_X = 0.0f;
float _Pos_Y = 0.0f;
float _Pos_Z = 0.0f;

void Setup_frequency_Forward_Kinematic(uint8_t freq){
 8009934:	b480      	push	{r7}
 8009936:	b083      	sub	sp, #12
 8009938:	af00      	add	r7, sp, #0
 800993a:	4603      	mov	r3, r0
 800993c:	71fb      	strb	r3, [r7, #7]
	__freq = freq;
 800993e:	4a04      	ldr	r2, [pc, #16]	@ (8009950 <Setup_frequency_Forward_Kinematic+0x1c>)
 8009940:	79fb      	ldrb	r3, [r7, #7]
 8009942:	7013      	strb	r3, [r2, #0]
}
 8009944:	bf00      	nop
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr
 8009950:	2000001c 	.word	0x2000001c

08009954 <Setup_Inverse_Kinematic>:

float Lx_;
float Ly_;
float Radius_wheel_;

void Setup_Inverse_Kinematic(float Lx ,float Ly ,float Radius_wheel){
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	ed87 0a03 	vstr	s0, [r7, #12]
 800995e:	edc7 0a02 	vstr	s1, [r7, #8]
 8009962:	ed87 1a01 	vstr	s2, [r7, #4]
	Lx_ = Lx;
 8009966:	4a07      	ldr	r2, [pc, #28]	@ (8009984 <Setup_Inverse_Kinematic+0x30>)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6013      	str	r3, [r2, #0]
	Ly_ = Ly;
 800996c:	4a06      	ldr	r2, [pc, #24]	@ (8009988 <Setup_Inverse_Kinematic+0x34>)
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	6013      	str	r3, [r2, #0]
	Radius_wheel_ = Radius_wheel;
 8009972:	4a06      	ldr	r2, [pc, #24]	@ (800998c <Setup_Inverse_Kinematic+0x38>)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6013      	str	r3, [r2, #0]
}
 8009978:	bf00      	nop
 800997a:	3714      	adds	r7, #20
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr
 8009984:	200007f0 	.word	0x200007f0
 8009988:	200007f4 	.word	0x200007f4
 800998c:	200007f8 	.word	0x200007f8

08009990 <Inverse_Kinematic>:
float w_LF = 0.0f;
float w_LB = 0.0f;
float w_RF = 0.0f;
float w_RB = 0.0f;

void Inverse_Kinematic(float Vx ,float Vy ,float wz){
 8009990:	b480      	push	{r7}
 8009992:	b085      	sub	sp, #20
 8009994:	af00      	add	r7, sp, #0
 8009996:	ed87 0a03 	vstr	s0, [r7, #12]
 800999a:	edc7 0a02 	vstr	s1, [r7, #8]
 800999e:	ed87 1a01 	vstr	s2, [r7, #4]
	w_LF = (Vx - Vy - (Lx_ +Ly_)*wz)/Radius_wheel_;
 80099a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80099a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80099aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80099ae:	4b3a      	ldr	r3, [pc, #232]	@ (8009a98 <Inverse_Kinematic+0x108>)
 80099b0:	edd3 6a00 	vldr	s13, [r3]
 80099b4:	4b39      	ldr	r3, [pc, #228]	@ (8009a9c <Inverse_Kinematic+0x10c>)
 80099b6:	edd3 7a00 	vldr	s15, [r3]
 80099ba:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80099be:	edd7 7a01 	vldr	s15, [r7, #4]
 80099c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80099c6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80099ca:	4b35      	ldr	r3, [pc, #212]	@ (8009aa0 <Inverse_Kinematic+0x110>)
 80099cc:	ed93 7a00 	vldr	s14, [r3]
 80099d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099d4:	4b33      	ldr	r3, [pc, #204]	@ (8009aa4 <Inverse_Kinematic+0x114>)
 80099d6:	edc3 7a00 	vstr	s15, [r3]
	w_RF = -(Vx + Vy + (Lx_ +Ly_)*wz)/Radius_wheel_;
 80099da:	ed97 7a03 	vldr	s14, [r7, #12]
 80099de:	edd7 7a02 	vldr	s15, [r7, #8]
 80099e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80099e6:	4b2c      	ldr	r3, [pc, #176]	@ (8009a98 <Inverse_Kinematic+0x108>)
 80099e8:	edd3 6a00 	vldr	s13, [r3]
 80099ec:	4b2b      	ldr	r3, [pc, #172]	@ (8009a9c <Inverse_Kinematic+0x10c>)
 80099ee:	edd3 7a00 	vldr	s15, [r3]
 80099f2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80099f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80099fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80099fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a02:	eef1 6a67 	vneg.f32	s13, s15
 8009a06:	4b26      	ldr	r3, [pc, #152]	@ (8009aa0 <Inverse_Kinematic+0x110>)
 8009a08:	ed93 7a00 	vldr	s14, [r3]
 8009a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a10:	4b25      	ldr	r3, [pc, #148]	@ (8009aa8 <Inverse_Kinematic+0x118>)
 8009a12:	edc3 7a00 	vstr	s15, [r3]
	w_LB = (Vx + Vy - (Lx_ +Ly_)*wz)/Radius_wheel_;
 8009a16:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8009a1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a22:	4b1d      	ldr	r3, [pc, #116]	@ (8009a98 <Inverse_Kinematic+0x108>)
 8009a24:	edd3 6a00 	vldr	s13, [r3]
 8009a28:	4b1c      	ldr	r3, [pc, #112]	@ (8009a9c <Inverse_Kinematic+0x10c>)
 8009a2a:	edd3 7a00 	vldr	s15, [r3]
 8009a2e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009a32:	edd7 7a01 	vldr	s15, [r7, #4]
 8009a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a3a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009a3e:	4b18      	ldr	r3, [pc, #96]	@ (8009aa0 <Inverse_Kinematic+0x110>)
 8009a40:	ed93 7a00 	vldr	s14, [r3]
 8009a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a48:	4b18      	ldr	r3, [pc, #96]	@ (8009aac <Inverse_Kinematic+0x11c>)
 8009a4a:	edc3 7a00 	vstr	s15, [r3]
	w_RB = -(Vx - Vy + (Lx_ +Ly_)*wz)/Radius_wheel_;
 8009a4e:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a52:	edd7 7a02 	vldr	s15, [r7, #8]
 8009a56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8009a98 <Inverse_Kinematic+0x108>)
 8009a5c:	edd3 6a00 	vldr	s13, [r3]
 8009a60:	4b0e      	ldr	r3, [pc, #56]	@ (8009a9c <Inverse_Kinematic+0x10c>)
 8009a62:	edd3 7a00 	vldr	s15, [r3]
 8009a66:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009a6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8009a6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a76:	eef1 6a67 	vneg.f32	s13, s15
 8009a7a:	4b09      	ldr	r3, [pc, #36]	@ (8009aa0 <Inverse_Kinematic+0x110>)
 8009a7c:	ed93 7a00 	vldr	s14, [r3]
 8009a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a84:	4b0a      	ldr	r3, [pc, #40]	@ (8009ab0 <Inverse_Kinematic+0x120>)
 8009a86:	edc3 7a00 	vstr	s15, [r3]
}
 8009a8a:	bf00      	nop
 8009a8c:	3714      	adds	r7, #20
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	200007f0 	.word	0x200007f0
 8009a9c:	200007f4 	.word	0x200007f4
 8009aa0:	200007f8 	.word	0x200007f8
 8009aa4:	200007fc 	.word	0x200007fc
 8009aa8:	20000804 	.word	0x20000804
 8009aac:	20000800 	.word	0x20000800
 8009ab0:	20000808 	.word	0x20000808

08009ab4 <get_w_LF>:

float get_w_LF(){
 8009ab4:	b480      	push	{r7}
 8009ab6:	af00      	add	r7, sp, #0
	return w_LF;
 8009ab8:	4b04      	ldr	r3, [pc, #16]	@ (8009acc <get_w_LF+0x18>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	ee07 3a90 	vmov	s15, r3
}
 8009ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr
 8009acc:	200007fc 	.word	0x200007fc

08009ad0 <get_w_LB>:

float get_w_LB(){
 8009ad0:	b480      	push	{r7}
 8009ad2:	af00      	add	r7, sp, #0
	return w_LB;
 8009ad4:	4b04      	ldr	r3, [pc, #16]	@ (8009ae8 <get_w_LB+0x18>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	ee07 3a90 	vmov	s15, r3
}
 8009adc:	eeb0 0a67 	vmov.f32	s0, s15
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	20000800 	.word	0x20000800

08009aec <get_w_RF>:

float get_w_RF(){
 8009aec:	b480      	push	{r7}
 8009aee:	af00      	add	r7, sp, #0
	return w_RF;
 8009af0:	4b04      	ldr	r3, [pc, #16]	@ (8009b04 <get_w_RF+0x18>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	ee07 3a90 	vmov	s15, r3
}
 8009af8:	eeb0 0a67 	vmov.f32	s0, s15
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr
 8009b04:	20000804 	.word	0x20000804

08009b08 <get_w_RB>:

float get_w_RB(){
 8009b08:	b480      	push	{r7}
 8009b0a:	af00      	add	r7, sp, #0
	return w_RB;
 8009b0c:	4b04      	ldr	r3, [pc, #16]	@ (8009b20 <get_w_RB+0x18>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	ee07 3a90 	vmov	s15, r3
}
 8009b14:	eeb0 0a67 	vmov.f32	s0, s15
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	20000808 	.word	0x20000808

08009b24 <map>:

float map(float value, float fromLow, float fromHigh, float toLow, float toHigh) {
 8009b24:	b480      	push	{r7}
 8009b26:	b087      	sub	sp, #28
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	ed87 0a05 	vstr	s0, [r7, #20]
 8009b2e:	edc7 0a04 	vstr	s1, [r7, #16]
 8009b32:	ed87 1a03 	vstr	s2, [r7, #12]
 8009b36:	edc7 1a02 	vstr	s3, [r7, #8]
 8009b3a:	ed87 2a01 	vstr	s4, [r7, #4]
    return toLow + (toHigh - toLow) * ((value - fromLow) / (fromHigh - fromLow));
 8009b3e:	ed97 7a01 	vldr	s14, [r7, #4]
 8009b42:	edd7 7a02 	vldr	s15, [r7, #8]
 8009b46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b4a:	edd7 6a05 	vldr	s13, [r7, #20]
 8009b4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009b52:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8009b56:	edd7 6a03 	vldr	s13, [r7, #12]
 8009b5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8009b5e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009b62:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8009b66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009b6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8009b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8009b72:	eeb0 0a67 	vmov.f32	s0, s15
 8009b76:	371c      	adds	r7, #28
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	460b      	mov	r3, r1
 8009b8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009b8c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009b90:	f002 fc50 	bl	800c434 <USBD_static_malloc>
 8009b94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d109      	bne.n	8009bb0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	32b0      	adds	r2, #176	@ 0xb0
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009bac:	2302      	movs	r3, #2
 8009bae:	e0d4      	b.n	8009d5a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009bb0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f002 fc80 	bl	800c4bc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	32b0      	adds	r2, #176	@ 0xb0
 8009bc6:	68f9      	ldr	r1, [r7, #12]
 8009bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	32b0      	adds	r2, #176	@ 0xb0
 8009bd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	7c1b      	ldrb	r3, [r3, #16]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d138      	bne.n	8009c5a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009be8:	4b5e      	ldr	r3, [pc, #376]	@ (8009d64 <USBD_CDC_Init+0x1e4>)
 8009bea:	7819      	ldrb	r1, [r3, #0]
 8009bec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f002 fafb 	bl	800c1ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009bf8:	4b5a      	ldr	r3, [pc, #360]	@ (8009d64 <USBD_CDC_Init+0x1e4>)
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	f003 020f 	and.w	r2, r3, #15
 8009c00:	6879      	ldr	r1, [r7, #4]
 8009c02:	4613      	mov	r3, r2
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	4413      	add	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	440b      	add	r3, r1
 8009c0c:	3324      	adds	r3, #36	@ 0x24
 8009c0e:	2201      	movs	r2, #1
 8009c10:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c12:	4b55      	ldr	r3, [pc, #340]	@ (8009d68 <USBD_CDC_Init+0x1e8>)
 8009c14:	7819      	ldrb	r1, [r3, #0]
 8009c16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c1a:	2202      	movs	r2, #2
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f002 fae6 	bl	800c1ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c22:	4b51      	ldr	r3, [pc, #324]	@ (8009d68 <USBD_CDC_Init+0x1e8>)
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	f003 020f 	and.w	r2, r3, #15
 8009c2a:	6879      	ldr	r1, [r7, #4]
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4413      	add	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	440b      	add	r3, r1
 8009c36:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009c3e:	4b4b      	ldr	r3, [pc, #300]	@ (8009d6c <USBD_CDC_Init+0x1ec>)
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	f003 020f 	and.w	r2, r3, #15
 8009c46:	6879      	ldr	r1, [r7, #4]
 8009c48:	4613      	mov	r3, r2
 8009c4a:	009b      	lsls	r3, r3, #2
 8009c4c:	4413      	add	r3, r2
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	440b      	add	r3, r1
 8009c52:	3326      	adds	r3, #38	@ 0x26
 8009c54:	2210      	movs	r2, #16
 8009c56:	801a      	strh	r2, [r3, #0]
 8009c58:	e035      	b.n	8009cc6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c5a:	4b42      	ldr	r3, [pc, #264]	@ (8009d64 <USBD_CDC_Init+0x1e4>)
 8009c5c:	7819      	ldrb	r1, [r3, #0]
 8009c5e:	2340      	movs	r3, #64	@ 0x40
 8009c60:	2202      	movs	r2, #2
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f002 fac3 	bl	800c1ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c68:	4b3e      	ldr	r3, [pc, #248]	@ (8009d64 <USBD_CDC_Init+0x1e4>)
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	f003 020f 	and.w	r2, r3, #15
 8009c70:	6879      	ldr	r1, [r7, #4]
 8009c72:	4613      	mov	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	440b      	add	r3, r1
 8009c7c:	3324      	adds	r3, #36	@ 0x24
 8009c7e:	2201      	movs	r2, #1
 8009c80:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c82:	4b39      	ldr	r3, [pc, #228]	@ (8009d68 <USBD_CDC_Init+0x1e8>)
 8009c84:	7819      	ldrb	r1, [r3, #0]
 8009c86:	2340      	movs	r3, #64	@ 0x40
 8009c88:	2202      	movs	r2, #2
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f002 faaf 	bl	800c1ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c90:	4b35      	ldr	r3, [pc, #212]	@ (8009d68 <USBD_CDC_Init+0x1e8>)
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	f003 020f 	and.w	r2, r3, #15
 8009c98:	6879      	ldr	r1, [r7, #4]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	009b      	lsls	r3, r3, #2
 8009c9e:	4413      	add	r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	440b      	add	r3, r1
 8009ca4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009ca8:	2201      	movs	r2, #1
 8009caa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009cac:	4b2f      	ldr	r3, [pc, #188]	@ (8009d6c <USBD_CDC_Init+0x1ec>)
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	f003 020f 	and.w	r2, r3, #15
 8009cb4:	6879      	ldr	r1, [r7, #4]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	4413      	add	r3, r2
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	440b      	add	r3, r1
 8009cc0:	3326      	adds	r3, #38	@ 0x26
 8009cc2:	2210      	movs	r2, #16
 8009cc4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009cc6:	4b29      	ldr	r3, [pc, #164]	@ (8009d6c <USBD_CDC_Init+0x1ec>)
 8009cc8:	7819      	ldrb	r1, [r3, #0]
 8009cca:	2308      	movs	r3, #8
 8009ccc:	2203      	movs	r2, #3
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f002 fa8d 	bl	800c1ee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009cd4:	4b25      	ldr	r3, [pc, #148]	@ (8009d6c <USBD_CDC_Init+0x1ec>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	f003 020f 	and.w	r2, r3, #15
 8009cdc:	6879      	ldr	r1, [r7, #4]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	4413      	add	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	440b      	add	r3, r1
 8009ce8:	3324      	adds	r3, #36	@ 0x24
 8009cea:	2201      	movs	r2, #1
 8009cec:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	33b0      	adds	r3, #176	@ 0xb0
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	4413      	add	r3, r2
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d101      	bne.n	8009d28 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009d24:	2302      	movs	r3, #2
 8009d26:	e018      	b.n	8009d5a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	7c1b      	ldrb	r3, [r3, #16]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d10a      	bne.n	8009d46 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d30:	4b0d      	ldr	r3, [pc, #52]	@ (8009d68 <USBD_CDC_Init+0x1e8>)
 8009d32:	7819      	ldrb	r1, [r3, #0]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f002 fb44 	bl	800c3cc <USBD_LL_PrepareReceive>
 8009d44:	e008      	b.n	8009d58 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d46:	4b08      	ldr	r3, [pc, #32]	@ (8009d68 <USBD_CDC_Init+0x1e8>)
 8009d48:	7819      	ldrb	r1, [r3, #0]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d50:	2340      	movs	r3, #64	@ 0x40
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f002 fb3a 	bl	800c3cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	200000a7 	.word	0x200000a7
 8009d68:	200000a8 	.word	0x200000a8
 8009d6c:	200000a9 	.word	0x200000a9

08009d70 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009d7c:	4b3a      	ldr	r3, [pc, #232]	@ (8009e68 <USBD_CDC_DeInit+0xf8>)
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	4619      	mov	r1, r3
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f002 fa59 	bl	800c23a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009d88:	4b37      	ldr	r3, [pc, #220]	@ (8009e68 <USBD_CDC_DeInit+0xf8>)
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	f003 020f 	and.w	r2, r3, #15
 8009d90:	6879      	ldr	r1, [r7, #4]
 8009d92:	4613      	mov	r3, r2
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	4413      	add	r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	440b      	add	r3, r1
 8009d9c:	3324      	adds	r3, #36	@ 0x24
 8009d9e:	2200      	movs	r2, #0
 8009da0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009da2:	4b32      	ldr	r3, [pc, #200]	@ (8009e6c <USBD_CDC_DeInit+0xfc>)
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	4619      	mov	r1, r3
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f002 fa46 	bl	800c23a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009dae:	4b2f      	ldr	r3, [pc, #188]	@ (8009e6c <USBD_CDC_DeInit+0xfc>)
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	f003 020f 	and.w	r2, r3, #15
 8009db6:	6879      	ldr	r1, [r7, #4]
 8009db8:	4613      	mov	r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4413      	add	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	440b      	add	r3, r1
 8009dc2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009dca:	4b29      	ldr	r3, [pc, #164]	@ (8009e70 <USBD_CDC_DeInit+0x100>)
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	4619      	mov	r1, r3
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f002 fa32 	bl	800c23a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009dd6:	4b26      	ldr	r3, [pc, #152]	@ (8009e70 <USBD_CDC_DeInit+0x100>)
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	f003 020f 	and.w	r2, r3, #15
 8009dde:	6879      	ldr	r1, [r7, #4]
 8009de0:	4613      	mov	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4413      	add	r3, r2
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	440b      	add	r3, r1
 8009dea:	3324      	adds	r3, #36	@ 0x24
 8009dec:	2200      	movs	r2, #0
 8009dee:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009df0:	4b1f      	ldr	r3, [pc, #124]	@ (8009e70 <USBD_CDC_DeInit+0x100>)
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	f003 020f 	and.w	r2, r3, #15
 8009df8:	6879      	ldr	r1, [r7, #4]
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	4413      	add	r3, r2
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	440b      	add	r3, r1
 8009e04:	3326      	adds	r3, #38	@ 0x26
 8009e06:	2200      	movs	r2, #0
 8009e08:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	32b0      	adds	r2, #176	@ 0xb0
 8009e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d01f      	beq.n	8009e5c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	33b0      	adds	r3, #176	@ 0xb0
 8009e26:	009b      	lsls	r3, r3, #2
 8009e28:	4413      	add	r3, r2
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	32b0      	adds	r2, #176	@ 0xb0
 8009e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f002 fb06 	bl	800c450 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	32b0      	adds	r2, #176	@ 0xb0
 8009e4e:	2100      	movs	r1, #0
 8009e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3708      	adds	r7, #8
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop
 8009e68:	200000a7 	.word	0x200000a7
 8009e6c:	200000a8 	.word	0x200000a8
 8009e70:	200000a9 	.word	0x200000a9

08009e74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	32b0      	adds	r2, #176	@ 0xb0
 8009e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e8c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009e92:	2300      	movs	r3, #0
 8009e94:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e96:	2300      	movs	r3, #0
 8009e98:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d101      	bne.n	8009ea4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009ea0:	2303      	movs	r3, #3
 8009ea2:	e0bf      	b.n	800a024 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d050      	beq.n	8009f52 <USBD_CDC_Setup+0xde>
 8009eb0:	2b20      	cmp	r3, #32
 8009eb2:	f040 80af 	bne.w	800a014 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	88db      	ldrh	r3, [r3, #6]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d03a      	beq.n	8009f34 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	b25b      	sxtb	r3, r3
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	da1b      	bge.n	8009f00 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	33b0      	adds	r3, #176	@ 0xb0
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	4413      	add	r3, r2
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	683a      	ldr	r2, [r7, #0]
 8009edc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009ede:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ee0:	683a      	ldr	r2, [r7, #0]
 8009ee2:	88d2      	ldrh	r2, [r2, #6]
 8009ee4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	88db      	ldrh	r3, [r3, #6]
 8009eea:	2b07      	cmp	r3, #7
 8009eec:	bf28      	it	cs
 8009eee:	2307      	movcs	r3, #7
 8009ef0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	89fa      	ldrh	r2, [r7, #14]
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f001 fd53 	bl	800b9a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009efe:	e090      	b.n	800a022 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	785a      	ldrb	r2, [r3, #1]
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	88db      	ldrh	r3, [r3, #6]
 8009f0e:	2b3f      	cmp	r3, #63	@ 0x3f
 8009f10:	d803      	bhi.n	8009f1a <USBD_CDC_Setup+0xa6>
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	88db      	ldrh	r3, [r3, #6]
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	e000      	b.n	8009f1c <USBD_CDC_Setup+0xa8>
 8009f1a:	2240      	movs	r2, #64	@ 0x40
 8009f1c:	693b      	ldr	r3, [r7, #16]
 8009f1e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009f22:	6939      	ldr	r1, [r7, #16]
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f001 fd65 	bl	800b9fc <USBD_CtlPrepareRx>
      break;
 8009f32:	e076      	b.n	800a022 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	33b0      	adds	r3, #176	@ 0xb0
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	4413      	add	r3, r2
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	683a      	ldr	r2, [r7, #0]
 8009f48:	7850      	ldrb	r0, [r2, #1]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	6839      	ldr	r1, [r7, #0]
 8009f4e:	4798      	blx	r3
      break;
 8009f50:	e067      	b.n	800a022 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	785b      	ldrb	r3, [r3, #1]
 8009f56:	2b0b      	cmp	r3, #11
 8009f58:	d851      	bhi.n	8009ffe <USBD_CDC_Setup+0x18a>
 8009f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8009f60 <USBD_CDC_Setup+0xec>)
 8009f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f60:	08009f91 	.word	0x08009f91
 8009f64:	0800a00d 	.word	0x0800a00d
 8009f68:	08009fff 	.word	0x08009fff
 8009f6c:	08009fff 	.word	0x08009fff
 8009f70:	08009fff 	.word	0x08009fff
 8009f74:	08009fff 	.word	0x08009fff
 8009f78:	08009fff 	.word	0x08009fff
 8009f7c:	08009fff 	.word	0x08009fff
 8009f80:	08009fff 	.word	0x08009fff
 8009f84:	08009fff 	.word	0x08009fff
 8009f88:	08009fbb 	.word	0x08009fbb
 8009f8c:	08009fe5 	.word	0x08009fe5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	2b03      	cmp	r3, #3
 8009f9a:	d107      	bne.n	8009fac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009f9c:	f107 030a 	add.w	r3, r7, #10
 8009fa0:	2202      	movs	r2, #2
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f001 fcfd 	bl	800b9a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009faa:	e032      	b.n	800a012 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009fac:	6839      	ldr	r1, [r7, #0]
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f001 fc7b 	bl	800b8aa <USBD_CtlError>
            ret = USBD_FAIL;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	75fb      	strb	r3, [r7, #23]
          break;
 8009fb8:	e02b      	b.n	800a012 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	2b03      	cmp	r3, #3
 8009fc4:	d107      	bne.n	8009fd6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009fc6:	f107 030d 	add.w	r3, r7, #13
 8009fca:	2201      	movs	r2, #1
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f001 fce8 	bl	800b9a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009fd4:	e01d      	b.n	800a012 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009fd6:	6839      	ldr	r1, [r7, #0]
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f001 fc66 	bl	800b8aa <USBD_CtlError>
            ret = USBD_FAIL;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	75fb      	strb	r3, [r7, #23]
          break;
 8009fe2:	e016      	b.n	800a012 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	2b03      	cmp	r3, #3
 8009fee:	d00f      	beq.n	800a010 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009ff0:	6839      	ldr	r1, [r7, #0]
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f001 fc59 	bl	800b8aa <USBD_CtlError>
            ret = USBD_FAIL;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009ffc:	e008      	b.n	800a010 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009ffe:	6839      	ldr	r1, [r7, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f001 fc52 	bl	800b8aa <USBD_CtlError>
          ret = USBD_FAIL;
 800a006:	2303      	movs	r3, #3
 800a008:	75fb      	strb	r3, [r7, #23]
          break;
 800a00a:	e002      	b.n	800a012 <USBD_CDC_Setup+0x19e>
          break;
 800a00c:	bf00      	nop
 800a00e:	e008      	b.n	800a022 <USBD_CDC_Setup+0x1ae>
          break;
 800a010:	bf00      	nop
      }
      break;
 800a012:	e006      	b.n	800a022 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a014:	6839      	ldr	r1, [r7, #0]
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f001 fc47 	bl	800b8aa <USBD_CtlError>
      ret = USBD_FAIL;
 800a01c:	2303      	movs	r3, #3
 800a01e:	75fb      	strb	r3, [r7, #23]
      break;
 800a020:	bf00      	nop
  }

  return (uint8_t)ret;
 800a022:	7dfb      	ldrb	r3, [r7, #23]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3718      	adds	r7, #24
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
 800a034:	460b      	mov	r3, r1
 800a036:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a03e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	32b0      	adds	r2, #176	@ 0xb0
 800a04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d101      	bne.n	800a056 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a052:	2303      	movs	r3, #3
 800a054:	e065      	b.n	800a122 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	32b0      	adds	r2, #176	@ 0xb0
 800a060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a064:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a066:	78fb      	ldrb	r3, [r7, #3]
 800a068:	f003 020f 	and.w	r2, r3, #15
 800a06c:	6879      	ldr	r1, [r7, #4]
 800a06e:	4613      	mov	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	440b      	add	r3, r1
 800a078:	3318      	adds	r3, #24
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d02f      	beq.n	800a0e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a080:	78fb      	ldrb	r3, [r7, #3]
 800a082:	f003 020f 	and.w	r2, r3, #15
 800a086:	6879      	ldr	r1, [r7, #4]
 800a088:	4613      	mov	r3, r2
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4413      	add	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	440b      	add	r3, r1
 800a092:	3318      	adds	r3, #24
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	78fb      	ldrb	r3, [r7, #3]
 800a098:	f003 010f 	and.w	r1, r3, #15
 800a09c:	68f8      	ldr	r0, [r7, #12]
 800a09e:	460b      	mov	r3, r1
 800a0a0:	00db      	lsls	r3, r3, #3
 800a0a2:	440b      	add	r3, r1
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4403      	add	r3, r0
 800a0a8:	331c      	adds	r3, #28
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	fbb2 f1f3 	udiv	r1, r2, r3
 800a0b0:	fb01 f303 	mul.w	r3, r1, r3
 800a0b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d112      	bne.n	800a0e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a0ba:	78fb      	ldrb	r3, [r7, #3]
 800a0bc:	f003 020f 	and.w	r2, r3, #15
 800a0c0:	6879      	ldr	r1, [r7, #4]
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	440b      	add	r3, r1
 800a0cc:	3318      	adds	r3, #24
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a0d2:	78f9      	ldrb	r1, [r7, #3]
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f002 f956 	bl	800c38a <USBD_LL_Transmit>
 800a0de:	e01f      	b.n	800a120 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	33b0      	adds	r3, #176	@ 0xb0
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	4413      	add	r3, r2
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d010      	beq.n	800a120 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	33b0      	adds	r3, #176	@ 0xb0
 800a108:	009b      	lsls	r3, r3, #2
 800a10a:	4413      	add	r3, r2
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a11c:	78fa      	ldrb	r2, [r7, #3]
 800a11e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b084      	sub	sp, #16
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
 800a132:	460b      	mov	r3, r1
 800a134:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	32b0      	adds	r2, #176	@ 0xb0
 800a140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a144:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	32b0      	adds	r2, #176	@ 0xb0
 800a150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d101      	bne.n	800a15c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a158:	2303      	movs	r3, #3
 800a15a:	e01a      	b.n	800a192 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a15c:	78fb      	ldrb	r3, [r7, #3]
 800a15e:	4619      	mov	r1, r3
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f002 f954 	bl	800c40e <USBD_LL_GetRxDataSize>
 800a166:	4602      	mov	r2, r0
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	33b0      	adds	r3, #176	@ 0xb0
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	4413      	add	r3, r2
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a18c:	4611      	mov	r1, r2
 800a18e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b084      	sub	sp, #16
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	32b0      	adds	r2, #176	@ 0xb0
 800a1ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d101      	bne.n	800a1bc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	e024      	b.n	800a206 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	33b0      	adds	r3, #176	@ 0xb0
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	4413      	add	r3, r2
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d019      	beq.n	800a204 <USBD_CDC_EP0_RxReady+0x6a>
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a1d6:	2bff      	cmp	r3, #255	@ 0xff
 800a1d8:	d014      	beq.n	800a204 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	33b0      	adds	r3, #176	@ 0xb0
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4413      	add	r3, r2
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	68fa      	ldr	r2, [r7, #12]
 800a1ee:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a1f2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a1f4:	68fa      	ldr	r2, [r7, #12]
 800a1f6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a1fa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	22ff      	movs	r2, #255	@ 0xff
 800a200:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
	...

0800a210 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b086      	sub	sp, #24
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a218:	2182      	movs	r1, #130	@ 0x82
 800a21a:	4818      	ldr	r0, [pc, #96]	@ (800a27c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a21c:	f000 fd0f 	bl	800ac3e <USBD_GetEpDesc>
 800a220:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a222:	2101      	movs	r1, #1
 800a224:	4815      	ldr	r0, [pc, #84]	@ (800a27c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a226:	f000 fd0a 	bl	800ac3e <USBD_GetEpDesc>
 800a22a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a22c:	2181      	movs	r1, #129	@ 0x81
 800a22e:	4813      	ldr	r0, [pc, #76]	@ (800a27c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a230:	f000 fd05 	bl	800ac3e <USBD_GetEpDesc>
 800a234:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d002      	beq.n	800a242 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	2210      	movs	r2, #16
 800a240:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d006      	beq.n	800a256 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a250:	711a      	strb	r2, [r3, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d006      	beq.n	800a26a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2200      	movs	r2, #0
 800a260:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a264:	711a      	strb	r2, [r3, #4]
 800a266:	2200      	movs	r2, #0
 800a268:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2243      	movs	r2, #67	@ 0x43
 800a26e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a270:	4b02      	ldr	r3, [pc, #8]	@ (800a27c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a272:	4618      	mov	r0, r3
 800a274:	3718      	adds	r7, #24
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	20000064 	.word	0x20000064

0800a280 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b086      	sub	sp, #24
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a288:	2182      	movs	r1, #130	@ 0x82
 800a28a:	4818      	ldr	r0, [pc, #96]	@ (800a2ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a28c:	f000 fcd7 	bl	800ac3e <USBD_GetEpDesc>
 800a290:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a292:	2101      	movs	r1, #1
 800a294:	4815      	ldr	r0, [pc, #84]	@ (800a2ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a296:	f000 fcd2 	bl	800ac3e <USBD_GetEpDesc>
 800a29a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a29c:	2181      	movs	r1, #129	@ 0x81
 800a29e:	4813      	ldr	r0, [pc, #76]	@ (800a2ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2a0:	f000 fccd 	bl	800ac3e <USBD_GetEpDesc>
 800a2a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d002      	beq.n	800a2b2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	2210      	movs	r2, #16
 800a2b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d006      	beq.n	800a2c6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	711a      	strb	r2, [r3, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f042 0202 	orr.w	r2, r2, #2
 800a2c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d006      	beq.n	800a2da <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	711a      	strb	r2, [r3, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f042 0202 	orr.w	r2, r2, #2
 800a2d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2243      	movs	r2, #67	@ 0x43
 800a2de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a2e0:	4b02      	ldr	r3, [pc, #8]	@ (800a2ec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3718      	adds	r7, #24
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	20000064 	.word	0x20000064

0800a2f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b086      	sub	sp, #24
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a2f8:	2182      	movs	r1, #130	@ 0x82
 800a2fa:	4818      	ldr	r0, [pc, #96]	@ (800a35c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2fc:	f000 fc9f 	bl	800ac3e <USBD_GetEpDesc>
 800a300:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a302:	2101      	movs	r1, #1
 800a304:	4815      	ldr	r0, [pc, #84]	@ (800a35c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a306:	f000 fc9a 	bl	800ac3e <USBD_GetEpDesc>
 800a30a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a30c:	2181      	movs	r1, #129	@ 0x81
 800a30e:	4813      	ldr	r0, [pc, #76]	@ (800a35c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a310:	f000 fc95 	bl	800ac3e <USBD_GetEpDesc>
 800a314:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d002      	beq.n	800a322 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	2210      	movs	r2, #16
 800a320:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d006      	beq.n	800a336 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a330:	711a      	strb	r2, [r3, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d006      	beq.n	800a34a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2200      	movs	r2, #0
 800a340:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a344:	711a      	strb	r2, [r3, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2243      	movs	r2, #67	@ 0x43
 800a34e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a350:	4b02      	ldr	r3, [pc, #8]	@ (800a35c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a352:	4618      	mov	r0, r3
 800a354:	3718      	adds	r7, #24
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
 800a35a:	bf00      	nop
 800a35c:	20000064 	.word	0x20000064

0800a360 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	220a      	movs	r2, #10
 800a36c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a36e:	4b03      	ldr	r3, [pc, #12]	@ (800a37c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a370:	4618      	mov	r0, r3
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr
 800a37c:	20000020 	.word	0x20000020

0800a380 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d101      	bne.n	800a394 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a390:	2303      	movs	r3, #3
 800a392:	e009      	b.n	800a3a8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	33b0      	adds	r3, #176	@ 0xb0
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	4413      	add	r3, r2
 800a3a2:	683a      	ldr	r2, [r7, #0]
 800a3a4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a3a6:	2300      	movs	r3, #0
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b087      	sub	sp, #28
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	60f8      	str	r0, [r7, #12]
 800a3bc:	60b9      	str	r1, [r7, #8]
 800a3be:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	32b0      	adds	r2, #176	@ 0xb0
 800a3ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ce:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d101      	bne.n	800a3da <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	e008      	b.n	800a3ec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	68ba      	ldr	r2, [r7, #8]
 800a3de:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	371c      	adds	r7, #28
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b085      	sub	sp, #20
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	32b0      	adds	r2, #176	@ 0xb0
 800a40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a410:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d101      	bne.n	800a41c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a418:	2303      	movs	r3, #3
 800a41a:	e004      	b.n	800a426 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	683a      	ldr	r2, [r7, #0]
 800a420:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3714      	adds	r7, #20
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr
	...

0800a434 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	32b0      	adds	r2, #176	@ 0xb0
 800a446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a44a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	32b0      	adds	r2, #176	@ 0xb0
 800a456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d101      	bne.n	800a462 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a45e:	2303      	movs	r3, #3
 800a460:	e018      	b.n	800a494 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	7c1b      	ldrb	r3, [r3, #16]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d10a      	bne.n	800a480 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a46a:	4b0c      	ldr	r3, [pc, #48]	@ (800a49c <USBD_CDC_ReceivePacket+0x68>)
 800a46c:	7819      	ldrb	r1, [r3, #0]
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a474:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f001 ffa7 	bl	800c3cc <USBD_LL_PrepareReceive>
 800a47e:	e008      	b.n	800a492 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a480:	4b06      	ldr	r3, [pc, #24]	@ (800a49c <USBD_CDC_ReceivePacket+0x68>)
 800a482:	7819      	ldrb	r1, [r3, #0]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a48a:	2340      	movs	r3, #64	@ 0x40
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f001 ff9d 	bl	800c3cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	3710      	adds	r7, #16
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}
 800a49c:	200000a8 	.word	0x200000a8

0800a4a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b086      	sub	sp, #24
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	4613      	mov	r3, r2
 800a4ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d101      	bne.n	800a4b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a4b4:	2303      	movs	r3, #3
 800a4b6:	e01f      	b.n	800a4f8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d003      	beq.n	800a4de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	68ba      	ldr	r2, [r7, #8]
 800a4da:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	79fa      	ldrb	r2, [r7, #7]
 800a4ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a4ec:	68f8      	ldr	r0, [r7, #12]
 800a4ee:	f001 fe17 	bl	800c120 <USBD_LL_Init>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a4f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3718      	adds	r7, #24
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a50a:	2300      	movs	r3, #0
 800a50c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d101      	bne.n	800a518 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a514:	2303      	movs	r3, #3
 800a516:	e025      	b.n	800a564 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	32ae      	adds	r2, #174	@ 0xae
 800a52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a52e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00f      	beq.n	800a554 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	32ae      	adds	r2, #174	@ 0xae
 800a53e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a544:	f107 020e 	add.w	r2, r7, #14
 800a548:	4610      	mov	r0, r2
 800a54a:	4798      	blx	r3
 800a54c:	4602      	mov	r2, r0
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a55a:	1c5a      	adds	r2, r3, #1
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3710      	adds	r7, #16
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f001 fe1f 	bl	800c1b8 <USBD_LL_Start>
 800a57a:	4603      	mov	r3, r0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a58c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a58e:	4618      	mov	r0, r3
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr

0800a59a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b084      	sub	sp, #16
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d009      	beq.n	800a5c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	78fa      	ldrb	r2, [r7, #3]
 800a5be:	4611      	mov	r1, r2
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	4798      	blx	r3
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b084      	sub	sp, #16
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	460b      	mov	r3, r1
 800a5dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	78fa      	ldrb	r2, [r7, #3]
 800a5ec:	4611      	mov	r1, r2
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	4798      	blx	r3
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d001      	beq.n	800a5fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3710      	adds	r7, #16
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b084      	sub	sp, #16
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a616:	6839      	ldr	r1, [r7, #0]
 800a618:	4618      	mov	r0, r3
 800a61a:	f001 f90c 	bl	800b836 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2201      	movs	r2, #1
 800a622:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a62c:	461a      	mov	r2, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a63a:	f003 031f 	and.w	r3, r3, #31
 800a63e:	2b02      	cmp	r3, #2
 800a640:	d01a      	beq.n	800a678 <USBD_LL_SetupStage+0x72>
 800a642:	2b02      	cmp	r3, #2
 800a644:	d822      	bhi.n	800a68c <USBD_LL_SetupStage+0x86>
 800a646:	2b00      	cmp	r3, #0
 800a648:	d002      	beq.n	800a650 <USBD_LL_SetupStage+0x4a>
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d00a      	beq.n	800a664 <USBD_LL_SetupStage+0x5e>
 800a64e:	e01d      	b.n	800a68c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a656:	4619      	mov	r1, r3
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 fb63 	bl	800ad24 <USBD_StdDevReq>
 800a65e:	4603      	mov	r3, r0
 800a660:	73fb      	strb	r3, [r7, #15]
      break;
 800a662:	e020      	b.n	800a6a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a66a:	4619      	mov	r1, r3
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 fbcb 	bl	800ae08 <USBD_StdItfReq>
 800a672:	4603      	mov	r3, r0
 800a674:	73fb      	strb	r3, [r7, #15]
      break;
 800a676:	e016      	b.n	800a6a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 fc2d 	bl	800aee0 <USBD_StdEPReq>
 800a686:	4603      	mov	r3, r0
 800a688:	73fb      	strb	r3, [r7, #15]
      break;
 800a68a:	e00c      	b.n	800a6a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a692:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a696:	b2db      	uxtb	r3, r3
 800a698:	4619      	mov	r1, r3
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f001 fdec 	bl	800c278 <USBD_LL_StallEP>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a6a4:	bf00      	nop
  }

  return ret;
 800a6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b086      	sub	sp, #24
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	607a      	str	r2, [r7, #4]
 800a6bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a6c2:	7afb      	ldrb	r3, [r7, #11]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d16e      	bne.n	800a7a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a6ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	f040 8098 	bne.w	800a80c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	689a      	ldr	r2, [r3, #8]
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d913      	bls.n	800a710 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	689a      	ldr	r2, [r3, #8]
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	68db      	ldr	r3, [r3, #12]
 800a6f0:	1ad2      	subs	r2, r2, r3
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	68da      	ldr	r2, [r3, #12]
 800a6fa:	693b      	ldr	r3, [r7, #16]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	4293      	cmp	r3, r2
 800a700:	bf28      	it	cs
 800a702:	4613      	movcs	r3, r2
 800a704:	461a      	mov	r2, r3
 800a706:	6879      	ldr	r1, [r7, #4]
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f001 f994 	bl	800ba36 <USBD_CtlContinueRx>
 800a70e:	e07d      	b.n	800a80c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a716:	f003 031f 	and.w	r3, r3, #31
 800a71a:	2b02      	cmp	r3, #2
 800a71c:	d014      	beq.n	800a748 <USBD_LL_DataOutStage+0x98>
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d81d      	bhi.n	800a75e <USBD_LL_DataOutStage+0xae>
 800a722:	2b00      	cmp	r3, #0
 800a724:	d002      	beq.n	800a72c <USBD_LL_DataOutStage+0x7c>
 800a726:	2b01      	cmp	r3, #1
 800a728:	d003      	beq.n	800a732 <USBD_LL_DataOutStage+0x82>
 800a72a:	e018      	b.n	800a75e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a72c:	2300      	movs	r3, #0
 800a72e:	75bb      	strb	r3, [r7, #22]
            break;
 800a730:	e018      	b.n	800a764 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	4619      	mov	r1, r3
 800a73c:	68f8      	ldr	r0, [r7, #12]
 800a73e:	f000 fa64 	bl	800ac0a <USBD_CoreFindIF>
 800a742:	4603      	mov	r3, r0
 800a744:	75bb      	strb	r3, [r7, #22]
            break;
 800a746:	e00d      	b.n	800a764 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	4619      	mov	r1, r3
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f000 fa66 	bl	800ac24 <USBD_CoreFindEP>
 800a758:	4603      	mov	r3, r0
 800a75a:	75bb      	strb	r3, [r7, #22]
            break;
 800a75c:	e002      	b.n	800a764 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a75e:	2300      	movs	r3, #0
 800a760:	75bb      	strb	r3, [r7, #22]
            break;
 800a762:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a764:	7dbb      	ldrb	r3, [r7, #22]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d119      	bne.n	800a79e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a770:	b2db      	uxtb	r3, r3
 800a772:	2b03      	cmp	r3, #3
 800a774:	d113      	bne.n	800a79e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a776:	7dba      	ldrb	r2, [r7, #22]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	32ae      	adds	r2, #174	@ 0xae
 800a77c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d00b      	beq.n	800a79e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a786:	7dba      	ldrb	r2, [r7, #22]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a78e:	7dba      	ldrb	r2, [r7, #22]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	32ae      	adds	r2, #174	@ 0xae
 800a794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a798:	691b      	ldr	r3, [r3, #16]
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f001 f95a 	bl	800ba58 <USBD_CtlSendStatus>
 800a7a4:	e032      	b.n	800a80c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a7a6:	7afb      	ldrb	r3, [r7, #11]
 800a7a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f000 fa37 	bl	800ac24 <USBD_CoreFindEP>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7ba:	7dbb      	ldrb	r3, [r7, #22]
 800a7bc:	2bff      	cmp	r3, #255	@ 0xff
 800a7be:	d025      	beq.n	800a80c <USBD_LL_DataOutStage+0x15c>
 800a7c0:	7dbb      	ldrb	r3, [r7, #22]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d122      	bne.n	800a80c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	2b03      	cmp	r3, #3
 800a7d0:	d117      	bne.n	800a802 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a7d2:	7dba      	ldrb	r2, [r7, #22]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	32ae      	adds	r2, #174	@ 0xae
 800a7d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7dc:	699b      	ldr	r3, [r3, #24]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d00f      	beq.n	800a802 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a7e2:	7dba      	ldrb	r2, [r7, #22]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a7ea:	7dba      	ldrb	r2, [r7, #22]
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	32ae      	adds	r2, #174	@ 0xae
 800a7f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	7afa      	ldrb	r2, [r7, #11]
 800a7f8:	4611      	mov	r1, r2
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	4798      	blx	r3
 800a7fe:	4603      	mov	r3, r0
 800a800:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a802:	7dfb      	ldrb	r3, [r7, #23]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d001      	beq.n	800a80c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a808:	7dfb      	ldrb	r3, [r7, #23]
 800a80a:	e000      	b.n	800a80e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3718      	adds	r7, #24
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b086      	sub	sp, #24
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	60f8      	str	r0, [r7, #12]
 800a81e:	460b      	mov	r3, r1
 800a820:	607a      	str	r2, [r7, #4]
 800a822:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a824:	7afb      	ldrb	r3, [r7, #11]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d16f      	bne.n	800a90a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	3314      	adds	r3, #20
 800a82e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a836:	2b02      	cmp	r3, #2
 800a838:	d15a      	bne.n	800a8f0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	689a      	ldr	r2, [r3, #8]
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	429a      	cmp	r2, r3
 800a844:	d914      	bls.n	800a870 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	689a      	ldr	r2, [r3, #8]
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	1ad2      	subs	r2, r2, r3
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	461a      	mov	r2, r3
 800a85a:	6879      	ldr	r1, [r7, #4]
 800a85c:	68f8      	ldr	r0, [r7, #12]
 800a85e:	f001 f8bc 	bl	800b9da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a862:	2300      	movs	r3, #0
 800a864:	2200      	movs	r2, #0
 800a866:	2100      	movs	r1, #0
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f001 fdaf 	bl	800c3cc <USBD_LL_PrepareReceive>
 800a86e:	e03f      	b.n	800a8f0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	68da      	ldr	r2, [r3, #12]
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d11c      	bne.n	800a8b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	685a      	ldr	r2, [r3, #4]
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a884:	429a      	cmp	r2, r3
 800a886:	d316      	bcc.n	800a8b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	685a      	ldr	r2, [r3, #4]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a892:	429a      	cmp	r2, r3
 800a894:	d20f      	bcs.n	800a8b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a896:	2200      	movs	r2, #0
 800a898:	2100      	movs	r1, #0
 800a89a:	68f8      	ldr	r0, [r7, #12]
 800a89c:	f001 f89d 	bl	800b9da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	68f8      	ldr	r0, [r7, #12]
 800a8b0:	f001 fd8c 	bl	800c3cc <USBD_LL_PrepareReceive>
 800a8b4:	e01c      	b.n	800a8f0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	2b03      	cmp	r3, #3
 800a8c0:	d10f      	bne.n	800a8e2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d009      	beq.n	800a8e2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8dc:	68db      	ldr	r3, [r3, #12]
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8e2:	2180      	movs	r1, #128	@ 0x80
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f001 fcc7 	bl	800c278 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f001 f8c7 	bl	800ba7e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d03a      	beq.n	800a970 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a8fa:	68f8      	ldr	r0, [r7, #12]
 800a8fc:	f7ff fe42 	bl	800a584 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a908:	e032      	b.n	800a970 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a90a:	7afb      	ldrb	r3, [r7, #11]
 800a90c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a910:	b2db      	uxtb	r3, r3
 800a912:	4619      	mov	r1, r3
 800a914:	68f8      	ldr	r0, [r7, #12]
 800a916:	f000 f985 	bl	800ac24 <USBD_CoreFindEP>
 800a91a:	4603      	mov	r3, r0
 800a91c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a91e:	7dfb      	ldrb	r3, [r7, #23]
 800a920:	2bff      	cmp	r3, #255	@ 0xff
 800a922:	d025      	beq.n	800a970 <USBD_LL_DataInStage+0x15a>
 800a924:	7dfb      	ldrb	r3, [r7, #23]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d122      	bne.n	800a970 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a930:	b2db      	uxtb	r3, r3
 800a932:	2b03      	cmp	r3, #3
 800a934:	d11c      	bne.n	800a970 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a936:	7dfa      	ldrb	r2, [r7, #23]
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	32ae      	adds	r2, #174	@ 0xae
 800a93c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a940:	695b      	ldr	r3, [r3, #20]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d014      	beq.n	800a970 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a946:	7dfa      	ldrb	r2, [r7, #23]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a94e:	7dfa      	ldrb	r2, [r7, #23]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	32ae      	adds	r2, #174	@ 0xae
 800a954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a958:	695b      	ldr	r3, [r3, #20]
 800a95a:	7afa      	ldrb	r2, [r7, #11]
 800a95c:	4611      	mov	r1, r2
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	4798      	blx	r3
 800a962:	4603      	mov	r3, r0
 800a964:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a966:	7dbb      	ldrb	r3, [r7, #22]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d001      	beq.n	800a970 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a96c:	7dbb      	ldrb	r3, [r7, #22]
 800a96e:	e000      	b.n	800a972 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3718      	adds	r7, #24
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b084      	sub	sp, #16
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a982:	2300      	movs	r3, #0
 800a984:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2201      	movs	r2, #1
 800a98a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d014      	beq.n	800a9e0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d00e      	beq.n	800a9e0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	6852      	ldr	r2, [r2, #4]
 800a9ce:	b2d2      	uxtb	r2, r2
 800a9d0:	4611      	mov	r1, r2
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	4798      	blx	r3
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d001      	beq.n	800a9e0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a9dc:	2303      	movs	r3, #3
 800a9de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9e0:	2340      	movs	r3, #64	@ 0x40
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f001 fc01 	bl	800c1ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2240      	movs	r2, #64	@ 0x40
 800a9f8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9fc:	2340      	movs	r3, #64	@ 0x40
 800a9fe:	2200      	movs	r2, #0
 800aa00:	2180      	movs	r1, #128	@ 0x80
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f001 fbf3 	bl	800c1ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2240      	movs	r2, #64	@ 0x40
 800aa12:	621a      	str	r2, [r3, #32]

  return ret;
 800aa14:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aa1e:	b480      	push	{r7}
 800aa20:	b083      	sub	sp, #12
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	460b      	mov	r3, r1
 800aa28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	78fa      	ldrb	r2, [r7, #3]
 800aa2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	370c      	adds	r7, #12
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aa3e:	b480      	push	{r7}
 800aa40:	b083      	sub	sp, #12
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	2b04      	cmp	r3, #4
 800aa50:	d006      	beq.n	800aa60 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa58:	b2da      	uxtb	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2204      	movs	r2, #4
 800aa64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800aa68:	2300      	movs	r3, #0
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr

0800aa76 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa76:	b480      	push	{r7}
 800aa78:	b083      	sub	sp, #12
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	2b04      	cmp	r3, #4
 800aa88:	d106      	bne.n	800aa98 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800aa90:	b2da      	uxtb	r2, r3
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800aa98:	2300      	movs	r3, #0
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	370c      	adds	r7, #12
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr

0800aaa6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b082      	sub	sp, #8
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aab4:	b2db      	uxtb	r3, r3
 800aab6:	2b03      	cmp	r3, #3
 800aab8:	d110      	bne.n	800aadc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00b      	beq.n	800aadc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaca:	69db      	ldr	r3, [r3, #28]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d005      	beq.n	800aadc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aad6:	69db      	ldr	r3, [r3, #28]
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3708      	adds	r7, #8
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aae6:	b580      	push	{r7, lr}
 800aae8:	b082      	sub	sp, #8
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
 800aaee:	460b      	mov	r3, r1
 800aaf0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	32ae      	adds	r2, #174	@ 0xae
 800aafc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d101      	bne.n	800ab08 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab04:	2303      	movs	r3, #3
 800ab06:	e01c      	b.n	800ab42 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	2b03      	cmp	r3, #3
 800ab12:	d115      	bne.n	800ab40 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	32ae      	adds	r2, #174	@ 0xae
 800ab1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab22:	6a1b      	ldr	r3, [r3, #32]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d00b      	beq.n	800ab40 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	32ae      	adds	r2, #174	@ 0xae
 800ab32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab36:	6a1b      	ldr	r3, [r3, #32]
 800ab38:	78fa      	ldrb	r2, [r7, #3]
 800ab3a:	4611      	mov	r1, r2
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab40:	2300      	movs	r3, #0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3708      	adds	r7, #8
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b082      	sub	sp, #8
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
 800ab52:	460b      	mov	r3, r1
 800ab54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	32ae      	adds	r2, #174	@ 0xae
 800ab60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	e01c      	b.n	800aba6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	2b03      	cmp	r3, #3
 800ab76:	d115      	bne.n	800aba4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	32ae      	adds	r2, #174	@ 0xae
 800ab82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00b      	beq.n	800aba4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	32ae      	adds	r2, #174	@ 0xae
 800ab96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab9c:	78fa      	ldrb	r2, [r7, #3]
 800ab9e:	4611      	mov	r1, r2
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3708      	adds	r7, #8
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}

0800abae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800abae:	b480      	push	{r7}
 800abb0:	b083      	sub	sp, #12
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800abb6:	2300      	movs	r3, #0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	370c      	adds	r7, #12
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800abcc:	2300      	movs	r3, #0
 800abce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2201      	movs	r2, #1
 800abd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d00e      	beq.n	800ac00 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	6852      	ldr	r2, [r2, #4]
 800abee:	b2d2      	uxtb	r2, r2
 800abf0:	4611      	mov	r1, r2
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	4798      	blx	r3
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800abfc:	2303      	movs	r3, #3
 800abfe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac0a:	b480      	push	{r7}
 800ac0c:	b083      	sub	sp, #12
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
 800ac12:	460b      	mov	r3, r1
 800ac14:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac16:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	370c      	adds	r7, #12
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac30:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	370c      	adds	r7, #12
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr

0800ac3e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b086      	sub	sp, #24
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
 800ac46:	460b      	mov	r3, r1
 800ac48:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ac52:	2300      	movs	r3, #0
 800ac54:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	885b      	ldrh	r3, [r3, #2]
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	68fa      	ldr	r2, [r7, #12]
 800ac5e:	7812      	ldrb	r2, [r2, #0]
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d91f      	bls.n	800aca4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ac6a:	e013      	b.n	800ac94 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ac6c:	f107 030a 	add.w	r3, r7, #10
 800ac70:	4619      	mov	r1, r3
 800ac72:	6978      	ldr	r0, [r7, #20]
 800ac74:	f000 f81b 	bl	800acae <USBD_GetNextDesc>
 800ac78:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ac7a:	697b      	ldr	r3, [r7, #20]
 800ac7c:	785b      	ldrb	r3, [r3, #1]
 800ac7e:	2b05      	cmp	r3, #5
 800ac80:	d108      	bne.n	800ac94 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	789b      	ldrb	r3, [r3, #2]
 800ac8a:	78fa      	ldrb	r2, [r7, #3]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d008      	beq.n	800aca2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ac90:	2300      	movs	r3, #0
 800ac92:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	885b      	ldrh	r3, [r3, #2]
 800ac98:	b29a      	uxth	r2, r3
 800ac9a:	897b      	ldrh	r3, [r7, #10]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d8e5      	bhi.n	800ac6c <USBD_GetEpDesc+0x2e>
 800aca0:	e000      	b.n	800aca4 <USBD_GetEpDesc+0x66>
          break;
 800aca2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aca4:	693b      	ldr	r3, [r7, #16]
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3718      	adds	r7, #24
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800acae:	b480      	push	{r7}
 800acb0:	b085      	sub	sp, #20
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
 800acb6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	881b      	ldrh	r3, [r3, #0]
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	7812      	ldrb	r2, [r2, #0]
 800acc4:	4413      	add	r3, r2
 800acc6:	b29a      	uxth	r2, r3
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	461a      	mov	r2, r3
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4413      	add	r3, r2
 800acd6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800acd8:	68fb      	ldr	r3, [r7, #12]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3714      	adds	r7, #20
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr

0800ace6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ace6:	b480      	push	{r7}
 800ace8:	b087      	sub	sp, #28
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	3301      	adds	r3, #1
 800acfc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad04:	8a3b      	ldrh	r3, [r7, #16]
 800ad06:	021b      	lsls	r3, r3, #8
 800ad08:	b21a      	sxth	r2, r3
 800ad0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	b21b      	sxth	r3, r3
 800ad12:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ad14:	89fb      	ldrh	r3, [r7, #14]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	371c      	adds	r7, #28
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr
	...

0800ad24 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad3a:	2b40      	cmp	r3, #64	@ 0x40
 800ad3c:	d005      	beq.n	800ad4a <USBD_StdDevReq+0x26>
 800ad3e:	2b40      	cmp	r3, #64	@ 0x40
 800ad40:	d857      	bhi.n	800adf2 <USBD_StdDevReq+0xce>
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00f      	beq.n	800ad66 <USBD_StdDevReq+0x42>
 800ad46:	2b20      	cmp	r3, #32
 800ad48:	d153      	bne.n	800adf2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	32ae      	adds	r2, #174	@ 0xae
 800ad54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	6839      	ldr	r1, [r7, #0]
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	4798      	blx	r3
 800ad60:	4603      	mov	r3, r0
 800ad62:	73fb      	strb	r3, [r7, #15]
      break;
 800ad64:	e04a      	b.n	800adfc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	785b      	ldrb	r3, [r3, #1]
 800ad6a:	2b09      	cmp	r3, #9
 800ad6c:	d83b      	bhi.n	800ade6 <USBD_StdDevReq+0xc2>
 800ad6e:	a201      	add	r2, pc, #4	@ (adr r2, 800ad74 <USBD_StdDevReq+0x50>)
 800ad70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad74:	0800adc9 	.word	0x0800adc9
 800ad78:	0800addd 	.word	0x0800addd
 800ad7c:	0800ade7 	.word	0x0800ade7
 800ad80:	0800add3 	.word	0x0800add3
 800ad84:	0800ade7 	.word	0x0800ade7
 800ad88:	0800ada7 	.word	0x0800ada7
 800ad8c:	0800ad9d 	.word	0x0800ad9d
 800ad90:	0800ade7 	.word	0x0800ade7
 800ad94:	0800adbf 	.word	0x0800adbf
 800ad98:	0800adb1 	.word	0x0800adb1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad9c:	6839      	ldr	r1, [r7, #0]
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fa3c 	bl	800b21c <USBD_GetDescriptor>
          break;
 800ada4:	e024      	b.n	800adf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ada6:	6839      	ldr	r1, [r7, #0]
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 fba1 	bl	800b4f0 <USBD_SetAddress>
          break;
 800adae:	e01f      	b.n	800adf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800adb0:	6839      	ldr	r1, [r7, #0]
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fbe0 	bl	800b578 <USBD_SetConfig>
 800adb8:	4603      	mov	r3, r0
 800adba:	73fb      	strb	r3, [r7, #15]
          break;
 800adbc:	e018      	b.n	800adf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800adbe:	6839      	ldr	r1, [r7, #0]
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f000 fc83 	bl	800b6cc <USBD_GetConfig>
          break;
 800adc6:	e013      	b.n	800adf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800adc8:	6839      	ldr	r1, [r7, #0]
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 fcb4 	bl	800b738 <USBD_GetStatus>
          break;
 800add0:	e00e      	b.n	800adf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 fce3 	bl	800b7a0 <USBD_SetFeature>
          break;
 800adda:	e009      	b.n	800adf0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800addc:	6839      	ldr	r1, [r7, #0]
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 fd07 	bl	800b7f2 <USBD_ClrFeature>
          break;
 800ade4:	e004      	b.n	800adf0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ade6:	6839      	ldr	r1, [r7, #0]
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 fd5e 	bl	800b8aa <USBD_CtlError>
          break;
 800adee:	bf00      	nop
      }
      break;
 800adf0:	e004      	b.n	800adfc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800adf2:	6839      	ldr	r1, [r7, #0]
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 fd58 	bl	800b8aa <USBD_CtlError>
      break;
 800adfa:	bf00      	nop
  }

  return ret;
 800adfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop

0800ae08 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae12:	2300      	movs	r3, #0
 800ae14:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae1e:	2b40      	cmp	r3, #64	@ 0x40
 800ae20:	d005      	beq.n	800ae2e <USBD_StdItfReq+0x26>
 800ae22:	2b40      	cmp	r3, #64	@ 0x40
 800ae24:	d852      	bhi.n	800aecc <USBD_StdItfReq+0xc4>
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d001      	beq.n	800ae2e <USBD_StdItfReq+0x26>
 800ae2a:	2b20      	cmp	r3, #32
 800ae2c:	d14e      	bne.n	800aecc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	3b01      	subs	r3, #1
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	d840      	bhi.n	800aebe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	889b      	ldrh	r3, [r3, #4]
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d836      	bhi.n	800aeb4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	889b      	ldrh	r3, [r3, #4]
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f7ff fedb 	bl	800ac0a <USBD_CoreFindIF>
 800ae54:	4603      	mov	r3, r0
 800ae56:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae58:	7bbb      	ldrb	r3, [r7, #14]
 800ae5a:	2bff      	cmp	r3, #255	@ 0xff
 800ae5c:	d01d      	beq.n	800ae9a <USBD_StdItfReq+0x92>
 800ae5e:	7bbb      	ldrb	r3, [r7, #14]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d11a      	bne.n	800ae9a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ae64:	7bba      	ldrb	r2, [r7, #14]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	32ae      	adds	r2, #174	@ 0xae
 800ae6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00f      	beq.n	800ae94 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ae74:	7bba      	ldrb	r2, [r7, #14]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae7c:	7bba      	ldrb	r2, [r7, #14]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	32ae      	adds	r2, #174	@ 0xae
 800ae82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	6839      	ldr	r1, [r7, #0]
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	4798      	blx	r3
 800ae8e:	4603      	mov	r3, r0
 800ae90:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae92:	e004      	b.n	800ae9e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ae94:	2303      	movs	r3, #3
 800ae96:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae98:	e001      	b.n	800ae9e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	88db      	ldrh	r3, [r3, #6]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d110      	bne.n	800aec8 <USBD_StdItfReq+0xc0>
 800aea6:	7bfb      	ldrb	r3, [r7, #15]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10d      	bne.n	800aec8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 fdd3 	bl	800ba58 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aeb2:	e009      	b.n	800aec8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800aeb4:	6839      	ldr	r1, [r7, #0]
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 fcf7 	bl	800b8aa <USBD_CtlError>
          break;
 800aebc:	e004      	b.n	800aec8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800aebe:	6839      	ldr	r1, [r7, #0]
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fcf2 	bl	800b8aa <USBD_CtlError>
          break;
 800aec6:	e000      	b.n	800aeca <USBD_StdItfReq+0xc2>
          break;
 800aec8:	bf00      	nop
      }
      break;
 800aeca:	e004      	b.n	800aed6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aecc:	6839      	ldr	r1, [r7, #0]
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 fceb 	bl	800b8aa <USBD_CtlError>
      break;
 800aed4:	bf00      	nop
  }

  return ret;
 800aed6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3710      	adds	r7, #16
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b084      	sub	sp, #16
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aeea:	2300      	movs	r3, #0
 800aeec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	889b      	ldrh	r3, [r3, #4]
 800aef2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aefc:	2b40      	cmp	r3, #64	@ 0x40
 800aefe:	d007      	beq.n	800af10 <USBD_StdEPReq+0x30>
 800af00:	2b40      	cmp	r3, #64	@ 0x40
 800af02:	f200 817f 	bhi.w	800b204 <USBD_StdEPReq+0x324>
 800af06:	2b00      	cmp	r3, #0
 800af08:	d02a      	beq.n	800af60 <USBD_StdEPReq+0x80>
 800af0a:	2b20      	cmp	r3, #32
 800af0c:	f040 817a 	bne.w	800b204 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800af10:	7bbb      	ldrb	r3, [r7, #14]
 800af12:	4619      	mov	r1, r3
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f7ff fe85 	bl	800ac24 <USBD_CoreFindEP>
 800af1a:	4603      	mov	r3, r0
 800af1c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af1e:	7b7b      	ldrb	r3, [r7, #13]
 800af20:	2bff      	cmp	r3, #255	@ 0xff
 800af22:	f000 8174 	beq.w	800b20e <USBD_StdEPReq+0x32e>
 800af26:	7b7b      	ldrb	r3, [r7, #13]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f040 8170 	bne.w	800b20e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800af2e:	7b7a      	ldrb	r2, [r7, #13]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800af36:	7b7a      	ldrb	r2, [r7, #13]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	32ae      	adds	r2, #174	@ 0xae
 800af3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af40:	689b      	ldr	r3, [r3, #8]
 800af42:	2b00      	cmp	r3, #0
 800af44:	f000 8163 	beq.w	800b20e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800af48:	7b7a      	ldrb	r2, [r7, #13]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	32ae      	adds	r2, #174	@ 0xae
 800af4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	6839      	ldr	r1, [r7, #0]
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	4798      	blx	r3
 800af5a:	4603      	mov	r3, r0
 800af5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800af5e:	e156      	b.n	800b20e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	785b      	ldrb	r3, [r3, #1]
 800af64:	2b03      	cmp	r3, #3
 800af66:	d008      	beq.n	800af7a <USBD_StdEPReq+0x9a>
 800af68:	2b03      	cmp	r3, #3
 800af6a:	f300 8145 	bgt.w	800b1f8 <USBD_StdEPReq+0x318>
 800af6e:	2b00      	cmp	r3, #0
 800af70:	f000 809b 	beq.w	800b0aa <USBD_StdEPReq+0x1ca>
 800af74:	2b01      	cmp	r3, #1
 800af76:	d03c      	beq.n	800aff2 <USBD_StdEPReq+0x112>
 800af78:	e13e      	b.n	800b1f8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af80:	b2db      	uxtb	r3, r3
 800af82:	2b02      	cmp	r3, #2
 800af84:	d002      	beq.n	800af8c <USBD_StdEPReq+0xac>
 800af86:	2b03      	cmp	r3, #3
 800af88:	d016      	beq.n	800afb8 <USBD_StdEPReq+0xd8>
 800af8a:	e02c      	b.n	800afe6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af8c:	7bbb      	ldrb	r3, [r7, #14]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00d      	beq.n	800afae <USBD_StdEPReq+0xce>
 800af92:	7bbb      	ldrb	r3, [r7, #14]
 800af94:	2b80      	cmp	r3, #128	@ 0x80
 800af96:	d00a      	beq.n	800afae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af98:	7bbb      	ldrb	r3, [r7, #14]
 800af9a:	4619      	mov	r1, r3
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f001 f96b 	bl	800c278 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800afa2:	2180      	movs	r1, #128	@ 0x80
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f001 f967 	bl	800c278 <USBD_LL_StallEP>
 800afaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800afac:	e020      	b.n	800aff0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800afae:	6839      	ldr	r1, [r7, #0]
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 fc7a 	bl	800b8aa <USBD_CtlError>
              break;
 800afb6:	e01b      	b.n	800aff0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	885b      	ldrh	r3, [r3, #2]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d10e      	bne.n	800afde <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800afc0:	7bbb      	ldrb	r3, [r7, #14]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d00b      	beq.n	800afde <USBD_StdEPReq+0xfe>
 800afc6:	7bbb      	ldrb	r3, [r7, #14]
 800afc8:	2b80      	cmp	r3, #128	@ 0x80
 800afca:	d008      	beq.n	800afde <USBD_StdEPReq+0xfe>
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	88db      	ldrh	r3, [r3, #6]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d104      	bne.n	800afde <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800afd4:	7bbb      	ldrb	r3, [r7, #14]
 800afd6:	4619      	mov	r1, r3
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f001 f94d 	bl	800c278 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 fd3a 	bl	800ba58 <USBD_CtlSendStatus>

              break;
 800afe4:	e004      	b.n	800aff0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800afe6:	6839      	ldr	r1, [r7, #0]
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 fc5e 	bl	800b8aa <USBD_CtlError>
              break;
 800afee:	bf00      	nop
          }
          break;
 800aff0:	e107      	b.n	800b202 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	2b02      	cmp	r3, #2
 800affc:	d002      	beq.n	800b004 <USBD_StdEPReq+0x124>
 800affe:	2b03      	cmp	r3, #3
 800b000:	d016      	beq.n	800b030 <USBD_StdEPReq+0x150>
 800b002:	e04b      	b.n	800b09c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b004:	7bbb      	ldrb	r3, [r7, #14]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d00d      	beq.n	800b026 <USBD_StdEPReq+0x146>
 800b00a:	7bbb      	ldrb	r3, [r7, #14]
 800b00c:	2b80      	cmp	r3, #128	@ 0x80
 800b00e:	d00a      	beq.n	800b026 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b010:	7bbb      	ldrb	r3, [r7, #14]
 800b012:	4619      	mov	r1, r3
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f001 f92f 	bl	800c278 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b01a:	2180      	movs	r1, #128	@ 0x80
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f001 f92b 	bl	800c278 <USBD_LL_StallEP>
 800b022:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b024:	e040      	b.n	800b0a8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b026:	6839      	ldr	r1, [r7, #0]
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 fc3e 	bl	800b8aa <USBD_CtlError>
              break;
 800b02e:	e03b      	b.n	800b0a8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	885b      	ldrh	r3, [r3, #2]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d136      	bne.n	800b0a6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b038:	7bbb      	ldrb	r3, [r7, #14]
 800b03a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d004      	beq.n	800b04c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b042:	7bbb      	ldrb	r3, [r7, #14]
 800b044:	4619      	mov	r1, r3
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f001 f935 	bl	800c2b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 fd03 	bl	800ba58 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b052:	7bbb      	ldrb	r3, [r7, #14]
 800b054:	4619      	mov	r1, r3
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f7ff fde4 	bl	800ac24 <USBD_CoreFindEP>
 800b05c:	4603      	mov	r3, r0
 800b05e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b060:	7b7b      	ldrb	r3, [r7, #13]
 800b062:	2bff      	cmp	r3, #255	@ 0xff
 800b064:	d01f      	beq.n	800b0a6 <USBD_StdEPReq+0x1c6>
 800b066:	7b7b      	ldrb	r3, [r7, #13]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d11c      	bne.n	800b0a6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b06c:	7b7a      	ldrb	r2, [r7, #13]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b074:	7b7a      	ldrb	r2, [r7, #13]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	32ae      	adds	r2, #174	@ 0xae
 800b07a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d010      	beq.n	800b0a6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b084:	7b7a      	ldrb	r2, [r7, #13]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	32ae      	adds	r2, #174	@ 0xae
 800b08a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	6839      	ldr	r1, [r7, #0]
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	4798      	blx	r3
 800b096:	4603      	mov	r3, r0
 800b098:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b09a:	e004      	b.n	800b0a6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b09c:	6839      	ldr	r1, [r7, #0]
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 fc03 	bl	800b8aa <USBD_CtlError>
              break;
 800b0a4:	e000      	b.n	800b0a8 <USBD_StdEPReq+0x1c8>
              break;
 800b0a6:	bf00      	nop
          }
          break;
 800b0a8:	e0ab      	b.n	800b202 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0b0:	b2db      	uxtb	r3, r3
 800b0b2:	2b02      	cmp	r3, #2
 800b0b4:	d002      	beq.n	800b0bc <USBD_StdEPReq+0x1dc>
 800b0b6:	2b03      	cmp	r3, #3
 800b0b8:	d032      	beq.n	800b120 <USBD_StdEPReq+0x240>
 800b0ba:	e097      	b.n	800b1ec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0bc:	7bbb      	ldrb	r3, [r7, #14]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d007      	beq.n	800b0d2 <USBD_StdEPReq+0x1f2>
 800b0c2:	7bbb      	ldrb	r3, [r7, #14]
 800b0c4:	2b80      	cmp	r3, #128	@ 0x80
 800b0c6:	d004      	beq.n	800b0d2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b0c8:	6839      	ldr	r1, [r7, #0]
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 fbed 	bl	800b8aa <USBD_CtlError>
                break;
 800b0d0:	e091      	b.n	800b1f6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	da0b      	bge.n	800b0f2 <USBD_StdEPReq+0x212>
 800b0da:	7bbb      	ldrb	r3, [r7, #14]
 800b0dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	009b      	lsls	r3, r3, #2
 800b0e4:	4413      	add	r3, r2
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	3310      	adds	r3, #16
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	3304      	adds	r3, #4
 800b0f0:	e00b      	b.n	800b10a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0f2:	7bbb      	ldrb	r3, [r7, #14]
 800b0f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	4413      	add	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	4413      	add	r3, r2
 800b108:	3304      	adds	r3, #4
 800b10a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	2200      	movs	r2, #0
 800b110:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	2202      	movs	r2, #2
 800b116:	4619      	mov	r1, r3
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 fc43 	bl	800b9a4 <USBD_CtlSendData>
              break;
 800b11e:	e06a      	b.n	800b1f6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b120:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b124:	2b00      	cmp	r3, #0
 800b126:	da11      	bge.n	800b14c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b128:	7bbb      	ldrb	r3, [r7, #14]
 800b12a:	f003 020f 	and.w	r2, r3, #15
 800b12e:	6879      	ldr	r1, [r7, #4]
 800b130:	4613      	mov	r3, r2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	4413      	add	r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	440b      	add	r3, r1
 800b13a:	3324      	adds	r3, #36	@ 0x24
 800b13c:	881b      	ldrh	r3, [r3, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d117      	bne.n	800b172 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b142:	6839      	ldr	r1, [r7, #0]
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 fbb0 	bl	800b8aa <USBD_CtlError>
                  break;
 800b14a:	e054      	b.n	800b1f6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b14c:	7bbb      	ldrb	r3, [r7, #14]
 800b14e:	f003 020f 	and.w	r2, r3, #15
 800b152:	6879      	ldr	r1, [r7, #4]
 800b154:	4613      	mov	r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	4413      	add	r3, r2
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	440b      	add	r3, r1
 800b15e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b162:	881b      	ldrh	r3, [r3, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d104      	bne.n	800b172 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b168:	6839      	ldr	r1, [r7, #0]
 800b16a:	6878      	ldr	r0, [r7, #4]
 800b16c:	f000 fb9d 	bl	800b8aa <USBD_CtlError>
                  break;
 800b170:	e041      	b.n	800b1f6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b172:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b176:	2b00      	cmp	r3, #0
 800b178:	da0b      	bge.n	800b192 <USBD_StdEPReq+0x2b2>
 800b17a:	7bbb      	ldrb	r3, [r7, #14]
 800b17c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b180:	4613      	mov	r3, r2
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	4413      	add	r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	3310      	adds	r3, #16
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	4413      	add	r3, r2
 800b18e:	3304      	adds	r3, #4
 800b190:	e00b      	b.n	800b1aa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b192:	7bbb      	ldrb	r3, [r7, #14]
 800b194:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b198:	4613      	mov	r3, r2
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4413      	add	r3, r2
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	3304      	adds	r3, #4
 800b1aa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b1ac:	7bbb      	ldrb	r3, [r7, #14]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d002      	beq.n	800b1b8 <USBD_StdEPReq+0x2d8>
 800b1b2:	7bbb      	ldrb	r3, [r7, #14]
 800b1b4:	2b80      	cmp	r3, #128	@ 0x80
 800b1b6:	d103      	bne.n	800b1c0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	601a      	str	r2, [r3, #0]
 800b1be:	e00e      	b.n	800b1de <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b1c0:	7bbb      	ldrb	r3, [r7, #14]
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f001 f895 	bl	800c2f4 <USBD_LL_IsStallEP>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d003      	beq.n	800b1d8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	601a      	str	r2, [r3, #0]
 800b1d6:	e002      	b.n	800b1de <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	2202      	movs	r2, #2
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 fbdd 	bl	800b9a4 <USBD_CtlSendData>
              break;
 800b1ea:	e004      	b.n	800b1f6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b1ec:	6839      	ldr	r1, [r7, #0]
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 fb5b 	bl	800b8aa <USBD_CtlError>
              break;
 800b1f4:	bf00      	nop
          }
          break;
 800b1f6:	e004      	b.n	800b202 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b1f8:	6839      	ldr	r1, [r7, #0]
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 fb55 	bl	800b8aa <USBD_CtlError>
          break;
 800b200:	bf00      	nop
      }
      break;
 800b202:	e005      	b.n	800b210 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b204:	6839      	ldr	r1, [r7, #0]
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 fb4f 	bl	800b8aa <USBD_CtlError>
      break;
 800b20c:	e000      	b.n	800b210 <USBD_StdEPReq+0x330>
      break;
 800b20e:	bf00      	nop
  }

  return ret;
 800b210:	7bfb      	ldrb	r3, [r7, #15]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3710      	adds	r7, #16
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
	...

0800b21c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b226:	2300      	movs	r3, #0
 800b228:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b22a:	2300      	movs	r3, #0
 800b22c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b22e:	2300      	movs	r3, #0
 800b230:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	885b      	ldrh	r3, [r3, #2]
 800b236:	0a1b      	lsrs	r3, r3, #8
 800b238:	b29b      	uxth	r3, r3
 800b23a:	3b01      	subs	r3, #1
 800b23c:	2b06      	cmp	r3, #6
 800b23e:	f200 8128 	bhi.w	800b492 <USBD_GetDescriptor+0x276>
 800b242:	a201      	add	r2, pc, #4	@ (adr r2, 800b248 <USBD_GetDescriptor+0x2c>)
 800b244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b248:	0800b265 	.word	0x0800b265
 800b24c:	0800b27d 	.word	0x0800b27d
 800b250:	0800b2bd 	.word	0x0800b2bd
 800b254:	0800b493 	.word	0x0800b493
 800b258:	0800b493 	.word	0x0800b493
 800b25c:	0800b433 	.word	0x0800b433
 800b260:	0800b45f 	.word	0x0800b45f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	7c12      	ldrb	r2, [r2, #16]
 800b270:	f107 0108 	add.w	r1, r7, #8
 800b274:	4610      	mov	r0, r2
 800b276:	4798      	blx	r3
 800b278:	60f8      	str	r0, [r7, #12]
      break;
 800b27a:	e112      	b.n	800b4a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	7c1b      	ldrb	r3, [r3, #16]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d10d      	bne.n	800b2a0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b28a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b28c:	f107 0208 	add.w	r2, r7, #8
 800b290:	4610      	mov	r0, r2
 800b292:	4798      	blx	r3
 800b294:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	3301      	adds	r3, #1
 800b29a:	2202      	movs	r2, #2
 800b29c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b29e:	e100      	b.n	800b4a2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2a8:	f107 0208 	add.w	r2, r7, #8
 800b2ac:	4610      	mov	r0, r2
 800b2ae:	4798      	blx	r3
 800b2b0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	2202      	movs	r2, #2
 800b2b8:	701a      	strb	r2, [r3, #0]
      break;
 800b2ba:	e0f2      	b.n	800b4a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	885b      	ldrh	r3, [r3, #2]
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	2b05      	cmp	r3, #5
 800b2c4:	f200 80ac 	bhi.w	800b420 <USBD_GetDescriptor+0x204>
 800b2c8:	a201      	add	r2, pc, #4	@ (adr r2, 800b2d0 <USBD_GetDescriptor+0xb4>)
 800b2ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ce:	bf00      	nop
 800b2d0:	0800b2e9 	.word	0x0800b2e9
 800b2d4:	0800b31d 	.word	0x0800b31d
 800b2d8:	0800b351 	.word	0x0800b351
 800b2dc:	0800b385 	.word	0x0800b385
 800b2e0:	0800b3b9 	.word	0x0800b3b9
 800b2e4:	0800b3ed 	.word	0x0800b3ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d00b      	beq.n	800b30c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	687a      	ldr	r2, [r7, #4]
 800b2fe:	7c12      	ldrb	r2, [r2, #16]
 800b300:	f107 0108 	add.w	r1, r7, #8
 800b304:	4610      	mov	r0, r2
 800b306:	4798      	blx	r3
 800b308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b30a:	e091      	b.n	800b430 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b30c:	6839      	ldr	r1, [r7, #0]
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 facb 	bl	800b8aa <USBD_CtlError>
            err++;
 800b314:	7afb      	ldrb	r3, [r7, #11]
 800b316:	3301      	adds	r3, #1
 800b318:	72fb      	strb	r3, [r7, #11]
          break;
 800b31a:	e089      	b.n	800b430 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d00b      	beq.n	800b340 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	7c12      	ldrb	r2, [r2, #16]
 800b334:	f107 0108 	add.w	r1, r7, #8
 800b338:	4610      	mov	r0, r2
 800b33a:	4798      	blx	r3
 800b33c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b33e:	e077      	b.n	800b430 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b340:	6839      	ldr	r1, [r7, #0]
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f000 fab1 	bl	800b8aa <USBD_CtlError>
            err++;
 800b348:	7afb      	ldrb	r3, [r7, #11]
 800b34a:	3301      	adds	r3, #1
 800b34c:	72fb      	strb	r3, [r7, #11]
          break;
 800b34e:	e06f      	b.n	800b430 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d00b      	beq.n	800b374 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	7c12      	ldrb	r2, [r2, #16]
 800b368:	f107 0108 	add.w	r1, r7, #8
 800b36c:	4610      	mov	r0, r2
 800b36e:	4798      	blx	r3
 800b370:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b372:	e05d      	b.n	800b430 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b374:	6839      	ldr	r1, [r7, #0]
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 fa97 	bl	800b8aa <USBD_CtlError>
            err++;
 800b37c:	7afb      	ldrb	r3, [r7, #11]
 800b37e:	3301      	adds	r3, #1
 800b380:	72fb      	strb	r3, [r7, #11]
          break;
 800b382:	e055      	b.n	800b430 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b38a:	691b      	ldr	r3, [r3, #16]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00b      	beq.n	800b3a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b396:	691b      	ldr	r3, [r3, #16]
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	7c12      	ldrb	r2, [r2, #16]
 800b39c:	f107 0108 	add.w	r1, r7, #8
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	4798      	blx	r3
 800b3a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3a6:	e043      	b.n	800b430 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3a8:	6839      	ldr	r1, [r7, #0]
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 fa7d 	bl	800b8aa <USBD_CtlError>
            err++;
 800b3b0:	7afb      	ldrb	r3, [r7, #11]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	72fb      	strb	r3, [r7, #11]
          break;
 800b3b6:	e03b      	b.n	800b430 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3be:	695b      	ldr	r3, [r3, #20]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00b      	beq.n	800b3dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3ca:	695b      	ldr	r3, [r3, #20]
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	7c12      	ldrb	r2, [r2, #16]
 800b3d0:	f107 0108 	add.w	r1, r7, #8
 800b3d4:	4610      	mov	r0, r2
 800b3d6:	4798      	blx	r3
 800b3d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3da:	e029      	b.n	800b430 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3dc:	6839      	ldr	r1, [r7, #0]
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 fa63 	bl	800b8aa <USBD_CtlError>
            err++;
 800b3e4:	7afb      	ldrb	r3, [r7, #11]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	72fb      	strb	r3, [r7, #11]
          break;
 800b3ea:	e021      	b.n	800b430 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3f2:	699b      	ldr	r3, [r3, #24]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d00b      	beq.n	800b410 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3fe:	699b      	ldr	r3, [r3, #24]
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	7c12      	ldrb	r2, [r2, #16]
 800b404:	f107 0108 	add.w	r1, r7, #8
 800b408:	4610      	mov	r0, r2
 800b40a:	4798      	blx	r3
 800b40c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b40e:	e00f      	b.n	800b430 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b410:	6839      	ldr	r1, [r7, #0]
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 fa49 	bl	800b8aa <USBD_CtlError>
            err++;
 800b418:	7afb      	ldrb	r3, [r7, #11]
 800b41a:	3301      	adds	r3, #1
 800b41c:	72fb      	strb	r3, [r7, #11]
          break;
 800b41e:	e007      	b.n	800b430 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b420:	6839      	ldr	r1, [r7, #0]
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 fa41 	bl	800b8aa <USBD_CtlError>
          err++;
 800b428:	7afb      	ldrb	r3, [r7, #11]
 800b42a:	3301      	adds	r3, #1
 800b42c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b42e:	bf00      	nop
      }
      break;
 800b430:	e037      	b.n	800b4a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	7c1b      	ldrb	r3, [r3, #16]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d109      	bne.n	800b44e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b440:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b442:	f107 0208 	add.w	r2, r7, #8
 800b446:	4610      	mov	r0, r2
 800b448:	4798      	blx	r3
 800b44a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b44c:	e029      	b.n	800b4a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b44e:	6839      	ldr	r1, [r7, #0]
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f000 fa2a 	bl	800b8aa <USBD_CtlError>
        err++;
 800b456:	7afb      	ldrb	r3, [r7, #11]
 800b458:	3301      	adds	r3, #1
 800b45a:	72fb      	strb	r3, [r7, #11]
      break;
 800b45c:	e021      	b.n	800b4a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	7c1b      	ldrb	r3, [r3, #16]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d10d      	bne.n	800b482 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b46c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b46e:	f107 0208 	add.w	r2, r7, #8
 800b472:	4610      	mov	r0, r2
 800b474:	4798      	blx	r3
 800b476:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	3301      	adds	r3, #1
 800b47c:	2207      	movs	r2, #7
 800b47e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b480:	e00f      	b.n	800b4a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b482:	6839      	ldr	r1, [r7, #0]
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f000 fa10 	bl	800b8aa <USBD_CtlError>
        err++;
 800b48a:	7afb      	ldrb	r3, [r7, #11]
 800b48c:	3301      	adds	r3, #1
 800b48e:	72fb      	strb	r3, [r7, #11]
      break;
 800b490:	e007      	b.n	800b4a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b492:	6839      	ldr	r1, [r7, #0]
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 fa08 	bl	800b8aa <USBD_CtlError>
      err++;
 800b49a:	7afb      	ldrb	r3, [r7, #11]
 800b49c:	3301      	adds	r3, #1
 800b49e:	72fb      	strb	r3, [r7, #11]
      break;
 800b4a0:	bf00      	nop
  }

  if (err != 0U)
 800b4a2:	7afb      	ldrb	r3, [r7, #11]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d11e      	bne.n	800b4e6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	88db      	ldrh	r3, [r3, #6]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d016      	beq.n	800b4de <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b4b0:	893b      	ldrh	r3, [r7, #8]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d00e      	beq.n	800b4d4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	88da      	ldrh	r2, [r3, #6]
 800b4ba:	893b      	ldrh	r3, [r7, #8]
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	bf28      	it	cs
 800b4c0:	4613      	movcs	r3, r2
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b4c6:	893b      	ldrh	r3, [r7, #8]
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	68f9      	ldr	r1, [r7, #12]
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 fa69 	bl	800b9a4 <USBD_CtlSendData>
 800b4d2:	e009      	b.n	800b4e8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b4d4:	6839      	ldr	r1, [r7, #0]
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 f9e7 	bl	800b8aa <USBD_CtlError>
 800b4dc:	e004      	b.n	800b4e8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 faba 	bl	800ba58 <USBD_CtlSendStatus>
 800b4e4:	e000      	b.n	800b4e8 <USBD_GetDescriptor+0x2cc>
    return;
 800b4e6:	bf00      	nop
  }
}
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop

0800b4f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	889b      	ldrh	r3, [r3, #4]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d131      	bne.n	800b566 <USBD_SetAddress+0x76>
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	88db      	ldrh	r3, [r3, #6]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d12d      	bne.n	800b566 <USBD_SetAddress+0x76>
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	885b      	ldrh	r3, [r3, #2]
 800b50e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b510:	d829      	bhi.n	800b566 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	885b      	ldrh	r3, [r3, #2]
 800b516:	b2db      	uxtb	r3, r3
 800b518:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b51c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b524:	b2db      	uxtb	r3, r3
 800b526:	2b03      	cmp	r3, #3
 800b528:	d104      	bne.n	800b534 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b52a:	6839      	ldr	r1, [r7, #0]
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 f9bc 	bl	800b8aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b532:	e01d      	b.n	800b570 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	7bfa      	ldrb	r2, [r7, #15]
 800b538:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b53c:	7bfb      	ldrb	r3, [r7, #15]
 800b53e:	4619      	mov	r1, r3
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 ff03 	bl	800c34c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 fa86 	bl	800ba58 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b54c:	7bfb      	ldrb	r3, [r7, #15]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d004      	beq.n	800b55c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2202      	movs	r2, #2
 800b556:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b55a:	e009      	b.n	800b570 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2201      	movs	r2, #1
 800b560:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b564:	e004      	b.n	800b570 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b566:	6839      	ldr	r1, [r7, #0]
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 f99e 	bl	800b8aa <USBD_CtlError>
  }
}
 800b56e:	bf00      	nop
 800b570:	bf00      	nop
 800b572:	3710      	adds	r7, #16
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b582:	2300      	movs	r3, #0
 800b584:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	885b      	ldrh	r3, [r3, #2]
 800b58a:	b2da      	uxtb	r2, r3
 800b58c:	4b4e      	ldr	r3, [pc, #312]	@ (800b6c8 <USBD_SetConfig+0x150>)
 800b58e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b590:	4b4d      	ldr	r3, [pc, #308]	@ (800b6c8 <USBD_SetConfig+0x150>)
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	2b01      	cmp	r3, #1
 800b596:	d905      	bls.n	800b5a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b598:	6839      	ldr	r1, [r7, #0]
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 f985 	bl	800b8aa <USBD_CtlError>
    return USBD_FAIL;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	e08c      	b.n	800b6be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	2b02      	cmp	r3, #2
 800b5ae:	d002      	beq.n	800b5b6 <USBD_SetConfig+0x3e>
 800b5b0:	2b03      	cmp	r3, #3
 800b5b2:	d029      	beq.n	800b608 <USBD_SetConfig+0x90>
 800b5b4:	e075      	b.n	800b6a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b5b6:	4b44      	ldr	r3, [pc, #272]	@ (800b6c8 <USBD_SetConfig+0x150>)
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d020      	beq.n	800b600 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b5be:	4b42      	ldr	r3, [pc, #264]	@ (800b6c8 <USBD_SetConfig+0x150>)
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5c8:	4b3f      	ldr	r3, [pc, #252]	@ (800b6c8 <USBD_SetConfig+0x150>)
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f7fe ffe3 	bl	800a59a <USBD_SetClassConfig>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b5d8:	7bfb      	ldrb	r3, [r7, #15]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d008      	beq.n	800b5f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b5de:	6839      	ldr	r1, [r7, #0]
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 f962 	bl	800b8aa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2202      	movs	r2, #2
 800b5ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5ee:	e065      	b.n	800b6bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 fa31 	bl	800ba58 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2203      	movs	r2, #3
 800b5fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b5fe:	e05d      	b.n	800b6bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f000 fa29 	bl	800ba58 <USBD_CtlSendStatus>
      break;
 800b606:	e059      	b.n	800b6bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b608:	4b2f      	ldr	r3, [pc, #188]	@ (800b6c8 <USBD_SetConfig+0x150>)
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d112      	bne.n	800b636 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2202      	movs	r2, #2
 800b614:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b618:	4b2b      	ldr	r3, [pc, #172]	@ (800b6c8 <USBD_SetConfig+0x150>)
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	461a      	mov	r2, r3
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b622:	4b29      	ldr	r3, [pc, #164]	@ (800b6c8 <USBD_SetConfig+0x150>)
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	4619      	mov	r1, r3
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f7fe ffd2 	bl	800a5d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f000 fa12 	bl	800ba58 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b634:	e042      	b.n	800b6bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b636:	4b24      	ldr	r3, [pc, #144]	@ (800b6c8 <USBD_SetConfig+0x150>)
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	461a      	mov	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	429a      	cmp	r2, r3
 800b642:	d02a      	beq.n	800b69a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	4619      	mov	r1, r3
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f7fe ffc0 	bl	800a5d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b652:	4b1d      	ldr	r3, [pc, #116]	@ (800b6c8 <USBD_SetConfig+0x150>)
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	461a      	mov	r2, r3
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b65c:	4b1a      	ldr	r3, [pc, #104]	@ (800b6c8 <USBD_SetConfig+0x150>)
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	4619      	mov	r1, r3
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f7fe ff99 	bl	800a59a <USBD_SetClassConfig>
 800b668:	4603      	mov	r3, r0
 800b66a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b66c:	7bfb      	ldrb	r3, [r7, #15]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00f      	beq.n	800b692 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b672:	6839      	ldr	r1, [r7, #0]
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 f918 	bl	800b8aa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	b2db      	uxtb	r3, r3
 800b680:	4619      	mov	r1, r3
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f7fe ffa5 	bl	800a5d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2202      	movs	r2, #2
 800b68c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b690:	e014      	b.n	800b6bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 f9e0 	bl	800ba58 <USBD_CtlSendStatus>
      break;
 800b698:	e010      	b.n	800b6bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 f9dc 	bl	800ba58 <USBD_CtlSendStatus>
      break;
 800b6a0:	e00c      	b.n	800b6bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b6a2:	6839      	ldr	r1, [r7, #0]
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 f900 	bl	800b8aa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b6aa:	4b07      	ldr	r3, [pc, #28]	@ (800b6c8 <USBD_SetConfig+0x150>)
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f7fe ff8e 	bl	800a5d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b6b6:	2303      	movs	r3, #3
 800b6b8:	73fb      	strb	r3, [r7, #15]
      break;
 800b6ba:	bf00      	nop
  }

  return ret;
 800b6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	20000839 	.word	0x20000839

0800b6cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b082      	sub	sp, #8
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	88db      	ldrh	r3, [r3, #6]
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	d004      	beq.n	800b6e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b6de:	6839      	ldr	r1, [r7, #0]
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 f8e2 	bl	800b8aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b6e6:	e023      	b.n	800b730 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	2b02      	cmp	r3, #2
 800b6f2:	dc02      	bgt.n	800b6fa <USBD_GetConfig+0x2e>
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	dc03      	bgt.n	800b700 <USBD_GetConfig+0x34>
 800b6f8:	e015      	b.n	800b726 <USBD_GetConfig+0x5a>
 800b6fa:	2b03      	cmp	r3, #3
 800b6fc:	d00b      	beq.n	800b716 <USBD_GetConfig+0x4a>
 800b6fe:	e012      	b.n	800b726 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2200      	movs	r2, #0
 800b704:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	3308      	adds	r3, #8
 800b70a:	2201      	movs	r2, #1
 800b70c:	4619      	mov	r1, r3
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 f948 	bl	800b9a4 <USBD_CtlSendData>
        break;
 800b714:	e00c      	b.n	800b730 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	3304      	adds	r3, #4
 800b71a:	2201      	movs	r2, #1
 800b71c:	4619      	mov	r1, r3
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 f940 	bl	800b9a4 <USBD_CtlSendData>
        break;
 800b724:	e004      	b.n	800b730 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b726:	6839      	ldr	r1, [r7, #0]
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 f8be 	bl	800b8aa <USBD_CtlError>
        break;
 800b72e:	bf00      	nop
}
 800b730:	bf00      	nop
 800b732:	3708      	adds	r7, #8
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b748:	b2db      	uxtb	r3, r3
 800b74a:	3b01      	subs	r3, #1
 800b74c:	2b02      	cmp	r3, #2
 800b74e:	d81e      	bhi.n	800b78e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	88db      	ldrh	r3, [r3, #6]
 800b754:	2b02      	cmp	r3, #2
 800b756:	d004      	beq.n	800b762 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b758:	6839      	ldr	r1, [r7, #0]
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 f8a5 	bl	800b8aa <USBD_CtlError>
        break;
 800b760:	e01a      	b.n	800b798 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2201      	movs	r2, #1
 800b766:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d005      	beq.n	800b77e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	f043 0202 	orr.w	r2, r3, #2
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	330c      	adds	r3, #12
 800b782:	2202      	movs	r2, #2
 800b784:	4619      	mov	r1, r3
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 f90c 	bl	800b9a4 <USBD_CtlSendData>
      break;
 800b78c:	e004      	b.n	800b798 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b78e:	6839      	ldr	r1, [r7, #0]
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 f88a 	bl	800b8aa <USBD_CtlError>
      break;
 800b796:	bf00      	nop
  }
}
 800b798:	bf00      	nop
 800b79a:	3708      	adds	r7, #8
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b082      	sub	sp, #8
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	885b      	ldrh	r3, [r3, #2]
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d107      	bne.n	800b7c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f94c 	bl	800ba58 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b7c0:	e013      	b.n	800b7ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	885b      	ldrh	r3, [r3, #2]
 800b7c6:	2b02      	cmp	r3, #2
 800b7c8:	d10b      	bne.n	800b7e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	889b      	ldrh	r3, [r3, #4]
 800b7ce:	0a1b      	lsrs	r3, r3, #8
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	b2da      	uxtb	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 f93c 	bl	800ba58 <USBD_CtlSendStatus>
}
 800b7e0:	e003      	b.n	800b7ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b7e2:	6839      	ldr	r1, [r7, #0]
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 f860 	bl	800b8aa <USBD_CtlError>
}
 800b7ea:	bf00      	nop
 800b7ec:	3708      	adds	r7, #8
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}

0800b7f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b082      	sub	sp, #8
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
 800b7fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b802:	b2db      	uxtb	r3, r3
 800b804:	3b01      	subs	r3, #1
 800b806:	2b02      	cmp	r3, #2
 800b808:	d80b      	bhi.n	800b822 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	885b      	ldrh	r3, [r3, #2]
 800b80e:	2b01      	cmp	r3, #1
 800b810:	d10c      	bne.n	800b82c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 f91c 	bl	800ba58 <USBD_CtlSendStatus>
      }
      break;
 800b820:	e004      	b.n	800b82c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b822:	6839      	ldr	r1, [r7, #0]
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f000 f840 	bl	800b8aa <USBD_CtlError>
      break;
 800b82a:	e000      	b.n	800b82e <USBD_ClrFeature+0x3c>
      break;
 800b82c:	bf00      	nop
  }
}
 800b82e:	bf00      	nop
 800b830:	3708      	adds	r7, #8
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}

0800b836 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b836:	b580      	push	{r7, lr}
 800b838:	b084      	sub	sp, #16
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	6078      	str	r0, [r7, #4]
 800b83e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	781a      	ldrb	r2, [r3, #0]
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	3301      	adds	r3, #1
 800b850:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	781a      	ldrb	r2, [r3, #0]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	3301      	adds	r3, #1
 800b85e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f7ff fa40 	bl	800ace6 <SWAPBYTE>
 800b866:	4603      	mov	r3, r0
 800b868:	461a      	mov	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	3301      	adds	r3, #1
 800b872:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	3301      	adds	r3, #1
 800b878:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f7ff fa33 	bl	800ace6 <SWAPBYTE>
 800b880:	4603      	mov	r3, r0
 800b882:	461a      	mov	r2, r3
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	3301      	adds	r3, #1
 800b88c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	3301      	adds	r3, #1
 800b892:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b894:	68f8      	ldr	r0, [r7, #12]
 800b896:	f7ff fa26 	bl	800ace6 <SWAPBYTE>
 800b89a:	4603      	mov	r3, r0
 800b89c:	461a      	mov	r2, r3
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	80da      	strh	r2, [r3, #6]
}
 800b8a2:	bf00      	nop
 800b8a4:	3710      	adds	r7, #16
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}

0800b8aa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b082      	sub	sp, #8
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
 800b8b2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8b4:	2180      	movs	r1, #128	@ 0x80
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 fcde 	bl	800c278 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b8bc:	2100      	movs	r1, #0
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 fcda 	bl	800c278 <USBD_LL_StallEP>
}
 800b8c4:	bf00      	nop
 800b8c6:	3708      	adds	r7, #8
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b086      	sub	sp, #24
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d042      	beq.n	800b968 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b8e6:	6938      	ldr	r0, [r7, #16]
 800b8e8:	f000 f842 	bl	800b970 <USBD_GetLen>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	005b      	lsls	r3, r3, #1
 800b8f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8f6:	d808      	bhi.n	800b90a <USBD_GetString+0x3e>
 800b8f8:	6938      	ldr	r0, [r7, #16]
 800b8fa:	f000 f839 	bl	800b970 <USBD_GetLen>
 800b8fe:	4603      	mov	r3, r0
 800b900:	3301      	adds	r3, #1
 800b902:	b29b      	uxth	r3, r3
 800b904:	005b      	lsls	r3, r3, #1
 800b906:	b29a      	uxth	r2, r3
 800b908:	e001      	b.n	800b90e <USBD_GetString+0x42>
 800b90a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b912:	7dfb      	ldrb	r3, [r7, #23]
 800b914:	68ba      	ldr	r2, [r7, #8]
 800b916:	4413      	add	r3, r2
 800b918:	687a      	ldr	r2, [r7, #4]
 800b91a:	7812      	ldrb	r2, [r2, #0]
 800b91c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b91e:	7dfb      	ldrb	r3, [r7, #23]
 800b920:	3301      	adds	r3, #1
 800b922:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b924:	7dfb      	ldrb	r3, [r7, #23]
 800b926:	68ba      	ldr	r2, [r7, #8]
 800b928:	4413      	add	r3, r2
 800b92a:	2203      	movs	r2, #3
 800b92c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b92e:	7dfb      	ldrb	r3, [r7, #23]
 800b930:	3301      	adds	r3, #1
 800b932:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b934:	e013      	b.n	800b95e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b936:	7dfb      	ldrb	r3, [r7, #23]
 800b938:	68ba      	ldr	r2, [r7, #8]
 800b93a:	4413      	add	r3, r2
 800b93c:	693a      	ldr	r2, [r7, #16]
 800b93e:	7812      	ldrb	r2, [r2, #0]
 800b940:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	3301      	adds	r3, #1
 800b946:	613b      	str	r3, [r7, #16]
    idx++;
 800b948:	7dfb      	ldrb	r3, [r7, #23]
 800b94a:	3301      	adds	r3, #1
 800b94c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b94e:	7dfb      	ldrb	r3, [r7, #23]
 800b950:	68ba      	ldr	r2, [r7, #8]
 800b952:	4413      	add	r3, r2
 800b954:	2200      	movs	r2, #0
 800b956:	701a      	strb	r2, [r3, #0]
    idx++;
 800b958:	7dfb      	ldrb	r3, [r7, #23]
 800b95a:	3301      	adds	r3, #1
 800b95c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d1e7      	bne.n	800b936 <USBD_GetString+0x6a>
 800b966:	e000      	b.n	800b96a <USBD_GetString+0x9e>
    return;
 800b968:	bf00      	nop
  }
}
 800b96a:	3718      	adds	r7, #24
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b970:	b480      	push	{r7}
 800b972:	b085      	sub	sp, #20
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b978:	2300      	movs	r3, #0
 800b97a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b980:	e005      	b.n	800b98e <USBD_GetLen+0x1e>
  {
    len++;
 800b982:	7bfb      	ldrb	r3, [r7, #15]
 800b984:	3301      	adds	r3, #1
 800b986:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	3301      	adds	r3, #1
 800b98c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	781b      	ldrb	r3, [r3, #0]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d1f5      	bne.n	800b982 <USBD_GetLen+0x12>
  }

  return len;
 800b996:	7bfb      	ldrb	r3, [r7, #15]
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3714      	adds	r7, #20
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr

0800b9a4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2202      	movs	r2, #2
 800b9b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	68ba      	ldr	r2, [r7, #8]
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f000 fcdd 	bl	800c38a <USBD_LL_Transmit>

  return USBD_OK;
 800b9d0:	2300      	movs	r3, #0
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b9da:	b580      	push	{r7, lr}
 800b9dc:	b084      	sub	sp, #16
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	60f8      	str	r0, [r7, #12]
 800b9e2:	60b9      	str	r1, [r7, #8]
 800b9e4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	68ba      	ldr	r2, [r7, #8]
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	f000 fccc 	bl	800c38a <USBD_LL_Transmit>

  return USBD_OK;
 800b9f2:	2300      	movs	r3, #0
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	60b9      	str	r1, [r7, #8]
 800ba06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2203      	movs	r2, #3
 800ba0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	68ba      	ldr	r2, [r7, #8]
 800ba24:	2100      	movs	r1, #0
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f000 fcd0 	bl	800c3cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b084      	sub	sp, #16
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	60f8      	str	r0, [r7, #12]
 800ba3e:	60b9      	str	r1, [r7, #8]
 800ba40:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	68ba      	ldr	r2, [r7, #8]
 800ba46:	2100      	movs	r1, #0
 800ba48:	68f8      	ldr	r0, [r7, #12]
 800ba4a:	f000 fcbf 	bl	800c3cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3710      	adds	r7, #16
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2204      	movs	r2, #4
 800ba64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba68:	2300      	movs	r3, #0
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 fc8b 	bl	800c38a <USBD_LL_Transmit>

  return USBD_OK;
 800ba74:	2300      	movs	r3, #0
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3708      	adds	r7, #8
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba7e:	b580      	push	{r7, lr}
 800ba80:	b082      	sub	sp, #8
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2205      	movs	r2, #5
 800ba8a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba8e:	2300      	movs	r3, #0
 800ba90:	2200      	movs	r2, #0
 800ba92:	2100      	movs	r1, #0
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f000 fc99 	bl	800c3cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba9a:	2300      	movs	r3, #0
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3708      	adds	r7, #8
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bd80      	pop	{r7, pc}

0800baa4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800baa8:	2200      	movs	r2, #0
 800baaa:	4912      	ldr	r1, [pc, #72]	@ (800baf4 <MX_USB_DEVICE_Init+0x50>)
 800baac:	4812      	ldr	r0, [pc, #72]	@ (800baf8 <MX_USB_DEVICE_Init+0x54>)
 800baae:	f7fe fcf7 	bl	800a4a0 <USBD_Init>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d001      	beq.n	800babc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bab8:	f7f5 fd98 	bl	80015ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800babc:	490f      	ldr	r1, [pc, #60]	@ (800bafc <MX_USB_DEVICE_Init+0x58>)
 800babe:	480e      	ldr	r0, [pc, #56]	@ (800baf8 <MX_USB_DEVICE_Init+0x54>)
 800bac0:	f7fe fd1e 	bl	800a500 <USBD_RegisterClass>
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d001      	beq.n	800bace <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800baca:	f7f5 fd8f 	bl	80015ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bace:	490c      	ldr	r1, [pc, #48]	@ (800bb00 <MX_USB_DEVICE_Init+0x5c>)
 800bad0:	4809      	ldr	r0, [pc, #36]	@ (800baf8 <MX_USB_DEVICE_Init+0x54>)
 800bad2:	f7fe fc55 	bl	800a380 <USBD_CDC_RegisterInterface>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d001      	beq.n	800bae0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800badc:	f7f5 fd86 	bl	80015ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bae0:	4805      	ldr	r0, [pc, #20]	@ (800baf8 <MX_USB_DEVICE_Init+0x54>)
 800bae2:	f7fe fd43 	bl	800a56c <USBD_Start>
 800bae6:	4603      	mov	r3, r0
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d001      	beq.n	800baf0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800baec:	f7f5 fd7e 	bl	80015ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800baf0:	bf00      	nop
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	200000c0 	.word	0x200000c0
 800baf8:	2000083c 	.word	0x2000083c
 800bafc:	2000002c 	.word	0x2000002c
 800bb00:	200000ac 	.word	0x200000ac

0800bb04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bb08:	2200      	movs	r2, #0
 800bb0a:	4905      	ldr	r1, [pc, #20]	@ (800bb20 <CDC_Init_FS+0x1c>)
 800bb0c:	4805      	ldr	r0, [pc, #20]	@ (800bb24 <CDC_Init_FS+0x20>)
 800bb0e:	f7fe fc51 	bl	800a3b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bb12:	4905      	ldr	r1, [pc, #20]	@ (800bb28 <CDC_Init_FS+0x24>)
 800bb14:	4803      	ldr	r0, [pc, #12]	@ (800bb24 <CDC_Init_FS+0x20>)
 800bb16:	f7fe fc6f 	bl	800a3f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bb1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	bd80      	pop	{r7, pc}
 800bb20:	2000131c 	.word	0x2000131c
 800bb24:	2000083c 	.word	0x2000083c
 800bb28:	20000b1c 	.word	0x20000b1c

0800bb2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	46bd      	mov	sp, r7
 800bb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b083      	sub	sp, #12
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	4603      	mov	r3, r0
 800bb44:	6039      	str	r1, [r7, #0]
 800bb46:	71fb      	strb	r3, [r7, #7]
 800bb48:	4613      	mov	r3, r2
 800bb4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bb4c:	79fb      	ldrb	r3, [r7, #7]
 800bb4e:	2b23      	cmp	r3, #35	@ 0x23
 800bb50:	d84a      	bhi.n	800bbe8 <CDC_Control_FS+0xac>
 800bb52:	a201      	add	r2, pc, #4	@ (adr r2, 800bb58 <CDC_Control_FS+0x1c>)
 800bb54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb58:	0800bbe9 	.word	0x0800bbe9
 800bb5c:	0800bbe9 	.word	0x0800bbe9
 800bb60:	0800bbe9 	.word	0x0800bbe9
 800bb64:	0800bbe9 	.word	0x0800bbe9
 800bb68:	0800bbe9 	.word	0x0800bbe9
 800bb6c:	0800bbe9 	.word	0x0800bbe9
 800bb70:	0800bbe9 	.word	0x0800bbe9
 800bb74:	0800bbe9 	.word	0x0800bbe9
 800bb78:	0800bbe9 	.word	0x0800bbe9
 800bb7c:	0800bbe9 	.word	0x0800bbe9
 800bb80:	0800bbe9 	.word	0x0800bbe9
 800bb84:	0800bbe9 	.word	0x0800bbe9
 800bb88:	0800bbe9 	.word	0x0800bbe9
 800bb8c:	0800bbe9 	.word	0x0800bbe9
 800bb90:	0800bbe9 	.word	0x0800bbe9
 800bb94:	0800bbe9 	.word	0x0800bbe9
 800bb98:	0800bbe9 	.word	0x0800bbe9
 800bb9c:	0800bbe9 	.word	0x0800bbe9
 800bba0:	0800bbe9 	.word	0x0800bbe9
 800bba4:	0800bbe9 	.word	0x0800bbe9
 800bba8:	0800bbe9 	.word	0x0800bbe9
 800bbac:	0800bbe9 	.word	0x0800bbe9
 800bbb0:	0800bbe9 	.word	0x0800bbe9
 800bbb4:	0800bbe9 	.word	0x0800bbe9
 800bbb8:	0800bbe9 	.word	0x0800bbe9
 800bbbc:	0800bbe9 	.word	0x0800bbe9
 800bbc0:	0800bbe9 	.word	0x0800bbe9
 800bbc4:	0800bbe9 	.word	0x0800bbe9
 800bbc8:	0800bbe9 	.word	0x0800bbe9
 800bbcc:	0800bbe9 	.word	0x0800bbe9
 800bbd0:	0800bbe9 	.word	0x0800bbe9
 800bbd4:	0800bbe9 	.word	0x0800bbe9
 800bbd8:	0800bbe9 	.word	0x0800bbe9
 800bbdc:	0800bbe9 	.word	0x0800bbe9
 800bbe0:	0800bbe9 	.word	0x0800bbe9
 800bbe4:	0800bbe9 	.word	0x0800bbe9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bbe8:	bf00      	nop
  }

  return (USBD_OK);
 800bbea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	370c      	adds	r7, #12
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bc02:	6879      	ldr	r1, [r7, #4]
 800bc04:	480e      	ldr	r0, [pc, #56]	@ (800bc40 <CDC_Receive_FS+0x48>)
 800bc06:	f7fe fbf7 	bl	800a3f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bc0a:	480d      	ldr	r0, [pc, #52]	@ (800bc40 <CDC_Receive_FS+0x48>)
 800bc0c:	f7fe fc12 	bl	800a434 <USBD_CDC_ReceivePacket>

  //https://controllerstech.com/send-and-receive-data-to-pc-without-uart-stm32-usb-com/

  uint8_t len = (uint8_t) *Len;
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	73fb      	strb	r3, [r7, #15]

    if(len == ROS_COMM_RX_SIZE){
 800bc16:	7bfb      	ldrb	r3, [r7, #15]
 800bc18:	2b0d      	cmp	r3, #13
 800bc1a:	d105      	bne.n	800bc28 <CDC_Receive_FS+0x30>
	  memcpy((uint8_t *)&rbc_Packet_t, Buf, len);  // copy the data to the buffer
 800bc1c:	7bfb      	ldrb	r3, [r7, #15]
 800bc1e:	461a      	mov	r2, r3
 800bc20:	6879      	ldr	r1, [r7, #4]
 800bc22:	4808      	ldr	r0, [pc, #32]	@ (800bc44 <CDC_Receive_FS+0x4c>)
 800bc24:	f000 fc76 	bl	800c514 <memcpy>
    }

    rx_flag = 1;
 800bc28:	4b07      	ldr	r3, [pc, #28]	@ (800bc48 <CDC_Receive_FS+0x50>)
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	701a      	strb	r2, [r3, #0]
    tx_flag = 0;
 800bc2e:	4b07      	ldr	r3, [pc, #28]	@ (800bc4c <CDC_Receive_FS+0x54>)
 800bc30:	2200      	movs	r2, #0
 800bc32:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800bc34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	2000083c 	.word	0x2000083c
 800bc44:	2000080c 	.word	0x2000080c
 800bc48:	20000b18 	.word	0x20000b18
 800bc4c:	200000aa 	.word	0x200000aa

0800bc50 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b087      	sub	sp, #28
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bc62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	371c      	adds	r7, #28
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
	...

0800bc74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	6039      	str	r1, [r7, #0]
 800bc7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	2212      	movs	r2, #18
 800bc84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bc86:	4b03      	ldr	r3, [pc, #12]	@ (800bc94 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr
 800bc94:	200000dc 	.word	0x200000dc

0800bc98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	4603      	mov	r3, r0
 800bca0:	6039      	str	r1, [r7, #0]
 800bca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	2204      	movs	r2, #4
 800bca8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bcaa:	4b03      	ldr	r3, [pc, #12]	@ (800bcb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	370c      	adds	r7, #12
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr
 800bcb8:	200000f0 	.word	0x200000f0

0800bcbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	6039      	str	r1, [r7, #0]
 800bcc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bcc8:	79fb      	ldrb	r3, [r7, #7]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d105      	bne.n	800bcda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcce:	683a      	ldr	r2, [r7, #0]
 800bcd0:	4907      	ldr	r1, [pc, #28]	@ (800bcf0 <USBD_FS_ProductStrDescriptor+0x34>)
 800bcd2:	4808      	ldr	r0, [pc, #32]	@ (800bcf4 <USBD_FS_ProductStrDescriptor+0x38>)
 800bcd4:	f7ff fdfa 	bl	800b8cc <USBD_GetString>
 800bcd8:	e004      	b.n	800bce4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcda:	683a      	ldr	r2, [r7, #0]
 800bcdc:	4904      	ldr	r1, [pc, #16]	@ (800bcf0 <USBD_FS_ProductStrDescriptor+0x34>)
 800bcde:	4805      	ldr	r0, [pc, #20]	@ (800bcf4 <USBD_FS_ProductStrDescriptor+0x38>)
 800bce0:	f7ff fdf4 	bl	800b8cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800bce4:	4b02      	ldr	r3, [pc, #8]	@ (800bcf0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3708      	adds	r7, #8
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	20001b1c 	.word	0x20001b1c
 800bcf4:	0800c580 	.word	0x0800c580

0800bcf8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	4603      	mov	r3, r0
 800bd00:	6039      	str	r1, [r7, #0]
 800bd02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd04:	683a      	ldr	r2, [r7, #0]
 800bd06:	4904      	ldr	r1, [pc, #16]	@ (800bd18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bd08:	4804      	ldr	r0, [pc, #16]	@ (800bd1c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bd0a:	f7ff fddf 	bl	800b8cc <USBD_GetString>
  return USBD_StrDesc;
 800bd0e:	4b02      	ldr	r3, [pc, #8]	@ (800bd18 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3708      	adds	r7, #8
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	20001b1c 	.word	0x20001b1c
 800bd1c:	0800c598 	.word	0x0800c598

0800bd20 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	4603      	mov	r3, r0
 800bd28:	6039      	str	r1, [r7, #0]
 800bd2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	221a      	movs	r2, #26
 800bd30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bd32:	f000 f843 	bl	800bdbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bd36:	4b02      	ldr	r3, [pc, #8]	@ (800bd40 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	200000f4 	.word	0x200000f4

0800bd44 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	6039      	str	r1, [r7, #0]
 800bd4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd50:	79fb      	ldrb	r3, [r7, #7]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d105      	bne.n	800bd62 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd56:	683a      	ldr	r2, [r7, #0]
 800bd58:	4907      	ldr	r1, [pc, #28]	@ (800bd78 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd5a:	4808      	ldr	r0, [pc, #32]	@ (800bd7c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd5c:	f7ff fdb6 	bl	800b8cc <USBD_GetString>
 800bd60:	e004      	b.n	800bd6c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd62:	683a      	ldr	r2, [r7, #0]
 800bd64:	4904      	ldr	r1, [pc, #16]	@ (800bd78 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd66:	4805      	ldr	r0, [pc, #20]	@ (800bd7c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd68:	f7ff fdb0 	bl	800b8cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd6c:	4b02      	ldr	r3, [pc, #8]	@ (800bd78 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3708      	adds	r7, #8
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	20001b1c 	.word	0x20001b1c
 800bd7c:	0800c5ac 	.word	0x0800c5ac

0800bd80 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	4603      	mov	r3, r0
 800bd88:	6039      	str	r1, [r7, #0]
 800bd8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd8c:	79fb      	ldrb	r3, [r7, #7]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d105      	bne.n	800bd9e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd92:	683a      	ldr	r2, [r7, #0]
 800bd94:	4907      	ldr	r1, [pc, #28]	@ (800bdb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd96:	4808      	ldr	r0, [pc, #32]	@ (800bdb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd98:	f7ff fd98 	bl	800b8cc <USBD_GetString>
 800bd9c:	e004      	b.n	800bda8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd9e:	683a      	ldr	r2, [r7, #0]
 800bda0:	4904      	ldr	r1, [pc, #16]	@ (800bdb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bda2:	4805      	ldr	r0, [pc, #20]	@ (800bdb8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bda4:	f7ff fd92 	bl	800b8cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800bda8:	4b02      	ldr	r3, [pc, #8]	@ (800bdb4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3708      	adds	r7, #8
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	20001b1c 	.word	0x20001b1c
 800bdb8:	0800c5b8 	.word	0x0800c5b8

0800bdbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b084      	sub	sp, #16
 800bdc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bdc2:	4b0f      	ldr	r3, [pc, #60]	@ (800be00 <Get_SerialNum+0x44>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bdc8:	4b0e      	ldr	r3, [pc, #56]	@ (800be04 <Get_SerialNum+0x48>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bdce:	4b0e      	ldr	r3, [pc, #56]	@ (800be08 <Get_SerialNum+0x4c>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bdd4:	68fa      	ldr	r2, [r7, #12]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	4413      	add	r3, r2
 800bdda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d009      	beq.n	800bdf6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bde2:	2208      	movs	r2, #8
 800bde4:	4909      	ldr	r1, [pc, #36]	@ (800be0c <Get_SerialNum+0x50>)
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f000 f814 	bl	800be14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bdec:	2204      	movs	r2, #4
 800bdee:	4908      	ldr	r1, [pc, #32]	@ (800be10 <Get_SerialNum+0x54>)
 800bdf0:	68b8      	ldr	r0, [r7, #8]
 800bdf2:	f000 f80f 	bl	800be14 <IntToUnicode>
  }
}
 800bdf6:	bf00      	nop
 800bdf8:	3710      	adds	r7, #16
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	1fff7a10 	.word	0x1fff7a10
 800be04:	1fff7a14 	.word	0x1fff7a14
 800be08:	1fff7a18 	.word	0x1fff7a18
 800be0c:	200000f6 	.word	0x200000f6
 800be10:	20000106 	.word	0x20000106

0800be14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be14:	b480      	push	{r7}
 800be16:	b087      	sub	sp, #28
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	4613      	mov	r3, r2
 800be20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be22:	2300      	movs	r3, #0
 800be24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be26:	2300      	movs	r3, #0
 800be28:	75fb      	strb	r3, [r7, #23]
 800be2a:	e027      	b.n	800be7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	0f1b      	lsrs	r3, r3, #28
 800be30:	2b09      	cmp	r3, #9
 800be32:	d80b      	bhi.n	800be4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	0f1b      	lsrs	r3, r3, #28
 800be38:	b2da      	uxtb	r2, r3
 800be3a:	7dfb      	ldrb	r3, [r7, #23]
 800be3c:	005b      	lsls	r3, r3, #1
 800be3e:	4619      	mov	r1, r3
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	440b      	add	r3, r1
 800be44:	3230      	adds	r2, #48	@ 0x30
 800be46:	b2d2      	uxtb	r2, r2
 800be48:	701a      	strb	r2, [r3, #0]
 800be4a:	e00a      	b.n	800be62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	0f1b      	lsrs	r3, r3, #28
 800be50:	b2da      	uxtb	r2, r3
 800be52:	7dfb      	ldrb	r3, [r7, #23]
 800be54:	005b      	lsls	r3, r3, #1
 800be56:	4619      	mov	r1, r3
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	440b      	add	r3, r1
 800be5c:	3237      	adds	r2, #55	@ 0x37
 800be5e:	b2d2      	uxtb	r2, r2
 800be60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	011b      	lsls	r3, r3, #4
 800be66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be68:	7dfb      	ldrb	r3, [r7, #23]
 800be6a:	005b      	lsls	r3, r3, #1
 800be6c:	3301      	adds	r3, #1
 800be6e:	68ba      	ldr	r2, [r7, #8]
 800be70:	4413      	add	r3, r2
 800be72:	2200      	movs	r2, #0
 800be74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800be76:	7dfb      	ldrb	r3, [r7, #23]
 800be78:	3301      	adds	r3, #1
 800be7a:	75fb      	strb	r3, [r7, #23]
 800be7c:	7dfa      	ldrb	r2, [r7, #23]
 800be7e:	79fb      	ldrb	r3, [r7, #7]
 800be80:	429a      	cmp	r2, r3
 800be82:	d3d3      	bcc.n	800be2c <IntToUnicode+0x18>
  }
}
 800be84:	bf00      	nop
 800be86:	bf00      	nop
 800be88:	371c      	adds	r7, #28
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr
	...

0800be94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b08a      	sub	sp, #40	@ 0x28
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be9c:	f107 0314 	add.w	r3, r7, #20
 800bea0:	2200      	movs	r2, #0
 800bea2:	601a      	str	r2, [r3, #0]
 800bea4:	605a      	str	r2, [r3, #4]
 800bea6:	609a      	str	r2, [r3, #8]
 800bea8:	60da      	str	r2, [r3, #12]
 800beaa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800beb4:	d13a      	bne.n	800bf2c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800beb6:	2300      	movs	r3, #0
 800beb8:	613b      	str	r3, [r7, #16]
 800beba:	4b1e      	ldr	r3, [pc, #120]	@ (800bf34 <HAL_PCD_MspInit+0xa0>)
 800bebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bebe:	4a1d      	ldr	r2, [pc, #116]	@ (800bf34 <HAL_PCD_MspInit+0xa0>)
 800bec0:	f043 0301 	orr.w	r3, r3, #1
 800bec4:	6313      	str	r3, [r2, #48]	@ 0x30
 800bec6:	4b1b      	ldr	r3, [pc, #108]	@ (800bf34 <HAL_PCD_MspInit+0xa0>)
 800bec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beca:	f003 0301 	and.w	r3, r3, #1
 800bece:	613b      	str	r3, [r7, #16]
 800bed0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bed2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800bed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bed8:	2302      	movs	r3, #2
 800beda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bedc:	2300      	movs	r3, #0
 800bede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bee0:	2303      	movs	r3, #3
 800bee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bee4:	230a      	movs	r3, #10
 800bee6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bee8:	f107 0314 	add.w	r3, r7, #20
 800beec:	4619      	mov	r1, r3
 800beee:	4812      	ldr	r0, [pc, #72]	@ (800bf38 <HAL_PCD_MspInit+0xa4>)
 800bef0:	f7f6 fdd4 	bl	8002a9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bef4:	4b0f      	ldr	r3, [pc, #60]	@ (800bf34 <HAL_PCD_MspInit+0xa0>)
 800bef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bef8:	4a0e      	ldr	r2, [pc, #56]	@ (800bf34 <HAL_PCD_MspInit+0xa0>)
 800befa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800befe:	6353      	str	r3, [r2, #52]	@ 0x34
 800bf00:	2300      	movs	r3, #0
 800bf02:	60fb      	str	r3, [r7, #12]
 800bf04:	4b0b      	ldr	r3, [pc, #44]	@ (800bf34 <HAL_PCD_MspInit+0xa0>)
 800bf06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf08:	4a0a      	ldr	r2, [pc, #40]	@ (800bf34 <HAL_PCD_MspInit+0xa0>)
 800bf0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bf0e:	6453      	str	r3, [r2, #68]	@ 0x44
 800bf10:	4b08      	ldr	r3, [pc, #32]	@ (800bf34 <HAL_PCD_MspInit+0xa0>)
 800bf12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf18:	60fb      	str	r3, [r7, #12]
 800bf1a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	2100      	movs	r1, #0
 800bf20:	2043      	movs	r0, #67	@ 0x43
 800bf22:	f7f6 fce4 	bl	80028ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bf26:	2043      	movs	r0, #67	@ 0x43
 800bf28:	f7f6 fcfd 	bl	8002926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bf2c:	bf00      	nop
 800bf2e:	3728      	adds	r7, #40	@ 0x28
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	40023800 	.word	0x40023800
 800bf38:	40020000 	.word	0x40020000

0800bf3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bf50:	4619      	mov	r1, r3
 800bf52:	4610      	mov	r0, r2
 800bf54:	f7fe fb57 	bl	800a606 <USBD_LL_SetupStage>
}
 800bf58:	bf00      	nop
 800bf5a:	3708      	adds	r7, #8
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	460b      	mov	r3, r1
 800bf6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bf72:	78fa      	ldrb	r2, [r7, #3]
 800bf74:	6879      	ldr	r1, [r7, #4]
 800bf76:	4613      	mov	r3, r2
 800bf78:	00db      	lsls	r3, r3, #3
 800bf7a:	4413      	add	r3, r2
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	440b      	add	r3, r1
 800bf80:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	78fb      	ldrb	r3, [r7, #3]
 800bf88:	4619      	mov	r1, r3
 800bf8a:	f7fe fb91 	bl	800a6b0 <USBD_LL_DataOutStage>
}
 800bf8e:	bf00      	nop
 800bf90:	3708      	adds	r7, #8
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}

0800bf96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf96:	b580      	push	{r7, lr}
 800bf98:	b082      	sub	sp, #8
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	6078      	str	r0, [r7, #4]
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bfa8:	78fa      	ldrb	r2, [r7, #3]
 800bfaa:	6879      	ldr	r1, [r7, #4]
 800bfac:	4613      	mov	r3, r2
 800bfae:	00db      	lsls	r3, r3, #3
 800bfb0:	4413      	add	r3, r2
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	440b      	add	r3, r1
 800bfb6:	3320      	adds	r3, #32
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	78fb      	ldrb	r3, [r7, #3]
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	f7fe fc2a 	bl	800a816 <USBD_LL_DataInStage>
}
 800bfc2:	bf00      	nop
 800bfc4:	3708      	adds	r7, #8
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}

0800bfca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b082      	sub	sp, #8
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f7fe fd64 	bl	800aaa6 <USBD_LL_SOF>
}
 800bfde:	bf00      	nop
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}

0800bfe6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b084      	sub	sp, #16
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bfee:	2301      	movs	r3, #1
 800bff0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	79db      	ldrb	r3, [r3, #7]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d102      	bne.n	800c000 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bffa:	2300      	movs	r3, #0
 800bffc:	73fb      	strb	r3, [r7, #15]
 800bffe:	e008      	b.n	800c012 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	79db      	ldrb	r3, [r3, #7]
 800c004:	2b02      	cmp	r3, #2
 800c006:	d102      	bne.n	800c00e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c008:	2301      	movs	r3, #1
 800c00a:	73fb      	strb	r3, [r7, #15]
 800c00c:	e001      	b.n	800c012 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c00e:	f7f5 faed 	bl	80015ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c018:	7bfa      	ldrb	r2, [r7, #15]
 800c01a:	4611      	mov	r1, r2
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7fe fcfe 	bl	800aa1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c028:	4618      	mov	r0, r3
 800c02a:	f7fe fca6 	bl	800a97a <USBD_LL_Reset>
}
 800c02e:	bf00      	nop
 800c030:	3710      	adds	r7, #16
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
	...

0800c038 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b082      	sub	sp, #8
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c046:	4618      	mov	r0, r3
 800c048:	f7fe fcf9 	bl	800aa3e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	6812      	ldr	r2, [r2, #0]
 800c05a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c05e:	f043 0301 	orr.w	r3, r3, #1
 800c062:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	7adb      	ldrb	r3, [r3, #11]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d005      	beq.n	800c078 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c06c:	4b04      	ldr	r3, [pc, #16]	@ (800c080 <HAL_PCD_SuspendCallback+0x48>)
 800c06e:	691b      	ldr	r3, [r3, #16]
 800c070:	4a03      	ldr	r2, [pc, #12]	@ (800c080 <HAL_PCD_SuspendCallback+0x48>)
 800c072:	f043 0306 	orr.w	r3, r3, #6
 800c076:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c078:	bf00      	nop
 800c07a:	3708      	adds	r7, #8
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	e000ed00 	.word	0xe000ed00

0800c084 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c092:	4618      	mov	r0, r3
 800c094:	f7fe fcef 	bl	800aa76 <USBD_LL_Resume>
}
 800c098:	bf00      	nop
 800c09a:	3708      	adds	r7, #8
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0b2:	78fa      	ldrb	r2, [r7, #3]
 800c0b4:	4611      	mov	r1, r2
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7fe fd47 	bl	800ab4a <USBD_LL_IsoOUTIncomplete>
}
 800c0bc:	bf00      	nop
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0d6:	78fa      	ldrb	r2, [r7, #3]
 800c0d8:	4611      	mov	r1, r2
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7fe fd03 	bl	800aae6 <USBD_LL_IsoINIncomplete>
}
 800c0e0:	bf00      	nop
 800c0e2:	3708      	adds	r7, #8
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b082      	sub	sp, #8
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7fe fd59 	bl	800abae <USBD_LL_DevConnected>
}
 800c0fc:	bf00      	nop
 800c0fe:	3708      	adds	r7, #8
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c112:	4618      	mov	r0, r3
 800c114:	f7fe fd56 	bl	800abc4 <USBD_LL_DevDisconnected>
}
 800c118:	bf00      	nop
 800c11a:	3708      	adds	r7, #8
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	781b      	ldrb	r3, [r3, #0]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d13c      	bne.n	800c1aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c130:	4a20      	ldr	r2, [pc, #128]	@ (800c1b4 <USBD_LL_Init+0x94>)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	4a1e      	ldr	r2, [pc, #120]	@ (800c1b4 <USBD_LL_Init+0x94>)
 800c13c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c140:	4b1c      	ldr	r3, [pc, #112]	@ (800c1b4 <USBD_LL_Init+0x94>)
 800c142:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c146:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c148:	4b1a      	ldr	r3, [pc, #104]	@ (800c1b4 <USBD_LL_Init+0x94>)
 800c14a:	2204      	movs	r2, #4
 800c14c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c14e:	4b19      	ldr	r3, [pc, #100]	@ (800c1b4 <USBD_LL_Init+0x94>)
 800c150:	2202      	movs	r2, #2
 800c152:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c154:	4b17      	ldr	r3, [pc, #92]	@ (800c1b4 <USBD_LL_Init+0x94>)
 800c156:	2200      	movs	r2, #0
 800c158:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c15a:	4b16      	ldr	r3, [pc, #88]	@ (800c1b4 <USBD_LL_Init+0x94>)
 800c15c:	2202      	movs	r2, #2
 800c15e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c160:	4b14      	ldr	r3, [pc, #80]	@ (800c1b4 <USBD_LL_Init+0x94>)
 800c162:	2200      	movs	r2, #0
 800c164:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c166:	4b13      	ldr	r3, [pc, #76]	@ (800c1b4 <USBD_LL_Init+0x94>)
 800c168:	2200      	movs	r2, #0
 800c16a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c16c:	4b11      	ldr	r3, [pc, #68]	@ (800c1b4 <USBD_LL_Init+0x94>)
 800c16e:	2200      	movs	r2, #0
 800c170:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c172:	4b10      	ldr	r3, [pc, #64]	@ (800c1b4 <USBD_LL_Init+0x94>)
 800c174:	2200      	movs	r2, #0
 800c176:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c178:	4b0e      	ldr	r3, [pc, #56]	@ (800c1b4 <USBD_LL_Init+0x94>)
 800c17a:	2200      	movs	r2, #0
 800c17c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c17e:	480d      	ldr	r0, [pc, #52]	@ (800c1b4 <USBD_LL_Init+0x94>)
 800c180:	f7f7 f882 	bl	8003288 <HAL_PCD_Init>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	d001      	beq.n	800c18e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c18a:	f7f5 fa2f 	bl	80015ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c18e:	2180      	movs	r1, #128	@ 0x80
 800c190:	4808      	ldr	r0, [pc, #32]	@ (800c1b4 <USBD_LL_Init+0x94>)
 800c192:	f7f8 faae 	bl	80046f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c196:	2240      	movs	r2, #64	@ 0x40
 800c198:	2100      	movs	r1, #0
 800c19a:	4806      	ldr	r0, [pc, #24]	@ (800c1b4 <USBD_LL_Init+0x94>)
 800c19c:	f7f8 fa62 	bl	8004664 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c1a0:	2280      	movs	r2, #128	@ 0x80
 800c1a2:	2101      	movs	r1, #1
 800c1a4:	4803      	ldr	r0, [pc, #12]	@ (800c1b4 <USBD_LL_Init+0x94>)
 800c1a6:	f7f8 fa5d 	bl	8004664 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c1aa:	2300      	movs	r3, #0
}
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	3708      	adds	r7, #8
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}
 800c1b4:	20001d1c 	.word	0x20001d1c

0800c1b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f7f7 f969 	bl	80034a6 <HAL_PCD_Start>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1d8:	7bfb      	ldrb	r3, [r7, #15]
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f000 f942 	bl	800c464 <USBD_Get_USB_Status>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3710      	adds	r7, #16
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b084      	sub	sp, #16
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
 800c1f6:	4608      	mov	r0, r1
 800c1f8:	4611      	mov	r1, r2
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	70fb      	strb	r3, [r7, #3]
 800c200:	460b      	mov	r3, r1
 800c202:	70bb      	strb	r3, [r7, #2]
 800c204:	4613      	mov	r3, r2
 800c206:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c208:	2300      	movs	r3, #0
 800c20a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c20c:	2300      	movs	r3, #0
 800c20e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c216:	78bb      	ldrb	r3, [r7, #2]
 800c218:	883a      	ldrh	r2, [r7, #0]
 800c21a:	78f9      	ldrb	r1, [r7, #3]
 800c21c:	f7f7 fe3d 	bl	8003e9a <HAL_PCD_EP_Open>
 800c220:	4603      	mov	r3, r0
 800c222:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c224:	7bfb      	ldrb	r3, [r7, #15]
 800c226:	4618      	mov	r0, r3
 800c228:	f000 f91c 	bl	800c464 <USBD_Get_USB_Status>
 800c22c:	4603      	mov	r3, r0
 800c22e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c230:	7bbb      	ldrb	r3, [r7, #14]
}
 800c232:	4618      	mov	r0, r3
 800c234:	3710      	adds	r7, #16
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b084      	sub	sp, #16
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
 800c242:	460b      	mov	r3, r1
 800c244:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c246:	2300      	movs	r3, #0
 800c248:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c24a:	2300      	movs	r3, #0
 800c24c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c254:	78fa      	ldrb	r2, [r7, #3]
 800c256:	4611      	mov	r1, r2
 800c258:	4618      	mov	r0, r3
 800c25a:	f7f7 fe88 	bl	8003f6e <HAL_PCD_EP_Close>
 800c25e:	4603      	mov	r3, r0
 800c260:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c262:	7bfb      	ldrb	r3, [r7, #15]
 800c264:	4618      	mov	r0, r3
 800c266:	f000 f8fd 	bl	800c464 <USBD_Get_USB_Status>
 800c26a:	4603      	mov	r3, r0
 800c26c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c26e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c270:	4618      	mov	r0, r3
 800c272:	3710      	adds	r7, #16
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	460b      	mov	r3, r1
 800c282:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c284:	2300      	movs	r3, #0
 800c286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c288:	2300      	movs	r3, #0
 800c28a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c292:	78fa      	ldrb	r2, [r7, #3]
 800c294:	4611      	mov	r1, r2
 800c296:	4618      	mov	r0, r3
 800c298:	f7f7 ff40 	bl	800411c <HAL_PCD_EP_SetStall>
 800c29c:	4603      	mov	r3, r0
 800c29e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2a0:	7bfb      	ldrb	r3, [r7, #15]
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f000 f8de 	bl	800c464 <USBD_Get_USB_Status>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3710      	adds	r7, #16
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b084      	sub	sp, #16
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
 800c2be:	460b      	mov	r3, r1
 800c2c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c2d0:	78fa      	ldrb	r2, [r7, #3]
 800c2d2:	4611      	mov	r1, r2
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7f7 ff84 	bl	80041e2 <HAL_PCD_EP_ClrStall>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2de:	7bfb      	ldrb	r3, [r7, #15]
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f000 f8bf 	bl	800c464 <USBD_Get_USB_Status>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3710      	adds	r7, #16
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c306:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c308:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	da0b      	bge.n	800c328 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c310:	78fb      	ldrb	r3, [r7, #3]
 800c312:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c316:	68f9      	ldr	r1, [r7, #12]
 800c318:	4613      	mov	r3, r2
 800c31a:	00db      	lsls	r3, r3, #3
 800c31c:	4413      	add	r3, r2
 800c31e:	009b      	lsls	r3, r3, #2
 800c320:	440b      	add	r3, r1
 800c322:	3316      	adds	r3, #22
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	e00b      	b.n	800c340 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c328:	78fb      	ldrb	r3, [r7, #3]
 800c32a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c32e:	68f9      	ldr	r1, [r7, #12]
 800c330:	4613      	mov	r3, r2
 800c332:	00db      	lsls	r3, r3, #3
 800c334:	4413      	add	r3, r2
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	440b      	add	r3, r1
 800c33a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c33e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c340:	4618      	mov	r0, r3
 800c342:	3714      	adds	r7, #20
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	460b      	mov	r3, r1
 800c356:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c358:	2300      	movs	r3, #0
 800c35a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c35c:	2300      	movs	r3, #0
 800c35e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c366:	78fa      	ldrb	r2, [r7, #3]
 800c368:	4611      	mov	r1, r2
 800c36a:	4618      	mov	r0, r3
 800c36c:	f7f7 fd71 	bl	8003e52 <HAL_PCD_SetAddress>
 800c370:	4603      	mov	r3, r0
 800c372:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c374:	7bfb      	ldrb	r3, [r7, #15]
 800c376:	4618      	mov	r0, r3
 800c378:	f000 f874 	bl	800c464 <USBD_Get_USB_Status>
 800c37c:	4603      	mov	r3, r0
 800c37e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c380:	7bbb      	ldrb	r3, [r7, #14]
}
 800c382:	4618      	mov	r0, r3
 800c384:	3710      	adds	r7, #16
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}

0800c38a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b086      	sub	sp, #24
 800c38e:	af00      	add	r7, sp, #0
 800c390:	60f8      	str	r0, [r7, #12]
 800c392:	607a      	str	r2, [r7, #4]
 800c394:	603b      	str	r3, [r7, #0]
 800c396:	460b      	mov	r3, r1
 800c398:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c39a:	2300      	movs	r3, #0
 800c39c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c3a8:	7af9      	ldrb	r1, [r7, #11]
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	f7f7 fe7b 	bl	80040a8 <HAL_PCD_EP_Transmit>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3b6:	7dfb      	ldrb	r3, [r7, #23]
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f000 f853 	bl	800c464 <USBD_Get_USB_Status>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3718      	adds	r7, #24
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b086      	sub	sp, #24
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	607a      	str	r2, [r7, #4]
 800c3d6:	603b      	str	r3, [r7, #0]
 800c3d8:	460b      	mov	r3, r1
 800c3da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c3ea:	7af9      	ldrb	r1, [r7, #11]
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	f7f7 fe07 	bl	8004002 <HAL_PCD_EP_Receive>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3f8:	7dfb      	ldrb	r3, [r7, #23]
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f000 f832 	bl	800c464 <USBD_Get_USB_Status>
 800c400:	4603      	mov	r3, r0
 800c402:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c404:	7dbb      	ldrb	r3, [r7, #22]
}
 800c406:	4618      	mov	r0, r3
 800c408:	3718      	adds	r7, #24
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c40e:	b580      	push	{r7, lr}
 800c410:	b082      	sub	sp, #8
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
 800c416:	460b      	mov	r3, r1
 800c418:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c420:	78fa      	ldrb	r2, [r7, #3]
 800c422:	4611      	mov	r1, r2
 800c424:	4618      	mov	r0, r3
 800c426:	f7f7 fe27 	bl	8004078 <HAL_PCD_EP_GetRxCount>
 800c42a:	4603      	mov	r3, r0
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	3708      	adds	r7, #8
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c43c:	4b03      	ldr	r3, [pc, #12]	@ (800c44c <USBD_static_malloc+0x18>)
}
 800c43e:	4618      	mov	r0, r3
 800c440:	370c      	adds	r7, #12
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop
 800c44c:	20002200 	.word	0x20002200

0800c450 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c450:	b480      	push	{r7}
 800c452:	b083      	sub	sp, #12
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]

}
 800c458:	bf00      	nop
 800c45a:	370c      	adds	r7, #12
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c464:	b480      	push	{r7}
 800c466:	b085      	sub	sp, #20
 800c468:	af00      	add	r7, sp, #0
 800c46a:	4603      	mov	r3, r0
 800c46c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c46e:	2300      	movs	r3, #0
 800c470:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c472:	79fb      	ldrb	r3, [r7, #7]
 800c474:	2b03      	cmp	r3, #3
 800c476:	d817      	bhi.n	800c4a8 <USBD_Get_USB_Status+0x44>
 800c478:	a201      	add	r2, pc, #4	@ (adr r2, 800c480 <USBD_Get_USB_Status+0x1c>)
 800c47a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c47e:	bf00      	nop
 800c480:	0800c491 	.word	0x0800c491
 800c484:	0800c497 	.word	0x0800c497
 800c488:	0800c49d 	.word	0x0800c49d
 800c48c:	0800c4a3 	.word	0x0800c4a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c490:	2300      	movs	r3, #0
 800c492:	73fb      	strb	r3, [r7, #15]
    break;
 800c494:	e00b      	b.n	800c4ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c496:	2303      	movs	r3, #3
 800c498:	73fb      	strb	r3, [r7, #15]
    break;
 800c49a:	e008      	b.n	800c4ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c49c:	2301      	movs	r3, #1
 800c49e:	73fb      	strb	r3, [r7, #15]
    break;
 800c4a0:	e005      	b.n	800c4ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c4a2:	2303      	movs	r3, #3
 800c4a4:	73fb      	strb	r3, [r7, #15]
    break;
 800c4a6:	e002      	b.n	800c4ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c4a8:	2303      	movs	r3, #3
 800c4aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c4ac:	bf00      	nop
  }
  return usb_status;
 800c4ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3714      	adds	r7, #20
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <memset>:
 800c4bc:	4402      	add	r2, r0
 800c4be:	4603      	mov	r3, r0
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d100      	bne.n	800c4c6 <memset+0xa>
 800c4c4:	4770      	bx	lr
 800c4c6:	f803 1b01 	strb.w	r1, [r3], #1
 800c4ca:	e7f9      	b.n	800c4c0 <memset+0x4>

0800c4cc <__libc_init_array>:
 800c4cc:	b570      	push	{r4, r5, r6, lr}
 800c4ce:	4d0d      	ldr	r5, [pc, #52]	@ (800c504 <__libc_init_array+0x38>)
 800c4d0:	4c0d      	ldr	r4, [pc, #52]	@ (800c508 <__libc_init_array+0x3c>)
 800c4d2:	1b64      	subs	r4, r4, r5
 800c4d4:	10a4      	asrs	r4, r4, #2
 800c4d6:	2600      	movs	r6, #0
 800c4d8:	42a6      	cmp	r6, r4
 800c4da:	d109      	bne.n	800c4f0 <__libc_init_array+0x24>
 800c4dc:	4d0b      	ldr	r5, [pc, #44]	@ (800c50c <__libc_init_array+0x40>)
 800c4de:	4c0c      	ldr	r4, [pc, #48]	@ (800c510 <__libc_init_array+0x44>)
 800c4e0:	f000 f826 	bl	800c530 <_init>
 800c4e4:	1b64      	subs	r4, r4, r5
 800c4e6:	10a4      	asrs	r4, r4, #2
 800c4e8:	2600      	movs	r6, #0
 800c4ea:	42a6      	cmp	r6, r4
 800c4ec:	d105      	bne.n	800c4fa <__libc_init_array+0x2e>
 800c4ee:	bd70      	pop	{r4, r5, r6, pc}
 800c4f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4f4:	4798      	blx	r3
 800c4f6:	3601      	adds	r6, #1
 800c4f8:	e7ee      	b.n	800c4d8 <__libc_init_array+0xc>
 800c4fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4fe:	4798      	blx	r3
 800c500:	3601      	adds	r6, #1
 800c502:	e7f2      	b.n	800c4ea <__libc_init_array+0x1e>
 800c504:	0800c5e8 	.word	0x0800c5e8
 800c508:	0800c5e8 	.word	0x0800c5e8
 800c50c:	0800c5e8 	.word	0x0800c5e8
 800c510:	0800c5ec 	.word	0x0800c5ec

0800c514 <memcpy>:
 800c514:	440a      	add	r2, r1
 800c516:	4291      	cmp	r1, r2
 800c518:	f100 33ff 	add.w	r3, r0, #4294967295
 800c51c:	d100      	bne.n	800c520 <memcpy+0xc>
 800c51e:	4770      	bx	lr
 800c520:	b510      	push	{r4, lr}
 800c522:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c526:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c52a:	4291      	cmp	r1, r2
 800c52c:	d1f9      	bne.n	800c522 <memcpy+0xe>
 800c52e:	bd10      	pop	{r4, pc}

0800c530 <_init>:
 800c530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c532:	bf00      	nop
 800c534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c536:	bc08      	pop	{r3}
 800c538:	469e      	mov	lr, r3
 800c53a:	4770      	bx	lr

0800c53c <_fini>:
 800c53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c53e:	bf00      	nop
 800c540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c542:	bc08      	pop	{r3}
 800c544:	469e      	mov	lr, r3
 800c546:	4770      	bx	lr
