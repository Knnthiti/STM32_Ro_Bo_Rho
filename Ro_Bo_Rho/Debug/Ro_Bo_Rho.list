
Ro_Bo_Rho.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e9f0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e0  0800eb78  0800eb78  0000fb78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee58  0800ee58  00010168  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee58  0800ee58  0000fe58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee60  0800ee60  00010168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee60  0800ee60  0000fe60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ee64  0800ee64  0000fe64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  0800ee68  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010168  2**0
                  CONTENTS
 10 .bss          00002468  20000168  20000168  00010168  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200025d0  200025d0  00010168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010168  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f8f4  00000000  00000000  00010198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000493c  00000000  00000000  0002fa8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c50  00000000  00000000  000343c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000160f  00000000  00000000  00036018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b3a  00000000  00000000  00037627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025b7f  00000000  00000000  0005f161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e181a  00000000  00000000  00084ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001664fa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ec8  00000000  00000000  00166540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  0016e408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000168 	.word	0x20000168
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800eb60 	.word	0x0800eb60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000016c 	.word	0x2000016c
 80001c4:	0800eb60 	.word	0x0800eb60

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96a 	b.w	8000e7c <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	460c      	mov	r4, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14e      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bcc:	4694      	mov	ip, r2
 8000bce:	458c      	cmp	ip, r1
 8000bd0:	4686      	mov	lr, r0
 8000bd2:	fab2 f282 	clz	r2, r2
 8000bd6:	d962      	bls.n	8000c9e <__udivmoddi4+0xde>
 8000bd8:	b14a      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bda:	f1c2 0320 	rsb	r3, r2, #32
 8000bde:	4091      	lsls	r1, r2
 8000be0:	fa20 f303 	lsr.w	r3, r0, r3
 8000be4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be8:	4319      	orrs	r1, r3
 8000bea:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f f68c 	uxth.w	r6, ip
 8000bf6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bfa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfe:	fb07 1114 	mls	r1, r7, r4, r1
 8000c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c06:	fb04 f106 	mul.w	r1, r4, r6
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c16:	f080 8112 	bcs.w	8000e3e <__udivmoddi4+0x27e>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 810f 	bls.w	8000e3e <__udivmoddi4+0x27e>
 8000c20:	3c02      	subs	r4, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a59      	subs	r1, r3, r1
 8000c26:	fa1f f38e 	uxth.w	r3, lr
 8000c2a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c2e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c36:	fb00 f606 	mul.w	r6, r0, r6
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	d90a      	bls.n	8000c54 <__udivmoddi4+0x94>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c46:	f080 80fc 	bcs.w	8000e42 <__udivmoddi4+0x282>
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	f240 80f9 	bls.w	8000e42 <__udivmoddi4+0x282>
 8000c50:	4463      	add	r3, ip
 8000c52:	3802      	subs	r0, #2
 8000c54:	1b9b      	subs	r3, r3, r6
 8000c56:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	b11d      	cbz	r5, 8000c66 <__udivmoddi4+0xa6>
 8000c5e:	40d3      	lsrs	r3, r2
 8000c60:	2200      	movs	r2, #0
 8000c62:	e9c5 3200 	strd	r3, r2, [r5]
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d905      	bls.n	8000c7a <__udivmoddi4+0xba>
 8000c6e:	b10d      	cbz	r5, 8000c74 <__udivmoddi4+0xb4>
 8000c70:	e9c5 0100 	strd	r0, r1, [r5]
 8000c74:	2100      	movs	r1, #0
 8000c76:	4608      	mov	r0, r1
 8000c78:	e7f5      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c7a:	fab3 f183 	clz	r1, r3
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d146      	bne.n	8000d10 <__udivmoddi4+0x150>
 8000c82:	42a3      	cmp	r3, r4
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xcc>
 8000c86:	4290      	cmp	r0, r2
 8000c88:	f0c0 80f0 	bcc.w	8000e6c <__udivmoddi4+0x2ac>
 8000c8c:	1a86      	subs	r6, r0, r2
 8000c8e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	2d00      	cmp	r5, #0
 8000c96:	d0e6      	beq.n	8000c66 <__udivmoddi4+0xa6>
 8000c98:	e9c5 6300 	strd	r6, r3, [r5]
 8000c9c:	e7e3      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	f040 8090 	bne.w	8000dc4 <__udivmoddi4+0x204>
 8000ca4:	eba1 040c 	sub.w	r4, r1, ip
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cba:	fb08 4416 	mls	r4, r8, r6, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb07 f006 	mul.w	r0, r7, r6
 8000cc6:	4298      	cmp	r0, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x11c>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x11a>
 8000cd4:	4298      	cmp	r0, r3
 8000cd6:	f200 80cd 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000cda:	4626      	mov	r6, r4
 8000cdc:	1a1c      	subs	r4, r3, r0
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb00 f707 	mul.w	r7, r0, r7
 8000cf2:	429f      	cmp	r7, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x148>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x146>
 8000d00:	429f      	cmp	r7, r3
 8000d02:	f200 80b0 	bhi.w	8000e66 <__udivmoddi4+0x2a6>
 8000d06:	4620      	mov	r0, r4
 8000d08:	1bdb      	subs	r3, r3, r7
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	e7a5      	b.n	8000c5c <__udivmoddi4+0x9c>
 8000d10:	f1c1 0620 	rsb	r6, r1, #32
 8000d14:	408b      	lsls	r3, r1
 8000d16:	fa22 f706 	lsr.w	r7, r2, r6
 8000d1a:	431f      	orrs	r7, r3
 8000d1c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d20:	fa04 f301 	lsl.w	r3, r4, r1
 8000d24:	ea43 030c 	orr.w	r3, r3, ip
 8000d28:	40f4      	lsrs	r4, r6
 8000d2a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2e:	0c38      	lsrs	r0, r7, #16
 8000d30:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d34:	fbb4 fef0 	udiv	lr, r4, r0
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d40:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d44:	fb0e f90c 	mul.w	r9, lr, ip
 8000d48:	45a1      	cmp	r9, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x1a6>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d56:	f080 8084 	bcs.w	8000e62 <__udivmoddi4+0x2a2>
 8000d5a:	45a1      	cmp	r9, r4
 8000d5c:	f240 8081 	bls.w	8000e62 <__udivmoddi4+0x2a2>
 8000d60:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	eba4 0409 	sub.w	r4, r4, r9
 8000d6a:	fa1f f983 	uxth.w	r9, r3
 8000d6e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d72:	fb00 4413 	mls	r4, r0, r3, r4
 8000d76:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d7e:	45a4      	cmp	ip, r4
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x1d2>
 8000d82:	193c      	adds	r4, r7, r4
 8000d84:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d88:	d267      	bcs.n	8000e5a <__udivmoddi4+0x29a>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	d965      	bls.n	8000e5a <__udivmoddi4+0x29a>
 8000d8e:	3b02      	subs	r3, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d96:	fba0 9302 	umull	r9, r3, r0, r2
 8000d9a:	eba4 040c 	sub.w	r4, r4, ip
 8000d9e:	429c      	cmp	r4, r3
 8000da0:	46ce      	mov	lr, r9
 8000da2:	469c      	mov	ip, r3
 8000da4:	d351      	bcc.n	8000e4a <__udivmoddi4+0x28a>
 8000da6:	d04e      	beq.n	8000e46 <__udivmoddi4+0x286>
 8000da8:	b155      	cbz	r5, 8000dc0 <__udivmoddi4+0x200>
 8000daa:	ebb8 030e 	subs.w	r3, r8, lr
 8000dae:	eb64 040c 	sbc.w	r4, r4, ip
 8000db2:	fa04 f606 	lsl.w	r6, r4, r6
 8000db6:	40cb      	lsrs	r3, r1
 8000db8:	431e      	orrs	r6, r3
 8000dba:	40cc      	lsrs	r4, r1
 8000dbc:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	e750      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000dc4:	f1c2 0320 	rsb	r3, r2, #32
 8000dc8:	fa20 f103 	lsr.w	r1, r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa24 f303 	lsr.w	r3, r4, r3
 8000dd4:	4094      	lsls	r4, r2
 8000dd6:	430c      	orrs	r4, r1
 8000dd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ddc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de0:	fa1f f78c 	uxth.w	r7, ip
 8000de4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dec:	0c23      	lsrs	r3, r4, #16
 8000dee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df2:	fb00 f107 	mul.w	r1, r0, r7
 8000df6:	4299      	cmp	r1, r3
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x24c>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e02:	d22c      	bcs.n	8000e5e <__udivmoddi4+0x29e>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	d92a      	bls.n	8000e5e <__udivmoddi4+0x29e>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1a5b      	subs	r3, r3, r1
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e14:	fb08 3311 	mls	r3, r8, r1, r3
 8000e18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e1c:	fb01 f307 	mul.w	r3, r1, r7
 8000e20:	42a3      	cmp	r3, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x276>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e2c:	d213      	bcs.n	8000e56 <__udivmoddi4+0x296>
 8000e2e:	42a3      	cmp	r3, r4
 8000e30:	d911      	bls.n	8000e56 <__udivmoddi4+0x296>
 8000e32:	3902      	subs	r1, #2
 8000e34:	4464      	add	r4, ip
 8000e36:	1ae4      	subs	r4, r4, r3
 8000e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e3c:	e739      	b.n	8000cb2 <__udivmoddi4+0xf2>
 8000e3e:	4604      	mov	r4, r0
 8000e40:	e6f0      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e42:	4608      	mov	r0, r1
 8000e44:	e706      	b.n	8000c54 <__udivmoddi4+0x94>
 8000e46:	45c8      	cmp	r8, r9
 8000e48:	d2ae      	bcs.n	8000da8 <__udivmoddi4+0x1e8>
 8000e4a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e4e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e52:	3801      	subs	r0, #1
 8000e54:	e7a8      	b.n	8000da8 <__udivmoddi4+0x1e8>
 8000e56:	4631      	mov	r1, r6
 8000e58:	e7ed      	b.n	8000e36 <__udivmoddi4+0x276>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	e799      	b.n	8000d92 <__udivmoddi4+0x1d2>
 8000e5e:	4630      	mov	r0, r6
 8000e60:	e7d4      	b.n	8000e0c <__udivmoddi4+0x24c>
 8000e62:	46d6      	mov	lr, sl
 8000e64:	e77f      	b.n	8000d66 <__udivmoddi4+0x1a6>
 8000e66:	4463      	add	r3, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e74d      	b.n	8000d08 <__udivmoddi4+0x148>
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	4623      	mov	r3, r4
 8000e70:	4608      	mov	r0, r1
 8000e72:	e70f      	b.n	8000c94 <__udivmoddi4+0xd4>
 8000e74:	3e02      	subs	r6, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	e730      	b.n	8000cdc <__udivmoddi4+0x11c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e84:	f001 fe50 	bl	8002b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e88:	f000 fa92 	bl	80013b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8c:	f000 ffdc 	bl	8001e48 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e90:	f000 fc06 	bl	80016a0 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000e94:	f000 fcac 	bl	80017f0 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000e98:	f000 faf4 	bl	8001484 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000e9c:	f000 fb72 	bl	8001584 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000ea0:	f000 fba6 	bl	80015f0 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000ea4:	f000 fd4c 	bl	8001940 <MX_TIM8_Init>
  MX_TIM9_Init();
 8000ea8:	f000 fda2 	bl	80019f0 <MX_TIM9_Init>
  MX_TIM10_Init();
 8000eac:	f000 fdf0 	bl	8001a90 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000eb0:	f000 fe3c 	bl	8001b2c <MX_TIM11_Init>
  MX_TIM12_Init();
 8000eb4:	f000 fe88 	bl	8001bc8 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000eb8:	f000 fed6 	bl	8001c68 <MX_TIM13_Init>
  MX_TIM14_Init();
 8000ebc:	f000 ff22 	bl	8001d04 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 8000ec0:	f000 ff98 	bl	8001df4 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000ec4:	f00b fd10 	bl	800c8e8 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8000ec8:	f000 ff6a 	bl	8001da0 <MX_UART4_Init>
  MX_I2C2_Init();
 8000ecc:	f000 fb2c 	bl	8001528 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000ed0:	f000 fc3a 	bl	8001748 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000ed4:	f000 fce0 	bl	8001898 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
   Motor_setup_LF(&htim14   ,&htim5    ,"PC05");
 8000ed8:	4a4c      	ldr	r2, [pc, #304]	@ (800100c <main+0x18c>)
 8000eda:	494d      	ldr	r1, [pc, #308]	@ (8001010 <main+0x190>)
 8000edc:	484d      	ldr	r0, [pc, #308]	@ (8001014 <main+0x194>)
 8000ede:	f008 f881 	bl	8008fe4 <Motor_setup_LF>
   Motor_setup_LB(&htim12   ,&htim1    ,"PE12");
 8000ee2:	4a4d      	ldr	r2, [pc, #308]	@ (8001018 <main+0x198>)
 8000ee4:	494d      	ldr	r1, [pc, #308]	@ (800101c <main+0x19c>)
 8000ee6:	484e      	ldr	r0, [pc, #312]	@ (8001020 <main+0x1a0>)
 8000ee8:	f008 f8aa 	bl	8009040 <Motor_setup_LB>
   Motor_setup_RF(&htim11   ,&htim8    ,"PE01");
 8000eec:	4a4d      	ldr	r2, [pc, #308]	@ (8001024 <main+0x1a4>)
 8000eee:	494e      	ldr	r1, [pc, #312]	@ (8001028 <main+0x1a8>)
 8000ef0:	484e      	ldr	r0, [pc, #312]	@ (800102c <main+0x1ac>)
 8000ef2:	f008 f8d3 	bl	800909c <Motor_setup_RF>
   Motor_setup_RB(&htim12   ,&htim4    ,"PD09");
 8000ef6:	4a4e      	ldr	r2, [pc, #312]	@ (8001030 <main+0x1b0>)
 8000ef8:	494e      	ldr	r1, [pc, #312]	@ (8001034 <main+0x1b4>)
 8000efa:	4849      	ldr	r0, [pc, #292]	@ (8001020 <main+0x1a0>)
 8000efc:	f008 f8fc 	bl	80090f8 <Motor_setup_RB>

   HAL_TIMEx_PWMN_Start(&htim9, TIM_CHANNEL_2);
 8000f00:	2104      	movs	r1, #4
 8000f02:	484d      	ldr	r0, [pc, #308]	@ (8001038 <main+0x1b8>)
 8000f04:	f005 fc26 	bl	8006754 <HAL_TIMEx_PWMN_Start>

   Motor_setup_EXTRA1(&htim9,&htim3    ,"PC13");
 8000f08:	4a4c      	ldr	r2, [pc, #304]	@ (800103c <main+0x1bc>)
 8000f0a:	494d      	ldr	r1, [pc, #308]	@ (8001040 <main+0x1c0>)
 8000f0c:	484a      	ldr	r0, [pc, #296]	@ (8001038 <main+0x1b8>)
 8000f0e:	f008 f921 	bl	8009154 <Motor_setup_EXTRA1>
   Motor_setup_EXTRA2(&htim10,&htim2   ,"PE00");
 8000f12:	4a4c      	ldr	r2, [pc, #304]	@ (8001044 <main+0x1c4>)
 8000f14:	494c      	ldr	r1, [pc, #304]	@ (8001048 <main+0x1c8>)
 8000f16:	484d      	ldr	r0, [pc, #308]	@ (800104c <main+0x1cc>)
 8000f18:	f008 f94a 	bl	80091b0 <Motor_setup_EXTRA2>

   Setup_Gear_Ratio(27);
 8000f1c:	201b      	movs	r0, #27
 8000f1e:	f008 f995 	bl	800924c <Setup_Gear_Ratio>
   Setup_CPR(68);
 8000f22:	2044      	movs	r0, #68	@ 0x44
 8000f24:	f008 f982 	bl	800922c <Setup_CPR>
   Setup_frequency_Motor(100);
 8000f28:	2064      	movs	r0, #100	@ 0x64
 8000f2a:	f008 f99f 	bl	800926c <Setup_frequency_Motor>

   Setup_PID_LF(1.0 ,0.0 ,0.2 ,0 ,300);
 8000f2e:	ed9f 2a48 	vldr	s4, [pc, #288]	@ 8001050 <main+0x1d0>
 8000f32:	eddf 1a48 	vldr	s3, [pc, #288]	@ 8001054 <main+0x1d4>
 8000f36:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 8001058 <main+0x1d8>
 8000f3a:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8001054 <main+0x1d4>
 8000f3e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000f42:	f008 fa2b 	bl	800939c <Setup_PID_LF>
   Setup_PID_LB(1.0 ,0.0 ,0.2 ,0 ,300);
 8000f46:	ed9f 2a42 	vldr	s4, [pc, #264]	@ 8001050 <main+0x1d0>
 8000f4a:	eddf 1a42 	vldr	s3, [pc, #264]	@ 8001054 <main+0x1d4>
 8000f4e:	ed9f 1a42 	vldr	s2, [pc, #264]	@ 8001058 <main+0x1d8>
 8000f52:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8001054 <main+0x1d4>
 8000f56:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000f5a:	f008 fa4b 	bl	80093f4 <Setup_PID_LB>
   Setup_PID_RF(1.0 ,0.0 ,0.2 ,0 ,300);
 8000f5e:	ed9f 2a3c 	vldr	s4, [pc, #240]	@ 8001050 <main+0x1d0>
 8000f62:	eddf 1a3c 	vldr	s3, [pc, #240]	@ 8001054 <main+0x1d4>
 8000f66:	ed9f 1a3c 	vldr	s2, [pc, #240]	@ 8001058 <main+0x1d8>
 8000f6a:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8001054 <main+0x1d4>
 8000f6e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000f72:	f008 fa6b 	bl	800944c <Setup_PID_RF>
   Setup_PID_RB(1.0 ,0.0 ,0.2 ,0 ,300);
 8000f76:	ed9f 2a36 	vldr	s4, [pc, #216]	@ 8001050 <main+0x1d0>
 8000f7a:	eddf 1a36 	vldr	s3, [pc, #216]	@ 8001054 <main+0x1d4>
 8000f7e:	ed9f 1a36 	vldr	s2, [pc, #216]	@ 8001058 <main+0x1d8>
 8000f82:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8001054 <main+0x1d4>
 8000f86:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000f8a:	f008 fa8b 	bl	80094a4 <Setup_PID_RB>

//   Setup_PID_EXTRA1(0.5 ,0.1 ,0 ,0 ,280);
//   Setup_PID_EXTRA2(0.5 ,0.1 ,0 ,0 ,280);

   Setup_frequency_Forward_Kinematic(100);
 8000f8e:	2064      	movs	r0, #100	@ 0x64
 8000f90:	f009 fac2 	bl	800a518 <Setup_frequency_Forward_Kinematic>
   Setup_Forward_Kinematic(0.23f ,0.23f ,0.06f);
 8000f94:	ed9f 1a31 	vldr	s2, [pc, #196]	@ 800105c <main+0x1dc>
 8000f98:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8001060 <main+0x1e0>
 8000f9c:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8001060 <main+0x1e0>
 8000fa0:	f009 fa9c 	bl	800a4dc <Setup_Forward_Kinematic>

   Setup_Inverse_Kinematic(0.23f ,0.23f ,0.06f);
 8000fa4:	ed9f 1a2d 	vldr	s2, [pc, #180]	@ 800105c <main+0x1dc>
 8000fa8:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8001060 <main+0x1e0>
 8000fac:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001060 <main+0x1e0>
 8000fb0:	f009 fad2 	bl	800a558 <Setup_Inverse_Kinematic>

   //UAST2 esp_s3_zero to STM32
//   HAL_UART_Receive_IT(&huart2, (uint8_t *)&temp_buffer, 1);

   HAL_UART_Receive_IT(&huart2, (uint8_t*)&Str_PS2, sizeof(Str_PS2));
 8000fb4:	2208      	movs	r2, #8
 8000fb6:	492b      	ldr	r1, [pc, #172]	@ (8001064 <main+0x1e4>)
 8000fb8:	482b      	ldr	r0, [pc, #172]	@ (8001068 <main+0x1e8>)
 8000fba:	f005 fda8 	bl	8006b0e <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if ((uwTick - PastTime) > 10) {
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800106c <main+0x1ec>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a2b      	ldr	r2, [pc, #172]	@ (8001070 <main+0x1f0>)
 8000fc4:	6812      	ldr	r2, [r2, #0]
 8000fc6:	1a9b      	subs	r3, r3, r2
 8000fc8:	2b0a      	cmp	r3, #10
 8000fca:	d9f8      	bls.n	8000fbe <main+0x13e>
	    PastTime = uwTick;
 8000fcc:	4b27      	ldr	r3, [pc, #156]	@ (800106c <main+0x1ec>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b27      	ldr	r3, [pc, #156]	@ (8001070 <main+0x1f0>)
 8000fd4:	601a      	str	r2, [r3, #0]
//	        digitalWrite("PE08", 0);  // LED OFF
//	    }else{
//	    	digitalWrite("PE08", 1);  // LED ON
//	    }

	    if (((uwTick - last_uart_data_time) < UART_TIMEOUT_MS) && (Str_PS2.Header[0] == 'R') && (Str_PS2.Header[1] == 'B')) {
 8000fd6:	4b25      	ldr	r3, [pc, #148]	@ (800106c <main+0x1ec>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	4b26      	ldr	r3, [pc, #152]	@ (8001074 <main+0x1f4>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000fe4:	d24a      	bcs.n	800107c <main+0x1fc>
 8000fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8001064 <main+0x1e4>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b52      	cmp	r3, #82	@ 0x52
 8000fec:	d146      	bne.n	800107c <main+0x1fc>
 8000fee:	4b1d      	ldr	r3, [pc, #116]	@ (8001064 <main+0x1e4>)
 8000ff0:	785b      	ldrb	r3, [r3, #1]
 8000ff2:	2b42      	cmp	r3, #66	@ 0x42
 8000ff4:	d142      	bne.n	800107c <main+0x1fc>
	    	      digitalWrite("PE15", 1);
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	481f      	ldr	r0, [pc, #124]	@ (8001078 <main+0x1f8>)
 8000ffa:	f008 ff09 	bl	8009e10 <digitalWrite>

	    	      Str_PS2.Header[0] = 0;
 8000ffe:	4b19      	ldr	r3, [pc, #100]	@ (8001064 <main+0x1e4>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
	    	      Str_PS2.Header[1] = 0;
 8001004:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <main+0x1e4>)
 8001006:	2200      	movs	r2, #0
 8001008:	705a      	strb	r2, [r3, #1]
 800100a:	e06e      	b.n	80010ea <main+0x26a>
 800100c:	0800eb78 	.word	0x0800eb78
 8001010:	20000398 	.word	0x20000398
 8001014:	20000590 	.word	0x20000590
 8001018:	0800eb80 	.word	0x0800eb80
 800101c:	20000278 	.word	0x20000278
 8001020:	20000500 	.word	0x20000500
 8001024:	0800eb88 	.word	0x0800eb88
 8001028:	200003e0 	.word	0x200003e0
 800102c:	200004b8 	.word	0x200004b8
 8001030:	0800eb90 	.word	0x0800eb90
 8001034:	20000350 	.word	0x20000350
 8001038:	20000428 	.word	0x20000428
 800103c:	0800eb98 	.word	0x0800eb98
 8001040:	20000308 	.word	0x20000308
 8001044:	0800eba0 	.word	0x0800eba0
 8001048:	200002c0 	.word	0x200002c0
 800104c:	20000470 	.word	0x20000470
 8001050:	43960000 	.word	0x43960000
 8001054:	00000000 	.word	0x00000000
 8001058:	3e4ccccd 	.word	0x3e4ccccd
 800105c:	3d75c28f 	.word	0x3d75c28f
 8001060:	3e6b851f 	.word	0x3e6b851f
 8001064:	200006a8 	.word	0x200006a8
 8001068:	20000620 	.word	0x20000620
 800106c:	200006b0 	.word	0x200006b0
 8001070:	2000068c 	.word	0x2000068c
 8001074:	20000684 	.word	0x20000684
 8001078:	0800eba8 	.word	0x0800eba8
	    	    } else {
	    	      if (!uart_resetting && ((uwTick - last_uart_data_time) > UART_TIMEOUT_MS)) {
 800107c:	4bb7      	ldr	r3, [pc, #732]	@ (800135c <main+0x4dc>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d120      	bne.n	80010c6 <main+0x246>
 8001084:	4bb6      	ldr	r3, [pc, #728]	@ (8001360 <main+0x4e0>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4bb6      	ldr	r3, [pc, #728]	@ (8001364 <main+0x4e4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001092:	d918      	bls.n	80010c6 <main+0x246>
	    	        uart_resetting = 1;  // ตั้ง flag เพื่อป้อง�?ัน reset ซ้ำซ้อน
 8001094:	4bb1      	ldr	r3, [pc, #708]	@ (800135c <main+0x4dc>)
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]

	    	        HAL_UART_DeInit(&huart2);
 800109a:	48b3      	ldr	r0, [pc, #716]	@ (8001368 <main+0x4e8>)
 800109c:	f005 fd05 	bl	8006aaa <HAL_UART_DeInit>
	    	        HAL_Delay(10);
 80010a0:	200a      	movs	r0, #10
 80010a2:	f001 fdb3 	bl	8002c0c <HAL_Delay>
	    	        MX_USART2_UART_Init();
 80010a6:	f000 fea5 	bl	8001df4 <MX_USART2_UART_Init>

	    	        HAL_UART_Receive_IT(&huart2, (uint8_t *)&Str_PS2, sizeof(Str_PS2));
 80010aa:	2208      	movs	r2, #8
 80010ac:	49af      	ldr	r1, [pc, #700]	@ (800136c <main+0x4ec>)
 80010ae:	48ae      	ldr	r0, [pc, #696]	@ (8001368 <main+0x4e8>)
 80010b0:	f005 fd2d 	bl	8006b0e <HAL_UART_Receive_IT>
//	    	        HAL_UART_Receive_IT(&huart2, (uint8_t *)&temp_buffer, 1);

	    	        memset(&Str_PS2, 0, sizeof(Str_PS2));
 80010b4:	2208      	movs	r2, #8
 80010b6:	2100      	movs	r1, #0
 80010b8:	48ac      	ldr	r0, [pc, #688]	@ (800136c <main+0x4ec>)
 80010ba:	f00c f921 	bl	800d300 <memset>

	    	        digitalWrite("PE15", 0);
 80010be:	2100      	movs	r1, #0
 80010c0:	48ab      	ldr	r0, [pc, #684]	@ (8001370 <main+0x4f0>)
 80010c2:	f008 fea5 	bl	8009e10 <digitalWrite>
	    	      }
	    	      // หยุดมอเตอร์เพื่อความปลอดภัย
	    	      Motor_DutyCycle_LF(0);
 80010c6:	2000      	movs	r0, #0
 80010c8:	f008 fac2 	bl	8009650 <Motor_DutyCycle_LF>
	    	      Motor_DutyCycle_LB(0);
 80010cc:	2000      	movs	r0, #0
 80010ce:	f008 fb17 	bl	8009700 <Motor_DutyCycle_LB>
	    	      Motor_DutyCycle_RF(0);
 80010d2:	2000      	movs	r0, #0
 80010d4:	f008 fb70 	bl	80097b8 <Motor_DutyCycle_RF>
	    	      Motor_DutyCycle_RB(0);
 80010d8:	2000      	movs	r0, #0
 80010da:	f008 fbc9 	bl	8009870 <Motor_DutyCycle_RB>

	    	      Motor_DutyCycle_EXTRA1(0);
 80010de:	2000      	movs	r0, #0
 80010e0:	f008 fc1e 	bl	8009920 <Motor_DutyCycle_EXTRA1>
	    	      Motor_DutyCycle_EXTRA2(0);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f008 fc73 	bl	80099d0 <Motor_DutyCycle_EXTRA2>
	    // count[2] = getCount(&htim8);
	    // count[3] = getCount(&htim4);
	    // count[4] = getCount(&htim2);
	    // count[5] = getCount(&htim3);

	    RPM[0] = getRPM_TIM_Wheel(&htim5, LF);
 80010ea:	2100      	movs	r1, #0
 80010ec:	48a1      	ldr	r0, [pc, #644]	@ (8001374 <main+0x4f4>)
 80010ee:	f008 f8e7 	bl	80092c0 <getRPM_TIM_Wheel>
 80010f2:	eef0 7a40 	vmov.f32	s15, s0
 80010f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010fa:	ee17 3a90 	vmov	r3, s15
 80010fe:	b21a      	sxth	r2, r3
 8001100:	4b9d      	ldr	r3, [pc, #628]	@ (8001378 <main+0x4f8>)
 8001102:	801a      	strh	r2, [r3, #0]
	    RPM[1] = -getRPM_TIM_Wheel(&htim1, LB);
 8001104:	2101      	movs	r1, #1
 8001106:	489d      	ldr	r0, [pc, #628]	@ (800137c <main+0x4fc>)
 8001108:	f008 f8da 	bl	80092c0 <getRPM_TIM_Wheel>
 800110c:	eef0 7a40 	vmov.f32	s15, s0
 8001110:	eef1 7a67 	vneg.f32	s15, s15
 8001114:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001118:	ee17 3a90 	vmov	r3, s15
 800111c:	b21a      	sxth	r2, r3
 800111e:	4b96      	ldr	r3, [pc, #600]	@ (8001378 <main+0x4f8>)
 8001120:	805a      	strh	r2, [r3, #2]
	    RPM[2] = getRPM_TIM_Wheel(&htim8, RF);
 8001122:	2102      	movs	r1, #2
 8001124:	4896      	ldr	r0, [pc, #600]	@ (8001380 <main+0x500>)
 8001126:	f008 f8cb 	bl	80092c0 <getRPM_TIM_Wheel>
 800112a:	eef0 7a40 	vmov.f32	s15, s0
 800112e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001132:	ee17 3a90 	vmov	r3, s15
 8001136:	b21a      	sxth	r2, r3
 8001138:	4b8f      	ldr	r3, [pc, #572]	@ (8001378 <main+0x4f8>)
 800113a:	809a      	strh	r2, [r3, #4]
	    RPM[3] = getRPM_TIM_Wheel(&htim4, RB);
 800113c:	2103      	movs	r1, #3
 800113e:	4891      	ldr	r0, [pc, #580]	@ (8001384 <main+0x504>)
 8001140:	f008 f8be 	bl	80092c0 <getRPM_TIM_Wheel>
 8001144:	eef0 7a40 	vmov.f32	s15, s0
 8001148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800114c:	ee17 3a90 	vmov	r3, s15
 8001150:	b21a      	sxth	r2, r3
 8001152:	4b89      	ldr	r3, [pc, #548]	@ (8001378 <main+0x4f8>)
 8001154:	80da      	strh	r2, [r3, #6]
        	PID[3] = Motor_Speed_RB(getRad_s_to_RPM(get_w_RB()), RPM[3]);
        }

        Game_Play_ROBOT_1();
#else
        Vx = map(Str_PS2.stickValue[0], 100.0f, -100.0f, 2.3f, -2.3f);
 8001156:	4b85      	ldr	r3, [pc, #532]	@ (800136c <main+0x4ec>)
 8001158:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800115c:	ee07 3a90 	vmov	s15, r3
 8001160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001164:	ed9f 2a88 	vldr	s4, [pc, #544]	@ 8001388 <main+0x508>
 8001168:	eddf 1a88 	vldr	s3, [pc, #544]	@ 800138c <main+0x50c>
 800116c:	ed9f 1a88 	vldr	s2, [pc, #544]	@ 8001390 <main+0x510>
 8001170:	eddf 0a88 	vldr	s1, [pc, #544]	@ 8001394 <main+0x514>
 8001174:	eeb0 0a67 	vmov.f32	s0, s15
 8001178:	f009 fbf6 	bl	800a968 <map>
 800117c:	eef0 7a40 	vmov.f32	s15, s0
 8001180:	4b85      	ldr	r3, [pc, #532]	@ (8001398 <main+0x518>)
 8001182:	edc3 7a00 	vstr	s15, [r3]
        Vy = map(Str_PS2.stickValue[1], 100.0f, -100.0f, 2.3f, -2.3f);
 8001186:	4b79      	ldr	r3, [pc, #484]	@ (800136c <main+0x4ec>)
 8001188:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800118c:	ee07 3a90 	vmov	s15, r3
 8001190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001194:	ed9f 2a7c 	vldr	s4, [pc, #496]	@ 8001388 <main+0x508>
 8001198:	eddf 1a7c 	vldr	s3, [pc, #496]	@ 800138c <main+0x50c>
 800119c:	ed9f 1a7c 	vldr	s2, [pc, #496]	@ 8001390 <main+0x510>
 80011a0:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 8001394 <main+0x514>
 80011a4:	eeb0 0a67 	vmov.f32	s0, s15
 80011a8:	f009 fbde 	bl	800a968 <map>
 80011ac:	eef0 7a40 	vmov.f32	s15, s0
 80011b0:	4b7a      	ldr	r3, [pc, #488]	@ (800139c <main+0x51c>)
 80011b2:	edc3 7a00 	vstr	s15, [r3]
        Vz = map(Str_PS2.stickValue[3], 100.0f, -100.0f, 4.0f, -4.0f);
 80011b6:	4b6d      	ldr	r3, [pc, #436]	@ (800136c <main+0x4ec>)
 80011b8:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80011bc:	ee07 3a90 	vmov	s15, r3
 80011c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011c4:	eeb9 2a00 	vmov.f32	s4, #144	@ 0xc0800000 -4.0
 80011c8:	eef1 1a00 	vmov.f32	s3, #16	@ 0x40800000  4.0
 80011cc:	ed9f 1a70 	vldr	s2, [pc, #448]	@ 8001390 <main+0x510>
 80011d0:	eddf 0a70 	vldr	s1, [pc, #448]	@ 8001394 <main+0x514>
 80011d4:	eeb0 0a67 	vmov.f32	s0, s15
 80011d8:	f009 fbc6 	bl	800a968 <map>
 80011dc:	eef0 7a40 	vmov.f32	s15, s0
 80011e0:	4b6f      	ldr	r3, [pc, #444]	@ (80013a0 <main+0x520>)
 80011e2:	edc3 7a00 	vstr	s15, [r3]

        Inverse_Kinematic(Vx, Vy, Vz);
 80011e6:	4b6c      	ldr	r3, [pc, #432]	@ (8001398 <main+0x518>)
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	4b6b      	ldr	r3, [pc, #428]	@ (800139c <main+0x51c>)
 80011ee:	ed93 7a00 	vldr	s14, [r3]
 80011f2:	4b6b      	ldr	r3, [pc, #428]	@ (80013a0 <main+0x520>)
 80011f4:	edd3 6a00 	vldr	s13, [r3]
 80011f8:	eeb0 1a66 	vmov.f32	s2, s13
 80011fc:	eef0 0a47 	vmov.f32	s1, s14
 8001200:	eeb0 0a67 	vmov.f32	s0, s15
 8001204:	f009 f9c6 	bl	800a594 <Inverse_Kinematic>
        Inverse_Kinematic_Lock_Direction(Vx ,Vy ,Vz ,Rad);
 8001208:	4b63      	ldr	r3, [pc, #396]	@ (8001398 <main+0x518>)
 800120a:	edd3 7a00 	vldr	s15, [r3]
 800120e:	4b63      	ldr	r3, [pc, #396]	@ (800139c <main+0x51c>)
 8001210:	ed93 7a00 	vldr	s14, [r3]
 8001214:	4b62      	ldr	r3, [pc, #392]	@ (80013a0 <main+0x520>)
 8001216:	edd3 6a00 	vldr	s13, [r3]
 800121a:	4b62      	ldr	r3, [pc, #392]	@ (80013a4 <main+0x524>)
 800121c:	ed93 6a00 	vldr	s12, [r3]
 8001220:	eef0 1a46 	vmov.f32	s3, s12
 8001224:	eeb0 1a66 	vmov.f32	s2, s13
 8001228:	eef0 0a47 	vmov.f32	s1, s14
 800122c:	eeb0 0a67 	vmov.f32	s0, s15
 8001230:	f009 fa42 	bl	800a6b8 <Inverse_Kinematic_Lock_Direction>

        PID[0] = Motor_Speed_LF(getRad_s_to_RPM(get_w_LF()), RPM[0]);
 8001234:	f009 fb60 	bl	800a8f8 <get_w_LF>
 8001238:	eef0 7a40 	vmov.f32	s15, s0
 800123c:	eeb0 0a67 	vmov.f32	s0, s15
 8001240:	f008 f824 	bl	800928c <getRad_s_to_RPM>
 8001244:	eef0 7a40 	vmov.f32	s15, s0
 8001248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800124c:	ee17 3a90 	vmov	r3, s15
 8001250:	b21b      	sxth	r3, r3
 8001252:	4a49      	ldr	r2, [pc, #292]	@ (8001378 <main+0x4f8>)
 8001254:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001258:	ee07 2a90 	vmov	s15, r2
 800125c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001260:	eeb0 0a67 	vmov.f32	s0, s15
 8001264:	4618      	mov	r0, r3
 8001266:	f008 fc0b 	bl	8009a80 <Motor_Speed_LF>
 800126a:	eef0 7a40 	vmov.f32	s15, s0
 800126e:	4b4e      	ldr	r3, [pc, #312]	@ (80013a8 <main+0x528>)
 8001270:	edc3 7a00 	vstr	s15, [r3]
        PID[1] = Motor_Speed_LB(getRad_s_to_RPM(get_w_LB()), RPM[1]);
 8001274:	f009 fb4e 	bl	800a914 <get_w_LB>
 8001278:	eef0 7a40 	vmov.f32	s15, s0
 800127c:	eeb0 0a67 	vmov.f32	s0, s15
 8001280:	f008 f804 	bl	800928c <getRad_s_to_RPM>
 8001284:	eef0 7a40 	vmov.f32	s15, s0
 8001288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800128c:	ee17 3a90 	vmov	r3, s15
 8001290:	b21b      	sxth	r3, r3
 8001292:	4a39      	ldr	r2, [pc, #228]	@ (8001378 <main+0x4f8>)
 8001294:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001298:	ee07 2a90 	vmov	s15, r2
 800129c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a0:	eeb0 0a67 	vmov.f32	s0, s15
 80012a4:	4618      	mov	r0, r3
 80012a6:	f008 fc5d 	bl	8009b64 <Motor_Speed_LB>
 80012aa:	eef0 7a40 	vmov.f32	s15, s0
 80012ae:	4b3e      	ldr	r3, [pc, #248]	@ (80013a8 <main+0x528>)
 80012b0:	edc3 7a01 	vstr	s15, [r3, #4]
        PID[2] = Motor_Speed_RF(getRad_s_to_RPM(get_w_RF()), RPM[2]);
 80012b4:	f009 fb3c 	bl	800a930 <get_w_RF>
 80012b8:	eef0 7a40 	vmov.f32	s15, s0
 80012bc:	eeb0 0a67 	vmov.f32	s0, s15
 80012c0:	f007 ffe4 	bl	800928c <getRad_s_to_RPM>
 80012c4:	eef0 7a40 	vmov.f32	s15, s0
 80012c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012cc:	ee17 3a90 	vmov	r3, s15
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	4a29      	ldr	r2, [pc, #164]	@ (8001378 <main+0x4f8>)
 80012d4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80012d8:	ee07 2a90 	vmov	s15, r2
 80012dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e0:	eeb0 0a67 	vmov.f32	s0, s15
 80012e4:	4618      	mov	r0, r3
 80012e6:	f008 fcaf 	bl	8009c48 <Motor_Speed_RF>
 80012ea:	eef0 7a40 	vmov.f32	s15, s0
 80012ee:	4b2e      	ldr	r3, [pc, #184]	@ (80013a8 <main+0x528>)
 80012f0:	edc3 7a02 	vstr	s15, [r3, #8]
        PID[3] = Motor_Speed_RB(getRad_s_to_RPM(get_w_RB()), RPM[3]);
 80012f4:	f009 fb2a 	bl	800a94c <get_w_RB>
 80012f8:	eef0 7a40 	vmov.f32	s15, s0
 80012fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001300:	f007 ffc4 	bl	800928c <getRad_s_to_RPM>
 8001304:	eef0 7a40 	vmov.f32	s15, s0
 8001308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800130c:	ee17 3a90 	vmov	r3, s15
 8001310:	b21b      	sxth	r3, r3
 8001312:	4a19      	ldr	r2, [pc, #100]	@ (8001378 <main+0x4f8>)
 8001314:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001318:	ee07 2a90 	vmov	s15, r2
 800131c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001320:	eeb0 0a67 	vmov.f32	s0, s15
 8001324:	4618      	mov	r0, r3
 8001326:	f008 fd01 	bl	8009d2c <Motor_Speed_RB>
 800132a:	eef0 7a40 	vmov.f32	s15, s0
 800132e:	4b1e      	ldr	r3, [pc, #120]	@ (80013a8 <main+0x528>)
 8001330:	edc3 7a03 	vstr	s15, [r3, #12]
//        Motor_DutyCycle_LF(map(getRad_s_to_RPM(get_w_LF()), -300, 300, -4095, 4095));
//        Motor_DutyCycle_LB(map(getRad_s_to_RPM(get_w_LB()), -300, 300, -4095, 4095));
//        Motor_DutyCycle_RF(map(getRad_s_to_RPM(get_w_RF()), -300, 300, -4095, 4095));
//        Motor_DutyCycle_RB(map(getRad_s_to_RPM(get_w_RB()), -300, 300, -4095, 4095));
//
        Game_Play_ROBOT_2(&htim9);
 8001334:	481d      	ldr	r0, [pc, #116]	@ (80013ac <main+0x52c>)
 8001336:	f009 f8ff 	bl	800a538 <Game_Play_ROBOT_2>
#endif
//        digitalWrite("PE10", 0);
//        		digitalWrite("PE08", 1);

			Motor_DutyCycle_LF(4095);
 800133a:	f640 70ff 	movw	r0, #4095	@ 0xfff
 800133e:	f008 f987 	bl	8009650 <Motor_DutyCycle_LF>
			Motor_DutyCycle_LB(4095);
 8001342:	f640 70ff 	movw	r0, #4095	@ 0xfff
 8001346:	f008 f9db 	bl	8009700 <Motor_DutyCycle_LB>
			Motor_DutyCycle_RF(4095);
 800134a:	f640 70ff 	movw	r0, #4095	@ 0xfff
 800134e:	f008 fa33 	bl	80097b8 <Motor_DutyCycle_RF>
			Motor_DutyCycle_RB(4095);
 8001352:	f640 70ff 	movw	r0, #4095	@ 0xfff
 8001356:	f008 fa8b 	bl	8009870 <Motor_DutyCycle_RB>
	  if ((uwTick - PastTime) > 10) {
 800135a:	e630      	b.n	8000fbe <main+0x13e>
 800135c:	20000688 	.word	0x20000688
 8001360:	200006b0 	.word	0x200006b0
 8001364:	20000684 	.word	0x20000684
 8001368:	20000620 	.word	0x20000620
 800136c:	200006a8 	.word	0x200006a8
 8001370:	0800eba8 	.word	0x0800eba8
 8001374:	20000398 	.word	0x20000398
 8001378:	20000668 	.word	0x20000668
 800137c:	20000278 	.word	0x20000278
 8001380:	200003e0 	.word	0x200003e0
 8001384:	20000350 	.word	0x20000350
 8001388:	c0133333 	.word	0xc0133333
 800138c:	40133333 	.word	0x40133333
 8001390:	c2c80000 	.word	0xc2c80000
 8001394:	42c80000 	.word	0x42c80000
 8001398:	20000674 	.word	0x20000674
 800139c:	20000678 	.word	0x20000678
 80013a0:	2000067c 	.word	0x2000067c
 80013a4:	20000680 	.word	0x20000680
 80013a8:	20000690 	.word	0x20000690
 80013ac:	20000428 	.word	0x20000428

080013b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b094      	sub	sp, #80	@ 0x50
 80013b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013b6:	f107 0320 	add.w	r3, r7, #32
 80013ba:	2230      	movs	r2, #48	@ 0x30
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f00b ff9e 	bl	800d300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	4b28      	ldr	r3, [pc, #160]	@ (800147c <SystemClock_Config+0xcc>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013dc:	4a27      	ldr	r2, [pc, #156]	@ (800147c <SystemClock_Config+0xcc>)
 80013de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e4:	4b25      	ldr	r3, [pc, #148]	@ (800147c <SystemClock_Config+0xcc>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f0:	2300      	movs	r3, #0
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	4b22      	ldr	r3, [pc, #136]	@ (8001480 <SystemClock_Config+0xd0>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a21      	ldr	r2, [pc, #132]	@ (8001480 <SystemClock_Config+0xd0>)
 80013fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	4b1f      	ldr	r3, [pc, #124]	@ (8001480 <SystemClock_Config+0xd0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800140c:	2301      	movs	r3, #1
 800140e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001410:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001416:	2302      	movs	r3, #2
 8001418:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800141a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800141e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 7;
 8001420:	2307      	movs	r3, #7
 8001422:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001424:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001428:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800142a:	2304      	movs	r3, #4
 800142c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800142e:	2308      	movs	r3, #8
 8001430:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001432:	f107 0320 	add.w	r3, r7, #32
 8001436:	4618      	mov	r0, r3
 8001438:	f003 fe8c 	bl	8005154 <HAL_RCC_OscConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001442:	f000 fde7 	bl	8002014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001446:	230f      	movs	r3, #15
 8001448:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144a:	2302      	movs	r3, #2
 800144c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001452:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001456:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001458:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800145c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	2103      	movs	r1, #3
 8001464:	4618      	mov	r0, r3
 8001466:	f004 f8ed 	bl	8005644 <HAL_RCC_ClockConfig>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001470:	f000 fdd0 	bl	8002014 <Error_Handler>
  }
}
 8001474:	bf00      	nop
 8001476:	3750      	adds	r7, #80	@ 0x50
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40023800 	.word	0x40023800
 8001480:	40007000 	.word	0x40007000

08001484 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800148a:	463b      	mov	r3, r7
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001496:	4b21      	ldr	r3, [pc, #132]	@ (800151c <MX_ADC1_Init+0x98>)
 8001498:	4a21      	ldr	r2, [pc, #132]	@ (8001520 <MX_ADC1_Init+0x9c>)
 800149a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800149c:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <MX_ADC1_Init+0x98>)
 800149e:	2200      	movs	r2, #0
 80014a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014a2:	4b1e      	ldr	r3, [pc, #120]	@ (800151c <MX_ADC1_Init+0x98>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014a8:	4b1c      	ldr	r3, [pc, #112]	@ (800151c <MX_ADC1_Init+0x98>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014ae:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <MX_ADC1_Init+0x98>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014b4:	4b19      	ldr	r3, [pc, #100]	@ (800151c <MX_ADC1_Init+0x98>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014bc:	4b17      	ldr	r3, [pc, #92]	@ (800151c <MX_ADC1_Init+0x98>)
 80014be:	2200      	movs	r2, #0
 80014c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014c2:	4b16      	ldr	r3, [pc, #88]	@ (800151c <MX_ADC1_Init+0x98>)
 80014c4:	4a17      	ldr	r2, [pc, #92]	@ (8001524 <MX_ADC1_Init+0xa0>)
 80014c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014c8:	4b14      	ldr	r3, [pc, #80]	@ (800151c <MX_ADC1_Init+0x98>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014ce:	4b13      	ldr	r3, [pc, #76]	@ (800151c <MX_ADC1_Init+0x98>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014d4:	4b11      	ldr	r3, [pc, #68]	@ (800151c <MX_ADC1_Init+0x98>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <MX_ADC1_Init+0x98>)
 80014de:	2201      	movs	r2, #1
 80014e0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014e2:	480e      	ldr	r0, [pc, #56]	@ (800151c <MX_ADC1_Init+0x98>)
 80014e4:	f001 fbb6 	bl	8002c54 <HAL_ADC_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80014ee:	f000 fd91 	bl	8002014 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80014f2:	2304      	movs	r3, #4
 80014f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014f6:	2301      	movs	r3, #1
 80014f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fe:	463b      	mov	r3, r7
 8001500:	4619      	mov	r1, r3
 8001502:	4806      	ldr	r0, [pc, #24]	@ (800151c <MX_ADC1_Init+0x98>)
 8001504:	f001 fbea 	bl	8002cdc <HAL_ADC_ConfigChannel>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800150e:	f000 fd81 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000184 	.word	0x20000184
 8001520:	40012000 	.word	0x40012000
 8001524:	0f000001 	.word	0x0f000001

08001528 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800152c:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <MX_I2C2_Init+0x50>)
 800152e:	4a13      	ldr	r2, [pc, #76]	@ (800157c <MX_I2C2_Init+0x54>)
 8001530:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001532:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <MX_I2C2_Init+0x50>)
 8001534:	4a12      	ldr	r2, [pc, #72]	@ (8001580 <MX_I2C2_Init+0x58>)
 8001536:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001538:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <MX_I2C2_Init+0x50>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800153e:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <MX_I2C2_Init+0x50>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <MX_I2C2_Init+0x50>)
 8001546:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800154a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800154c:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <MX_I2C2_Init+0x50>)
 800154e:	2200      	movs	r2, #0
 8001550:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001552:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <MX_I2C2_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001558:	4b07      	ldr	r3, [pc, #28]	@ (8001578 <MX_I2C2_Init+0x50>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <MX_I2C2_Init+0x50>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001564:	4804      	ldr	r0, [pc, #16]	@ (8001578 <MX_I2C2_Init+0x50>)
 8001566:	f002 fa5f 	bl	8003a28 <HAL_I2C_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001570:	f000 fd50 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	200001cc 	.word	0x200001cc
 800157c:	40005800 	.word	0x40005800
 8001580:	000186a0 	.word	0x000186a0

08001584 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001588:	4b17      	ldr	r3, [pc, #92]	@ (80015e8 <MX_SPI2_Init+0x64>)
 800158a:	4a18      	ldr	r2, [pc, #96]	@ (80015ec <MX_SPI2_Init+0x68>)
 800158c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800158e:	4b16      	ldr	r3, [pc, #88]	@ (80015e8 <MX_SPI2_Init+0x64>)
 8001590:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001594:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001596:	4b14      	ldr	r3, [pc, #80]	@ (80015e8 <MX_SPI2_Init+0x64>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800159c:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <MX_SPI2_Init+0x64>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a2:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <MX_SPI2_Init+0x64>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a8:	4b0f      	ldr	r3, [pc, #60]	@ (80015e8 <MX_SPI2_Init+0x64>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <MX_SPI2_Init+0x64>)
 80015b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015b6:	4b0c      	ldr	r3, [pc, #48]	@ (80015e8 <MX_SPI2_Init+0x64>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015bc:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <MX_SPI2_Init+0x64>)
 80015be:	2200      	movs	r2, #0
 80015c0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c2:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <MX_SPI2_Init+0x64>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c8:	4b07      	ldr	r3, [pc, #28]	@ (80015e8 <MX_SPI2_Init+0x64>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80015ce:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <MX_SPI2_Init+0x64>)
 80015d0:	220a      	movs	r2, #10
 80015d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015d4:	4804      	ldr	r0, [pc, #16]	@ (80015e8 <MX_SPI2_Init+0x64>)
 80015d6:	f004 fa55 	bl	8005a84 <HAL_SPI_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80015e0:	f000 fd18 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000220 	.word	0x20000220
 80015ec:	40003800 	.word	0x40003800

080015f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08c      	sub	sp, #48	@ 0x30
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	2224      	movs	r2, #36	@ 0x24
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f00b fe7e 	bl	800d300 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800160c:	4b22      	ldr	r3, [pc, #136]	@ (8001698 <MX_TIM1_Init+0xa8>)
 800160e:	4a23      	ldr	r2, [pc, #140]	@ (800169c <MX_TIM1_Init+0xac>)
 8001610:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001612:	4b21      	ldr	r3, [pc, #132]	@ (8001698 <MX_TIM1_Init+0xa8>)
 8001614:	2200      	movs	r2, #0
 8001616:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001618:	4b1f      	ldr	r3, [pc, #124]	@ (8001698 <MX_TIM1_Init+0xa8>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800161e:	4b1e      	ldr	r3, [pc, #120]	@ (8001698 <MX_TIM1_Init+0xa8>)
 8001620:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001624:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001626:	4b1c      	ldr	r3, [pc, #112]	@ (8001698 <MX_TIM1_Init+0xa8>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800162c:	4b1a      	ldr	r3, [pc, #104]	@ (8001698 <MX_TIM1_Init+0xa8>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001632:	4b19      	ldr	r3, [pc, #100]	@ (8001698 <MX_TIM1_Init+0xa8>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001638:	2303      	movs	r3, #3
 800163a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001640:	2301      	movs	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001650:	2301      	movs	r3, #1
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	4619      	mov	r1, r3
 8001662:	480d      	ldr	r0, [pc, #52]	@ (8001698 <MX_TIM1_Init+0xa8>)
 8001664:	f004 fbfe 	bl	8005e64 <HAL_TIM_Encoder_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800166e:	f000 fcd1 	bl	8002014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	4619      	mov	r1, r3
 800167e:	4806      	ldr	r0, [pc, #24]	@ (8001698 <MX_TIM1_Init+0xa8>)
 8001680:	f005 f922 	bl	80068c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800168a:	f000 fcc3 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800168e:	bf00      	nop
 8001690:	3730      	adds	r7, #48	@ 0x30
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000278 	.word	0x20000278
 800169c:	40010000 	.word	0x40010000

080016a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08c      	sub	sp, #48	@ 0x30
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	2224      	movs	r2, #36	@ 0x24
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f00b fe26 	bl	800d300 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016bc:	4b21      	ldr	r3, [pc, #132]	@ (8001744 <MX_TIM2_Init+0xa4>)
 80016be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001744 <MX_TIM2_Init+0xa4>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001744 <MX_TIM2_Init+0xa4>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80016d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001744 <MX_TIM2_Init+0xa4>)
 80016d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <MX_TIM2_Init+0xa4>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016de:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <MX_TIM2_Init+0xa4>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016e4:	2303      	movs	r3, #3
 80016e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016ec:	2301      	movs	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016fc:	2301      	movs	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001708:	f107 030c 	add.w	r3, r7, #12
 800170c:	4619      	mov	r1, r3
 800170e:	480d      	ldr	r0, [pc, #52]	@ (8001744 <MX_TIM2_Init+0xa4>)
 8001710:	f004 fba8 	bl	8005e64 <HAL_TIM_Encoder_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800171a:	f000 fc7b 	bl	8002014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	4619      	mov	r1, r3
 800172a:	4806      	ldr	r0, [pc, #24]	@ (8001744 <MX_TIM2_Init+0xa4>)
 800172c:	f005 f8cc 	bl	80068c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001736:	f000 fc6d 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	3730      	adds	r7, #48	@ 0x30
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200002c0 	.word	0x200002c0

08001748 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08c      	sub	sp, #48	@ 0x30
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	2224      	movs	r2, #36	@ 0x24
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f00b fdd2 	bl	800d300 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001764:	4b20      	ldr	r3, [pc, #128]	@ (80017e8 <MX_TIM3_Init+0xa0>)
 8001766:	4a21      	ldr	r2, [pc, #132]	@ (80017ec <MX_TIM3_Init+0xa4>)
 8001768:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800176a:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <MX_TIM3_Init+0xa0>)
 800176c:	2200      	movs	r2, #0
 800176e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001770:	4b1d      	ldr	r3, [pc, #116]	@ (80017e8 <MX_TIM3_Init+0xa0>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001776:	4b1c      	ldr	r3, [pc, #112]	@ (80017e8 <MX_TIM3_Init+0xa0>)
 8001778:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800177c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177e:	4b1a      	ldr	r3, [pc, #104]	@ (80017e8 <MX_TIM3_Init+0xa0>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001784:	4b18      	ldr	r3, [pc, #96]	@ (80017e8 <MX_TIM3_Init+0xa0>)
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800178a:	2303      	movs	r3, #3
 800178c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001792:	2301      	movs	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017a2:	2301      	movs	r3, #1
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	4619      	mov	r1, r3
 80017b4:	480c      	ldr	r0, [pc, #48]	@ (80017e8 <MX_TIM3_Init+0xa0>)
 80017b6:	f004 fb55 	bl	8005e64 <HAL_TIM_Encoder_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80017c0:	f000 fc28 	bl	8002014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c4:	2300      	movs	r3, #0
 80017c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	@ (80017e8 <MX_TIM3_Init+0xa0>)
 80017d2:	f005 f879 	bl	80068c8 <HAL_TIMEx_MasterConfigSynchronization>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80017dc:	f000 fc1a 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	3730      	adds	r7, #48	@ 0x30
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000308 	.word	0x20000308
 80017ec:	40000400 	.word	0x40000400

080017f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	@ 0x30
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	2224      	movs	r2, #36	@ 0x24
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f00b fd7e 	bl	800d300 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800180c:	4b20      	ldr	r3, [pc, #128]	@ (8001890 <MX_TIM4_Init+0xa0>)
 800180e:	4a21      	ldr	r2, [pc, #132]	@ (8001894 <MX_TIM4_Init+0xa4>)
 8001810:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001812:	4b1f      	ldr	r3, [pc, #124]	@ (8001890 <MX_TIM4_Init+0xa0>)
 8001814:	2200      	movs	r2, #0
 8001816:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001818:	4b1d      	ldr	r3, [pc, #116]	@ (8001890 <MX_TIM4_Init+0xa0>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800181e:	4b1c      	ldr	r3, [pc, #112]	@ (8001890 <MX_TIM4_Init+0xa0>)
 8001820:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001824:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001826:	4b1a      	ldr	r3, [pc, #104]	@ (8001890 <MX_TIM4_Init+0xa0>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182c:	4b18      	ldr	r3, [pc, #96]	@ (8001890 <MX_TIM4_Init+0xa0>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001832:	2303      	movs	r3, #3
 8001834:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800183a:	2301      	movs	r3, #1
 800183c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800184a:	2301      	movs	r3, #1
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800184e:	2300      	movs	r3, #0
 8001850:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	4619      	mov	r1, r3
 800185c:	480c      	ldr	r0, [pc, #48]	@ (8001890 <MX_TIM4_Init+0xa0>)
 800185e:	f004 fb01 	bl	8005e64 <HAL_TIM_Encoder_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001868:	f000 fbd4 	bl	8002014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186c:	2300      	movs	r3, #0
 800186e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	4619      	mov	r1, r3
 8001878:	4805      	ldr	r0, [pc, #20]	@ (8001890 <MX_TIM4_Init+0xa0>)
 800187a:	f005 f825 	bl	80068c8 <HAL_TIMEx_MasterConfigSynchronization>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001884:	f000 fbc6 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001888:	bf00      	nop
 800188a:	3730      	adds	r7, #48	@ 0x30
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20000350 	.word	0x20000350
 8001894:	40000800 	.word	0x40000800

08001898 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08c      	sub	sp, #48	@ 0x30
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800189e:	f107 030c 	add.w	r3, r7, #12
 80018a2:	2224      	movs	r2, #36	@ 0x24
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f00b fd2a 	bl	800d300 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80018b4:	4b20      	ldr	r3, [pc, #128]	@ (8001938 <MX_TIM5_Init+0xa0>)
 80018b6:	4a21      	ldr	r2, [pc, #132]	@ (800193c <MX_TIM5_Init+0xa4>)
 80018b8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80018ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001938 <MX_TIM5_Init+0xa0>)
 80018bc:	2200      	movs	r2, #0
 80018be:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001938 <MX_TIM5_Init+0xa0>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80018c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001938 <MX_TIM5_Init+0xa0>)
 80018c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018cc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001938 <MX_TIM5_Init+0xa0>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d4:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <MX_TIM5_Init+0xa0>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018da:	2303      	movs	r3, #3
 80018dc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018e2:	2301      	movs	r3, #1
 80018e4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018f2:	2301      	movs	r3, #1
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	4619      	mov	r1, r3
 8001904:	480c      	ldr	r0, [pc, #48]	@ (8001938 <MX_TIM5_Init+0xa0>)
 8001906:	f004 faad 	bl	8005e64 <HAL_TIM_Encoder_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001910:	f000 fb80 	bl	8002014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001914:	2300      	movs	r3, #0
 8001916:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800191c:	1d3b      	adds	r3, r7, #4
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	@ (8001938 <MX_TIM5_Init+0xa0>)
 8001922:	f004 ffd1 	bl	80068c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800192c:	f000 fb72 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	3730      	adds	r7, #48	@ 0x30
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000398 	.word	0x20000398
 800193c:	40000c00 	.word	0x40000c00

08001940 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08c      	sub	sp, #48	@ 0x30
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001946:	f107 030c 	add.w	r3, r7, #12
 800194a:	2224      	movs	r2, #36	@ 0x24
 800194c:	2100      	movs	r1, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f00b fcd6 	bl	800d300 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800195c:	4b22      	ldr	r3, [pc, #136]	@ (80019e8 <MX_TIM8_Init+0xa8>)
 800195e:	4a23      	ldr	r2, [pc, #140]	@ (80019ec <MX_TIM8_Init+0xac>)
 8001960:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001962:	4b21      	ldr	r3, [pc, #132]	@ (80019e8 <MX_TIM8_Init+0xa8>)
 8001964:	2200      	movs	r2, #0
 8001966:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001968:	4b1f      	ldr	r3, [pc, #124]	@ (80019e8 <MX_TIM8_Init+0xa8>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800196e:	4b1e      	ldr	r3, [pc, #120]	@ (80019e8 <MX_TIM8_Init+0xa8>)
 8001970:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001974:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001976:	4b1c      	ldr	r3, [pc, #112]	@ (80019e8 <MX_TIM8_Init+0xa8>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800197c:	4b1a      	ldr	r3, [pc, #104]	@ (80019e8 <MX_TIM8_Init+0xa8>)
 800197e:	2200      	movs	r2, #0
 8001980:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001982:	4b19      	ldr	r3, [pc, #100]	@ (80019e8 <MX_TIM8_Init+0xa8>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001988:	2303      	movs	r3, #3
 800198a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800198c:	2300      	movs	r3, #0
 800198e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001990:	2301      	movs	r3, #1
 8001992:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001994:	2300      	movs	r3, #0
 8001996:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019a0:	2301      	movs	r3, #1
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	4619      	mov	r1, r3
 80019b2:	480d      	ldr	r0, [pc, #52]	@ (80019e8 <MX_TIM8_Init+0xa8>)
 80019b4:	f004 fa56 	bl	8005e64 <HAL_TIM_Encoder_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80019be:	f000 fb29 	bl	8002014 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	4619      	mov	r1, r3
 80019ce:	4806      	ldr	r0, [pc, #24]	@ (80019e8 <MX_TIM8_Init+0xa8>)
 80019d0:	f004 ff7a 	bl	80068c8 <HAL_TIMEx_MasterConfigSynchronization>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80019da:	f000 fb1b 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	3730      	adds	r7, #48	@ 0x30
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200003e0 	.word	0x200003e0
 80019ec:	40010400 	.word	0x40010400

080019f0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
 8001a04:	615a      	str	r2, [r3, #20]
 8001a06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001a08:	4b1f      	ldr	r3, [pc, #124]	@ (8001a88 <MX_TIM9_Init+0x98>)
 8001a0a:	4a20      	ldr	r2, [pc, #128]	@ (8001a8c <MX_TIM9_Init+0x9c>)
 8001a0c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 96-1;
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001a88 <MX_TIM9_Init+0x98>)
 8001a10:	225f      	movs	r2, #95	@ 0x5f
 8001a12:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a14:	4b1c      	ldr	r3, [pc, #112]	@ (8001a88 <MX_TIM9_Init+0x98>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 10000;
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a88 <MX_TIM9_Init+0x98>)
 8001a1c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001a20:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a22:	4b19      	ldr	r3, [pc, #100]	@ (8001a88 <MX_TIM9_Init+0x98>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a28:	4b17      	ldr	r3, [pc, #92]	@ (8001a88 <MX_TIM9_Init+0x98>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001a2e:	4816      	ldr	r0, [pc, #88]	@ (8001a88 <MX_TIM9_Init+0x98>)
 8001a30:	f004 f900 	bl	8005c34 <HAL_TIM_PWM_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001a3a:	f000 faeb 	bl	8002014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a3e:	2360      	movs	r3, #96	@ 0x60
 8001a40:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a4e:	1d3b      	adds	r3, r7, #4
 8001a50:	2200      	movs	r2, #0
 8001a52:	4619      	mov	r1, r3
 8001a54:	480c      	ldr	r0, [pc, #48]	@ (8001a88 <MX_TIM9_Init+0x98>)
 8001a56:	f004 fb39 	bl	80060cc <HAL_TIM_PWM_ConfigChannel>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001a60:	f000 fad8 	bl	8002014 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2204      	movs	r2, #4
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4807      	ldr	r0, [pc, #28]	@ (8001a88 <MX_TIM9_Init+0x98>)
 8001a6c:	f004 fb2e 	bl	80060cc <HAL_TIM_PWM_ConfigChannel>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001a76:	f000 facd 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001a7a:	4803      	ldr	r0, [pc, #12]	@ (8001a88 <MX_TIM9_Init+0x98>)
 8001a7c:	f000 fe1a 	bl	80026b4 <HAL_TIM_MspPostInit>

}
 8001a80:	bf00      	nop
 8001a82:	3720      	adds	r7, #32
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000428 	.word	0x20000428
 8001a8c:	40014000 	.word	0x40014000

08001a90 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
 8001aa4:	615a      	str	r2, [r3, #20]
 8001aa6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b24 <MX_TIM10_Init+0x94>)
 8001aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8001b28 <MX_TIM10_Init+0x98>)
 8001aac:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 2-1;
 8001aae:	4b1d      	ldr	r3, [pc, #116]	@ (8001b24 <MX_TIM10_Init+0x94>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b24 <MX_TIM10_Init+0x94>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4096-1;
 8001aba:	4b1a      	ldr	r3, [pc, #104]	@ (8001b24 <MX_TIM10_Init+0x94>)
 8001abc:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001ac0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac2:	4b18      	ldr	r3, [pc, #96]	@ (8001b24 <MX_TIM10_Init+0x94>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac8:	4b16      	ldr	r3, [pc, #88]	@ (8001b24 <MX_TIM10_Init+0x94>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001ace:	4815      	ldr	r0, [pc, #84]	@ (8001b24 <MX_TIM10_Init+0x94>)
 8001ad0:	f004 f861 	bl	8005b96 <HAL_TIM_Base_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001ada:	f000 fa9b 	bl	8002014 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001ade:	4811      	ldr	r0, [pc, #68]	@ (8001b24 <MX_TIM10_Init+0x94>)
 8001ae0:	f004 f8a8 	bl	8005c34 <HAL_TIM_PWM_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001aea:	f000 fa93 	bl	8002014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aee:	2360      	movs	r3, #96	@ 0x60
 8001af0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	2200      	movs	r2, #0
 8001b02:	4619      	mov	r1, r3
 8001b04:	4807      	ldr	r0, [pc, #28]	@ (8001b24 <MX_TIM10_Init+0x94>)
 8001b06:	f004 fae1 	bl	80060cc <HAL_TIM_PWM_ConfigChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001b10:	f000 fa80 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001b14:	4803      	ldr	r0, [pc, #12]	@ (8001b24 <MX_TIM10_Init+0x94>)
 8001b16:	f000 fdcd 	bl	80026b4 <HAL_TIM_MspPostInit>

}
 8001b1a:	bf00      	nop
 8001b1c:	3720      	adds	r7, #32
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000470 	.word	0x20000470
 8001b28:	40014400 	.word	0x40014400

08001b2c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
 8001b40:	615a      	str	r2, [r3, #20]
 8001b42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001b44:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc0 <MX_TIM11_Init+0x94>)
 8001b46:	4a1f      	ldr	r2, [pc, #124]	@ (8001bc4 <MX_TIM11_Init+0x98>)
 8001b48:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2-1;
 8001b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc0 <MX_TIM11_Init+0x94>)
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b50:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc0 <MX_TIM11_Init+0x94>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 4096-1;
 8001b56:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc0 <MX_TIM11_Init+0x94>)
 8001b58:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001b5c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5e:	4b18      	ldr	r3, [pc, #96]	@ (8001bc0 <MX_TIM11_Init+0x94>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b64:	4b16      	ldr	r3, [pc, #88]	@ (8001bc0 <MX_TIM11_Init+0x94>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001b6a:	4815      	ldr	r0, [pc, #84]	@ (8001bc0 <MX_TIM11_Init+0x94>)
 8001b6c:	f004 f813 	bl	8005b96 <HAL_TIM_Base_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001b76:	f000 fa4d 	bl	8002014 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001b7a:	4811      	ldr	r0, [pc, #68]	@ (8001bc0 <MX_TIM11_Init+0x94>)
 8001b7c:	f004 f85a 	bl	8005c34 <HAL_TIM_PWM_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001b86:	f000 fa45 	bl	8002014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b8a:	2360      	movs	r3, #96	@ 0x60
 8001b8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4807      	ldr	r0, [pc, #28]	@ (8001bc0 <MX_TIM11_Init+0x94>)
 8001ba2:	f004 fa93 	bl	80060cc <HAL_TIM_PWM_ConfigChannel>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001bac:	f000 fa32 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001bb0:	4803      	ldr	r0, [pc, #12]	@ (8001bc0 <MX_TIM11_Init+0x94>)
 8001bb2:	f000 fd7f 	bl	80026b4 <HAL_TIM_MspPostInit>

}
 8001bb6:	bf00      	nop
 8001bb8:	3720      	adds	r7, #32
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	200004b8 	.word	0x200004b8
 8001bc4:	40014800 	.word	0x40014800

08001bc8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
 8001bdc:	615a      	str	r2, [r3, #20]
 8001bde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001be0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c60 <MX_TIM12_Init+0x98>)
 8001be2:	4a20      	ldr	r2, [pc, #128]	@ (8001c64 <MX_TIM12_Init+0x9c>)
 8001be4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 2-1;
 8001be6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c60 <MX_TIM12_Init+0x98>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bec:	4b1c      	ldr	r3, [pc, #112]	@ (8001c60 <MX_TIM12_Init+0x98>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4096-1;
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c60 <MX_TIM12_Init+0x98>)
 8001bf4:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001bf8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfa:	4b19      	ldr	r3, [pc, #100]	@ (8001c60 <MX_TIM12_Init+0x98>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c00:	4b17      	ldr	r3, [pc, #92]	@ (8001c60 <MX_TIM12_Init+0x98>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001c06:	4816      	ldr	r0, [pc, #88]	@ (8001c60 <MX_TIM12_Init+0x98>)
 8001c08:	f004 f814 	bl	8005c34 <HAL_TIM_PWM_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001c12:	f000 f9ff 	bl	8002014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c16:	2360      	movs	r3, #96	@ 0x60
 8001c18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	2200      	movs	r2, #0
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	480c      	ldr	r0, [pc, #48]	@ (8001c60 <MX_TIM12_Init+0x98>)
 8001c2e:	f004 fa4d 	bl	80060cc <HAL_TIM_PWM_ConfigChannel>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001c38:	f000 f9ec 	bl	8002014 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	2204      	movs	r2, #4
 8001c40:	4619      	mov	r1, r3
 8001c42:	4807      	ldr	r0, [pc, #28]	@ (8001c60 <MX_TIM12_Init+0x98>)
 8001c44:	f004 fa42 	bl	80060cc <HAL_TIM_PWM_ConfigChannel>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001c4e:	f000 f9e1 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001c52:	4803      	ldr	r0, [pc, #12]	@ (8001c60 <MX_TIM12_Init+0x98>)
 8001c54:	f000 fd2e 	bl	80026b4 <HAL_TIM_MspPostInit>

}
 8001c58:	bf00      	nop
 8001c5a:	3720      	adds	r7, #32
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000500 	.word	0x20000500
 8001c64:	40001800 	.word	0x40001800

08001c68 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
 8001c7c:	615a      	str	r2, [r3, #20]
 8001c7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001c80:	4b1e      	ldr	r3, [pc, #120]	@ (8001cfc <MX_TIM13_Init+0x94>)
 8001c82:	4a1f      	ldr	r2, [pc, #124]	@ (8001d00 <MX_TIM13_Init+0x98>)
 8001c84:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2-1;
 8001c86:	4b1d      	ldr	r3, [pc, #116]	@ (8001cfc <MX_TIM13_Init+0x94>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <MX_TIM13_Init+0x94>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 4096-1;
 8001c92:	4b1a      	ldr	r3, [pc, #104]	@ (8001cfc <MX_TIM13_Init+0x94>)
 8001c94:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001c98:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9a:	4b18      	ldr	r3, [pc, #96]	@ (8001cfc <MX_TIM13_Init+0x94>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca0:	4b16      	ldr	r3, [pc, #88]	@ (8001cfc <MX_TIM13_Init+0x94>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001ca6:	4815      	ldr	r0, [pc, #84]	@ (8001cfc <MX_TIM13_Init+0x94>)
 8001ca8:	f003 ff75 	bl	8005b96 <HAL_TIM_Base_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001cb2:	f000 f9af 	bl	8002014 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001cb6:	4811      	ldr	r0, [pc, #68]	@ (8001cfc <MX_TIM13_Init+0x94>)
 8001cb8:	f003 ffbc 	bl	8005c34 <HAL_TIM_PWM_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001cc2:	f000 f9a7 	bl	8002014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cc6:	2360      	movs	r3, #96	@ 0x60
 8001cc8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	2200      	movs	r2, #0
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4807      	ldr	r0, [pc, #28]	@ (8001cfc <MX_TIM13_Init+0x94>)
 8001cde:	f004 f9f5 	bl	80060cc <HAL_TIM_PWM_ConfigChannel>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001ce8:	f000 f994 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001cec:	4803      	ldr	r0, [pc, #12]	@ (8001cfc <MX_TIM13_Init+0x94>)
 8001cee:	f000 fce1 	bl	80026b4 <HAL_TIM_MspPostInit>

}
 8001cf2:	bf00      	nop
 8001cf4:	3720      	adds	r7, #32
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000548 	.word	0x20000548
 8001d00:	40001c00 	.word	0x40001c00

08001d04 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d0a:	1d3b      	adds	r3, r7, #4
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
 8001d18:	615a      	str	r2, [r3, #20]
 8001d1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d98 <MX_TIM14_Init+0x94>)
 8001d1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001d9c <MX_TIM14_Init+0x98>)
 8001d20:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 2-1;
 8001d22:	4b1d      	ldr	r3, [pc, #116]	@ (8001d98 <MX_TIM14_Init+0x94>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d28:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <MX_TIM14_Init+0x94>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4096-1;
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d98 <MX_TIM14_Init+0x94>)
 8001d30:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001d34:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d36:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <MX_TIM14_Init+0x94>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d3c:	4b16      	ldr	r3, [pc, #88]	@ (8001d98 <MX_TIM14_Init+0x94>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001d42:	4815      	ldr	r0, [pc, #84]	@ (8001d98 <MX_TIM14_Init+0x94>)
 8001d44:	f003 ff27 	bl	8005b96 <HAL_TIM_Base_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001d4e:	f000 f961 	bl	8002014 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001d52:	4811      	ldr	r0, [pc, #68]	@ (8001d98 <MX_TIM14_Init+0x94>)
 8001d54:	f003 ff6e 	bl	8005c34 <HAL_TIM_PWM_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001d5e:	f000 f959 	bl	8002014 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d62:	2360      	movs	r3, #96	@ 0x60
 8001d64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	2200      	movs	r2, #0
 8001d76:	4619      	mov	r1, r3
 8001d78:	4807      	ldr	r0, [pc, #28]	@ (8001d98 <MX_TIM14_Init+0x94>)
 8001d7a:	f004 f9a7 	bl	80060cc <HAL_TIM_PWM_ConfigChannel>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001d84:	f000 f946 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001d88:	4803      	ldr	r0, [pc, #12]	@ (8001d98 <MX_TIM14_Init+0x94>)
 8001d8a:	f000 fc93 	bl	80026b4 <HAL_TIM_MspPostInit>

}
 8001d8e:	bf00      	nop
 8001d90:	3720      	adds	r7, #32
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000590 	.word	0x20000590
 8001d9c:	40002000 	.word	0x40002000

08001da0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001da4:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <MX_UART4_Init+0x4c>)
 8001da6:	4a12      	ldr	r2, [pc, #72]	@ (8001df0 <MX_UART4_Init+0x50>)
 8001da8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001daa:	4b10      	ldr	r3, [pc, #64]	@ (8001dec <MX_UART4_Init+0x4c>)
 8001dac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001db0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001db2:	4b0e      	ldr	r3, [pc, #56]	@ (8001dec <MX_UART4_Init+0x4c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001db8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dec <MX_UART4_Init+0x4c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001dec <MX_UART4_Init+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001dc4:	4b09      	ldr	r3, [pc, #36]	@ (8001dec <MX_UART4_Init+0x4c>)
 8001dc6:	220c      	movs	r2, #12
 8001dc8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dca:	4b08      	ldr	r3, [pc, #32]	@ (8001dec <MX_UART4_Init+0x4c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <MX_UART4_Init+0x4c>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001dd6:	4805      	ldr	r0, [pc, #20]	@ (8001dec <MX_UART4_Init+0x4c>)
 8001dd8:	f004 fe17 	bl	8006a0a <HAL_UART_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001de2:	f000 f917 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200005d8 	.word	0x200005d8
 8001df0:	40004c00 	.word	0x40004c00

08001df4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001df8:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001dfa:	4a12      	ldr	r2, [pc, #72]	@ (8001e44 <MX_USART2_UART_Init+0x50>)
 8001dfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dfe:	4b10      	ldr	r3, [pc, #64]	@ (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	@ (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e12:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001e18:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e1a:	2204      	movs	r2, #4
 8001e1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1e:	4b08      	ldr	r3, [pc, #32]	@ (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e24:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e2a:	4805      	ldr	r0, [pc, #20]	@ (8001e40 <MX_USART2_UART_Init+0x4c>)
 8001e2c:	f004 fded 	bl	8006a0a <HAL_UART_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e36:	f000 f8ed 	bl	8002014 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000620 	.word	0x20000620
 8001e44:	40004400 	.word	0x40004400

08001e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	@ 0x30
 8001e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4e:	f107 031c 	add.w	r3, r7, #28
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
 8001e5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
 8001e62:	4b54      	ldr	r3, [pc, #336]	@ (8001fb4 <MX_GPIO_Init+0x16c>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	4a53      	ldr	r2, [pc, #332]	@ (8001fb4 <MX_GPIO_Init+0x16c>)
 8001e68:	f043 0310 	orr.w	r3, r3, #16
 8001e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6e:	4b51      	ldr	r3, [pc, #324]	@ (8001fb4 <MX_GPIO_Init+0x16c>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	f003 0310 	and.w	r3, r3, #16
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	4b4d      	ldr	r3, [pc, #308]	@ (8001fb4 <MX_GPIO_Init+0x16c>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	4a4c      	ldr	r2, [pc, #304]	@ (8001fb4 <MX_GPIO_Init+0x16c>)
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8a:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb4 <MX_GPIO_Init+0x16c>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	4b46      	ldr	r3, [pc, #280]	@ (8001fb4 <MX_GPIO_Init+0x16c>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	4a45      	ldr	r2, [pc, #276]	@ (8001fb4 <MX_GPIO_Init+0x16c>)
 8001ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea6:	4b43      	ldr	r3, [pc, #268]	@ (8001fb4 <MX_GPIO_Init+0x16c>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8001fb4 <MX_GPIO_Init+0x16c>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	4a3e      	ldr	r2, [pc, #248]	@ (8001fb4 <MX_GPIO_Init+0x16c>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec2:	4b3c      	ldr	r3, [pc, #240]	@ (8001fb4 <MX_GPIO_Init+0x16c>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	4b38      	ldr	r3, [pc, #224]	@ (8001fb4 <MX_GPIO_Init+0x16c>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	4a37      	ldr	r2, [pc, #220]	@ (8001fb4 <MX_GPIO_Init+0x16c>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ede:	4b35      	ldr	r3, [pc, #212]	@ (8001fb4 <MX_GPIO_Init+0x16c>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	4b31      	ldr	r3, [pc, #196]	@ (8001fb4 <MX_GPIO_Init+0x16c>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	4a30      	ldr	r2, [pc, #192]	@ (8001fb4 <MX_GPIO_Init+0x16c>)
 8001ef4:	f043 0308 	orr.w	r3, r3, #8
 8001ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efa:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb4 <MX_GPIO_Init+0x16c>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CE_1_Pin|CE_2_Pin|GPIO_PIN_7|GPIO_PIN_8
 8001f06:	2200      	movs	r2, #0
 8001f08:	f24b 518f 	movw	r1, #46479	@ 0xb58f
 8001f0c:	482a      	ldr	r0, [pc, #168]	@ (8001fb8 <MX_GPIO_Init+0x170>)
 8001f0e:	f001 fd71 	bl	80039f4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|LB_DIGI_R_Pin|GPIO_PIN_13|GPIO_PIN_15
                          |EXTRA2_DIGI_R_Pin|RF_DIGI_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EXTRA1_DIGI_R_Pin|LF_DIGI_R_Pin, GPIO_PIN_RESET);
 8001f12:	2200      	movs	r2, #0
 8001f14:	f242 0120 	movw	r1, #8224	@ 0x2020
 8001f18:	4828      	ldr	r0, [pc, #160]	@ (8001fbc <MX_GPIO_Init+0x174>)
 8001f1a:	f001 fd6b 	bl	80039f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2101      	movs	r1, #1
 8001f22:	4827      	ldr	r0, [pc, #156]	@ (8001fc0 <MX_GPIO_Init+0x178>)
 8001f24:	f001 fd66 	bl	80039f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RB_DIGI_R_GPIO_Port, RB_DIGI_R_Pin, GPIO_PIN_RESET);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f2e:	4825      	ldr	r0, [pc, #148]	@ (8001fc4 <MX_GPIO_Init+0x17c>)
 8001f30:	f001 fd60 	bl	80039f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_1_Pin CE_2_Pin PE7 PE8
                           PE10 LB_DIGI_R_Pin PE13 PE15
                           EXTRA2_DIGI_R_Pin RF_DIGI_R_Pin */
  GPIO_InitStruct.Pin = CE_1_Pin|CE_2_Pin|GPIO_PIN_7|GPIO_PIN_8
 8001f34:	f24b 538f 	movw	r3, #46479	@ 0xb58f
 8001f38:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|LB_DIGI_R_Pin|GPIO_PIN_13|GPIO_PIN_15
                          |EXTRA2_DIGI_R_Pin|RF_DIGI_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f46:	f107 031c 	add.w	r3, r7, #28
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	481a      	ldr	r0, [pc, #104]	@ (8001fb8 <MX_GPIO_Init+0x170>)
 8001f4e:	f001 fab9 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTRA1_DIGI_R_Pin LF_DIGI_R_Pin */
  GPIO_InitStruct.Pin = EXTRA1_DIGI_R_Pin|LF_DIGI_R_Pin;
 8001f52:	f242 0320 	movw	r3, #8224	@ 0x2020
 8001f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f64:	f107 031c 	add.w	r3, r7, #28
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4814      	ldr	r0, [pc, #80]	@ (8001fbc <MX_GPIO_Init+0x174>)
 8001f6c:	f001 faaa 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f70:	2301      	movs	r3, #1
 8001f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f74:	2301      	movs	r3, #1
 8001f76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f80:	f107 031c 	add.w	r3, r7, #28
 8001f84:	4619      	mov	r1, r3
 8001f86:	480e      	ldr	r0, [pc, #56]	@ (8001fc0 <MX_GPIO_Init+0x178>)
 8001f88:	f001 fa9c 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RB_DIGI_R_Pin */
  GPIO_InitStruct.Pin = RB_DIGI_R_Pin;
 8001f8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f92:	2301      	movs	r3, #1
 8001f94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RB_DIGI_R_GPIO_Port, &GPIO_InitStruct);
 8001f9e:	f107 031c 	add.w	r3, r7, #28
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4807      	ldr	r0, [pc, #28]	@ (8001fc4 <MX_GPIO_Init+0x17c>)
 8001fa6:	f001 fa8d 	bl	80034c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001faa:	bf00      	nop
 8001fac:	3730      	adds	r7, #48	@ 0x30
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40020800 	.word	0x40020800
 8001fc0:	40020400 	.word	0x40020400
 8001fc4:	40020c00 	.word	0x40020c00

08001fc8 <HAL_UART_RxCpltCallback>:
//        HAL_UART_Receive_IT(&huart2, (uint8_t*) &temp_buffer, 1);
//    }
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
     if (huart->Instance == USART2){
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a09      	ldr	r2, [pc, #36]	@ (8001ffc <HAL_UART_RxCpltCallback+0x34>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d10b      	bne.n	8001ff2 <HAL_UART_RxCpltCallback+0x2a>
        last_uart_data_time = uwTick;
 8001fda:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <HAL_UART_RxCpltCallback+0x38>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a09      	ldr	r2, [pc, #36]	@ (8002004 <HAL_UART_RxCpltCallback+0x3c>)
 8001fe0:	6013      	str	r3, [r2, #0]
        uart_resetting = 0;
 8001fe2:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <HAL_UART_RxCpltCallback+0x40>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, (uint8_t*)&Str_PS2, sizeof(Str_PS2));
 8001fe8:	2208      	movs	r2, #8
 8001fea:	4908      	ldr	r1, [pc, #32]	@ (800200c <HAL_UART_RxCpltCallback+0x44>)
 8001fec:	4808      	ldr	r0, [pc, #32]	@ (8002010 <HAL_UART_RxCpltCallback+0x48>)
 8001fee:	f004 fd8e 	bl	8006b0e <HAL_UART_Receive_IT>
     }
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40004400 	.word	0x40004400
 8002000:	200006b0 	.word	0x200006b0
 8002004:	20000684 	.word	0x20000684
 8002008:	20000688 	.word	0x20000688
 800200c:	200006a8 	.word	0x200006a8
 8002010:	20000620 	.word	0x20000620

08002014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002018:	b672      	cpsid	i
}
 800201a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <Error_Handler+0x8>

08002020 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	4b10      	ldr	r3, [pc, #64]	@ (800206c <HAL_MspInit+0x4c>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202e:	4a0f      	ldr	r2, [pc, #60]	@ (800206c <HAL_MspInit+0x4c>)
 8002030:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002034:	6453      	str	r3, [r2, #68]	@ 0x44
 8002036:	4b0d      	ldr	r3, [pc, #52]	@ (800206c <HAL_MspInit+0x4c>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800203a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	603b      	str	r3, [r7, #0]
 8002046:	4b09      	ldr	r3, [pc, #36]	@ (800206c <HAL_MspInit+0x4c>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	4a08      	ldr	r2, [pc, #32]	@ (800206c <HAL_MspInit+0x4c>)
 800204c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002050:	6413      	str	r3, [r2, #64]	@ 0x40
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_MspInit+0x4c>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800205a:	603b      	str	r3, [r7, #0]
 800205c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800

08002070 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	@ 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a24      	ldr	r2, [pc, #144]	@ (8002120 <HAL_ADC_MspInit+0xb0>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d141      	bne.n	8002116 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	4b23      	ldr	r3, [pc, #140]	@ (8002124 <HAL_ADC_MspInit+0xb4>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	4a22      	ldr	r2, [pc, #136]	@ (8002124 <HAL_ADC_MspInit+0xb4>)
 800209c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020a2:	4b20      	ldr	r3, [pc, #128]	@ (8002124 <HAL_ADC_MspInit+0xb4>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002124 <HAL_ADC_MspInit+0xb4>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002124 <HAL_ADC_MspInit+0xb4>)
 80020b8:	f043 0304 	orr.w	r3, r3, #4
 80020bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020be:	4b19      	ldr	r3, [pc, #100]	@ (8002124 <HAL_ADC_MspInit+0xb4>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	4b15      	ldr	r3, [pc, #84]	@ (8002124 <HAL_ADC_MspInit+0xb4>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	4a14      	ldr	r2, [pc, #80]	@ (8002124 <HAL_ADC_MspInit+0xb4>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020da:	4b12      	ldr	r3, [pc, #72]	@ (8002124 <HAL_ADC_MspInit+0xb4>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020e6:	2303      	movs	r3, #3
 80020e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ea:	2303      	movs	r3, #3
 80020ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	4619      	mov	r1, r3
 80020f8:	480b      	ldr	r0, [pc, #44]	@ (8002128 <HAL_ADC_MspInit+0xb8>)
 80020fa:	f001 f9e3 	bl	80034c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020fe:	2330      	movs	r3, #48	@ 0x30
 8002100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002102:	2303      	movs	r3, #3
 8002104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210a:	f107 0314 	add.w	r3, r7, #20
 800210e:	4619      	mov	r1, r3
 8002110:	4806      	ldr	r0, [pc, #24]	@ (800212c <HAL_ADC_MspInit+0xbc>)
 8002112:	f001 f9d7 	bl	80034c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002116:	bf00      	nop
 8002118:	3728      	adds	r7, #40	@ 0x28
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40012000 	.word	0x40012000
 8002124:	40023800 	.word	0x40023800
 8002128:	40020800 	.word	0x40020800
 800212c:	40020000 	.word	0x40020000

08002130 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	@ 0x28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a19      	ldr	r2, [pc, #100]	@ (80021b4 <HAL_I2C_MspInit+0x84>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d12c      	bne.n	80021ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	4b18      	ldr	r3, [pc, #96]	@ (80021b8 <HAL_I2C_MspInit+0x88>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	4a17      	ldr	r2, [pc, #92]	@ (80021b8 <HAL_I2C_MspInit+0x88>)
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	6313      	str	r3, [r2, #48]	@ 0x30
 8002162:	4b15      	ldr	r3, [pc, #84]	@ (80021b8 <HAL_I2C_MspInit+0x88>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800216e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002172:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002174:	2312      	movs	r3, #18
 8002176:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217c:	2303      	movs	r3, #3
 800217e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002180:	2304      	movs	r3, #4
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	4619      	mov	r1, r3
 800218a:	480c      	ldr	r0, [pc, #48]	@ (80021bc <HAL_I2C_MspInit+0x8c>)
 800218c:	f001 f99a 	bl	80034c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	4b08      	ldr	r3, [pc, #32]	@ (80021b8 <HAL_I2C_MspInit+0x88>)
 8002196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002198:	4a07      	ldr	r2, [pc, #28]	@ (80021b8 <HAL_I2C_MspInit+0x88>)
 800219a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800219e:	6413      	str	r3, [r2, #64]	@ 0x40
 80021a0:	4b05      	ldr	r3, [pc, #20]	@ (80021b8 <HAL_I2C_MspInit+0x88>)
 80021a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80021ac:	bf00      	nop
 80021ae:	3728      	adds	r7, #40	@ 0x28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40005800 	.word	0x40005800
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40020400 	.word	0x40020400

080021c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	@ 0x28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a28      	ldr	r2, [pc, #160]	@ (8002280 <HAL_SPI_MspInit+0xc0>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d14a      	bne.n	8002278 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	4b27      	ldr	r3, [pc, #156]	@ (8002284 <HAL_SPI_MspInit+0xc4>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ea:	4a26      	ldr	r2, [pc, #152]	@ (8002284 <HAL_SPI_MspInit+0xc4>)
 80021ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021f2:	4b24      	ldr	r3, [pc, #144]	@ (8002284 <HAL_SPI_MspInit+0xc4>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b20      	ldr	r3, [pc, #128]	@ (8002284 <HAL_SPI_MspInit+0xc4>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	4a1f      	ldr	r2, [pc, #124]	@ (8002284 <HAL_SPI_MspInit+0xc4>)
 8002208:	f043 0304 	orr.w	r3, r3, #4
 800220c:	6313      	str	r3, [r2, #48]	@ 0x30
 800220e:	4b1d      	ldr	r3, [pc, #116]	@ (8002284 <HAL_SPI_MspInit+0xc4>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	4b19      	ldr	r3, [pc, #100]	@ (8002284 <HAL_SPI_MspInit+0xc4>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	4a18      	ldr	r2, [pc, #96]	@ (8002284 <HAL_SPI_MspInit+0xc4>)
 8002224:	f043 0302 	orr.w	r3, r3, #2
 8002228:	6313      	str	r3, [r2, #48]	@ 0x30
 800222a:	4b16      	ldr	r3, [pc, #88]	@ (8002284 <HAL_SPI_MspInit+0xc4>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002236:	230c      	movs	r3, #12
 8002238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002242:	2303      	movs	r3, #3
 8002244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002246:	2305      	movs	r3, #5
 8002248:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	4619      	mov	r1, r3
 8002250:	480d      	ldr	r0, [pc, #52]	@ (8002288 <HAL_SPI_MspInit+0xc8>)
 8002252:	f001 f937 	bl	80034c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002256:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800225a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002264:	2303      	movs	r3, #3
 8002266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002268:	2305      	movs	r3, #5
 800226a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	4619      	mov	r1, r3
 8002272:	4806      	ldr	r0, [pc, #24]	@ (800228c <HAL_SPI_MspInit+0xcc>)
 8002274:	f001 f926 	bl	80034c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002278:	bf00      	nop
 800227a:	3728      	adds	r7, #40	@ 0x28
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40003800 	.word	0x40003800
 8002284:	40023800 	.word	0x40023800
 8002288:	40020800 	.word	0x40020800
 800228c:	40020400 	.word	0x40020400

08002290 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b094      	sub	sp, #80	@ 0x50
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a8c      	ldr	r2, [pc, #560]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x250>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d12d      	bne.n	800230e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022b6:	4b8b      	ldr	r3, [pc, #556]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ba:	4a8a      	ldr	r2, [pc, #552]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022c2:	4b88      	ldr	r3, [pc, #544]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80022d2:	4b84      	ldr	r3, [pc, #528]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	4a83      	ldr	r2, [pc, #524]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 80022d8:	f043 0310 	orr.w	r3, r3, #16
 80022dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022de:	4b81      	ldr	r3, [pc, #516]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80022e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80022ea:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80022ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	2302      	movs	r3, #2
 80022f2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022f4:	2302      	movs	r3, #2
 80022f6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f8:	2303      	movs	r3, #3
 80022fa:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022fc:	2301      	movs	r3, #1
 80022fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002300:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002304:	4619      	mov	r1, r3
 8002306:	4878      	ldr	r0, [pc, #480]	@ (80024e8 <HAL_TIM_Encoder_MspInit+0x258>)
 8002308:	f001 f8dc 	bl	80034c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800230c:	e12b      	b.n	8002566 <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM2)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002316:	d14b      	bne.n	80023b0 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002318:	2300      	movs	r3, #0
 800231a:	633b      	str	r3, [r7, #48]	@ 0x30
 800231c:	4b71      	ldr	r3, [pc, #452]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002320:	4a70      	ldr	r2, [pc, #448]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	6413      	str	r3, [r2, #64]	@ 0x40
 8002328:	4b6e      	ldr	r3, [pc, #440]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 800232a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	633b      	str	r3, [r7, #48]	@ 0x30
 8002332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002334:	2300      	movs	r3, #0
 8002336:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002338:	4b6a      	ldr	r3, [pc, #424]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233c:	4a69      	ldr	r2, [pc, #420]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 800233e:	f043 0301 	orr.w	r3, r3, #1
 8002342:	6313      	str	r3, [r2, #48]	@ 0x30
 8002344:	4b67      	ldr	r3, [pc, #412]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800234e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002350:	2300      	movs	r3, #0
 8002352:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002354:	4b63      	ldr	r3, [pc, #396]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002358:	4a62      	ldr	r2, [pc, #392]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 800235a:	f043 0302 	orr.w	r3, r3, #2
 800235e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002360:	4b60      	ldr	r3, [pc, #384]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	62bb      	str	r3, [r7, #40]	@ 0x28
 800236a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = EN_X_A_Pin;
 800236c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002370:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002372:	2302      	movs	r3, #2
 8002374:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	2300      	movs	r3, #0
 800237c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800237e:	2301      	movs	r3, #1
 8002380:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(EN_X_A_GPIO_Port, &GPIO_InitStruct);
 8002382:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002386:	4619      	mov	r1, r3
 8002388:	4858      	ldr	r0, [pc, #352]	@ (80024ec <HAL_TIM_Encoder_MspInit+0x25c>)
 800238a:	f001 f89b 	bl	80034c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EN_X_B_Pin;
 800238e:	2308      	movs	r3, #8
 8002390:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239a:	2300      	movs	r3, #0
 800239c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800239e:	2301      	movs	r3, #1
 80023a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(EN_X_B_GPIO_Port, &GPIO_InitStruct);
 80023a2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80023a6:	4619      	mov	r1, r3
 80023a8:	4851      	ldr	r0, [pc, #324]	@ (80024f0 <HAL_TIM_Encoder_MspInit+0x260>)
 80023aa:	f001 f88b 	bl	80034c4 <HAL_GPIO_Init>
}
 80023ae:	e0da      	b.n	8002566 <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM3)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a4f      	ldr	r2, [pc, #316]	@ (80024f4 <HAL_TIM_Encoder_MspInit+0x264>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d12c      	bne.n	8002414 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80023be:	4b49      	ldr	r3, [pc, #292]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	4a48      	ldr	r2, [pc, #288]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 80023c4:	f043 0302 	orr.w	r3, r3, #2
 80023c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ca:	4b46      	ldr	r3, [pc, #280]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80023d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	623b      	str	r3, [r7, #32]
 80023da:	4b42      	ldr	r3, [pc, #264]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	4a41      	ldr	r2, [pc, #260]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023e6:	4b3f      	ldr	r3, [pc, #252]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	623b      	str	r3, [r7, #32]
 80023f0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = EN_Y_A_Pin|EN_Y_B_Pin;
 80023f2:	2330      	movs	r3, #48	@ 0x30
 80023f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023fa:	2302      	movs	r3, #2
 80023fc:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fe:	2300      	movs	r3, #0
 8002400:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002402:	2302      	movs	r3, #2
 8002404:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002406:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800240a:	4619      	mov	r1, r3
 800240c:	4838      	ldr	r0, [pc, #224]	@ (80024f0 <HAL_TIM_Encoder_MspInit+0x260>)
 800240e:	f001 f859 	bl	80034c4 <HAL_GPIO_Init>
}
 8002412:	e0a8      	b.n	8002566 <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM4)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a37      	ldr	r2, [pc, #220]	@ (80024f8 <HAL_TIM_Encoder_MspInit+0x268>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d12d      	bne.n	800247a <HAL_TIM_Encoder_MspInit+0x1ea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	4b30      	ldr	r3, [pc, #192]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	4a2f      	ldr	r2, [pc, #188]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002428:	f043 0304 	orr.w	r3, r3, #4
 800242c:	6413      	str	r3, [r2, #64]	@ 0x40
 800242e:	4b2d      	ldr	r3, [pc, #180]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
 800243e:	4b29      	ldr	r3, [pc, #164]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	4a28      	ldr	r2, [pc, #160]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002444:	f043 0308 	orr.w	r3, r3, #8
 8002448:	6313      	str	r3, [r2, #48]	@ 0x30
 800244a:	4b26      	ldr	r3, [pc, #152]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	61bb      	str	r3, [r7, #24]
 8002454:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002456:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800245a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002464:	2303      	movs	r3, #3
 8002466:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002468:	2302      	movs	r3, #2
 800246a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800246c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002470:	4619      	mov	r1, r3
 8002472:	4822      	ldr	r0, [pc, #136]	@ (80024fc <HAL_TIM_Encoder_MspInit+0x26c>)
 8002474:	f001 f826 	bl	80034c4 <HAL_GPIO_Init>
}
 8002478:	e075      	b.n	8002566 <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM5)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a20      	ldr	r2, [pc, #128]	@ (8002500 <HAL_TIM_Encoder_MspInit+0x270>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d13f      	bne.n	8002504 <HAL_TIM_Encoder_MspInit+0x274>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	4b16      	ldr	r3, [pc, #88]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	4a15      	ldr	r2, [pc, #84]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 800248e:	f043 0308 	orr.w	r3, r3, #8
 8002492:	6413      	str	r3, [r2, #64]	@ 0x40
 8002494:	4b13      	ldr	r3, [pc, #76]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 8002496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a0:	2300      	movs	r3, #0
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	4b0f      	ldr	r3, [pc, #60]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 80024a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a8:	4a0e      	ldr	r2, [pc, #56]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80024b0:	4b0c      	ldr	r3, [pc, #48]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x254>)
 80024b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024bc:	2303      	movs	r3, #3
 80024be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c0:	2302      	movs	r3, #2
 80024c2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024c4:	2302      	movs	r3, #2
 80024c6:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c8:	2303      	movs	r3, #3
 80024ca:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80024cc:	2302      	movs	r3, #2
 80024ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80024d4:	4619      	mov	r1, r3
 80024d6:	4805      	ldr	r0, [pc, #20]	@ (80024ec <HAL_TIM_Encoder_MspInit+0x25c>)
 80024d8:	f000 fff4 	bl	80034c4 <HAL_GPIO_Init>
}
 80024dc:	e043      	b.n	8002566 <HAL_TIM_Encoder_MspInit+0x2d6>
 80024de:	bf00      	nop
 80024e0:	40010000 	.word	0x40010000
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40020000 	.word	0x40020000
 80024f0:	40020400 	.word	0x40020400
 80024f4:	40000400 	.word	0x40000400
 80024f8:	40000800 	.word	0x40000800
 80024fc:	40020c00 	.word	0x40020c00
 8002500:	40000c00 	.word	0x40000c00
  else if(htim_encoder->Instance==TIM8)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a19      	ldr	r2, [pc, #100]	@ (8002570 <HAL_TIM_Encoder_MspInit+0x2e0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d12b      	bne.n	8002566 <HAL_TIM_Encoder_MspInit+0x2d6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	4b18      	ldr	r3, [pc, #96]	@ (8002574 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002516:	4a17      	ldr	r2, [pc, #92]	@ (8002574 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002518:	f043 0302 	orr.w	r3, r3, #2
 800251c:	6453      	str	r3, [r2, #68]	@ 0x44
 800251e:	4b15      	ldr	r3, [pc, #84]	@ (8002574 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	4b11      	ldr	r3, [pc, #68]	@ (8002574 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	4a10      	ldr	r2, [pc, #64]	@ (8002574 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8002534:	f043 0304 	orr.w	r3, r3, #4
 8002538:	6313      	str	r3, [r2, #48]	@ 0x30
 800253a:	4b0e      	ldr	r3, [pc, #56]	@ (8002574 <HAL_TIM_Encoder_MspInit+0x2e4>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002546:	23c0      	movs	r3, #192	@ 0xc0
 8002548:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254a:	2302      	movs	r3, #2
 800254c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800254e:	2302      	movs	r3, #2
 8002550:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002552:	2303      	movs	r3, #3
 8002554:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002556:	2303      	movs	r3, #3
 8002558:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800255a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800255e:	4619      	mov	r1, r3
 8002560:	4805      	ldr	r0, [pc, #20]	@ (8002578 <HAL_TIM_Encoder_MspInit+0x2e8>)
 8002562:	f000 ffaf 	bl	80034c4 <HAL_GPIO_Init>
}
 8002566:	bf00      	nop
 8002568:	3750      	adds	r7, #80	@ 0x50
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40010400 	.word	0x40010400
 8002574:	40023800 	.word	0x40023800
 8002578:	40020800 	.word	0x40020800

0800257c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a15      	ldr	r2, [pc, #84]	@ (80025e0 <HAL_TIM_PWM_MspInit+0x64>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d10e      	bne.n	80025ac <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	4b14      	ldr	r3, [pc, #80]	@ (80025e4 <HAL_TIM_PWM_MspInit+0x68>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	4a13      	ldr	r2, [pc, #76]	@ (80025e4 <HAL_TIM_PWM_MspInit+0x68>)
 8002598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800259c:	6453      	str	r3, [r2, #68]	@ 0x44
 800259e:	4b11      	ldr	r3, [pc, #68]	@ (80025e4 <HAL_TIM_PWM_MspInit+0x68>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80025aa:	e012      	b.n	80025d2 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0d      	ldr	r2, [pc, #52]	@ (80025e8 <HAL_TIM_PWM_MspInit+0x6c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d10d      	bne.n	80025d2 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	4b0a      	ldr	r3, [pc, #40]	@ (80025e4 <HAL_TIM_PWM_MspInit+0x68>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025be:	4a09      	ldr	r2, [pc, #36]	@ (80025e4 <HAL_TIM_PWM_MspInit+0x68>)
 80025c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80025c6:	4b07      	ldr	r3, [pc, #28]	@ (80025e4 <HAL_TIM_PWM_MspInit+0x68>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]
}
 80025d2:	bf00      	nop
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40014000 	.word	0x40014000
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40001800 	.word	0x40001800

080025ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a29      	ldr	r2, [pc, #164]	@ (80026a0 <HAL_TIM_Base_MspInit+0xb4>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d10e      	bne.n	800261c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	4b28      	ldr	r3, [pc, #160]	@ (80026a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002606:	4a27      	ldr	r2, [pc, #156]	@ (80026a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800260c:	6453      	str	r3, [r2, #68]	@ 0x44
 800260e:	4b25      	ldr	r3, [pc, #148]	@ (80026a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800261a:	e03a      	b.n	8002692 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a21      	ldr	r2, [pc, #132]	@ (80026a8 <HAL_TIM_Base_MspInit+0xbc>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d10e      	bne.n	8002644 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	613b      	str	r3, [r7, #16]
 800262a:	4b1e      	ldr	r3, [pc, #120]	@ (80026a4 <HAL_TIM_Base_MspInit+0xb8>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262e:	4a1d      	ldr	r2, [pc, #116]	@ (80026a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002630:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002634:	6453      	str	r3, [r2, #68]	@ 0x44
 8002636:	4b1b      	ldr	r3, [pc, #108]	@ (80026a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800263e:	613b      	str	r3, [r7, #16]
 8002640:	693b      	ldr	r3, [r7, #16]
}
 8002642:	e026      	b.n	8002692 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM13)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a18      	ldr	r2, [pc, #96]	@ (80026ac <HAL_TIM_Base_MspInit+0xc0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d10e      	bne.n	800266c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	4b14      	ldr	r3, [pc, #80]	@ (80026a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002656:	4a13      	ldr	r2, [pc, #76]	@ (80026a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800265c:	6413      	str	r3, [r2, #64]	@ 0x40
 800265e:	4b11      	ldr	r3, [pc, #68]	@ (80026a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
}
 800266a:	e012      	b.n	8002692 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM14)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a0f      	ldr	r2, [pc, #60]	@ (80026b0 <HAL_TIM_Base_MspInit+0xc4>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d10d      	bne.n	8002692 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	4b0a      	ldr	r3, [pc, #40]	@ (80026a4 <HAL_TIM_Base_MspInit+0xb8>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267e:	4a09      	ldr	r2, [pc, #36]	@ (80026a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002680:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002684:	6413      	str	r3, [r2, #64]	@ 0x40
 8002686:	4b07      	ldr	r3, [pc, #28]	@ (80026a4 <HAL_TIM_Base_MspInit+0xb8>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268e:	60bb      	str	r3, [r7, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
}
 8002692:	bf00      	nop
 8002694:	371c      	adds	r7, #28
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	40014400 	.word	0x40014400
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40014800 	.word	0x40014800
 80026ac:	40001c00 	.word	0x40001c00
 80026b0:	40002000 	.word	0x40002000

080026b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08e      	sub	sp, #56	@ 0x38
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a6d      	ldr	r2, [pc, #436]	@ (8002888 <HAL_TIM_MspPostInit+0x1d4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d11e      	bne.n	8002714 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	623b      	str	r3, [r7, #32]
 80026da:	4b6c      	ldr	r3, [pc, #432]	@ (800288c <HAL_TIM_MspPostInit+0x1d8>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	4a6b      	ldr	r2, [pc, #428]	@ (800288c <HAL_TIM_MspPostInit+0x1d8>)
 80026e0:	f043 0310 	orr.w	r3, r3, #16
 80026e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e6:	4b69      	ldr	r3, [pc, #420]	@ (800288c <HAL_TIM_MspPostInit+0x1d8>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	623b      	str	r3, [r7, #32]
 80026f0:	6a3b      	ldr	r3, [r7, #32]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80026f2:	2360      	movs	r3, #96	@ 0x60
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f6:	2302      	movs	r3, #2
 80026f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fe:	2300      	movs	r3, #0
 8002700:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002702:	2303      	movs	r3, #3
 8002704:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800270a:	4619      	mov	r1, r3
 800270c:	4860      	ldr	r0, [pc, #384]	@ (8002890 <HAL_TIM_MspPostInit+0x1dc>)
 800270e:	f000 fed9 	bl	80034c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002712:	e0b5      	b.n	8002880 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM10)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a5e      	ldr	r2, [pc, #376]	@ (8002894 <HAL_TIM_MspPostInit+0x1e0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d11f      	bne.n	800275e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
 8002722:	4b5a      	ldr	r3, [pc, #360]	@ (800288c <HAL_TIM_MspPostInit+0x1d8>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002726:	4a59      	ldr	r2, [pc, #356]	@ (800288c <HAL_TIM_MspPostInit+0x1d8>)
 8002728:	f043 0302 	orr.w	r3, r3, #2
 800272c:	6313      	str	r3, [r2, #48]	@ 0x30
 800272e:	4b57      	ldr	r3, [pc, #348]	@ (800288c <HAL_TIM_MspPostInit+0x1d8>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	61fb      	str	r3, [r7, #28]
 8002738:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = EXTRA2_PWM_L_Pin;
 800273a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800273e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002740:	2302      	movs	r3, #2
 8002742:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002748:	2300      	movs	r3, #0
 800274a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800274c:	2303      	movs	r3, #3
 800274e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(EXTRA2_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8002750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002754:	4619      	mov	r1, r3
 8002756:	4850      	ldr	r0, [pc, #320]	@ (8002898 <HAL_TIM_MspPostInit+0x1e4>)
 8002758:	f000 feb4 	bl	80034c4 <HAL_GPIO_Init>
}
 800275c:	e090      	b.n	8002880 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM11)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a4e      	ldr	r2, [pc, #312]	@ (800289c <HAL_TIM_MspPostInit+0x1e8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d11f      	bne.n	80027a8 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002768:	2300      	movs	r3, #0
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	4b47      	ldr	r3, [pc, #284]	@ (800288c <HAL_TIM_MspPostInit+0x1d8>)
 800276e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002770:	4a46      	ldr	r2, [pc, #280]	@ (800288c <HAL_TIM_MspPostInit+0x1d8>)
 8002772:	f043 0302 	orr.w	r3, r3, #2
 8002776:	6313      	str	r3, [r2, #48]	@ 0x30
 8002778:	4b44      	ldr	r3, [pc, #272]	@ (800288c <HAL_TIM_MspPostInit+0x1d8>)
 800277a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	61bb      	str	r3, [r7, #24]
 8002782:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RF_PWM_L_Pin;
 8002784:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002788:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278a:	2302      	movs	r3, #2
 800278c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002792:	2300      	movs	r3, #0
 8002794:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002796:	2303      	movs	r3, #3
 8002798:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RF_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800279a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800279e:	4619      	mov	r1, r3
 80027a0:	483d      	ldr	r0, [pc, #244]	@ (8002898 <HAL_TIM_MspPostInit+0x1e4>)
 80027a2:	f000 fe8f 	bl	80034c4 <HAL_GPIO_Init>
}
 80027a6:	e06b      	b.n	8002880 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM12)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a3c      	ldr	r2, [pc, #240]	@ (80028a0 <HAL_TIM_MspPostInit+0x1ec>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d11f      	bne.n	80027f2 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	4b35      	ldr	r3, [pc, #212]	@ (800288c <HAL_TIM_MspPostInit+0x1d8>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	4a34      	ldr	r2, [pc, #208]	@ (800288c <HAL_TIM_MspPostInit+0x1d8>)
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027c2:	4b32      	ldr	r3, [pc, #200]	@ (800288c <HAL_TIM_MspPostInit+0x1d8>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LB_PWM_L_Pin|RB_PWM_L_Pin;
 80027ce:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d4:	2302      	movs	r3, #2
 80027d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d8:	2300      	movs	r3, #0
 80027da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027dc:	2300      	movs	r3, #0
 80027de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80027e0:	2309      	movs	r3, #9
 80027e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027e8:	4619      	mov	r1, r3
 80027ea:	482b      	ldr	r0, [pc, #172]	@ (8002898 <HAL_TIM_MspPostInit+0x1e4>)
 80027ec:	f000 fe6a 	bl	80034c4 <HAL_GPIO_Init>
}
 80027f0:	e046      	b.n	8002880 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM13)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a2b      	ldr	r2, [pc, #172]	@ (80028a4 <HAL_TIM_MspPostInit+0x1f0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d11e      	bne.n	800283a <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	4b22      	ldr	r3, [pc, #136]	@ (800288c <HAL_TIM_MspPostInit+0x1d8>)
 8002802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002804:	4a21      	ldr	r2, [pc, #132]	@ (800288c <HAL_TIM_MspPostInit+0x1d8>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	6313      	str	r3, [r2, #48]	@ 0x30
 800280c:	4b1f      	ldr	r3, [pc, #124]	@ (800288c <HAL_TIM_MspPostInit+0x1d8>)
 800280e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	613b      	str	r3, [r7, #16]
 8002816:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO_2_Pin;
 8002818:	2340      	movs	r3, #64	@ 0x40
 800281a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002824:	2300      	movs	r3, #0
 8002826:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002828:	2309      	movs	r3, #9
 800282a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SERVO_2_GPIO_Port, &GPIO_InitStruct);
 800282c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002830:	4619      	mov	r1, r3
 8002832:	481d      	ldr	r0, [pc, #116]	@ (80028a8 <HAL_TIM_MspPostInit+0x1f4>)
 8002834:	f000 fe46 	bl	80034c4 <HAL_GPIO_Init>
}
 8002838:	e022      	b.n	8002880 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM14)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a1b      	ldr	r2, [pc, #108]	@ (80028ac <HAL_TIM_MspPostInit+0x1f8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d11d      	bne.n	8002880 <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	4b10      	ldr	r3, [pc, #64]	@ (800288c <HAL_TIM_MspPostInit+0x1d8>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284c:	4a0f      	ldr	r2, [pc, #60]	@ (800288c <HAL_TIM_MspPostInit+0x1d8>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6313      	str	r3, [r2, #48]	@ 0x30
 8002854:	4b0d      	ldr	r3, [pc, #52]	@ (800288c <HAL_TIM_MspPostInit+0x1d8>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LF_PWM_L_Pin;
 8002860:	2380      	movs	r3, #128	@ 0x80
 8002862:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002864:	2302      	movs	r3, #2
 8002866:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286c:	2300      	movs	r3, #0
 800286e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002870:	2309      	movs	r3, #9
 8002872:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LF_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8002874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002878:	4619      	mov	r1, r3
 800287a:	480b      	ldr	r0, [pc, #44]	@ (80028a8 <HAL_TIM_MspPostInit+0x1f4>)
 800287c:	f000 fe22 	bl	80034c4 <HAL_GPIO_Init>
}
 8002880:	bf00      	nop
 8002882:	3738      	adds	r7, #56	@ 0x38
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40014000 	.word	0x40014000
 800288c:	40023800 	.word	0x40023800
 8002890:	40021000 	.word	0x40021000
 8002894:	40014400 	.word	0x40014400
 8002898:	40020400 	.word	0x40020400
 800289c:	40014800 	.word	0x40014800
 80028a0:	40001800 	.word	0x40001800
 80028a4:	40001c00 	.word	0x40001c00
 80028a8:	40020000 	.word	0x40020000
 80028ac:	40002000 	.word	0x40002000

080028b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08c      	sub	sp, #48	@ 0x30
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b8:	f107 031c 	add.w	r3, r7, #28
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	605a      	str	r2, [r3, #4]
 80028c2:	609a      	str	r2, [r3, #8]
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a36      	ldr	r2, [pc, #216]	@ (80029a8 <HAL_UART_MspInit+0xf8>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d12d      	bne.n	800292e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]
 80028d6:	4b35      	ldr	r3, [pc, #212]	@ (80029ac <HAL_UART_MspInit+0xfc>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	4a34      	ldr	r2, [pc, #208]	@ (80029ac <HAL_UART_MspInit+0xfc>)
 80028dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80028e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028e2:	4b32      	ldr	r3, [pc, #200]	@ (80029ac <HAL_UART_MspInit+0xfc>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028ea:	61bb      	str	r3, [r7, #24]
 80028ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	4b2e      	ldr	r3, [pc, #184]	@ (80029ac <HAL_UART_MspInit+0xfc>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	4a2d      	ldr	r2, [pc, #180]	@ (80029ac <HAL_UART_MspInit+0xfc>)
 80028f8:	f043 0304 	orr.w	r3, r3, #4
 80028fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028fe:	4b2b      	ldr	r3, [pc, #172]	@ (80029ac <HAL_UART_MspInit+0xfc>)
 8002900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800290a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800290e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002910:	2302      	movs	r3, #2
 8002912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002914:	2300      	movs	r3, #0
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002918:	2303      	movs	r3, #3
 800291a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800291c:	2308      	movs	r3, #8
 800291e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002920:	f107 031c 	add.w	r3, r7, #28
 8002924:	4619      	mov	r1, r3
 8002926:	4822      	ldr	r0, [pc, #136]	@ (80029b0 <HAL_UART_MspInit+0x100>)
 8002928:	f000 fdcc 	bl	80034c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800292c:	e038      	b.n	80029a0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a20      	ldr	r2, [pc, #128]	@ (80029b4 <HAL_UART_MspInit+0x104>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d133      	bne.n	80029a0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002938:	2300      	movs	r3, #0
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	4b1b      	ldr	r3, [pc, #108]	@ (80029ac <HAL_UART_MspInit+0xfc>)
 800293e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002940:	4a1a      	ldr	r2, [pc, #104]	@ (80029ac <HAL_UART_MspInit+0xfc>)
 8002942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002946:	6413      	str	r3, [r2, #64]	@ 0x40
 8002948:	4b18      	ldr	r3, [pc, #96]	@ (80029ac <HAL_UART_MspInit+0xfc>)
 800294a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	4b14      	ldr	r3, [pc, #80]	@ (80029ac <HAL_UART_MspInit+0xfc>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295c:	4a13      	ldr	r2, [pc, #76]	@ (80029ac <HAL_UART_MspInit+0xfc>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6313      	str	r3, [r2, #48]	@ 0x30
 8002964:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <HAL_UART_MspInit+0xfc>)
 8002966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002970:	230c      	movs	r3, #12
 8002972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002974:	2302      	movs	r3, #2
 8002976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002978:	2300      	movs	r3, #0
 800297a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297c:	2303      	movs	r3, #3
 800297e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002980:	2307      	movs	r3, #7
 8002982:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002984:	f107 031c 	add.w	r3, r7, #28
 8002988:	4619      	mov	r1, r3
 800298a:	480b      	ldr	r0, [pc, #44]	@ (80029b8 <HAL_UART_MspInit+0x108>)
 800298c:	f000 fd9a 	bl	80034c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002990:	2200      	movs	r2, #0
 8002992:	2100      	movs	r1, #0
 8002994:	2026      	movs	r0, #38	@ 0x26
 8002996:	f000 fcbe 	bl	8003316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800299a:	2026      	movs	r0, #38	@ 0x26
 800299c:	f000 fcd7 	bl	800334e <HAL_NVIC_EnableIRQ>
}
 80029a0:	bf00      	nop
 80029a2:	3730      	adds	r7, #48	@ 0x30
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40004c00 	.word	0x40004c00
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40020800 	.word	0x40020800
 80029b4:	40004400 	.word	0x40004400
 80029b8:	40020000 	.word	0x40020000

080029bc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a12      	ldr	r2, [pc, #72]	@ (8002a14 <HAL_UART_MspDeInit+0x58>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d10b      	bne.n	80029e6 <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 80029ce:	4b12      	ldr	r3, [pc, #72]	@ (8002a18 <HAL_UART_MspDeInit+0x5c>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	4a11      	ldr	r2, [pc, #68]	@ (8002a18 <HAL_UART_MspDeInit+0x5c>)
 80029d4:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80029d8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 80029da:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80029de:	480f      	ldr	r0, [pc, #60]	@ (8002a1c <HAL_UART_MspDeInit+0x60>)
 80029e0:	f000 ff0c 	bl	80037fc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80029e4:	e011      	b.n	8002a0a <HAL_UART_MspDeInit+0x4e>
  else if(huart->Instance==USART2)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002a20 <HAL_UART_MspDeInit+0x64>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d10c      	bne.n	8002a0a <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART2_CLK_DISABLE();
 80029f0:	4b09      	ldr	r3, [pc, #36]	@ (8002a18 <HAL_UART_MspDeInit+0x5c>)
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	4a08      	ldr	r2, [pc, #32]	@ (8002a18 <HAL_UART_MspDeInit+0x5c>)
 80029f6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80029fa:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80029fc:	210c      	movs	r1, #12
 80029fe:	4809      	ldr	r0, [pc, #36]	@ (8002a24 <HAL_UART_MspDeInit+0x68>)
 8002a00:	f000 fefc 	bl	80037fc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002a04:	2026      	movs	r0, #38	@ 0x26
 8002a06:	f000 fcb0 	bl	800336a <HAL_NVIC_DisableIRQ>
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40004c00 	.word	0x40004c00
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	40020800 	.word	0x40020800
 8002a20:	40004400 	.word	0x40004400
 8002a24:	40020000 	.word	0x40020000

08002a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a2c:	bf00      	nop
 8002a2e:	e7fd      	b.n	8002a2c <NMI_Handler+0x4>

08002a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a34:	bf00      	nop
 8002a36:	e7fd      	b.n	8002a34 <HardFault_Handler+0x4>

08002a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a3c:	bf00      	nop
 8002a3e:	e7fd      	b.n	8002a3c <MemManage_Handler+0x4>

08002a40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a44:	bf00      	nop
 8002a46:	e7fd      	b.n	8002a44 <BusFault_Handler+0x4>

08002a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a4c:	bf00      	nop
 8002a4e:	e7fd      	b.n	8002a4c <UsageFault_Handler+0x4>

08002a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a7e:	f000 f8a5 	bl	8002bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a8c:	4802      	ldr	r0, [pc, #8]	@ (8002a98 <USART2_IRQHandler+0x10>)
 8002a8e:	f004 f863 	bl	8006b58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a92:	bf00      	nop
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	20000620 	.word	0x20000620

08002a9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002aa0:	4802      	ldr	r0, [pc, #8]	@ (8002aac <OTG_FS_IRQHandler+0x10>)
 8002aa2:	f001 fa49 	bl	8003f38 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002aa6:	bf00      	nop
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20001d94 	.word	0x20001d94

08002ab0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ab4:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <SystemInit+0x20>)
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aba:	4a05      	ldr	r2, [pc, #20]	@ (8002ad0 <SystemInit+0x20>)
 8002abc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ac0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ac4:	bf00      	nop
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <Reset_Handler>:
 8002ad4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b0c <LoopFillZerobss+0xe>
 8002ad8:	f7ff ffea 	bl	8002ab0 <SystemInit>
 8002adc:	480c      	ldr	r0, [pc, #48]	@ (8002b10 <LoopFillZerobss+0x12>)
 8002ade:	490d      	ldr	r1, [pc, #52]	@ (8002b14 <LoopFillZerobss+0x16>)
 8002ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8002b18 <LoopFillZerobss+0x1a>)
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e002      	b.n	8002aec <LoopCopyDataInit>

08002ae6 <CopyDataInit>:
 8002ae6:	58d4      	ldr	r4, [r2, r3]
 8002ae8:	50c4      	str	r4, [r0, r3]
 8002aea:	3304      	adds	r3, #4

08002aec <LoopCopyDataInit>:
 8002aec:	18c4      	adds	r4, r0, r3
 8002aee:	428c      	cmp	r4, r1
 8002af0:	d3f9      	bcc.n	8002ae6 <CopyDataInit>
 8002af2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b1c <LoopFillZerobss+0x1e>)
 8002af4:	4c0a      	ldr	r4, [pc, #40]	@ (8002b20 <LoopFillZerobss+0x22>)
 8002af6:	2300      	movs	r3, #0
 8002af8:	e001      	b.n	8002afe <LoopFillZerobss>

08002afa <FillZerobss>:
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	3204      	adds	r2, #4

08002afe <LoopFillZerobss>:
 8002afe:	42a2      	cmp	r2, r4
 8002b00:	d3fb      	bcc.n	8002afa <FillZerobss>
 8002b02:	f00a fc0b 	bl	800d31c <__libc_init_array>
 8002b06:	f7fe f9bb 	bl	8000e80 <main>
 8002b0a:	4770      	bx	lr
 8002b0c:	20020000 	.word	0x20020000
 8002b10:	20000000 	.word	0x20000000
 8002b14:	20000168 	.word	0x20000168
 8002b18:	0800ee68 	.word	0x0800ee68
 8002b1c:	20000168 	.word	0x20000168
 8002b20:	200025d0 	.word	0x200025d0

08002b24 <ADC_IRQHandler>:
 8002b24:	e7fe      	b.n	8002b24 <ADC_IRQHandler>
	...

08002b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b68 <HAL_Init+0x40>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0d      	ldr	r2, [pc, #52]	@ (8002b68 <HAL_Init+0x40>)
 8002b32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b36:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b38:	4b0b      	ldr	r3, [pc, #44]	@ (8002b68 <HAL_Init+0x40>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b68 <HAL_Init+0x40>)
 8002b3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b42:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b44:	4b08      	ldr	r3, [pc, #32]	@ (8002b68 <HAL_Init+0x40>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a07      	ldr	r2, [pc, #28]	@ (8002b68 <HAL_Init+0x40>)
 8002b4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b4e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b50:	2003      	movs	r0, #3
 8002b52:	f000 fbd5 	bl	8003300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b56:	200f      	movs	r0, #15
 8002b58:	f000 f808 	bl	8002b6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b5c:	f7ff fa60 	bl	8002020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40023c00 	.word	0x40023c00

08002b6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b74:	4b12      	ldr	r3, [pc, #72]	@ (8002bc0 <HAL_InitTick+0x54>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4b12      	ldr	r3, [pc, #72]	@ (8002bc4 <HAL_InitTick+0x58>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 fbfb 	bl	8003386 <HAL_SYSTICK_Config>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e00e      	b.n	8002bb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b0f      	cmp	r3, #15
 8002b9e:	d80a      	bhi.n	8002bb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba8:	f000 fbb5 	bl	8003316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bac:	4a06      	ldr	r2, [pc, #24]	@ (8002bc8 <HAL_InitTick+0x5c>)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	e000      	b.n	8002bb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	20000008 	.word	0x20000008
 8002bc8:	20000004 	.word	0x20000004

08002bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <HAL_IncTick+0x20>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <HAL_IncTick+0x24>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4413      	add	r3, r2
 8002bdc:	4a04      	ldr	r2, [pc, #16]	@ (8002bf0 <HAL_IncTick+0x24>)
 8002bde:	6013      	str	r3, [r2, #0]
}
 8002be0:	bf00      	nop
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20000008 	.word	0x20000008
 8002bf0:	200006b0 	.word	0x200006b0

08002bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bf8:	4b03      	ldr	r3, [pc, #12]	@ (8002c08 <HAL_GetTick+0x14>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	200006b0 	.word	0x200006b0

08002c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c14:	f7ff ffee 	bl	8002bf4 <HAL_GetTick>
 8002c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c24:	d005      	beq.n	8002c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c26:	4b0a      	ldr	r3, [pc, #40]	@ (8002c50 <HAL_Delay+0x44>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4413      	add	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c32:	bf00      	nop
 8002c34:	f7ff ffde 	bl	8002bf4 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d8f7      	bhi.n	8002c34 <HAL_Delay+0x28>
  {
  }
}
 8002c44:	bf00      	nop
 8002c46:	bf00      	nop
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20000008 	.word	0x20000008

08002c54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e033      	b.n	8002cd2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d109      	bne.n	8002c86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7ff f9fc 	bl	8002070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d118      	bne.n	8002cc4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c9a:	f023 0302 	bic.w	r3, r3, #2
 8002c9e:	f043 0202 	orr.w	r2, r3, #2
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f93a 	bl	8002f20 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	f023 0303 	bic.w	r3, r3, #3
 8002cba:	f043 0201 	orr.w	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002cc2:	e001      	b.n	8002cc8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x1c>
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	e105      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x228>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b09      	cmp	r3, #9
 8002d06:	d925      	bls.n	8002d54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68d9      	ldr	r1, [r3, #12]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	461a      	mov	r2, r3
 8002d16:	4613      	mov	r3, r2
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3b1e      	subs	r3, #30
 8002d1e:	2207      	movs	r2, #7
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43da      	mvns	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	400a      	ands	r2, r1
 8002d2c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68d9      	ldr	r1, [r3, #12]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	4618      	mov	r0, r3
 8002d40:	4603      	mov	r3, r0
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	4403      	add	r3, r0
 8002d46:	3b1e      	subs	r3, #30
 8002d48:	409a      	lsls	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	e022      	b.n	8002d9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6919      	ldr	r1, [r3, #16]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	4613      	mov	r3, r2
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	4413      	add	r3, r2
 8002d68:	2207      	movs	r2, #7
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43da      	mvns	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	400a      	ands	r2, r1
 8002d76:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6919      	ldr	r1, [r3, #16]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	4618      	mov	r0, r3
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	4403      	add	r3, r0
 8002d90:	409a      	lsls	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b06      	cmp	r3, #6
 8002da0:	d824      	bhi.n	8002dec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	3b05      	subs	r3, #5
 8002db4:	221f      	movs	r2, #31
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	43da      	mvns	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	400a      	ands	r2, r1
 8002dc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685a      	ldr	r2, [r3, #4]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	3b05      	subs	r3, #5
 8002dde:	fa00 f203 	lsl.w	r2, r0, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dea:	e04c      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	2b0c      	cmp	r3, #12
 8002df2:	d824      	bhi.n	8002e3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	3b23      	subs	r3, #35	@ 0x23
 8002e06:	221f      	movs	r2, #31
 8002e08:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0c:	43da      	mvns	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	400a      	ands	r2, r1
 8002e14:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	4618      	mov	r0, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3b23      	subs	r3, #35	@ 0x23
 8002e30:	fa00 f203 	lsl.w	r2, r0, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e3c:	e023      	b.n	8002e86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3b41      	subs	r3, #65	@ 0x41
 8002e50:	221f      	movs	r2, #31
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43da      	mvns	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	400a      	ands	r2, r1
 8002e5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	3b41      	subs	r3, #65	@ 0x41
 8002e7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e86:	4b22      	ldr	r3, [pc, #136]	@ (8002f10 <HAL_ADC_ConfigChannel+0x234>)
 8002e88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a21      	ldr	r2, [pc, #132]	@ (8002f14 <HAL_ADC_ConfigChannel+0x238>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d109      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x1cc>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2b12      	cmp	r3, #18
 8002e9a:	d105      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a19      	ldr	r2, [pc, #100]	@ (8002f14 <HAL_ADC_ConfigChannel+0x238>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d123      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x21e>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b10      	cmp	r3, #16
 8002eb8:	d003      	beq.n	8002ec2 <HAL_ADC_ConfigChannel+0x1e6>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2b11      	cmp	r3, #17
 8002ec0:	d11b      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b10      	cmp	r3, #16
 8002ed4:	d111      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ed6:	4b10      	ldr	r3, [pc, #64]	@ (8002f18 <HAL_ADC_ConfigChannel+0x23c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a10      	ldr	r2, [pc, #64]	@ (8002f1c <HAL_ADC_ConfigChannel+0x240>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	0c9a      	lsrs	r2, r3, #18
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002eec:	e002      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f9      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	40012300 	.word	0x40012300
 8002f14:	40012000 	.word	0x40012000
 8002f18:	20000000 	.word	0x20000000
 8002f1c:	431bde83 	.word	0x431bde83

08002f20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f28:	4b79      	ldr	r3, [pc, #484]	@ (8003110 <ADC_Init+0x1f0>)
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	431a      	orrs	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6859      	ldr	r1, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	021a      	lsls	r2, r3, #8
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002f78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6899      	ldr	r1, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb2:	4a58      	ldr	r2, [pc, #352]	@ (8003114 <ADC_Init+0x1f4>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d022      	beq.n	8002ffe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6899      	ldr	r1, [r3, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002fe8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6899      	ldr	r1, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	e00f      	b.n	800301e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800300c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800301c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0202 	bic.w	r2, r2, #2
 800302c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6899      	ldr	r1, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	7e1b      	ldrb	r3, [r3, #24]
 8003038:	005a      	lsls	r2, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01b      	beq.n	8003084 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800305a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800306a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6859      	ldr	r1, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003076:	3b01      	subs	r3, #1
 8003078:	035a      	lsls	r2, r3, #13
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	e007      	b.n	8003094 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003092:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80030a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	051a      	lsls	r2, r3, #20
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80030c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6899      	ldr	r1, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030d6:	025a      	lsls	r2, r3, #9
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6899      	ldr	r1, [r3, #8]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	029a      	lsls	r2, r3, #10
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	609a      	str	r2, [r3, #8]
}
 8003104:	bf00      	nop
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr
 8003110:	40012300 	.word	0x40012300
 8003114:	0f000001 	.word	0x0f000001

08003118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003128:	4b0c      	ldr	r3, [pc, #48]	@ (800315c <__NVIC_SetPriorityGrouping+0x44>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003134:	4013      	ands	r3, r2
 8003136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003140:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800314a:	4a04      	ldr	r2, [pc, #16]	@ (800315c <__NVIC_SetPriorityGrouping+0x44>)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	60d3      	str	r3, [r2, #12]
}
 8003150:	bf00      	nop
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003164:	4b04      	ldr	r3, [pc, #16]	@ (8003178 <__NVIC_GetPriorityGrouping+0x18>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	0a1b      	lsrs	r3, r3, #8
 800316a:	f003 0307 	and.w	r3, r3, #7
}
 800316e:	4618      	mov	r0, r3
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	2b00      	cmp	r3, #0
 800318c:	db0b      	blt.n	80031a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	f003 021f 	and.w	r2, r3, #31
 8003194:	4907      	ldr	r1, [pc, #28]	@ (80031b4 <__NVIC_EnableIRQ+0x38>)
 8003196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	2001      	movs	r0, #1
 800319e:	fa00 f202 	lsl.w	r2, r0, r2
 80031a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	e000e100 	.word	0xe000e100

080031b8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	db12      	blt.n	80031f0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	f003 021f 	and.w	r2, r3, #31
 80031d0:	490a      	ldr	r1, [pc, #40]	@ (80031fc <__NVIC_DisableIRQ+0x44>)
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	2001      	movs	r0, #1
 80031da:	fa00 f202 	lsl.w	r2, r0, r2
 80031de:	3320      	adds	r3, #32
 80031e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80031e4:	f3bf 8f4f 	dsb	sy
}
 80031e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031ea:	f3bf 8f6f 	isb	sy
}
 80031ee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr
 80031fc:	e000e100 	.word	0xe000e100

08003200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	6039      	str	r1, [r7, #0]
 800320a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800320c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003210:	2b00      	cmp	r3, #0
 8003212:	db0a      	blt.n	800322a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	b2da      	uxtb	r2, r3
 8003218:	490c      	ldr	r1, [pc, #48]	@ (800324c <__NVIC_SetPriority+0x4c>)
 800321a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321e:	0112      	lsls	r2, r2, #4
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	440b      	add	r3, r1
 8003224:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003228:	e00a      	b.n	8003240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	b2da      	uxtb	r2, r3
 800322e:	4908      	ldr	r1, [pc, #32]	@ (8003250 <__NVIC_SetPriority+0x50>)
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	3b04      	subs	r3, #4
 8003238:	0112      	lsls	r2, r2, #4
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	440b      	add	r3, r1
 800323e:	761a      	strb	r2, [r3, #24]
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	e000e100 	.word	0xe000e100
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003254:	b480      	push	{r7}
 8003256:	b089      	sub	sp, #36	@ 0x24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	f1c3 0307 	rsb	r3, r3, #7
 800326e:	2b04      	cmp	r3, #4
 8003270:	bf28      	it	cs
 8003272:	2304      	movcs	r3, #4
 8003274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	3304      	adds	r3, #4
 800327a:	2b06      	cmp	r3, #6
 800327c:	d902      	bls.n	8003284 <NVIC_EncodePriority+0x30>
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	3b03      	subs	r3, #3
 8003282:	e000      	b.n	8003286 <NVIC_EncodePriority+0x32>
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003288:	f04f 32ff 	mov.w	r2, #4294967295
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43da      	mvns	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	401a      	ands	r2, r3
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800329c:	f04f 31ff 	mov.w	r1, #4294967295
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	fa01 f303 	lsl.w	r3, r1, r3
 80032a6:	43d9      	mvns	r1, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ac:	4313      	orrs	r3, r2
         );
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3724      	adds	r7, #36	@ 0x24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032cc:	d301      	bcc.n	80032d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ce:	2301      	movs	r3, #1
 80032d0:	e00f      	b.n	80032f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032d2:	4a0a      	ldr	r2, [pc, #40]	@ (80032fc <SysTick_Config+0x40>)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032da:	210f      	movs	r1, #15
 80032dc:	f04f 30ff 	mov.w	r0, #4294967295
 80032e0:	f7ff ff8e 	bl	8003200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032e4:	4b05      	ldr	r3, [pc, #20]	@ (80032fc <SysTick_Config+0x40>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ea:	4b04      	ldr	r3, [pc, #16]	@ (80032fc <SysTick_Config+0x40>)
 80032ec:	2207      	movs	r2, #7
 80032ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	e000e010 	.word	0xe000e010

08003300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff ff05 	bl	8003118 <__NVIC_SetPriorityGrouping>
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003316:	b580      	push	{r7, lr}
 8003318:	b086      	sub	sp, #24
 800331a:	af00      	add	r7, sp, #0
 800331c:	4603      	mov	r3, r0
 800331e:	60b9      	str	r1, [r7, #8]
 8003320:	607a      	str	r2, [r7, #4]
 8003322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003328:	f7ff ff1a 	bl	8003160 <__NVIC_GetPriorityGrouping>
 800332c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	68b9      	ldr	r1, [r7, #8]
 8003332:	6978      	ldr	r0, [r7, #20]
 8003334:	f7ff ff8e 	bl	8003254 <NVIC_EncodePriority>
 8003338:	4602      	mov	r2, r0
 800333a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800333e:	4611      	mov	r1, r2
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff ff5d 	bl	8003200 <__NVIC_SetPriority>
}
 8003346:	bf00      	nop
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b082      	sub	sp, #8
 8003352:	af00      	add	r7, sp, #0
 8003354:	4603      	mov	r3, r0
 8003356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff ff0d 	bl	800317c <__NVIC_EnableIRQ>
}
 8003362:	bf00      	nop
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	4603      	mov	r3, r0
 8003372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ff1d 	bl	80031b8 <__NVIC_DisableIRQ>
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ff94 	bl	80032bc <SysTick_Config>
 8003394:	4603      	mov	r3, r0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b084      	sub	sp, #16
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033aa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033ac:	f7ff fc22 	bl	8002bf4 <HAL_GetTick>
 80033b0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d008      	beq.n	80033d0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2280      	movs	r2, #128	@ 0x80
 80033c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e052      	b.n	8003476 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0216 	bic.w	r2, r2, #22
 80033de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695a      	ldr	r2, [r3, #20]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033ee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d103      	bne.n	8003400 <HAL_DMA_Abort+0x62>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d007      	beq.n	8003410 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0208 	bic.w	r2, r2, #8
 800340e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0201 	bic.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003420:	e013      	b.n	800344a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003422:	f7ff fbe7 	bl	8002bf4 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b05      	cmp	r3, #5
 800342e:	d90c      	bls.n	800344a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2220      	movs	r2, #32
 8003434:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2203      	movs	r2, #3
 800343a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e015      	b.n	8003476 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e4      	bne.n	8003422 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800345c:	223f      	movs	r2, #63	@ 0x3f
 800345e:	409a      	lsls	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d004      	beq.n	800349c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2280      	movs	r2, #128	@ 0x80
 8003496:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e00c      	b.n	80034b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2205      	movs	r2, #5
 80034a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0201 	bic.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b089      	sub	sp, #36	@ 0x24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034da:	2300      	movs	r3, #0
 80034dc:	61fb      	str	r3, [r7, #28]
 80034de:	e16b      	b.n	80037b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034e0:	2201      	movs	r2, #1
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4013      	ands	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	f040 815a 	bne.w	80037b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	2b01      	cmp	r3, #1
 8003508:	d005      	beq.n	8003516 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003512:	2b02      	cmp	r3, #2
 8003514:	d130      	bne.n	8003578 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	2203      	movs	r2, #3
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43db      	mvns	r3, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4013      	ands	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4313      	orrs	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800354c:	2201      	movs	r2, #1
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4013      	ands	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	f003 0201 	and.w	r2, r3, #1
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	2b03      	cmp	r3, #3
 8003582:	d017      	beq.n	80035b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	2203      	movs	r2, #3
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	43db      	mvns	r3, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4013      	ands	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d123      	bne.n	8003608 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	08da      	lsrs	r2, r3, #3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3208      	adds	r2, #8
 80035c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	220f      	movs	r2, #15
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4013      	ands	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	08da      	lsrs	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3208      	adds	r2, #8
 8003602:	69b9      	ldr	r1, [r7, #24]
 8003604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	2203      	movs	r2, #3
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 0203 	and.w	r2, r3, #3
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80b4 	beq.w	80037b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	4b60      	ldr	r3, [pc, #384]	@ (80037d0 <HAL_GPIO_Init+0x30c>)
 8003650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003652:	4a5f      	ldr	r2, [pc, #380]	@ (80037d0 <HAL_GPIO_Init+0x30c>)
 8003654:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003658:	6453      	str	r3, [r2, #68]	@ 0x44
 800365a:	4b5d      	ldr	r3, [pc, #372]	@ (80037d0 <HAL_GPIO_Init+0x30c>)
 800365c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003666:	4a5b      	ldr	r2, [pc, #364]	@ (80037d4 <HAL_GPIO_Init+0x310>)
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	089b      	lsrs	r3, r3, #2
 800366c:	3302      	adds	r3, #2
 800366e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	220f      	movs	r2, #15
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4013      	ands	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a52      	ldr	r2, [pc, #328]	@ (80037d8 <HAL_GPIO_Init+0x314>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d02b      	beq.n	80036ea <HAL_GPIO_Init+0x226>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a51      	ldr	r2, [pc, #324]	@ (80037dc <HAL_GPIO_Init+0x318>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d025      	beq.n	80036e6 <HAL_GPIO_Init+0x222>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a50      	ldr	r2, [pc, #320]	@ (80037e0 <HAL_GPIO_Init+0x31c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d01f      	beq.n	80036e2 <HAL_GPIO_Init+0x21e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a4f      	ldr	r2, [pc, #316]	@ (80037e4 <HAL_GPIO_Init+0x320>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d019      	beq.n	80036de <HAL_GPIO_Init+0x21a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a4e      	ldr	r2, [pc, #312]	@ (80037e8 <HAL_GPIO_Init+0x324>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d013      	beq.n	80036da <HAL_GPIO_Init+0x216>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a4d      	ldr	r2, [pc, #308]	@ (80037ec <HAL_GPIO_Init+0x328>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d00d      	beq.n	80036d6 <HAL_GPIO_Init+0x212>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a4c      	ldr	r2, [pc, #304]	@ (80037f0 <HAL_GPIO_Init+0x32c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d007      	beq.n	80036d2 <HAL_GPIO_Init+0x20e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a4b      	ldr	r2, [pc, #300]	@ (80037f4 <HAL_GPIO_Init+0x330>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d101      	bne.n	80036ce <HAL_GPIO_Init+0x20a>
 80036ca:	2307      	movs	r3, #7
 80036cc:	e00e      	b.n	80036ec <HAL_GPIO_Init+0x228>
 80036ce:	2308      	movs	r3, #8
 80036d0:	e00c      	b.n	80036ec <HAL_GPIO_Init+0x228>
 80036d2:	2306      	movs	r3, #6
 80036d4:	e00a      	b.n	80036ec <HAL_GPIO_Init+0x228>
 80036d6:	2305      	movs	r3, #5
 80036d8:	e008      	b.n	80036ec <HAL_GPIO_Init+0x228>
 80036da:	2304      	movs	r3, #4
 80036dc:	e006      	b.n	80036ec <HAL_GPIO_Init+0x228>
 80036de:	2303      	movs	r3, #3
 80036e0:	e004      	b.n	80036ec <HAL_GPIO_Init+0x228>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e002      	b.n	80036ec <HAL_GPIO_Init+0x228>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <HAL_GPIO_Init+0x228>
 80036ea:	2300      	movs	r3, #0
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	f002 0203 	and.w	r2, r2, #3
 80036f2:	0092      	lsls	r2, r2, #2
 80036f4:	4093      	lsls	r3, r2
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036fc:	4935      	ldr	r1, [pc, #212]	@ (80037d4 <HAL_GPIO_Init+0x310>)
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	089b      	lsrs	r3, r3, #2
 8003702:	3302      	adds	r3, #2
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800370a:	4b3b      	ldr	r3, [pc, #236]	@ (80037f8 <HAL_GPIO_Init+0x334>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	43db      	mvns	r3, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4013      	ands	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800372e:	4a32      	ldr	r2, [pc, #200]	@ (80037f8 <HAL_GPIO_Init+0x334>)
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003734:	4b30      	ldr	r3, [pc, #192]	@ (80037f8 <HAL_GPIO_Init+0x334>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003758:	4a27      	ldr	r2, [pc, #156]	@ (80037f8 <HAL_GPIO_Init+0x334>)
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800375e:	4b26      	ldr	r3, [pc, #152]	@ (80037f8 <HAL_GPIO_Init+0x334>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	43db      	mvns	r3, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4013      	ands	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003782:	4a1d      	ldr	r2, [pc, #116]	@ (80037f8 <HAL_GPIO_Init+0x334>)
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003788:	4b1b      	ldr	r3, [pc, #108]	@ (80037f8 <HAL_GPIO_Init+0x334>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	43db      	mvns	r3, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037ac:	4a12      	ldr	r2, [pc, #72]	@ (80037f8 <HAL_GPIO_Init+0x334>)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3301      	adds	r3, #1
 80037b6:	61fb      	str	r3, [r7, #28]
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	2b0f      	cmp	r3, #15
 80037bc:	f67f ae90 	bls.w	80034e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037c0:	bf00      	nop
 80037c2:	bf00      	nop
 80037c4:	3724      	adds	r7, #36	@ 0x24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	40023800 	.word	0x40023800
 80037d4:	40013800 	.word	0x40013800
 80037d8:	40020000 	.word	0x40020000
 80037dc:	40020400 	.word	0x40020400
 80037e0:	40020800 	.word	0x40020800
 80037e4:	40020c00 	.word	0x40020c00
 80037e8:	40021000 	.word	0x40021000
 80037ec:	40021400 	.word	0x40021400
 80037f0:	40021800 	.word	0x40021800
 80037f4:	40021c00 	.word	0x40021c00
 80037f8:	40013c00 	.word	0x40013c00

080037fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800380e:	2300      	movs	r3, #0
 8003810:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	e0cd      	b.n	80039b4 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003818:	2201      	movs	r2, #1
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4013      	ands	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	429a      	cmp	r2, r3
 8003830:	f040 80bd 	bne.w	80039ae <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003834:	4a65      	ldr	r2, [pc, #404]	@ (80039cc <HAL_GPIO_DeInit+0x1d0>)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	089b      	lsrs	r3, r3, #2
 800383a:	3302      	adds	r3, #2
 800383c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003840:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f003 0303 	and.w	r3, r3, #3
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	220f      	movs	r2, #15
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	4013      	ands	r3, r2
 8003854:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a5d      	ldr	r2, [pc, #372]	@ (80039d0 <HAL_GPIO_DeInit+0x1d4>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d02b      	beq.n	80038b6 <HAL_GPIO_DeInit+0xba>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a5c      	ldr	r2, [pc, #368]	@ (80039d4 <HAL_GPIO_DeInit+0x1d8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d025      	beq.n	80038b2 <HAL_GPIO_DeInit+0xb6>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a5b      	ldr	r2, [pc, #364]	@ (80039d8 <HAL_GPIO_DeInit+0x1dc>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d01f      	beq.n	80038ae <HAL_GPIO_DeInit+0xb2>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a5a      	ldr	r2, [pc, #360]	@ (80039dc <HAL_GPIO_DeInit+0x1e0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d019      	beq.n	80038aa <HAL_GPIO_DeInit+0xae>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a59      	ldr	r2, [pc, #356]	@ (80039e0 <HAL_GPIO_DeInit+0x1e4>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d013      	beq.n	80038a6 <HAL_GPIO_DeInit+0xaa>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a58      	ldr	r2, [pc, #352]	@ (80039e4 <HAL_GPIO_DeInit+0x1e8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d00d      	beq.n	80038a2 <HAL_GPIO_DeInit+0xa6>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a57      	ldr	r2, [pc, #348]	@ (80039e8 <HAL_GPIO_DeInit+0x1ec>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d007      	beq.n	800389e <HAL_GPIO_DeInit+0xa2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a56      	ldr	r2, [pc, #344]	@ (80039ec <HAL_GPIO_DeInit+0x1f0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d101      	bne.n	800389a <HAL_GPIO_DeInit+0x9e>
 8003896:	2307      	movs	r3, #7
 8003898:	e00e      	b.n	80038b8 <HAL_GPIO_DeInit+0xbc>
 800389a:	2308      	movs	r3, #8
 800389c:	e00c      	b.n	80038b8 <HAL_GPIO_DeInit+0xbc>
 800389e:	2306      	movs	r3, #6
 80038a0:	e00a      	b.n	80038b8 <HAL_GPIO_DeInit+0xbc>
 80038a2:	2305      	movs	r3, #5
 80038a4:	e008      	b.n	80038b8 <HAL_GPIO_DeInit+0xbc>
 80038a6:	2304      	movs	r3, #4
 80038a8:	e006      	b.n	80038b8 <HAL_GPIO_DeInit+0xbc>
 80038aa:	2303      	movs	r3, #3
 80038ac:	e004      	b.n	80038b8 <HAL_GPIO_DeInit+0xbc>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e002      	b.n	80038b8 <HAL_GPIO_DeInit+0xbc>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <HAL_GPIO_DeInit+0xbc>
 80038b6:	2300      	movs	r3, #0
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	f002 0203 	and.w	r2, r2, #3
 80038be:	0092      	lsls	r2, r2, #2
 80038c0:	4093      	lsls	r3, r2
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d132      	bne.n	800392e <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80038c8:	4b49      	ldr	r3, [pc, #292]	@ (80039f0 <HAL_GPIO_DeInit+0x1f4>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	43db      	mvns	r3, r3
 80038d0:	4947      	ldr	r1, [pc, #284]	@ (80039f0 <HAL_GPIO_DeInit+0x1f4>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80038d6:	4b46      	ldr	r3, [pc, #280]	@ (80039f0 <HAL_GPIO_DeInit+0x1f4>)
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	43db      	mvns	r3, r3
 80038de:	4944      	ldr	r1, [pc, #272]	@ (80039f0 <HAL_GPIO_DeInit+0x1f4>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80038e4:	4b42      	ldr	r3, [pc, #264]	@ (80039f0 <HAL_GPIO_DeInit+0x1f4>)
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	43db      	mvns	r3, r3
 80038ec:	4940      	ldr	r1, [pc, #256]	@ (80039f0 <HAL_GPIO_DeInit+0x1f4>)
 80038ee:	4013      	ands	r3, r2
 80038f0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80038f2:	4b3f      	ldr	r3, [pc, #252]	@ (80039f0 <HAL_GPIO_DeInit+0x1f4>)
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	43db      	mvns	r3, r3
 80038fa:	493d      	ldr	r1, [pc, #244]	@ (80039f0 <HAL_GPIO_DeInit+0x1f4>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	220f      	movs	r2, #15
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003910:	4a2e      	ldr	r2, [pc, #184]	@ (80039cc <HAL_GPIO_DeInit+0x1d0>)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	089b      	lsrs	r3, r3, #2
 8003916:	3302      	adds	r3, #2
 8003918:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	43da      	mvns	r2, r3
 8003920:	482a      	ldr	r0, [pc, #168]	@ (80039cc <HAL_GPIO_DeInit+0x1d0>)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	089b      	lsrs	r3, r3, #2
 8003926:	400a      	ands	r2, r1
 8003928:	3302      	adds	r3, #2
 800392a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	2103      	movs	r1, #3
 8003938:	fa01 f303 	lsl.w	r3, r1, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	401a      	ands	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	08da      	lsrs	r2, r3, #3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3208      	adds	r2, #8
 800394c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	220f      	movs	r2, #15
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	43db      	mvns	r3, r3
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	08d2      	lsrs	r2, r2, #3
 8003964:	4019      	ands	r1, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3208      	adds	r2, #8
 800396a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	2103      	movs	r1, #3
 8003978:	fa01 f303 	lsl.w	r3, r1, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	401a      	ands	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	2101      	movs	r1, #1
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	fa01 f303 	lsl.w	r3, r1, r3
 8003990:	43db      	mvns	r3, r3
 8003992:	401a      	ands	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	2103      	movs	r1, #3
 80039a2:	fa01 f303 	lsl.w	r3, r1, r3
 80039a6:	43db      	mvns	r3, r3
 80039a8:	401a      	ands	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	3301      	adds	r3, #1
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2b0f      	cmp	r3, #15
 80039b8:	f67f af2e 	bls.w	8003818 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80039bc:	bf00      	nop
 80039be:	bf00      	nop
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40013800 	.word	0x40013800
 80039d0:	40020000 	.word	0x40020000
 80039d4:	40020400 	.word	0x40020400
 80039d8:	40020800 	.word	0x40020800
 80039dc:	40020c00 	.word	0x40020c00
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40021400 	.word	0x40021400
 80039e8:	40021800 	.word	0x40021800
 80039ec:	40021c00 	.word	0x40021c00
 80039f0:	40013c00 	.word	0x40013c00

080039f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	460b      	mov	r3, r1
 80039fe:	807b      	strh	r3, [r7, #2]
 8003a00:	4613      	mov	r3, r2
 8003a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a04:	787b      	ldrb	r3, [r7, #1]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a0a:	887a      	ldrh	r2, [r7, #2]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a10:	e003      	b.n	8003a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a12:	887b      	ldrh	r3, [r7, #2]
 8003a14:	041a      	lsls	r2, r3, #16
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	619a      	str	r2, [r3, #24]
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
	...

08003a28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e12b      	b.n	8003c92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7fe fb6e 	bl	8002130 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2224      	movs	r2, #36	@ 0x24
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0201 	bic.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a8c:	f001 ffd2 	bl	8005a34 <HAL_RCC_GetPCLK1Freq>
 8003a90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	4a81      	ldr	r2, [pc, #516]	@ (8003c9c <HAL_I2C_Init+0x274>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d807      	bhi.n	8003aac <HAL_I2C_Init+0x84>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4a80      	ldr	r2, [pc, #512]	@ (8003ca0 <HAL_I2C_Init+0x278>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	bf94      	ite	ls
 8003aa4:	2301      	movls	r3, #1
 8003aa6:	2300      	movhi	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	e006      	b.n	8003aba <HAL_I2C_Init+0x92>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4a7d      	ldr	r2, [pc, #500]	@ (8003ca4 <HAL_I2C_Init+0x27c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	bf94      	ite	ls
 8003ab4:	2301      	movls	r3, #1
 8003ab6:	2300      	movhi	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e0e7      	b.n	8003c92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4a78      	ldr	r2, [pc, #480]	@ (8003ca8 <HAL_I2C_Init+0x280>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	0c9b      	lsrs	r3, r3, #18
 8003acc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	4a6a      	ldr	r2, [pc, #424]	@ (8003c9c <HAL_I2C_Init+0x274>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d802      	bhi.n	8003afc <HAL_I2C_Init+0xd4>
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	3301      	adds	r3, #1
 8003afa:	e009      	b.n	8003b10 <HAL_I2C_Init+0xe8>
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b02:	fb02 f303 	mul.w	r3, r2, r3
 8003b06:	4a69      	ldr	r2, [pc, #420]	@ (8003cac <HAL_I2C_Init+0x284>)
 8003b08:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0c:	099b      	lsrs	r3, r3, #6
 8003b0e:	3301      	adds	r3, #1
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	430b      	orrs	r3, r1
 8003b16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b22:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	495c      	ldr	r1, [pc, #368]	@ (8003c9c <HAL_I2C_Init+0x274>)
 8003b2c:	428b      	cmp	r3, r1
 8003b2e:	d819      	bhi.n	8003b64 <HAL_I2C_Init+0x13c>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	1e59      	subs	r1, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b3e:	1c59      	adds	r1, r3, #1
 8003b40:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b44:	400b      	ands	r3, r1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <HAL_I2C_Init+0x138>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	1e59      	subs	r1, r3, #1
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b58:	3301      	adds	r3, #1
 8003b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b5e:	e051      	b.n	8003c04 <HAL_I2C_Init+0x1dc>
 8003b60:	2304      	movs	r3, #4
 8003b62:	e04f      	b.n	8003c04 <HAL_I2C_Init+0x1dc>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d111      	bne.n	8003b90 <HAL_I2C_Init+0x168>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	1e58      	subs	r0, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6859      	ldr	r1, [r3, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	440b      	add	r3, r1
 8003b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b7e:	3301      	adds	r3, #1
 8003b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	e012      	b.n	8003bb6 <HAL_I2C_Init+0x18e>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	1e58      	subs	r0, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6859      	ldr	r1, [r3, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	0099      	lsls	r1, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_I2C_Init+0x196>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e022      	b.n	8003c04 <HAL_I2C_Init+0x1dc>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10e      	bne.n	8003be4 <HAL_I2C_Init+0x1bc>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	1e58      	subs	r0, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6859      	ldr	r1, [r3, #4]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	440b      	add	r3, r1
 8003bd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bd8:	3301      	adds	r3, #1
 8003bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003be2:	e00f      	b.n	8003c04 <HAL_I2C_Init+0x1dc>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	1e58      	subs	r0, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6859      	ldr	r1, [r3, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	0099      	lsls	r1, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	6809      	ldr	r1, [r1, #0]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69da      	ldr	r2, [r3, #28]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6911      	ldr	r1, [r2, #16]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	68d2      	ldr	r2, [r2, #12]
 8003c3e:	4311      	orrs	r1, r2
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	430b      	orrs	r3, r1
 8003c46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	000186a0 	.word	0x000186a0
 8003ca0:	001e847f 	.word	0x001e847f
 8003ca4:	003d08ff 	.word	0x003d08ff
 8003ca8:	431bde83 	.word	0x431bde83
 8003cac:	10624dd3 	.word	0x10624dd3

08003cb0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e101      	b.n	8003ec6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d106      	bne.n	8003ce2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f008 fffb 	bl	800ccd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cf0:	d102      	bne.n	8003cf8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f003 ff40 	bl	8007b82 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	7c1a      	ldrb	r2, [r3, #16]
 8003d0a:	f88d 2000 	strb.w	r2, [sp]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d12:	f003 fe1f 	bl	8007954 <USB_CoreInit>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0ce      	b.n	8003ec6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f003 ff38 	bl	8007ba4 <USB_SetCurrentMode>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e0bf      	b.n	8003ec6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d46:	2300      	movs	r3, #0
 8003d48:	73fb      	strb	r3, [r7, #15]
 8003d4a:	e04a      	b.n	8003de2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d4c:	7bfa      	ldrb	r2, [r7, #15]
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	3315      	adds	r3, #21
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d60:	7bfa      	ldrb	r2, [r7, #15]
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	4613      	mov	r3, r2
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4413      	add	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	3314      	adds	r3, #20
 8003d70:	7bfa      	ldrb	r2, [r7, #15]
 8003d72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d74:	7bfa      	ldrb	r2, [r7, #15]
 8003d76:	7bfb      	ldrb	r3, [r7, #15]
 8003d78:	b298      	uxth	r0, r3
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	332e      	adds	r3, #46	@ 0x2e
 8003d88:	4602      	mov	r2, r0
 8003d8a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d8c:	7bfa      	ldrb	r2, [r7, #15]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	3318      	adds	r3, #24
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003da0:	7bfa      	ldrb	r2, [r7, #15]
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	331c      	adds	r3, #28
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003db4:	7bfa      	ldrb	r2, [r7, #15]
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	3320      	adds	r3, #32
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003dc8:	7bfa      	ldrb	r2, [r7, #15]
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	3324      	adds	r3, #36	@ 0x24
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	3301      	adds	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	791b      	ldrb	r3, [r3, #4]
 8003de6:	7bfa      	ldrb	r2, [r7, #15]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d3af      	bcc.n	8003d4c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dec:	2300      	movs	r3, #0
 8003dee:	73fb      	strb	r3, [r7, #15]
 8003df0:	e044      	b.n	8003e7c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003df2:	7bfa      	ldrb	r2, [r7, #15]
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	4413      	add	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	440b      	add	r3, r1
 8003e00:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003e04:	2200      	movs	r2, #0
 8003e06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e08:	7bfa      	ldrb	r2, [r7, #15]
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003e1a:	7bfa      	ldrb	r2, [r7, #15]
 8003e1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e1e:	7bfa      	ldrb	r2, [r7, #15]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	4413      	add	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003e30:	2200      	movs	r2, #0
 8003e32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e34:	7bfa      	ldrb	r2, [r7, #15]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e4a:	7bfa      	ldrb	r2, [r7, #15]
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e60:	7bfa      	ldrb	r2, [r7, #15]
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	791b      	ldrb	r3, [r3, #4]
 8003e80:	7bfa      	ldrb	r2, [r7, #15]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d3b5      	bcc.n	8003df2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	7c1a      	ldrb	r2, [r3, #16]
 8003e8e:	f88d 2000 	strb.w	r2, [sp]
 8003e92:	3304      	adds	r3, #4
 8003e94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e96:	f003 fed1 	bl	8007c3c <USB_DevInit>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e00c      	b.n	8003ec6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f004 ff1b 	bl	8008cfa <USB_DevDisconnect>

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b084      	sub	sp, #16
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <HAL_PCD_Start+0x1c>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e022      	b.n	8003f30 <HAL_PCD_Start+0x62>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d009      	beq.n	8003f12 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d105      	bne.n	8003f12 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f0a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f003 fe22 	bl	8007b60 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f004 fec9 	bl	8008cb8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f38:	b590      	push	{r4, r7, lr}
 8003f3a:	b08d      	sub	sp, #52	@ 0x34
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f004 ff87 	bl	8008e62 <USB_GetMode>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f040 848c 	bne.w	8004874 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4618      	mov	r0, r3
 8003f62:	f004 feeb 	bl	8008d3c <USB_ReadInterrupts>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8482 	beq.w	8004872 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	0a1b      	lsrs	r3, r3, #8
 8003f78:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f004 fed8 	bl	8008d3c <USB_ReadInterrupts>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d107      	bne.n	8003fa6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695a      	ldr	r2, [r3, #20]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f002 0202 	and.w	r2, r2, #2
 8003fa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f004 fec6 	bl	8008d3c <USB_ReadInterrupts>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f003 0310 	and.w	r3, r3, #16
 8003fb6:	2b10      	cmp	r3, #16
 8003fb8:	d161      	bne.n	800407e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	699a      	ldr	r2, [r3, #24]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0210 	bic.w	r2, r2, #16
 8003fc8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
 8003fce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	f003 020f 	and.w	r2, r3, #15
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4413      	add	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	0c5b      	lsrs	r3, r3, #17
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d124      	bne.n	8004040 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d035      	beq.n	800406e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	091b      	lsrs	r3, r3, #4
 800400a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800400c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004010:	b29b      	uxth	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	6a38      	ldr	r0, [r7, #32]
 8004016:	f004 fcfd 	bl	8008a14 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004026:	441a      	add	r2, r3
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	695a      	ldr	r2, [r3, #20]
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	091b      	lsrs	r3, r3, #4
 8004034:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004038:	441a      	add	r2, r3
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	615a      	str	r2, [r3, #20]
 800403e:	e016      	b.n	800406e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	0c5b      	lsrs	r3, r3, #17
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	2b06      	cmp	r3, #6
 800404a:	d110      	bne.n	800406e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004052:	2208      	movs	r2, #8
 8004054:	4619      	mov	r1, r3
 8004056:	6a38      	ldr	r0, [r7, #32]
 8004058:	f004 fcdc 	bl	8008a14 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	695a      	ldr	r2, [r3, #20]
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	091b      	lsrs	r3, r3, #4
 8004064:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004068:	441a      	add	r2, r3
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699a      	ldr	r2, [r3, #24]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f042 0210 	orr.w	r2, r2, #16
 800407c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f004 fe5a 	bl	8008d3c <USB_ReadInterrupts>
 8004088:	4603      	mov	r3, r0
 800408a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800408e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004092:	f040 80a7 	bne.w	80041e4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f004 fe5f 	bl	8008d62 <USB_ReadDevAllOutEpInterrupt>
 80040a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80040a6:	e099      	b.n	80041dc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80040a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 808e 	beq.w	80041d0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	4611      	mov	r1, r2
 80040be:	4618      	mov	r0, r3
 80040c0:	f004 fe83 	bl	8008dca <USB_ReadDevOutEPInterrupt>
 80040c4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00c      	beq.n	80040ea <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80040d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d2:	015a      	lsls	r2, r3, #5
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	4413      	add	r3, r2
 80040d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040dc:	461a      	mov	r2, r3
 80040de:	2301      	movs	r3, #1
 80040e0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80040e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fea3 	bl	8004e30 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00c      	beq.n	800410e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80040f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004100:	461a      	mov	r2, r3
 8004102:	2308      	movs	r3, #8
 8004104:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004106:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 ff79 	bl	8005000 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f003 0310 	and.w	r3, r3, #16
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004124:	461a      	mov	r2, r3
 8004126:	2310      	movs	r3, #16
 8004128:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d030      	beq.n	8004196 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004134:	6a3b      	ldr	r3, [r7, #32]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800413c:	2b80      	cmp	r3, #128	@ 0x80
 800413e:	d109      	bne.n	8004154 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	69fa      	ldr	r2, [r7, #28]
 800414a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800414e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004152:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004156:	4613      	mov	r3, r2
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	4413      	add	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	4413      	add	r3, r2
 8004166:	3304      	adds	r3, #4
 8004168:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	78db      	ldrb	r3, [r3, #3]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d108      	bne.n	8004184 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2200      	movs	r2, #0
 8004176:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417a:	b2db      	uxtb	r3, r3
 800417c:	4619      	mov	r1, r3
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f008 feb0 	bl	800cee4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004186:	015a      	lsls	r2, r3, #5
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	4413      	add	r3, r2
 800418c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004190:	461a      	mov	r2, r3
 8004192:	2302      	movs	r3, #2
 8004194:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ac:	461a      	mov	r2, r3
 80041ae:	2320      	movs	r3, #32
 80041b0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d009      	beq.n	80041d0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80041bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041be:	015a      	lsls	r2, r3, #5
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	4413      	add	r3, r2
 80041c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041c8:	461a      	mov	r2, r3
 80041ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041ce:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	3301      	adds	r3, #1
 80041d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80041d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d8:	085b      	lsrs	r3, r3, #1
 80041da:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80041dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f47f af62 	bne.w	80040a8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f004 fda7 	bl	8008d3c <USB_ReadInterrupts>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041f8:	f040 80db 	bne.w	80043b2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f004 fdc8 	bl	8008d96 <USB_ReadDevAllInEpInterrupt>
 8004206:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800420c:	e0cd      	b.n	80043aa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800420e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 80c2 	beq.w	800439e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	4611      	mov	r1, r2
 8004224:	4618      	mov	r0, r3
 8004226:	f004 fdee 	bl	8008e06 <USB_ReadDevInEPInterrupt>
 800422a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d057      	beq.n	80042e6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004238:	f003 030f 	and.w	r3, r3, #15
 800423c:	2201      	movs	r2, #1
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800424a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	43db      	mvns	r3, r3
 8004250:	69f9      	ldr	r1, [r7, #28]
 8004252:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004256:	4013      	ands	r3, r2
 8004258:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800425a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004266:	461a      	mov	r2, r3
 8004268:	2301      	movs	r3, #1
 800426a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	799b      	ldrb	r3, [r3, #6]
 8004270:	2b01      	cmp	r3, #1
 8004272:	d132      	bne.n	80042da <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004278:	4613      	mov	r3, r2
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	4413      	add	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	3320      	adds	r3, #32
 8004284:	6819      	ldr	r1, [r3, #0]
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800428a:	4613      	mov	r3, r2
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4403      	add	r3, r0
 8004294:	331c      	adds	r3, #28
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4419      	add	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800429e:	4613      	mov	r3, r2
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4403      	add	r3, r0
 80042a8:	3320      	adds	r3, #32
 80042aa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80042ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d113      	bne.n	80042da <HAL_PCD_IRQHandler+0x3a2>
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042b6:	4613      	mov	r3, r2
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	440b      	add	r3, r1
 80042c0:	3324      	adds	r3, #36	@ 0x24
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d108      	bne.n	80042da <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80042d2:	461a      	mov	r2, r3
 80042d4:	2101      	movs	r1, #1
 80042d6:	f004 fdf5 	bl	8008ec4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80042da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	4619      	mov	r1, r3
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f008 fd7a 	bl	800cdda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d008      	beq.n	8004302 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80042f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042fc:	461a      	mov	r2, r3
 80042fe:	2308      	movs	r3, #8
 8004300:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f003 0310 	and.w	r3, r3, #16
 8004308:	2b00      	cmp	r3, #0
 800430a:	d008      	beq.n	800431e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800430c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004318:	461a      	mov	r2, r3
 800431a:	2310      	movs	r3, #16
 800431c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004324:	2b00      	cmp	r3, #0
 8004326:	d008      	beq.n	800433a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004334:	461a      	mov	r2, r3
 8004336:	2340      	movs	r3, #64	@ 0x40
 8004338:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d023      	beq.n	800438c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004344:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004346:	6a38      	ldr	r0, [r7, #32]
 8004348:	f003 fddc 	bl	8007f04 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800434c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800434e:	4613      	mov	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	3310      	adds	r3, #16
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	4413      	add	r3, r2
 800435c:	3304      	adds	r3, #4
 800435e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	78db      	ldrb	r3, [r3, #3]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d108      	bne.n	800437a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2200      	movs	r2, #0
 800436c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800436e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004370:	b2db      	uxtb	r3, r3
 8004372:	4619      	mov	r1, r3
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f008 fdc7 	bl	800cf08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800437a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004386:	461a      	mov	r2, r3
 8004388:	2302      	movs	r3, #2
 800438a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004396:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 fcbd 	bl	8004d18 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	3301      	adds	r3, #1
 80043a2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80043a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a6:	085b      	lsrs	r3, r3, #1
 80043a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80043aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f47f af2e 	bne.w	800420e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f004 fcc0 	bl	8008d3c <USB_ReadInterrupts>
 80043bc:	4603      	mov	r3, r0
 80043be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043c6:	d122      	bne.n	800440e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043d6:	f023 0301 	bic.w	r3, r3, #1
 80043da:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d108      	bne.n	80043f8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80043ee:	2100      	movs	r1, #0
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 fea3 	bl	800513c <HAL_PCDEx_LPM_Callback>
 80043f6:	e002      	b.n	80043fe <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f008 fd65 	bl	800cec8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695a      	ldr	r2, [r3, #20]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800440c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f004 fc92 	bl	8008d3c <USB_ReadInterrupts>
 8004418:	4603      	mov	r3, r0
 800441a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800441e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004422:	d112      	bne.n	800444a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b01      	cmp	r3, #1
 8004432:	d102      	bne.n	800443a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f008 fd21 	bl	800ce7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	695a      	ldr	r2, [r3, #20]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004448:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f004 fc74 	bl	8008d3c <USB_ReadInterrupts>
 8004454:	4603      	mov	r3, r0
 8004456:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800445a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800445e:	f040 80b7 	bne.w	80045d0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004470:	f023 0301 	bic.w	r3, r3, #1
 8004474:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2110      	movs	r1, #16
 800447c:	4618      	mov	r0, r3
 800447e:	f003 fd41 	bl	8007f04 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004482:	2300      	movs	r3, #0
 8004484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004486:	e046      	b.n	8004516 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448a:	015a      	lsls	r2, r3, #5
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	4413      	add	r3, r2
 8004490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004494:	461a      	mov	r2, r3
 8004496:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800449a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800449c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044ac:	0151      	lsls	r1, r2, #5
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	440a      	add	r2, r1
 80044b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80044ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80044bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044c8:	461a      	mov	r2, r3
 80044ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80044ce:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80044d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d2:	015a      	lsls	r2, r3, #5
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	4413      	add	r3, r2
 80044d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044e0:	0151      	lsls	r1, r2, #5
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	440a      	add	r2, r1
 80044e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80044ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80044f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004500:	0151      	lsls	r1, r2, #5
 8004502:	69fa      	ldr	r2, [r7, #28]
 8004504:	440a      	add	r2, r1
 8004506:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800450a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800450e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004512:	3301      	adds	r3, #1
 8004514:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	791b      	ldrb	r3, [r3, #4]
 800451a:	461a      	mov	r2, r3
 800451c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800451e:	4293      	cmp	r3, r2
 8004520:	d3b2      	bcc.n	8004488 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004530:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004534:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	7bdb      	ldrb	r3, [r3, #15]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d016      	beq.n	800456c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004544:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800454e:	f043 030b 	orr.w	r3, r3, #11
 8004552:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800455c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800455e:	69fa      	ldr	r2, [r7, #28]
 8004560:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004564:	f043 030b 	orr.w	r3, r3, #11
 8004568:	6453      	str	r3, [r2, #68]	@ 0x44
 800456a:	e015      	b.n	8004598 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800457a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800457e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004582:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004592:	f043 030b 	orr.w	r3, r3, #11
 8004596:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	69fa      	ldr	r2, [r7, #28]
 80045a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045a6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80045aa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80045ba:	461a      	mov	r2, r3
 80045bc:	f004 fc82 	bl	8008ec4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695a      	ldr	r2, [r3, #20]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80045ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f004 fbb1 	bl	8008d3c <USB_ReadInterrupts>
 80045da:	4603      	mov	r3, r0
 80045dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045e4:	d123      	bne.n	800462e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f004 fc47 	bl	8008e7e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f003 fcfe 	bl	8007ff6 <USB_GetDevSpeed>
 80045fa:	4603      	mov	r3, r0
 80045fc:	461a      	mov	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681c      	ldr	r4, [r3, #0]
 8004606:	f001 fa09 	bl	8005a1c <HAL_RCC_GetHCLKFreq>
 800460a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004610:	461a      	mov	r2, r3
 8004612:	4620      	mov	r0, r4
 8004614:	f003 fa02 	bl	8007a1c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f008 fc06 	bl	800ce2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	695a      	ldr	r2, [r3, #20]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800462c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f004 fb82 	bl	8008d3c <USB_ReadInterrupts>
 8004638:	4603      	mov	r3, r0
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b08      	cmp	r3, #8
 8004640:	d10a      	bne.n	8004658 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f008 fbe3 	bl	800ce0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695a      	ldr	r2, [r3, #20]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f002 0208 	and.w	r2, r2, #8
 8004656:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f004 fb6d 	bl	8008d3c <USB_ReadInterrupts>
 8004662:	4603      	mov	r3, r0
 8004664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004668:	2b80      	cmp	r3, #128	@ 0x80
 800466a:	d123      	bne.n	80046b4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004678:	2301      	movs	r3, #1
 800467a:	627b      	str	r3, [r7, #36]	@ 0x24
 800467c:	e014      	b.n	80046a8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004682:	4613      	mov	r3, r2
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	4413      	add	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b01      	cmp	r3, #1
 8004694:	d105      	bne.n	80046a2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004698:	b2db      	uxtb	r3, r3
 800469a:	4619      	mov	r1, r3
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 fb0a 	bl	8004cb6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a4:	3301      	adds	r3, #1
 80046a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	791b      	ldrb	r3, [r3, #4]
 80046ac:	461a      	mov	r2, r3
 80046ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d3e4      	bcc.n	800467e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f004 fb3f 	bl	8008d3c <USB_ReadInterrupts>
 80046be:	4603      	mov	r3, r0
 80046c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046c8:	d13c      	bne.n	8004744 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046ca:	2301      	movs	r3, #1
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ce:	e02b      	b.n	8004728 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80046d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e4:	4613      	mov	r3, r2
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	440b      	add	r3, r1
 80046ee:	3318      	adds	r3, #24
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d115      	bne.n	8004722 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80046f6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	da12      	bge.n	8004722 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004700:	4613      	mov	r3, r2
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	4413      	add	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	3317      	adds	r3, #23
 800470c:	2201      	movs	r2, #1
 800470e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004718:	b2db      	uxtb	r3, r3
 800471a:	4619      	mov	r1, r3
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 faca 	bl	8004cb6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004724:	3301      	adds	r3, #1
 8004726:	627b      	str	r3, [r7, #36]	@ 0x24
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	791b      	ldrb	r3, [r3, #4]
 800472c:	461a      	mov	r2, r3
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	4293      	cmp	r3, r2
 8004732:	d3cd      	bcc.n	80046d0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	695a      	ldr	r2, [r3, #20]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004742:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f004 faf7 	bl	8008d3c <USB_ReadInterrupts>
 800474e:	4603      	mov	r3, r0
 8004750:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004754:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004758:	d156      	bne.n	8004808 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800475a:	2301      	movs	r3, #1
 800475c:	627b      	str	r3, [r7, #36]	@ 0x24
 800475e:	e045      	b.n	80047ec <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004774:	4613      	mov	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	4413      	add	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d12e      	bne.n	80047e6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004788:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800478a:	2b00      	cmp	r3, #0
 800478c:	da2b      	bge.n	80047e6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800479a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800479e:	429a      	cmp	r2, r3
 80047a0:	d121      	bne.n	80047e6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047a6:	4613      	mov	r3, r2
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80047b4:	2201      	movs	r2, #1
 80047b6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10a      	bne.n	80047e6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	69fa      	ldr	r2, [r7, #28]
 80047da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80047de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047e2:	6053      	str	r3, [r2, #4]
            break;
 80047e4:	e008      	b.n	80047f8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	3301      	adds	r3, #1
 80047ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	791b      	ldrb	r3, [r3, #4]
 80047f0:	461a      	mov	r2, r3
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d3b3      	bcc.n	8004760 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	695a      	ldr	r2, [r3, #20]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004806:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f004 fa95 	bl	8008d3c <USB_ReadInterrupts>
 8004812:	4603      	mov	r3, r0
 8004814:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800481c:	d10a      	bne.n	8004834 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f008 fb84 	bl	800cf2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695a      	ldr	r2, [r3, #20]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004832:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f004 fa7f 	bl	8008d3c <USB_ReadInterrupts>
 800483e:	4603      	mov	r3, r0
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b04      	cmp	r3, #4
 8004846:	d115      	bne.n	8004874 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b00      	cmp	r3, #0
 8004858:	d002      	beq.n	8004860 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f008 fb74 	bl	800cf48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6859      	ldr	r1, [r3, #4]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	430a      	orrs	r2, r1
 800486e:	605a      	str	r2, [r3, #4]
 8004870:	e000      	b.n	8004874 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004872:	bf00      	nop
    }
  }
}
 8004874:	3734      	adds	r7, #52	@ 0x34
 8004876:	46bd      	mov	sp, r7
 8004878:	bd90      	pop	{r4, r7, pc}

0800487a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800487a:	b580      	push	{r7, lr}
 800487c:	b082      	sub	sp, #8
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	460b      	mov	r3, r1
 8004884:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800488c:	2b01      	cmp	r3, #1
 800488e:	d101      	bne.n	8004894 <HAL_PCD_SetAddress+0x1a>
 8004890:	2302      	movs	r3, #2
 8004892:	e012      	b.n	80048ba <HAL_PCD_SetAddress+0x40>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	78fa      	ldrb	r2, [r7, #3]
 80048a0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	78fa      	ldrb	r2, [r7, #3]
 80048a8:	4611      	mov	r1, r2
 80048aa:	4618      	mov	r0, r3
 80048ac:	f004 f9de 	bl	8008c6c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b084      	sub	sp, #16
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	4608      	mov	r0, r1
 80048cc:	4611      	mov	r1, r2
 80048ce:	461a      	mov	r2, r3
 80048d0:	4603      	mov	r3, r0
 80048d2:	70fb      	strb	r3, [r7, #3]
 80048d4:	460b      	mov	r3, r1
 80048d6:	803b      	strh	r3, [r7, #0]
 80048d8:	4613      	mov	r3, r2
 80048da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80048e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	da0f      	bge.n	8004908 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048e8:	78fb      	ldrb	r3, [r7, #3]
 80048ea:	f003 020f 	and.w	r2, r3, #15
 80048ee:	4613      	mov	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	4413      	add	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	3310      	adds	r3, #16
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	4413      	add	r3, r2
 80048fc:	3304      	adds	r3, #4
 80048fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2201      	movs	r2, #1
 8004904:	705a      	strb	r2, [r3, #1]
 8004906:	e00f      	b.n	8004928 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004908:	78fb      	ldrb	r3, [r7, #3]
 800490a:	f003 020f 	and.w	r2, r3, #15
 800490e:	4613      	mov	r3, r2
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	4413      	add	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	4413      	add	r3, r2
 800491e:	3304      	adds	r3, #4
 8004920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	b2da      	uxtb	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004934:	883b      	ldrh	r3, [r7, #0]
 8004936:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	78ba      	ldrb	r2, [r7, #2]
 8004942:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	785b      	ldrb	r3, [r3, #1]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d004      	beq.n	8004956 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	461a      	mov	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004956:	78bb      	ldrb	r3, [r7, #2]
 8004958:	2b02      	cmp	r3, #2
 800495a:	d102      	bne.n	8004962 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <HAL_PCD_EP_Open+0xae>
 800496c:	2302      	movs	r3, #2
 800496e:	e00e      	b.n	800498e <HAL_PCD_EP_Open+0xcc>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68f9      	ldr	r1, [r7, #12]
 800497e:	4618      	mov	r0, r3
 8004980:	f003 fb5e 	bl	8008040 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800498c:	7afb      	ldrb	r3, [r7, #11]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b084      	sub	sp, #16
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	460b      	mov	r3, r1
 80049a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	da0f      	bge.n	80049ca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049aa:	78fb      	ldrb	r3, [r7, #3]
 80049ac:	f003 020f 	and.w	r2, r3, #15
 80049b0:	4613      	mov	r3, r2
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	4413      	add	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	3310      	adds	r3, #16
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	4413      	add	r3, r2
 80049be:	3304      	adds	r3, #4
 80049c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2201      	movs	r2, #1
 80049c6:	705a      	strb	r2, [r3, #1]
 80049c8:	e00f      	b.n	80049ea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	f003 020f 	and.w	r2, r3, #15
 80049d0:	4613      	mov	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4413      	add	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	4413      	add	r3, r2
 80049e0:	3304      	adds	r3, #4
 80049e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80049ea:	78fb      	ldrb	r3, [r7, #3]
 80049ec:	f003 030f 	and.w	r3, r3, #15
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d101      	bne.n	8004a04 <HAL_PCD_EP_Close+0x6e>
 8004a00:	2302      	movs	r3, #2
 8004a02:	e00e      	b.n	8004a22 <HAL_PCD_EP_Close+0x8c>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68f9      	ldr	r1, [r7, #12]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f003 fb9c 	bl	8008150 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b086      	sub	sp, #24
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
 8004a36:	460b      	mov	r3, r1
 8004a38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a3a:	7afb      	ldrb	r3, [r7, #11]
 8004a3c:	f003 020f 	and.w	r2, r3, #15
 8004a40:	4613      	mov	r3, r2
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	3304      	adds	r3, #4
 8004a52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2200      	movs	r2, #0
 8004a64:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a6c:	7afb      	ldrb	r3, [r7, #11]
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	799b      	ldrb	r3, [r3, #6]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d102      	bne.n	8004a86 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6818      	ldr	r0, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	799b      	ldrb	r3, [r3, #6]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	6979      	ldr	r1, [r7, #20]
 8004a92:	f003 fc39 	bl	8008308 <USB_EPStartXfer>

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004aac:	78fb      	ldrb	r3, [r7, #3]
 8004aae:	f003 020f 	and.w	r2, r3, #15
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	440b      	add	r3, r1
 8004abe:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004ac2:	681b      	ldr	r3, [r3, #0]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	607a      	str	r2, [r7, #4]
 8004ada:	603b      	str	r3, [r7, #0]
 8004adc:	460b      	mov	r3, r1
 8004ade:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ae0:	7afb      	ldrb	r3, [r7, #11]
 8004ae2:	f003 020f 	and.w	r2, r3, #15
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	4413      	add	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	3310      	adds	r3, #16
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4413      	add	r3, r2
 8004af4:	3304      	adds	r3, #4
 8004af6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	2200      	movs	r2, #0
 8004b08:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b10:	7afb      	ldrb	r3, [r7, #11]
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	799b      	ldrb	r3, [r3, #6]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d102      	bne.n	8004b2a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6818      	ldr	r0, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	799b      	ldrb	r3, [r3, #6]
 8004b32:	461a      	mov	r2, r3
 8004b34:	6979      	ldr	r1, [r7, #20]
 8004b36:	f003 fbe7 	bl	8008308 <USB_EPStartXfer>

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	7912      	ldrb	r2, [r2, #4]
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e04f      	b.n	8004c02 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	da0f      	bge.n	8004b8a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b6a:	78fb      	ldrb	r3, [r7, #3]
 8004b6c:	f003 020f 	and.w	r2, r3, #15
 8004b70:	4613      	mov	r3, r2
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	4413      	add	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	3310      	adds	r3, #16
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	3304      	adds	r3, #4
 8004b80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2201      	movs	r2, #1
 8004b86:	705a      	strb	r2, [r3, #1]
 8004b88:	e00d      	b.n	8004ba6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004b8a:	78fa      	ldrb	r2, [r7, #3]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	4413      	add	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bac:	78fb      	ldrb	r3, [r7, #3]
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d101      	bne.n	8004bc6 <HAL_PCD_EP_SetStall+0x82>
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	e01d      	b.n	8004c02 <HAL_PCD_EP_SetStall+0xbe>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68f9      	ldr	r1, [r7, #12]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f003 ff75 	bl	8008ac4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bda:	78fb      	ldrb	r3, [r7, #3]
 8004bdc:	f003 030f 	and.w	r3, r3, #15
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d109      	bne.n	8004bf8 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	7999      	ldrb	r1, [r3, #6]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	f004 f966 	bl	8008ec4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b084      	sub	sp, #16
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
 8004c12:	460b      	mov	r3, r1
 8004c14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c16:	78fb      	ldrb	r3, [r7, #3]
 8004c18:	f003 030f 	and.w	r3, r3, #15
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	7912      	ldrb	r2, [r2, #4]
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d901      	bls.n	8004c28 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e042      	b.n	8004cae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	da0f      	bge.n	8004c50 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c30:	78fb      	ldrb	r3, [r7, #3]
 8004c32:	f003 020f 	and.w	r2, r3, #15
 8004c36:	4613      	mov	r3, r2
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	3310      	adds	r3, #16
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	4413      	add	r3, r2
 8004c44:	3304      	adds	r3, #4
 8004c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	705a      	strb	r2, [r3, #1]
 8004c4e:	e00f      	b.n	8004c70 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	f003 020f 	and.w	r2, r3, #15
 8004c56:	4613      	mov	r3, r2
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	4413      	add	r3, r2
 8004c66:	3304      	adds	r3, #4
 8004c68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c76:	78fb      	ldrb	r3, [r7, #3]
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <HAL_PCD_EP_ClrStall+0x86>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e00e      	b.n	8004cae <HAL_PCD_EP_ClrStall+0xa4>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68f9      	ldr	r1, [r7, #12]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f003 ff7e 	bl	8008ba0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	460b      	mov	r3, r1
 8004cc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004cc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	da0c      	bge.n	8004ce4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cca:	78fb      	ldrb	r3, [r7, #3]
 8004ccc:	f003 020f 	and.w	r2, r3, #15
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	3310      	adds	r3, #16
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	4413      	add	r3, r2
 8004cde:	3304      	adds	r3, #4
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	e00c      	b.n	8004cfe <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	f003 020f 	and.w	r2, r3, #15
 8004cea:	4613      	mov	r3, r2
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	4413      	add	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68f9      	ldr	r1, [r7, #12]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f003 fd9d 	bl	8008844 <USB_EPStopXfer>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004d0e:	7afb      	ldrb	r3, [r7, #11]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08a      	sub	sp, #40	@ 0x28
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	3310      	adds	r3, #16
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	695a      	ldr	r2, [r3, #20]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d901      	bls.n	8004d50 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e06b      	b.n	8004e28 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	69fa      	ldr	r2, [r7, #28]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d902      	bls.n	8004d6c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	3303      	adds	r3, #3
 8004d70:	089b      	lsrs	r3, r3, #2
 8004d72:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d74:	e02a      	b.n	8004dcc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	691a      	ldr	r2, [r3, #16]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d902      	bls.n	8004d92 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	3303      	adds	r3, #3
 8004d96:	089b      	lsrs	r3, r3, #2
 8004d98:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	68d9      	ldr	r1, [r3, #12]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	b2da      	uxtb	r2, r3
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	4603      	mov	r3, r0
 8004dae:	6978      	ldr	r0, [r7, #20]
 8004db0:	f003 fdf2 	bl	8008998 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	441a      	add	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	695a      	ldr	r2, [r3, #20]
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	441a      	add	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d809      	bhi.n	8004df6 <PCD_WriteEmptyTxFifo+0xde>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	695a      	ldr	r2, [r3, #20]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d203      	bcs.n	8004df6 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1bf      	bne.n	8004d76 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	691a      	ldr	r2, [r3, #16]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d811      	bhi.n	8004e26 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	2201      	movs	r2, #1
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	43db      	mvns	r3, r3
 8004e1c:	6939      	ldr	r1, [r7, #16]
 8004e1e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e22:	4013      	ands	r3, r2
 8004e24:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3720      	adds	r7, #32
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	333c      	adds	r3, #60	@ 0x3c
 8004e48:	3304      	adds	r3, #4
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	799b      	ldrb	r3, [r3, #6]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d17b      	bne.n	8004f5e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f003 0308 	and.w	r3, r3, #8
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d015      	beq.n	8004e9c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	4a61      	ldr	r2, [pc, #388]	@ (8004ff8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	f240 80b9 	bls.w	8004fec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80b3 	beq.w	8004fec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	015a      	lsls	r2, r3, #5
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e92:	461a      	mov	r2, r3
 8004e94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e98:	6093      	str	r3, [r2, #8]
 8004e9a:	e0a7      	b.n	8004fec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d009      	beq.n	8004eba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	2320      	movs	r3, #32
 8004eb6:	6093      	str	r3, [r2, #8]
 8004eb8:	e098      	b.n	8004fec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	f040 8093 	bne.w	8004fec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	4a4b      	ldr	r2, [pc, #300]	@ (8004ff8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d90f      	bls.n	8004eee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eea:	6093      	str	r3, [r2, #8]
 8004eec:	e07e      	b.n	8004fec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	4413      	add	r3, r2
 8004f00:	3304      	adds	r3, #4
 8004f02:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a1a      	ldr	r2, [r3, #32]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	0159      	lsls	r1, r3, #5
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	440b      	add	r3, r1
 8004f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f1a:	1ad2      	subs	r2, r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d114      	bne.n	8004f50 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d109      	bne.n	8004f42 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6818      	ldr	r0, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f38:	461a      	mov	r2, r3
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	f003 ffc2 	bl	8008ec4 <USB_EP0_OutStart>
 8004f40:	e006      	b.n	8004f50 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	441a      	add	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	4619      	mov	r1, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f007 ff24 	bl	800cda4 <HAL_PCD_DataOutStageCallback>
 8004f5c:	e046      	b.n	8004fec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	4a26      	ldr	r2, [pc, #152]	@ (8004ffc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d124      	bne.n	8004fb0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00a      	beq.n	8004f86 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f82:	6093      	str	r3, [r2, #8]
 8004f84:	e032      	b.n	8004fec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d008      	beq.n	8004fa2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	2320      	movs	r3, #32
 8004fa0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f007 fefb 	bl	800cda4 <HAL_PCD_DataOutStageCallback>
 8004fae:	e01d      	b.n	8004fec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d114      	bne.n	8004fe0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004fb6:	6879      	ldr	r1, [r7, #4]
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	4413      	add	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d108      	bne.n	8004fe0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004fd8:	461a      	mov	r2, r3
 8004fda:	2100      	movs	r1, #0
 8004fdc:	f003 ff72 	bl	8008ec4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f007 fedc 	bl	800cda4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3720      	adds	r7, #32
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	4f54300a 	.word	0x4f54300a
 8004ffc:	4f54310a 	.word	0x4f54310a

08005000 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	333c      	adds	r3, #60	@ 0x3c
 8005018:	3304      	adds	r3, #4
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	4a15      	ldr	r2, [pc, #84]	@ (8005088 <PCD_EP_OutSetupPacket_int+0x88>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d90e      	bls.n	8005054 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800503c:	2b00      	cmp	r3, #0
 800503e:	d009      	beq.n	8005054 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800504c:	461a      	mov	r2, r3
 800504e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005052:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f007 fe93 	bl	800cd80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	4a0a      	ldr	r2, [pc, #40]	@ (8005088 <PCD_EP_OutSetupPacket_int+0x88>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d90c      	bls.n	800507c <PCD_EP_OutSetupPacket_int+0x7c>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	799b      	ldrb	r3, [r3, #6]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d108      	bne.n	800507c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005074:	461a      	mov	r2, r3
 8005076:	2101      	movs	r1, #1
 8005078:	f003 ff24 	bl	8008ec4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3718      	adds	r7, #24
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	4f54300a 	.word	0x4f54300a

0800508c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	460b      	mov	r3, r1
 8005096:	70fb      	strb	r3, [r7, #3]
 8005098:	4613      	mov	r3, r2
 800509a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80050a4:	78fb      	ldrb	r3, [r7, #3]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d107      	bne.n	80050ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80050aa:	883b      	ldrh	r3, [r7, #0]
 80050ac:	0419      	lsls	r1, r3, #16
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80050b8:	e028      	b.n	800510c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c0:	0c1b      	lsrs	r3, r3, #16
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	4413      	add	r3, r2
 80050c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80050c8:	2300      	movs	r3, #0
 80050ca:	73fb      	strb	r3, [r7, #15]
 80050cc:	e00d      	b.n	80050ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	3340      	adds	r3, #64	@ 0x40
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	0c1b      	lsrs	r3, r3, #16
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	4413      	add	r3, r2
 80050e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
 80050e6:	3301      	adds	r3, #1
 80050e8:	73fb      	strb	r3, [r7, #15]
 80050ea:	7bfa      	ldrb	r2, [r7, #15]
 80050ec:	78fb      	ldrb	r3, [r7, #3]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d3ec      	bcc.n	80050ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80050f4:	883b      	ldrh	r3, [r7, #0]
 80050f6:	0418      	lsls	r0, r3, #16
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6819      	ldr	r1, [r3, #0]
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	3b01      	subs	r3, #1
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	4302      	orrs	r2, r0
 8005104:	3340      	adds	r3, #64	@ 0x40
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	460b      	mov	r3, r1
 8005124:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	887a      	ldrh	r2, [r7, #2]
 800512c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	460b      	mov	r3, r1
 8005146:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e267      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d075      	beq.n	800525e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005172:	4b88      	ldr	r3, [pc, #544]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 030c 	and.w	r3, r3, #12
 800517a:	2b04      	cmp	r3, #4
 800517c:	d00c      	beq.n	8005198 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800517e:	4b85      	ldr	r3, [pc, #532]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005186:	2b08      	cmp	r3, #8
 8005188:	d112      	bne.n	80051b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800518a:	4b82      	ldr	r3, [pc, #520]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005192:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005196:	d10b      	bne.n	80051b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005198:	4b7e      	ldr	r3, [pc, #504]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d05b      	beq.n	800525c <HAL_RCC_OscConfig+0x108>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d157      	bne.n	800525c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e242      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051b8:	d106      	bne.n	80051c8 <HAL_RCC_OscConfig+0x74>
 80051ba:	4b76      	ldr	r3, [pc, #472]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a75      	ldr	r2, [pc, #468]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80051c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	e01d      	b.n	8005204 <HAL_RCC_OscConfig+0xb0>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051d0:	d10c      	bne.n	80051ec <HAL_RCC_OscConfig+0x98>
 80051d2:	4b70      	ldr	r3, [pc, #448]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a6f      	ldr	r2, [pc, #444]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80051d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051dc:	6013      	str	r3, [r2, #0]
 80051de:	4b6d      	ldr	r3, [pc, #436]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a6c      	ldr	r2, [pc, #432]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80051e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	e00b      	b.n	8005204 <HAL_RCC_OscConfig+0xb0>
 80051ec:	4b69      	ldr	r3, [pc, #420]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a68      	ldr	r2, [pc, #416]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80051f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	4b66      	ldr	r3, [pc, #408]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a65      	ldr	r2, [pc, #404]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80051fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d013      	beq.n	8005234 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800520c:	f7fd fcf2 	bl	8002bf4 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005214:	f7fd fcee 	bl	8002bf4 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b64      	cmp	r3, #100	@ 0x64
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e207      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005226:	4b5b      	ldr	r3, [pc, #364]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0f0      	beq.n	8005214 <HAL_RCC_OscConfig+0xc0>
 8005232:	e014      	b.n	800525e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005234:	f7fd fcde 	bl	8002bf4 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800523c:	f7fd fcda 	bl	8002bf4 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b64      	cmp	r3, #100	@ 0x64
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e1f3      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800524e:	4b51      	ldr	r3, [pc, #324]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1f0      	bne.n	800523c <HAL_RCC_OscConfig+0xe8>
 800525a:	e000      	b.n	800525e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800525c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d063      	beq.n	8005332 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800526a:	4b4a      	ldr	r3, [pc, #296]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 030c 	and.w	r3, r3, #12
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00b      	beq.n	800528e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005276:	4b47      	ldr	r3, [pc, #284]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800527e:	2b08      	cmp	r3, #8
 8005280:	d11c      	bne.n	80052bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005282:	4b44      	ldr	r3, [pc, #272]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d116      	bne.n	80052bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800528e:	4b41      	ldr	r3, [pc, #260]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d005      	beq.n	80052a6 <HAL_RCC_OscConfig+0x152>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d001      	beq.n	80052a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e1c7      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052a6:	4b3b      	ldr	r3, [pc, #236]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	4937      	ldr	r1, [pc, #220]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ba:	e03a      	b.n	8005332 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d020      	beq.n	8005306 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052c4:	4b34      	ldr	r3, [pc, #208]	@ (8005398 <HAL_RCC_OscConfig+0x244>)
 80052c6:	2201      	movs	r2, #1
 80052c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ca:	f7fd fc93 	bl	8002bf4 <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052d0:	e008      	b.n	80052e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052d2:	f7fd fc8f 	bl	8002bf4 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e1a8      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052e4:	4b2b      	ldr	r3, [pc, #172]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0f0      	beq.n	80052d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f0:	4b28      	ldr	r3, [pc, #160]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	4925      	ldr	r1, [pc, #148]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 8005300:	4313      	orrs	r3, r2
 8005302:	600b      	str	r3, [r1, #0]
 8005304:	e015      	b.n	8005332 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005306:	4b24      	ldr	r3, [pc, #144]	@ (8005398 <HAL_RCC_OscConfig+0x244>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530c:	f7fd fc72 	bl	8002bf4 <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005314:	f7fd fc6e 	bl	8002bf4 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e187      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005326:	4b1b      	ldr	r3, [pc, #108]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f0      	bne.n	8005314 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d036      	beq.n	80053ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d016      	beq.n	8005374 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005346:	4b15      	ldr	r3, [pc, #84]	@ (800539c <HAL_RCC_OscConfig+0x248>)
 8005348:	2201      	movs	r2, #1
 800534a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800534c:	f7fd fc52 	bl	8002bf4 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005354:	f7fd fc4e 	bl	8002bf4 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e167      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005366:	4b0b      	ldr	r3, [pc, #44]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 8005368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0f0      	beq.n	8005354 <HAL_RCC_OscConfig+0x200>
 8005372:	e01b      	b.n	80053ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005374:	4b09      	ldr	r3, [pc, #36]	@ (800539c <HAL_RCC_OscConfig+0x248>)
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800537a:	f7fd fc3b 	bl	8002bf4 <HAL_GetTick>
 800537e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005380:	e00e      	b.n	80053a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005382:	f7fd fc37 	bl	8002bf4 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d907      	bls.n	80053a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e150      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
 8005394:	40023800 	.word	0x40023800
 8005398:	42470000 	.word	0x42470000
 800539c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053a0:	4b88      	ldr	r3, [pc, #544]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 80053a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1ea      	bne.n	8005382 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 8097 	beq.w	80054e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053ba:	2300      	movs	r3, #0
 80053bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053be:	4b81      	ldr	r3, [pc, #516]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 80053c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10f      	bne.n	80053ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ca:	2300      	movs	r3, #0
 80053cc:	60bb      	str	r3, [r7, #8]
 80053ce:	4b7d      	ldr	r3, [pc, #500]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 80053d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d2:	4a7c      	ldr	r2, [pc, #496]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 80053d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80053da:	4b7a      	ldr	r3, [pc, #488]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 80053dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053e2:	60bb      	str	r3, [r7, #8]
 80053e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053e6:	2301      	movs	r3, #1
 80053e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ea:	4b77      	ldr	r3, [pc, #476]	@ (80055c8 <HAL_RCC_OscConfig+0x474>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d118      	bne.n	8005428 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053f6:	4b74      	ldr	r3, [pc, #464]	@ (80055c8 <HAL_RCC_OscConfig+0x474>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a73      	ldr	r2, [pc, #460]	@ (80055c8 <HAL_RCC_OscConfig+0x474>)
 80053fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005402:	f7fd fbf7 	bl	8002bf4 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800540a:	f7fd fbf3 	bl	8002bf4 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e10c      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800541c:	4b6a      	ldr	r3, [pc, #424]	@ (80055c8 <HAL_RCC_OscConfig+0x474>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0f0      	beq.n	800540a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d106      	bne.n	800543e <HAL_RCC_OscConfig+0x2ea>
 8005430:	4b64      	ldr	r3, [pc, #400]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 8005432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005434:	4a63      	ldr	r2, [pc, #396]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 8005436:	f043 0301 	orr.w	r3, r3, #1
 800543a:	6713      	str	r3, [r2, #112]	@ 0x70
 800543c:	e01c      	b.n	8005478 <HAL_RCC_OscConfig+0x324>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	2b05      	cmp	r3, #5
 8005444:	d10c      	bne.n	8005460 <HAL_RCC_OscConfig+0x30c>
 8005446:	4b5f      	ldr	r3, [pc, #380]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 8005448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800544a:	4a5e      	ldr	r2, [pc, #376]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 800544c:	f043 0304 	orr.w	r3, r3, #4
 8005450:	6713      	str	r3, [r2, #112]	@ 0x70
 8005452:	4b5c      	ldr	r3, [pc, #368]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 8005454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005456:	4a5b      	ldr	r2, [pc, #364]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 8005458:	f043 0301 	orr.w	r3, r3, #1
 800545c:	6713      	str	r3, [r2, #112]	@ 0x70
 800545e:	e00b      	b.n	8005478 <HAL_RCC_OscConfig+0x324>
 8005460:	4b58      	ldr	r3, [pc, #352]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 8005462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005464:	4a57      	ldr	r2, [pc, #348]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 8005466:	f023 0301 	bic.w	r3, r3, #1
 800546a:	6713      	str	r3, [r2, #112]	@ 0x70
 800546c:	4b55      	ldr	r3, [pc, #340]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 800546e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005470:	4a54      	ldr	r2, [pc, #336]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 8005472:	f023 0304 	bic.w	r3, r3, #4
 8005476:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d015      	beq.n	80054ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005480:	f7fd fbb8 	bl	8002bf4 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005486:	e00a      	b.n	800549e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005488:	f7fd fbb4 	bl	8002bf4 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005496:	4293      	cmp	r3, r2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e0cb      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800549e:	4b49      	ldr	r3, [pc, #292]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 80054a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0ee      	beq.n	8005488 <HAL_RCC_OscConfig+0x334>
 80054aa:	e014      	b.n	80054d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054ac:	f7fd fba2 	bl	8002bf4 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054b2:	e00a      	b.n	80054ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b4:	f7fd fb9e 	bl	8002bf4 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e0b5      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054ca:	4b3e      	ldr	r3, [pc, #248]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 80054cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1ee      	bne.n	80054b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054d6:	7dfb      	ldrb	r3, [r7, #23]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d105      	bne.n	80054e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054dc:	4b39      	ldr	r3, [pc, #228]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 80054de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e0:	4a38      	ldr	r2, [pc, #224]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 80054e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 80a1 	beq.w	8005634 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054f2:	4b34      	ldr	r3, [pc, #208]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 030c 	and.w	r3, r3, #12
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d05c      	beq.n	80055b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	2b02      	cmp	r3, #2
 8005504:	d141      	bne.n	800558a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005506:	4b31      	ldr	r3, [pc, #196]	@ (80055cc <HAL_RCC_OscConfig+0x478>)
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800550c:	f7fd fb72 	bl	8002bf4 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005514:	f7fd fb6e 	bl	8002bf4 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e087      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005526:	4b27      	ldr	r3, [pc, #156]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69da      	ldr	r2, [r3, #28]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005540:	019b      	lsls	r3, r3, #6
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005548:	085b      	lsrs	r3, r3, #1
 800554a:	3b01      	subs	r3, #1
 800554c:	041b      	lsls	r3, r3, #16
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005554:	061b      	lsls	r3, r3, #24
 8005556:	491b      	ldr	r1, [pc, #108]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 8005558:	4313      	orrs	r3, r2
 800555a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800555c:	4b1b      	ldr	r3, [pc, #108]	@ (80055cc <HAL_RCC_OscConfig+0x478>)
 800555e:	2201      	movs	r2, #1
 8005560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005562:	f7fd fb47 	bl	8002bf4 <HAL_GetTick>
 8005566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005568:	e008      	b.n	800557c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800556a:	f7fd fb43 	bl	8002bf4 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d901      	bls.n	800557c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e05c      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800557c:	4b11      	ldr	r3, [pc, #68]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0f0      	beq.n	800556a <HAL_RCC_OscConfig+0x416>
 8005588:	e054      	b.n	8005634 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800558a:	4b10      	ldr	r3, [pc, #64]	@ (80055cc <HAL_RCC_OscConfig+0x478>)
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005590:	f7fd fb30 	bl	8002bf4 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005598:	f7fd fb2c 	bl	8002bf4 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e045      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055aa:	4b06      	ldr	r3, [pc, #24]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1f0      	bne.n	8005598 <HAL_RCC_OscConfig+0x444>
 80055b6:	e03d      	b.n	8005634 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d107      	bne.n	80055d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e038      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
 80055c4:	40023800 	.word	0x40023800
 80055c8:	40007000 	.word	0x40007000
 80055cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005640 <HAL_RCC_OscConfig+0x4ec>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d028      	beq.n	8005630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d121      	bne.n	8005630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d11a      	bne.n	8005630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005600:	4013      	ands	r3, r2
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005606:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005608:	4293      	cmp	r3, r2
 800560a:	d111      	bne.n	8005630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005616:	085b      	lsrs	r3, r3, #1
 8005618:	3b01      	subs	r3, #1
 800561a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800561c:	429a      	cmp	r2, r3
 800561e:	d107      	bne.n	8005630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800562c:	429a      	cmp	r2, r3
 800562e:	d001      	beq.n	8005634 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e000      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	40023800 	.word	0x40023800

08005644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e0cc      	b.n	80057f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005658:	4b68      	ldr	r3, [pc, #416]	@ (80057fc <HAL_RCC_ClockConfig+0x1b8>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d90c      	bls.n	8005680 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005666:	4b65      	ldr	r3, [pc, #404]	@ (80057fc <HAL_RCC_ClockConfig+0x1b8>)
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800566e:	4b63      	ldr	r3, [pc, #396]	@ (80057fc <HAL_RCC_ClockConfig+0x1b8>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d001      	beq.n	8005680 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e0b8      	b.n	80057f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	2b00      	cmp	r3, #0
 800568a:	d020      	beq.n	80056ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005698:	4b59      	ldr	r3, [pc, #356]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	4a58      	ldr	r2, [pc, #352]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 800569e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80056a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d005      	beq.n	80056bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056b0:	4b53      	ldr	r3, [pc, #332]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	4a52      	ldr	r2, [pc, #328]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 80056b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80056ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056bc:	4b50      	ldr	r3, [pc, #320]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	494d      	ldr	r1, [pc, #308]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d044      	beq.n	8005764 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d107      	bne.n	80056f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056e2:	4b47      	ldr	r3, [pc, #284]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d119      	bne.n	8005722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e07f      	b.n	80057f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d003      	beq.n	8005702 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056fe:	2b03      	cmp	r3, #3
 8005700:	d107      	bne.n	8005712 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005702:	4b3f      	ldr	r3, [pc, #252]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d109      	bne.n	8005722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e06f      	b.n	80057f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005712:	4b3b      	ldr	r3, [pc, #236]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e067      	b.n	80057f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005722:	4b37      	ldr	r3, [pc, #220]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f023 0203 	bic.w	r2, r3, #3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	4934      	ldr	r1, [pc, #208]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 8005730:	4313      	orrs	r3, r2
 8005732:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005734:	f7fd fa5e 	bl	8002bf4 <HAL_GetTick>
 8005738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800573a:	e00a      	b.n	8005752 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800573c:	f7fd fa5a 	bl	8002bf4 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800574a:	4293      	cmp	r3, r2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e04f      	b.n	80057f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005752:	4b2b      	ldr	r3, [pc, #172]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 020c 	and.w	r2, r3, #12
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	429a      	cmp	r2, r3
 8005762:	d1eb      	bne.n	800573c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005764:	4b25      	ldr	r3, [pc, #148]	@ (80057fc <HAL_RCC_ClockConfig+0x1b8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d20c      	bcs.n	800578c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005772:	4b22      	ldr	r3, [pc, #136]	@ (80057fc <HAL_RCC_ClockConfig+0x1b8>)
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800577a:	4b20      	ldr	r3, [pc, #128]	@ (80057fc <HAL_RCC_ClockConfig+0x1b8>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0307 	and.w	r3, r3, #7
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	429a      	cmp	r2, r3
 8005786:	d001      	beq.n	800578c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e032      	b.n	80057f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b00      	cmp	r3, #0
 8005796:	d008      	beq.n	80057aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005798:	4b19      	ldr	r3, [pc, #100]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	4916      	ldr	r1, [pc, #88]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d009      	beq.n	80057ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057b6:	4b12      	ldr	r3, [pc, #72]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	490e      	ldr	r1, [pc, #56]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057ca:	f000 f821 	bl	8005810 <HAL_RCC_GetSysClockFreq>
 80057ce:	4602      	mov	r2, r0
 80057d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	091b      	lsrs	r3, r3, #4
 80057d6:	f003 030f 	and.w	r3, r3, #15
 80057da:	490a      	ldr	r1, [pc, #40]	@ (8005804 <HAL_RCC_ClockConfig+0x1c0>)
 80057dc:	5ccb      	ldrb	r3, [r1, r3]
 80057de:	fa22 f303 	lsr.w	r3, r2, r3
 80057e2:	4a09      	ldr	r2, [pc, #36]	@ (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 80057e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80057e6:	4b09      	ldr	r3, [pc, #36]	@ (800580c <HAL_RCC_ClockConfig+0x1c8>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fd f9be 	bl	8002b6c <HAL_InitTick>

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	40023c00 	.word	0x40023c00
 8005800:	40023800 	.word	0x40023800
 8005804:	0800ebf8 	.word	0x0800ebf8
 8005808:	20000000 	.word	0x20000000
 800580c:	20000004 	.word	0x20000004

08005810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005814:	b094      	sub	sp, #80	@ 0x50
 8005816:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005828:	4b79      	ldr	r3, [pc, #484]	@ (8005a10 <HAL_RCC_GetSysClockFreq+0x200>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f003 030c 	and.w	r3, r3, #12
 8005830:	2b08      	cmp	r3, #8
 8005832:	d00d      	beq.n	8005850 <HAL_RCC_GetSysClockFreq+0x40>
 8005834:	2b08      	cmp	r3, #8
 8005836:	f200 80e1 	bhi.w	80059fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <HAL_RCC_GetSysClockFreq+0x34>
 800583e:	2b04      	cmp	r3, #4
 8005840:	d003      	beq.n	800584a <HAL_RCC_GetSysClockFreq+0x3a>
 8005842:	e0db      	b.n	80059fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005844:	4b73      	ldr	r3, [pc, #460]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x204>)
 8005846:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005848:	e0db      	b.n	8005a02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800584a:	4b73      	ldr	r3, [pc, #460]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x208>)
 800584c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800584e:	e0d8      	b.n	8005a02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005850:	4b6f      	ldr	r3, [pc, #444]	@ (8005a10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005858:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800585a:	4b6d      	ldr	r3, [pc, #436]	@ (8005a10 <HAL_RCC_GetSysClockFreq+0x200>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d063      	beq.n	800592e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005866:	4b6a      	ldr	r3, [pc, #424]	@ (8005a10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	099b      	lsrs	r3, r3, #6
 800586c:	2200      	movs	r2, #0
 800586e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005870:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005878:	633b      	str	r3, [r7, #48]	@ 0x30
 800587a:	2300      	movs	r3, #0
 800587c:	637b      	str	r3, [r7, #52]	@ 0x34
 800587e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005882:	4622      	mov	r2, r4
 8005884:	462b      	mov	r3, r5
 8005886:	f04f 0000 	mov.w	r0, #0
 800588a:	f04f 0100 	mov.w	r1, #0
 800588e:	0159      	lsls	r1, r3, #5
 8005890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005894:	0150      	lsls	r0, r2, #5
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4621      	mov	r1, r4
 800589c:	1a51      	subs	r1, r2, r1
 800589e:	6139      	str	r1, [r7, #16]
 80058a0:	4629      	mov	r1, r5
 80058a2:	eb63 0301 	sbc.w	r3, r3, r1
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	f04f 0200 	mov.w	r2, #0
 80058ac:	f04f 0300 	mov.w	r3, #0
 80058b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058b4:	4659      	mov	r1, fp
 80058b6:	018b      	lsls	r3, r1, #6
 80058b8:	4651      	mov	r1, sl
 80058ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058be:	4651      	mov	r1, sl
 80058c0:	018a      	lsls	r2, r1, #6
 80058c2:	4651      	mov	r1, sl
 80058c4:	ebb2 0801 	subs.w	r8, r2, r1
 80058c8:	4659      	mov	r1, fp
 80058ca:	eb63 0901 	sbc.w	r9, r3, r1
 80058ce:	f04f 0200 	mov.w	r2, #0
 80058d2:	f04f 0300 	mov.w	r3, #0
 80058d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058e2:	4690      	mov	r8, r2
 80058e4:	4699      	mov	r9, r3
 80058e6:	4623      	mov	r3, r4
 80058e8:	eb18 0303 	adds.w	r3, r8, r3
 80058ec:	60bb      	str	r3, [r7, #8]
 80058ee:	462b      	mov	r3, r5
 80058f0:	eb49 0303 	adc.w	r3, r9, r3
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	f04f 0200 	mov.w	r2, #0
 80058fa:	f04f 0300 	mov.w	r3, #0
 80058fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005902:	4629      	mov	r1, r5
 8005904:	024b      	lsls	r3, r1, #9
 8005906:	4621      	mov	r1, r4
 8005908:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800590c:	4621      	mov	r1, r4
 800590e:	024a      	lsls	r2, r1, #9
 8005910:	4610      	mov	r0, r2
 8005912:	4619      	mov	r1, r3
 8005914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005916:	2200      	movs	r2, #0
 8005918:	62bb      	str	r3, [r7, #40]	@ 0x28
 800591a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800591c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005920:	f7fb f936 	bl	8000b90 <__aeabi_uldivmod>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	4613      	mov	r3, r2
 800592a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800592c:	e058      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800592e:	4b38      	ldr	r3, [pc, #224]	@ (8005a10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	099b      	lsrs	r3, r3, #6
 8005934:	2200      	movs	r2, #0
 8005936:	4618      	mov	r0, r3
 8005938:	4611      	mov	r1, r2
 800593a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800593e:	623b      	str	r3, [r7, #32]
 8005940:	2300      	movs	r3, #0
 8005942:	627b      	str	r3, [r7, #36]	@ 0x24
 8005944:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005948:	4642      	mov	r2, r8
 800594a:	464b      	mov	r3, r9
 800594c:	f04f 0000 	mov.w	r0, #0
 8005950:	f04f 0100 	mov.w	r1, #0
 8005954:	0159      	lsls	r1, r3, #5
 8005956:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800595a:	0150      	lsls	r0, r2, #5
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4641      	mov	r1, r8
 8005962:	ebb2 0a01 	subs.w	sl, r2, r1
 8005966:	4649      	mov	r1, r9
 8005968:	eb63 0b01 	sbc.w	fp, r3, r1
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005978:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800597c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005980:	ebb2 040a 	subs.w	r4, r2, sl
 8005984:	eb63 050b 	sbc.w	r5, r3, fp
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	f04f 0300 	mov.w	r3, #0
 8005990:	00eb      	lsls	r3, r5, #3
 8005992:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005996:	00e2      	lsls	r2, r4, #3
 8005998:	4614      	mov	r4, r2
 800599a:	461d      	mov	r5, r3
 800599c:	4643      	mov	r3, r8
 800599e:	18e3      	adds	r3, r4, r3
 80059a0:	603b      	str	r3, [r7, #0]
 80059a2:	464b      	mov	r3, r9
 80059a4:	eb45 0303 	adc.w	r3, r5, r3
 80059a8:	607b      	str	r3, [r7, #4]
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059b6:	4629      	mov	r1, r5
 80059b8:	028b      	lsls	r3, r1, #10
 80059ba:	4621      	mov	r1, r4
 80059bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059c0:	4621      	mov	r1, r4
 80059c2:	028a      	lsls	r2, r1, #10
 80059c4:	4610      	mov	r0, r2
 80059c6:	4619      	mov	r1, r3
 80059c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059ca:	2200      	movs	r2, #0
 80059cc:	61bb      	str	r3, [r7, #24]
 80059ce:	61fa      	str	r2, [r7, #28]
 80059d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059d4:	f7fb f8dc 	bl	8000b90 <__aeabi_uldivmod>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	4613      	mov	r3, r2
 80059de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80059e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005a10 <HAL_RCC_GetSysClockFreq+0x200>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	0c1b      	lsrs	r3, r3, #16
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	3301      	adds	r3, #1
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80059f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059fa:	e002      	b.n	8005a02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059fc:	4b05      	ldr	r3, [pc, #20]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x204>)
 80059fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3750      	adds	r7, #80	@ 0x50
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a0e:	bf00      	nop
 8005a10:	40023800 	.word	0x40023800
 8005a14:	00f42400 	.word	0x00f42400
 8005a18:	007a1200 	.word	0x007a1200

08005a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a20:	4b03      	ldr	r3, [pc, #12]	@ (8005a30 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a22:	681b      	ldr	r3, [r3, #0]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	20000000 	.word	0x20000000

08005a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a38:	f7ff fff0 	bl	8005a1c <HAL_RCC_GetHCLKFreq>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	4b05      	ldr	r3, [pc, #20]	@ (8005a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	0a9b      	lsrs	r3, r3, #10
 8005a44:	f003 0307 	and.w	r3, r3, #7
 8005a48:	4903      	ldr	r1, [pc, #12]	@ (8005a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a4a:	5ccb      	ldrb	r3, [r1, r3]
 8005a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40023800 	.word	0x40023800
 8005a58:	0800ec08 	.word	0x0800ec08

08005a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a60:	f7ff ffdc 	bl	8005a1c <HAL_RCC_GetHCLKFreq>
 8005a64:	4602      	mov	r2, r0
 8005a66:	4b05      	ldr	r3, [pc, #20]	@ (8005a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	0b5b      	lsrs	r3, r3, #13
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	4903      	ldr	r1, [pc, #12]	@ (8005a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a72:	5ccb      	ldrb	r3, [r1, r3]
 8005a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	40023800 	.word	0x40023800
 8005a80:	0800ec08 	.word	0x0800ec08

08005a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e07b      	b.n	8005b8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d108      	bne.n	8005ab0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005aa6:	d009      	beq.n	8005abc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	61da      	str	r2, [r3, #28]
 8005aae:	e005      	b.n	8005abc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7fc fb72 	bl	80021c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005af2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b04:	431a      	orrs	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b40:	ea42 0103 	orr.w	r1, r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b48:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	0c1b      	lsrs	r3, r3, #16
 8005b5a:	f003 0104 	and.w	r1, r3, #4
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b62:	f003 0210 	and.w	r2, r3, #16
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69da      	ldr	r2, [r3, #28]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b082      	sub	sp, #8
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e041      	b.n	8005c2c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d106      	bne.n	8005bc2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7fc fd15 	bl	80025ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4610      	mov	r0, r2
 8005bd6:	f000 fb3b 	bl	8006250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e041      	b.n	8005cca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d106      	bne.n	8005c60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7fc fc8e 	bl	800257c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	3304      	adds	r3, #4
 8005c70:	4619      	mov	r1, r3
 8005c72:	4610      	mov	r0, r2
 8005c74:	f000 faec 	bl	8006250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3708      	adds	r7, #8
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
	...

08005cd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d109      	bne.n	8005cf8 <HAL_TIM_PWM_Start+0x24>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	bf14      	ite	ne
 8005cf0:	2301      	movne	r3, #1
 8005cf2:	2300      	moveq	r3, #0
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	e022      	b.n	8005d3e <HAL_TIM_PWM_Start+0x6a>
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d109      	bne.n	8005d12 <HAL_TIM_PWM_Start+0x3e>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	bf14      	ite	ne
 8005d0a:	2301      	movne	r3, #1
 8005d0c:	2300      	moveq	r3, #0
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	e015      	b.n	8005d3e <HAL_TIM_PWM_Start+0x6a>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d109      	bne.n	8005d2c <HAL_TIM_PWM_Start+0x58>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	bf14      	ite	ne
 8005d24:	2301      	movne	r3, #1
 8005d26:	2300      	moveq	r3, #0
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	e008      	b.n	8005d3e <HAL_TIM_PWM_Start+0x6a>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	bf14      	ite	ne
 8005d38:	2301      	movne	r3, #1
 8005d3a:	2300      	moveq	r3, #0
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e07c      	b.n	8005e40 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d104      	bne.n	8005d56 <HAL_TIM_PWM_Start+0x82>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d54:	e013      	b.n	8005d7e <HAL_TIM_PWM_Start+0xaa>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b04      	cmp	r3, #4
 8005d5a:	d104      	bne.n	8005d66 <HAL_TIM_PWM_Start+0x92>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d64:	e00b      	b.n	8005d7e <HAL_TIM_PWM_Start+0xaa>
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b08      	cmp	r3, #8
 8005d6a:	d104      	bne.n	8005d76 <HAL_TIM_PWM_Start+0xa2>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d74:	e003      	b.n	8005d7e <HAL_TIM_PWM_Start+0xaa>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2202      	movs	r2, #2
 8005d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2201      	movs	r2, #1
 8005d84:	6839      	ldr	r1, [r7, #0]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fcbe 	bl	8006708 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a2d      	ldr	r2, [pc, #180]	@ (8005e48 <HAL_TIM_PWM_Start+0x174>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d004      	beq.n	8005da0 <HAL_TIM_PWM_Start+0xcc>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a2c      	ldr	r2, [pc, #176]	@ (8005e4c <HAL_TIM_PWM_Start+0x178>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d101      	bne.n	8005da4 <HAL_TIM_PWM_Start+0xd0>
 8005da0:	2301      	movs	r3, #1
 8005da2:	e000      	b.n	8005da6 <HAL_TIM_PWM_Start+0xd2>
 8005da4:	2300      	movs	r3, #0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d007      	beq.n	8005dba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005db8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a22      	ldr	r2, [pc, #136]	@ (8005e48 <HAL_TIM_PWM_Start+0x174>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d022      	beq.n	8005e0a <HAL_TIM_PWM_Start+0x136>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dcc:	d01d      	beq.n	8005e0a <HAL_TIM_PWM_Start+0x136>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8005e50 <HAL_TIM_PWM_Start+0x17c>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d018      	beq.n	8005e0a <HAL_TIM_PWM_Start+0x136>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8005e54 <HAL_TIM_PWM_Start+0x180>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d013      	beq.n	8005e0a <HAL_TIM_PWM_Start+0x136>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a1c      	ldr	r2, [pc, #112]	@ (8005e58 <HAL_TIM_PWM_Start+0x184>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00e      	beq.n	8005e0a <HAL_TIM_PWM_Start+0x136>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a16      	ldr	r2, [pc, #88]	@ (8005e4c <HAL_TIM_PWM_Start+0x178>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d009      	beq.n	8005e0a <HAL_TIM_PWM_Start+0x136>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a18      	ldr	r2, [pc, #96]	@ (8005e5c <HAL_TIM_PWM_Start+0x188>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d004      	beq.n	8005e0a <HAL_TIM_PWM_Start+0x136>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a16      	ldr	r2, [pc, #88]	@ (8005e60 <HAL_TIM_PWM_Start+0x18c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d111      	bne.n	8005e2e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b06      	cmp	r3, #6
 8005e1a:	d010      	beq.n	8005e3e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f042 0201 	orr.w	r2, r2, #1
 8005e2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e2c:	e007      	b.n	8005e3e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f042 0201 	orr.w	r2, r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	40010000 	.word	0x40010000
 8005e4c:	40010400 	.word	0x40010400
 8005e50:	40000400 	.word	0x40000400
 8005e54:	40000800 	.word	0x40000800
 8005e58:	40000c00 	.word	0x40000c00
 8005e5c:	40014000 	.word	0x40014000
 8005e60:	40001800 	.word	0x40001800

08005e64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b086      	sub	sp, #24
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d101      	bne.n	8005e78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e097      	b.n	8005fa8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d106      	bne.n	8005e92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7fc f9ff 	bl	8002290 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2202      	movs	r2, #2
 8005e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	6812      	ldr	r2, [r2, #0]
 8005ea4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ea8:	f023 0307 	bic.w	r3, r3, #7
 8005eac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	4610      	mov	r0, r2
 8005eba:	f000 f9c9 	bl	8006250 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6a1b      	ldr	r3, [r3, #32]
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ee6:	f023 0303 	bic.w	r3, r3, #3
 8005eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	021b      	lsls	r3, r3, #8
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005f04:	f023 030c 	bic.w	r3, r3, #12
 8005f08:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	68da      	ldr	r2, [r3, #12]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	021b      	lsls	r3, r3, #8
 8005f20:	4313      	orrs	r3, r2
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	011a      	lsls	r2, r3, #4
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	6a1b      	ldr	r3, [r3, #32]
 8005f32:	031b      	lsls	r3, r3, #12
 8005f34:	4313      	orrs	r3, r2
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005f42:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005f4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685a      	ldr	r2, [r3, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	695b      	ldr	r3, [r3, #20]
 8005f54:	011b      	lsls	r3, r3, #4
 8005f56:	4313      	orrs	r3, r2
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	697a      	ldr	r2, [r7, #20]
 8005f64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3718      	adds	r7, #24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fc0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005fc8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fd0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005fd8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d110      	bne.n	8006002 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d102      	bne.n	8005fec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fe6:	7b7b      	ldrb	r3, [r7, #13]
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d001      	beq.n	8005ff0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e069      	b.n	80060c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2202      	movs	r2, #2
 8005ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006000:	e031      	b.n	8006066 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b04      	cmp	r3, #4
 8006006:	d110      	bne.n	800602a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006008:	7bbb      	ldrb	r3, [r7, #14]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d102      	bne.n	8006014 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800600e:	7b3b      	ldrb	r3, [r7, #12]
 8006010:	2b01      	cmp	r3, #1
 8006012:	d001      	beq.n	8006018 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e055      	b.n	80060c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006028:	e01d      	b.n	8006066 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800602a:	7bfb      	ldrb	r3, [r7, #15]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d108      	bne.n	8006042 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006030:	7bbb      	ldrb	r3, [r7, #14]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d105      	bne.n	8006042 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006036:	7b7b      	ldrb	r3, [r7, #13]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d102      	bne.n	8006042 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800603c:	7b3b      	ldrb	r3, [r7, #12]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d001      	beq.n	8006046 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e03e      	b.n	80060c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2202      	movs	r2, #2
 800604a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2202      	movs	r2, #2
 8006052:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2202      	movs	r2, #2
 800605a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2202      	movs	r2, #2
 8006062:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d003      	beq.n	8006074 <HAL_TIM_Encoder_Start+0xc4>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b04      	cmp	r3, #4
 8006070:	d008      	beq.n	8006084 <HAL_TIM_Encoder_Start+0xd4>
 8006072:	e00f      	b.n	8006094 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2201      	movs	r2, #1
 800607a:	2100      	movs	r1, #0
 800607c:	4618      	mov	r0, r3
 800607e:	f000 fb43 	bl	8006708 <TIM_CCxChannelCmd>
      break;
 8006082:	e016      	b.n	80060b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2201      	movs	r2, #1
 800608a:	2104      	movs	r1, #4
 800608c:	4618      	mov	r0, r3
 800608e:	f000 fb3b 	bl	8006708 <TIM_CCxChannelCmd>
      break;
 8006092:	e00e      	b.n	80060b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2201      	movs	r2, #1
 800609a:	2100      	movs	r1, #0
 800609c:	4618      	mov	r0, r3
 800609e:	f000 fb33 	bl	8006708 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2201      	movs	r2, #1
 80060a8:	2104      	movs	r1, #4
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 fb2c 	bl	8006708 <TIM_CCxChannelCmd>
      break;
 80060b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f042 0201 	orr.w	r2, r2, #1
 80060c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060d8:	2300      	movs	r3, #0
 80060da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d101      	bne.n	80060ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060e6:	2302      	movs	r3, #2
 80060e8:	e0ae      	b.n	8006248 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b0c      	cmp	r3, #12
 80060f6:	f200 809f 	bhi.w	8006238 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006100 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006100:	08006135 	.word	0x08006135
 8006104:	08006239 	.word	0x08006239
 8006108:	08006239 	.word	0x08006239
 800610c:	08006239 	.word	0x08006239
 8006110:	08006175 	.word	0x08006175
 8006114:	08006239 	.word	0x08006239
 8006118:	08006239 	.word	0x08006239
 800611c:	08006239 	.word	0x08006239
 8006120:	080061b7 	.word	0x080061b7
 8006124:	08006239 	.word	0x08006239
 8006128:	08006239 	.word	0x08006239
 800612c:	08006239 	.word	0x08006239
 8006130:	080061f7 	.word	0x080061f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68b9      	ldr	r1, [r7, #8]
 800613a:	4618      	mov	r0, r3
 800613c:	f000 f934 	bl	80063a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f042 0208 	orr.w	r2, r2, #8
 800614e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	699a      	ldr	r2, [r3, #24]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0204 	bic.w	r2, r2, #4
 800615e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6999      	ldr	r1, [r3, #24]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	691a      	ldr	r2, [r3, #16]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	619a      	str	r2, [r3, #24]
      break;
 8006172:	e064      	b.n	800623e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68b9      	ldr	r1, [r7, #8]
 800617a:	4618      	mov	r0, r3
 800617c:	f000 f984 	bl	8006488 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800618e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800619e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6999      	ldr	r1, [r3, #24]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	021a      	lsls	r2, r3, #8
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	619a      	str	r2, [r3, #24]
      break;
 80061b4:	e043      	b.n	800623e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68b9      	ldr	r1, [r7, #8]
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 f9d9 	bl	8006574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	69da      	ldr	r2, [r3, #28]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 0208 	orr.w	r2, r2, #8
 80061d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69da      	ldr	r2, [r3, #28]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0204 	bic.w	r2, r2, #4
 80061e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69d9      	ldr	r1, [r3, #28]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	691a      	ldr	r2, [r3, #16]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	61da      	str	r2, [r3, #28]
      break;
 80061f4:	e023      	b.n	800623e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68b9      	ldr	r1, [r7, #8]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 fa2d 	bl	800665c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	69da      	ldr	r2, [r3, #28]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006210:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	69da      	ldr	r2, [r3, #28]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006220:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69d9      	ldr	r1, [r3, #28]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	021a      	lsls	r2, r3, #8
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	61da      	str	r2, [r3, #28]
      break;
 8006236:	e002      	b.n	800623e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	75fb      	strb	r3, [r7, #23]
      break;
 800623c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006246:	7dfb      	ldrb	r3, [r7, #23]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a46      	ldr	r2, [pc, #280]	@ (800637c <TIM_Base_SetConfig+0x12c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d013      	beq.n	8006290 <TIM_Base_SetConfig+0x40>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800626e:	d00f      	beq.n	8006290 <TIM_Base_SetConfig+0x40>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a43      	ldr	r2, [pc, #268]	@ (8006380 <TIM_Base_SetConfig+0x130>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d00b      	beq.n	8006290 <TIM_Base_SetConfig+0x40>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a42      	ldr	r2, [pc, #264]	@ (8006384 <TIM_Base_SetConfig+0x134>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d007      	beq.n	8006290 <TIM_Base_SetConfig+0x40>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4a41      	ldr	r2, [pc, #260]	@ (8006388 <TIM_Base_SetConfig+0x138>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d003      	beq.n	8006290 <TIM_Base_SetConfig+0x40>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a40      	ldr	r2, [pc, #256]	@ (800638c <TIM_Base_SetConfig+0x13c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d108      	bne.n	80062a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4313      	orrs	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a35      	ldr	r2, [pc, #212]	@ (800637c <TIM_Base_SetConfig+0x12c>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d02b      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b0:	d027      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a32      	ldr	r2, [pc, #200]	@ (8006380 <TIM_Base_SetConfig+0x130>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d023      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a31      	ldr	r2, [pc, #196]	@ (8006384 <TIM_Base_SetConfig+0x134>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d01f      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a30      	ldr	r2, [pc, #192]	@ (8006388 <TIM_Base_SetConfig+0x138>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d01b      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a2f      	ldr	r2, [pc, #188]	@ (800638c <TIM_Base_SetConfig+0x13c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d017      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006390 <TIM_Base_SetConfig+0x140>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d013      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006394 <TIM_Base_SetConfig+0x144>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d00f      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a2c      	ldr	r2, [pc, #176]	@ (8006398 <TIM_Base_SetConfig+0x148>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d00b      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a2b      	ldr	r2, [pc, #172]	@ (800639c <TIM_Base_SetConfig+0x14c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d007      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a2a      	ldr	r2, [pc, #168]	@ (80063a0 <TIM_Base_SetConfig+0x150>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d003      	beq.n	8006302 <TIM_Base_SetConfig+0xb2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a29      	ldr	r2, [pc, #164]	@ (80063a4 <TIM_Base_SetConfig+0x154>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d108      	bne.n	8006314 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4313      	orrs	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	689a      	ldr	r2, [r3, #8]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	4a10      	ldr	r2, [pc, #64]	@ (800637c <TIM_Base_SetConfig+0x12c>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d003      	beq.n	8006348 <TIM_Base_SetConfig+0xf8>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a12      	ldr	r2, [pc, #72]	@ (800638c <TIM_Base_SetConfig+0x13c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d103      	bne.n	8006350 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b01      	cmp	r3, #1
 8006360:	d105      	bne.n	800636e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f023 0201 	bic.w	r2, r3, #1
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	611a      	str	r2, [r3, #16]
  }
}
 800636e:	bf00      	nop
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40010000 	.word	0x40010000
 8006380:	40000400 	.word	0x40000400
 8006384:	40000800 	.word	0x40000800
 8006388:	40000c00 	.word	0x40000c00
 800638c:	40010400 	.word	0x40010400
 8006390:	40014000 	.word	0x40014000
 8006394:	40014400 	.word	0x40014400
 8006398:	40014800 	.word	0x40014800
 800639c:	40001800 	.word	0x40001800
 80063a0:	40001c00 	.word	0x40001c00
 80063a4:	40002000 	.word	0x40002000

080063a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a1b      	ldr	r3, [r3, #32]
 80063bc:	f023 0201 	bic.w	r2, r3, #1
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f023 0303 	bic.w	r3, r3, #3
 80063de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f023 0302 	bic.w	r3, r3, #2
 80063f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a20      	ldr	r2, [pc, #128]	@ (8006480 <TIM_OC1_SetConfig+0xd8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d003      	beq.n	800640c <TIM_OC1_SetConfig+0x64>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a1f      	ldr	r2, [pc, #124]	@ (8006484 <TIM_OC1_SetConfig+0xdc>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d10c      	bne.n	8006426 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f023 0308 	bic.w	r3, r3, #8
 8006412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	4313      	orrs	r3, r2
 800641c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f023 0304 	bic.w	r3, r3, #4
 8006424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a15      	ldr	r2, [pc, #84]	@ (8006480 <TIM_OC1_SetConfig+0xd8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d003      	beq.n	8006436 <TIM_OC1_SetConfig+0x8e>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a14      	ldr	r2, [pc, #80]	@ (8006484 <TIM_OC1_SetConfig+0xdc>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d111      	bne.n	800645a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800643c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	4313      	orrs	r3, r2
 800644e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	4313      	orrs	r3, r2
 8006458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	621a      	str	r2, [r3, #32]
}
 8006474:	bf00      	nop
 8006476:	371c      	adds	r7, #28
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	40010000 	.word	0x40010000
 8006484:	40010400 	.word	0x40010400

08006488 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006488:	b480      	push	{r7}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a1b      	ldr	r3, [r3, #32]
 800649c:	f023 0210 	bic.w	r2, r3, #16
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	021b      	lsls	r3, r3, #8
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f023 0320 	bic.w	r3, r3, #32
 80064d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	011b      	lsls	r3, r3, #4
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a22      	ldr	r2, [pc, #136]	@ (800656c <TIM_OC2_SetConfig+0xe4>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d003      	beq.n	80064f0 <TIM_OC2_SetConfig+0x68>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a21      	ldr	r2, [pc, #132]	@ (8006570 <TIM_OC2_SetConfig+0xe8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d10d      	bne.n	800650c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800650a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a17      	ldr	r2, [pc, #92]	@ (800656c <TIM_OC2_SetConfig+0xe4>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d003      	beq.n	800651c <TIM_OC2_SetConfig+0x94>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a16      	ldr	r2, [pc, #88]	@ (8006570 <TIM_OC2_SetConfig+0xe8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d113      	bne.n	8006544 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006522:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800652a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	695b      	ldr	r3, [r3, #20]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	4313      	orrs	r3, r2
 8006536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	4313      	orrs	r3, r2
 8006542:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	621a      	str	r2, [r3, #32]
}
 800655e:	bf00      	nop
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	40010000 	.word	0x40010000
 8006570:	40010400 	.word	0x40010400

08006574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 0303 	bic.w	r3, r3, #3
 80065aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	021b      	lsls	r3, r3, #8
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a21      	ldr	r2, [pc, #132]	@ (8006654 <TIM_OC3_SetConfig+0xe0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d003      	beq.n	80065da <TIM_OC3_SetConfig+0x66>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a20      	ldr	r2, [pc, #128]	@ (8006658 <TIM_OC3_SetConfig+0xe4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d10d      	bne.n	80065f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	021b      	lsls	r3, r3, #8
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a16      	ldr	r2, [pc, #88]	@ (8006654 <TIM_OC3_SetConfig+0xe0>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d003      	beq.n	8006606 <TIM_OC3_SetConfig+0x92>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a15      	ldr	r2, [pc, #84]	@ (8006658 <TIM_OC3_SetConfig+0xe4>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d113      	bne.n	800662e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800660c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006614:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	4313      	orrs	r3, r2
 8006620:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	011b      	lsls	r3, r3, #4
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4313      	orrs	r3, r2
 800662c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	621a      	str	r2, [r3, #32]
}
 8006648:	bf00      	nop
 800664a:	371c      	adds	r7, #28
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	40010000 	.word	0x40010000
 8006658:	40010400 	.word	0x40010400

0800665c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800665c:	b480      	push	{r7}
 800665e:	b087      	sub	sp, #28
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6a1b      	ldr	r3, [r3, #32]
 800666a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800668a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	021b      	lsls	r3, r3, #8
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	4313      	orrs	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	031b      	lsls	r3, r3, #12
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a12      	ldr	r2, [pc, #72]	@ (8006700 <TIM_OC4_SetConfig+0xa4>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d003      	beq.n	80066c4 <TIM_OC4_SetConfig+0x68>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a11      	ldr	r2, [pc, #68]	@ (8006704 <TIM_OC4_SetConfig+0xa8>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d109      	bne.n	80066d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80066ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	019b      	lsls	r3, r3, #6
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	685a      	ldr	r2, [r3, #4]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	621a      	str	r2, [r3, #32]
}
 80066f2:	bf00      	nop
 80066f4:	371c      	adds	r7, #28
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	40010000 	.word	0x40010000
 8006704:	40010400 	.word	0x40010400

08006708 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f003 031f 	and.w	r3, r3, #31
 800671a:	2201      	movs	r2, #1
 800671c:	fa02 f303 	lsl.w	r3, r2, r3
 8006720:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6a1a      	ldr	r2, [r3, #32]
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	43db      	mvns	r3, r3
 800672a:	401a      	ands	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6a1a      	ldr	r2, [r3, #32]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	f003 031f 	and.w	r3, r3, #31
 800673a:	6879      	ldr	r1, [r7, #4]
 800673c:	fa01 f303 	lsl.w	r3, r1, r3
 8006740:	431a      	orrs	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	621a      	str	r2, [r3, #32]
}
 8006746:	bf00      	nop
 8006748:	371c      	adds	r7, #28
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
	...

08006754 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d109      	bne.n	8006778 <HAL_TIMEx_PWMN_Start+0x24>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b01      	cmp	r3, #1
 800676e:	bf14      	ite	ne
 8006770:	2301      	movne	r3, #1
 8006772:	2300      	moveq	r3, #0
 8006774:	b2db      	uxtb	r3, r3
 8006776:	e022      	b.n	80067be <HAL_TIMEx_PWMN_Start+0x6a>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2b04      	cmp	r3, #4
 800677c:	d109      	bne.n	8006792 <HAL_TIMEx_PWMN_Start+0x3e>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b01      	cmp	r3, #1
 8006788:	bf14      	ite	ne
 800678a:	2301      	movne	r3, #1
 800678c:	2300      	moveq	r3, #0
 800678e:	b2db      	uxtb	r3, r3
 8006790:	e015      	b.n	80067be <HAL_TIMEx_PWMN_Start+0x6a>
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	2b08      	cmp	r3, #8
 8006796:	d109      	bne.n	80067ac <HAL_TIMEx_PWMN_Start+0x58>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	bf14      	ite	ne
 80067a4:	2301      	movne	r3, #1
 80067a6:	2300      	moveq	r3, #0
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	e008      	b.n	80067be <HAL_TIMEx_PWMN_Start+0x6a>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	bf14      	ite	ne
 80067b8:	2301      	movne	r3, #1
 80067ba:	2300      	moveq	r3, #0
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d001      	beq.n	80067c6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e06d      	b.n	80068a2 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d104      	bne.n	80067d6 <HAL_TIMEx_PWMN_Start+0x82>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2202      	movs	r2, #2
 80067d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067d4:	e013      	b.n	80067fe <HAL_TIMEx_PWMN_Start+0xaa>
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b04      	cmp	r3, #4
 80067da:	d104      	bne.n	80067e6 <HAL_TIMEx_PWMN_Start+0x92>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067e4:	e00b      	b.n	80067fe <HAL_TIMEx_PWMN_Start+0xaa>
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2b08      	cmp	r3, #8
 80067ea:	d104      	bne.n	80067f6 <HAL_TIMEx_PWMN_Start+0xa2>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067f4:	e003      	b.n	80067fe <HAL_TIMEx_PWMN_Start+0xaa>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2202      	movs	r2, #2
 80067fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2204      	movs	r2, #4
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	4618      	mov	r0, r3
 8006808:	f000 f8da 	bl	80069c0 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800681a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a22      	ldr	r2, [pc, #136]	@ (80068ac <HAL_TIMEx_PWMN_Start+0x158>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d022      	beq.n	800686c <HAL_TIMEx_PWMN_Start+0x118>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800682e:	d01d      	beq.n	800686c <HAL_TIMEx_PWMN_Start+0x118>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a1e      	ldr	r2, [pc, #120]	@ (80068b0 <HAL_TIMEx_PWMN_Start+0x15c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d018      	beq.n	800686c <HAL_TIMEx_PWMN_Start+0x118>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a1d      	ldr	r2, [pc, #116]	@ (80068b4 <HAL_TIMEx_PWMN_Start+0x160>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d013      	beq.n	800686c <HAL_TIMEx_PWMN_Start+0x118>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a1b      	ldr	r2, [pc, #108]	@ (80068b8 <HAL_TIMEx_PWMN_Start+0x164>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d00e      	beq.n	800686c <HAL_TIMEx_PWMN_Start+0x118>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a1a      	ldr	r2, [pc, #104]	@ (80068bc <HAL_TIMEx_PWMN_Start+0x168>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d009      	beq.n	800686c <HAL_TIMEx_PWMN_Start+0x118>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a18      	ldr	r2, [pc, #96]	@ (80068c0 <HAL_TIMEx_PWMN_Start+0x16c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d004      	beq.n	800686c <HAL_TIMEx_PWMN_Start+0x118>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a17      	ldr	r2, [pc, #92]	@ (80068c4 <HAL_TIMEx_PWMN_Start+0x170>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d111      	bne.n	8006890 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b06      	cmp	r3, #6
 800687c:	d010      	beq.n	80068a0 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f042 0201 	orr.w	r2, r2, #1
 800688c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800688e:	e007      	b.n	80068a0 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f042 0201 	orr.w	r2, r2, #1
 800689e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	40010000 	.word	0x40010000
 80068b0:	40000400 	.word	0x40000400
 80068b4:	40000800 	.word	0x40000800
 80068b8:	40000c00 	.word	0x40000c00
 80068bc:	40010400 	.word	0x40010400
 80068c0:	40014000 	.word	0x40014000
 80068c4:	40001800 	.word	0x40001800

080068c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d101      	bne.n	80068e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068dc:	2302      	movs	r3, #2
 80068de:	e05a      	b.n	8006996 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006906:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	4313      	orrs	r3, r2
 8006910:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a21      	ldr	r2, [pc, #132]	@ (80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d022      	beq.n	800696a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800692c:	d01d      	beq.n	800696a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a1d      	ldr	r2, [pc, #116]	@ (80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d018      	beq.n	800696a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a1b      	ldr	r2, [pc, #108]	@ (80069ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d013      	beq.n	800696a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a1a      	ldr	r2, [pc, #104]	@ (80069b0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d00e      	beq.n	800696a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a18      	ldr	r2, [pc, #96]	@ (80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d009      	beq.n	800696a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a17      	ldr	r2, [pc, #92]	@ (80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d004      	beq.n	800696a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a15      	ldr	r2, [pc, #84]	@ (80069bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d10c      	bne.n	8006984 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006970:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	4313      	orrs	r3, r2
 800697a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68ba      	ldr	r2, [r7, #8]
 8006982:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3714      	adds	r7, #20
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	40010000 	.word	0x40010000
 80069a8:	40000400 	.word	0x40000400
 80069ac:	40000800 	.word	0x40000800
 80069b0:	40000c00 	.word	0x40000c00
 80069b4:	40010400 	.word	0x40010400
 80069b8:	40014000 	.word	0x40014000
 80069bc:	40001800 	.word	0x40001800

080069c0 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f003 030f 	and.w	r3, r3, #15
 80069d2:	2204      	movs	r2, #4
 80069d4:	fa02 f303 	lsl.w	r3, r2, r3
 80069d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6a1a      	ldr	r2, [r3, #32]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	43db      	mvns	r3, r3
 80069e2:	401a      	ands	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6a1a      	ldr	r2, [r3, #32]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f003 030f 	and.w	r3, r3, #15
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	fa01 f303 	lsl.w	r3, r1, r3
 80069f8:	431a      	orrs	r2, r3
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	621a      	str	r2, [r3, #32]
}
 80069fe:	bf00      	nop
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b082      	sub	sp, #8
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e042      	b.n	8006aa2 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d106      	bne.n	8006a36 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7fb ff3d 	bl	80028b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2224      	movs	r2, #36	@ 0x24
 8006a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a4c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fd0c 	bl	800746c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	691a      	ldr	r2, [r3, #16]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	695a      	ldr	r2, [r3, #20]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a72:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a82:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b082      	sub	sp, #8
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	e024      	b.n	8006b06 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2224      	movs	r2, #36	@ 0x24
 8006ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68da      	ldr	r2, [r3, #12]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ad2:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7fb ff71 	bl	80029bc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b084      	sub	sp, #16
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	60f8      	str	r0, [r7, #12]
 8006b16:	60b9      	str	r1, [r7, #8]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b20      	cmp	r3, #32
 8006b26:	d112      	bne.n	8006b4e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d002      	beq.n	8006b34 <HAL_UART_Receive_IT+0x26>
 8006b2e:	88fb      	ldrh	r3, [r7, #6]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d101      	bne.n	8006b38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e00b      	b.n	8006b50 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006b3e:	88fb      	ldrh	r3, [r7, #6]
 8006b40:	461a      	mov	r2, r3
 8006b42:	68b9      	ldr	r1, [r7, #8]
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 fab9 	bl	80070bc <UART_Start_Receive_IT>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	e000      	b.n	8006b50 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006b4e:	2302      	movs	r3, #2
  }
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b0ba      	sub	sp, #232	@ 0xe8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006b84:	2300      	movs	r3, #0
 8006b86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b8e:	f003 030f 	and.w	r3, r3, #15
 8006b92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006b96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10f      	bne.n	8006bbe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ba2:	f003 0320 	and.w	r3, r3, #32
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d009      	beq.n	8006bbe <HAL_UART_IRQHandler+0x66>
 8006baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bae:	f003 0320 	and.w	r3, r3, #32
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 fb99 	bl	80072ee <UART_Receive_IT>
      return;
 8006bbc:	e25b      	b.n	8007076 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006bbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 80de 	beq.w	8006d84 <HAL_UART_IRQHandler+0x22c>
 8006bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d106      	bne.n	8006be2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bd8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f000 80d1 	beq.w	8006d84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00b      	beq.n	8006c06 <HAL_UART_IRQHandler+0xae>
 8006bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d005      	beq.n	8006c06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bfe:	f043 0201 	orr.w	r2, r3, #1
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c0a:	f003 0304 	and.w	r3, r3, #4
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00b      	beq.n	8006c2a <HAL_UART_IRQHandler+0xd2>
 8006c12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d005      	beq.n	8006c2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c22:	f043 0202 	orr.w	r2, r3, #2
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00b      	beq.n	8006c4e <HAL_UART_IRQHandler+0xf6>
 8006c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d005      	beq.n	8006c4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c46:	f043 0204 	orr.w	r2, r3, #4
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c52:	f003 0308 	and.w	r3, r3, #8
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d011      	beq.n	8006c7e <HAL_UART_IRQHandler+0x126>
 8006c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d105      	bne.n	8006c72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006c66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d005      	beq.n	8006c7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c76:	f043 0208 	orr.w	r2, r3, #8
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 81f2 	beq.w	800706c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c8c:	f003 0320 	and.w	r3, r3, #32
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d008      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x14e>
 8006c94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c98:	f003 0320 	and.w	r3, r3, #32
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d002      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fb24 	bl	80072ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cb0:	2b40      	cmp	r3, #64	@ 0x40
 8006cb2:	bf0c      	ite	eq
 8006cb4:	2301      	moveq	r3, #1
 8006cb6:	2300      	movne	r3, #0
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cc2:	f003 0308 	and.w	r3, r3, #8
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d103      	bne.n	8006cd2 <HAL_UART_IRQHandler+0x17a>
 8006cca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d04f      	beq.n	8006d72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fa2c 	bl	8007130 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce2:	2b40      	cmp	r3, #64	@ 0x40
 8006ce4:	d141      	bne.n	8006d6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3314      	adds	r3, #20
 8006cec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006cf4:	e853 3f00 	ldrex	r3, [r3]
 8006cf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006cfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	3314      	adds	r3, #20
 8006d0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006d12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006d16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006d1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006d2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1d9      	bne.n	8006ce6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d013      	beq.n	8006d62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d3e:	4a7e      	ldr	r2, [pc, #504]	@ (8006f38 <HAL_UART_IRQHandler+0x3e0>)
 8006d40:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fc fb99 	bl	800347e <HAL_DMA_Abort_IT>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d016      	beq.n	8006d80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d60:	e00e      	b.n	8006d80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f994 	bl	8007090 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d68:	e00a      	b.n	8006d80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f990 	bl	8007090 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d70:	e006      	b.n	8006d80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f98c 	bl	8007090 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006d7e:	e175      	b.n	800706c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d80:	bf00      	nop
    return;
 8006d82:	e173      	b.n	800706c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	f040 814f 	bne.w	800702c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d92:	f003 0310 	and.w	r3, r3, #16
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 8148 	beq.w	800702c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006da0:	f003 0310 	and.w	r3, r3, #16
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f000 8141 	beq.w	800702c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006daa:	2300      	movs	r3, #0
 8006dac:	60bb      	str	r3, [r7, #8]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	60bb      	str	r3, [r7, #8]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	60bb      	str	r3, [r7, #8]
 8006dbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dca:	2b40      	cmp	r3, #64	@ 0x40
 8006dcc:	f040 80b6 	bne.w	8006f3c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ddc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 8145 	beq.w	8007070 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006dea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006dee:	429a      	cmp	r2, r3
 8006df0:	f080 813e 	bcs.w	8007070 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006dfa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e06:	f000 8088 	beq.w	8006f1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	330c      	adds	r3, #12
 8006e10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006e20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006e24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	330c      	adds	r3, #12
 8006e32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006e36:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006e42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006e46:	e841 2300 	strex	r3, r2, [r1]
 8006e4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1d9      	bne.n	8006e0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3314      	adds	r3, #20
 8006e5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e60:	e853 3f00 	ldrex	r3, [r3]
 8006e64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006e66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e68:	f023 0301 	bic.w	r3, r3, #1
 8006e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3314      	adds	r3, #20
 8006e76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006e7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006e7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006e82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006e86:	e841 2300 	strex	r3, r2, [r1]
 8006e8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006e8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1e1      	bne.n	8006e56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3314      	adds	r3, #20
 8006e98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006ea2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ea4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3314      	adds	r3, #20
 8006eb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006eb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006eb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ebc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006ebe:	e841 2300 	strex	r3, r2, [r1]
 8006ec2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ec4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1e3      	bne.n	8006e92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2220      	movs	r2, #32
 8006ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	330c      	adds	r3, #12
 8006ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ee8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006eea:	f023 0310 	bic.w	r3, r3, #16
 8006eee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	330c      	adds	r3, #12
 8006ef8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006efc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006efe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f04:	e841 2300 	strex	r3, r2, [r1]
 8006f08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006f0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e3      	bne.n	8006ed8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fc fa42 	bl	800339e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	4619      	mov	r1, r3
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f8b7 	bl	80070a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f36:	e09b      	b.n	8007070 <HAL_UART_IRQHandler+0x518>
 8006f38:	080071f7 	.word	0x080071f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f000 808e 	beq.w	8007074 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006f58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 8089 	beq.w	8007074 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	330c      	adds	r3, #12
 8006f68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f6c:	e853 3f00 	ldrex	r3, [r3]
 8006f70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	330c      	adds	r3, #12
 8006f82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006f86:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f8e:	e841 2300 	strex	r3, r2, [r1]
 8006f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1e3      	bne.n	8006f62 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3314      	adds	r3, #20
 8006fa0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa4:	e853 3f00 	ldrex	r3, [r3]
 8006fa8:	623b      	str	r3, [r7, #32]
   return(result);
 8006faa:	6a3b      	ldr	r3, [r7, #32]
 8006fac:	f023 0301 	bic.w	r3, r3, #1
 8006fb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	3314      	adds	r3, #20
 8006fba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006fbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8006fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fc6:	e841 2300 	strex	r3, r2, [r1]
 8006fca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1e3      	bne.n	8006f9a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2220      	movs	r2, #32
 8006fd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	330c      	adds	r3, #12
 8006fe6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	e853 3f00 	ldrex	r3, [r3]
 8006fee:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f023 0310 	bic.w	r3, r3, #16
 8006ff6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	330c      	adds	r3, #12
 8007000:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007004:	61fa      	str	r2, [r7, #28]
 8007006:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007008:	69b9      	ldr	r1, [r7, #24]
 800700a:	69fa      	ldr	r2, [r7, #28]
 800700c:	e841 2300 	strex	r3, r2, [r1]
 8007010:	617b      	str	r3, [r7, #20]
   return(result);
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1e3      	bne.n	8006fe0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800701e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f83d 	bl	80070a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800702a:	e023      	b.n	8007074 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800702c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007034:	2b00      	cmp	r3, #0
 8007036:	d009      	beq.n	800704c <HAL_UART_IRQHandler+0x4f4>
 8007038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800703c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007040:	2b00      	cmp	r3, #0
 8007042:	d003      	beq.n	800704c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f8ea 	bl	800721e <UART_Transmit_IT>
    return;
 800704a:	e014      	b.n	8007076 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800704c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00e      	beq.n	8007076 <HAL_UART_IRQHandler+0x51e>
 8007058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800705c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007060:	2b00      	cmp	r3, #0
 8007062:	d008      	beq.n	8007076 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f92a 	bl	80072be <UART_EndTransmit_IT>
    return;
 800706a:	e004      	b.n	8007076 <HAL_UART_IRQHandler+0x51e>
    return;
 800706c:	bf00      	nop
 800706e:	e002      	b.n	8007076 <HAL_UART_IRQHandler+0x51e>
      return;
 8007070:	bf00      	nop
 8007072:	e000      	b.n	8007076 <HAL_UART_IRQHandler+0x51e>
      return;
 8007074:	bf00      	nop
  }
}
 8007076:	37e8      	adds	r7, #232	@ 0xe8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	460b      	mov	r3, r1
 80070ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	4613      	mov	r3, r2
 80070c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	88fa      	ldrh	r2, [r7, #6]
 80070d4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	88fa      	ldrh	r2, [r7, #6]
 80070da:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2222      	movs	r2, #34	@ 0x22
 80070e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d007      	beq.n	8007102 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68da      	ldr	r2, [r3, #12]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007100:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	695a      	ldr	r2, [r3, #20]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f042 0201 	orr.w	r2, r2, #1
 8007110:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68da      	ldr	r2, [r3, #12]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f042 0220 	orr.w	r2, r2, #32
 8007120:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007130:	b480      	push	{r7}
 8007132:	b095      	sub	sp, #84	@ 0x54
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	330c      	adds	r3, #12
 800713e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800714e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	330c      	adds	r3, #12
 8007156:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007158:	643a      	str	r2, [r7, #64]	@ 0x40
 800715a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800715e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007160:	e841 2300 	strex	r3, r2, [r1]
 8007164:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007168:	2b00      	cmp	r3, #0
 800716a:	d1e5      	bne.n	8007138 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3314      	adds	r3, #20
 8007172:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	e853 3f00 	ldrex	r3, [r3]
 800717a:	61fb      	str	r3, [r7, #28]
   return(result);
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	f023 0301 	bic.w	r3, r3, #1
 8007182:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3314      	adds	r3, #20
 800718a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800718c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800718e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007190:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007192:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007194:	e841 2300 	strex	r3, r2, [r1]
 8007198:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800719a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1e5      	bne.n	800716c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d119      	bne.n	80071dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	330c      	adds	r3, #12
 80071ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	e853 3f00 	ldrex	r3, [r3]
 80071b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	f023 0310 	bic.w	r3, r3, #16
 80071be:	647b      	str	r3, [r7, #68]	@ 0x44
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	330c      	adds	r3, #12
 80071c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071c8:	61ba      	str	r2, [r7, #24]
 80071ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	6979      	ldr	r1, [r7, #20]
 80071ce:	69ba      	ldr	r2, [r7, #24]
 80071d0:	e841 2300 	strex	r3, r2, [r1]
 80071d4:	613b      	str	r3, [r7, #16]
   return(result);
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1e5      	bne.n	80071a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2220      	movs	r2, #32
 80071e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80071ea:	bf00      	nop
 80071ec:	3754      	adds	r7, #84	@ 0x54
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr

080071f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b084      	sub	sp, #16
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007202:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f7ff ff3d 	bl	8007090 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007216:	bf00      	nop
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800721e:	b480      	push	{r7}
 8007220:	b085      	sub	sp, #20
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b21      	cmp	r3, #33	@ 0x21
 8007230:	d13e      	bne.n	80072b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800723a:	d114      	bne.n	8007266 <UART_Transmit_IT+0x48>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d110      	bne.n	8007266 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6a1b      	ldr	r3, [r3, #32]
 8007248:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007258:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	1c9a      	adds	r2, r3, #2
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	621a      	str	r2, [r3, #32]
 8007264:	e008      	b.n	8007278 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	1c59      	adds	r1, r3, #1
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	6211      	str	r1, [r2, #32]
 8007270:	781a      	ldrb	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800727c:	b29b      	uxth	r3, r3
 800727e:	3b01      	subs	r3, #1
 8007280:	b29b      	uxth	r3, r3
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	4619      	mov	r1, r3
 8007286:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10f      	bne.n	80072ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800729a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	e000      	b.n	80072b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80072b0:	2302      	movs	r3, #2
  }
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b082      	sub	sp, #8
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68da      	ldr	r2, [r3, #12]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2220      	movs	r2, #32
 80072da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7ff fecc 	bl	800707c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b08c      	sub	sp, #48	@ 0x30
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b22      	cmp	r3, #34	@ 0x22
 8007300:	f040 80ae 	bne.w	8007460 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800730c:	d117      	bne.n	800733e <UART_Receive_IT+0x50>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d113      	bne.n	800733e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007316:	2300      	movs	r3, #0
 8007318:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800731e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	b29b      	uxth	r3, r3
 8007328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800732c:	b29a      	uxth	r2, r3
 800732e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007330:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007336:	1c9a      	adds	r2, r3, #2
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	629a      	str	r2, [r3, #40]	@ 0x28
 800733c:	e026      	b.n	800738c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007342:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007344:	2300      	movs	r3, #0
 8007346:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007350:	d007      	beq.n	8007362 <UART_Receive_IT+0x74>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10a      	bne.n	8007370 <UART_Receive_IT+0x82>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d106      	bne.n	8007370 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	b2da      	uxtb	r2, r3
 800736a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800736c:	701a      	strb	r2, [r3, #0]
 800736e:	e008      	b.n	8007382 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800737c:	b2da      	uxtb	r2, r3
 800737e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007380:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007390:	b29b      	uxth	r3, r3
 8007392:	3b01      	subs	r3, #1
 8007394:	b29b      	uxth	r3, r3
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	4619      	mov	r1, r3
 800739a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800739c:	2b00      	cmp	r3, #0
 800739e:	d15d      	bne.n	800745c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 0220 	bic.w	r2, r2, #32
 80073ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68da      	ldr	r2, [r3, #12]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80073be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	695a      	ldr	r2, [r3, #20]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 0201 	bic.w	r2, r2, #1
 80073ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2220      	movs	r2, #32
 80073d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d135      	bne.n	8007452 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	330c      	adds	r3, #12
 80073f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	e853 3f00 	ldrex	r3, [r3]
 80073fa:	613b      	str	r3, [r7, #16]
   return(result);
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f023 0310 	bic.w	r3, r3, #16
 8007402:	627b      	str	r3, [r7, #36]	@ 0x24
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	330c      	adds	r3, #12
 800740a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800740c:	623a      	str	r2, [r7, #32]
 800740e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007410:	69f9      	ldr	r1, [r7, #28]
 8007412:	6a3a      	ldr	r2, [r7, #32]
 8007414:	e841 2300 	strex	r3, r2, [r1]
 8007418:	61bb      	str	r3, [r7, #24]
   return(result);
 800741a:	69bb      	ldr	r3, [r7, #24]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d1e5      	bne.n	80073ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0310 	and.w	r3, r3, #16
 800742a:	2b10      	cmp	r3, #16
 800742c:	d10a      	bne.n	8007444 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800742e:	2300      	movs	r3, #0
 8007430:	60fb      	str	r3, [r7, #12]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	60fb      	str	r3, [r7, #12]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007448:	4619      	mov	r1, r3
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7ff fe2a 	bl	80070a4 <HAL_UARTEx_RxEventCallback>
 8007450:	e002      	b.n	8007458 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7fa fdb8 	bl	8001fc8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	e002      	b.n	8007462 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	e000      	b.n	8007462 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007460:	2302      	movs	r3, #2
  }
}
 8007462:	4618      	mov	r0, r3
 8007464:	3730      	adds	r7, #48	@ 0x30
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
	...

0800746c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800746c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007470:	b0c0      	sub	sp, #256	@ 0x100
 8007472:	af00      	add	r7, sp, #0
 8007474:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007488:	68d9      	ldr	r1, [r3, #12]
 800748a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	ea40 0301 	orr.w	r3, r0, r1
 8007494:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800749a:	689a      	ldr	r2, [r3, #8]
 800749c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	431a      	orrs	r2, r3
 80074a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	431a      	orrs	r2, r3
 80074ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80074b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80074c4:	f021 010c 	bic.w	r1, r1, #12
 80074c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80074d2:	430b      	orrs	r3, r1
 80074d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	695b      	ldr	r3, [r3, #20]
 80074de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80074e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e6:	6999      	ldr	r1, [r3, #24]
 80074e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	ea40 0301 	orr.w	r3, r0, r1
 80074f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	4b8f      	ldr	r3, [pc, #572]	@ (8007738 <UART_SetConfig+0x2cc>)
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d005      	beq.n	800750c <UART_SetConfig+0xa0>
 8007500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	4b8d      	ldr	r3, [pc, #564]	@ (800773c <UART_SetConfig+0x2d0>)
 8007508:	429a      	cmp	r2, r3
 800750a:	d104      	bne.n	8007516 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800750c:	f7fe faa6 	bl	8005a5c <HAL_RCC_GetPCLK2Freq>
 8007510:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007514:	e003      	b.n	800751e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007516:	f7fe fa8d 	bl	8005a34 <HAL_RCC_GetPCLK1Freq>
 800751a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800751e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007522:	69db      	ldr	r3, [r3, #28]
 8007524:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007528:	f040 810c 	bne.w	8007744 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800752c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007530:	2200      	movs	r2, #0
 8007532:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007536:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800753a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800753e:	4622      	mov	r2, r4
 8007540:	462b      	mov	r3, r5
 8007542:	1891      	adds	r1, r2, r2
 8007544:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007546:	415b      	adcs	r3, r3
 8007548:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800754a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800754e:	4621      	mov	r1, r4
 8007550:	eb12 0801 	adds.w	r8, r2, r1
 8007554:	4629      	mov	r1, r5
 8007556:	eb43 0901 	adc.w	r9, r3, r1
 800755a:	f04f 0200 	mov.w	r2, #0
 800755e:	f04f 0300 	mov.w	r3, #0
 8007562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800756a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800756e:	4690      	mov	r8, r2
 8007570:	4699      	mov	r9, r3
 8007572:	4623      	mov	r3, r4
 8007574:	eb18 0303 	adds.w	r3, r8, r3
 8007578:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800757c:	462b      	mov	r3, r5
 800757e:	eb49 0303 	adc.w	r3, r9, r3
 8007582:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007592:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007596:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800759a:	460b      	mov	r3, r1
 800759c:	18db      	adds	r3, r3, r3
 800759e:	653b      	str	r3, [r7, #80]	@ 0x50
 80075a0:	4613      	mov	r3, r2
 80075a2:	eb42 0303 	adc.w	r3, r2, r3
 80075a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80075a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80075ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80075b0:	f7f9 faee 	bl	8000b90 <__aeabi_uldivmod>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4b61      	ldr	r3, [pc, #388]	@ (8007740 <UART_SetConfig+0x2d4>)
 80075ba:	fba3 2302 	umull	r2, r3, r3, r2
 80075be:	095b      	lsrs	r3, r3, #5
 80075c0:	011c      	lsls	r4, r3, #4
 80075c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075c6:	2200      	movs	r2, #0
 80075c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80075d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80075d4:	4642      	mov	r2, r8
 80075d6:	464b      	mov	r3, r9
 80075d8:	1891      	adds	r1, r2, r2
 80075da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80075dc:	415b      	adcs	r3, r3
 80075de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80075e4:	4641      	mov	r1, r8
 80075e6:	eb12 0a01 	adds.w	sl, r2, r1
 80075ea:	4649      	mov	r1, r9
 80075ec:	eb43 0b01 	adc.w	fp, r3, r1
 80075f0:	f04f 0200 	mov.w	r2, #0
 80075f4:	f04f 0300 	mov.w	r3, #0
 80075f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80075fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007600:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007604:	4692      	mov	sl, r2
 8007606:	469b      	mov	fp, r3
 8007608:	4643      	mov	r3, r8
 800760a:	eb1a 0303 	adds.w	r3, sl, r3
 800760e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007612:	464b      	mov	r3, r9
 8007614:	eb4b 0303 	adc.w	r3, fp, r3
 8007618:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800761c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007628:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800762c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007630:	460b      	mov	r3, r1
 8007632:	18db      	adds	r3, r3, r3
 8007634:	643b      	str	r3, [r7, #64]	@ 0x40
 8007636:	4613      	mov	r3, r2
 8007638:	eb42 0303 	adc.w	r3, r2, r3
 800763c:	647b      	str	r3, [r7, #68]	@ 0x44
 800763e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007642:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007646:	f7f9 faa3 	bl	8000b90 <__aeabi_uldivmod>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	4611      	mov	r1, r2
 8007650:	4b3b      	ldr	r3, [pc, #236]	@ (8007740 <UART_SetConfig+0x2d4>)
 8007652:	fba3 2301 	umull	r2, r3, r3, r1
 8007656:	095b      	lsrs	r3, r3, #5
 8007658:	2264      	movs	r2, #100	@ 0x64
 800765a:	fb02 f303 	mul.w	r3, r2, r3
 800765e:	1acb      	subs	r3, r1, r3
 8007660:	00db      	lsls	r3, r3, #3
 8007662:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007666:	4b36      	ldr	r3, [pc, #216]	@ (8007740 <UART_SetConfig+0x2d4>)
 8007668:	fba3 2302 	umull	r2, r3, r3, r2
 800766c:	095b      	lsrs	r3, r3, #5
 800766e:	005b      	lsls	r3, r3, #1
 8007670:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007674:	441c      	add	r4, r3
 8007676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800767a:	2200      	movs	r2, #0
 800767c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007680:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007684:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007688:	4642      	mov	r2, r8
 800768a:	464b      	mov	r3, r9
 800768c:	1891      	adds	r1, r2, r2
 800768e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007690:	415b      	adcs	r3, r3
 8007692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007694:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007698:	4641      	mov	r1, r8
 800769a:	1851      	adds	r1, r2, r1
 800769c:	6339      	str	r1, [r7, #48]	@ 0x30
 800769e:	4649      	mov	r1, r9
 80076a0:	414b      	adcs	r3, r1
 80076a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80076a4:	f04f 0200 	mov.w	r2, #0
 80076a8:	f04f 0300 	mov.w	r3, #0
 80076ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80076b0:	4659      	mov	r1, fp
 80076b2:	00cb      	lsls	r3, r1, #3
 80076b4:	4651      	mov	r1, sl
 80076b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076ba:	4651      	mov	r1, sl
 80076bc:	00ca      	lsls	r2, r1, #3
 80076be:	4610      	mov	r0, r2
 80076c0:	4619      	mov	r1, r3
 80076c2:	4603      	mov	r3, r0
 80076c4:	4642      	mov	r2, r8
 80076c6:	189b      	adds	r3, r3, r2
 80076c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076cc:	464b      	mov	r3, r9
 80076ce:	460a      	mov	r2, r1
 80076d0:	eb42 0303 	adc.w	r3, r2, r3
 80076d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80076e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80076e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80076ec:	460b      	mov	r3, r1
 80076ee:	18db      	adds	r3, r3, r3
 80076f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076f2:	4613      	mov	r3, r2
 80076f4:	eb42 0303 	adc.w	r3, r2, r3
 80076f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80076fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007702:	f7f9 fa45 	bl	8000b90 <__aeabi_uldivmod>
 8007706:	4602      	mov	r2, r0
 8007708:	460b      	mov	r3, r1
 800770a:	4b0d      	ldr	r3, [pc, #52]	@ (8007740 <UART_SetConfig+0x2d4>)
 800770c:	fba3 1302 	umull	r1, r3, r3, r2
 8007710:	095b      	lsrs	r3, r3, #5
 8007712:	2164      	movs	r1, #100	@ 0x64
 8007714:	fb01 f303 	mul.w	r3, r1, r3
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	00db      	lsls	r3, r3, #3
 800771c:	3332      	adds	r3, #50	@ 0x32
 800771e:	4a08      	ldr	r2, [pc, #32]	@ (8007740 <UART_SetConfig+0x2d4>)
 8007720:	fba2 2303 	umull	r2, r3, r2, r3
 8007724:	095b      	lsrs	r3, r3, #5
 8007726:	f003 0207 	and.w	r2, r3, #7
 800772a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4422      	add	r2, r4
 8007732:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007734:	e106      	b.n	8007944 <UART_SetConfig+0x4d8>
 8007736:	bf00      	nop
 8007738:	40011000 	.word	0x40011000
 800773c:	40011400 	.word	0x40011400
 8007740:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007744:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007748:	2200      	movs	r2, #0
 800774a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800774e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007752:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007756:	4642      	mov	r2, r8
 8007758:	464b      	mov	r3, r9
 800775a:	1891      	adds	r1, r2, r2
 800775c:	6239      	str	r1, [r7, #32]
 800775e:	415b      	adcs	r3, r3
 8007760:	627b      	str	r3, [r7, #36]	@ 0x24
 8007762:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007766:	4641      	mov	r1, r8
 8007768:	1854      	adds	r4, r2, r1
 800776a:	4649      	mov	r1, r9
 800776c:	eb43 0501 	adc.w	r5, r3, r1
 8007770:	f04f 0200 	mov.w	r2, #0
 8007774:	f04f 0300 	mov.w	r3, #0
 8007778:	00eb      	lsls	r3, r5, #3
 800777a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800777e:	00e2      	lsls	r2, r4, #3
 8007780:	4614      	mov	r4, r2
 8007782:	461d      	mov	r5, r3
 8007784:	4643      	mov	r3, r8
 8007786:	18e3      	adds	r3, r4, r3
 8007788:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800778c:	464b      	mov	r3, r9
 800778e:	eb45 0303 	adc.w	r3, r5, r3
 8007792:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80077a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80077a6:	f04f 0200 	mov.w	r2, #0
 80077aa:	f04f 0300 	mov.w	r3, #0
 80077ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80077b2:	4629      	mov	r1, r5
 80077b4:	008b      	lsls	r3, r1, #2
 80077b6:	4621      	mov	r1, r4
 80077b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077bc:	4621      	mov	r1, r4
 80077be:	008a      	lsls	r2, r1, #2
 80077c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80077c4:	f7f9 f9e4 	bl	8000b90 <__aeabi_uldivmod>
 80077c8:	4602      	mov	r2, r0
 80077ca:	460b      	mov	r3, r1
 80077cc:	4b60      	ldr	r3, [pc, #384]	@ (8007950 <UART_SetConfig+0x4e4>)
 80077ce:	fba3 2302 	umull	r2, r3, r3, r2
 80077d2:	095b      	lsrs	r3, r3, #5
 80077d4:	011c      	lsls	r4, r3, #4
 80077d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077da:	2200      	movs	r2, #0
 80077dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80077e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80077e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80077e8:	4642      	mov	r2, r8
 80077ea:	464b      	mov	r3, r9
 80077ec:	1891      	adds	r1, r2, r2
 80077ee:	61b9      	str	r1, [r7, #24]
 80077f0:	415b      	adcs	r3, r3
 80077f2:	61fb      	str	r3, [r7, #28]
 80077f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077f8:	4641      	mov	r1, r8
 80077fa:	1851      	adds	r1, r2, r1
 80077fc:	6139      	str	r1, [r7, #16]
 80077fe:	4649      	mov	r1, r9
 8007800:	414b      	adcs	r3, r1
 8007802:	617b      	str	r3, [r7, #20]
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	f04f 0300 	mov.w	r3, #0
 800780c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007810:	4659      	mov	r1, fp
 8007812:	00cb      	lsls	r3, r1, #3
 8007814:	4651      	mov	r1, sl
 8007816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800781a:	4651      	mov	r1, sl
 800781c:	00ca      	lsls	r2, r1, #3
 800781e:	4610      	mov	r0, r2
 8007820:	4619      	mov	r1, r3
 8007822:	4603      	mov	r3, r0
 8007824:	4642      	mov	r2, r8
 8007826:	189b      	adds	r3, r3, r2
 8007828:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800782c:	464b      	mov	r3, r9
 800782e:	460a      	mov	r2, r1
 8007830:	eb42 0303 	adc.w	r3, r2, r3
 8007834:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007842:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007844:	f04f 0200 	mov.w	r2, #0
 8007848:	f04f 0300 	mov.w	r3, #0
 800784c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007850:	4649      	mov	r1, r9
 8007852:	008b      	lsls	r3, r1, #2
 8007854:	4641      	mov	r1, r8
 8007856:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800785a:	4641      	mov	r1, r8
 800785c:	008a      	lsls	r2, r1, #2
 800785e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007862:	f7f9 f995 	bl	8000b90 <__aeabi_uldivmod>
 8007866:	4602      	mov	r2, r0
 8007868:	460b      	mov	r3, r1
 800786a:	4611      	mov	r1, r2
 800786c:	4b38      	ldr	r3, [pc, #224]	@ (8007950 <UART_SetConfig+0x4e4>)
 800786e:	fba3 2301 	umull	r2, r3, r3, r1
 8007872:	095b      	lsrs	r3, r3, #5
 8007874:	2264      	movs	r2, #100	@ 0x64
 8007876:	fb02 f303 	mul.w	r3, r2, r3
 800787a:	1acb      	subs	r3, r1, r3
 800787c:	011b      	lsls	r3, r3, #4
 800787e:	3332      	adds	r3, #50	@ 0x32
 8007880:	4a33      	ldr	r2, [pc, #204]	@ (8007950 <UART_SetConfig+0x4e4>)
 8007882:	fba2 2303 	umull	r2, r3, r2, r3
 8007886:	095b      	lsrs	r3, r3, #5
 8007888:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800788c:	441c      	add	r4, r3
 800788e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007892:	2200      	movs	r2, #0
 8007894:	673b      	str	r3, [r7, #112]	@ 0x70
 8007896:	677a      	str	r2, [r7, #116]	@ 0x74
 8007898:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800789c:	4642      	mov	r2, r8
 800789e:	464b      	mov	r3, r9
 80078a0:	1891      	adds	r1, r2, r2
 80078a2:	60b9      	str	r1, [r7, #8]
 80078a4:	415b      	adcs	r3, r3
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078ac:	4641      	mov	r1, r8
 80078ae:	1851      	adds	r1, r2, r1
 80078b0:	6039      	str	r1, [r7, #0]
 80078b2:	4649      	mov	r1, r9
 80078b4:	414b      	adcs	r3, r1
 80078b6:	607b      	str	r3, [r7, #4]
 80078b8:	f04f 0200 	mov.w	r2, #0
 80078bc:	f04f 0300 	mov.w	r3, #0
 80078c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80078c4:	4659      	mov	r1, fp
 80078c6:	00cb      	lsls	r3, r1, #3
 80078c8:	4651      	mov	r1, sl
 80078ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078ce:	4651      	mov	r1, sl
 80078d0:	00ca      	lsls	r2, r1, #3
 80078d2:	4610      	mov	r0, r2
 80078d4:	4619      	mov	r1, r3
 80078d6:	4603      	mov	r3, r0
 80078d8:	4642      	mov	r2, r8
 80078da:	189b      	adds	r3, r3, r2
 80078dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80078de:	464b      	mov	r3, r9
 80078e0:	460a      	mov	r2, r1
 80078e2:	eb42 0303 	adc.w	r3, r2, r3
 80078e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80078e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80078f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80078f4:	f04f 0200 	mov.w	r2, #0
 80078f8:	f04f 0300 	mov.w	r3, #0
 80078fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007900:	4649      	mov	r1, r9
 8007902:	008b      	lsls	r3, r1, #2
 8007904:	4641      	mov	r1, r8
 8007906:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800790a:	4641      	mov	r1, r8
 800790c:	008a      	lsls	r2, r1, #2
 800790e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007912:	f7f9 f93d 	bl	8000b90 <__aeabi_uldivmod>
 8007916:	4602      	mov	r2, r0
 8007918:	460b      	mov	r3, r1
 800791a:	4b0d      	ldr	r3, [pc, #52]	@ (8007950 <UART_SetConfig+0x4e4>)
 800791c:	fba3 1302 	umull	r1, r3, r3, r2
 8007920:	095b      	lsrs	r3, r3, #5
 8007922:	2164      	movs	r1, #100	@ 0x64
 8007924:	fb01 f303 	mul.w	r3, r1, r3
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	011b      	lsls	r3, r3, #4
 800792c:	3332      	adds	r3, #50	@ 0x32
 800792e:	4a08      	ldr	r2, [pc, #32]	@ (8007950 <UART_SetConfig+0x4e4>)
 8007930:	fba2 2303 	umull	r2, r3, r2, r3
 8007934:	095b      	lsrs	r3, r3, #5
 8007936:	f003 020f 	and.w	r2, r3, #15
 800793a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4422      	add	r2, r4
 8007942:	609a      	str	r2, [r3, #8]
}
 8007944:	bf00      	nop
 8007946:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800794a:	46bd      	mov	sp, r7
 800794c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007950:	51eb851f 	.word	0x51eb851f

08007954 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007954:	b084      	sub	sp, #16
 8007956:	b580      	push	{r7, lr}
 8007958:	b084      	sub	sp, #16
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	f107 001c 	add.w	r0, r7, #28
 8007962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007966:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800796a:	2b01      	cmp	r3, #1
 800796c:	d123      	bne.n	80079b6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007972:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007982:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007996:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800799a:	2b01      	cmp	r3, #1
 800799c:	d105      	bne.n	80079aa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68db      	ldr	r3, [r3, #12]
 80079a2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f001 fae8 	bl	8008f80 <USB_CoreReset>
 80079b0:	4603      	mov	r3, r0
 80079b2:	73fb      	strb	r3, [r7, #15]
 80079b4:	e01b      	b.n	80079ee <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f001 fadc 	bl	8008f80 <USB_CoreReset>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80079cc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d106      	bne.n	80079e2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	639a      	str	r2, [r3, #56]	@ 0x38
 80079e0:	e005      	b.n	80079ee <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80079ee:	7fbb      	ldrb	r3, [r7, #30]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d10b      	bne.n	8007a0c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f043 0206 	orr.w	r2, r3, #6
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f043 0220 	orr.w	r2, r3, #32
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a18:	b004      	add	sp, #16
 8007a1a:	4770      	bx	lr

08007a1c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	4613      	mov	r3, r2
 8007a28:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007a2a:	79fb      	ldrb	r3, [r7, #7]
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d165      	bne.n	8007afc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	4a41      	ldr	r2, [pc, #260]	@ (8007b38 <USB_SetTurnaroundTime+0x11c>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d906      	bls.n	8007a46 <USB_SetTurnaroundTime+0x2a>
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	4a40      	ldr	r2, [pc, #256]	@ (8007b3c <USB_SetTurnaroundTime+0x120>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d202      	bcs.n	8007a46 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007a40:	230f      	movs	r3, #15
 8007a42:	617b      	str	r3, [r7, #20]
 8007a44:	e062      	b.n	8007b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	4a3c      	ldr	r2, [pc, #240]	@ (8007b3c <USB_SetTurnaroundTime+0x120>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d306      	bcc.n	8007a5c <USB_SetTurnaroundTime+0x40>
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	4a3b      	ldr	r2, [pc, #236]	@ (8007b40 <USB_SetTurnaroundTime+0x124>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d202      	bcs.n	8007a5c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007a56:	230e      	movs	r3, #14
 8007a58:	617b      	str	r3, [r7, #20]
 8007a5a:	e057      	b.n	8007b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	4a38      	ldr	r2, [pc, #224]	@ (8007b40 <USB_SetTurnaroundTime+0x124>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d306      	bcc.n	8007a72 <USB_SetTurnaroundTime+0x56>
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	4a37      	ldr	r2, [pc, #220]	@ (8007b44 <USB_SetTurnaroundTime+0x128>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d202      	bcs.n	8007a72 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007a6c:	230d      	movs	r3, #13
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	e04c      	b.n	8007b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	4a33      	ldr	r2, [pc, #204]	@ (8007b44 <USB_SetTurnaroundTime+0x128>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d306      	bcc.n	8007a88 <USB_SetTurnaroundTime+0x6c>
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	4a32      	ldr	r2, [pc, #200]	@ (8007b48 <USB_SetTurnaroundTime+0x12c>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d802      	bhi.n	8007a88 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007a82:	230c      	movs	r3, #12
 8007a84:	617b      	str	r3, [r7, #20]
 8007a86:	e041      	b.n	8007b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	4a2f      	ldr	r2, [pc, #188]	@ (8007b48 <USB_SetTurnaroundTime+0x12c>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d906      	bls.n	8007a9e <USB_SetTurnaroundTime+0x82>
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	4a2e      	ldr	r2, [pc, #184]	@ (8007b4c <USB_SetTurnaroundTime+0x130>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d802      	bhi.n	8007a9e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007a98:	230b      	movs	r3, #11
 8007a9a:	617b      	str	r3, [r7, #20]
 8007a9c:	e036      	b.n	8007b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	4a2a      	ldr	r2, [pc, #168]	@ (8007b4c <USB_SetTurnaroundTime+0x130>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d906      	bls.n	8007ab4 <USB_SetTurnaroundTime+0x98>
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	4a29      	ldr	r2, [pc, #164]	@ (8007b50 <USB_SetTurnaroundTime+0x134>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d802      	bhi.n	8007ab4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007aae:	230a      	movs	r3, #10
 8007ab0:	617b      	str	r3, [r7, #20]
 8007ab2:	e02b      	b.n	8007b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	4a26      	ldr	r2, [pc, #152]	@ (8007b50 <USB_SetTurnaroundTime+0x134>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d906      	bls.n	8007aca <USB_SetTurnaroundTime+0xae>
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	4a25      	ldr	r2, [pc, #148]	@ (8007b54 <USB_SetTurnaroundTime+0x138>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d202      	bcs.n	8007aca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007ac4:	2309      	movs	r3, #9
 8007ac6:	617b      	str	r3, [r7, #20]
 8007ac8:	e020      	b.n	8007b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	4a21      	ldr	r2, [pc, #132]	@ (8007b54 <USB_SetTurnaroundTime+0x138>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d306      	bcc.n	8007ae0 <USB_SetTurnaroundTime+0xc4>
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	4a20      	ldr	r2, [pc, #128]	@ (8007b58 <USB_SetTurnaroundTime+0x13c>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d802      	bhi.n	8007ae0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007ada:	2308      	movs	r3, #8
 8007adc:	617b      	str	r3, [r7, #20]
 8007ade:	e015      	b.n	8007b0c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	4a1d      	ldr	r2, [pc, #116]	@ (8007b58 <USB_SetTurnaroundTime+0x13c>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d906      	bls.n	8007af6 <USB_SetTurnaroundTime+0xda>
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	4a1c      	ldr	r2, [pc, #112]	@ (8007b5c <USB_SetTurnaroundTime+0x140>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d202      	bcs.n	8007af6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007af0:	2307      	movs	r3, #7
 8007af2:	617b      	str	r3, [r7, #20]
 8007af4:	e00a      	b.n	8007b0c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007af6:	2306      	movs	r3, #6
 8007af8:	617b      	str	r3, [r7, #20]
 8007afa:	e007      	b.n	8007b0c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007afc:	79fb      	ldrb	r3, [r7, #7]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d102      	bne.n	8007b08 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007b02:	2309      	movs	r3, #9
 8007b04:	617b      	str	r3, [r7, #20]
 8007b06:	e001      	b.n	8007b0c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007b08:	2309      	movs	r3, #9
 8007b0a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	68da      	ldr	r2, [r3, #12]
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	029b      	lsls	r3, r3, #10
 8007b20:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007b24:	431a      	orrs	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	371c      	adds	r7, #28
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	00d8acbf 	.word	0x00d8acbf
 8007b3c:	00e4e1c0 	.word	0x00e4e1c0
 8007b40:	00f42400 	.word	0x00f42400
 8007b44:	01067380 	.word	0x01067380
 8007b48:	011a499f 	.word	0x011a499f
 8007b4c:	01312cff 	.word	0x01312cff
 8007b50:	014ca43f 	.word	0x014ca43f
 8007b54:	016e3600 	.word	0x016e3600
 8007b58:	01a6ab1f 	.word	0x01a6ab1f
 8007b5c:	01e84800 	.word	0x01e84800

08007b60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f043 0201 	orr.w	r2, r3, #1
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b82:	b480      	push	{r7}
 8007b84:	b083      	sub	sp, #12
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	f023 0201 	bic.w	r2, r3, #1
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	370c      	adds	r7, #12
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	460b      	mov	r3, r1
 8007bae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007bc0:	78fb      	ldrb	r3, [r7, #3]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d115      	bne.n	8007bf2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007bd2:	200a      	movs	r0, #10
 8007bd4:	f7fb f81a 	bl	8002c0c <HAL_Delay>
      ms += 10U;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	330a      	adds	r3, #10
 8007bdc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f001 f93f 	bl	8008e62 <USB_GetMode>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d01e      	beq.n	8007c28 <USB_SetCurrentMode+0x84>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2bc7      	cmp	r3, #199	@ 0xc7
 8007bee:	d9f0      	bls.n	8007bd2 <USB_SetCurrentMode+0x2e>
 8007bf0:	e01a      	b.n	8007c28 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007bf2:	78fb      	ldrb	r3, [r7, #3]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d115      	bne.n	8007c24 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007c04:	200a      	movs	r0, #10
 8007c06:	f7fb f801 	bl	8002c0c <HAL_Delay>
      ms += 10U;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	330a      	adds	r3, #10
 8007c0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f001 f926 	bl	8008e62 <USB_GetMode>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d005      	beq.n	8007c28 <USB_SetCurrentMode+0x84>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007c20:	d9f0      	bls.n	8007c04 <USB_SetCurrentMode+0x60>
 8007c22:	e001      	b.n	8007c28 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e005      	b.n	8007c34 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2bc8      	cmp	r3, #200	@ 0xc8
 8007c2c:	d101      	bne.n	8007c32 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e000      	b.n	8007c34 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3710      	adds	r7, #16
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007c3c:	b084      	sub	sp, #16
 8007c3e:	b580      	push	{r7, lr}
 8007c40:	b086      	sub	sp, #24
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007c56:	2300      	movs	r3, #0
 8007c58:	613b      	str	r3, [r7, #16]
 8007c5a:	e009      	b.n	8007c70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	3340      	adds	r3, #64	@ 0x40
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	2200      	movs	r2, #0
 8007c68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	613b      	str	r3, [r7, #16]
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	2b0e      	cmp	r3, #14
 8007c74:	d9f2      	bls.n	8007c5c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007c76:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d11c      	bne.n	8007cb8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c8c:	f043 0302 	orr.w	r3, r3, #2
 8007c90:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c96:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cae:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	639a      	str	r2, [r3, #56]	@ 0x38
 8007cb6:	e00b      	b.n	8007cd0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cbc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	2300      	movs	r3, #0
 8007cda:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007cdc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d10d      	bne.n	8007d00 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d104      	bne.n	8007cf6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007cec:	2100      	movs	r1, #0
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f968 	bl	8007fc4 <USB_SetDevSpeed>
 8007cf4:	e008      	b.n	8007d08 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f963 	bl	8007fc4 <USB_SetDevSpeed>
 8007cfe:	e003      	b.n	8007d08 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007d00:	2103      	movs	r1, #3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f95e 	bl	8007fc4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d08:	2110      	movs	r1, #16
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f8fa 	bl	8007f04 <USB_FlushTxFifo>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007d16:	2301      	movs	r3, #1
 8007d18:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f924 	bl	8007f68 <USB_FlushRxFifo>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d30:	461a      	mov	r2, r3
 8007d32:	2300      	movs	r3, #0
 8007d34:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	2300      	movs	r3, #0
 8007d40:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d48:	461a      	mov	r2, r3
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d4e:	2300      	movs	r3, #0
 8007d50:	613b      	str	r3, [r7, #16]
 8007d52:	e043      	b.n	8007ddc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	015a      	lsls	r2, r3, #5
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d6a:	d118      	bne.n	8007d9e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10a      	bne.n	8007d88 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	015a      	lsls	r2, r3, #5
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	4413      	add	r3, r2
 8007d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d7e:	461a      	mov	r2, r3
 8007d80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	e013      	b.n	8007db0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	015a      	lsls	r2, r3, #5
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4413      	add	r3, r2
 8007d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d94:	461a      	mov	r2, r3
 8007d96:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007d9a:	6013      	str	r3, [r2, #0]
 8007d9c:	e008      	b.n	8007db0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	015a      	lsls	r2, r3, #5
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	4413      	add	r3, r2
 8007da6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007daa:	461a      	mov	r2, r3
 8007dac:	2300      	movs	r3, #0
 8007dae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	015a      	lsls	r2, r3, #5
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	015a      	lsls	r2, r3, #5
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	4413      	add	r3, r2
 8007dca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dce:	461a      	mov	r2, r3
 8007dd0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007dd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	613b      	str	r3, [r7, #16]
 8007ddc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007de0:	461a      	mov	r2, r3
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d3b5      	bcc.n	8007d54 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007de8:	2300      	movs	r3, #0
 8007dea:	613b      	str	r3, [r7, #16]
 8007dec:	e043      	b.n	8007e76 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e04:	d118      	bne.n	8007e38 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10a      	bne.n	8007e22 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	015a      	lsls	r2, r3, #5
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	4413      	add	r3, r2
 8007e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e18:	461a      	mov	r2, r3
 8007e1a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007e1e:	6013      	str	r3, [r2, #0]
 8007e20:	e013      	b.n	8007e4a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e2e:	461a      	mov	r2, r3
 8007e30:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007e34:	6013      	str	r3, [r2, #0]
 8007e36:	e008      	b.n	8007e4a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	015a      	lsls	r2, r3, #5
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4413      	add	r3, r2
 8007e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e44:	461a      	mov	r2, r3
 8007e46:	2300      	movs	r3, #0
 8007e48:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	015a      	lsls	r2, r3, #5
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	4413      	add	r3, r2
 8007e52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e56:	461a      	mov	r2, r3
 8007e58:	2300      	movs	r3, #0
 8007e5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e68:	461a      	mov	r2, r3
 8007e6a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007e6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	3301      	adds	r3, #1
 8007e74:	613b      	str	r3, [r7, #16]
 8007e76:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d3b5      	bcc.n	8007dee <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e94:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007ea2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ea4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d105      	bne.n	8007eb8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	f043 0210 	orr.w	r2, r3, #16
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	699a      	ldr	r2, [r3, #24]
 8007ebc:	4b10      	ldr	r3, [pc, #64]	@ (8007f00 <USB_DevInit+0x2c4>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ec4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d005      	beq.n	8007ed8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	f043 0208 	orr.w	r2, r3, #8
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007ed8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d107      	bne.n	8007ef0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ee8:	f043 0304 	orr.w	r3, r3, #4
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3718      	adds	r7, #24
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007efc:	b004      	add	sp, #16
 8007efe:	4770      	bx	lr
 8007f00:	803c3800 	.word	0x803c3800

08007f04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	3301      	adds	r3, #1
 8007f16:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f1e:	d901      	bls.n	8007f24 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e01b      	b.n	8007f5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	daf2      	bge.n	8007f12 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	019b      	lsls	r3, r3, #6
 8007f34:	f043 0220 	orr.w	r2, r3, #32
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f48:	d901      	bls.n	8007f4e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e006      	b.n	8007f5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b20      	cmp	r3, #32
 8007f58:	d0f0      	beq.n	8007f3c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f70:	2300      	movs	r3, #0
 8007f72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	3301      	adds	r3, #1
 8007f78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f80:	d901      	bls.n	8007f86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e018      	b.n	8007fb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	daf2      	bge.n	8007f74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2210      	movs	r2, #16
 8007f96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fa4:	d901      	bls.n	8007faa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007fa6:	2303      	movs	r3, #3
 8007fa8:	e006      	b.n	8007fb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	f003 0310 	and.w	r3, r3, #16
 8007fb2:	2b10      	cmp	r3, #16
 8007fb4:	d0f0      	beq.n	8007f98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	78fb      	ldrb	r3, [r7, #3]
 8007fde:	68f9      	ldr	r1, [r7, #12]
 8007fe0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3714      	adds	r7, #20
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b087      	sub	sp, #28
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f003 0306 	and.w	r3, r3, #6
 800800e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d102      	bne.n	800801c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008016:	2300      	movs	r3, #0
 8008018:	75fb      	strb	r3, [r7, #23]
 800801a:	e00a      	b.n	8008032 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2b02      	cmp	r3, #2
 8008020:	d002      	beq.n	8008028 <USB_GetDevSpeed+0x32>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2b06      	cmp	r3, #6
 8008026:	d102      	bne.n	800802e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008028:	2302      	movs	r3, #2
 800802a:	75fb      	strb	r3, [r7, #23]
 800802c:	e001      	b.n	8008032 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800802e:	230f      	movs	r3, #15
 8008030:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008032:	7dfb      	ldrb	r3, [r7, #23]
}
 8008034:	4618      	mov	r0, r3
 8008036:	371c      	adds	r7, #28
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	785b      	ldrb	r3, [r3, #1]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d13a      	bne.n	80080d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008062:	69da      	ldr	r2, [r3, #28]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	f003 030f 	and.w	r3, r3, #15
 800806c:	2101      	movs	r1, #1
 800806e:	fa01 f303 	lsl.w	r3, r1, r3
 8008072:	b29b      	uxth	r3, r3
 8008074:	68f9      	ldr	r1, [r7, #12]
 8008076:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800807a:	4313      	orrs	r3, r2
 800807c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	015a      	lsls	r2, r3, #5
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4413      	add	r3, r2
 8008086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d155      	bne.n	8008140 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	015a      	lsls	r2, r3, #5
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4413      	add	r3, r2
 800809c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	791b      	ldrb	r3, [r3, #4]
 80080ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80080b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	059b      	lsls	r3, r3, #22
 80080b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80080b8:	4313      	orrs	r3, r2
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	0151      	lsls	r1, r2, #5
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	440a      	add	r2, r1
 80080c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080ce:	6013      	str	r3, [r2, #0]
 80080d0:	e036      	b.n	8008140 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080d8:	69da      	ldr	r2, [r3, #28]
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	f003 030f 	and.w	r3, r3, #15
 80080e2:	2101      	movs	r1, #1
 80080e4:	fa01 f303 	lsl.w	r3, r1, r3
 80080e8:	041b      	lsls	r3, r3, #16
 80080ea:	68f9      	ldr	r1, [r7, #12]
 80080ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080f0:	4313      	orrs	r3, r2
 80080f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	015a      	lsls	r2, r3, #5
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4413      	add	r3, r2
 80080fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008106:	2b00      	cmp	r3, #0
 8008108:	d11a      	bne.n	8008140 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	4413      	add	r3, r2
 8008112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	791b      	ldrb	r3, [r3, #4]
 8008124:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008126:	430b      	orrs	r3, r1
 8008128:	4313      	orrs	r3, r2
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	0151      	lsls	r1, r2, #5
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	440a      	add	r2, r1
 8008132:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800813a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800813e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
	...

08008150 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	785b      	ldrb	r3, [r3, #1]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d161      	bne.n	8008230 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	015a      	lsls	r2, r3, #5
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4413      	add	r3, r2
 8008174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800817e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008182:	d11f      	bne.n	80081c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	015a      	lsls	r2, r3, #5
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	4413      	add	r3, r2
 800818c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68ba      	ldr	r2, [r7, #8]
 8008194:	0151      	lsls	r1, r2, #5
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	440a      	add	r2, r1
 800819a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800819e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80081a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	0151      	lsls	r1, r2, #5
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	440a      	add	r2, r1
 80081ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80081be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	f003 030f 	and.w	r3, r3, #15
 80081d4:	2101      	movs	r1, #1
 80081d6:	fa01 f303 	lsl.w	r3, r1, r3
 80081da:	b29b      	uxth	r3, r3
 80081dc:	43db      	mvns	r3, r3
 80081de:	68f9      	ldr	r1, [r7, #12]
 80081e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081e4:	4013      	ands	r3, r2
 80081e6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081ee:	69da      	ldr	r2, [r3, #28]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	f003 030f 	and.w	r3, r3, #15
 80081f8:	2101      	movs	r1, #1
 80081fa:	fa01 f303 	lsl.w	r3, r1, r3
 80081fe:	b29b      	uxth	r3, r3
 8008200:	43db      	mvns	r3, r3
 8008202:	68f9      	ldr	r1, [r7, #12]
 8008204:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008208:	4013      	ands	r3, r2
 800820a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	015a      	lsls	r2, r3, #5
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	4413      	add	r3, r2
 8008214:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	0159      	lsls	r1, r3, #5
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	440b      	add	r3, r1
 8008222:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008226:	4619      	mov	r1, r3
 8008228:	4b35      	ldr	r3, [pc, #212]	@ (8008300 <USB_DeactivateEndpoint+0x1b0>)
 800822a:	4013      	ands	r3, r2
 800822c:	600b      	str	r3, [r1, #0]
 800822e:	e060      	b.n	80082f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	015a      	lsls	r2, r3, #5
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	4413      	add	r3, r2
 8008238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008242:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008246:	d11f      	bne.n	8008288 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	015a      	lsls	r2, r3, #5
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	4413      	add	r3, r2
 8008250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	0151      	lsls	r1, r2, #5
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	440a      	add	r2, r1
 800825e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008262:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008266:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	015a      	lsls	r2, r3, #5
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	4413      	add	r3, r2
 8008270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	0151      	lsls	r1, r2, #5
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	440a      	add	r2, r1
 800827e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008282:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008286:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800828e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	f003 030f 	and.w	r3, r3, #15
 8008298:	2101      	movs	r1, #1
 800829a:	fa01 f303 	lsl.w	r3, r1, r3
 800829e:	041b      	lsls	r3, r3, #16
 80082a0:	43db      	mvns	r3, r3
 80082a2:	68f9      	ldr	r1, [r7, #12]
 80082a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80082a8:	4013      	ands	r3, r2
 80082aa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082b2:	69da      	ldr	r2, [r3, #28]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	f003 030f 	and.w	r3, r3, #15
 80082bc:	2101      	movs	r1, #1
 80082be:	fa01 f303 	lsl.w	r3, r1, r3
 80082c2:	041b      	lsls	r3, r3, #16
 80082c4:	43db      	mvns	r3, r3
 80082c6:	68f9      	ldr	r1, [r7, #12]
 80082c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80082cc:	4013      	ands	r3, r2
 80082ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	015a      	lsls	r2, r3, #5
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	4413      	add	r3, r2
 80082d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	0159      	lsls	r1, r3, #5
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	440b      	add	r3, r1
 80082e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082ea:	4619      	mov	r1, r3
 80082ec:	4b05      	ldr	r3, [pc, #20]	@ (8008304 <USB_DeactivateEndpoint+0x1b4>)
 80082ee:	4013      	ands	r3, r2
 80082f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr
 8008300:	ec337800 	.word	0xec337800
 8008304:	eff37800 	.word	0xeff37800

08008308 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b08a      	sub	sp, #40	@ 0x28
 800830c:	af02      	add	r7, sp, #8
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	4613      	mov	r3, r2
 8008314:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	785b      	ldrb	r3, [r3, #1]
 8008324:	2b01      	cmp	r3, #1
 8008326:	f040 817f 	bne.w	8008628 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d132      	bne.n	8008398 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008332:	69bb      	ldr	r3, [r7, #24]
 8008334:	015a      	lsls	r2, r3, #5
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	4413      	add	r3, r2
 800833a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	69ba      	ldr	r2, [r7, #24]
 8008342:	0151      	lsls	r1, r2, #5
 8008344:	69fa      	ldr	r2, [r7, #28]
 8008346:	440a      	add	r2, r1
 8008348:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800834c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008350:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008354:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	015a      	lsls	r2, r3, #5
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	4413      	add	r3, r2
 800835e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008362:	691b      	ldr	r3, [r3, #16]
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	0151      	lsls	r1, r2, #5
 8008368:	69fa      	ldr	r2, [r7, #28]
 800836a:	440a      	add	r2, r1
 800836c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008370:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008374:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	015a      	lsls	r2, r3, #5
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	4413      	add	r3, r2
 800837e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	69ba      	ldr	r2, [r7, #24]
 8008386:	0151      	lsls	r1, r2, #5
 8008388:	69fa      	ldr	r2, [r7, #28]
 800838a:	440a      	add	r2, r1
 800838c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008390:	0cdb      	lsrs	r3, r3, #19
 8008392:	04db      	lsls	r3, r3, #19
 8008394:	6113      	str	r3, [r2, #16]
 8008396:	e097      	b.n	80084c8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	015a      	lsls	r2, r3, #5
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	69ba      	ldr	r2, [r7, #24]
 80083a8:	0151      	lsls	r1, r2, #5
 80083aa:	69fa      	ldr	r2, [r7, #28]
 80083ac:	440a      	add	r2, r1
 80083ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083b2:	0cdb      	lsrs	r3, r3, #19
 80083b4:	04db      	lsls	r3, r3, #19
 80083b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	015a      	lsls	r2, r3, #5
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	4413      	add	r3, r2
 80083c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	69ba      	ldr	r2, [r7, #24]
 80083c8:	0151      	lsls	r1, r2, #5
 80083ca:	69fa      	ldr	r2, [r7, #28]
 80083cc:	440a      	add	r2, r1
 80083ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083d2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80083d6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80083da:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d11a      	bne.n	8008418 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	691a      	ldr	r2, [r3, #16]
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d903      	bls.n	80083f6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	689a      	ldr	r2, [r3, #8]
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	015a      	lsls	r2, r3, #5
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	4413      	add	r3, r2
 80083fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	69ba      	ldr	r2, [r7, #24]
 8008406:	0151      	lsls	r1, r2, #5
 8008408:	69fa      	ldr	r2, [r7, #28]
 800840a:	440a      	add	r2, r1
 800840c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008410:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008414:	6113      	str	r3, [r2, #16]
 8008416:	e044      	b.n	80084a2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	691a      	ldr	r2, [r3, #16]
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	4413      	add	r3, r2
 8008422:	1e5a      	subs	r2, r3, #1
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	fbb2 f3f3 	udiv	r3, r2, r3
 800842c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	4413      	add	r3, r2
 8008436:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800843a:	691a      	ldr	r2, [r3, #16]
 800843c:	8afb      	ldrh	r3, [r7, #22]
 800843e:	04d9      	lsls	r1, r3, #19
 8008440:	4ba4      	ldr	r3, [pc, #656]	@ (80086d4 <USB_EPStartXfer+0x3cc>)
 8008442:	400b      	ands	r3, r1
 8008444:	69b9      	ldr	r1, [r7, #24]
 8008446:	0148      	lsls	r0, r1, #5
 8008448:	69f9      	ldr	r1, [r7, #28]
 800844a:	4401      	add	r1, r0
 800844c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008450:	4313      	orrs	r3, r2
 8008452:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	791b      	ldrb	r3, [r3, #4]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d122      	bne.n	80084a2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	015a      	lsls	r2, r3, #5
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	4413      	add	r3, r2
 8008464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	69ba      	ldr	r2, [r7, #24]
 800846c:	0151      	lsls	r1, r2, #5
 800846e:	69fa      	ldr	r2, [r7, #28]
 8008470:	440a      	add	r2, r1
 8008472:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008476:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800847a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008488:	691a      	ldr	r2, [r3, #16]
 800848a:	8afb      	ldrh	r3, [r7, #22]
 800848c:	075b      	lsls	r3, r3, #29
 800848e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008492:	69b9      	ldr	r1, [r7, #24]
 8008494:	0148      	lsls	r0, r1, #5
 8008496:	69f9      	ldr	r1, [r7, #28]
 8008498:	4401      	add	r1, r0
 800849a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800849e:	4313      	orrs	r3, r2
 80084a0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	015a      	lsls	r2, r3, #5
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	4413      	add	r3, r2
 80084aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084ae:	691a      	ldr	r2, [r3, #16]
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084b8:	69b9      	ldr	r1, [r7, #24]
 80084ba:	0148      	lsls	r0, r1, #5
 80084bc:	69f9      	ldr	r1, [r7, #28]
 80084be:	4401      	add	r1, r0
 80084c0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80084c4:	4313      	orrs	r3, r2
 80084c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80084c8:	79fb      	ldrb	r3, [r7, #7]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d14b      	bne.n	8008566 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	69db      	ldr	r3, [r3, #28]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d009      	beq.n	80084ea <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	015a      	lsls	r2, r3, #5
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084e2:	461a      	mov	r2, r3
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	791b      	ldrb	r3, [r3, #4]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d128      	bne.n	8008544 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d110      	bne.n	8008524 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	015a      	lsls	r2, r3, #5
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	4413      	add	r3, r2
 800850a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	0151      	lsls	r1, r2, #5
 8008514:	69fa      	ldr	r2, [r7, #28]
 8008516:	440a      	add	r2, r1
 8008518:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800851c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008520:	6013      	str	r3, [r2, #0]
 8008522:	e00f      	b.n	8008544 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	69ba      	ldr	r2, [r7, #24]
 8008534:	0151      	lsls	r1, r2, #5
 8008536:	69fa      	ldr	r2, [r7, #28]
 8008538:	440a      	add	r2, r1
 800853a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800853e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008542:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	4413      	add	r3, r2
 800854c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	69ba      	ldr	r2, [r7, #24]
 8008554:	0151      	lsls	r1, r2, #5
 8008556:	69fa      	ldr	r2, [r7, #28]
 8008558:	440a      	add	r2, r1
 800855a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800855e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	e166      	b.n	8008834 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	015a      	lsls	r2, r3, #5
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	4413      	add	r3, r2
 800856e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	69ba      	ldr	r2, [r7, #24]
 8008576:	0151      	lsls	r1, r2, #5
 8008578:	69fa      	ldr	r2, [r7, #28]
 800857a:	440a      	add	r2, r1
 800857c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008580:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008584:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	791b      	ldrb	r3, [r3, #4]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d015      	beq.n	80085ba <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	2b00      	cmp	r3, #0
 8008594:	f000 814e 	beq.w	8008834 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800859e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	781b      	ldrb	r3, [r3, #0]
 80085a4:	f003 030f 	and.w	r3, r3, #15
 80085a8:	2101      	movs	r1, #1
 80085aa:	fa01 f303 	lsl.w	r3, r1, r3
 80085ae:	69f9      	ldr	r1, [r7, #28]
 80085b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085b4:	4313      	orrs	r3, r2
 80085b6:	634b      	str	r3, [r1, #52]	@ 0x34
 80085b8:	e13c      	b.n	8008834 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d110      	bne.n	80085ec <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	015a      	lsls	r2, r3, #5
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	4413      	add	r3, r2
 80085d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	69ba      	ldr	r2, [r7, #24]
 80085da:	0151      	lsls	r1, r2, #5
 80085dc:	69fa      	ldr	r2, [r7, #28]
 80085de:	440a      	add	r2, r1
 80085e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80085e8:	6013      	str	r3, [r2, #0]
 80085ea:	e00f      	b.n	800860c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	015a      	lsls	r2, r3, #5
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	4413      	add	r3, r2
 80085f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	69ba      	ldr	r2, [r7, #24]
 80085fc:	0151      	lsls	r1, r2, #5
 80085fe:	69fa      	ldr	r2, [r7, #28]
 8008600:	440a      	add	r2, r1
 8008602:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800860a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	68d9      	ldr	r1, [r3, #12]
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	781a      	ldrb	r2, [r3, #0]
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	b298      	uxth	r0, r3
 800861a:	79fb      	ldrb	r3, [r7, #7]
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	4603      	mov	r3, r0
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f000 f9b9 	bl	8008998 <USB_WritePacket>
 8008626:	e105      	b.n	8008834 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	015a      	lsls	r2, r3, #5
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	4413      	add	r3, r2
 8008630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	69ba      	ldr	r2, [r7, #24]
 8008638:	0151      	lsls	r1, r2, #5
 800863a:	69fa      	ldr	r2, [r7, #28]
 800863c:	440a      	add	r2, r1
 800863e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008642:	0cdb      	lsrs	r3, r3, #19
 8008644:	04db      	lsls	r3, r3, #19
 8008646:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	015a      	lsls	r2, r3, #5
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	4413      	add	r3, r2
 8008650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008654:	691b      	ldr	r3, [r3, #16]
 8008656:	69ba      	ldr	r2, [r7, #24]
 8008658:	0151      	lsls	r1, r2, #5
 800865a:	69fa      	ldr	r2, [r7, #28]
 800865c:	440a      	add	r2, r1
 800865e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008662:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008666:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800866a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d132      	bne.n	80086d8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	689a      	ldr	r2, [r3, #8]
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	689a      	ldr	r2, [r3, #8]
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	015a      	lsls	r2, r3, #5
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	4413      	add	r3, r2
 8008692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008696:	691a      	ldr	r2, [r3, #16]
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	6a1b      	ldr	r3, [r3, #32]
 800869c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086a0:	69b9      	ldr	r1, [r7, #24]
 80086a2:	0148      	lsls	r0, r1, #5
 80086a4:	69f9      	ldr	r1, [r7, #28]
 80086a6:	4401      	add	r1, r0
 80086a8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80086ac:	4313      	orrs	r3, r2
 80086ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80086b0:	69bb      	ldr	r3, [r7, #24]
 80086b2:	015a      	lsls	r2, r3, #5
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	4413      	add	r3, r2
 80086b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	0151      	lsls	r1, r2, #5
 80086c2:	69fa      	ldr	r2, [r7, #28]
 80086c4:	440a      	add	r2, r1
 80086c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80086ce:	6113      	str	r3, [r2, #16]
 80086d0:	e062      	b.n	8008798 <USB_EPStartXfer+0x490>
 80086d2:	bf00      	nop
 80086d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d123      	bne.n	8008728 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80086e0:	69bb      	ldr	r3, [r7, #24]
 80086e2:	015a      	lsls	r2, r3, #5
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	4413      	add	r3, r2
 80086e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ec:	691a      	ldr	r2, [r3, #16]
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80086f6:	69b9      	ldr	r1, [r7, #24]
 80086f8:	0148      	lsls	r0, r1, #5
 80086fa:	69f9      	ldr	r1, [r7, #28]
 80086fc:	4401      	add	r1, r0
 80086fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008702:	4313      	orrs	r3, r2
 8008704:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	4413      	add	r3, r2
 800870e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	69ba      	ldr	r2, [r7, #24]
 8008716:	0151      	lsls	r1, r2, #5
 8008718:	69fa      	ldr	r2, [r7, #28]
 800871a:	440a      	add	r2, r1
 800871c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008720:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008724:	6113      	str	r3, [r2, #16]
 8008726:	e037      	b.n	8008798 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	691a      	ldr	r2, [r3, #16]
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	4413      	add	r3, r2
 8008732:	1e5a      	subs	r2, r3, #1
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	fbb2 f3f3 	udiv	r3, r2, r3
 800873c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	8afa      	ldrh	r2, [r7, #22]
 8008744:	fb03 f202 	mul.w	r2, r3, r2
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	015a      	lsls	r2, r3, #5
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	4413      	add	r3, r2
 8008754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008758:	691a      	ldr	r2, [r3, #16]
 800875a:	8afb      	ldrh	r3, [r7, #22]
 800875c:	04d9      	lsls	r1, r3, #19
 800875e:	4b38      	ldr	r3, [pc, #224]	@ (8008840 <USB_EPStartXfer+0x538>)
 8008760:	400b      	ands	r3, r1
 8008762:	69b9      	ldr	r1, [r7, #24]
 8008764:	0148      	lsls	r0, r1, #5
 8008766:	69f9      	ldr	r1, [r7, #28]
 8008768:	4401      	add	r1, r0
 800876a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800876e:	4313      	orrs	r3, r2
 8008770:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	4413      	add	r3, r2
 800877a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800877e:	691a      	ldr	r2, [r3, #16]
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	6a1b      	ldr	r3, [r3, #32]
 8008784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008788:	69b9      	ldr	r1, [r7, #24]
 800878a:	0148      	lsls	r0, r1, #5
 800878c:	69f9      	ldr	r1, [r7, #28]
 800878e:	4401      	add	r1, r0
 8008790:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008794:	4313      	orrs	r3, r2
 8008796:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008798:	79fb      	ldrb	r3, [r7, #7]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d10d      	bne.n	80087ba <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d009      	beq.n	80087ba <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	68d9      	ldr	r1, [r3, #12]
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	015a      	lsls	r2, r3, #5
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	4413      	add	r3, r2
 80087b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087b6:	460a      	mov	r2, r1
 80087b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	791b      	ldrb	r3, [r3, #4]
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d128      	bne.n	8008814 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d110      	bne.n	80087f4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	015a      	lsls	r2, r3, #5
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	4413      	add	r3, r2
 80087da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	69ba      	ldr	r2, [r7, #24]
 80087e2:	0151      	lsls	r1, r2, #5
 80087e4:	69fa      	ldr	r2, [r7, #28]
 80087e6:	440a      	add	r2, r1
 80087e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80087f0:	6013      	str	r3, [r2, #0]
 80087f2:	e00f      	b.n	8008814 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	015a      	lsls	r2, r3, #5
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	4413      	add	r3, r2
 80087fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	69ba      	ldr	r2, [r7, #24]
 8008804:	0151      	lsls	r1, r2, #5
 8008806:	69fa      	ldr	r2, [r7, #28]
 8008808:	440a      	add	r2, r1
 800880a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800880e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008812:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	4413      	add	r3, r2
 800881c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	69ba      	ldr	r2, [r7, #24]
 8008824:	0151      	lsls	r1, r2, #5
 8008826:	69fa      	ldr	r2, [r7, #28]
 8008828:	440a      	add	r2, r1
 800882a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800882e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008832:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3720      	adds	r7, #32
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	1ff80000 	.word	0x1ff80000

08008844 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008844:	b480      	push	{r7}
 8008846:	b087      	sub	sp, #28
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800884e:	2300      	movs	r3, #0
 8008850:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	785b      	ldrb	r3, [r3, #1]
 800885e:	2b01      	cmp	r3, #1
 8008860:	d14a      	bne.n	80088f8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	4413      	add	r3, r2
 800886c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008876:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800887a:	f040 8086 	bne.w	800898a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	4413      	add	r3, r2
 8008888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	683a      	ldr	r2, [r7, #0]
 8008890:	7812      	ldrb	r2, [r2, #0]
 8008892:	0151      	lsls	r1, r2, #5
 8008894:	693a      	ldr	r2, [r7, #16]
 8008896:	440a      	add	r2, r1
 8008898:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800889c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80088a0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	015a      	lsls	r2, r3, #5
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	4413      	add	r3, r2
 80088ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	7812      	ldrb	r2, [r2, #0]
 80088b6:	0151      	lsls	r1, r2, #5
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	440a      	add	r2, r1
 80088bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80088c4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	3301      	adds	r3, #1
 80088ca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f242 7210 	movw	r2, #10000	@ 0x2710
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d902      	bls.n	80088dc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	75fb      	strb	r3, [r7, #23]
          break;
 80088da:	e056      	b.n	800898a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	015a      	lsls	r2, r3, #5
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	4413      	add	r3, r2
 80088e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80088f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80088f4:	d0e7      	beq.n	80088c6 <USB_EPStopXfer+0x82>
 80088f6:	e048      	b.n	800898a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	4413      	add	r3, r2
 8008902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800890c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008910:	d13b      	bne.n	800898a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	683a      	ldr	r2, [r7, #0]
 8008924:	7812      	ldrb	r2, [r2, #0]
 8008926:	0151      	lsls	r1, r2, #5
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	440a      	add	r2, r1
 800892c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008930:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008934:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	015a      	lsls	r2, r3, #5
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	4413      	add	r3, r2
 8008940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	7812      	ldrb	r2, [r2, #0]
 800894a:	0151      	lsls	r1, r2, #5
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	440a      	add	r2, r1
 8008950:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008954:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008958:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	3301      	adds	r3, #1
 800895e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008966:	4293      	cmp	r3, r2
 8008968:	d902      	bls.n	8008970 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	75fb      	strb	r3, [r7, #23]
          break;
 800896e:	e00c      	b.n	800898a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	015a      	lsls	r2, r3, #5
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	4413      	add	r3, r2
 800897a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008984:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008988:	d0e7      	beq.n	800895a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800898a:	7dfb      	ldrb	r3, [r7, #23]
}
 800898c:	4618      	mov	r0, r3
 800898e:	371c      	adds	r7, #28
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008998:	b480      	push	{r7}
 800899a:	b089      	sub	sp, #36	@ 0x24
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	4611      	mov	r1, r2
 80089a4:	461a      	mov	r2, r3
 80089a6:	460b      	mov	r3, r1
 80089a8:	71fb      	strb	r3, [r7, #7]
 80089aa:	4613      	mov	r3, r2
 80089ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80089b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d123      	bne.n	8008a06 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80089be:	88bb      	ldrh	r3, [r7, #4]
 80089c0:	3303      	adds	r3, #3
 80089c2:	089b      	lsrs	r3, r3, #2
 80089c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80089c6:	2300      	movs	r3, #0
 80089c8:	61bb      	str	r3, [r7, #24]
 80089ca:	e018      	b.n	80089fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80089cc:	79fb      	ldrb	r3, [r7, #7]
 80089ce:	031a      	lsls	r2, r3, #12
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	4413      	add	r3, r2
 80089d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089d8:	461a      	mov	r2, r3
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	3301      	adds	r3, #1
 80089e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	3301      	adds	r3, #1
 80089ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	3301      	adds	r3, #1
 80089f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	3301      	adds	r3, #1
 80089f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	3301      	adds	r3, #1
 80089fc:	61bb      	str	r3, [r7, #24]
 80089fe:	69ba      	ldr	r2, [r7, #24]
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d3e2      	bcc.n	80089cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3724      	adds	r7, #36	@ 0x24
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b08b      	sub	sp, #44	@ 0x2c
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008a2a:	88fb      	ldrh	r3, [r7, #6]
 8008a2c:	089b      	lsrs	r3, r3, #2
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008a32:	88fb      	ldrh	r3, [r7, #6]
 8008a34:	f003 0303 	and.w	r3, r3, #3
 8008a38:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	623b      	str	r3, [r7, #32]
 8008a3e:	e014      	b.n	8008a6a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4e:	3301      	adds	r3, #1
 8008a50:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a54:	3301      	adds	r3, #1
 8008a56:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a60:	3301      	adds	r3, #1
 8008a62:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008a64:	6a3b      	ldr	r3, [r7, #32]
 8008a66:	3301      	adds	r3, #1
 8008a68:	623b      	str	r3, [r7, #32]
 8008a6a:	6a3a      	ldr	r2, [r7, #32]
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d3e6      	bcc.n	8008a40 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008a72:	8bfb      	ldrh	r3, [r7, #30]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d01e      	beq.n	8008ab6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a82:	461a      	mov	r2, r3
 8008a84:	f107 0310 	add.w	r3, r7, #16
 8008a88:	6812      	ldr	r2, [r2, #0]
 8008a8a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008a8c:	693a      	ldr	r2, [r7, #16]
 8008a8e:	6a3b      	ldr	r3, [r7, #32]
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	00db      	lsls	r3, r3, #3
 8008a94:	fa22 f303 	lsr.w	r3, r2, r3
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a9c:	701a      	strb	r2, [r3, #0]
      i++;
 8008a9e:	6a3b      	ldr	r3, [r7, #32]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	623b      	str	r3, [r7, #32]
      pDest++;
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008aaa:	8bfb      	ldrh	r3, [r7, #30]
 8008aac:	3b01      	subs	r3, #1
 8008aae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008ab0:	8bfb      	ldrh	r3, [r7, #30]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1ea      	bne.n	8008a8c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	372c      	adds	r7, #44	@ 0x2c
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	785b      	ldrb	r3, [r3, #1]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d12c      	bne.n	8008b3a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	015a      	lsls	r2, r3, #5
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	db12      	blt.n	8008b18 <USB_EPSetStall+0x54>
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00f      	beq.n	8008b18 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	015a      	lsls	r2, r3, #5
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	0151      	lsls	r1, r2, #5
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	440a      	add	r2, r1
 8008b0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b12:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008b16:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	0151      	lsls	r1, r2, #5
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	440a      	add	r2, r1
 8008b2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b32:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	e02b      	b.n	8008b92 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	015a      	lsls	r2, r3, #5
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	db12      	blt.n	8008b72 <USB_EPSetStall+0xae>
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00f      	beq.n	8008b72 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	015a      	lsls	r2, r3, #5
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	4413      	add	r3, r2
 8008b5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68ba      	ldr	r2, [r7, #8]
 8008b62:	0151      	lsls	r1, r2, #5
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	440a      	add	r2, r1
 8008b68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b6c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008b70:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	015a      	lsls	r2, r3, #5
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	4413      	add	r3, r2
 8008b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	68ba      	ldr	r2, [r7, #8]
 8008b82:	0151      	lsls	r1, r2, #5
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	440a      	add	r2, r1
 8008b88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008b90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	785b      	ldrb	r3, [r3, #1]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d128      	bne.n	8008c0e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	015a      	lsls	r2, r3, #5
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	0151      	lsls	r1, r2, #5
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	440a      	add	r2, r1
 8008bd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008bda:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	791b      	ldrb	r3, [r3, #4]
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d003      	beq.n	8008bec <USB_EPClearStall+0x4c>
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	791b      	ldrb	r3, [r3, #4]
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d138      	bne.n	8008c5e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	015a      	lsls	r2, r3, #5
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	0151      	lsls	r1, r2, #5
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	440a      	add	r2, r1
 8008c02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c0a:	6013      	str	r3, [r2, #0]
 8008c0c:	e027      	b.n	8008c5e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	015a      	lsls	r2, r3, #5
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	4413      	add	r3, r2
 8008c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	0151      	lsls	r1, r2, #5
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	440a      	add	r2, r1
 8008c24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c28:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008c2c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	791b      	ldrb	r3, [r3, #4]
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	d003      	beq.n	8008c3e <USB_EPClearStall+0x9e>
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	791b      	ldrb	r3, [r3, #4]
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d10f      	bne.n	8008c5e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	015a      	lsls	r2, r3, #5
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	4413      	add	r3, r2
 8008c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	68ba      	ldr	r2, [r7, #8]
 8008c4e:	0151      	lsls	r1, r2, #5
 8008c50:	68fa      	ldr	r2, [r7, #12]
 8008c52:	440a      	add	r2, r1
 8008c54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c5c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	460b      	mov	r3, r1
 8008c76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c8a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008c8e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	78fb      	ldrb	r3, [r7, #3]
 8008c9a:	011b      	lsls	r3, r3, #4
 8008c9c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008ca0:	68f9      	ldr	r1, [r7, #12]
 8008ca2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008caa:	2300      	movs	r3, #0
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3714      	adds	r7, #20
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008cd2:	f023 0303 	bic.w	r3, r3, #3
 8008cd6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	68fa      	ldr	r2, [r7, #12]
 8008ce2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008ce6:	f023 0302 	bic.w	r3, r3, #2
 8008cea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3714      	adds	r7, #20
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr

08008cfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008cfa:	b480      	push	{r7}
 8008cfc:	b085      	sub	sp, #20
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008d14:	f023 0303 	bic.w	r3, r3, #3
 8008d18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	68fa      	ldr	r2, [r7, #12]
 8008d24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d28:	f043 0302 	orr.w	r3, r3, #2
 8008d2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	4013      	ands	r3, r2
 8008d52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008d54:	68fb      	ldr	r3, [r7, #12]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3714      	adds	r7, #20
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b085      	sub	sp, #20
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d7e:	69db      	ldr	r3, [r3, #28]
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	4013      	ands	r3, r2
 8008d84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	0c1b      	lsrs	r3, r3, #16
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr

08008d96 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d96:	b480      	push	{r7}
 8008d98:	b085      	sub	sp, #20
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	4013      	ands	r3, r2
 8008db8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	b29b      	uxth	r3, r3
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3714      	adds	r7, #20
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b085      	sub	sp, #20
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008dda:	78fb      	ldrb	r3, [r7, #3]
 8008ddc:	015a      	lsls	r2, r3, #5
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	4413      	add	r3, r2
 8008de2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008df0:	695b      	ldr	r3, [r3, #20]
 8008df2:	68ba      	ldr	r2, [r7, #8]
 8008df4:	4013      	ands	r3, r2
 8008df6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008df8:	68bb      	ldr	r3, [r7, #8]
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr

08008e06 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008e06:	b480      	push	{r7}
 8008e08:	b087      	sub	sp, #28
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	460b      	mov	r3, r1
 8008e10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e28:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008e2a:	78fb      	ldrb	r3, [r7, #3]
 8008e2c:	f003 030f 	and.w	r3, r3, #15
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	fa22 f303 	lsr.w	r3, r2, r3
 8008e36:	01db      	lsls	r3, r3, #7
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	693a      	ldr	r2, [r7, #16]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008e40:	78fb      	ldrb	r3, [r7, #3]
 8008e42:	015a      	lsls	r2, r3, #5
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	4413      	add	r3, r2
 8008e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	4013      	ands	r3, r2
 8008e52:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008e54:	68bb      	ldr	r3, [r7, #8]
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	371c      	adds	r7, #28
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008e62:	b480      	push	{r7}
 8008e64:	b083      	sub	sp, #12
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	695b      	ldr	r3, [r3, #20]
 8008e6e:	f003 0301 	and.w	r3, r3, #1
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	370c      	adds	r7, #12
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b085      	sub	sp, #20
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e98:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008e9c:	f023 0307 	bic.w	r3, r3, #7
 8008ea0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008eb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3714      	adds	r7, #20
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr

08008ec4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b087      	sub	sp, #28
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	460b      	mov	r3, r1
 8008ece:	607a      	str	r2, [r7, #4]
 8008ed0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	333c      	adds	r3, #60	@ 0x3c
 8008eda:	3304      	adds	r3, #4
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	4a26      	ldr	r2, [pc, #152]	@ (8008f7c <USB_EP0_OutStart+0xb8>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d90a      	bls.n	8008efe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ef8:	d101      	bne.n	8008efe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008efa:	2300      	movs	r3, #0
 8008efc:	e037      	b.n	8008f6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f04:	461a      	mov	r2, r3
 8008f06:	2300      	movs	r3, #0
 8008f08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f10:	691b      	ldr	r3, [r3, #16]
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f18:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008f1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f24:	691b      	ldr	r3, [r3, #16]
 8008f26:	697a      	ldr	r2, [r7, #20]
 8008f28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f2c:	f043 0318 	orr.w	r3, r3, #24
 8008f30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	697a      	ldr	r2, [r7, #20]
 8008f3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f40:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008f44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008f46:	7afb      	ldrb	r3, [r7, #11]
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d10f      	bne.n	8008f6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f52:	461a      	mov	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f66:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008f6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	371c      	adds	r7, #28
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	4f54300a 	.word	0x4f54300a

08008f80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008f98:	d901      	bls.n	8008f9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	e01b      	b.n	8008fd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	daf2      	bge.n	8008f8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	691b      	ldr	r3, [r3, #16]
 8008fae:	f043 0201 	orr.w	r2, r3, #1
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008fc2:	d901      	bls.n	8008fc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	e006      	b.n	8008fd6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	f003 0301 	and.w	r3, r3, #1
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d0f0      	beq.n	8008fb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3714      	adds	r7, #20
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
	...

08008fe4 <Motor_setup_LF>:
char* IN_RF;
char* IN_RB;
char* IN_EXTRA1;
char* IN_EXTRA2;

void Motor_setup_LF(TIM_HandleTypeDef *_TIM_14_CH1 ,TIM_HandleTypeDef *_TIM_5  ,char* _IN_LF){
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
	//Motor_setup_LF(PWM_TIM ,Encoder_TIM   ,IN_LF);

	LF_PWM = _TIM_14_CH1;
 8008ff0:	4a0f      	ldr	r2, [pc, #60]	@ (8009030 <Motor_setup_LF+0x4c>)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6013      	str	r3, [r2, #0]
	EN_LF      = _TIM_5;
 8008ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8009034 <Motor_setup_LF+0x50>)
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(LF_PWM, TIM_CHANNEL_1);       //PWM
 8008ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8009030 <Motor_setup_LF+0x4c>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2100      	movs	r1, #0
 8009002:	4618      	mov	r0, r3
 8009004:	f7fc fe66 	bl	8005cd4 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_LF , TIM_CHANNEL_ALL);     //Encoder
 8009008:	4b0a      	ldr	r3, [pc, #40]	@ (8009034 <Motor_setup_LF+0x50>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	213c      	movs	r1, #60	@ 0x3c
 800900e:	4618      	mov	r0, r3
 8009010:	f7fc ffce 	bl	8005fb0 <HAL_TIM_Encoder_Start>

	IN_LF = _IN_LF;
 8009014:	4a08      	ldr	r2, [pc, #32]	@ (8009038 <Motor_setup_LF+0x54>)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6013      	str	r3, [r2, #0]

	DutyCycle_LF_MAX = (LF_PWM->Init.Period);
 800901a:	4b05      	ldr	r3, [pc, #20]	@ (8009030 <Motor_setup_LF+0x4c>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	b21a      	sxth	r2, r3
 8009022:	4b06      	ldr	r3, [pc, #24]	@ (800903c <Motor_setup_LF+0x58>)
 8009024:	801a      	strh	r2, [r3, #0]

}
 8009026:	bf00      	nop
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	200006cc 	.word	0x200006cc
 8009034:	200006b4 	.word	0x200006b4
 8009038:	200006f0 	.word	0x200006f0
 800903c:	200006e4 	.word	0x200006e4

08009040 <Motor_setup_LB>:

void Motor_setup_LB(TIM_HandleTypeDef *_TIM_12_CH1 ,TIM_HandleTypeDef *_TIM_1  ,char* _IN_LB){
 8009040:	b580      	push	{r7, lr}
 8009042:	b084      	sub	sp, #16
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
    //Motor_setup_LB(PWM_TIM ,Encoder_TIM  ,IN1_LB ,IN2_LB);

	LB_PWM = _TIM_12_CH1;
 800904c:	4a0f      	ldr	r2, [pc, #60]	@ (800908c <Motor_setup_LB+0x4c>)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6013      	str	r3, [r2, #0]
	EN_LB      = _TIM_1;
 8009052:	4a0f      	ldr	r2, [pc, #60]	@ (8009090 <Motor_setup_LB+0x50>)
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(LB_PWM, TIM_CHANNEL_1);       //PWM
 8009058:	4b0c      	ldr	r3, [pc, #48]	@ (800908c <Motor_setup_LB+0x4c>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2100      	movs	r1, #0
 800905e:	4618      	mov	r0, r3
 8009060:	f7fc fe38 	bl	8005cd4 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_LB , TIM_CHANNEL_ALL);     //Encoder
 8009064:	4b0a      	ldr	r3, [pc, #40]	@ (8009090 <Motor_setup_LB+0x50>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	213c      	movs	r1, #60	@ 0x3c
 800906a:	4618      	mov	r0, r3
 800906c:	f7fc ffa0 	bl	8005fb0 <HAL_TIM_Encoder_Start>

	IN_LB = _IN_LB;
 8009070:	4a08      	ldr	r2, [pc, #32]	@ (8009094 <Motor_setup_LB+0x54>)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6013      	str	r3, [r2, #0]

	DutyCycle_LB_MAX = (LB_PWM->Init.Period);
 8009076:	4b05      	ldr	r3, [pc, #20]	@ (800908c <Motor_setup_LB+0x4c>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	b21a      	sxth	r2, r3
 800907e:	4b06      	ldr	r3, [pc, #24]	@ (8009098 <Motor_setup_LB+0x58>)
 8009080:	801a      	strh	r2, [r3, #0]

}
 8009082:	bf00      	nop
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	200006d0 	.word	0x200006d0
 8009090:	200006b8 	.word	0x200006b8
 8009094:	200006f4 	.word	0x200006f4
 8009098:	200006e6 	.word	0x200006e6

0800909c <Motor_setup_RF>:

void Motor_setup_RF(TIM_HandleTypeDef *_TIM_11_CH1  ,TIM_HandleTypeDef *_TIM_8  ,char* _IN_RF){
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
    //Motor_setup_RF(PWM_TIM ,Encoder_TIM   ,IN1_RF ,IN2_RF);

	RF_PWM = _TIM_11_CH1;
 80090a8:	4a0f      	ldr	r2, [pc, #60]	@ (80090e8 <Motor_setup_RF+0x4c>)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6013      	str	r3, [r2, #0]
	EN_RF  = _TIM_8;
 80090ae:	4a0f      	ldr	r2, [pc, #60]	@ (80090ec <Motor_setup_RF+0x50>)
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(RF_PWM, TIM_CHANNEL_1);           //PWM
 80090b4:	4b0c      	ldr	r3, [pc, #48]	@ (80090e8 <Motor_setup_RF+0x4c>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	2100      	movs	r1, #0
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fc fe0a 	bl	8005cd4 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_RF , TIM_CHANNEL_ALL);     //Encoder
 80090c0:	4b0a      	ldr	r3, [pc, #40]	@ (80090ec <Motor_setup_RF+0x50>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	213c      	movs	r1, #60	@ 0x3c
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fc ff72 	bl	8005fb0 <HAL_TIM_Encoder_Start>

	IN_RF = _IN_RF;
 80090cc:	4a08      	ldr	r2, [pc, #32]	@ (80090f0 <Motor_setup_RF+0x54>)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6013      	str	r3, [r2, #0]

	DutyCycle_RF_MAX = (RF_PWM->Init.Period);
 80090d2:	4b05      	ldr	r3, [pc, #20]	@ (80090e8 <Motor_setup_RF+0x4c>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	b21a      	sxth	r2, r3
 80090da:	4b06      	ldr	r3, [pc, #24]	@ (80090f4 <Motor_setup_RF+0x58>)
 80090dc:	801a      	strh	r2, [r3, #0]

}
 80090de:	bf00      	nop
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	200006d4 	.word	0x200006d4
 80090ec:	200006bc 	.word	0x200006bc
 80090f0:	200006f8 	.word	0x200006f8
 80090f4:	200006e8 	.word	0x200006e8

080090f8 <Motor_setup_RB>:

void Motor_setup_RB(TIM_HandleTypeDef *_TIM_12_CH2   ,TIM_HandleTypeDef *_TIM_4 ,char* _IN_RB){
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	RB_PWM = _TIM_12_CH2;
 8009104:	4a0f      	ldr	r2, [pc, #60]	@ (8009144 <Motor_setup_RB+0x4c>)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6013      	str	r3, [r2, #0]
	EN_RB  = _TIM_4;
 800910a:	4a0f      	ldr	r2, [pc, #60]	@ (8009148 <Motor_setup_RB+0x50>)
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(RB_PWM, TIM_CHANNEL_2);            //PWM
 8009110:	4b0c      	ldr	r3, [pc, #48]	@ (8009144 <Motor_setup_RB+0x4c>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2104      	movs	r1, #4
 8009116:	4618      	mov	r0, r3
 8009118:	f7fc fddc 	bl	8005cd4 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_RB , TIM_CHANNEL_ALL);      //Encoder
 800911c:	4b0a      	ldr	r3, [pc, #40]	@ (8009148 <Motor_setup_RB+0x50>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	213c      	movs	r1, #60	@ 0x3c
 8009122:	4618      	mov	r0, r3
 8009124:	f7fc ff44 	bl	8005fb0 <HAL_TIM_Encoder_Start>

	IN_RB = _IN_RB;
 8009128:	4a08      	ldr	r2, [pc, #32]	@ (800914c <Motor_setup_RB+0x54>)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6013      	str	r3, [r2, #0]

	DutyCycle_RB_MAX = (RB_PWM->Init.Period);
 800912e:	4b05      	ldr	r3, [pc, #20]	@ (8009144 <Motor_setup_RB+0x4c>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	b21a      	sxth	r2, r3
 8009136:	4b06      	ldr	r3, [pc, #24]	@ (8009150 <Motor_setup_RB+0x58>)
 8009138:	801a      	strh	r2, [r3, #0]

}
 800913a:	bf00      	nop
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	200006d8 	.word	0x200006d8
 8009148:	200006c0 	.word	0x200006c0
 800914c:	200006fc 	.word	0x200006fc
 8009150:	200006ea 	.word	0x200006ea

08009154 <Motor_setup_EXTRA1>:

void Motor_setup_EXTRA1(TIM_HandleTypeDef *_TIM_9_CH1  ,TIM_HandleTypeDef *_TIM_3  ,char* _IN_EXTRA1){
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	EXTRA1_PWM = _TIM_9_CH1;
 8009160:	4a0f      	ldr	r2, [pc, #60]	@ (80091a0 <Motor_setup_EXTRA1+0x4c>)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6013      	str	r3, [r2, #0]
	EN_X  = _TIM_3;
 8009166:	4a0f      	ldr	r2, [pc, #60]	@ (80091a4 <Motor_setup_EXTRA1+0x50>)
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(EXTRA1_PWM, TIM_CHANNEL_1);            //PWM
 800916c:	4b0c      	ldr	r3, [pc, #48]	@ (80091a0 <Motor_setup_EXTRA1+0x4c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2100      	movs	r1, #0
 8009172:	4618      	mov	r0, r3
 8009174:	f7fc fdae 	bl	8005cd4 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_X , TIM_CHANNEL_ALL);      //Encoder
 8009178:	4b0a      	ldr	r3, [pc, #40]	@ (80091a4 <Motor_setup_EXTRA1+0x50>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	213c      	movs	r1, #60	@ 0x3c
 800917e:	4618      	mov	r0, r3
 8009180:	f7fc ff16 	bl	8005fb0 <HAL_TIM_Encoder_Start>

	IN_EXTRA1 = _IN_EXTRA1;
 8009184:	4a08      	ldr	r2, [pc, #32]	@ (80091a8 <Motor_setup_EXTRA1+0x54>)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6013      	str	r3, [r2, #0]

	DutyCycle_EXTRA1_MAX = (EXTRA1_PWM->Init.Period);
 800918a:	4b05      	ldr	r3, [pc, #20]	@ (80091a0 <Motor_setup_EXTRA1+0x4c>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	b21a      	sxth	r2, r3
 8009192:	4b06      	ldr	r3, [pc, #24]	@ (80091ac <Motor_setup_EXTRA1+0x58>)
 8009194:	801a      	strh	r2, [r3, #0]

}
 8009196:	bf00      	nop
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	200006dc 	.word	0x200006dc
 80091a4:	200006c4 	.word	0x200006c4
 80091a8:	20000700 	.word	0x20000700
 80091ac:	200006ec 	.word	0x200006ec

080091b0 <Motor_setup_EXTRA2>:

void Motor_setup_EXTRA2(TIM_HandleTypeDef *_TIM_10_CH1  ,TIM_HandleTypeDef *_TIM_2 ,char* _IN_EXTRA2){
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	EXTRA2_PWM = _TIM_10_CH1;
 80091bc:	4a0f      	ldr	r2, [pc, #60]	@ (80091fc <Motor_setup_EXTRA2+0x4c>)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6013      	str	r3, [r2, #0]
	EN_Y  = _TIM_2;
 80091c2:	4a0f      	ldr	r2, [pc, #60]	@ (8009200 <Motor_setup_EXTRA2+0x50>)
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(EXTRA2_PWM, TIM_CHANNEL_1);            //PWM
 80091c8:	4b0c      	ldr	r3, [pc, #48]	@ (80091fc <Motor_setup_EXTRA2+0x4c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2100      	movs	r1, #0
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7fc fd80 	bl	8005cd4 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_Y , TIM_CHANNEL_ALL);      //Encoder
 80091d4:	4b0a      	ldr	r3, [pc, #40]	@ (8009200 <Motor_setup_EXTRA2+0x50>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	213c      	movs	r1, #60	@ 0x3c
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fc fee8 	bl	8005fb0 <HAL_TIM_Encoder_Start>

	IN_EXTRA2 = _IN_EXTRA2;
 80091e0:	4a08      	ldr	r2, [pc, #32]	@ (8009204 <Motor_setup_EXTRA2+0x54>)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6013      	str	r3, [r2, #0]

	DutyCycle_EXTRA2_MAX = (EXTRA2_PWM->Init.Period);
 80091e6:	4b05      	ldr	r3, [pc, #20]	@ (80091fc <Motor_setup_EXTRA2+0x4c>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	b21a      	sxth	r2, r3
 80091ee:	4b06      	ldr	r3, [pc, #24]	@ (8009208 <Motor_setup_EXTRA2+0x58>)
 80091f0:	801a      	strh	r2, [r3, #0]

}
 80091f2:	bf00      	nop
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	200006e0 	.word	0x200006e0
 8009200:	200006c8 	.word	0x200006c8
 8009204:	20000704 	.word	0x20000704
 8009208:	200006ee 	.word	0x200006ee

0800920c <getCount>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////PID///////////////////////////////////////////////////////////////

int16_t getCount(TIM_HandleTypeDef *TIM){
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
	int16_t count = ((int16_t)(TIM->Instance->CNT));
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800921a:	81fb      	strh	r3, [r7, #14]

	return count;
 800921c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8009220:	4618      	mov	r0, r3
 8009222:	3714      	adds	r7, #20
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <Setup_CPR>:

float _RPM[6] = {0 ,0 ,0 ,0 ,0 ,0}; //Speed   //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

uint16_t CPR = 68;

void Setup_CPR(uint16_t _CPR){
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	4603      	mov	r3, r0
 8009234:	80fb      	strh	r3, [r7, #6]
	CPR = _CPR;
 8009236:	4a04      	ldr	r2, [pc, #16]	@ (8009248 <Setup_CPR+0x1c>)
 8009238:	88fb      	ldrh	r3, [r7, #6]
 800923a:	8013      	strh	r3, [r2, #0]
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr
 8009248:	2000000c 	.word	0x2000000c

0800924c <Setup_Gear_Ratio>:

uint16_t Gear_Ratio = 27;

void Setup_Gear_Ratio(uint16_t _Gear_Ratio){
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	4603      	mov	r3, r0
 8009254:	80fb      	strh	r3, [r7, #6]
	Gear_Ratio = _Gear_Ratio;
 8009256:	4a04      	ldr	r2, [pc, #16]	@ (8009268 <Setup_Gear_Ratio+0x1c>)
 8009258:	88fb      	ldrh	r3, [r7, #6]
 800925a:	8013      	strh	r3, [r2, #0]
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr
 8009268:	2000000e 	.word	0x2000000e

0800926c <Setup_frequency_Motor>:

void Setup_frequency_Motor(uint16_t freq){
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	4603      	mov	r3, r0
 8009274:	80fb      	strh	r3, [r7, #6]
	_freq = freq;
 8009276:	4a04      	ldr	r2, [pc, #16]	@ (8009288 <Setup_frequency_Motor+0x1c>)
 8009278:	88fb      	ldrh	r3, [r7, #6]
 800927a:	8013      	strh	r3, [r2, #0]
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	2000000a 	.word	0x2000000a

0800928c <getRad_s_to_RPM>:
	float Rad_s = RPM * 0.10472f;

	return Rad_s;
}

float getRad_s_to_RPM(float Rad_s){
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	ed87 0a01 	vstr	s0, [r7, #4]
	float RPM__ = Rad_s * 9.549297f;
 8009296:	edd7 7a01 	vldr	s15, [r7, #4]
 800929a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80092bc <getRad_s_to_RPM+0x30>
 800929e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80092a2:	edc7 7a03 	vstr	s15, [r7, #12]

	return RPM__;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	ee07 3a90 	vmov	s15, r3
}
 80092ac:	eeb0 0a67 	vmov.f32	s0, s15
 80092b0:	3714      	adds	r7, #20
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr
 80092ba:	bf00      	nop
 80092bc:	4118c9ec 	.word	0x4118c9ec

080092c0 <getRPM_TIM_Wheel>:

float getRPM_TIM_Wheel(TIM_HandleTypeDef *TIM ,uint8_t _Wheel){
 80092c0:	b590      	push	{r4, r7, lr}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	460b      	mov	r3, r1
 80092ca:	70fb      	strb	r3, [r7, #3]
	Present_Count[_Wheel] = (int16_t)getCount(TIM);
 80092cc:	78fc      	ldrb	r4, [r7, #3]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7ff ff9c 	bl	800920c <getCount>
 80092d4:	4603      	mov	r3, r0
 80092d6:	461a      	mov	r2, r3
 80092d8:	4b29      	ldr	r3, [pc, #164]	@ (8009380 <getRPM_TIM_Wheel+0xc0>)
 80092da:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	// V = count/t = count*freq
	_RPM[_Wheel] = (float)((int16_t)(Present_Count[_Wheel] - Past_Count[_Wheel]) * _freq);
 80092de:	78fb      	ldrb	r3, [r7, #3]
 80092e0:	4a27      	ldr	r2, [pc, #156]	@ (8009380 <getRPM_TIM_Wheel+0xc0>)
 80092e2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80092e6:	b29a      	uxth	r2, r3
 80092e8:	78fb      	ldrb	r3, [r7, #3]
 80092ea:	4926      	ldr	r1, [pc, #152]	@ (8009384 <getRPM_TIM_Wheel+0xc4>)
 80092ec:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80092f0:	b29b      	uxth	r3, r3
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	b21b      	sxth	r3, r3
 80092f8:	461a      	mov	r2, r3
 80092fa:	4b23      	ldr	r3, [pc, #140]	@ (8009388 <getRPM_TIM_Wheel+0xc8>)
 80092fc:	881b      	ldrh	r3, [r3, #0]
 80092fe:	fb03 f202 	mul.w	r2, r3, r2
 8009302:	78fb      	ldrb	r3, [r7, #3]
 8009304:	ee07 2a90 	vmov	s15, r2
 8009308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800930c:	4a1f      	ldr	r2, [pc, #124]	@ (800938c <getRPM_TIM_Wheel+0xcc>)
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	4413      	add	r3, r2
 8009312:	edc3 7a00 	vstr	s15, [r3]
	_RPM[_Wheel] = (float)(((_RPM[_Wheel]* 60.0f)/CPR )/Gear_Ratio);
 8009316:	78fb      	ldrb	r3, [r7, #3]
 8009318:	4a1c      	ldr	r2, [pc, #112]	@ (800938c <getRPM_TIM_Wheel+0xcc>)
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4413      	add	r3, r2
 800931e:	edd3 7a00 	vldr	s15, [r3]
 8009322:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8009390 <getRPM_TIM_Wheel+0xd0>
 8009326:	ee27 7a87 	vmul.f32	s14, s15, s14
 800932a:	4b1a      	ldr	r3, [pc, #104]	@ (8009394 <getRPM_TIM_Wheel+0xd4>)
 800932c:	881b      	ldrh	r3, [r3, #0]
 800932e:	ee07 3a90 	vmov	s15, r3
 8009332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009336:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800933a:	4b17      	ldr	r3, [pc, #92]	@ (8009398 <getRPM_TIM_Wheel+0xd8>)
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	ee07 3a90 	vmov	s15, r3
 8009342:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009346:	78fb      	ldrb	r3, [r7, #3]
 8009348:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800934c:	4a0f      	ldr	r2, [pc, #60]	@ (800938c <getRPM_TIM_Wheel+0xcc>)
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	4413      	add	r3, r2
 8009352:	edc3 7a00 	vstr	s15, [r3]

	Past_Count[_Wheel] = Present_Count[_Wheel];
 8009356:	78fa      	ldrb	r2, [r7, #3]
 8009358:	78fb      	ldrb	r3, [r7, #3]
 800935a:	4909      	ldr	r1, [pc, #36]	@ (8009380 <getRPM_TIM_Wheel+0xc0>)
 800935c:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8009360:	4a08      	ldr	r2, [pc, #32]	@ (8009384 <getRPM_TIM_Wheel+0xc4>)
 8009362:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return _RPM[_Wheel];
 8009366:	78fb      	ldrb	r3, [r7, #3]
 8009368:	4a08      	ldr	r2, [pc, #32]	@ (800938c <getRPM_TIM_Wheel+0xcc>)
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	4413      	add	r3, r2
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	ee07 3a90 	vmov	s15, r3
}
 8009374:	eeb0 0a67 	vmov.f32	s0, s15
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	bd90      	pop	{r4, r7, pc}
 800937e:	bf00      	nop
 8009380:	20000708 	.word	0x20000708
 8009384:	20000714 	.word	0x20000714
 8009388:	2000000a 	.word	0x2000000a
 800938c:	20000720 	.word	0x20000720
 8009390:	42700000 	.word	0x42700000
 8009394:	2000000c 	.word	0x2000000c
 8009398:	2000000e 	.word	0x2000000e

0800939c <Setup_PID_LF>:

float min_speed[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2
float max_speed[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2


void Setup_PID_LF(float Kp_LF ,float Ki_LF ,float Kd_LF ,float min_speed_LF ,float max_speed_LF){
 800939c:	b480      	push	{r7}
 800939e:	b087      	sub	sp, #28
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	ed87 0a05 	vstr	s0, [r7, #20]
 80093a6:	edc7 0a04 	vstr	s1, [r7, #16]
 80093aa:	ed87 1a03 	vstr	s2, [r7, #12]
 80093ae:	edc7 1a02 	vstr	s3, [r7, #8]
 80093b2:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[0] = Kp_LF;
 80093b6:	4a0a      	ldr	r2, [pc, #40]	@ (80093e0 <Setup_PID_LF+0x44>)
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	6013      	str	r3, [r2, #0]
	Ki_Wheel[0] = Ki_LF;
 80093bc:	4a09      	ldr	r2, [pc, #36]	@ (80093e4 <Setup_PID_LF+0x48>)
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	6013      	str	r3, [r2, #0]
	Kd_Wheel[0] = Kd_LF;
 80093c2:	4a09      	ldr	r2, [pc, #36]	@ (80093e8 <Setup_PID_LF+0x4c>)
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6013      	str	r3, [r2, #0]

	min_speed[0] = min_speed_LF;
 80093c8:	4a08      	ldr	r2, [pc, #32]	@ (80093ec <Setup_PID_LF+0x50>)
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	6013      	str	r3, [r2, #0]
	max_speed[0] = max_speed_LF;
 80093ce:	4a08      	ldr	r2, [pc, #32]	@ (80093f0 <Setup_PID_LF+0x54>)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6013      	str	r3, [r2, #0]
}
 80093d4:	bf00      	nop
 80093d6:	371c      	adds	r7, #28
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr
 80093e0:	20000738 	.word	0x20000738
 80093e4:	20000750 	.word	0x20000750
 80093e8:	20000768 	.word	0x20000768
 80093ec:	20000780 	.word	0x20000780
 80093f0:	20000798 	.word	0x20000798

080093f4 <Setup_PID_LB>:

void Setup_PID_LB(float Kp_LB ,float Ki_LB ,float Kd_LB ,float min_speed_LB ,float max_speed_LB){
 80093f4:	b480      	push	{r7}
 80093f6:	b087      	sub	sp, #28
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	ed87 0a05 	vstr	s0, [r7, #20]
 80093fe:	edc7 0a04 	vstr	s1, [r7, #16]
 8009402:	ed87 1a03 	vstr	s2, [r7, #12]
 8009406:	edc7 1a02 	vstr	s3, [r7, #8]
 800940a:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[1] = Kp_LB;
 800940e:	4a0a      	ldr	r2, [pc, #40]	@ (8009438 <Setup_PID_LB+0x44>)
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	6053      	str	r3, [r2, #4]
	Ki_Wheel[1] = Ki_LB;
 8009414:	4a09      	ldr	r2, [pc, #36]	@ (800943c <Setup_PID_LB+0x48>)
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	6053      	str	r3, [r2, #4]
	Kd_Wheel[1] = Kd_LB;
 800941a:	4a09      	ldr	r2, [pc, #36]	@ (8009440 <Setup_PID_LB+0x4c>)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6053      	str	r3, [r2, #4]

	min_speed[1] = min_speed_LB;
 8009420:	4a08      	ldr	r2, [pc, #32]	@ (8009444 <Setup_PID_LB+0x50>)
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	6053      	str	r3, [r2, #4]
	max_speed[1] = max_speed_LB;
 8009426:	4a08      	ldr	r2, [pc, #32]	@ (8009448 <Setup_PID_LB+0x54>)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6053      	str	r3, [r2, #4]
}
 800942c:	bf00      	nop
 800942e:	371c      	adds	r7, #28
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr
 8009438:	20000738 	.word	0x20000738
 800943c:	20000750 	.word	0x20000750
 8009440:	20000768 	.word	0x20000768
 8009444:	20000780 	.word	0x20000780
 8009448:	20000798 	.word	0x20000798

0800944c <Setup_PID_RF>:

void Setup_PID_RF(float Kp_RF ,float Ki_RF ,float Kd_RF ,float min_speed_RF ,float max_speed_RF){
 800944c:	b480      	push	{r7}
 800944e:	b087      	sub	sp, #28
 8009450:	af00      	add	r7, sp, #0
 8009452:	ed87 0a05 	vstr	s0, [r7, #20]
 8009456:	edc7 0a04 	vstr	s1, [r7, #16]
 800945a:	ed87 1a03 	vstr	s2, [r7, #12]
 800945e:	edc7 1a02 	vstr	s3, [r7, #8]
 8009462:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[2] = Kp_RF;
 8009466:	4a0a      	ldr	r2, [pc, #40]	@ (8009490 <Setup_PID_RF+0x44>)
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	6093      	str	r3, [r2, #8]
	Ki_Wheel[2] = Ki_RF;
 800946c:	4a09      	ldr	r2, [pc, #36]	@ (8009494 <Setup_PID_RF+0x48>)
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	6093      	str	r3, [r2, #8]
	Kd_Wheel[2] = Kd_RF;
 8009472:	4a09      	ldr	r2, [pc, #36]	@ (8009498 <Setup_PID_RF+0x4c>)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6093      	str	r3, [r2, #8]

	min_speed[2] = min_speed_RF;
 8009478:	4a08      	ldr	r2, [pc, #32]	@ (800949c <Setup_PID_RF+0x50>)
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	6093      	str	r3, [r2, #8]
	max_speed[2] = max_speed_RF;
 800947e:	4a08      	ldr	r2, [pc, #32]	@ (80094a0 <Setup_PID_RF+0x54>)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6093      	str	r3, [r2, #8]
}
 8009484:	bf00      	nop
 8009486:	371c      	adds	r7, #28
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr
 8009490:	20000738 	.word	0x20000738
 8009494:	20000750 	.word	0x20000750
 8009498:	20000768 	.word	0x20000768
 800949c:	20000780 	.word	0x20000780
 80094a0:	20000798 	.word	0x20000798

080094a4 <Setup_PID_RB>:

void Setup_PID_RB(float Kp_RB ,float Ki_RB ,float Kd_RB ,float min_speed_RB ,float max_speed_RB){
 80094a4:	b480      	push	{r7}
 80094a6:	b087      	sub	sp, #28
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	ed87 0a05 	vstr	s0, [r7, #20]
 80094ae:	edc7 0a04 	vstr	s1, [r7, #16]
 80094b2:	ed87 1a03 	vstr	s2, [r7, #12]
 80094b6:	edc7 1a02 	vstr	s3, [r7, #8]
 80094ba:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[3] = Kp_RB;
 80094be:	4a0a      	ldr	r2, [pc, #40]	@ (80094e8 <Setup_PID_RB+0x44>)
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	60d3      	str	r3, [r2, #12]
	Ki_Wheel[3] = Ki_RB;
 80094c4:	4a09      	ldr	r2, [pc, #36]	@ (80094ec <Setup_PID_RB+0x48>)
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	60d3      	str	r3, [r2, #12]
	Kd_Wheel[3] = Kd_RB;
 80094ca:	4a09      	ldr	r2, [pc, #36]	@ (80094f0 <Setup_PID_RB+0x4c>)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	60d3      	str	r3, [r2, #12]

	min_speed[3] = min_speed_RB;
 80094d0:	4a08      	ldr	r2, [pc, #32]	@ (80094f4 <Setup_PID_RB+0x50>)
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	60d3      	str	r3, [r2, #12]
	max_speed[3] = max_speed_RB;
 80094d6:	4a08      	ldr	r2, [pc, #32]	@ (80094f8 <Setup_PID_RB+0x54>)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	60d3      	str	r3, [r2, #12]
}
 80094dc:	bf00      	nop
 80094de:	371c      	adds	r7, #28
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	20000738 	.word	0x20000738
 80094ec:	20000750 	.word	0x20000750
 80094f0:	20000768 	.word	0x20000768
 80094f4:	20000780 	.word	0x20000780
 80094f8:	20000798 	.word	0x20000798

080094fc <PID_Speed>:

float Past_Error[6]   = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float Output_PID[6]    = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float PID_Speed(float _Setpoint ,int16_t RPM ,uint8_t _Wheel){
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	ed87 0a01 	vstr	s0, [r7, #4]
 8009506:	4603      	mov	r3, r0
 8009508:	460a      	mov	r2, r1
 800950a:	807b      	strh	r3, [r7, #2]
 800950c:	4613      	mov	r3, r2
 800950e:	707b      	strb	r3, [r7, #1]
//	  case 4 : getRPM_TIM_Wheel(EN_X ,EXTRA1 ); break;
//	  case 5 : getRPM_TIM_Wheel(EN_Y ,EXTRA2 ); break;
//	}

//	Error_Speed[_Wheel] = _Setpoint-_RPM[_Wheel];
	Error_Speed[_Wheel] = _Setpoint-RPM;
 8009510:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009514:	ee07 3a90 	vmov	s15, r3
 8009518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800951c:	787b      	ldrb	r3, [r7, #1]
 800951e:	ed97 7a01 	vldr	s14, [r7, #4]
 8009522:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009526:	4a41      	ldr	r2, [pc, #260]	@ (800962c <PID_Speed+0x130>)
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	4413      	add	r3, r2
 800952c:	edc3 7a00 	vstr	s15, [r3]

	Proportional[_Wheel] = Error_Speed[_Wheel];
 8009530:	787a      	ldrb	r2, [r7, #1]
 8009532:	787b      	ldrb	r3, [r7, #1]
 8009534:	493d      	ldr	r1, [pc, #244]	@ (800962c <PID_Speed+0x130>)
 8009536:	0092      	lsls	r2, r2, #2
 8009538:	440a      	add	r2, r1
 800953a:	6812      	ldr	r2, [r2, #0]
 800953c:	493c      	ldr	r1, [pc, #240]	@ (8009630 <PID_Speed+0x134>)
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	440b      	add	r3, r1
 8009542:	601a      	str	r2, [r3, #0]
	Integnator[_Wheel]   += Error_Speed[_Wheel];
 8009544:	787b      	ldrb	r3, [r7, #1]
 8009546:	4a3b      	ldr	r2, [pc, #236]	@ (8009634 <PID_Speed+0x138>)
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4413      	add	r3, r2
 800954c:	ed93 7a00 	vldr	s14, [r3]
 8009550:	787b      	ldrb	r3, [r7, #1]
 8009552:	4a36      	ldr	r2, [pc, #216]	@ (800962c <PID_Speed+0x130>)
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4413      	add	r3, r2
 8009558:	edd3 7a00 	vldr	s15, [r3]
 800955c:	787b      	ldrb	r3, [r7, #1]
 800955e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009562:	4a34      	ldr	r2, [pc, #208]	@ (8009634 <PID_Speed+0x138>)
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	4413      	add	r3, r2
 8009568:	edc3 7a00 	vstr	s15, [r3]
	Derivative[_Wheel]   = Error_Speed[_Wheel] - Past_Error[_Wheel];
 800956c:	787b      	ldrb	r3, [r7, #1]
 800956e:	4a2f      	ldr	r2, [pc, #188]	@ (800962c <PID_Speed+0x130>)
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	4413      	add	r3, r2
 8009574:	ed93 7a00 	vldr	s14, [r3]
 8009578:	787b      	ldrb	r3, [r7, #1]
 800957a:	4a2f      	ldr	r2, [pc, #188]	@ (8009638 <PID_Speed+0x13c>)
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4413      	add	r3, r2
 8009580:	edd3 7a00 	vldr	s15, [r3]
 8009584:	787b      	ldrb	r3, [r7, #1]
 8009586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800958a:	4a2c      	ldr	r2, [pc, #176]	@ (800963c <PID_Speed+0x140>)
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	4413      	add	r3, r2
 8009590:	edc3 7a00 	vstr	s15, [r3]

	Past_Error[_Wheel] = Error_Speed[_Wheel];
 8009594:	787a      	ldrb	r2, [r7, #1]
 8009596:	787b      	ldrb	r3, [r7, #1]
 8009598:	4924      	ldr	r1, [pc, #144]	@ (800962c <PID_Speed+0x130>)
 800959a:	0092      	lsls	r2, r2, #2
 800959c:	440a      	add	r2, r1
 800959e:	6812      	ldr	r2, [r2, #0]
 80095a0:	4925      	ldr	r1, [pc, #148]	@ (8009638 <PID_Speed+0x13c>)
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	440b      	add	r3, r1
 80095a6:	601a      	str	r2, [r3, #0]

	Output_PID[_Wheel]  = (float)((Proportional[_Wheel]*Kp_Wheel[_Wheel]) + (Integnator[_Wheel]*Ki_Wheel[_Wheel]) + (Derivative[_Wheel]*Kd_Wheel[_Wheel]));
 80095a8:	787b      	ldrb	r3, [r7, #1]
 80095aa:	4a21      	ldr	r2, [pc, #132]	@ (8009630 <PID_Speed+0x134>)
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	4413      	add	r3, r2
 80095b0:	ed93 7a00 	vldr	s14, [r3]
 80095b4:	787b      	ldrb	r3, [r7, #1]
 80095b6:	4a22      	ldr	r2, [pc, #136]	@ (8009640 <PID_Speed+0x144>)
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	4413      	add	r3, r2
 80095bc:	edd3 7a00 	vldr	s15, [r3]
 80095c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80095c4:	787b      	ldrb	r3, [r7, #1]
 80095c6:	4a1b      	ldr	r2, [pc, #108]	@ (8009634 <PID_Speed+0x138>)
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4413      	add	r3, r2
 80095cc:	edd3 6a00 	vldr	s13, [r3]
 80095d0:	787b      	ldrb	r3, [r7, #1]
 80095d2:	4a1c      	ldr	r2, [pc, #112]	@ (8009644 <PID_Speed+0x148>)
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	4413      	add	r3, r2
 80095d8:	edd3 7a00 	vldr	s15, [r3]
 80095dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80095e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80095e4:	787b      	ldrb	r3, [r7, #1]
 80095e6:	4a15      	ldr	r2, [pc, #84]	@ (800963c <PID_Speed+0x140>)
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4413      	add	r3, r2
 80095ec:	edd3 6a00 	vldr	s13, [r3]
 80095f0:	787b      	ldrb	r3, [r7, #1]
 80095f2:	4a15      	ldr	r2, [pc, #84]	@ (8009648 <PID_Speed+0x14c>)
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	4413      	add	r3, r2
 80095f8:	edd3 7a00 	vldr	s15, [r3]
 80095fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009600:	787b      	ldrb	r3, [r7, #1]
 8009602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009606:	4a11      	ldr	r2, [pc, #68]	@ (800964c <PID_Speed+0x150>)
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	4413      	add	r3, r2
 800960c:	edc3 7a00 	vstr	s15, [r3]


	return Output_PID[_Wheel];
 8009610:	787b      	ldrb	r3, [r7, #1]
 8009612:	4a0e      	ldr	r2, [pc, #56]	@ (800964c <PID_Speed+0x150>)
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	4413      	add	r3, r2
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	ee07 3a90 	vmov	s15, r3
}
 800961e:	eeb0 0a67 	vmov.f32	s0, s15
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr
 800962c:	200007b0 	.word	0x200007b0
 8009630:	200007c8 	.word	0x200007c8
 8009634:	200007e0 	.word	0x200007e0
 8009638:	20000810 	.word	0x20000810
 800963c:	200007f8 	.word	0x200007f8
 8009640:	20000738 	.word	0x20000738
 8009644:	20000750 	.word	0x20000750
 8009648:	20000768 	.word	0x20000768
 800964c:	20000828 	.word	0x20000828

08009650 <Motor_DutyCycle_LF>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////Motor////////////////////////////////////////////////////////////////////
void Motor_DutyCycle_LF(int16_t DutyCycle_LF){
 8009650:	b580      	push	{r7, lr}
 8009652:	b082      	sub	sp, #8
 8009654:	af00      	add	r7, sp, #0
 8009656:	4603      	mov	r3, r0
 8009658:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_LF > DutyCycle_LF_MAX) {
 800965a:	4b26      	ldr	r3, [pc, #152]	@ (80096f4 <Motor_DutyCycle_LF+0xa4>)
 800965c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009660:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009664:	429a      	cmp	r2, r3
 8009666:	dd03      	ble.n	8009670 <Motor_DutyCycle_LF+0x20>
	    DutyCycle_LF = DutyCycle_LF_MAX;
 8009668:	4b22      	ldr	r3, [pc, #136]	@ (80096f4 <Motor_DutyCycle_LF+0xa4>)
 800966a:	881b      	ldrh	r3, [r3, #0]
 800966c:	80fb      	strh	r3, [r7, #6]
 800966e:	e00e      	b.n	800968e <Motor_DutyCycle_LF+0x3e>
	} else if (DutyCycle_LF < -DutyCycle_LF_MAX) {
 8009670:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009674:	4b1f      	ldr	r3, [pc, #124]	@ (80096f4 <Motor_DutyCycle_LF+0xa4>)
 8009676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800967a:	425b      	negs	r3, r3
 800967c:	429a      	cmp	r2, r3
 800967e:	da06      	bge.n	800968e <Motor_DutyCycle_LF+0x3e>
		DutyCycle_LF = -DutyCycle_LF_MAX;
 8009680:	4b1c      	ldr	r3, [pc, #112]	@ (80096f4 <Motor_DutyCycle_LF+0xa4>)
 8009682:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009686:	b29b      	uxth	r3, r3
 8009688:	425b      	negs	r3, r3
 800968a:	b29b      	uxth	r3, r3
 800968c:	80fb      	strh	r3, [r7, #6]
	}

	LF_PWM->Instance->CCR1 = (DutyCycle_LF > 0) ? (int16_t)DutyCycle_LF : (DutyCycle_LF_MAX + (int16_t)DutyCycle_LF);
 800968e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009692:	2b00      	cmp	r3, #0
 8009694:	dd02      	ble.n	800969c <Motor_DutyCycle_LF+0x4c>
 8009696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800969a:	e006      	b.n	80096aa <Motor_DutyCycle_LF+0x5a>
 800969c:	4b15      	ldr	r3, [pc, #84]	@ (80096f4 <Motor_DutyCycle_LF+0xa4>)
 800969e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80096a2:	461a      	mov	r2, r3
 80096a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80096a8:	4413      	add	r3, r2
 80096aa:	4a13      	ldr	r2, [pc, #76]	@ (80096f8 <Motor_DutyCycle_LF+0xa8>)
 80096ac:	6812      	ldr	r2, [r2, #0]
 80096ae:	6812      	ldr	r2, [r2, #0]
 80096b0:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_LF , (DutyCycle_LF < 0) ? 1 : 0);
 80096b2:	4b12      	ldr	r3, [pc, #72]	@ (80096fc <Motor_DutyCycle_LF+0xac>)
 80096b4:	681a      	ldr	r2, [r3, #0]
 80096b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80096ba:	13db      	asrs	r3, r3, #15
 80096bc:	b21b      	sxth	r3, r3
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	f003 0301 	and.w	r3, r3, #1
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	4619      	mov	r1, r3
 80096c8:	4610      	mov	r0, r2
 80096ca:	f000 fba1 	bl	8009e10 <digitalWrite>

	if(DutyCycle_LF == 0){
 80096ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d10a      	bne.n	80096ec <Motor_DutyCycle_LF+0x9c>
	   LF_PWM->Instance->CCR1 = 0;
 80096d6:	4b08      	ldr	r3, [pc, #32]	@ (80096f8 <Motor_DutyCycle_LF+0xa8>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2200      	movs	r2, #0
 80096de:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_LF ,0);
 80096e0:	4b06      	ldr	r3, [pc, #24]	@ (80096fc <Motor_DutyCycle_LF+0xac>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2100      	movs	r1, #0
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 fb92 	bl	8009e10 <digitalWrite>
	}
}
 80096ec:	bf00      	nop
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	200006e4 	.word	0x200006e4
 80096f8:	200006cc 	.word	0x200006cc
 80096fc:	200006f0 	.word	0x200006f0

08009700 <Motor_DutyCycle_LB>:

void Motor_DutyCycle_LB(int16_t DutyCycle_LB){
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	4603      	mov	r3, r0
 8009708:	80fb      	strh	r3, [r7, #6]
	DutyCycle_LB = -DutyCycle_LB;
 800970a:	88fb      	ldrh	r3, [r7, #6]
 800970c:	425b      	negs	r3, r3
 800970e:	b29b      	uxth	r3, r3
 8009710:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_LB > DutyCycle_LB_MAX) {
 8009712:	4b26      	ldr	r3, [pc, #152]	@ (80097ac <Motor_DutyCycle_LB+0xac>)
 8009714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009718:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800971c:	429a      	cmp	r2, r3
 800971e:	dd03      	ble.n	8009728 <Motor_DutyCycle_LB+0x28>
		DutyCycle_LB = DutyCycle_LB_MAX;
 8009720:	4b22      	ldr	r3, [pc, #136]	@ (80097ac <Motor_DutyCycle_LB+0xac>)
 8009722:	881b      	ldrh	r3, [r3, #0]
 8009724:	80fb      	strh	r3, [r7, #6]
 8009726:	e00e      	b.n	8009746 <Motor_DutyCycle_LB+0x46>
	} else if (DutyCycle_LB < -DutyCycle_LB_MAX) {
 8009728:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800972c:	4b1f      	ldr	r3, [pc, #124]	@ (80097ac <Motor_DutyCycle_LB+0xac>)
 800972e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009732:	425b      	negs	r3, r3
 8009734:	429a      	cmp	r2, r3
 8009736:	da06      	bge.n	8009746 <Motor_DutyCycle_LB+0x46>
		DutyCycle_LB = -DutyCycle_LB_MAX;
 8009738:	4b1c      	ldr	r3, [pc, #112]	@ (80097ac <Motor_DutyCycle_LB+0xac>)
 800973a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800973e:	b29b      	uxth	r3, r3
 8009740:	425b      	negs	r3, r3
 8009742:	b29b      	uxth	r3, r3
 8009744:	80fb      	strh	r3, [r7, #6]
	}

	LB_PWM->Instance->CCR1 = (DutyCycle_LB > 0) ? (int16_t)DutyCycle_LB : (DutyCycle_LB_MAX + (int16_t)DutyCycle_LB);
 8009746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800974a:	2b00      	cmp	r3, #0
 800974c:	dd02      	ble.n	8009754 <Motor_DutyCycle_LB+0x54>
 800974e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009752:	e006      	b.n	8009762 <Motor_DutyCycle_LB+0x62>
 8009754:	4b15      	ldr	r3, [pc, #84]	@ (80097ac <Motor_DutyCycle_LB+0xac>)
 8009756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800975a:	461a      	mov	r2, r3
 800975c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009760:	4413      	add	r3, r2
 8009762:	4a13      	ldr	r2, [pc, #76]	@ (80097b0 <Motor_DutyCycle_LB+0xb0>)
 8009764:	6812      	ldr	r2, [r2, #0]
 8009766:	6812      	ldr	r2, [r2, #0]
 8009768:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_LB , (DutyCycle_LB < 0) ? 1 : 0);
 800976a:	4b12      	ldr	r3, [pc, #72]	@ (80097b4 <Motor_DutyCycle_LB+0xb4>)
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009772:	13db      	asrs	r3, r3, #15
 8009774:	b21b      	sxth	r3, r3
 8009776:	b2db      	uxtb	r3, r3
 8009778:	f003 0301 	and.w	r3, r3, #1
 800977c:	b2db      	uxtb	r3, r3
 800977e:	4619      	mov	r1, r3
 8009780:	4610      	mov	r0, r2
 8009782:	f000 fb45 	bl	8009e10 <digitalWrite>

	if(DutyCycle_LB == 0){
 8009786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d10a      	bne.n	80097a4 <Motor_DutyCycle_LB+0xa4>
	   LB_PWM->Instance->CCR1 = 0;
 800978e:	4b08      	ldr	r3, [pc, #32]	@ (80097b0 <Motor_DutyCycle_LB+0xb0>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2200      	movs	r2, #0
 8009796:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_LB ,0);
 8009798:	4b06      	ldr	r3, [pc, #24]	@ (80097b4 <Motor_DutyCycle_LB+0xb4>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2100      	movs	r1, #0
 800979e:	4618      	mov	r0, r3
 80097a0:	f000 fb36 	bl	8009e10 <digitalWrite>
	}
}
 80097a4:	bf00      	nop
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	200006e6 	.word	0x200006e6
 80097b0:	200006d0 	.word	0x200006d0
 80097b4:	200006f4 	.word	0x200006f4

080097b8 <Motor_DutyCycle_RF>:

void Motor_DutyCycle_RF(int16_t DutyCycle_RF){
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	4603      	mov	r3, r0
 80097c0:	80fb      	strh	r3, [r7, #6]
	DutyCycle_RF = -DutyCycle_RF;
 80097c2:	88fb      	ldrh	r3, [r7, #6]
 80097c4:	425b      	negs	r3, r3
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_RF > DutyCycle_RF_MAX) {
 80097ca:	4b26      	ldr	r3, [pc, #152]	@ (8009864 <Motor_DutyCycle_RF+0xac>)
 80097cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	dd03      	ble.n	80097e0 <Motor_DutyCycle_RF+0x28>
		DutyCycle_RF = DutyCycle_RF_MAX;
 80097d8:	4b22      	ldr	r3, [pc, #136]	@ (8009864 <Motor_DutyCycle_RF+0xac>)
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	80fb      	strh	r3, [r7, #6]
 80097de:	e00e      	b.n	80097fe <Motor_DutyCycle_RF+0x46>
	} else if (DutyCycle_RF < -DutyCycle_RF_MAX) {
 80097e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80097e4:	4b1f      	ldr	r3, [pc, #124]	@ (8009864 <Motor_DutyCycle_RF+0xac>)
 80097e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097ea:	425b      	negs	r3, r3
 80097ec:	429a      	cmp	r2, r3
 80097ee:	da06      	bge.n	80097fe <Motor_DutyCycle_RF+0x46>
		DutyCycle_RF = -DutyCycle_RF_MAX;
 80097f0:	4b1c      	ldr	r3, [pc, #112]	@ (8009864 <Motor_DutyCycle_RF+0xac>)
 80097f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	425b      	negs	r3, r3
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	80fb      	strh	r3, [r7, #6]
	}

	RF_PWM->Instance->CCR1 = (DutyCycle_RF > 0) ? (int16_t)DutyCycle_RF : (DutyCycle_RF_MAX + (int16_t)DutyCycle_RF);
 80097fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009802:	2b00      	cmp	r3, #0
 8009804:	dd02      	ble.n	800980c <Motor_DutyCycle_RF+0x54>
 8009806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800980a:	e006      	b.n	800981a <Motor_DutyCycle_RF+0x62>
 800980c:	4b15      	ldr	r3, [pc, #84]	@ (8009864 <Motor_DutyCycle_RF+0xac>)
 800980e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009812:	461a      	mov	r2, r3
 8009814:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009818:	4413      	add	r3, r2
 800981a:	4a13      	ldr	r2, [pc, #76]	@ (8009868 <Motor_DutyCycle_RF+0xb0>)
 800981c:	6812      	ldr	r2, [r2, #0]
 800981e:	6812      	ldr	r2, [r2, #0]
 8009820:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_RF , (DutyCycle_RF < 0) ? 1 : 0);
 8009822:	4b12      	ldr	r3, [pc, #72]	@ (800986c <Motor_DutyCycle_RF+0xb4>)
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800982a:	13db      	asrs	r3, r3, #15
 800982c:	b21b      	sxth	r3, r3
 800982e:	b2db      	uxtb	r3, r3
 8009830:	f003 0301 	and.w	r3, r3, #1
 8009834:	b2db      	uxtb	r3, r3
 8009836:	4619      	mov	r1, r3
 8009838:	4610      	mov	r0, r2
 800983a:	f000 fae9 	bl	8009e10 <digitalWrite>

	if(DutyCycle_RF == 0){
 800983e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10a      	bne.n	800985c <Motor_DutyCycle_RF+0xa4>
	   RF_PWM->Instance->CCR1 = 0;
 8009846:	4b08      	ldr	r3, [pc, #32]	@ (8009868 <Motor_DutyCycle_RF+0xb0>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2200      	movs	r2, #0
 800984e:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_RF ,0);
 8009850:	4b06      	ldr	r3, [pc, #24]	@ (800986c <Motor_DutyCycle_RF+0xb4>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2100      	movs	r1, #0
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fada 	bl	8009e10 <digitalWrite>
	}
}
 800985c:	bf00      	nop
 800985e:	3708      	adds	r7, #8
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	200006e8 	.word	0x200006e8
 8009868:	200006d4 	.word	0x200006d4
 800986c:	200006f8 	.word	0x200006f8

08009870 <Motor_DutyCycle_RB>:

void Motor_DutyCycle_RB(int16_t DutyCycle_RB){
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	4603      	mov	r3, r0
 8009878:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_RB > DutyCycle_RB_MAX) {
 800987a:	4b26      	ldr	r3, [pc, #152]	@ (8009914 <Motor_DutyCycle_RB+0xa4>)
 800987c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009880:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009884:	429a      	cmp	r2, r3
 8009886:	dd03      	ble.n	8009890 <Motor_DutyCycle_RB+0x20>
		DutyCycle_RB = DutyCycle_RB_MAX;
 8009888:	4b22      	ldr	r3, [pc, #136]	@ (8009914 <Motor_DutyCycle_RB+0xa4>)
 800988a:	881b      	ldrh	r3, [r3, #0]
 800988c:	80fb      	strh	r3, [r7, #6]
 800988e:	e00e      	b.n	80098ae <Motor_DutyCycle_RB+0x3e>
	} else if (DutyCycle_RB < -DutyCycle_RB_MAX) {
 8009890:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009894:	4b1f      	ldr	r3, [pc, #124]	@ (8009914 <Motor_DutyCycle_RB+0xa4>)
 8009896:	f9b3 3000 	ldrsh.w	r3, [r3]
 800989a:	425b      	negs	r3, r3
 800989c:	429a      	cmp	r2, r3
 800989e:	da06      	bge.n	80098ae <Motor_DutyCycle_RB+0x3e>
	    DutyCycle_RB = -DutyCycle_RB_MAX;
 80098a0:	4b1c      	ldr	r3, [pc, #112]	@ (8009914 <Motor_DutyCycle_RB+0xa4>)
 80098a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	425b      	negs	r3, r3
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	80fb      	strh	r3, [r7, #6]
	}

	RB_PWM->Instance->CCR2 = (DutyCycle_RB > 0) ? (int16_t)DutyCycle_RB : (DutyCycle_RB_MAX + (int16_t)DutyCycle_RB);
 80098ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	dd02      	ble.n	80098bc <Motor_DutyCycle_RB+0x4c>
 80098b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80098ba:	e006      	b.n	80098ca <Motor_DutyCycle_RB+0x5a>
 80098bc:	4b15      	ldr	r3, [pc, #84]	@ (8009914 <Motor_DutyCycle_RB+0xa4>)
 80098be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098c2:	461a      	mov	r2, r3
 80098c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80098c8:	4413      	add	r3, r2
 80098ca:	4a13      	ldr	r2, [pc, #76]	@ (8009918 <Motor_DutyCycle_RB+0xa8>)
 80098cc:	6812      	ldr	r2, [r2, #0]
 80098ce:	6812      	ldr	r2, [r2, #0]
 80098d0:	6393      	str	r3, [r2, #56]	@ 0x38

	digitalWrite(IN_RB , (DutyCycle_RB < 0) ? 1 : 0);
 80098d2:	4b12      	ldr	r3, [pc, #72]	@ (800991c <Motor_DutyCycle_RB+0xac>)
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80098da:	13db      	asrs	r3, r3, #15
 80098dc:	b21b      	sxth	r3, r3
 80098de:	b2db      	uxtb	r3, r3
 80098e0:	f003 0301 	and.w	r3, r3, #1
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	4619      	mov	r1, r3
 80098e8:	4610      	mov	r0, r2
 80098ea:	f000 fa91 	bl	8009e10 <digitalWrite>

	if(DutyCycle_RB == 0){
 80098ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d10a      	bne.n	800990c <Motor_DutyCycle_RB+0x9c>
	    RB_PWM->Instance->CCR2 = 0;
 80098f6:	4b08      	ldr	r3, [pc, #32]	@ (8009918 <Motor_DutyCycle_RB+0xa8>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2200      	movs	r2, #0
 80098fe:	639a      	str	r2, [r3, #56]	@ 0x38
		digitalWrite(IN_RB ,0);
 8009900:	4b06      	ldr	r3, [pc, #24]	@ (800991c <Motor_DutyCycle_RB+0xac>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2100      	movs	r1, #0
 8009906:	4618      	mov	r0, r3
 8009908:	f000 fa82 	bl	8009e10 <digitalWrite>
	}
}
 800990c:	bf00      	nop
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	200006ea 	.word	0x200006ea
 8009918:	200006d8 	.word	0x200006d8
 800991c:	200006fc 	.word	0x200006fc

08009920 <Motor_DutyCycle_EXTRA1>:

void Motor_DutyCycle_EXTRA1(int16_t DutyCycle_EXTRA1){
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	4603      	mov	r3, r0
 8009928:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_EXTRA1 > DutyCycle_EXTRA1_MAX) {
 800992a:	4b26      	ldr	r3, [pc, #152]	@ (80099c4 <Motor_DutyCycle_EXTRA1+0xa4>)
 800992c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009930:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009934:	429a      	cmp	r2, r3
 8009936:	dd03      	ble.n	8009940 <Motor_DutyCycle_EXTRA1+0x20>
		DutyCycle_EXTRA1 = DutyCycle_EXTRA1_MAX;
 8009938:	4b22      	ldr	r3, [pc, #136]	@ (80099c4 <Motor_DutyCycle_EXTRA1+0xa4>)
 800993a:	881b      	ldrh	r3, [r3, #0]
 800993c:	80fb      	strh	r3, [r7, #6]
 800993e:	e00e      	b.n	800995e <Motor_DutyCycle_EXTRA1+0x3e>
	} else if (DutyCycle_EXTRA1 < -DutyCycle_EXTRA1_MAX) {
 8009940:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009944:	4b1f      	ldr	r3, [pc, #124]	@ (80099c4 <Motor_DutyCycle_EXTRA1+0xa4>)
 8009946:	f9b3 3000 	ldrsh.w	r3, [r3]
 800994a:	425b      	negs	r3, r3
 800994c:	429a      	cmp	r2, r3
 800994e:	da06      	bge.n	800995e <Motor_DutyCycle_EXTRA1+0x3e>
		DutyCycle_EXTRA1 = -DutyCycle_EXTRA1_MAX;
 8009950:	4b1c      	ldr	r3, [pc, #112]	@ (80099c4 <Motor_DutyCycle_EXTRA1+0xa4>)
 8009952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009956:	b29b      	uxth	r3, r3
 8009958:	425b      	negs	r3, r3
 800995a:	b29b      	uxth	r3, r3
 800995c:	80fb      	strh	r3, [r7, #6]
	}

	EXTRA1_PWM->Instance->CCR1 = (DutyCycle_EXTRA1 > 0) ? (int16_t)DutyCycle_EXTRA1 : (DutyCycle_EXTRA1_MAX + (int16_t)DutyCycle_EXTRA1);
 800995e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009962:	2b00      	cmp	r3, #0
 8009964:	dd02      	ble.n	800996c <Motor_DutyCycle_EXTRA1+0x4c>
 8009966:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800996a:	e006      	b.n	800997a <Motor_DutyCycle_EXTRA1+0x5a>
 800996c:	4b15      	ldr	r3, [pc, #84]	@ (80099c4 <Motor_DutyCycle_EXTRA1+0xa4>)
 800996e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009972:	461a      	mov	r2, r3
 8009974:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009978:	4413      	add	r3, r2
 800997a:	4a13      	ldr	r2, [pc, #76]	@ (80099c8 <Motor_DutyCycle_EXTRA1+0xa8>)
 800997c:	6812      	ldr	r2, [r2, #0]
 800997e:	6812      	ldr	r2, [r2, #0]
 8009980:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_EXTRA1 , (DutyCycle_EXTRA1 < 0) ? 1 : 0);
 8009982:	4b12      	ldr	r3, [pc, #72]	@ (80099cc <Motor_DutyCycle_EXTRA1+0xac>)
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800998a:	13db      	asrs	r3, r3, #15
 800998c:	b21b      	sxth	r3, r3
 800998e:	b2db      	uxtb	r3, r3
 8009990:	f003 0301 	and.w	r3, r3, #1
 8009994:	b2db      	uxtb	r3, r3
 8009996:	4619      	mov	r1, r3
 8009998:	4610      	mov	r0, r2
 800999a:	f000 fa39 	bl	8009e10 <digitalWrite>

	if(DutyCycle_EXTRA1 == 0){
 800999e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10a      	bne.n	80099bc <Motor_DutyCycle_EXTRA1+0x9c>
		EXTRA1_PWM->Instance->CCR1 = 0;
 80099a6:	4b08      	ldr	r3, [pc, #32]	@ (80099c8 <Motor_DutyCycle_EXTRA1+0xa8>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2200      	movs	r2, #0
 80099ae:	635a      	str	r2, [r3, #52]	@ 0x34
	    digitalWrite(IN_EXTRA1 ,0);
 80099b0:	4b06      	ldr	r3, [pc, #24]	@ (80099cc <Motor_DutyCycle_EXTRA1+0xac>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2100      	movs	r1, #0
 80099b6:	4618      	mov	r0, r3
 80099b8:	f000 fa2a 	bl	8009e10 <digitalWrite>
	}
}
 80099bc:	bf00      	nop
 80099be:	3708      	adds	r7, #8
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	200006ec 	.word	0x200006ec
 80099c8:	200006dc 	.word	0x200006dc
 80099cc:	20000700 	.word	0x20000700

080099d0 <Motor_DutyCycle_EXTRA2>:

void Motor_DutyCycle_EXTRA2(int16_t DutyCycle_EXTRA2){
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	4603      	mov	r3, r0
 80099d8:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_EXTRA2 > DutyCycle_EXTRA2_MAX) {
 80099da:	4b26      	ldr	r3, [pc, #152]	@ (8009a74 <Motor_DutyCycle_EXTRA2+0xa4>)
 80099dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80099e4:	429a      	cmp	r2, r3
 80099e6:	dd03      	ble.n	80099f0 <Motor_DutyCycle_EXTRA2+0x20>
		DutyCycle_EXTRA2 = DutyCycle_EXTRA2_MAX;
 80099e8:	4b22      	ldr	r3, [pc, #136]	@ (8009a74 <Motor_DutyCycle_EXTRA2+0xa4>)
 80099ea:	881b      	ldrh	r3, [r3, #0]
 80099ec:	80fb      	strh	r3, [r7, #6]
 80099ee:	e00e      	b.n	8009a0e <Motor_DutyCycle_EXTRA2+0x3e>
	} else if (DutyCycle_EXTRA2 < -DutyCycle_EXTRA2_MAX) {
 80099f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80099f4:	4b1f      	ldr	r3, [pc, #124]	@ (8009a74 <Motor_DutyCycle_EXTRA2+0xa4>)
 80099f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099fa:	425b      	negs	r3, r3
 80099fc:	429a      	cmp	r2, r3
 80099fe:	da06      	bge.n	8009a0e <Motor_DutyCycle_EXTRA2+0x3e>
		DutyCycle_EXTRA2 = -DutyCycle_EXTRA2_MAX;
 8009a00:	4b1c      	ldr	r3, [pc, #112]	@ (8009a74 <Motor_DutyCycle_EXTRA2+0xa4>)
 8009a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	425b      	negs	r3, r3
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	80fb      	strh	r3, [r7, #6]
	}

	EXTRA2_PWM->Instance->CCR1 = (DutyCycle_EXTRA2 > 0) ? (int16_t)DutyCycle_EXTRA2 : (DutyCycle_EXTRA2_MAX + (int16_t)DutyCycle_EXTRA2);
 8009a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	dd02      	ble.n	8009a1c <Motor_DutyCycle_EXTRA2+0x4c>
 8009a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a1a:	e006      	b.n	8009a2a <Motor_DutyCycle_EXTRA2+0x5a>
 8009a1c:	4b15      	ldr	r3, [pc, #84]	@ (8009a74 <Motor_DutyCycle_EXTRA2+0xa4>)
 8009a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a22:	461a      	mov	r2, r3
 8009a24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a28:	4413      	add	r3, r2
 8009a2a:	4a13      	ldr	r2, [pc, #76]	@ (8009a78 <Motor_DutyCycle_EXTRA2+0xa8>)
 8009a2c:	6812      	ldr	r2, [r2, #0]
 8009a2e:	6812      	ldr	r2, [r2, #0]
 8009a30:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_EXTRA2 , (DutyCycle_EXTRA2 < 0) ? 1 : 0);
 8009a32:	4b12      	ldr	r3, [pc, #72]	@ (8009a7c <Motor_DutyCycle_EXTRA2+0xac>)
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a3a:	13db      	asrs	r3, r3, #15
 8009a3c:	b21b      	sxth	r3, r3
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	f003 0301 	and.w	r3, r3, #1
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	4619      	mov	r1, r3
 8009a48:	4610      	mov	r0, r2
 8009a4a:	f000 f9e1 	bl	8009e10 <digitalWrite>

	if(DutyCycle_EXTRA2 == 0){
 8009a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d10a      	bne.n	8009a6c <Motor_DutyCycle_EXTRA2+0x9c>
	     EXTRA2_PWM->Instance->CCR1 = 0;
 8009a56:	4b08      	ldr	r3, [pc, #32]	@ (8009a78 <Motor_DutyCycle_EXTRA2+0xa8>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	635a      	str	r2, [r3, #52]	@ 0x34
		 digitalWrite(IN_EXTRA2 ,0);
 8009a60:	4b06      	ldr	r3, [pc, #24]	@ (8009a7c <Motor_DutyCycle_EXTRA2+0xac>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2100      	movs	r1, #0
 8009a66:	4618      	mov	r0, r3
 8009a68:	f000 f9d2 	bl	8009e10 <digitalWrite>
	}
}
 8009a6c:	bf00      	nop
 8009a6e:	3708      	adds	r7, #8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	200006ee 	.word	0x200006ee
 8009a78:	200006e0 	.word	0x200006e0
 8009a7c:	20000704 	.word	0x20000704

08009a80 <Motor_Speed_LF>:

int16_t Duty_Cycle[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float Motor_Speed_LF(int16_t RPM_INPUT ,float RPM_LF){
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	4603      	mov	r3, r0
 8009a88:	ed87 0a00 	vstr	s0, [r7]
 8009a8c:	80fb      	strh	r3, [r7, #6]
	if (RPM_LF > max_speed[0]) {
 8009a8e:	4b30      	ldr	r3, [pc, #192]	@ (8009b50 <Motor_Speed_LF+0xd0>)
 8009a90:	edd3 7a00 	vldr	s15, [r3]
 8009a94:	ed97 7a00 	vldr	s14, [r7]
 8009a98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aa0:	dd03      	ble.n	8009aaa <Motor_Speed_LF+0x2a>
	   RPM_LF = max_speed[0];
 8009aa2:	4b2b      	ldr	r3, [pc, #172]	@ (8009b50 <Motor_Speed_LF+0xd0>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	603b      	str	r3, [r7, #0]
 8009aa8:	e012      	b.n	8009ad0 <Motor_Speed_LF+0x50>
	} else if (RPM_LF < -max_speed[0]) {
 8009aaa:	4b29      	ldr	r3, [pc, #164]	@ (8009b50 <Motor_Speed_LF+0xd0>)
 8009aac:	edd3 7a00 	vldr	s15, [r3]
 8009ab0:	eef1 7a67 	vneg.f32	s15, s15
 8009ab4:	ed97 7a00 	vldr	s14, [r7]
 8009ab8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ac0:	d506      	bpl.n	8009ad0 <Motor_Speed_LF+0x50>
	   RPM_LF = -max_speed[0];
 8009ac2:	4b23      	ldr	r3, [pc, #140]	@ (8009b50 <Motor_Speed_LF+0xd0>)
 8009ac4:	edd3 7a00 	vldr	s15, [r3]
 8009ac8:	eef1 7a67 	vneg.f32	s15, s15
 8009acc:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_LF , 0);
 8009ad0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009ad4:	ee07 3a90 	vmov	s15, r3
 8009ad8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009adc:	edd7 7a00 	vldr	s15, [r7]
 8009ae0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ae4:	ee17 3a90 	vmov	r3, s15
 8009ae8:	b21b      	sxth	r3, r3
 8009aea:	2100      	movs	r1, #0
 8009aec:	4618      	mov	r0, r3
 8009aee:	eeb0 0a47 	vmov.f32	s0, s14
 8009af2:	f7ff fd03 	bl	80094fc <PID_Speed>

	Duty_Cycle[0] = (int16_t)((Output_PID[0] / ((float)(max_speed[0] - min_speed[0]))) * DutyCycle_LF_MAX);
 8009af6:	4b17      	ldr	r3, [pc, #92]	@ (8009b54 <Motor_Speed_LF+0xd4>)
 8009af8:	edd3 6a00 	vldr	s13, [r3]
 8009afc:	4b14      	ldr	r3, [pc, #80]	@ (8009b50 <Motor_Speed_LF+0xd0>)
 8009afe:	ed93 7a00 	vldr	s14, [r3]
 8009b02:	4b15      	ldr	r3, [pc, #84]	@ (8009b58 <Motor_Speed_LF+0xd8>)
 8009b04:	edd3 7a00 	vldr	s15, [r3]
 8009b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b10:	4b12      	ldr	r3, [pc, #72]	@ (8009b5c <Motor_Speed_LF+0xdc>)
 8009b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b16:	ee07 3a90 	vmov	s15, r3
 8009b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009b26:	ee17 3a90 	vmov	r3, s15
 8009b2a:	b21a      	sxth	r2, r3
 8009b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8009b60 <Motor_Speed_LF+0xe0>)
 8009b2e:	801a      	strh	r2, [r3, #0]

	Motor_DutyCycle_LF(Duty_Cycle[0]);
 8009b30:	4b0b      	ldr	r3, [pc, #44]	@ (8009b60 <Motor_Speed_LF+0xe0>)
 8009b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7ff fd8a 	bl	8009650 <Motor_DutyCycle_LF>

//	return _RPM[0];
	return Output_PID[0];
 8009b3c:	4b05      	ldr	r3, [pc, #20]	@ (8009b54 <Motor_Speed_LF+0xd4>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	ee07 3a90 	vmov	s15, r3
}
 8009b44:	eeb0 0a67 	vmov.f32	s0, s15
 8009b48:	3708      	adds	r7, #8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	20000798 	.word	0x20000798
 8009b54:	20000828 	.word	0x20000828
 8009b58:	20000780 	.word	0x20000780
 8009b5c:	200006e4 	.word	0x200006e4
 8009b60:	20000840 	.word	0x20000840

08009b64 <Motor_Speed_LB>:

float Motor_Speed_LB(int16_t RPM_INPUT ,float RPM_LB){
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	ed87 0a00 	vstr	s0, [r7]
 8009b70:	80fb      	strh	r3, [r7, #6]
	if (RPM_LB > max_speed[1]) {
 8009b72:	4b30      	ldr	r3, [pc, #192]	@ (8009c34 <Motor_Speed_LB+0xd0>)
 8009b74:	edd3 7a01 	vldr	s15, [r3, #4]
 8009b78:	ed97 7a00 	vldr	s14, [r7]
 8009b7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b84:	dd03      	ble.n	8009b8e <Motor_Speed_LB+0x2a>
	   RPM_LB = max_speed[1];
 8009b86:	4b2b      	ldr	r3, [pc, #172]	@ (8009c34 <Motor_Speed_LB+0xd0>)
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	603b      	str	r3, [r7, #0]
 8009b8c:	e012      	b.n	8009bb4 <Motor_Speed_LB+0x50>
	} else if (RPM_LB < -max_speed[1]) {
 8009b8e:	4b29      	ldr	r3, [pc, #164]	@ (8009c34 <Motor_Speed_LB+0xd0>)
 8009b90:	edd3 7a01 	vldr	s15, [r3, #4]
 8009b94:	eef1 7a67 	vneg.f32	s15, s15
 8009b98:	ed97 7a00 	vldr	s14, [r7]
 8009b9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba4:	d506      	bpl.n	8009bb4 <Motor_Speed_LB+0x50>
	   RPM_LB = -max_speed[1];
 8009ba6:	4b23      	ldr	r3, [pc, #140]	@ (8009c34 <Motor_Speed_LB+0xd0>)
 8009ba8:	edd3 7a01 	vldr	s15, [r3, #4]
 8009bac:	eef1 7a67 	vneg.f32	s15, s15
 8009bb0:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_LB ,1);
 8009bb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009bb8:	ee07 3a90 	vmov	s15, r3
 8009bbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009bc0:	edd7 7a00 	vldr	s15, [r7]
 8009bc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009bc8:	ee17 3a90 	vmov	r3, s15
 8009bcc:	b21b      	sxth	r3, r3
 8009bce:	2101      	movs	r1, #1
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	eeb0 0a47 	vmov.f32	s0, s14
 8009bd6:	f7ff fc91 	bl	80094fc <PID_Speed>

	Duty_Cycle[1] = (int16_t)((Output_PID[1]/((float)(max_speed[1] - min_speed[1]))) * DutyCycle_LB_MAX);
 8009bda:	4b17      	ldr	r3, [pc, #92]	@ (8009c38 <Motor_Speed_LB+0xd4>)
 8009bdc:	edd3 6a01 	vldr	s13, [r3, #4]
 8009be0:	4b14      	ldr	r3, [pc, #80]	@ (8009c34 <Motor_Speed_LB+0xd0>)
 8009be2:	ed93 7a01 	vldr	s14, [r3, #4]
 8009be6:	4b15      	ldr	r3, [pc, #84]	@ (8009c3c <Motor_Speed_LB+0xd8>)
 8009be8:	edd3 7a01 	vldr	s15, [r3, #4]
 8009bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bf4:	4b12      	ldr	r3, [pc, #72]	@ (8009c40 <Motor_Speed_LB+0xdc>)
 8009bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bfa:	ee07 3a90 	vmov	s15, r3
 8009bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c0a:	ee17 3a90 	vmov	r3, s15
 8009c0e:	b21a      	sxth	r2, r3
 8009c10:	4b0c      	ldr	r3, [pc, #48]	@ (8009c44 <Motor_Speed_LB+0xe0>)
 8009c12:	805a      	strh	r2, [r3, #2]

	Motor_DutyCycle_LB(Duty_Cycle[1]);
 8009c14:	4b0b      	ldr	r3, [pc, #44]	@ (8009c44 <Motor_Speed_LB+0xe0>)
 8009c16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7ff fd70 	bl	8009700 <Motor_DutyCycle_LB>

//	return _RPM[1];
	return Output_PID[1];
 8009c20:	4b05      	ldr	r3, [pc, #20]	@ (8009c38 <Motor_Speed_LB+0xd4>)
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	ee07 3a90 	vmov	s15, r3
}
 8009c28:	eeb0 0a67 	vmov.f32	s0, s15
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	20000798 	.word	0x20000798
 8009c38:	20000828 	.word	0x20000828
 8009c3c:	20000780 	.word	0x20000780
 8009c40:	200006e6 	.word	0x200006e6
 8009c44:	20000840 	.word	0x20000840

08009c48 <Motor_Speed_RF>:

float Motor_Speed_RF(int16_t RPM_INPUT ,float RPM_RF){
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	4603      	mov	r3, r0
 8009c50:	ed87 0a00 	vstr	s0, [r7]
 8009c54:	80fb      	strh	r3, [r7, #6]
	if (RPM_RF > max_speed[2]) {
 8009c56:	4b30      	ldr	r3, [pc, #192]	@ (8009d18 <Motor_Speed_RF+0xd0>)
 8009c58:	edd3 7a02 	vldr	s15, [r3, #8]
 8009c5c:	ed97 7a00 	vldr	s14, [r7]
 8009c60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c68:	dd03      	ble.n	8009c72 <Motor_Speed_RF+0x2a>
	   RPM_RF = max_speed[2];
 8009c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8009d18 <Motor_Speed_RF+0xd0>)
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	603b      	str	r3, [r7, #0]
 8009c70:	e012      	b.n	8009c98 <Motor_Speed_RF+0x50>
	} else if (RPM_RF < -max_speed[2]) {
 8009c72:	4b29      	ldr	r3, [pc, #164]	@ (8009d18 <Motor_Speed_RF+0xd0>)
 8009c74:	edd3 7a02 	vldr	s15, [r3, #8]
 8009c78:	eef1 7a67 	vneg.f32	s15, s15
 8009c7c:	ed97 7a00 	vldr	s14, [r7]
 8009c80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c88:	d506      	bpl.n	8009c98 <Motor_Speed_RF+0x50>
	   RPM_RF = -max_speed[2];
 8009c8a:	4b23      	ldr	r3, [pc, #140]	@ (8009d18 <Motor_Speed_RF+0xd0>)
 8009c8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8009c90:	eef1 7a67 	vneg.f32	s15, s15
 8009c94:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_RF ,2);
 8009c98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c9c:	ee07 3a90 	vmov	s15, r3
 8009ca0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009ca4:	edd7 7a00 	vldr	s15, [r7]
 8009ca8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009cac:	ee17 3a90 	vmov	r3, s15
 8009cb0:	b21b      	sxth	r3, r3
 8009cb2:	2102      	movs	r1, #2
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	eeb0 0a47 	vmov.f32	s0, s14
 8009cba:	f7ff fc1f 	bl	80094fc <PID_Speed>

	Duty_Cycle[2] = (int16_t)((Output_PID[2]/((float)(max_speed[2] - min_speed[2]))) * DutyCycle_RF_MAX);
 8009cbe:	4b17      	ldr	r3, [pc, #92]	@ (8009d1c <Motor_Speed_RF+0xd4>)
 8009cc0:	edd3 6a02 	vldr	s13, [r3, #8]
 8009cc4:	4b14      	ldr	r3, [pc, #80]	@ (8009d18 <Motor_Speed_RF+0xd0>)
 8009cc6:	ed93 7a02 	vldr	s14, [r3, #8]
 8009cca:	4b15      	ldr	r3, [pc, #84]	@ (8009d20 <Motor_Speed_RF+0xd8>)
 8009ccc:	edd3 7a02 	vldr	s15, [r3, #8]
 8009cd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009cd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cd8:	4b12      	ldr	r3, [pc, #72]	@ (8009d24 <Motor_Speed_RF+0xdc>)
 8009cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009cde:	ee07 3a90 	vmov	s15, r3
 8009ce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009cee:	ee17 3a90 	vmov	r3, s15
 8009cf2:	b21a      	sxth	r2, r3
 8009cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8009d28 <Motor_Speed_RF+0xe0>)
 8009cf6:	809a      	strh	r2, [r3, #4]

	Motor_DutyCycle_RF(Duty_Cycle[2]);
 8009cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8009d28 <Motor_Speed_RF+0xe0>)
 8009cfa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7ff fd5a 	bl	80097b8 <Motor_DutyCycle_RF>

//	return _RPM[2];
	return Output_PID[2];
 8009d04:	4b05      	ldr	r3, [pc, #20]	@ (8009d1c <Motor_Speed_RF+0xd4>)
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	ee07 3a90 	vmov	s15, r3
}
 8009d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8009d10:	3708      	adds	r7, #8
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	20000798 	.word	0x20000798
 8009d1c:	20000828 	.word	0x20000828
 8009d20:	20000780 	.word	0x20000780
 8009d24:	200006e8 	.word	0x200006e8
 8009d28:	20000840 	.word	0x20000840

08009d2c <Motor_Speed_RB>:

float Motor_Speed_RB(int16_t RPM_INPUT ,float RPM_RB){
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	4603      	mov	r3, r0
 8009d34:	ed87 0a00 	vstr	s0, [r7]
 8009d38:	80fb      	strh	r3, [r7, #6]
	if (RPM_RB > max_speed[3]) {
 8009d3a:	4b30      	ldr	r3, [pc, #192]	@ (8009dfc <Motor_Speed_RB+0xd0>)
 8009d3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8009d40:	ed97 7a00 	vldr	s14, [r7]
 8009d44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d4c:	dd03      	ble.n	8009d56 <Motor_Speed_RB+0x2a>
		RPM_RB = max_speed[3];
 8009d4e:	4b2b      	ldr	r3, [pc, #172]	@ (8009dfc <Motor_Speed_RB+0xd0>)
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	603b      	str	r3, [r7, #0]
 8009d54:	e012      	b.n	8009d7c <Motor_Speed_RB+0x50>
	} else if (RPM_RB < -max_speed[3]) {
 8009d56:	4b29      	ldr	r3, [pc, #164]	@ (8009dfc <Motor_Speed_RB+0xd0>)
 8009d58:	edd3 7a03 	vldr	s15, [r3, #12]
 8009d5c:	eef1 7a67 	vneg.f32	s15, s15
 8009d60:	ed97 7a00 	vldr	s14, [r7]
 8009d64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d6c:	d506      	bpl.n	8009d7c <Motor_Speed_RB+0x50>
		RPM_RB = -max_speed[3];
 8009d6e:	4b23      	ldr	r3, [pc, #140]	@ (8009dfc <Motor_Speed_RB+0xd0>)
 8009d70:	edd3 7a03 	vldr	s15, [r3, #12]
 8009d74:	eef1 7a67 	vneg.f32	s15, s15
 8009d78:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_RB ,3);
 8009d7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d80:	ee07 3a90 	vmov	s15, r3
 8009d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009d88:	edd7 7a00 	vldr	s15, [r7]
 8009d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d90:	ee17 3a90 	vmov	r3, s15
 8009d94:	b21b      	sxth	r3, r3
 8009d96:	2103      	movs	r1, #3
 8009d98:	4618      	mov	r0, r3
 8009d9a:	eeb0 0a47 	vmov.f32	s0, s14
 8009d9e:	f7ff fbad 	bl	80094fc <PID_Speed>

	Duty_Cycle[3] = (int16_t)((Output_PID[3]/((float)(max_speed[3] - min_speed[3]))) * DutyCycle_RB_MAX);
 8009da2:	4b17      	ldr	r3, [pc, #92]	@ (8009e00 <Motor_Speed_RB+0xd4>)
 8009da4:	edd3 6a03 	vldr	s13, [r3, #12]
 8009da8:	4b14      	ldr	r3, [pc, #80]	@ (8009dfc <Motor_Speed_RB+0xd0>)
 8009daa:	ed93 7a03 	vldr	s14, [r3, #12]
 8009dae:	4b15      	ldr	r3, [pc, #84]	@ (8009e04 <Motor_Speed_RB+0xd8>)
 8009db0:	edd3 7a03 	vldr	s15, [r3, #12]
 8009db4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009db8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dbc:	4b12      	ldr	r3, [pc, #72]	@ (8009e08 <Motor_Speed_RB+0xdc>)
 8009dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009dc2:	ee07 3a90 	vmov	s15, r3
 8009dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009dd2:	ee17 3a90 	vmov	r3, s15
 8009dd6:	b21a      	sxth	r2, r3
 8009dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8009e0c <Motor_Speed_RB+0xe0>)
 8009dda:	80da      	strh	r2, [r3, #6]

	Motor_DutyCycle_RB(Duty_Cycle[3]);
 8009ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8009e0c <Motor_Speed_RB+0xe0>)
 8009dde:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7ff fd44 	bl	8009870 <Motor_DutyCycle_RB>

//	return _RPM[3];
	return Output_PID[3];
 8009de8:	4b05      	ldr	r3, [pc, #20]	@ (8009e00 <Motor_Speed_RB+0xd4>)
 8009dea:	68db      	ldr	r3, [r3, #12]
 8009dec:	ee07 3a90 	vmov	s15, r3
}
 8009df0:	eeb0 0a67 	vmov.f32	s0, s15
 8009df4:	3708      	adds	r7, #8
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	20000798 	.word	0x20000798
 8009e00:	20000828 	.word	0x20000828
 8009e04:	20000780 	.word	0x20000780
 8009e08:	200006ea 	.word	0x200006ea
 8009e0c:	20000840 	.word	0x20000840

08009e10 <digitalWrite>:

//	return _RPM[5];
	return Output_PID[5];
}

void digitalWrite(char* _PIN , uint8_t vlue){
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	460b      	mov	r3, r1
 8009e1a:	70fb      	strb	r3, [r7, #3]
	uint8_t PIN = (_PIN[2] - '0') * 10 + (_PIN[3] - '0');
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	3302      	adds	r3, #2
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	3b30      	subs	r3, #48	@ 0x30
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	461a      	mov	r2, r3
 8009e28:	0092      	lsls	r2, r2, #2
 8009e2a:	4413      	add	r3, r2
 8009e2c:	005b      	lsls	r3, r3, #1
 8009e2e:	b2da      	uxtb	r2, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	3303      	adds	r3, #3
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	4413      	add	r3, r2
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	3b30      	subs	r3, #48	@ 0x30
 8009e3c:	73fb      	strb	r3, [r7, #15]

	if (_PIN[1] == 'A') {
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	3301      	adds	r3, #1
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	2b41      	cmp	r3, #65	@ 0x41
 8009e46:	f040 809f 	bne.w	8009f88 <digitalWrite+0x178>
	        switch (PIN) {
 8009e4a:	7bfb      	ldrb	r3, [r7, #15]
 8009e4c:	2b0f      	cmp	r3, #15
 8009e4e:	f200 833f 	bhi.w	800a4d0 <digitalWrite+0x6c0>
 8009e52:	a201      	add	r2, pc, #4	@ (adr r2, 8009e58 <digitalWrite+0x48>)
 8009e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e58:	08009e99 	.word	0x08009e99
 8009e5c:	08009ea7 	.word	0x08009ea7
 8009e60:	08009eb5 	.word	0x08009eb5
 8009e64:	08009ec3 	.word	0x08009ec3
 8009e68:	08009ed1 	.word	0x08009ed1
 8009e6c:	08009edf 	.word	0x08009edf
 8009e70:	08009eed 	.word	0x08009eed
 8009e74:	08009efb 	.word	0x08009efb
 8009e78:	08009f09 	.word	0x08009f09
 8009e7c:	08009f19 	.word	0x08009f19
 8009e80:	08009f29 	.word	0x08009f29
 8009e84:	08009f39 	.word	0x08009f39
 8009e88:	08009f49 	.word	0x08009f49
 8009e8c:	08009f59 	.word	0x08009f59
 8009e90:	08009f69 	.word	0x08009f69
 8009e94:	08009f79 	.word	0x08009f79
	            case 0: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, vlue); break;
 8009e98:	78fb      	ldrb	r3, [r7, #3]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	2101      	movs	r1, #1
 8009e9e:	48bd      	ldr	r0, [pc, #756]	@ (800a194 <digitalWrite+0x384>)
 8009ea0:	f7f9 fda8 	bl	80039f4 <HAL_GPIO_WritePin>
 8009ea4:	e314      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, vlue); break;
 8009ea6:	78fb      	ldrb	r3, [r7, #3]
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	2102      	movs	r1, #2
 8009eac:	48b9      	ldr	r0, [pc, #740]	@ (800a194 <digitalWrite+0x384>)
 8009eae:	f7f9 fda1 	bl	80039f4 <HAL_GPIO_WritePin>
 8009eb2:	e30d      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, vlue); break;
 8009eb4:	78fb      	ldrb	r3, [r7, #3]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	2104      	movs	r1, #4
 8009eba:	48b6      	ldr	r0, [pc, #728]	@ (800a194 <digitalWrite+0x384>)
 8009ebc:	f7f9 fd9a 	bl	80039f4 <HAL_GPIO_WritePin>
 8009ec0:	e306      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, vlue); break;
 8009ec2:	78fb      	ldrb	r3, [r7, #3]
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	2108      	movs	r1, #8
 8009ec8:	48b2      	ldr	r0, [pc, #712]	@ (800a194 <digitalWrite+0x384>)
 8009eca:	f7f9 fd93 	bl	80039f4 <HAL_GPIO_WritePin>
 8009ece:	e2ff      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, vlue); break;
 8009ed0:	78fb      	ldrb	r3, [r7, #3]
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	2110      	movs	r1, #16
 8009ed6:	48af      	ldr	r0, [pc, #700]	@ (800a194 <digitalWrite+0x384>)
 8009ed8:	f7f9 fd8c 	bl	80039f4 <HAL_GPIO_WritePin>
 8009edc:	e2f8      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, vlue); break;
 8009ede:	78fb      	ldrb	r3, [r7, #3]
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	2120      	movs	r1, #32
 8009ee4:	48ab      	ldr	r0, [pc, #684]	@ (800a194 <digitalWrite+0x384>)
 8009ee6:	f7f9 fd85 	bl	80039f4 <HAL_GPIO_WritePin>
 8009eea:	e2f1      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, vlue); break;
 8009eec:	78fb      	ldrb	r3, [r7, #3]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	2140      	movs	r1, #64	@ 0x40
 8009ef2:	48a8      	ldr	r0, [pc, #672]	@ (800a194 <digitalWrite+0x384>)
 8009ef4:	f7f9 fd7e 	bl	80039f4 <HAL_GPIO_WritePin>
 8009ef8:	e2ea      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, vlue); break;
 8009efa:	78fb      	ldrb	r3, [r7, #3]
 8009efc:	461a      	mov	r2, r3
 8009efe:	2180      	movs	r1, #128	@ 0x80
 8009f00:	48a4      	ldr	r0, [pc, #656]	@ (800a194 <digitalWrite+0x384>)
 8009f02:	f7f9 fd77 	bl	80039f4 <HAL_GPIO_WritePin>
 8009f06:	e2e3      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, vlue); break;
 8009f08:	78fb      	ldrb	r3, [r7, #3]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009f10:	48a0      	ldr	r0, [pc, #640]	@ (800a194 <digitalWrite+0x384>)
 8009f12:	f7f9 fd6f 	bl	80039f4 <HAL_GPIO_WritePin>
 8009f16:	e2db      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, vlue); break;
 8009f18:	78fb      	ldrb	r3, [r7, #3]
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009f20:	489c      	ldr	r0, [pc, #624]	@ (800a194 <digitalWrite+0x384>)
 8009f22:	f7f9 fd67 	bl	80039f4 <HAL_GPIO_WritePin>
 8009f26:	e2d3      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, vlue); break;
 8009f28:	78fb      	ldrb	r3, [r7, #3]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009f30:	4898      	ldr	r0, [pc, #608]	@ (800a194 <digitalWrite+0x384>)
 8009f32:	f7f9 fd5f 	bl	80039f4 <HAL_GPIO_WritePin>
 8009f36:	e2cb      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, vlue); break;
 8009f38:	78fb      	ldrb	r3, [r7, #3]
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009f40:	4894      	ldr	r0, [pc, #592]	@ (800a194 <digitalWrite+0x384>)
 8009f42:	f7f9 fd57 	bl	80039f4 <HAL_GPIO_WritePin>
 8009f46:	e2c3      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, vlue); break;
 8009f48:	78fb      	ldrb	r3, [r7, #3]
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009f50:	4890      	ldr	r0, [pc, #576]	@ (800a194 <digitalWrite+0x384>)
 8009f52:	f7f9 fd4f 	bl	80039f4 <HAL_GPIO_WritePin>
 8009f56:	e2bb      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, vlue); break;
 8009f58:	78fb      	ldrb	r3, [r7, #3]
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009f60:	488c      	ldr	r0, [pc, #560]	@ (800a194 <digitalWrite+0x384>)
 8009f62:	f7f9 fd47 	bl	80039f4 <HAL_GPIO_WritePin>
 8009f66:	e2b3      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, vlue); break;
 8009f68:	78fb      	ldrb	r3, [r7, #3]
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009f70:	4888      	ldr	r0, [pc, #544]	@ (800a194 <digitalWrite+0x384>)
 8009f72:	f7f9 fd3f 	bl	80039f4 <HAL_GPIO_WritePin>
 8009f76:	e2ab      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, vlue); break;
 8009f78:	78fb      	ldrb	r3, [r7, #3]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009f80:	4884      	ldr	r0, [pc, #528]	@ (800a194 <digitalWrite+0x384>)
 8009f82:	f7f9 fd37 	bl	80039f4 <HAL_GPIO_WritePin>
 8009f86:	e2a3      	b.n	800a4d0 <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'B') {
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	2b42      	cmp	r3, #66	@ 0x42
 8009f90:	f040 80a0 	bne.w	800a0d4 <digitalWrite+0x2c4>
	        switch (PIN) {
 8009f94:	7bfb      	ldrb	r3, [r7, #15]
 8009f96:	2b0f      	cmp	r3, #15
 8009f98:	f200 829a 	bhi.w	800a4d0 <digitalWrite+0x6c0>
 8009f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8009fa4 <digitalWrite+0x194>)
 8009f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa2:	bf00      	nop
 8009fa4:	08009fe5 	.word	0x08009fe5
 8009fa8:	08009ff3 	.word	0x08009ff3
 8009fac:	0800a001 	.word	0x0800a001
 8009fb0:	0800a00f 	.word	0x0800a00f
 8009fb4:	0800a01d 	.word	0x0800a01d
 8009fb8:	0800a02b 	.word	0x0800a02b
 8009fbc:	0800a039 	.word	0x0800a039
 8009fc0:	0800a047 	.word	0x0800a047
 8009fc4:	0800a055 	.word	0x0800a055
 8009fc8:	0800a065 	.word	0x0800a065
 8009fcc:	0800a075 	.word	0x0800a075
 8009fd0:	0800a085 	.word	0x0800a085
 8009fd4:	0800a095 	.word	0x0800a095
 8009fd8:	0800a0a5 	.word	0x0800a0a5
 8009fdc:	0800a0b5 	.word	0x0800a0b5
 8009fe0:	0800a0c5 	.word	0x0800a0c5
	            case 0: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, vlue); break;
 8009fe4:	78fb      	ldrb	r3, [r7, #3]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	2101      	movs	r1, #1
 8009fea:	486b      	ldr	r0, [pc, #428]	@ (800a198 <digitalWrite+0x388>)
 8009fec:	f7f9 fd02 	bl	80039f4 <HAL_GPIO_WritePin>
 8009ff0:	e26e      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, vlue); break;
 8009ff2:	78fb      	ldrb	r3, [r7, #3]
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	2102      	movs	r1, #2
 8009ff8:	4867      	ldr	r0, [pc, #412]	@ (800a198 <digitalWrite+0x388>)
 8009ffa:	f7f9 fcfb 	bl	80039f4 <HAL_GPIO_WritePin>
 8009ffe:	e267      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, vlue); break;
 800a000:	78fb      	ldrb	r3, [r7, #3]
 800a002:	461a      	mov	r2, r3
 800a004:	2104      	movs	r1, #4
 800a006:	4864      	ldr	r0, [pc, #400]	@ (800a198 <digitalWrite+0x388>)
 800a008:	f7f9 fcf4 	bl	80039f4 <HAL_GPIO_WritePin>
 800a00c:	e260      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, vlue); break;
 800a00e:	78fb      	ldrb	r3, [r7, #3]
 800a010:	461a      	mov	r2, r3
 800a012:	2108      	movs	r1, #8
 800a014:	4860      	ldr	r0, [pc, #384]	@ (800a198 <digitalWrite+0x388>)
 800a016:	f7f9 fced 	bl	80039f4 <HAL_GPIO_WritePin>
 800a01a:	e259      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, vlue); break;
 800a01c:	78fb      	ldrb	r3, [r7, #3]
 800a01e:	461a      	mov	r2, r3
 800a020:	2110      	movs	r1, #16
 800a022:	485d      	ldr	r0, [pc, #372]	@ (800a198 <digitalWrite+0x388>)
 800a024:	f7f9 fce6 	bl	80039f4 <HAL_GPIO_WritePin>
 800a028:	e252      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, vlue); break;
 800a02a:	78fb      	ldrb	r3, [r7, #3]
 800a02c:	461a      	mov	r2, r3
 800a02e:	2120      	movs	r1, #32
 800a030:	4859      	ldr	r0, [pc, #356]	@ (800a198 <digitalWrite+0x388>)
 800a032:	f7f9 fcdf 	bl	80039f4 <HAL_GPIO_WritePin>
 800a036:	e24b      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, vlue); break;
 800a038:	78fb      	ldrb	r3, [r7, #3]
 800a03a:	461a      	mov	r2, r3
 800a03c:	2140      	movs	r1, #64	@ 0x40
 800a03e:	4856      	ldr	r0, [pc, #344]	@ (800a198 <digitalWrite+0x388>)
 800a040:	f7f9 fcd8 	bl	80039f4 <HAL_GPIO_WritePin>
 800a044:	e244      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, vlue); break;
 800a046:	78fb      	ldrb	r3, [r7, #3]
 800a048:	461a      	mov	r2, r3
 800a04a:	2180      	movs	r1, #128	@ 0x80
 800a04c:	4852      	ldr	r0, [pc, #328]	@ (800a198 <digitalWrite+0x388>)
 800a04e:	f7f9 fcd1 	bl	80039f4 <HAL_GPIO_WritePin>
 800a052:	e23d      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, vlue); break;
 800a054:	78fb      	ldrb	r3, [r7, #3]
 800a056:	461a      	mov	r2, r3
 800a058:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a05c:	484e      	ldr	r0, [pc, #312]	@ (800a198 <digitalWrite+0x388>)
 800a05e:	f7f9 fcc9 	bl	80039f4 <HAL_GPIO_WritePin>
 800a062:	e235      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, vlue); break;
 800a064:	78fb      	ldrb	r3, [r7, #3]
 800a066:	461a      	mov	r2, r3
 800a068:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a06c:	484a      	ldr	r0, [pc, #296]	@ (800a198 <digitalWrite+0x388>)
 800a06e:	f7f9 fcc1 	bl	80039f4 <HAL_GPIO_WritePin>
 800a072:	e22d      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, vlue); break;
 800a074:	78fb      	ldrb	r3, [r7, #3]
 800a076:	461a      	mov	r2, r3
 800a078:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a07c:	4846      	ldr	r0, [pc, #280]	@ (800a198 <digitalWrite+0x388>)
 800a07e:	f7f9 fcb9 	bl	80039f4 <HAL_GPIO_WritePin>
 800a082:	e225      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, vlue); break;
 800a084:	78fb      	ldrb	r3, [r7, #3]
 800a086:	461a      	mov	r2, r3
 800a088:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a08c:	4842      	ldr	r0, [pc, #264]	@ (800a198 <digitalWrite+0x388>)
 800a08e:	f7f9 fcb1 	bl	80039f4 <HAL_GPIO_WritePin>
 800a092:	e21d      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, vlue); break;
 800a094:	78fb      	ldrb	r3, [r7, #3]
 800a096:	461a      	mov	r2, r3
 800a098:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a09c:	483e      	ldr	r0, [pc, #248]	@ (800a198 <digitalWrite+0x388>)
 800a09e:	f7f9 fca9 	bl	80039f4 <HAL_GPIO_WritePin>
 800a0a2:	e215      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, vlue); break;
 800a0a4:	78fb      	ldrb	r3, [r7, #3]
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a0ac:	483a      	ldr	r0, [pc, #232]	@ (800a198 <digitalWrite+0x388>)
 800a0ae:	f7f9 fca1 	bl	80039f4 <HAL_GPIO_WritePin>
 800a0b2:	e20d      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, vlue); break;
 800a0b4:	78fb      	ldrb	r3, [r7, #3]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a0bc:	4836      	ldr	r0, [pc, #216]	@ (800a198 <digitalWrite+0x388>)
 800a0be:	f7f9 fc99 	bl	80039f4 <HAL_GPIO_WritePin>
 800a0c2:	e205      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, vlue); break;
 800a0c4:	78fb      	ldrb	r3, [r7, #3]
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a0cc:	4832      	ldr	r0, [pc, #200]	@ (800a198 <digitalWrite+0x388>)
 800a0ce:	f7f9 fc91 	bl	80039f4 <HAL_GPIO_WritePin>
 800a0d2:	e1fd      	b.n	800a4d0 <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'C') {
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	2b43      	cmp	r3, #67	@ 0x43
 800a0dc:	f040 80a7 	bne.w	800a22e <digitalWrite+0x41e>
	        switch (PIN) {
 800a0e0:	7bfb      	ldrb	r3, [r7, #15]
 800a0e2:	2b0f      	cmp	r3, #15
 800a0e4:	f200 81f4 	bhi.w	800a4d0 <digitalWrite+0x6c0>
 800a0e8:	a201      	add	r2, pc, #4	@ (adr r2, 800a0f0 <digitalWrite+0x2e0>)
 800a0ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ee:	bf00      	nop
 800a0f0:	0800a131 	.word	0x0800a131
 800a0f4:	0800a13f 	.word	0x0800a13f
 800a0f8:	0800a14d 	.word	0x0800a14d
 800a0fc:	0800a15b 	.word	0x0800a15b
 800a100:	0800a169 	.word	0x0800a169
 800a104:	0800a177 	.word	0x0800a177
 800a108:	0800a185 	.word	0x0800a185
 800a10c:	0800a1a1 	.word	0x0800a1a1
 800a110:	0800a1af 	.word	0x0800a1af
 800a114:	0800a1bf 	.word	0x0800a1bf
 800a118:	0800a1cf 	.word	0x0800a1cf
 800a11c:	0800a1df 	.word	0x0800a1df
 800a120:	0800a1ef 	.word	0x0800a1ef
 800a124:	0800a1ff 	.word	0x0800a1ff
 800a128:	0800a20f 	.word	0x0800a20f
 800a12c:	0800a21f 	.word	0x0800a21f
	            case 0: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, vlue); break;
 800a130:	78fb      	ldrb	r3, [r7, #3]
 800a132:	461a      	mov	r2, r3
 800a134:	2101      	movs	r1, #1
 800a136:	4819      	ldr	r0, [pc, #100]	@ (800a19c <digitalWrite+0x38c>)
 800a138:	f7f9 fc5c 	bl	80039f4 <HAL_GPIO_WritePin>
 800a13c:	e1c8      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, vlue); break;
 800a13e:	78fb      	ldrb	r3, [r7, #3]
 800a140:	461a      	mov	r2, r3
 800a142:	2102      	movs	r1, #2
 800a144:	4815      	ldr	r0, [pc, #84]	@ (800a19c <digitalWrite+0x38c>)
 800a146:	f7f9 fc55 	bl	80039f4 <HAL_GPIO_WritePin>
 800a14a:	e1c1      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, vlue); break;
 800a14c:	78fb      	ldrb	r3, [r7, #3]
 800a14e:	461a      	mov	r2, r3
 800a150:	2104      	movs	r1, #4
 800a152:	4812      	ldr	r0, [pc, #72]	@ (800a19c <digitalWrite+0x38c>)
 800a154:	f7f9 fc4e 	bl	80039f4 <HAL_GPIO_WritePin>
 800a158:	e1ba      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, vlue); break;
 800a15a:	78fb      	ldrb	r3, [r7, #3]
 800a15c:	461a      	mov	r2, r3
 800a15e:	2108      	movs	r1, #8
 800a160:	480e      	ldr	r0, [pc, #56]	@ (800a19c <digitalWrite+0x38c>)
 800a162:	f7f9 fc47 	bl	80039f4 <HAL_GPIO_WritePin>
 800a166:	e1b3      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, vlue); break;
 800a168:	78fb      	ldrb	r3, [r7, #3]
 800a16a:	461a      	mov	r2, r3
 800a16c:	2110      	movs	r1, #16
 800a16e:	480b      	ldr	r0, [pc, #44]	@ (800a19c <digitalWrite+0x38c>)
 800a170:	f7f9 fc40 	bl	80039f4 <HAL_GPIO_WritePin>
 800a174:	e1ac      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, vlue); break;
 800a176:	78fb      	ldrb	r3, [r7, #3]
 800a178:	461a      	mov	r2, r3
 800a17a:	2120      	movs	r1, #32
 800a17c:	4807      	ldr	r0, [pc, #28]	@ (800a19c <digitalWrite+0x38c>)
 800a17e:	f7f9 fc39 	bl	80039f4 <HAL_GPIO_WritePin>
 800a182:	e1a5      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, vlue); break;
 800a184:	78fb      	ldrb	r3, [r7, #3]
 800a186:	461a      	mov	r2, r3
 800a188:	2140      	movs	r1, #64	@ 0x40
 800a18a:	4804      	ldr	r0, [pc, #16]	@ (800a19c <digitalWrite+0x38c>)
 800a18c:	f7f9 fc32 	bl	80039f4 <HAL_GPIO_WritePin>
 800a190:	e19e      	b.n	800a4d0 <digitalWrite+0x6c0>
 800a192:	bf00      	nop
 800a194:	40020000 	.word	0x40020000
 800a198:	40020400 	.word	0x40020400
 800a19c:	40020800 	.word	0x40020800
	            case 7: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, vlue); break;
 800a1a0:	78fb      	ldrb	r3, [r7, #3]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	2180      	movs	r1, #128	@ 0x80
 800a1a6:	48bb      	ldr	r0, [pc, #748]	@ (800a494 <digitalWrite+0x684>)
 800a1a8:	f7f9 fc24 	bl	80039f4 <HAL_GPIO_WritePin>
 800a1ac:	e190      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, vlue); break;
 800a1ae:	78fb      	ldrb	r3, [r7, #3]
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a1b6:	48b7      	ldr	r0, [pc, #732]	@ (800a494 <digitalWrite+0x684>)
 800a1b8:	f7f9 fc1c 	bl	80039f4 <HAL_GPIO_WritePin>
 800a1bc:	e188      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, vlue); break;
 800a1be:	78fb      	ldrb	r3, [r7, #3]
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a1c6:	48b3      	ldr	r0, [pc, #716]	@ (800a494 <digitalWrite+0x684>)
 800a1c8:	f7f9 fc14 	bl	80039f4 <HAL_GPIO_WritePin>
 800a1cc:	e180      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, vlue); break;
 800a1ce:	78fb      	ldrb	r3, [r7, #3]
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a1d6:	48af      	ldr	r0, [pc, #700]	@ (800a494 <digitalWrite+0x684>)
 800a1d8:	f7f9 fc0c 	bl	80039f4 <HAL_GPIO_WritePin>
 800a1dc:	e178      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, vlue); break;
 800a1de:	78fb      	ldrb	r3, [r7, #3]
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a1e6:	48ab      	ldr	r0, [pc, #684]	@ (800a494 <digitalWrite+0x684>)
 800a1e8:	f7f9 fc04 	bl	80039f4 <HAL_GPIO_WritePin>
 800a1ec:	e170      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, vlue); break;
 800a1ee:	78fb      	ldrb	r3, [r7, #3]
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a1f6:	48a7      	ldr	r0, [pc, #668]	@ (800a494 <digitalWrite+0x684>)
 800a1f8:	f7f9 fbfc 	bl	80039f4 <HAL_GPIO_WritePin>
 800a1fc:	e168      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, vlue); break;
 800a1fe:	78fb      	ldrb	r3, [r7, #3]
 800a200:	461a      	mov	r2, r3
 800a202:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a206:	48a3      	ldr	r0, [pc, #652]	@ (800a494 <digitalWrite+0x684>)
 800a208:	f7f9 fbf4 	bl	80039f4 <HAL_GPIO_WritePin>
 800a20c:	e160      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, vlue); break;
 800a20e:	78fb      	ldrb	r3, [r7, #3]
 800a210:	461a      	mov	r2, r3
 800a212:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a216:	489f      	ldr	r0, [pc, #636]	@ (800a494 <digitalWrite+0x684>)
 800a218:	f7f9 fbec 	bl	80039f4 <HAL_GPIO_WritePin>
 800a21c:	e158      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, vlue); break;
 800a21e:	78fb      	ldrb	r3, [r7, #3]
 800a220:	461a      	mov	r2, r3
 800a222:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a226:	489b      	ldr	r0, [pc, #620]	@ (800a494 <digitalWrite+0x684>)
 800a228:	f7f9 fbe4 	bl	80039f4 <HAL_GPIO_WritePin>
 800a22c:	e150      	b.n	800a4d0 <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'D') {
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	3301      	adds	r3, #1
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	2b44      	cmp	r3, #68	@ 0x44
 800a236:	f040 809f 	bne.w	800a378 <digitalWrite+0x568>
	        switch (PIN) {
 800a23a:	7bfb      	ldrb	r3, [r7, #15]
 800a23c:	2b0f      	cmp	r3, #15
 800a23e:	f200 8147 	bhi.w	800a4d0 <digitalWrite+0x6c0>
 800a242:	a201      	add	r2, pc, #4	@ (adr r2, 800a248 <digitalWrite+0x438>)
 800a244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a248:	0800a289 	.word	0x0800a289
 800a24c:	0800a297 	.word	0x0800a297
 800a250:	0800a2a5 	.word	0x0800a2a5
 800a254:	0800a2b3 	.word	0x0800a2b3
 800a258:	0800a2c1 	.word	0x0800a2c1
 800a25c:	0800a2cf 	.word	0x0800a2cf
 800a260:	0800a2dd 	.word	0x0800a2dd
 800a264:	0800a2eb 	.word	0x0800a2eb
 800a268:	0800a2f9 	.word	0x0800a2f9
 800a26c:	0800a309 	.word	0x0800a309
 800a270:	0800a319 	.word	0x0800a319
 800a274:	0800a329 	.word	0x0800a329
 800a278:	0800a339 	.word	0x0800a339
 800a27c:	0800a349 	.word	0x0800a349
 800a280:	0800a359 	.word	0x0800a359
 800a284:	0800a369 	.word	0x0800a369
	            case 0: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, vlue); break;
 800a288:	78fb      	ldrb	r3, [r7, #3]
 800a28a:	461a      	mov	r2, r3
 800a28c:	2101      	movs	r1, #1
 800a28e:	4882      	ldr	r0, [pc, #520]	@ (800a498 <digitalWrite+0x688>)
 800a290:	f7f9 fbb0 	bl	80039f4 <HAL_GPIO_WritePin>
 800a294:	e11c      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, vlue); break;
 800a296:	78fb      	ldrb	r3, [r7, #3]
 800a298:	461a      	mov	r2, r3
 800a29a:	2102      	movs	r1, #2
 800a29c:	487e      	ldr	r0, [pc, #504]	@ (800a498 <digitalWrite+0x688>)
 800a29e:	f7f9 fba9 	bl	80039f4 <HAL_GPIO_WritePin>
 800a2a2:	e115      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, vlue); break;
 800a2a4:	78fb      	ldrb	r3, [r7, #3]
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	2104      	movs	r1, #4
 800a2aa:	487b      	ldr	r0, [pc, #492]	@ (800a498 <digitalWrite+0x688>)
 800a2ac:	f7f9 fba2 	bl	80039f4 <HAL_GPIO_WritePin>
 800a2b0:	e10e      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, vlue); break;
 800a2b2:	78fb      	ldrb	r3, [r7, #3]
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	2108      	movs	r1, #8
 800a2b8:	4877      	ldr	r0, [pc, #476]	@ (800a498 <digitalWrite+0x688>)
 800a2ba:	f7f9 fb9b 	bl	80039f4 <HAL_GPIO_WritePin>
 800a2be:	e107      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, vlue); break;
 800a2c0:	78fb      	ldrb	r3, [r7, #3]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	2110      	movs	r1, #16
 800a2c6:	4874      	ldr	r0, [pc, #464]	@ (800a498 <digitalWrite+0x688>)
 800a2c8:	f7f9 fb94 	bl	80039f4 <HAL_GPIO_WritePin>
 800a2cc:	e100      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, vlue); break;
 800a2ce:	78fb      	ldrb	r3, [r7, #3]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	2120      	movs	r1, #32
 800a2d4:	4870      	ldr	r0, [pc, #448]	@ (800a498 <digitalWrite+0x688>)
 800a2d6:	f7f9 fb8d 	bl	80039f4 <HAL_GPIO_WritePin>
 800a2da:	e0f9      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, vlue); break;
 800a2dc:	78fb      	ldrb	r3, [r7, #3]
 800a2de:	461a      	mov	r2, r3
 800a2e0:	2140      	movs	r1, #64	@ 0x40
 800a2e2:	486d      	ldr	r0, [pc, #436]	@ (800a498 <digitalWrite+0x688>)
 800a2e4:	f7f9 fb86 	bl	80039f4 <HAL_GPIO_WritePin>
 800a2e8:	e0f2      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, vlue); break;
 800a2ea:	78fb      	ldrb	r3, [r7, #3]
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	2180      	movs	r1, #128	@ 0x80
 800a2f0:	4869      	ldr	r0, [pc, #420]	@ (800a498 <digitalWrite+0x688>)
 800a2f2:	f7f9 fb7f 	bl	80039f4 <HAL_GPIO_WritePin>
 800a2f6:	e0eb      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, vlue); break;
 800a2f8:	78fb      	ldrb	r3, [r7, #3]
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a300:	4865      	ldr	r0, [pc, #404]	@ (800a498 <digitalWrite+0x688>)
 800a302:	f7f9 fb77 	bl	80039f4 <HAL_GPIO_WritePin>
 800a306:	e0e3      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, vlue); break;
 800a308:	78fb      	ldrb	r3, [r7, #3]
 800a30a:	461a      	mov	r2, r3
 800a30c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a310:	4861      	ldr	r0, [pc, #388]	@ (800a498 <digitalWrite+0x688>)
 800a312:	f7f9 fb6f 	bl	80039f4 <HAL_GPIO_WritePin>
 800a316:	e0db      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, vlue); break;
 800a318:	78fb      	ldrb	r3, [r7, #3]
 800a31a:	461a      	mov	r2, r3
 800a31c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a320:	485d      	ldr	r0, [pc, #372]	@ (800a498 <digitalWrite+0x688>)
 800a322:	f7f9 fb67 	bl	80039f4 <HAL_GPIO_WritePin>
 800a326:	e0d3      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, vlue); break;
 800a328:	78fb      	ldrb	r3, [r7, #3]
 800a32a:	461a      	mov	r2, r3
 800a32c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a330:	4859      	ldr	r0, [pc, #356]	@ (800a498 <digitalWrite+0x688>)
 800a332:	f7f9 fb5f 	bl	80039f4 <HAL_GPIO_WritePin>
 800a336:	e0cb      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, vlue); break;
 800a338:	78fb      	ldrb	r3, [r7, #3]
 800a33a:	461a      	mov	r2, r3
 800a33c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a340:	4855      	ldr	r0, [pc, #340]	@ (800a498 <digitalWrite+0x688>)
 800a342:	f7f9 fb57 	bl	80039f4 <HAL_GPIO_WritePin>
 800a346:	e0c3      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, vlue); break;
 800a348:	78fb      	ldrb	r3, [r7, #3]
 800a34a:	461a      	mov	r2, r3
 800a34c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a350:	4851      	ldr	r0, [pc, #324]	@ (800a498 <digitalWrite+0x688>)
 800a352:	f7f9 fb4f 	bl	80039f4 <HAL_GPIO_WritePin>
 800a356:	e0bb      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, vlue); break;
 800a358:	78fb      	ldrb	r3, [r7, #3]
 800a35a:	461a      	mov	r2, r3
 800a35c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a360:	484d      	ldr	r0, [pc, #308]	@ (800a498 <digitalWrite+0x688>)
 800a362:	f7f9 fb47 	bl	80039f4 <HAL_GPIO_WritePin>
 800a366:	e0b3      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, vlue); break;
 800a368:	78fb      	ldrb	r3, [r7, #3]
 800a36a:	461a      	mov	r2, r3
 800a36c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a370:	4849      	ldr	r0, [pc, #292]	@ (800a498 <digitalWrite+0x688>)
 800a372:	f7f9 fb3f 	bl	80039f4 <HAL_GPIO_WritePin>
 800a376:	e0ab      	b.n	800a4d0 <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'E') {
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	3301      	adds	r3, #1
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	2b45      	cmp	r3, #69	@ 0x45
 800a380:	f040 80a6 	bne.w	800a4d0 <digitalWrite+0x6c0>
	        switch (PIN) {
 800a384:	7bfb      	ldrb	r3, [r7, #15]
 800a386:	2b0f      	cmp	r3, #15
 800a388:	f200 80a2 	bhi.w	800a4d0 <digitalWrite+0x6c0>
 800a38c:	a201      	add	r2, pc, #4	@ (adr r2, 800a394 <digitalWrite+0x584>)
 800a38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a392:	bf00      	nop
 800a394:	0800a3d5 	.word	0x0800a3d5
 800a398:	0800a3e3 	.word	0x0800a3e3
 800a39c:	0800a3f1 	.word	0x0800a3f1
 800a3a0:	0800a3ff 	.word	0x0800a3ff
 800a3a4:	0800a40d 	.word	0x0800a40d
 800a3a8:	0800a41b 	.word	0x0800a41b
 800a3ac:	0800a429 	.word	0x0800a429
 800a3b0:	0800a437 	.word	0x0800a437
 800a3b4:	0800a445 	.word	0x0800a445
 800a3b8:	0800a455 	.word	0x0800a455
 800a3bc:	0800a465 	.word	0x0800a465
 800a3c0:	0800a475 	.word	0x0800a475
 800a3c4:	0800a485 	.word	0x0800a485
 800a3c8:	0800a4a1 	.word	0x0800a4a1
 800a3cc:	0800a4b1 	.word	0x0800a4b1
 800a3d0:	0800a4c1 	.word	0x0800a4c1
	            case 0: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, vlue); break;
 800a3d4:	78fb      	ldrb	r3, [r7, #3]
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	2101      	movs	r1, #1
 800a3da:	4830      	ldr	r0, [pc, #192]	@ (800a49c <digitalWrite+0x68c>)
 800a3dc:	f7f9 fb0a 	bl	80039f4 <HAL_GPIO_WritePin>
 800a3e0:	e076      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, vlue); break;
 800a3e2:	78fb      	ldrb	r3, [r7, #3]
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	2102      	movs	r1, #2
 800a3e8:	482c      	ldr	r0, [pc, #176]	@ (800a49c <digitalWrite+0x68c>)
 800a3ea:	f7f9 fb03 	bl	80039f4 <HAL_GPIO_WritePin>
 800a3ee:	e06f      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, vlue); break;
 800a3f0:	78fb      	ldrb	r3, [r7, #3]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	2104      	movs	r1, #4
 800a3f6:	4829      	ldr	r0, [pc, #164]	@ (800a49c <digitalWrite+0x68c>)
 800a3f8:	f7f9 fafc 	bl	80039f4 <HAL_GPIO_WritePin>
 800a3fc:	e068      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, vlue); break;
 800a3fe:	78fb      	ldrb	r3, [r7, #3]
 800a400:	461a      	mov	r2, r3
 800a402:	2108      	movs	r1, #8
 800a404:	4825      	ldr	r0, [pc, #148]	@ (800a49c <digitalWrite+0x68c>)
 800a406:	f7f9 faf5 	bl	80039f4 <HAL_GPIO_WritePin>
 800a40a:	e061      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, vlue); break;
 800a40c:	78fb      	ldrb	r3, [r7, #3]
 800a40e:	461a      	mov	r2, r3
 800a410:	2110      	movs	r1, #16
 800a412:	4822      	ldr	r0, [pc, #136]	@ (800a49c <digitalWrite+0x68c>)
 800a414:	f7f9 faee 	bl	80039f4 <HAL_GPIO_WritePin>
 800a418:	e05a      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, vlue); break;
 800a41a:	78fb      	ldrb	r3, [r7, #3]
 800a41c:	461a      	mov	r2, r3
 800a41e:	2120      	movs	r1, #32
 800a420:	481e      	ldr	r0, [pc, #120]	@ (800a49c <digitalWrite+0x68c>)
 800a422:	f7f9 fae7 	bl	80039f4 <HAL_GPIO_WritePin>
 800a426:	e053      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, vlue); break;
 800a428:	78fb      	ldrb	r3, [r7, #3]
 800a42a:	461a      	mov	r2, r3
 800a42c:	2140      	movs	r1, #64	@ 0x40
 800a42e:	481b      	ldr	r0, [pc, #108]	@ (800a49c <digitalWrite+0x68c>)
 800a430:	f7f9 fae0 	bl	80039f4 <HAL_GPIO_WritePin>
 800a434:	e04c      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, vlue); break;
 800a436:	78fb      	ldrb	r3, [r7, #3]
 800a438:	461a      	mov	r2, r3
 800a43a:	2180      	movs	r1, #128	@ 0x80
 800a43c:	4817      	ldr	r0, [pc, #92]	@ (800a49c <digitalWrite+0x68c>)
 800a43e:	f7f9 fad9 	bl	80039f4 <HAL_GPIO_WritePin>
 800a442:	e045      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, vlue); break;
 800a444:	78fb      	ldrb	r3, [r7, #3]
 800a446:	461a      	mov	r2, r3
 800a448:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a44c:	4813      	ldr	r0, [pc, #76]	@ (800a49c <digitalWrite+0x68c>)
 800a44e:	f7f9 fad1 	bl	80039f4 <HAL_GPIO_WritePin>
 800a452:	e03d      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, vlue); break;
 800a454:	78fb      	ldrb	r3, [r7, #3]
 800a456:	461a      	mov	r2, r3
 800a458:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a45c:	480f      	ldr	r0, [pc, #60]	@ (800a49c <digitalWrite+0x68c>)
 800a45e:	f7f9 fac9 	bl	80039f4 <HAL_GPIO_WritePin>
 800a462:	e035      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, vlue); break;
 800a464:	78fb      	ldrb	r3, [r7, #3]
 800a466:	461a      	mov	r2, r3
 800a468:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a46c:	480b      	ldr	r0, [pc, #44]	@ (800a49c <digitalWrite+0x68c>)
 800a46e:	f7f9 fac1 	bl	80039f4 <HAL_GPIO_WritePin>
 800a472:	e02d      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, vlue); break;
 800a474:	78fb      	ldrb	r3, [r7, #3]
 800a476:	461a      	mov	r2, r3
 800a478:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a47c:	4807      	ldr	r0, [pc, #28]	@ (800a49c <digitalWrite+0x68c>)
 800a47e:	f7f9 fab9 	bl	80039f4 <HAL_GPIO_WritePin>
 800a482:	e025      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, vlue); break;
 800a484:	78fb      	ldrb	r3, [r7, #3]
 800a486:	461a      	mov	r2, r3
 800a488:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a48c:	4803      	ldr	r0, [pc, #12]	@ (800a49c <digitalWrite+0x68c>)
 800a48e:	f7f9 fab1 	bl	80039f4 <HAL_GPIO_WritePin>
 800a492:	e01d      	b.n	800a4d0 <digitalWrite+0x6c0>
 800a494:	40020800 	.word	0x40020800
 800a498:	40020c00 	.word	0x40020c00
 800a49c:	40021000 	.word	0x40021000
	            case 13: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, vlue); break;
 800a4a0:	78fb      	ldrb	r3, [r7, #3]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a4a8:	480b      	ldr	r0, [pc, #44]	@ (800a4d8 <digitalWrite+0x6c8>)
 800a4aa:	f7f9 faa3 	bl	80039f4 <HAL_GPIO_WritePin>
 800a4ae:	e00f      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, vlue); break;
 800a4b0:	78fb      	ldrb	r3, [r7, #3]
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a4b8:	4807      	ldr	r0, [pc, #28]	@ (800a4d8 <digitalWrite+0x6c8>)
 800a4ba:	f7f9 fa9b 	bl	80039f4 <HAL_GPIO_WritePin>
 800a4be:	e007      	b.n	800a4d0 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, vlue); break;
 800a4c0:	78fb      	ldrb	r3, [r7, #3]
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a4c8:	4803      	ldr	r0, [pc, #12]	@ (800a4d8 <digitalWrite+0x6c8>)
 800a4ca:	f7f9 fa93 	bl	80039f4 <HAL_GPIO_WritePin>
 800a4ce:	bf00      	nop
	        }
	    }
}
 800a4d0:	bf00      	nop
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	40021000 	.word	0x40021000

0800a4dc <Setup_Forward_Kinematic>:

float _Lx;
float _Ly;
float _Radius_wheel;

void Setup_Forward_Kinematic(float Lx ,float Ly ,float Radius_wheel){
 800a4dc:	b480      	push	{r7}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	ed87 0a03 	vstr	s0, [r7, #12]
 800a4e6:	edc7 0a02 	vstr	s1, [r7, #8]
 800a4ea:	ed87 1a01 	vstr	s2, [r7, #4]
	_Lx = Lx;
 800a4ee:	4a07      	ldr	r2, [pc, #28]	@ (800a50c <Setup_Forward_Kinematic+0x30>)
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6013      	str	r3, [r2, #0]
	_Ly = Ly;
 800a4f4:	4a06      	ldr	r2, [pc, #24]	@ (800a510 <Setup_Forward_Kinematic+0x34>)
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	6013      	str	r3, [r2, #0]
	_Radius_wheel = Radius_wheel;
 800a4fa:	4a06      	ldr	r2, [pc, #24]	@ (800a514 <Setup_Forward_Kinematic+0x38>)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6013      	str	r3, [r2, #0]
}
 800a500:	bf00      	nop
 800a502:	3714      	adds	r7, #20
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr
 800a50c:	2000084c 	.word	0x2000084c
 800a510:	20000850 	.word	0x20000850
 800a514:	20000854 	.word	0x20000854

0800a518 <Setup_frequency_Forward_Kinematic>:

float _Pos_X = 0.0f;
float _Pos_Y = 0.0f;
float _Pos_Z = 0.0f;

void Setup_frequency_Forward_Kinematic(uint8_t freq){
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	4603      	mov	r3, r0
 800a520:	71fb      	strb	r3, [r7, #7]
	__freq = freq;
 800a522:	4a04      	ldr	r2, [pc, #16]	@ (800a534 <Setup_frequency_Forward_Kinematic+0x1c>)
 800a524:	79fb      	ldrb	r3, [r7, #7]
 800a526:	7013      	strb	r3, [r2, #0]
}
 800a528:	bf00      	nop
 800a52a:	370c      	adds	r7, #12
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr
 800a534:	20000010 	.word	0x20000010

0800a538 <Game_Play_ROBOT_2>:
 *      Author: Knnn
 */

#include "Game_Play.h"

void Game_Play_ROBOT_2(TIM_HandleTypeDef* TIM_Servo){
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
//	}else{
//		digitalWrite("PE07", 0);
//	}
//
//	if(Str_PS2.moveBtnBit.move3 == 1){ //D4
		TIM_Servo->Instance->CCR2 = 2000;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800a548:	639a      	str	r2, [r3, #56]	@ 0x38
//	if(Str_PS2.attackBtnBit.attack4 == 1){ //D5
//		digitalWrite("PE13", 1);
//	}else{
//		digitalWrite("PE13", 0);
//	}
}
 800a54a:	bf00      	nop
 800a54c:	370c      	adds	r7, #12
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
	...

0800a558 <Setup_Inverse_Kinematic>:

float Lx_;
float Ly_;
float Radius_wheel_;

void Setup_Inverse_Kinematic(float Lx ,float Ly ,float Radius_wheel){
 800a558:	b480      	push	{r7}
 800a55a:	b085      	sub	sp, #20
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	ed87 0a03 	vstr	s0, [r7, #12]
 800a562:	edc7 0a02 	vstr	s1, [r7, #8]
 800a566:	ed87 1a01 	vstr	s2, [r7, #4]
	Lx_ = Lx;
 800a56a:	4a07      	ldr	r2, [pc, #28]	@ (800a588 <Setup_Inverse_Kinematic+0x30>)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	6013      	str	r3, [r2, #0]
	Ly_ = Ly;
 800a570:	4a06      	ldr	r2, [pc, #24]	@ (800a58c <Setup_Inverse_Kinematic+0x34>)
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	6013      	str	r3, [r2, #0]
	Radius_wheel_ = Radius_wheel;
 800a576:	4a06      	ldr	r2, [pc, #24]	@ (800a590 <Setup_Inverse_Kinematic+0x38>)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6013      	str	r3, [r2, #0]
}
 800a57c:	bf00      	nop
 800a57e:	3714      	adds	r7, #20
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr
 800a588:	20000858 	.word	0x20000858
 800a58c:	2000085c 	.word	0x2000085c
 800a590:	20000860 	.word	0x20000860

0800a594 <Inverse_Kinematic>:
float w_LF = 0.0f;
float w_LB = 0.0f;
float w_RF = 0.0f;
float w_RB = 0.0f;

void Inverse_Kinematic(float Vx ,float Vy ,float wz){
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	ed87 0a03 	vstr	s0, [r7, #12]
 800a59e:	edc7 0a02 	vstr	s1, [r7, #8]
 800a5a2:	ed87 1a01 	vstr	s2, [r7, #4]
	w_LF = (Vx - Vy - (Lx_ +Ly_)*wz)/Radius_wheel_;
 800a5a6:	ed97 7a03 	vldr	s14, [r7, #12]
 800a5aa:	edd7 7a02 	vldr	s15, [r7, #8]
 800a5ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a5b2:	4b3a      	ldr	r3, [pc, #232]	@ (800a69c <Inverse_Kinematic+0x108>)
 800a5b4:	edd3 6a00 	vldr	s13, [r3]
 800a5b8:	4b39      	ldr	r3, [pc, #228]	@ (800a6a0 <Inverse_Kinematic+0x10c>)
 800a5ba:	edd3 7a00 	vldr	s15, [r3]
 800a5be:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a5c2:	edd7 7a01 	vldr	s15, [r7, #4]
 800a5c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a5ca:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a5ce:	4b35      	ldr	r3, [pc, #212]	@ (800a6a4 <Inverse_Kinematic+0x110>)
 800a5d0:	ed93 7a00 	vldr	s14, [r3]
 800a5d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5d8:	4b33      	ldr	r3, [pc, #204]	@ (800a6a8 <Inverse_Kinematic+0x114>)
 800a5da:	edc3 7a00 	vstr	s15, [r3]
	w_RF = -(Vx + Vy + (Lx_ +Ly_)*wz)/Radius_wheel_;
 800a5de:	ed97 7a03 	vldr	s14, [r7, #12]
 800a5e2:	edd7 7a02 	vldr	s15, [r7, #8]
 800a5e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a5ea:	4b2c      	ldr	r3, [pc, #176]	@ (800a69c <Inverse_Kinematic+0x108>)
 800a5ec:	edd3 6a00 	vldr	s13, [r3]
 800a5f0:	4b2b      	ldr	r3, [pc, #172]	@ (800a6a0 <Inverse_Kinematic+0x10c>)
 800a5f2:	edd3 7a00 	vldr	s15, [r3]
 800a5f6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a5fa:	edd7 7a01 	vldr	s15, [r7, #4]
 800a5fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a602:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a606:	eef1 6a67 	vneg.f32	s13, s15
 800a60a:	4b26      	ldr	r3, [pc, #152]	@ (800a6a4 <Inverse_Kinematic+0x110>)
 800a60c:	ed93 7a00 	vldr	s14, [r3]
 800a610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a614:	4b25      	ldr	r3, [pc, #148]	@ (800a6ac <Inverse_Kinematic+0x118>)
 800a616:	edc3 7a00 	vstr	s15, [r3]
	w_LB = (Vx + Vy - (Lx_ +Ly_)*wz)/Radius_wheel_;
 800a61a:	ed97 7a03 	vldr	s14, [r7, #12]
 800a61e:	edd7 7a02 	vldr	s15, [r7, #8]
 800a622:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a626:	4b1d      	ldr	r3, [pc, #116]	@ (800a69c <Inverse_Kinematic+0x108>)
 800a628:	edd3 6a00 	vldr	s13, [r3]
 800a62c:	4b1c      	ldr	r3, [pc, #112]	@ (800a6a0 <Inverse_Kinematic+0x10c>)
 800a62e:	edd3 7a00 	vldr	s15, [r3]
 800a632:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a636:	edd7 7a01 	vldr	s15, [r7, #4]
 800a63a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a63e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a642:	4b18      	ldr	r3, [pc, #96]	@ (800a6a4 <Inverse_Kinematic+0x110>)
 800a644:	ed93 7a00 	vldr	s14, [r3]
 800a648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a64c:	4b18      	ldr	r3, [pc, #96]	@ (800a6b0 <Inverse_Kinematic+0x11c>)
 800a64e:	edc3 7a00 	vstr	s15, [r3]
	w_RB = -(Vx - Vy + (Lx_ +Ly_)*wz)/Radius_wheel_;
 800a652:	ed97 7a03 	vldr	s14, [r7, #12]
 800a656:	edd7 7a02 	vldr	s15, [r7, #8]
 800a65a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a65e:	4b0f      	ldr	r3, [pc, #60]	@ (800a69c <Inverse_Kinematic+0x108>)
 800a660:	edd3 6a00 	vldr	s13, [r3]
 800a664:	4b0e      	ldr	r3, [pc, #56]	@ (800a6a0 <Inverse_Kinematic+0x10c>)
 800a666:	edd3 7a00 	vldr	s15, [r3]
 800a66a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a66e:	edd7 7a01 	vldr	s15, [r7, #4]
 800a672:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a67a:	eef1 6a67 	vneg.f32	s13, s15
 800a67e:	4b09      	ldr	r3, [pc, #36]	@ (800a6a4 <Inverse_Kinematic+0x110>)
 800a680:	ed93 7a00 	vldr	s14, [r3]
 800a684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a688:	4b0a      	ldr	r3, [pc, #40]	@ (800a6b4 <Inverse_Kinematic+0x120>)
 800a68a:	edc3 7a00 	vstr	s15, [r3]
}
 800a68e:	bf00      	nop
 800a690:	3714      	adds	r7, #20
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop
 800a69c:	20000858 	.word	0x20000858
 800a6a0:	2000085c 	.word	0x2000085c
 800a6a4:	20000860 	.word	0x20000860
 800a6a8:	20000864 	.word	0x20000864
 800a6ac:	2000086c 	.word	0x2000086c
 800a6b0:	20000868 	.word	0x20000868
 800a6b4:	20000870 	.word	0x20000870

0800a6b8 <Inverse_Kinematic_Lock_Direction>:




void Inverse_Kinematic_Lock_Direction(float Vx ,float Vy ,float wz ,float head_ing){
 800a6b8:	b5b0      	push	{r4, r5, r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	ed87 0a03 	vstr	s0, [r7, #12]
 800a6c2:	edc7 0a02 	vstr	s1, [r7, #8]
 800a6c6:	ed87 1a01 	vstr	s2, [r7, #4]
 800a6ca:	edc7 1a00 	vstr	s3, [r7]
	_r = (float)(sqrt((Vx * Vx) + (Vy * Vy)));
 800a6ce:	edd7 7a03 	vldr	s15, [r7, #12]
 800a6d2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800a6d6:	edd7 7a02 	vldr	s15, [r7, #8]
 800a6da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a6de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6e2:	ee17 0a90 	vmov	r0, s15
 800a6e6:	f7f5 fed3 	bl	8000490 <__aeabi_f2d>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	ec43 2b10 	vmov	d0, r2, r3
 800a6f2:	f002 fe47 	bl	800d384 <sqrt>
 800a6f6:	ec53 2b10 	vmov	r2, r3, d0
 800a6fa:	4610      	mov	r0, r2
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	f7f6 f9f7 	bl	8000af0 <__aeabi_d2f>
 800a702:	4603      	mov	r3, r0
 800a704:	4a71      	ldr	r2, [pc, #452]	@ (800a8cc <Inverse_Kinematic_Lock_Direction+0x214>)
 800a706:	6013      	str	r3, [r2, #0]
    _Rad_s = (float)(atan2(Vy, Vx)) - head_ing;
 800a708:	68b8      	ldr	r0, [r7, #8]
 800a70a:	f7f5 fec1 	bl	8000490 <__aeabi_f2d>
 800a70e:	4604      	mov	r4, r0
 800a710:	460d      	mov	r5, r1
 800a712:	68f8      	ldr	r0, [r7, #12]
 800a714:	f7f5 febc 	bl	8000490 <__aeabi_f2d>
 800a718:	4602      	mov	r2, r0
 800a71a:	460b      	mov	r3, r1
 800a71c:	ec43 2b11 	vmov	d1, r2, r3
 800a720:	ec45 4b10 	vmov	d0, r4, r5
 800a724:	f002 fe2c 	bl	800d380 <atan2>
 800a728:	ec53 2b10 	vmov	r2, r3, d0
 800a72c:	4610      	mov	r0, r2
 800a72e:	4619      	mov	r1, r3
 800a730:	f7f6 f9de 	bl	8000af0 <__aeabi_d2f>
 800a734:	ee07 0a10 	vmov	s14, r0
 800a738:	edd7 7a00 	vldr	s15, [r7]
 800a73c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a740:	4b63      	ldr	r3, [pc, #396]	@ (800a8d0 <Inverse_Kinematic_Lock_Direction+0x218>)
 800a742:	edc3 7a00 	vstr	s15, [r3]

    __Vx = (_r * cos(_Rad_s));
 800a746:	4b61      	ldr	r3, [pc, #388]	@ (800a8cc <Inverse_Kinematic_Lock_Direction+0x214>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7f5 fea0 	bl	8000490 <__aeabi_f2d>
 800a750:	4604      	mov	r4, r0
 800a752:	460d      	mov	r5, r1
 800a754:	4b5e      	ldr	r3, [pc, #376]	@ (800a8d0 <Inverse_Kinematic_Lock_Direction+0x218>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4618      	mov	r0, r3
 800a75a:	f7f5 fe99 	bl	8000490 <__aeabi_f2d>
 800a75e:	4602      	mov	r2, r0
 800a760:	460b      	mov	r3, r1
 800a762:	ec43 2b10 	vmov	d0, r2, r3
 800a766:	f002 fe3b 	bl	800d3e0 <cos>
 800a76a:	ec53 2b10 	vmov	r2, r3, d0
 800a76e:	4620      	mov	r0, r4
 800a770:	4629      	mov	r1, r5
 800a772:	f7f5 fee5 	bl	8000540 <__aeabi_dmul>
 800a776:	4602      	mov	r2, r0
 800a778:	460b      	mov	r3, r1
 800a77a:	4610      	mov	r0, r2
 800a77c:	4619      	mov	r1, r3
 800a77e:	f7f6 f9b7 	bl	8000af0 <__aeabi_d2f>
 800a782:	4603      	mov	r3, r0
 800a784:	4a53      	ldr	r2, [pc, #332]	@ (800a8d4 <Inverse_Kinematic_Lock_Direction+0x21c>)
 800a786:	6013      	str	r3, [r2, #0]
    __Vy = (_r * sin(_Rad_s));
 800a788:	4b50      	ldr	r3, [pc, #320]	@ (800a8cc <Inverse_Kinematic_Lock_Direction+0x214>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7f5 fe7f 	bl	8000490 <__aeabi_f2d>
 800a792:	4604      	mov	r4, r0
 800a794:	460d      	mov	r5, r1
 800a796:	4b4e      	ldr	r3, [pc, #312]	@ (800a8d0 <Inverse_Kinematic_Lock_Direction+0x218>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7f5 fe78 	bl	8000490 <__aeabi_f2d>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	ec43 2b10 	vmov	d0, r2, r3
 800a7a8:	f002 fe6e 	bl	800d488 <sin>
 800a7ac:	ec53 2b10 	vmov	r2, r3, d0
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	4629      	mov	r1, r5
 800a7b4:	f7f5 fec4 	bl	8000540 <__aeabi_dmul>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	4610      	mov	r0, r2
 800a7be:	4619      	mov	r1, r3
 800a7c0:	f7f6 f996 	bl	8000af0 <__aeabi_d2f>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	4a44      	ldr	r2, [pc, #272]	@ (800a8d8 <Inverse_Kinematic_Lock_Direction+0x220>)
 800a7c8:	6013      	str	r3, [r2, #0]

	w_LF = (__Vx - __Vy - (Lx_ +Ly_)*wz)/Radius_wheel_;
 800a7ca:	4b42      	ldr	r3, [pc, #264]	@ (800a8d4 <Inverse_Kinematic_Lock_Direction+0x21c>)
 800a7cc:	ed93 7a00 	vldr	s14, [r3]
 800a7d0:	4b41      	ldr	r3, [pc, #260]	@ (800a8d8 <Inverse_Kinematic_Lock_Direction+0x220>)
 800a7d2:	edd3 7a00 	vldr	s15, [r3]
 800a7d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a7da:	4b40      	ldr	r3, [pc, #256]	@ (800a8dc <Inverse_Kinematic_Lock_Direction+0x224>)
 800a7dc:	edd3 6a00 	vldr	s13, [r3]
 800a7e0:	4b3f      	ldr	r3, [pc, #252]	@ (800a8e0 <Inverse_Kinematic_Lock_Direction+0x228>)
 800a7e2:	edd3 7a00 	vldr	s15, [r3]
 800a7e6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a7ea:	edd7 7a01 	vldr	s15, [r7, #4]
 800a7ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a7f2:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a7f6:	4b3b      	ldr	r3, [pc, #236]	@ (800a8e4 <Inverse_Kinematic_Lock_Direction+0x22c>)
 800a7f8:	ed93 7a00 	vldr	s14, [r3]
 800a7fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a800:	4b39      	ldr	r3, [pc, #228]	@ (800a8e8 <Inverse_Kinematic_Lock_Direction+0x230>)
 800a802:	edc3 7a00 	vstr	s15, [r3]
	w_RF = -(__Vx + __Vy + (Lx_ +Ly_)*wz)/Radius_wheel_;
 800a806:	4b33      	ldr	r3, [pc, #204]	@ (800a8d4 <Inverse_Kinematic_Lock_Direction+0x21c>)
 800a808:	ed93 7a00 	vldr	s14, [r3]
 800a80c:	4b32      	ldr	r3, [pc, #200]	@ (800a8d8 <Inverse_Kinematic_Lock_Direction+0x220>)
 800a80e:	edd3 7a00 	vldr	s15, [r3]
 800a812:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a816:	4b31      	ldr	r3, [pc, #196]	@ (800a8dc <Inverse_Kinematic_Lock_Direction+0x224>)
 800a818:	edd3 6a00 	vldr	s13, [r3]
 800a81c:	4b30      	ldr	r3, [pc, #192]	@ (800a8e0 <Inverse_Kinematic_Lock_Direction+0x228>)
 800a81e:	edd3 7a00 	vldr	s15, [r3]
 800a822:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a826:	edd7 7a01 	vldr	s15, [r7, #4]
 800a82a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a82e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a832:	eef1 6a67 	vneg.f32	s13, s15
 800a836:	4b2b      	ldr	r3, [pc, #172]	@ (800a8e4 <Inverse_Kinematic_Lock_Direction+0x22c>)
 800a838:	ed93 7a00 	vldr	s14, [r3]
 800a83c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a840:	4b2a      	ldr	r3, [pc, #168]	@ (800a8ec <Inverse_Kinematic_Lock_Direction+0x234>)
 800a842:	edc3 7a00 	vstr	s15, [r3]
	w_LB = (__Vx + __Vy - (Lx_ +Ly_)*wz)/Radius_wheel_;
 800a846:	4b23      	ldr	r3, [pc, #140]	@ (800a8d4 <Inverse_Kinematic_Lock_Direction+0x21c>)
 800a848:	ed93 7a00 	vldr	s14, [r3]
 800a84c:	4b22      	ldr	r3, [pc, #136]	@ (800a8d8 <Inverse_Kinematic_Lock_Direction+0x220>)
 800a84e:	edd3 7a00 	vldr	s15, [r3]
 800a852:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a856:	4b21      	ldr	r3, [pc, #132]	@ (800a8dc <Inverse_Kinematic_Lock_Direction+0x224>)
 800a858:	edd3 6a00 	vldr	s13, [r3]
 800a85c:	4b20      	ldr	r3, [pc, #128]	@ (800a8e0 <Inverse_Kinematic_Lock_Direction+0x228>)
 800a85e:	edd3 7a00 	vldr	s15, [r3]
 800a862:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a866:	edd7 7a01 	vldr	s15, [r7, #4]
 800a86a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a86e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a872:	4b1c      	ldr	r3, [pc, #112]	@ (800a8e4 <Inverse_Kinematic_Lock_Direction+0x22c>)
 800a874:	ed93 7a00 	vldr	s14, [r3]
 800a878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a87c:	4b1c      	ldr	r3, [pc, #112]	@ (800a8f0 <Inverse_Kinematic_Lock_Direction+0x238>)
 800a87e:	edc3 7a00 	vstr	s15, [r3]
	w_RB = -(__Vx - __Vy + (Lx_ +Ly_)*wz)/Radius_wheel_;
 800a882:	4b14      	ldr	r3, [pc, #80]	@ (800a8d4 <Inverse_Kinematic_Lock_Direction+0x21c>)
 800a884:	ed93 7a00 	vldr	s14, [r3]
 800a888:	4b13      	ldr	r3, [pc, #76]	@ (800a8d8 <Inverse_Kinematic_Lock_Direction+0x220>)
 800a88a:	edd3 7a00 	vldr	s15, [r3]
 800a88e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a892:	4b12      	ldr	r3, [pc, #72]	@ (800a8dc <Inverse_Kinematic_Lock_Direction+0x224>)
 800a894:	edd3 6a00 	vldr	s13, [r3]
 800a898:	4b11      	ldr	r3, [pc, #68]	@ (800a8e0 <Inverse_Kinematic_Lock_Direction+0x228>)
 800a89a:	edd3 7a00 	vldr	s15, [r3]
 800a89e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a8a2:	edd7 7a01 	vldr	s15, [r7, #4]
 800a8a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a8aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8ae:	eef1 6a67 	vneg.f32	s13, s15
 800a8b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e4 <Inverse_Kinematic_Lock_Direction+0x22c>)
 800a8b4:	ed93 7a00 	vldr	s14, [r3]
 800a8b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8bc:	4b0d      	ldr	r3, [pc, #52]	@ (800a8f4 <Inverse_Kinematic_Lock_Direction+0x23c>)
 800a8be:	edc3 7a00 	vstr	s15, [r3]
}
 800a8c2:	bf00      	nop
 800a8c4:	3710      	adds	r7, #16
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bdb0      	pop	{r4, r5, r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	20000874 	.word	0x20000874
 800a8d0:	20000878 	.word	0x20000878
 800a8d4:	2000087c 	.word	0x2000087c
 800a8d8:	20000880 	.word	0x20000880
 800a8dc:	20000858 	.word	0x20000858
 800a8e0:	2000085c 	.word	0x2000085c
 800a8e4:	20000860 	.word	0x20000860
 800a8e8:	20000864 	.word	0x20000864
 800a8ec:	2000086c 	.word	0x2000086c
 800a8f0:	20000868 	.word	0x20000868
 800a8f4:	20000870 	.word	0x20000870

0800a8f8 <get_w_LF>:

float get_w_LF(){
 800a8f8:	b480      	push	{r7}
 800a8fa:	af00      	add	r7, sp, #0
	return w_LF;
 800a8fc:	4b04      	ldr	r3, [pc, #16]	@ (800a910 <get_w_LF+0x18>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	ee07 3a90 	vmov	s15, r3
}
 800a904:	eeb0 0a67 	vmov.f32	s0, s15
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr
 800a910:	20000864 	.word	0x20000864

0800a914 <get_w_LB>:

float get_w_LB(){
 800a914:	b480      	push	{r7}
 800a916:	af00      	add	r7, sp, #0
	return w_LB;
 800a918:	4b04      	ldr	r3, [pc, #16]	@ (800a92c <get_w_LB+0x18>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	ee07 3a90 	vmov	s15, r3
}
 800a920:	eeb0 0a67 	vmov.f32	s0, s15
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr
 800a92c:	20000868 	.word	0x20000868

0800a930 <get_w_RF>:

float get_w_RF(){
 800a930:	b480      	push	{r7}
 800a932:	af00      	add	r7, sp, #0
	return w_RF;
 800a934:	4b04      	ldr	r3, [pc, #16]	@ (800a948 <get_w_RF+0x18>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	ee07 3a90 	vmov	s15, r3
}
 800a93c:	eeb0 0a67 	vmov.f32	s0, s15
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	2000086c 	.word	0x2000086c

0800a94c <get_w_RB>:

float get_w_RB(){
 800a94c:	b480      	push	{r7}
 800a94e:	af00      	add	r7, sp, #0
	return w_RB;
 800a950:	4b04      	ldr	r3, [pc, #16]	@ (800a964 <get_w_RB+0x18>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	ee07 3a90 	vmov	s15, r3
}
 800a958:	eeb0 0a67 	vmov.f32	s0, s15
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr
 800a964:	20000870 	.word	0x20000870

0800a968 <map>:

float map(float value, float fromLow, float fromHigh, float toLow, float toHigh) {
 800a968:	b480      	push	{r7}
 800a96a:	b087      	sub	sp, #28
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	ed87 0a05 	vstr	s0, [r7, #20]
 800a972:	edc7 0a04 	vstr	s1, [r7, #16]
 800a976:	ed87 1a03 	vstr	s2, [r7, #12]
 800a97a:	edc7 1a02 	vstr	s3, [r7, #8]
 800a97e:	ed87 2a01 	vstr	s4, [r7, #4]
    return toLow + (toHigh - toLow) * ((value - fromLow) / (fromHigh - fromLow));
 800a982:	ed97 7a01 	vldr	s14, [r7, #4]
 800a986:	edd7 7a02 	vldr	s15, [r7, #8]
 800a98a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a98e:	edd7 6a05 	vldr	s13, [r7, #20]
 800a992:	edd7 7a04 	vldr	s15, [r7, #16]
 800a996:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800a99a:	edd7 6a03 	vldr	s13, [r7, #12]
 800a99e:	edd7 7a04 	vldr	s15, [r7, #16]
 800a9a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a9a6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a9aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9ae:	edd7 7a02 	vldr	s15, [r7, #8]
 800a9b2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800a9b6:	eeb0 0a67 	vmov.f32	s0, s15
 800a9ba:	371c      	adds	r7, #28
 800a9bc:	46bd      	mov	sp, r7
 800a9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c2:	4770      	bx	lr

0800a9c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a9d0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a9d4:	f002 fc50 	bl	800d278 <USBD_static_malloc>
 800a9d8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d109      	bne.n	800a9f4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	32b0      	adds	r2, #176	@ 0xb0
 800a9ea:	2100      	movs	r1, #0
 800a9ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a9f0:	2302      	movs	r3, #2
 800a9f2:	e0d4      	b.n	800ab9e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a9f4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a9f8:	2100      	movs	r1, #0
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f002 fc80 	bl	800d300 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	32b0      	adds	r2, #176	@ 0xb0
 800aa0a:	68f9      	ldr	r1, [r7, #12]
 800aa0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	32b0      	adds	r2, #176	@ 0xb0
 800aa1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	7c1b      	ldrb	r3, [r3, #16]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d138      	bne.n	800aa9e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aa2c:	4b5e      	ldr	r3, [pc, #376]	@ (800aba8 <USBD_CDC_Init+0x1e4>)
 800aa2e:	7819      	ldrb	r1, [r3, #0]
 800aa30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa34:	2202      	movs	r2, #2
 800aa36:	6878      	ldr	r0, [r7, #4]
 800aa38:	f002 fafb 	bl	800d032 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aa3c:	4b5a      	ldr	r3, [pc, #360]	@ (800aba8 <USBD_CDC_Init+0x1e4>)
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	f003 020f 	and.w	r2, r3, #15
 800aa44:	6879      	ldr	r1, [r7, #4]
 800aa46:	4613      	mov	r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	4413      	add	r3, r2
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	440b      	add	r3, r1
 800aa50:	3324      	adds	r3, #36	@ 0x24
 800aa52:	2201      	movs	r2, #1
 800aa54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aa56:	4b55      	ldr	r3, [pc, #340]	@ (800abac <USBD_CDC_Init+0x1e8>)
 800aa58:	7819      	ldrb	r1, [r3, #0]
 800aa5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa5e:	2202      	movs	r2, #2
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f002 fae6 	bl	800d032 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aa66:	4b51      	ldr	r3, [pc, #324]	@ (800abac <USBD_CDC_Init+0x1e8>)
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	f003 020f 	and.w	r2, r3, #15
 800aa6e:	6879      	ldr	r1, [r7, #4]
 800aa70:	4613      	mov	r3, r2
 800aa72:	009b      	lsls	r3, r3, #2
 800aa74:	4413      	add	r3, r2
 800aa76:	009b      	lsls	r3, r3, #2
 800aa78:	440b      	add	r3, r1
 800aa7a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa7e:	2201      	movs	r2, #1
 800aa80:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aa82:	4b4b      	ldr	r3, [pc, #300]	@ (800abb0 <USBD_CDC_Init+0x1ec>)
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	f003 020f 	and.w	r2, r3, #15
 800aa8a:	6879      	ldr	r1, [r7, #4]
 800aa8c:	4613      	mov	r3, r2
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	4413      	add	r3, r2
 800aa92:	009b      	lsls	r3, r3, #2
 800aa94:	440b      	add	r3, r1
 800aa96:	3326      	adds	r3, #38	@ 0x26
 800aa98:	2210      	movs	r2, #16
 800aa9a:	801a      	strh	r2, [r3, #0]
 800aa9c:	e035      	b.n	800ab0a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aa9e:	4b42      	ldr	r3, [pc, #264]	@ (800aba8 <USBD_CDC_Init+0x1e4>)
 800aaa0:	7819      	ldrb	r1, [r3, #0]
 800aaa2:	2340      	movs	r3, #64	@ 0x40
 800aaa4:	2202      	movs	r2, #2
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f002 fac3 	bl	800d032 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aaac:	4b3e      	ldr	r3, [pc, #248]	@ (800aba8 <USBD_CDC_Init+0x1e4>)
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	f003 020f 	and.w	r2, r3, #15
 800aab4:	6879      	ldr	r1, [r7, #4]
 800aab6:	4613      	mov	r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	4413      	add	r3, r2
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	440b      	add	r3, r1
 800aac0:	3324      	adds	r3, #36	@ 0x24
 800aac2:	2201      	movs	r2, #1
 800aac4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aac6:	4b39      	ldr	r3, [pc, #228]	@ (800abac <USBD_CDC_Init+0x1e8>)
 800aac8:	7819      	ldrb	r1, [r3, #0]
 800aaca:	2340      	movs	r3, #64	@ 0x40
 800aacc:	2202      	movs	r2, #2
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f002 faaf 	bl	800d032 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aad4:	4b35      	ldr	r3, [pc, #212]	@ (800abac <USBD_CDC_Init+0x1e8>)
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	f003 020f 	and.w	r2, r3, #15
 800aadc:	6879      	ldr	r1, [r7, #4]
 800aade:	4613      	mov	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	4413      	add	r3, r2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	440b      	add	r3, r1
 800aae8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aaec:	2201      	movs	r2, #1
 800aaee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800aaf0:	4b2f      	ldr	r3, [pc, #188]	@ (800abb0 <USBD_CDC_Init+0x1ec>)
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	f003 020f 	and.w	r2, r3, #15
 800aaf8:	6879      	ldr	r1, [r7, #4]
 800aafa:	4613      	mov	r3, r2
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4413      	add	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	440b      	add	r3, r1
 800ab04:	3326      	adds	r3, #38	@ 0x26
 800ab06:	2210      	movs	r2, #16
 800ab08:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ab0a:	4b29      	ldr	r3, [pc, #164]	@ (800abb0 <USBD_CDC_Init+0x1ec>)
 800ab0c:	7819      	ldrb	r1, [r3, #0]
 800ab0e:	2308      	movs	r3, #8
 800ab10:	2203      	movs	r2, #3
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f002 fa8d 	bl	800d032 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ab18:	4b25      	ldr	r3, [pc, #148]	@ (800abb0 <USBD_CDC_Init+0x1ec>)
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	f003 020f 	and.w	r2, r3, #15
 800ab20:	6879      	ldr	r1, [r7, #4]
 800ab22:	4613      	mov	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4413      	add	r3, r2
 800ab28:	009b      	lsls	r3, r3, #2
 800ab2a:	440b      	add	r3, r1
 800ab2c:	3324      	adds	r3, #36	@ 0x24
 800ab2e:	2201      	movs	r2, #1
 800ab30:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	33b0      	adds	r3, #176	@ 0xb0
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	4413      	add	r3, r2
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2200      	movs	r2, #0
 800ab52:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ab68:	2302      	movs	r3, #2
 800ab6a:	e018      	b.n	800ab9e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	7c1b      	ldrb	r3, [r3, #16]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d10a      	bne.n	800ab8a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ab74:	4b0d      	ldr	r3, [pc, #52]	@ (800abac <USBD_CDC_Init+0x1e8>)
 800ab76:	7819      	ldrb	r1, [r3, #0]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ab7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f002 fb44 	bl	800d210 <USBD_LL_PrepareReceive>
 800ab88:	e008      	b.n	800ab9c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ab8a:	4b08      	ldr	r3, [pc, #32]	@ (800abac <USBD_CDC_Init+0x1e8>)
 800ab8c:	7819      	ldrb	r1, [r3, #0]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ab94:	2340      	movs	r3, #64	@ 0x40
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f002 fb3a 	bl	800d210 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
 800aba6:	bf00      	nop
 800aba8:	2000009b 	.word	0x2000009b
 800abac:	2000009c 	.word	0x2000009c
 800abb0:	2000009d 	.word	0x2000009d

0800abb4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	460b      	mov	r3, r1
 800abbe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800abc0:	4b3a      	ldr	r3, [pc, #232]	@ (800acac <USBD_CDC_DeInit+0xf8>)
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	4619      	mov	r1, r3
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f002 fa59 	bl	800d07e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800abcc:	4b37      	ldr	r3, [pc, #220]	@ (800acac <USBD_CDC_DeInit+0xf8>)
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	f003 020f 	and.w	r2, r3, #15
 800abd4:	6879      	ldr	r1, [r7, #4]
 800abd6:	4613      	mov	r3, r2
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	4413      	add	r3, r2
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	440b      	add	r3, r1
 800abe0:	3324      	adds	r3, #36	@ 0x24
 800abe2:	2200      	movs	r2, #0
 800abe4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800abe6:	4b32      	ldr	r3, [pc, #200]	@ (800acb0 <USBD_CDC_DeInit+0xfc>)
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	4619      	mov	r1, r3
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f002 fa46 	bl	800d07e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800abf2:	4b2f      	ldr	r3, [pc, #188]	@ (800acb0 <USBD_CDC_DeInit+0xfc>)
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	f003 020f 	and.w	r2, r3, #15
 800abfa:	6879      	ldr	r1, [r7, #4]
 800abfc:	4613      	mov	r3, r2
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	4413      	add	r3, r2
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	440b      	add	r3, r1
 800ac06:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ac0e:	4b29      	ldr	r3, [pc, #164]	@ (800acb4 <USBD_CDC_DeInit+0x100>)
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	4619      	mov	r1, r3
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f002 fa32 	bl	800d07e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ac1a:	4b26      	ldr	r3, [pc, #152]	@ (800acb4 <USBD_CDC_DeInit+0x100>)
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	f003 020f 	and.w	r2, r3, #15
 800ac22:	6879      	ldr	r1, [r7, #4]
 800ac24:	4613      	mov	r3, r2
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	4413      	add	r3, r2
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	440b      	add	r3, r1
 800ac2e:	3324      	adds	r3, #36	@ 0x24
 800ac30:	2200      	movs	r2, #0
 800ac32:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ac34:	4b1f      	ldr	r3, [pc, #124]	@ (800acb4 <USBD_CDC_DeInit+0x100>)
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	f003 020f 	and.w	r2, r3, #15
 800ac3c:	6879      	ldr	r1, [r7, #4]
 800ac3e:	4613      	mov	r3, r2
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	4413      	add	r3, r2
 800ac44:	009b      	lsls	r3, r3, #2
 800ac46:	440b      	add	r3, r1
 800ac48:	3326      	adds	r3, #38	@ 0x26
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	32b0      	adds	r2, #176	@ 0xb0
 800ac58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d01f      	beq.n	800aca0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	33b0      	adds	r3, #176	@ 0xb0
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4413      	add	r3, r2
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	32b0      	adds	r2, #176	@ 0xb0
 800ac7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac82:	4618      	mov	r0, r3
 800ac84:	f002 fb06 	bl	800d294 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	32b0      	adds	r2, #176	@ 0xb0
 800ac92:	2100      	movs	r1, #0
 800ac94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aca0:	2300      	movs	r3, #0
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3708      	adds	r7, #8
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	2000009b 	.word	0x2000009b
 800acb0:	2000009c 	.word	0x2000009c
 800acb4:	2000009d 	.word	0x2000009d

0800acb8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b086      	sub	sp, #24
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	32b0      	adds	r2, #176	@ 0xb0
 800accc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800acd2:	2300      	movs	r3, #0
 800acd4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800acd6:	2300      	movs	r3, #0
 800acd8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800acda:	2300      	movs	r3, #0
 800acdc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d101      	bne.n	800ace8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ace4:	2303      	movs	r3, #3
 800ace6:	e0bf      	b.n	800ae68 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d050      	beq.n	800ad96 <USBD_CDC_Setup+0xde>
 800acf4:	2b20      	cmp	r3, #32
 800acf6:	f040 80af 	bne.w	800ae58 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	88db      	ldrh	r3, [r3, #6]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d03a      	beq.n	800ad78 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	b25b      	sxtb	r3, r3
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	da1b      	bge.n	800ad44 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad12:	687a      	ldr	r2, [r7, #4]
 800ad14:	33b0      	adds	r3, #176	@ 0xb0
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	4413      	add	r3, r2
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	683a      	ldr	r2, [r7, #0]
 800ad20:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ad22:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad24:	683a      	ldr	r2, [r7, #0]
 800ad26:	88d2      	ldrh	r2, [r2, #6]
 800ad28:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	88db      	ldrh	r3, [r3, #6]
 800ad2e:	2b07      	cmp	r3, #7
 800ad30:	bf28      	it	cs
 800ad32:	2307      	movcs	r3, #7
 800ad34:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	89fa      	ldrh	r2, [r7, #14]
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f001 fd53 	bl	800c7e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ad42:	e090      	b.n	800ae66 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	785a      	ldrb	r2, [r3, #1]
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	88db      	ldrh	r3, [r3, #6]
 800ad52:	2b3f      	cmp	r3, #63	@ 0x3f
 800ad54:	d803      	bhi.n	800ad5e <USBD_CDC_Setup+0xa6>
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	88db      	ldrh	r3, [r3, #6]
 800ad5a:	b2da      	uxtb	r2, r3
 800ad5c:	e000      	b.n	800ad60 <USBD_CDC_Setup+0xa8>
 800ad5e:	2240      	movs	r2, #64	@ 0x40
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ad66:	6939      	ldr	r1, [r7, #16]
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ad6e:	461a      	mov	r2, r3
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f001 fd65 	bl	800c840 <USBD_CtlPrepareRx>
      break;
 800ad76:	e076      	b.n	800ae66 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	33b0      	adds	r3, #176	@ 0xb0
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	4413      	add	r3, r2
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	683a      	ldr	r2, [r7, #0]
 800ad8c:	7850      	ldrb	r0, [r2, #1]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	6839      	ldr	r1, [r7, #0]
 800ad92:	4798      	blx	r3
      break;
 800ad94:	e067      	b.n	800ae66 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	785b      	ldrb	r3, [r3, #1]
 800ad9a:	2b0b      	cmp	r3, #11
 800ad9c:	d851      	bhi.n	800ae42 <USBD_CDC_Setup+0x18a>
 800ad9e:	a201      	add	r2, pc, #4	@ (adr r2, 800ada4 <USBD_CDC_Setup+0xec>)
 800ada0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada4:	0800add5 	.word	0x0800add5
 800ada8:	0800ae51 	.word	0x0800ae51
 800adac:	0800ae43 	.word	0x0800ae43
 800adb0:	0800ae43 	.word	0x0800ae43
 800adb4:	0800ae43 	.word	0x0800ae43
 800adb8:	0800ae43 	.word	0x0800ae43
 800adbc:	0800ae43 	.word	0x0800ae43
 800adc0:	0800ae43 	.word	0x0800ae43
 800adc4:	0800ae43 	.word	0x0800ae43
 800adc8:	0800ae43 	.word	0x0800ae43
 800adcc:	0800adff 	.word	0x0800adff
 800add0:	0800ae29 	.word	0x0800ae29
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adda:	b2db      	uxtb	r3, r3
 800addc:	2b03      	cmp	r3, #3
 800adde:	d107      	bne.n	800adf0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ade0:	f107 030a 	add.w	r3, r7, #10
 800ade4:	2202      	movs	r2, #2
 800ade6:	4619      	mov	r1, r3
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f001 fcfd 	bl	800c7e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800adee:	e032      	b.n	800ae56 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800adf0:	6839      	ldr	r1, [r7, #0]
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f001 fc7b 	bl	800c6ee <USBD_CtlError>
            ret = USBD_FAIL;
 800adf8:	2303      	movs	r3, #3
 800adfa:	75fb      	strb	r3, [r7, #23]
          break;
 800adfc:	e02b      	b.n	800ae56 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	2b03      	cmp	r3, #3
 800ae08:	d107      	bne.n	800ae1a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ae0a:	f107 030d 	add.w	r3, r7, #13
 800ae0e:	2201      	movs	r2, #1
 800ae10:	4619      	mov	r1, r3
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f001 fce8 	bl	800c7e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae18:	e01d      	b.n	800ae56 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ae1a:	6839      	ldr	r1, [r7, #0]
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f001 fc66 	bl	800c6ee <USBD_CtlError>
            ret = USBD_FAIL;
 800ae22:	2303      	movs	r3, #3
 800ae24:	75fb      	strb	r3, [r7, #23]
          break;
 800ae26:	e016      	b.n	800ae56 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	2b03      	cmp	r3, #3
 800ae32:	d00f      	beq.n	800ae54 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ae34:	6839      	ldr	r1, [r7, #0]
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f001 fc59 	bl	800c6ee <USBD_CtlError>
            ret = USBD_FAIL;
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ae40:	e008      	b.n	800ae54 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ae42:	6839      	ldr	r1, [r7, #0]
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f001 fc52 	bl	800c6ee <USBD_CtlError>
          ret = USBD_FAIL;
 800ae4a:	2303      	movs	r3, #3
 800ae4c:	75fb      	strb	r3, [r7, #23]
          break;
 800ae4e:	e002      	b.n	800ae56 <USBD_CDC_Setup+0x19e>
          break;
 800ae50:	bf00      	nop
 800ae52:	e008      	b.n	800ae66 <USBD_CDC_Setup+0x1ae>
          break;
 800ae54:	bf00      	nop
      }
      break;
 800ae56:	e006      	b.n	800ae66 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ae58:	6839      	ldr	r1, [r7, #0]
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f001 fc47 	bl	800c6ee <USBD_CtlError>
      ret = USBD_FAIL;
 800ae60:	2303      	movs	r3, #3
 800ae62:	75fb      	strb	r3, [r7, #23]
      break;
 800ae64:	bf00      	nop
  }

  return (uint8_t)ret;
 800ae66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3718      	adds	r7, #24
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	32b0      	adds	r2, #176	@ 0xb0
 800ae8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d101      	bne.n	800ae9a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ae96:	2303      	movs	r3, #3
 800ae98:	e065      	b.n	800af66 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	32b0      	adds	r2, #176	@ 0xb0
 800aea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aea8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aeaa:	78fb      	ldrb	r3, [r7, #3]
 800aeac:	f003 020f 	and.w	r2, r3, #15
 800aeb0:	6879      	ldr	r1, [r7, #4]
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	4413      	add	r3, r2
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	440b      	add	r3, r1
 800aebc:	3318      	adds	r3, #24
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d02f      	beq.n	800af24 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800aec4:	78fb      	ldrb	r3, [r7, #3]
 800aec6:	f003 020f 	and.w	r2, r3, #15
 800aeca:	6879      	ldr	r1, [r7, #4]
 800aecc:	4613      	mov	r3, r2
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	4413      	add	r3, r2
 800aed2:	009b      	lsls	r3, r3, #2
 800aed4:	440b      	add	r3, r1
 800aed6:	3318      	adds	r3, #24
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	78fb      	ldrb	r3, [r7, #3]
 800aedc:	f003 010f 	and.w	r1, r3, #15
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	460b      	mov	r3, r1
 800aee4:	00db      	lsls	r3, r3, #3
 800aee6:	440b      	add	r3, r1
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	4403      	add	r3, r0
 800aeec:	331c      	adds	r3, #28
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	fbb2 f1f3 	udiv	r1, r2, r3
 800aef4:	fb01 f303 	mul.w	r3, r1, r3
 800aef8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d112      	bne.n	800af24 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800aefe:	78fb      	ldrb	r3, [r7, #3]
 800af00:	f003 020f 	and.w	r2, r3, #15
 800af04:	6879      	ldr	r1, [r7, #4]
 800af06:	4613      	mov	r3, r2
 800af08:	009b      	lsls	r3, r3, #2
 800af0a:	4413      	add	r3, r2
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	440b      	add	r3, r1
 800af10:	3318      	adds	r3, #24
 800af12:	2200      	movs	r2, #0
 800af14:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800af16:	78f9      	ldrb	r1, [r7, #3]
 800af18:	2300      	movs	r3, #0
 800af1a:	2200      	movs	r2, #0
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f002 f956 	bl	800d1ce <USBD_LL_Transmit>
 800af22:	e01f      	b.n	800af64 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	2200      	movs	r2, #0
 800af28:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af32:	687a      	ldr	r2, [r7, #4]
 800af34:	33b0      	adds	r3, #176	@ 0xb0
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4413      	add	r3, r2
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	691b      	ldr	r3, [r3, #16]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d010      	beq.n	800af64 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	33b0      	adds	r3, #176	@ 0xb0
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	4413      	add	r3, r2
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	691b      	ldr	r3, [r3, #16]
 800af54:	68ba      	ldr	r2, [r7, #8]
 800af56:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800af5a:	68ba      	ldr	r2, [r7, #8]
 800af5c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800af60:	78fa      	ldrb	r2, [r7, #3]
 800af62:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}

0800af6e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b084      	sub	sp, #16
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
 800af76:	460b      	mov	r3, r1
 800af78:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	32b0      	adds	r2, #176	@ 0xb0
 800af84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af88:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	32b0      	adds	r2, #176	@ 0xb0
 800af94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d101      	bne.n	800afa0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800af9c:	2303      	movs	r3, #3
 800af9e:	e01a      	b.n	800afd6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800afa0:	78fb      	ldrb	r3, [r7, #3]
 800afa2:	4619      	mov	r1, r3
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f002 f954 	bl	800d252 <USBD_LL_GetRxDataSize>
 800afaa:	4602      	mov	r2, r0
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	33b0      	adds	r3, #176	@ 0xb0
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	4413      	add	r3, r2
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	68fa      	ldr	r2, [r7, #12]
 800afc6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800afd0:	4611      	mov	r1, r2
 800afd2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800afd4:	2300      	movs	r3, #0
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}

0800afde <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800afde:	b580      	push	{r7, lr}
 800afe0:	b084      	sub	sp, #16
 800afe2:	af00      	add	r7, sp, #0
 800afe4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	32b0      	adds	r2, #176	@ 0xb0
 800aff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d101      	bne.n	800b000 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800affc:	2303      	movs	r3, #3
 800affe:	e024      	b.n	800b04a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	33b0      	adds	r3, #176	@ 0xb0
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	4413      	add	r3, r2
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d019      	beq.n	800b048 <USBD_CDC_EP0_RxReady+0x6a>
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b01a:	2bff      	cmp	r3, #255	@ 0xff
 800b01c:	d014      	beq.n	800b048 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	33b0      	adds	r3, #176	@ 0xb0
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	4413      	add	r3, r2
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	68fa      	ldr	r2, [r7, #12]
 800b032:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b036:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b038:	68fa      	ldr	r2, [r7, #12]
 800b03a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b03e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	22ff      	movs	r2, #255	@ 0xff
 800b044:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3710      	adds	r7, #16
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
	...

0800b054 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b05c:	2182      	movs	r1, #130	@ 0x82
 800b05e:	4818      	ldr	r0, [pc, #96]	@ (800b0c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b060:	f000 fd0f 	bl	800ba82 <USBD_GetEpDesc>
 800b064:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b066:	2101      	movs	r1, #1
 800b068:	4815      	ldr	r0, [pc, #84]	@ (800b0c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b06a:	f000 fd0a 	bl	800ba82 <USBD_GetEpDesc>
 800b06e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b070:	2181      	movs	r1, #129	@ 0x81
 800b072:	4813      	ldr	r0, [pc, #76]	@ (800b0c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b074:	f000 fd05 	bl	800ba82 <USBD_GetEpDesc>
 800b078:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b07a:	697b      	ldr	r3, [r7, #20]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d002      	beq.n	800b086 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	2210      	movs	r2, #16
 800b084:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d006      	beq.n	800b09a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	2200      	movs	r2, #0
 800b090:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b094:	711a      	strb	r2, [r3, #4]
 800b096:	2200      	movs	r2, #0
 800b098:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d006      	beq.n	800b0ae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b0a8:	711a      	strb	r2, [r3, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2243      	movs	r2, #67	@ 0x43
 800b0b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b0b4:	4b02      	ldr	r3, [pc, #8]	@ (800b0c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3718      	adds	r7, #24
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	20000058 	.word	0x20000058

0800b0c4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b086      	sub	sp, #24
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b0cc:	2182      	movs	r1, #130	@ 0x82
 800b0ce:	4818      	ldr	r0, [pc, #96]	@ (800b130 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b0d0:	f000 fcd7 	bl	800ba82 <USBD_GetEpDesc>
 800b0d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b0d6:	2101      	movs	r1, #1
 800b0d8:	4815      	ldr	r0, [pc, #84]	@ (800b130 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b0da:	f000 fcd2 	bl	800ba82 <USBD_GetEpDesc>
 800b0de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b0e0:	2181      	movs	r1, #129	@ 0x81
 800b0e2:	4813      	ldr	r0, [pc, #76]	@ (800b130 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b0e4:	f000 fccd 	bl	800ba82 <USBD_GetEpDesc>
 800b0e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d002      	beq.n	800b0f6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	2210      	movs	r2, #16
 800b0f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d006      	beq.n	800b10a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	2200      	movs	r2, #0
 800b100:	711a      	strb	r2, [r3, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	f042 0202 	orr.w	r2, r2, #2
 800b108:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d006      	beq.n	800b11e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2200      	movs	r2, #0
 800b114:	711a      	strb	r2, [r3, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	f042 0202 	orr.w	r2, r2, #2
 800b11c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2243      	movs	r2, #67	@ 0x43
 800b122:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b124:	4b02      	ldr	r3, [pc, #8]	@ (800b130 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b126:	4618      	mov	r0, r3
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	20000058 	.word	0x20000058

0800b134 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b086      	sub	sp, #24
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b13c:	2182      	movs	r1, #130	@ 0x82
 800b13e:	4818      	ldr	r0, [pc, #96]	@ (800b1a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b140:	f000 fc9f 	bl	800ba82 <USBD_GetEpDesc>
 800b144:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b146:	2101      	movs	r1, #1
 800b148:	4815      	ldr	r0, [pc, #84]	@ (800b1a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b14a:	f000 fc9a 	bl	800ba82 <USBD_GetEpDesc>
 800b14e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b150:	2181      	movs	r1, #129	@ 0x81
 800b152:	4813      	ldr	r0, [pc, #76]	@ (800b1a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b154:	f000 fc95 	bl	800ba82 <USBD_GetEpDesc>
 800b158:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d002      	beq.n	800b166 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	2210      	movs	r2, #16
 800b164:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d006      	beq.n	800b17a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	2200      	movs	r2, #0
 800b170:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b174:	711a      	strb	r2, [r3, #4]
 800b176:	2200      	movs	r2, #0
 800b178:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d006      	beq.n	800b18e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2200      	movs	r2, #0
 800b184:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b188:	711a      	strb	r2, [r3, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2243      	movs	r2, #67	@ 0x43
 800b192:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b194:	4b02      	ldr	r3, [pc, #8]	@ (800b1a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b196:	4618      	mov	r0, r3
 800b198:	3718      	adds	r7, #24
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	20000058 	.word	0x20000058

0800b1a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	220a      	movs	r2, #10
 800b1b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b1b2:	4b03      	ldr	r3, [pc, #12]	@ (800b1c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	370c      	adds	r7, #12
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr
 800b1c0:	20000014 	.word	0x20000014

0800b1c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d101      	bne.n	800b1d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b1d4:	2303      	movs	r3, #3
 800b1d6:	e009      	b.n	800b1ec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	33b0      	adds	r3, #176	@ 0xb0
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	4413      	add	r3, r2
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b1ea:	2300      	movs	r3, #0
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b087      	sub	sp, #28
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	60b9      	str	r1, [r7, #8]
 800b202:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	32b0      	adds	r2, #176	@ 0xb0
 800b20e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b212:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d101      	bne.n	800b21e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b21a:	2303      	movs	r3, #3
 800b21c:	e008      	b.n	800b230 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	68ba      	ldr	r2, [r7, #8]
 800b222:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b22e:	2300      	movs	r3, #0
}
 800b230:	4618      	mov	r0, r3
 800b232:	371c      	adds	r7, #28
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr

0800b23c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	32b0      	adds	r2, #176	@ 0xb0
 800b250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b254:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d101      	bne.n	800b260 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b25c:	2303      	movs	r3, #3
 800b25e:	e004      	b.n	800b26a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	683a      	ldr	r2, [r7, #0]
 800b264:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b268:	2300      	movs	r3, #0
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3714      	adds	r7, #20
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr
	...

0800b278 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	32b0      	adds	r2, #176	@ 0xb0
 800b28a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b28e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	32b0      	adds	r2, #176	@ 0xb0
 800b29a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d101      	bne.n	800b2a6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	e018      	b.n	800b2d8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	7c1b      	ldrb	r3, [r3, #16]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d10a      	bne.n	800b2c4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b2ae:	4b0c      	ldr	r3, [pc, #48]	@ (800b2e0 <USBD_CDC_ReceivePacket+0x68>)
 800b2b0:	7819      	ldrb	r1, [r3, #0]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b2b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f001 ffa7 	bl	800d210 <USBD_LL_PrepareReceive>
 800b2c2:	e008      	b.n	800b2d6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b2c4:	4b06      	ldr	r3, [pc, #24]	@ (800b2e0 <USBD_CDC_ReceivePacket+0x68>)
 800b2c6:	7819      	ldrb	r1, [r3, #0]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b2ce:	2340      	movs	r3, #64	@ 0x40
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f001 ff9d 	bl	800d210 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b2d6:	2300      	movs	r3, #0
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	2000009c 	.word	0x2000009c

0800b2e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b086      	sub	sp, #24
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	4613      	mov	r3, r2
 800b2f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d101      	bne.n	800b2fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b2f8:	2303      	movs	r3, #3
 800b2fa:	e01f      	b.n	800b33c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2200      	movs	r2, #0
 800b308:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2200      	movs	r2, #0
 800b310:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d003      	beq.n	800b322 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	68ba      	ldr	r2, [r7, #8]
 800b31e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2201      	movs	r2, #1
 800b326:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	79fa      	ldrb	r2, [r7, #7]
 800b32e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f001 fe17 	bl	800cf64 <USBD_LL_Init>
 800b336:	4603      	mov	r3, r0
 800b338:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b33a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3718      	adds	r7, #24
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b34e:	2300      	movs	r3, #0
 800b350:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d101      	bne.n	800b35c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b358:	2303      	movs	r3, #3
 800b35a:	e025      	b.n	800b3a8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	683a      	ldr	r2, [r7, #0]
 800b360:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	32ae      	adds	r2, #174	@ 0xae
 800b36e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b374:	2b00      	cmp	r3, #0
 800b376:	d00f      	beq.n	800b398 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	32ae      	adds	r2, #174	@ 0xae
 800b382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b388:	f107 020e 	add.w	r2, r7, #14
 800b38c:	4610      	mov	r0, r2
 800b38e:	4798      	blx	r3
 800b390:	4602      	mov	r2, r0
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b39e:	1c5a      	adds	r2, r3, #1
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3710      	adds	r7, #16
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f001 fe1f 	bl	800cffc <USBD_LL_Start>
 800b3be:	4603      	mov	r3, r0
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b3d0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	370c      	adds	r7, #12
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr

0800b3de <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b084      	sub	sp, #16
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d009      	beq.n	800b40c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	78fa      	ldrb	r2, [r7, #3]
 800b402:	4611      	mov	r1, r2
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	4798      	blx	r3
 800b408:	4603      	mov	r3, r0
 800b40a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b416:	b580      	push	{r7, lr}
 800b418:	b084      	sub	sp, #16
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
 800b41e:	460b      	mov	r3, r1
 800b420:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b422:	2300      	movs	r3, #0
 800b424:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	78fa      	ldrb	r2, [r7, #3]
 800b430:	4611      	mov	r1, r2
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	4798      	blx	r3
 800b436:	4603      	mov	r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d001      	beq.n	800b440 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b43c:	2303      	movs	r3, #3
 800b43e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b440:	7bfb      	ldrb	r3, [r7, #15]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b084      	sub	sp, #16
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
 800b452:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b45a:	6839      	ldr	r1, [r7, #0]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f001 f90c 	bl	800c67a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2201      	movs	r2, #1
 800b466:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b470:	461a      	mov	r2, r3
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b47e:	f003 031f 	and.w	r3, r3, #31
 800b482:	2b02      	cmp	r3, #2
 800b484:	d01a      	beq.n	800b4bc <USBD_LL_SetupStage+0x72>
 800b486:	2b02      	cmp	r3, #2
 800b488:	d822      	bhi.n	800b4d0 <USBD_LL_SetupStage+0x86>
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d002      	beq.n	800b494 <USBD_LL_SetupStage+0x4a>
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d00a      	beq.n	800b4a8 <USBD_LL_SetupStage+0x5e>
 800b492:	e01d      	b.n	800b4d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b49a:	4619      	mov	r1, r3
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 fb63 	bl	800bb68 <USBD_StdDevReq>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	73fb      	strb	r3, [r7, #15]
      break;
 800b4a6:	e020      	b.n	800b4ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 fbcb 	bl	800bc4c <USBD_StdItfReq>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	73fb      	strb	r3, [r7, #15]
      break;
 800b4ba:	e016      	b.n	800b4ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 fc2d 	bl	800bd24 <USBD_StdEPReq>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	73fb      	strb	r3, [r7, #15]
      break;
 800b4ce:	e00c      	b.n	800b4ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b4d6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b4da:	b2db      	uxtb	r3, r3
 800b4dc:	4619      	mov	r1, r3
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f001 fdec 	bl	800d0bc <USBD_LL_StallEP>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	73fb      	strb	r3, [r7, #15]
      break;
 800b4e8:	bf00      	nop
  }

  return ret;
 800b4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b086      	sub	sp, #24
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	607a      	str	r2, [r7, #4]
 800b500:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b502:	2300      	movs	r3, #0
 800b504:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b506:	7afb      	ldrb	r3, [r7, #11]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d16e      	bne.n	800b5ea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b512:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b51a:	2b03      	cmp	r3, #3
 800b51c:	f040 8098 	bne.w	800b650 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	689a      	ldr	r2, [r3, #8]
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	68db      	ldr	r3, [r3, #12]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d913      	bls.n	800b554 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	689a      	ldr	r2, [r3, #8]
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	1ad2      	subs	r2, r2, r3
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	68da      	ldr	r2, [r3, #12]
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	689b      	ldr	r3, [r3, #8]
 800b542:	4293      	cmp	r3, r2
 800b544:	bf28      	it	cs
 800b546:	4613      	movcs	r3, r2
 800b548:	461a      	mov	r2, r3
 800b54a:	6879      	ldr	r1, [r7, #4]
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f001 f994 	bl	800c87a <USBD_CtlContinueRx>
 800b552:	e07d      	b.n	800b650 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b55a:	f003 031f 	and.w	r3, r3, #31
 800b55e:	2b02      	cmp	r3, #2
 800b560:	d014      	beq.n	800b58c <USBD_LL_DataOutStage+0x98>
 800b562:	2b02      	cmp	r3, #2
 800b564:	d81d      	bhi.n	800b5a2 <USBD_LL_DataOutStage+0xae>
 800b566:	2b00      	cmp	r3, #0
 800b568:	d002      	beq.n	800b570 <USBD_LL_DataOutStage+0x7c>
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d003      	beq.n	800b576 <USBD_LL_DataOutStage+0x82>
 800b56e:	e018      	b.n	800b5a2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b570:	2300      	movs	r3, #0
 800b572:	75bb      	strb	r3, [r7, #22]
            break;
 800b574:	e018      	b.n	800b5a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	4619      	mov	r1, r3
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	f000 fa64 	bl	800ba4e <USBD_CoreFindIF>
 800b586:	4603      	mov	r3, r0
 800b588:	75bb      	strb	r3, [r7, #22]
            break;
 800b58a:	e00d      	b.n	800b5a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b592:	b2db      	uxtb	r3, r3
 800b594:	4619      	mov	r1, r3
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f000 fa66 	bl	800ba68 <USBD_CoreFindEP>
 800b59c:	4603      	mov	r3, r0
 800b59e:	75bb      	strb	r3, [r7, #22]
            break;
 800b5a0:	e002      	b.n	800b5a8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	75bb      	strb	r3, [r7, #22]
            break;
 800b5a6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b5a8:	7dbb      	ldrb	r3, [r7, #22]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d119      	bne.n	800b5e2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	2b03      	cmp	r3, #3
 800b5b8:	d113      	bne.n	800b5e2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b5ba:	7dba      	ldrb	r2, [r7, #22]
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	32ae      	adds	r2, #174	@ 0xae
 800b5c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00b      	beq.n	800b5e2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b5ca:	7dba      	ldrb	r2, [r7, #22]
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b5d2:	7dba      	ldrb	r2, [r7, #22]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	32ae      	adds	r2, #174	@ 0xae
 800b5d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5dc:	691b      	ldr	r3, [r3, #16]
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b5e2:	68f8      	ldr	r0, [r7, #12]
 800b5e4:	f001 f95a 	bl	800c89c <USBD_CtlSendStatus>
 800b5e8:	e032      	b.n	800b650 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b5ea:	7afb      	ldrb	r3, [r7, #11]
 800b5ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	f000 fa37 	bl	800ba68 <USBD_CoreFindEP>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b5fe:	7dbb      	ldrb	r3, [r7, #22]
 800b600:	2bff      	cmp	r3, #255	@ 0xff
 800b602:	d025      	beq.n	800b650 <USBD_LL_DataOutStage+0x15c>
 800b604:	7dbb      	ldrb	r3, [r7, #22]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d122      	bne.n	800b650 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b610:	b2db      	uxtb	r3, r3
 800b612:	2b03      	cmp	r3, #3
 800b614:	d117      	bne.n	800b646 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b616:	7dba      	ldrb	r2, [r7, #22]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	32ae      	adds	r2, #174	@ 0xae
 800b61c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b620:	699b      	ldr	r3, [r3, #24]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00f      	beq.n	800b646 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b626:	7dba      	ldrb	r2, [r7, #22]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b62e:	7dba      	ldrb	r2, [r7, #22]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	32ae      	adds	r2, #174	@ 0xae
 800b634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b638:	699b      	ldr	r3, [r3, #24]
 800b63a:	7afa      	ldrb	r2, [r7, #11]
 800b63c:	4611      	mov	r1, r2
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	4798      	blx	r3
 800b642:	4603      	mov	r3, r0
 800b644:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b646:	7dfb      	ldrb	r3, [r7, #23]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d001      	beq.n	800b650 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b64c:	7dfb      	ldrb	r3, [r7, #23]
 800b64e:	e000      	b.n	800b652 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b650:	2300      	movs	r3, #0
}
 800b652:	4618      	mov	r0, r3
 800b654:	3718      	adds	r7, #24
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}

0800b65a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b086      	sub	sp, #24
 800b65e:	af00      	add	r7, sp, #0
 800b660:	60f8      	str	r0, [r7, #12]
 800b662:	460b      	mov	r3, r1
 800b664:	607a      	str	r2, [r7, #4]
 800b666:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b668:	7afb      	ldrb	r3, [r7, #11]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d16f      	bne.n	800b74e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	3314      	adds	r3, #20
 800b672:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b67a:	2b02      	cmp	r3, #2
 800b67c:	d15a      	bne.n	800b734 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	689a      	ldr	r2, [r3, #8]
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	429a      	cmp	r2, r3
 800b688:	d914      	bls.n	800b6b4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	689a      	ldr	r2, [r3, #8]
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	68db      	ldr	r3, [r3, #12]
 800b692:	1ad2      	subs	r2, r2, r3
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	461a      	mov	r2, r3
 800b69e:	6879      	ldr	r1, [r7, #4]
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f001 f8bc 	bl	800c81e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	2100      	movs	r1, #0
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f001 fdaf 	bl	800d210 <USBD_LL_PrepareReceive>
 800b6b2:	e03f      	b.n	800b734 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	68da      	ldr	r2, [r3, #12]
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d11c      	bne.n	800b6fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	685a      	ldr	r2, [r3, #4]
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d316      	bcc.n	800b6fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	685a      	ldr	r2, [r3, #4]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d20f      	bcs.n	800b6fa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b6da:	2200      	movs	r2, #0
 800b6dc:	2100      	movs	r1, #0
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	f001 f89d 	bl	800c81e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	2100      	movs	r1, #0
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f001 fd8c 	bl	800d210 <USBD_LL_PrepareReceive>
 800b6f8:	e01c      	b.n	800b734 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b700:	b2db      	uxtb	r3, r3
 800b702:	2b03      	cmp	r3, #3
 800b704:	d10f      	bne.n	800b726 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d009      	beq.n	800b726 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2200      	movs	r2, #0
 800b716:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b720:	68db      	ldr	r3, [r3, #12]
 800b722:	68f8      	ldr	r0, [r7, #12]
 800b724:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b726:	2180      	movs	r1, #128	@ 0x80
 800b728:	68f8      	ldr	r0, [r7, #12]
 800b72a:	f001 fcc7 	bl	800d0bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b72e:	68f8      	ldr	r0, [r7, #12]
 800b730:	f001 f8c7 	bl	800c8c2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d03a      	beq.n	800b7b4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	f7ff fe42 	bl	800b3c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2200      	movs	r2, #0
 800b748:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b74c:	e032      	b.n	800b7b4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b74e:	7afb      	ldrb	r3, [r7, #11]
 800b750:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b754:	b2db      	uxtb	r3, r3
 800b756:	4619      	mov	r1, r3
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f000 f985 	bl	800ba68 <USBD_CoreFindEP>
 800b75e:	4603      	mov	r3, r0
 800b760:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b762:	7dfb      	ldrb	r3, [r7, #23]
 800b764:	2bff      	cmp	r3, #255	@ 0xff
 800b766:	d025      	beq.n	800b7b4 <USBD_LL_DataInStage+0x15a>
 800b768:	7dfb      	ldrb	r3, [r7, #23]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d122      	bne.n	800b7b4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b774:	b2db      	uxtb	r3, r3
 800b776:	2b03      	cmp	r3, #3
 800b778:	d11c      	bne.n	800b7b4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b77a:	7dfa      	ldrb	r2, [r7, #23]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	32ae      	adds	r2, #174	@ 0xae
 800b780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b784:	695b      	ldr	r3, [r3, #20]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d014      	beq.n	800b7b4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b78a:	7dfa      	ldrb	r2, [r7, #23]
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b792:	7dfa      	ldrb	r2, [r7, #23]
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	32ae      	adds	r2, #174	@ 0xae
 800b798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b79c:	695b      	ldr	r3, [r3, #20]
 800b79e:	7afa      	ldrb	r2, [r7, #11]
 800b7a0:	4611      	mov	r1, r2
 800b7a2:	68f8      	ldr	r0, [r7, #12]
 800b7a4:	4798      	blx	r3
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b7aa:	7dbb      	ldrb	r3, [r7, #22]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d001      	beq.n	800b7b4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b7b0:	7dbb      	ldrb	r3, [r7, #22]
 800b7b2:	e000      	b.n	800b7b6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b7b4:	2300      	movs	r3, #0
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3718      	adds	r7, #24
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b084      	sub	sp, #16
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d014      	beq.n	800b824 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d00e      	beq.n	800b824 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	687a      	ldr	r2, [r7, #4]
 800b810:	6852      	ldr	r2, [r2, #4]
 800b812:	b2d2      	uxtb	r2, r2
 800b814:	4611      	mov	r1, r2
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	4798      	blx	r3
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d001      	beq.n	800b824 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b820:	2303      	movs	r3, #3
 800b822:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b824:	2340      	movs	r3, #64	@ 0x40
 800b826:	2200      	movs	r2, #0
 800b828:	2100      	movs	r1, #0
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f001 fc01 	bl	800d032 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2201      	movs	r2, #1
 800b834:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2240      	movs	r2, #64	@ 0x40
 800b83c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b840:	2340      	movs	r3, #64	@ 0x40
 800b842:	2200      	movs	r2, #0
 800b844:	2180      	movs	r1, #128	@ 0x80
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f001 fbf3 	bl	800d032 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2240      	movs	r2, #64	@ 0x40
 800b856:	621a      	str	r2, [r3, #32]

  return ret;
 800b858:	7bfb      	ldrb	r3, [r7, #15]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}

0800b862 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b862:	b480      	push	{r7}
 800b864:	b083      	sub	sp, #12
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
 800b86a:	460b      	mov	r3, r1
 800b86c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	78fa      	ldrb	r2, [r7, #3]
 800b872:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	370c      	adds	r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr

0800b882 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b882:	b480      	push	{r7}
 800b884:	b083      	sub	sp, #12
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b890:	b2db      	uxtb	r3, r3
 800b892:	2b04      	cmp	r3, #4
 800b894:	d006      	beq.n	800b8a4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b89c:	b2da      	uxtb	r2, r3
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2204      	movs	r2, #4
 800b8a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b8ac:	2300      	movs	r3, #0
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	370c      	adds	r7, #12
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr

0800b8ba <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b8ba:	b480      	push	{r7}
 800b8bc:	b083      	sub	sp, #12
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	2b04      	cmp	r3, #4
 800b8cc:	d106      	bne.n	800b8dc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b8d4:	b2da      	uxtb	r2, r3
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	370c      	adds	r7, #12
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr

0800b8ea <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b082      	sub	sp, #8
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8f8:	b2db      	uxtb	r3, r3
 800b8fa:	2b03      	cmp	r3, #3
 800b8fc:	d110      	bne.n	800b920 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b904:	2b00      	cmp	r3, #0
 800b906:	d00b      	beq.n	800b920 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b90e:	69db      	ldr	r3, [r3, #28]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d005      	beq.n	800b920 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b91a:	69db      	ldr	r3, [r3, #28]
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b920:	2300      	movs	r3, #0
}
 800b922:	4618      	mov	r0, r3
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}

0800b92a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b082      	sub	sp, #8
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
 800b932:	460b      	mov	r3, r1
 800b934:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	32ae      	adds	r2, #174	@ 0xae
 800b940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d101      	bne.n	800b94c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b948:	2303      	movs	r3, #3
 800b94a:	e01c      	b.n	800b986 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b952:	b2db      	uxtb	r3, r3
 800b954:	2b03      	cmp	r3, #3
 800b956:	d115      	bne.n	800b984 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	32ae      	adds	r2, #174	@ 0xae
 800b962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b966:	6a1b      	ldr	r3, [r3, #32]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00b      	beq.n	800b984 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	32ae      	adds	r2, #174	@ 0xae
 800b976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b97a:	6a1b      	ldr	r3, [r3, #32]
 800b97c:	78fa      	ldrb	r2, [r7, #3]
 800b97e:	4611      	mov	r1, r2
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3708      	adds	r7, #8
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b082      	sub	sp, #8
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
 800b996:	460b      	mov	r3, r1
 800b998:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	32ae      	adds	r2, #174	@ 0xae
 800b9a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d101      	bne.n	800b9b0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b9ac:	2303      	movs	r3, #3
 800b9ae:	e01c      	b.n	800b9ea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	2b03      	cmp	r3, #3
 800b9ba:	d115      	bne.n	800b9e8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	32ae      	adds	r2, #174	@ 0xae
 800b9c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00b      	beq.n	800b9e8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	32ae      	adds	r2, #174	@ 0xae
 800b9da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9e0:	78fa      	ldrb	r2, [r7, #3]
 800b9e2:	4611      	mov	r1, r2
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}

0800b9f2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b9f2:	b480      	push	{r7}
 800b9f4:	b083      	sub	sp, #12
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b9fa:	2300      	movs	r3, #0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ba10:	2300      	movs	r3, #0
 800ba12:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00e      	beq.n	800ba44 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	6852      	ldr	r2, [r2, #4]
 800ba32:	b2d2      	uxtb	r2, r2
 800ba34:	4611      	mov	r1, r2
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	4798      	blx	r3
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d001      	beq.n	800ba44 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ba40:	2303      	movs	r3, #3
 800ba42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ba44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}

0800ba4e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ba4e:	b480      	push	{r7}
 800ba50:	b083      	sub	sp, #12
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
 800ba56:	460b      	mov	r3, r1
 800ba58:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ba5a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	370c      	adds	r7, #12
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	460b      	mov	r3, r1
 800ba72:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ba74:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	370c      	adds	r7, #12
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr

0800ba82 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b086      	sub	sp, #24
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ba96:	2300      	movs	r3, #0
 800ba98:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	885b      	ldrh	r3, [r3, #2]
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	68fa      	ldr	r2, [r7, #12]
 800baa2:	7812      	ldrb	r2, [r2, #0]
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d91f      	bls.n	800bae8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800baae:	e013      	b.n	800bad8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bab0:	f107 030a 	add.w	r3, r7, #10
 800bab4:	4619      	mov	r1, r3
 800bab6:	6978      	ldr	r0, [r7, #20]
 800bab8:	f000 f81b 	bl	800baf2 <USBD_GetNextDesc>
 800babc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	785b      	ldrb	r3, [r3, #1]
 800bac2:	2b05      	cmp	r3, #5
 800bac4:	d108      	bne.n	800bad8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	789b      	ldrb	r3, [r3, #2]
 800bace:	78fa      	ldrb	r2, [r7, #3]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d008      	beq.n	800bae6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bad4:	2300      	movs	r3, #0
 800bad6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	885b      	ldrh	r3, [r3, #2]
 800badc:	b29a      	uxth	r2, r3
 800bade:	897b      	ldrh	r3, [r7, #10]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d8e5      	bhi.n	800bab0 <USBD_GetEpDesc+0x2e>
 800bae4:	e000      	b.n	800bae8 <USBD_GetEpDesc+0x66>
          break;
 800bae6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bae8:	693b      	ldr	r3, [r7, #16]
}
 800baea:	4618      	mov	r0, r3
 800baec:	3718      	adds	r7, #24
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}

0800baf2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800baf2:	b480      	push	{r7}
 800baf4:	b085      	sub	sp, #20
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
 800bafa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	881b      	ldrh	r3, [r3, #0]
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	7812      	ldrb	r2, [r2, #0]
 800bb08:	4413      	add	r3, r2
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	461a      	mov	r2, r3
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	4413      	add	r3, r2
 800bb1a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3714      	adds	r7, #20
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr

0800bb2a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bb2a:	b480      	push	{r7}
 800bb2c:	b087      	sub	sp, #28
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bb48:	8a3b      	ldrh	r3, [r7, #16]
 800bb4a:	021b      	lsls	r3, r3, #8
 800bb4c:	b21a      	sxth	r2, r3
 800bb4e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bb52:	4313      	orrs	r3, r2
 800bb54:	b21b      	sxth	r3, r3
 800bb56:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bb58:	89fb      	ldrh	r3, [r7, #14]
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	371c      	adds	r7, #28
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr
	...

0800bb68 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b084      	sub	sp, #16
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb72:	2300      	movs	r3, #0
 800bb74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bb7e:	2b40      	cmp	r3, #64	@ 0x40
 800bb80:	d005      	beq.n	800bb8e <USBD_StdDevReq+0x26>
 800bb82:	2b40      	cmp	r3, #64	@ 0x40
 800bb84:	d857      	bhi.n	800bc36 <USBD_StdDevReq+0xce>
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d00f      	beq.n	800bbaa <USBD_StdDevReq+0x42>
 800bb8a:	2b20      	cmp	r3, #32
 800bb8c:	d153      	bne.n	800bc36 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	32ae      	adds	r2, #174	@ 0xae
 800bb98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb9c:	689b      	ldr	r3, [r3, #8]
 800bb9e:	6839      	ldr	r1, [r7, #0]
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	4798      	blx	r3
 800bba4:	4603      	mov	r3, r0
 800bba6:	73fb      	strb	r3, [r7, #15]
      break;
 800bba8:	e04a      	b.n	800bc40 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	785b      	ldrb	r3, [r3, #1]
 800bbae:	2b09      	cmp	r3, #9
 800bbb0:	d83b      	bhi.n	800bc2a <USBD_StdDevReq+0xc2>
 800bbb2:	a201      	add	r2, pc, #4	@ (adr r2, 800bbb8 <USBD_StdDevReq+0x50>)
 800bbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb8:	0800bc0d 	.word	0x0800bc0d
 800bbbc:	0800bc21 	.word	0x0800bc21
 800bbc0:	0800bc2b 	.word	0x0800bc2b
 800bbc4:	0800bc17 	.word	0x0800bc17
 800bbc8:	0800bc2b 	.word	0x0800bc2b
 800bbcc:	0800bbeb 	.word	0x0800bbeb
 800bbd0:	0800bbe1 	.word	0x0800bbe1
 800bbd4:	0800bc2b 	.word	0x0800bc2b
 800bbd8:	0800bc03 	.word	0x0800bc03
 800bbdc:	0800bbf5 	.word	0x0800bbf5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bbe0:	6839      	ldr	r1, [r7, #0]
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 fa3c 	bl	800c060 <USBD_GetDescriptor>
          break;
 800bbe8:	e024      	b.n	800bc34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bbea:	6839      	ldr	r1, [r7, #0]
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f000 fba1 	bl	800c334 <USBD_SetAddress>
          break;
 800bbf2:	e01f      	b.n	800bc34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bbf4:	6839      	ldr	r1, [r7, #0]
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 fbe0 	bl	800c3bc <USBD_SetConfig>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	73fb      	strb	r3, [r7, #15]
          break;
 800bc00:	e018      	b.n	800bc34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bc02:	6839      	ldr	r1, [r7, #0]
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 fc83 	bl	800c510 <USBD_GetConfig>
          break;
 800bc0a:	e013      	b.n	800bc34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bc0c:	6839      	ldr	r1, [r7, #0]
 800bc0e:	6878      	ldr	r0, [r7, #4]
 800bc10:	f000 fcb4 	bl	800c57c <USBD_GetStatus>
          break;
 800bc14:	e00e      	b.n	800bc34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bc16:	6839      	ldr	r1, [r7, #0]
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f000 fce3 	bl	800c5e4 <USBD_SetFeature>
          break;
 800bc1e:	e009      	b.n	800bc34 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bc20:	6839      	ldr	r1, [r7, #0]
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 fd07 	bl	800c636 <USBD_ClrFeature>
          break;
 800bc28:	e004      	b.n	800bc34 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bc2a:	6839      	ldr	r1, [r7, #0]
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 fd5e 	bl	800c6ee <USBD_CtlError>
          break;
 800bc32:	bf00      	nop
      }
      break;
 800bc34:	e004      	b.n	800bc40 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bc36:	6839      	ldr	r1, [r7, #0]
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f000 fd58 	bl	800c6ee <USBD_CtlError>
      break;
 800bc3e:	bf00      	nop
  }

  return ret;
 800bc40:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3710      	adds	r7, #16
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop

0800bc4c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc56:	2300      	movs	r3, #0
 800bc58:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bc62:	2b40      	cmp	r3, #64	@ 0x40
 800bc64:	d005      	beq.n	800bc72 <USBD_StdItfReq+0x26>
 800bc66:	2b40      	cmp	r3, #64	@ 0x40
 800bc68:	d852      	bhi.n	800bd10 <USBD_StdItfReq+0xc4>
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d001      	beq.n	800bc72 <USBD_StdItfReq+0x26>
 800bc6e:	2b20      	cmp	r3, #32
 800bc70:	d14e      	bne.n	800bd10 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	3b01      	subs	r3, #1
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d840      	bhi.n	800bd02 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	889b      	ldrh	r3, [r3, #4]
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d836      	bhi.n	800bcf8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	889b      	ldrh	r3, [r3, #4]
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	4619      	mov	r1, r3
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f7ff fedb 	bl	800ba4e <USBD_CoreFindIF>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bc9c:	7bbb      	ldrb	r3, [r7, #14]
 800bc9e:	2bff      	cmp	r3, #255	@ 0xff
 800bca0:	d01d      	beq.n	800bcde <USBD_StdItfReq+0x92>
 800bca2:	7bbb      	ldrb	r3, [r7, #14]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d11a      	bne.n	800bcde <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bca8:	7bba      	ldrb	r2, [r7, #14]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	32ae      	adds	r2, #174	@ 0xae
 800bcae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d00f      	beq.n	800bcd8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bcb8:	7bba      	ldrb	r2, [r7, #14]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bcc0:	7bba      	ldrb	r2, [r7, #14]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	32ae      	adds	r2, #174	@ 0xae
 800bcc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	6839      	ldr	r1, [r7, #0]
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	4798      	blx	r3
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bcd6:	e004      	b.n	800bce2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bcd8:	2303      	movs	r3, #3
 800bcda:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bcdc:	e001      	b.n	800bce2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bcde:	2303      	movs	r3, #3
 800bce0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	88db      	ldrh	r3, [r3, #6]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d110      	bne.n	800bd0c <USBD_StdItfReq+0xc0>
 800bcea:	7bfb      	ldrb	r3, [r7, #15]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d10d      	bne.n	800bd0c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 fdd3 	bl	800c89c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bcf6:	e009      	b.n	800bd0c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bcf8:	6839      	ldr	r1, [r7, #0]
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 fcf7 	bl	800c6ee <USBD_CtlError>
          break;
 800bd00:	e004      	b.n	800bd0c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bd02:	6839      	ldr	r1, [r7, #0]
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 fcf2 	bl	800c6ee <USBD_CtlError>
          break;
 800bd0a:	e000      	b.n	800bd0e <USBD_StdItfReq+0xc2>
          break;
 800bd0c:	bf00      	nop
      }
      break;
 800bd0e:	e004      	b.n	800bd1a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bd10:	6839      	ldr	r1, [r7, #0]
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f000 fceb 	bl	800c6ee <USBD_CtlError>
      break;
 800bd18:	bf00      	nop
  }

  return ret;
 800bd1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3710      	adds	r7, #16
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	889b      	ldrh	r3, [r3, #4]
 800bd36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bd40:	2b40      	cmp	r3, #64	@ 0x40
 800bd42:	d007      	beq.n	800bd54 <USBD_StdEPReq+0x30>
 800bd44:	2b40      	cmp	r3, #64	@ 0x40
 800bd46:	f200 817f 	bhi.w	800c048 <USBD_StdEPReq+0x324>
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d02a      	beq.n	800bda4 <USBD_StdEPReq+0x80>
 800bd4e:	2b20      	cmp	r3, #32
 800bd50:	f040 817a 	bne.w	800c048 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bd54:	7bbb      	ldrb	r3, [r7, #14]
 800bd56:	4619      	mov	r1, r3
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7ff fe85 	bl	800ba68 <USBD_CoreFindEP>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd62:	7b7b      	ldrb	r3, [r7, #13]
 800bd64:	2bff      	cmp	r3, #255	@ 0xff
 800bd66:	f000 8174 	beq.w	800c052 <USBD_StdEPReq+0x32e>
 800bd6a:	7b7b      	ldrb	r3, [r7, #13]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f040 8170 	bne.w	800c052 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bd72:	7b7a      	ldrb	r2, [r7, #13]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bd7a:	7b7a      	ldrb	r2, [r7, #13]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	32ae      	adds	r2, #174	@ 0xae
 800bd80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd84:	689b      	ldr	r3, [r3, #8]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	f000 8163 	beq.w	800c052 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bd8c:	7b7a      	ldrb	r2, [r7, #13]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	32ae      	adds	r2, #174	@ 0xae
 800bd92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	6839      	ldr	r1, [r7, #0]
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	4798      	blx	r3
 800bd9e:	4603      	mov	r3, r0
 800bda0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bda2:	e156      	b.n	800c052 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	785b      	ldrb	r3, [r3, #1]
 800bda8:	2b03      	cmp	r3, #3
 800bdaa:	d008      	beq.n	800bdbe <USBD_StdEPReq+0x9a>
 800bdac:	2b03      	cmp	r3, #3
 800bdae:	f300 8145 	bgt.w	800c03c <USBD_StdEPReq+0x318>
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f000 809b 	beq.w	800beee <USBD_StdEPReq+0x1ca>
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d03c      	beq.n	800be36 <USBD_StdEPReq+0x112>
 800bdbc:	e13e      	b.n	800c03c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdc4:	b2db      	uxtb	r3, r3
 800bdc6:	2b02      	cmp	r3, #2
 800bdc8:	d002      	beq.n	800bdd0 <USBD_StdEPReq+0xac>
 800bdca:	2b03      	cmp	r3, #3
 800bdcc:	d016      	beq.n	800bdfc <USBD_StdEPReq+0xd8>
 800bdce:	e02c      	b.n	800be2a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bdd0:	7bbb      	ldrb	r3, [r7, #14]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d00d      	beq.n	800bdf2 <USBD_StdEPReq+0xce>
 800bdd6:	7bbb      	ldrb	r3, [r7, #14]
 800bdd8:	2b80      	cmp	r3, #128	@ 0x80
 800bdda:	d00a      	beq.n	800bdf2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bddc:	7bbb      	ldrb	r3, [r7, #14]
 800bdde:	4619      	mov	r1, r3
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f001 f96b 	bl	800d0bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bde6:	2180      	movs	r1, #128	@ 0x80
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f001 f967 	bl	800d0bc <USBD_LL_StallEP>
 800bdee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bdf0:	e020      	b.n	800be34 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bdf2:	6839      	ldr	r1, [r7, #0]
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 fc7a 	bl	800c6ee <USBD_CtlError>
              break;
 800bdfa:	e01b      	b.n	800be34 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	885b      	ldrh	r3, [r3, #2]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d10e      	bne.n	800be22 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800be04:	7bbb      	ldrb	r3, [r7, #14]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00b      	beq.n	800be22 <USBD_StdEPReq+0xfe>
 800be0a:	7bbb      	ldrb	r3, [r7, #14]
 800be0c:	2b80      	cmp	r3, #128	@ 0x80
 800be0e:	d008      	beq.n	800be22 <USBD_StdEPReq+0xfe>
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	88db      	ldrh	r3, [r3, #6]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d104      	bne.n	800be22 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800be18:	7bbb      	ldrb	r3, [r7, #14]
 800be1a:	4619      	mov	r1, r3
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f001 f94d 	bl	800d0bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 fd3a 	bl	800c89c <USBD_CtlSendStatus>

              break;
 800be28:	e004      	b.n	800be34 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800be2a:	6839      	ldr	r1, [r7, #0]
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 fc5e 	bl	800c6ee <USBD_CtlError>
              break;
 800be32:	bf00      	nop
          }
          break;
 800be34:	e107      	b.n	800c046 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	2b02      	cmp	r3, #2
 800be40:	d002      	beq.n	800be48 <USBD_StdEPReq+0x124>
 800be42:	2b03      	cmp	r3, #3
 800be44:	d016      	beq.n	800be74 <USBD_StdEPReq+0x150>
 800be46:	e04b      	b.n	800bee0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be48:	7bbb      	ldrb	r3, [r7, #14]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d00d      	beq.n	800be6a <USBD_StdEPReq+0x146>
 800be4e:	7bbb      	ldrb	r3, [r7, #14]
 800be50:	2b80      	cmp	r3, #128	@ 0x80
 800be52:	d00a      	beq.n	800be6a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800be54:	7bbb      	ldrb	r3, [r7, #14]
 800be56:	4619      	mov	r1, r3
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f001 f92f 	bl	800d0bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800be5e:	2180      	movs	r1, #128	@ 0x80
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f001 f92b 	bl	800d0bc <USBD_LL_StallEP>
 800be66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800be68:	e040      	b.n	800beec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800be6a:	6839      	ldr	r1, [r7, #0]
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f000 fc3e 	bl	800c6ee <USBD_CtlError>
              break;
 800be72:	e03b      	b.n	800beec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	885b      	ldrh	r3, [r3, #2]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d136      	bne.n	800beea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800be7c:	7bbb      	ldrb	r3, [r7, #14]
 800be7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be82:	2b00      	cmp	r3, #0
 800be84:	d004      	beq.n	800be90 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800be86:	7bbb      	ldrb	r3, [r7, #14]
 800be88:	4619      	mov	r1, r3
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f001 f935 	bl	800d0fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 fd03 	bl	800c89c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800be96:	7bbb      	ldrb	r3, [r7, #14]
 800be98:	4619      	mov	r1, r3
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f7ff fde4 	bl	800ba68 <USBD_CoreFindEP>
 800bea0:	4603      	mov	r3, r0
 800bea2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bea4:	7b7b      	ldrb	r3, [r7, #13]
 800bea6:	2bff      	cmp	r3, #255	@ 0xff
 800bea8:	d01f      	beq.n	800beea <USBD_StdEPReq+0x1c6>
 800beaa:	7b7b      	ldrb	r3, [r7, #13]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d11c      	bne.n	800beea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800beb0:	7b7a      	ldrb	r2, [r7, #13]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800beb8:	7b7a      	ldrb	r2, [r7, #13]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	32ae      	adds	r2, #174	@ 0xae
 800bebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d010      	beq.n	800beea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bec8:	7b7a      	ldrb	r2, [r7, #13]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	32ae      	adds	r2, #174	@ 0xae
 800bece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	6839      	ldr	r1, [r7, #0]
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	4798      	blx	r3
 800beda:	4603      	mov	r3, r0
 800bedc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bede:	e004      	b.n	800beea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bee0:	6839      	ldr	r1, [r7, #0]
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 fc03 	bl	800c6ee <USBD_CtlError>
              break;
 800bee8:	e000      	b.n	800beec <USBD_StdEPReq+0x1c8>
              break;
 800beea:	bf00      	nop
          }
          break;
 800beec:	e0ab      	b.n	800c046 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	2b02      	cmp	r3, #2
 800bef8:	d002      	beq.n	800bf00 <USBD_StdEPReq+0x1dc>
 800befa:	2b03      	cmp	r3, #3
 800befc:	d032      	beq.n	800bf64 <USBD_StdEPReq+0x240>
 800befe:	e097      	b.n	800c030 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf00:	7bbb      	ldrb	r3, [r7, #14]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d007      	beq.n	800bf16 <USBD_StdEPReq+0x1f2>
 800bf06:	7bbb      	ldrb	r3, [r7, #14]
 800bf08:	2b80      	cmp	r3, #128	@ 0x80
 800bf0a:	d004      	beq.n	800bf16 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 fbed 	bl	800c6ee <USBD_CtlError>
                break;
 800bf14:	e091      	b.n	800c03a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	da0b      	bge.n	800bf36 <USBD_StdEPReq+0x212>
 800bf1e:	7bbb      	ldrb	r3, [r7, #14]
 800bf20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bf24:	4613      	mov	r3, r2
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	4413      	add	r3, r2
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	3310      	adds	r3, #16
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	4413      	add	r3, r2
 800bf32:	3304      	adds	r3, #4
 800bf34:	e00b      	b.n	800bf4e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf36:	7bbb      	ldrb	r3, [r7, #14]
 800bf38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	4413      	add	r3, r2
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	4413      	add	r3, r2
 800bf4c:	3304      	adds	r3, #4
 800bf4e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	2200      	movs	r2, #0
 800bf54:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	2202      	movs	r2, #2
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 fc43 	bl	800c7e8 <USBD_CtlSendData>
              break;
 800bf62:	e06a      	b.n	800c03a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bf64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	da11      	bge.n	800bf90 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bf6c:	7bbb      	ldrb	r3, [r7, #14]
 800bf6e:	f003 020f 	and.w	r2, r3, #15
 800bf72:	6879      	ldr	r1, [r7, #4]
 800bf74:	4613      	mov	r3, r2
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	4413      	add	r3, r2
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	440b      	add	r3, r1
 800bf7e:	3324      	adds	r3, #36	@ 0x24
 800bf80:	881b      	ldrh	r3, [r3, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d117      	bne.n	800bfb6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bf86:	6839      	ldr	r1, [r7, #0]
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 fbb0 	bl	800c6ee <USBD_CtlError>
                  break;
 800bf8e:	e054      	b.n	800c03a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bf90:	7bbb      	ldrb	r3, [r7, #14]
 800bf92:	f003 020f 	and.w	r2, r3, #15
 800bf96:	6879      	ldr	r1, [r7, #4]
 800bf98:	4613      	mov	r3, r2
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	4413      	add	r3, r2
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	440b      	add	r3, r1
 800bfa2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bfa6:	881b      	ldrh	r3, [r3, #0]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d104      	bne.n	800bfb6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bfac:	6839      	ldr	r1, [r7, #0]
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 fb9d 	bl	800c6ee <USBD_CtlError>
                  break;
 800bfb4:	e041      	b.n	800c03a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bfb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	da0b      	bge.n	800bfd6 <USBD_StdEPReq+0x2b2>
 800bfbe:	7bbb      	ldrb	r3, [r7, #14]
 800bfc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	4413      	add	r3, r2
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	3310      	adds	r3, #16
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	3304      	adds	r3, #4
 800bfd4:	e00b      	b.n	800bfee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bfd6:	7bbb      	ldrb	r3, [r7, #14]
 800bfd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bfdc:	4613      	mov	r3, r2
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	4413      	add	r3, r2
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	4413      	add	r3, r2
 800bfec:	3304      	adds	r3, #4
 800bfee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bff0:	7bbb      	ldrb	r3, [r7, #14]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d002      	beq.n	800bffc <USBD_StdEPReq+0x2d8>
 800bff6:	7bbb      	ldrb	r3, [r7, #14]
 800bff8:	2b80      	cmp	r3, #128	@ 0x80
 800bffa:	d103      	bne.n	800c004 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	2200      	movs	r2, #0
 800c000:	601a      	str	r2, [r3, #0]
 800c002:	e00e      	b.n	800c022 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c004:	7bbb      	ldrb	r3, [r7, #14]
 800c006:	4619      	mov	r1, r3
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f001 f895 	bl	800d138 <USBD_LL_IsStallEP>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d003      	beq.n	800c01c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	2201      	movs	r2, #1
 800c018:	601a      	str	r2, [r3, #0]
 800c01a:	e002      	b.n	800c022 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	2200      	movs	r2, #0
 800c020:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	2202      	movs	r2, #2
 800c026:	4619      	mov	r1, r3
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f000 fbdd 	bl	800c7e8 <USBD_CtlSendData>
              break;
 800c02e:	e004      	b.n	800c03a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c030:	6839      	ldr	r1, [r7, #0]
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f000 fb5b 	bl	800c6ee <USBD_CtlError>
              break;
 800c038:	bf00      	nop
          }
          break;
 800c03a:	e004      	b.n	800c046 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c03c:	6839      	ldr	r1, [r7, #0]
 800c03e:	6878      	ldr	r0, [r7, #4]
 800c040:	f000 fb55 	bl	800c6ee <USBD_CtlError>
          break;
 800c044:	bf00      	nop
      }
      break;
 800c046:	e005      	b.n	800c054 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c048:	6839      	ldr	r1, [r7, #0]
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 fb4f 	bl	800c6ee <USBD_CtlError>
      break;
 800c050:	e000      	b.n	800c054 <USBD_StdEPReq+0x330>
      break;
 800c052:	bf00      	nop
  }

  return ret;
 800c054:	7bfb      	ldrb	r3, [r7, #15]
}
 800c056:	4618      	mov	r0, r3
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
	...

0800c060 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c06a:	2300      	movs	r3, #0
 800c06c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c06e:	2300      	movs	r3, #0
 800c070:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c072:	2300      	movs	r3, #0
 800c074:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	885b      	ldrh	r3, [r3, #2]
 800c07a:	0a1b      	lsrs	r3, r3, #8
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	3b01      	subs	r3, #1
 800c080:	2b06      	cmp	r3, #6
 800c082:	f200 8128 	bhi.w	800c2d6 <USBD_GetDescriptor+0x276>
 800c086:	a201      	add	r2, pc, #4	@ (adr r2, 800c08c <USBD_GetDescriptor+0x2c>)
 800c088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c08c:	0800c0a9 	.word	0x0800c0a9
 800c090:	0800c0c1 	.word	0x0800c0c1
 800c094:	0800c101 	.word	0x0800c101
 800c098:	0800c2d7 	.word	0x0800c2d7
 800c09c:	0800c2d7 	.word	0x0800c2d7
 800c0a0:	0800c277 	.word	0x0800c277
 800c0a4:	0800c2a3 	.word	0x0800c2a3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	7c12      	ldrb	r2, [r2, #16]
 800c0b4:	f107 0108 	add.w	r1, r7, #8
 800c0b8:	4610      	mov	r0, r2
 800c0ba:	4798      	blx	r3
 800c0bc:	60f8      	str	r0, [r7, #12]
      break;
 800c0be:	e112      	b.n	800c2e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	7c1b      	ldrb	r3, [r3, #16]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d10d      	bne.n	800c0e4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0d0:	f107 0208 	add.w	r2, r7, #8
 800c0d4:	4610      	mov	r0, r2
 800c0d6:	4798      	blx	r3
 800c0d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	3301      	adds	r3, #1
 800c0de:	2202      	movs	r2, #2
 800c0e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c0e2:	e100      	b.n	800c2e6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0ec:	f107 0208 	add.w	r2, r7, #8
 800c0f0:	4610      	mov	r0, r2
 800c0f2:	4798      	blx	r3
 800c0f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	2202      	movs	r2, #2
 800c0fc:	701a      	strb	r2, [r3, #0]
      break;
 800c0fe:	e0f2      	b.n	800c2e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	885b      	ldrh	r3, [r3, #2]
 800c104:	b2db      	uxtb	r3, r3
 800c106:	2b05      	cmp	r3, #5
 800c108:	f200 80ac 	bhi.w	800c264 <USBD_GetDescriptor+0x204>
 800c10c:	a201      	add	r2, pc, #4	@ (adr r2, 800c114 <USBD_GetDescriptor+0xb4>)
 800c10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c112:	bf00      	nop
 800c114:	0800c12d 	.word	0x0800c12d
 800c118:	0800c161 	.word	0x0800c161
 800c11c:	0800c195 	.word	0x0800c195
 800c120:	0800c1c9 	.word	0x0800c1c9
 800c124:	0800c1fd 	.word	0x0800c1fd
 800c128:	0800c231 	.word	0x0800c231
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d00b      	beq.n	800c150 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	7c12      	ldrb	r2, [r2, #16]
 800c144:	f107 0108 	add.w	r1, r7, #8
 800c148:	4610      	mov	r0, r2
 800c14a:	4798      	blx	r3
 800c14c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c14e:	e091      	b.n	800c274 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c150:	6839      	ldr	r1, [r7, #0]
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f000 facb 	bl	800c6ee <USBD_CtlError>
            err++;
 800c158:	7afb      	ldrb	r3, [r7, #11]
 800c15a:	3301      	adds	r3, #1
 800c15c:	72fb      	strb	r3, [r7, #11]
          break;
 800c15e:	e089      	b.n	800c274 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c166:	689b      	ldr	r3, [r3, #8]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d00b      	beq.n	800c184 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	7c12      	ldrb	r2, [r2, #16]
 800c178:	f107 0108 	add.w	r1, r7, #8
 800c17c:	4610      	mov	r0, r2
 800c17e:	4798      	blx	r3
 800c180:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c182:	e077      	b.n	800c274 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c184:	6839      	ldr	r1, [r7, #0]
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 fab1 	bl	800c6ee <USBD_CtlError>
            err++;
 800c18c:	7afb      	ldrb	r3, [r7, #11]
 800c18e:	3301      	adds	r3, #1
 800c190:	72fb      	strb	r3, [r7, #11]
          break;
 800c192:	e06f      	b.n	800c274 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c19a:	68db      	ldr	r3, [r3, #12]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d00b      	beq.n	800c1b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1a6:	68db      	ldr	r3, [r3, #12]
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	7c12      	ldrb	r2, [r2, #16]
 800c1ac:	f107 0108 	add.w	r1, r7, #8
 800c1b0:	4610      	mov	r0, r2
 800c1b2:	4798      	blx	r3
 800c1b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1b6:	e05d      	b.n	800c274 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1b8:	6839      	ldr	r1, [r7, #0]
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 fa97 	bl	800c6ee <USBD_CtlError>
            err++;
 800c1c0:	7afb      	ldrb	r3, [r7, #11]
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	72fb      	strb	r3, [r7, #11]
          break;
 800c1c6:	e055      	b.n	800c274 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1ce:	691b      	ldr	r3, [r3, #16]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d00b      	beq.n	800c1ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1da:	691b      	ldr	r3, [r3, #16]
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	7c12      	ldrb	r2, [r2, #16]
 800c1e0:	f107 0108 	add.w	r1, r7, #8
 800c1e4:	4610      	mov	r0, r2
 800c1e6:	4798      	blx	r3
 800c1e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1ea:	e043      	b.n	800c274 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c1ec:	6839      	ldr	r1, [r7, #0]
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 fa7d 	bl	800c6ee <USBD_CtlError>
            err++;
 800c1f4:	7afb      	ldrb	r3, [r7, #11]
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	72fb      	strb	r3, [r7, #11]
          break;
 800c1fa:	e03b      	b.n	800c274 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c202:	695b      	ldr	r3, [r3, #20]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d00b      	beq.n	800c220 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c20e:	695b      	ldr	r3, [r3, #20]
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	7c12      	ldrb	r2, [r2, #16]
 800c214:	f107 0108 	add.w	r1, r7, #8
 800c218:	4610      	mov	r0, r2
 800c21a:	4798      	blx	r3
 800c21c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c21e:	e029      	b.n	800c274 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c220:	6839      	ldr	r1, [r7, #0]
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 fa63 	bl	800c6ee <USBD_CtlError>
            err++;
 800c228:	7afb      	ldrb	r3, [r7, #11]
 800c22a:	3301      	adds	r3, #1
 800c22c:	72fb      	strb	r3, [r7, #11]
          break;
 800c22e:	e021      	b.n	800c274 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c236:	699b      	ldr	r3, [r3, #24]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00b      	beq.n	800c254 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c242:	699b      	ldr	r3, [r3, #24]
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	7c12      	ldrb	r2, [r2, #16]
 800c248:	f107 0108 	add.w	r1, r7, #8
 800c24c:	4610      	mov	r0, r2
 800c24e:	4798      	blx	r3
 800c250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c252:	e00f      	b.n	800c274 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c254:	6839      	ldr	r1, [r7, #0]
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 fa49 	bl	800c6ee <USBD_CtlError>
            err++;
 800c25c:	7afb      	ldrb	r3, [r7, #11]
 800c25e:	3301      	adds	r3, #1
 800c260:	72fb      	strb	r3, [r7, #11]
          break;
 800c262:	e007      	b.n	800c274 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 fa41 	bl	800c6ee <USBD_CtlError>
          err++;
 800c26c:	7afb      	ldrb	r3, [r7, #11]
 800c26e:	3301      	adds	r3, #1
 800c270:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c272:	bf00      	nop
      }
      break;
 800c274:	e037      	b.n	800c2e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	7c1b      	ldrb	r3, [r3, #16]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d109      	bne.n	800c292 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c286:	f107 0208 	add.w	r2, r7, #8
 800c28a:	4610      	mov	r0, r2
 800c28c:	4798      	blx	r3
 800c28e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c290:	e029      	b.n	800c2e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c292:	6839      	ldr	r1, [r7, #0]
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 fa2a 	bl	800c6ee <USBD_CtlError>
        err++;
 800c29a:	7afb      	ldrb	r3, [r7, #11]
 800c29c:	3301      	adds	r3, #1
 800c29e:	72fb      	strb	r3, [r7, #11]
      break;
 800c2a0:	e021      	b.n	800c2e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	7c1b      	ldrb	r3, [r3, #16]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d10d      	bne.n	800c2c6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2b2:	f107 0208 	add.w	r2, r7, #8
 800c2b6:	4610      	mov	r0, r2
 800c2b8:	4798      	blx	r3
 800c2ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	3301      	adds	r3, #1
 800c2c0:	2207      	movs	r2, #7
 800c2c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c2c4:	e00f      	b.n	800c2e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c2c6:	6839      	ldr	r1, [r7, #0]
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 fa10 	bl	800c6ee <USBD_CtlError>
        err++;
 800c2ce:	7afb      	ldrb	r3, [r7, #11]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	72fb      	strb	r3, [r7, #11]
      break;
 800c2d4:	e007      	b.n	800c2e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c2d6:	6839      	ldr	r1, [r7, #0]
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 fa08 	bl	800c6ee <USBD_CtlError>
      err++;
 800c2de:	7afb      	ldrb	r3, [r7, #11]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	72fb      	strb	r3, [r7, #11]
      break;
 800c2e4:	bf00      	nop
  }

  if (err != 0U)
 800c2e6:	7afb      	ldrb	r3, [r7, #11]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d11e      	bne.n	800c32a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	88db      	ldrh	r3, [r3, #6]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d016      	beq.n	800c322 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c2f4:	893b      	ldrh	r3, [r7, #8]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d00e      	beq.n	800c318 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	88da      	ldrh	r2, [r3, #6]
 800c2fe:	893b      	ldrh	r3, [r7, #8]
 800c300:	4293      	cmp	r3, r2
 800c302:	bf28      	it	cs
 800c304:	4613      	movcs	r3, r2
 800c306:	b29b      	uxth	r3, r3
 800c308:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c30a:	893b      	ldrh	r3, [r7, #8]
 800c30c:	461a      	mov	r2, r3
 800c30e:	68f9      	ldr	r1, [r7, #12]
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 fa69 	bl	800c7e8 <USBD_CtlSendData>
 800c316:	e009      	b.n	800c32c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c318:	6839      	ldr	r1, [r7, #0]
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 f9e7 	bl	800c6ee <USBD_CtlError>
 800c320:	e004      	b.n	800c32c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 faba 	bl	800c89c <USBD_CtlSendStatus>
 800c328:	e000      	b.n	800c32c <USBD_GetDescriptor+0x2cc>
    return;
 800c32a:	bf00      	nop
  }
}
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop

0800c334 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	889b      	ldrh	r3, [r3, #4]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d131      	bne.n	800c3aa <USBD_SetAddress+0x76>
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	88db      	ldrh	r3, [r3, #6]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d12d      	bne.n	800c3aa <USBD_SetAddress+0x76>
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	885b      	ldrh	r3, [r3, #2]
 800c352:	2b7f      	cmp	r3, #127	@ 0x7f
 800c354:	d829      	bhi.n	800c3aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	885b      	ldrh	r3, [r3, #2]
 800c35a:	b2db      	uxtb	r3, r3
 800c35c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c360:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	2b03      	cmp	r3, #3
 800c36c:	d104      	bne.n	800c378 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c36e:	6839      	ldr	r1, [r7, #0]
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 f9bc 	bl	800c6ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c376:	e01d      	b.n	800c3b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	7bfa      	ldrb	r2, [r7, #15]
 800c37c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c380:	7bfb      	ldrb	r3, [r7, #15]
 800c382:	4619      	mov	r1, r3
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 ff03 	bl	800d190 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 fa86 	bl	800c89c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c390:	7bfb      	ldrb	r3, [r7, #15]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d004      	beq.n	800c3a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2202      	movs	r2, #2
 800c39a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c39e:	e009      	b.n	800c3b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3a8:	e004      	b.n	800c3b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c3aa:	6839      	ldr	r1, [r7, #0]
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 f99e 	bl	800c6ee <USBD_CtlError>
  }
}
 800c3b2:	bf00      	nop
 800c3b4:	bf00      	nop
 800c3b6:	3710      	adds	r7, #16
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	885b      	ldrh	r3, [r3, #2]
 800c3ce:	b2da      	uxtb	r2, r3
 800c3d0:	4b4e      	ldr	r3, [pc, #312]	@ (800c50c <USBD_SetConfig+0x150>)
 800c3d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c3d4:	4b4d      	ldr	r3, [pc, #308]	@ (800c50c <USBD_SetConfig+0x150>)
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d905      	bls.n	800c3e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c3dc:	6839      	ldr	r1, [r7, #0]
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 f985 	bl	800c6ee <USBD_CtlError>
    return USBD_FAIL;
 800c3e4:	2303      	movs	r3, #3
 800c3e6:	e08c      	b.n	800c502 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	2b02      	cmp	r3, #2
 800c3f2:	d002      	beq.n	800c3fa <USBD_SetConfig+0x3e>
 800c3f4:	2b03      	cmp	r3, #3
 800c3f6:	d029      	beq.n	800c44c <USBD_SetConfig+0x90>
 800c3f8:	e075      	b.n	800c4e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c3fa:	4b44      	ldr	r3, [pc, #272]	@ (800c50c <USBD_SetConfig+0x150>)
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d020      	beq.n	800c444 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c402:	4b42      	ldr	r3, [pc, #264]	@ (800c50c <USBD_SetConfig+0x150>)
 800c404:	781b      	ldrb	r3, [r3, #0]
 800c406:	461a      	mov	r2, r3
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c40c:	4b3f      	ldr	r3, [pc, #252]	@ (800c50c <USBD_SetConfig+0x150>)
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	4619      	mov	r1, r3
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f7fe ffe3 	bl	800b3de <USBD_SetClassConfig>
 800c418:	4603      	mov	r3, r0
 800c41a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c41c:	7bfb      	ldrb	r3, [r7, #15]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d008      	beq.n	800c434 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c422:	6839      	ldr	r1, [r7, #0]
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f000 f962 	bl	800c6ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2202      	movs	r2, #2
 800c42e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c432:	e065      	b.n	800c500 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 fa31 	bl	800c89c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2203      	movs	r2, #3
 800c43e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c442:	e05d      	b.n	800c500 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f000 fa29 	bl	800c89c <USBD_CtlSendStatus>
      break;
 800c44a:	e059      	b.n	800c500 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c44c:	4b2f      	ldr	r3, [pc, #188]	@ (800c50c <USBD_SetConfig+0x150>)
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d112      	bne.n	800c47a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2202      	movs	r2, #2
 800c458:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c45c:	4b2b      	ldr	r3, [pc, #172]	@ (800c50c <USBD_SetConfig+0x150>)
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	461a      	mov	r2, r3
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c466:	4b29      	ldr	r3, [pc, #164]	@ (800c50c <USBD_SetConfig+0x150>)
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	4619      	mov	r1, r3
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f7fe ffd2 	bl	800b416 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 fa12 	bl	800c89c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c478:	e042      	b.n	800c500 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c47a:	4b24      	ldr	r3, [pc, #144]	@ (800c50c <USBD_SetConfig+0x150>)
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	461a      	mov	r2, r3
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	429a      	cmp	r2, r3
 800c486:	d02a      	beq.n	800c4de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	b2db      	uxtb	r3, r3
 800c48e:	4619      	mov	r1, r3
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f7fe ffc0 	bl	800b416 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c496:	4b1d      	ldr	r3, [pc, #116]	@ (800c50c <USBD_SetConfig+0x150>)
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	461a      	mov	r2, r3
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c4a0:	4b1a      	ldr	r3, [pc, #104]	@ (800c50c <USBD_SetConfig+0x150>)
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	4619      	mov	r1, r3
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f7fe ff99 	bl	800b3de <USBD_SetClassConfig>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c4b0:	7bfb      	ldrb	r3, [r7, #15]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d00f      	beq.n	800c4d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c4b6:	6839      	ldr	r1, [r7, #0]
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 f918 	bl	800c6ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	685b      	ldr	r3, [r3, #4]
 800c4c2:	b2db      	uxtb	r3, r3
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f7fe ffa5 	bl	800b416 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2202      	movs	r2, #2
 800c4d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c4d4:	e014      	b.n	800c500 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 f9e0 	bl	800c89c <USBD_CtlSendStatus>
      break;
 800c4dc:	e010      	b.n	800c500 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 f9dc 	bl	800c89c <USBD_CtlSendStatus>
      break;
 800c4e4:	e00c      	b.n	800c500 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c4e6:	6839      	ldr	r1, [r7, #0]
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f000 f900 	bl	800c6ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c4ee:	4b07      	ldr	r3, [pc, #28]	@ (800c50c <USBD_SetConfig+0x150>)
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f7fe ff8e 	bl	800b416 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c4fa:	2303      	movs	r3, #3
 800c4fc:	73fb      	strb	r3, [r7, #15]
      break;
 800c4fe:	bf00      	nop
  }

  return ret;
 800c500:	7bfb      	ldrb	r3, [r7, #15]
}
 800c502:	4618      	mov	r0, r3
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	200008b1 	.word	0x200008b1

0800c510 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	88db      	ldrh	r3, [r3, #6]
 800c51e:	2b01      	cmp	r3, #1
 800c520:	d004      	beq.n	800c52c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c522:	6839      	ldr	r1, [r7, #0]
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f000 f8e2 	bl	800c6ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c52a:	e023      	b.n	800c574 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c532:	b2db      	uxtb	r3, r3
 800c534:	2b02      	cmp	r3, #2
 800c536:	dc02      	bgt.n	800c53e <USBD_GetConfig+0x2e>
 800c538:	2b00      	cmp	r3, #0
 800c53a:	dc03      	bgt.n	800c544 <USBD_GetConfig+0x34>
 800c53c:	e015      	b.n	800c56a <USBD_GetConfig+0x5a>
 800c53e:	2b03      	cmp	r3, #3
 800c540:	d00b      	beq.n	800c55a <USBD_GetConfig+0x4a>
 800c542:	e012      	b.n	800c56a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2200      	movs	r2, #0
 800c548:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	3308      	adds	r3, #8
 800c54e:	2201      	movs	r2, #1
 800c550:	4619      	mov	r1, r3
 800c552:	6878      	ldr	r0, [r7, #4]
 800c554:	f000 f948 	bl	800c7e8 <USBD_CtlSendData>
        break;
 800c558:	e00c      	b.n	800c574 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	3304      	adds	r3, #4
 800c55e:	2201      	movs	r2, #1
 800c560:	4619      	mov	r1, r3
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f000 f940 	bl	800c7e8 <USBD_CtlSendData>
        break;
 800c568:	e004      	b.n	800c574 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c56a:	6839      	ldr	r1, [r7, #0]
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 f8be 	bl	800c6ee <USBD_CtlError>
        break;
 800c572:	bf00      	nop
}
 800c574:	bf00      	nop
 800c576:	3708      	adds	r7, #8
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c58c:	b2db      	uxtb	r3, r3
 800c58e:	3b01      	subs	r3, #1
 800c590:	2b02      	cmp	r3, #2
 800c592:	d81e      	bhi.n	800c5d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	88db      	ldrh	r3, [r3, #6]
 800c598:	2b02      	cmp	r3, #2
 800c59a:	d004      	beq.n	800c5a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c59c:	6839      	ldr	r1, [r7, #0]
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 f8a5 	bl	800c6ee <USBD_CtlError>
        break;
 800c5a4:	e01a      	b.n	800c5dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2201      	movs	r2, #1
 800c5aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d005      	beq.n	800c5c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	68db      	ldr	r3, [r3, #12]
 800c5ba:	f043 0202 	orr.w	r2, r3, #2
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	330c      	adds	r3, #12
 800c5c6:	2202      	movs	r2, #2
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f000 f90c 	bl	800c7e8 <USBD_CtlSendData>
      break;
 800c5d0:	e004      	b.n	800c5dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c5d2:	6839      	ldr	r1, [r7, #0]
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f000 f88a 	bl	800c6ee <USBD_CtlError>
      break;
 800c5da:	bf00      	nop
  }
}
 800c5dc:	bf00      	nop
 800c5de:	3708      	adds	r7, #8
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	885b      	ldrh	r3, [r3, #2]
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d107      	bne.n	800c606 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f000 f94c 	bl	800c89c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c604:	e013      	b.n	800c62e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	885b      	ldrh	r3, [r3, #2]
 800c60a:	2b02      	cmp	r3, #2
 800c60c:	d10b      	bne.n	800c626 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	889b      	ldrh	r3, [r3, #4]
 800c612:	0a1b      	lsrs	r3, r3, #8
 800c614:	b29b      	uxth	r3, r3
 800c616:	b2da      	uxtb	r2, r3
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 f93c 	bl	800c89c <USBD_CtlSendStatus>
}
 800c624:	e003      	b.n	800c62e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c626:	6839      	ldr	r1, [r7, #0]
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 f860 	bl	800c6ee <USBD_CtlError>
}
 800c62e:	bf00      	nop
 800c630:	3708      	adds	r7, #8
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b082      	sub	sp, #8
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
 800c63e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c646:	b2db      	uxtb	r3, r3
 800c648:	3b01      	subs	r3, #1
 800c64a:	2b02      	cmp	r3, #2
 800c64c:	d80b      	bhi.n	800c666 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	885b      	ldrh	r3, [r3, #2]
 800c652:	2b01      	cmp	r3, #1
 800c654:	d10c      	bne.n	800c670 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2200      	movs	r2, #0
 800c65a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 f91c 	bl	800c89c <USBD_CtlSendStatus>
      }
      break;
 800c664:	e004      	b.n	800c670 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c666:	6839      	ldr	r1, [r7, #0]
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 f840 	bl	800c6ee <USBD_CtlError>
      break;
 800c66e:	e000      	b.n	800c672 <USBD_ClrFeature+0x3c>
      break;
 800c670:	bf00      	nop
  }
}
 800c672:	bf00      	nop
 800c674:	3708      	adds	r7, #8
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}

0800c67a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c67a:	b580      	push	{r7, lr}
 800c67c:	b084      	sub	sp, #16
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
 800c682:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	781a      	ldrb	r2, [r3, #0]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	3301      	adds	r3, #1
 800c694:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	781a      	ldrb	r2, [r3, #0]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	f7ff fa40 	bl	800bb2a <SWAPBYTE>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c6be:	68f8      	ldr	r0, [r7, #12]
 800c6c0:	f7ff fa33 	bl	800bb2a <SWAPBYTE>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c6d8:	68f8      	ldr	r0, [r7, #12]
 800c6da:	f7ff fa26 	bl	800bb2a <SWAPBYTE>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	461a      	mov	r2, r3
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	80da      	strh	r2, [r3, #6]
}
 800c6e6:	bf00      	nop
 800c6e8:	3710      	adds	r7, #16
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}

0800c6ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6ee:	b580      	push	{r7, lr}
 800c6f0:	b082      	sub	sp, #8
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]
 800c6f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c6f8:	2180      	movs	r1, #128	@ 0x80
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 fcde 	bl	800d0bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c700:	2100      	movs	r1, #0
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 fcda 	bl	800d0bc <USBD_LL_StallEP>
}
 800c708:	bf00      	nop
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b086      	sub	sp, #24
 800c714:	af00      	add	r7, sp, #0
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	60b9      	str	r1, [r7, #8]
 800c71a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c71c:	2300      	movs	r3, #0
 800c71e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d042      	beq.n	800c7ac <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c72a:	6938      	ldr	r0, [r7, #16]
 800c72c:	f000 f842 	bl	800c7b4 <USBD_GetLen>
 800c730:	4603      	mov	r3, r0
 800c732:	3301      	adds	r3, #1
 800c734:	005b      	lsls	r3, r3, #1
 800c736:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c73a:	d808      	bhi.n	800c74e <USBD_GetString+0x3e>
 800c73c:	6938      	ldr	r0, [r7, #16]
 800c73e:	f000 f839 	bl	800c7b4 <USBD_GetLen>
 800c742:	4603      	mov	r3, r0
 800c744:	3301      	adds	r3, #1
 800c746:	b29b      	uxth	r3, r3
 800c748:	005b      	lsls	r3, r3, #1
 800c74a:	b29a      	uxth	r2, r3
 800c74c:	e001      	b.n	800c752 <USBD_GetString+0x42>
 800c74e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c756:	7dfb      	ldrb	r3, [r7, #23]
 800c758:	68ba      	ldr	r2, [r7, #8]
 800c75a:	4413      	add	r3, r2
 800c75c:	687a      	ldr	r2, [r7, #4]
 800c75e:	7812      	ldrb	r2, [r2, #0]
 800c760:	701a      	strb	r2, [r3, #0]
  idx++;
 800c762:	7dfb      	ldrb	r3, [r7, #23]
 800c764:	3301      	adds	r3, #1
 800c766:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c768:	7dfb      	ldrb	r3, [r7, #23]
 800c76a:	68ba      	ldr	r2, [r7, #8]
 800c76c:	4413      	add	r3, r2
 800c76e:	2203      	movs	r2, #3
 800c770:	701a      	strb	r2, [r3, #0]
  idx++;
 800c772:	7dfb      	ldrb	r3, [r7, #23]
 800c774:	3301      	adds	r3, #1
 800c776:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c778:	e013      	b.n	800c7a2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c77a:	7dfb      	ldrb	r3, [r7, #23]
 800c77c:	68ba      	ldr	r2, [r7, #8]
 800c77e:	4413      	add	r3, r2
 800c780:	693a      	ldr	r2, [r7, #16]
 800c782:	7812      	ldrb	r2, [r2, #0]
 800c784:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c786:	693b      	ldr	r3, [r7, #16]
 800c788:	3301      	adds	r3, #1
 800c78a:	613b      	str	r3, [r7, #16]
    idx++;
 800c78c:	7dfb      	ldrb	r3, [r7, #23]
 800c78e:	3301      	adds	r3, #1
 800c790:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c792:	7dfb      	ldrb	r3, [r7, #23]
 800c794:	68ba      	ldr	r2, [r7, #8]
 800c796:	4413      	add	r3, r2
 800c798:	2200      	movs	r2, #0
 800c79a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c79c:	7dfb      	ldrb	r3, [r7, #23]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d1e7      	bne.n	800c77a <USBD_GetString+0x6a>
 800c7aa:	e000      	b.n	800c7ae <USBD_GetString+0x9e>
    return;
 800c7ac:	bf00      	nop
  }
}
 800c7ae:	3718      	adds	r7, #24
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}

0800c7b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b085      	sub	sp, #20
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c7c4:	e005      	b.n	800c7d2 <USBD_GetLen+0x1e>
  {
    len++;
 800c7c6:	7bfb      	ldrb	r3, [r7, #15]
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d1f5      	bne.n	800c7c6 <USBD_GetLen+0x12>
  }

  return len;
 800c7da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3714      	adds	r7, #20
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr

0800c7e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	60f8      	str	r0, [r7, #12]
 800c7f0:	60b9      	str	r1, [r7, #8]
 800c7f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2202      	movs	r2, #2
 800c7f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	68ba      	ldr	r2, [r7, #8]
 800c80c:	2100      	movs	r1, #0
 800c80e:	68f8      	ldr	r0, [r7, #12]
 800c810:	f000 fcdd 	bl	800d1ce <USBD_LL_Transmit>

  return USBD_OK;
 800c814:	2300      	movs	r3, #0
}
 800c816:	4618      	mov	r0, r3
 800c818:	3710      	adds	r7, #16
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}

0800c81e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c81e:	b580      	push	{r7, lr}
 800c820:	b084      	sub	sp, #16
 800c822:	af00      	add	r7, sp, #0
 800c824:	60f8      	str	r0, [r7, #12]
 800c826:	60b9      	str	r1, [r7, #8]
 800c828:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	2100      	movs	r1, #0
 800c830:	68f8      	ldr	r0, [r7, #12]
 800c832:	f000 fccc 	bl	800d1ce <USBD_LL_Transmit>

  return USBD_OK;
 800c836:	2300      	movs	r3, #0
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3710      	adds	r7, #16
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2203      	movs	r2, #3
 800c850:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	687a      	ldr	r2, [r7, #4]
 800c858:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	687a      	ldr	r2, [r7, #4]
 800c860:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	68ba      	ldr	r2, [r7, #8]
 800c868:	2100      	movs	r1, #0
 800c86a:	68f8      	ldr	r0, [r7, #12]
 800c86c:	f000 fcd0 	bl	800d210 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c870:	2300      	movs	r3, #0
}
 800c872:	4618      	mov	r0, r3
 800c874:	3710      	adds	r7, #16
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}

0800c87a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c87a:	b580      	push	{r7, lr}
 800c87c:	b084      	sub	sp, #16
 800c87e:	af00      	add	r7, sp, #0
 800c880:	60f8      	str	r0, [r7, #12]
 800c882:	60b9      	str	r1, [r7, #8]
 800c884:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	68ba      	ldr	r2, [r7, #8]
 800c88a:	2100      	movs	r1, #0
 800c88c:	68f8      	ldr	r0, [r7, #12]
 800c88e:	f000 fcbf 	bl	800d210 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c892:	2300      	movs	r3, #0
}
 800c894:	4618      	mov	r0, r3
 800c896:	3710      	adds	r7, #16
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2204      	movs	r2, #4
 800c8a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	2100      	movs	r1, #0
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 fc8b 	bl	800d1ce <USBD_LL_Transmit>

  return USBD_OK;
 800c8b8:	2300      	movs	r3, #0
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3708      	adds	r7, #8
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}

0800c8c2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c8c2:	b580      	push	{r7, lr}
 800c8c4:	b082      	sub	sp, #8
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2205      	movs	r2, #5
 800c8ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	2100      	movs	r1, #0
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 fc99 	bl	800d210 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c8de:	2300      	movs	r3, #0
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3708      	adds	r7, #8
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	4912      	ldr	r1, [pc, #72]	@ (800c938 <MX_USB_DEVICE_Init+0x50>)
 800c8f0:	4812      	ldr	r0, [pc, #72]	@ (800c93c <MX_USB_DEVICE_Init+0x54>)
 800c8f2:	f7fe fcf7 	bl	800b2e4 <USBD_Init>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d001      	beq.n	800c900 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c8fc:	f7f5 fb8a 	bl	8002014 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c900:	490f      	ldr	r1, [pc, #60]	@ (800c940 <MX_USB_DEVICE_Init+0x58>)
 800c902:	480e      	ldr	r0, [pc, #56]	@ (800c93c <MX_USB_DEVICE_Init+0x54>)
 800c904:	f7fe fd1e 	bl	800b344 <USBD_RegisterClass>
 800c908:	4603      	mov	r3, r0
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d001      	beq.n	800c912 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c90e:	f7f5 fb81 	bl	8002014 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c912:	490c      	ldr	r1, [pc, #48]	@ (800c944 <MX_USB_DEVICE_Init+0x5c>)
 800c914:	4809      	ldr	r0, [pc, #36]	@ (800c93c <MX_USB_DEVICE_Init+0x54>)
 800c916:	f7fe fc55 	bl	800b1c4 <USBD_CDC_RegisterInterface>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d001      	beq.n	800c924 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c920:	f7f5 fb78 	bl	8002014 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c924:	4805      	ldr	r0, [pc, #20]	@ (800c93c <MX_USB_DEVICE_Init+0x54>)
 800c926:	f7fe fd43 	bl	800b3b0 <USBD_Start>
 800c92a:	4603      	mov	r3, r0
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d001      	beq.n	800c934 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c930:	f7f5 fb70 	bl	8002014 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c934:	bf00      	nop
 800c936:	bd80      	pop	{r7, pc}
 800c938:	200000b4 	.word	0x200000b4
 800c93c:	200008b4 	.word	0x200008b4
 800c940:	20000020 	.word	0x20000020
 800c944:	200000a0 	.word	0x200000a0

0800c948 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c94c:	2200      	movs	r2, #0
 800c94e:	4905      	ldr	r1, [pc, #20]	@ (800c964 <CDC_Init_FS+0x1c>)
 800c950:	4805      	ldr	r0, [pc, #20]	@ (800c968 <CDC_Init_FS+0x20>)
 800c952:	f7fe fc51 	bl	800b1f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c956:	4905      	ldr	r1, [pc, #20]	@ (800c96c <CDC_Init_FS+0x24>)
 800c958:	4803      	ldr	r0, [pc, #12]	@ (800c968 <CDC_Init_FS+0x20>)
 800c95a:	f7fe fc6f 	bl	800b23c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c95e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c960:	4618      	mov	r0, r3
 800c962:	bd80      	pop	{r7, pc}
 800c964:	20001394 	.word	0x20001394
 800c968:	200008b4 	.word	0x200008b4
 800c96c:	20000b94 	.word	0x20000b94

0800c970 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c970:	b480      	push	{r7}
 800c972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c974:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c976:	4618      	mov	r0, r3
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr

0800c980 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c980:	b480      	push	{r7}
 800c982:	b083      	sub	sp, #12
 800c984:	af00      	add	r7, sp, #0
 800c986:	4603      	mov	r3, r0
 800c988:	6039      	str	r1, [r7, #0]
 800c98a:	71fb      	strb	r3, [r7, #7]
 800c98c:	4613      	mov	r3, r2
 800c98e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c990:	79fb      	ldrb	r3, [r7, #7]
 800c992:	2b23      	cmp	r3, #35	@ 0x23
 800c994:	d84a      	bhi.n	800ca2c <CDC_Control_FS+0xac>
 800c996:	a201      	add	r2, pc, #4	@ (adr r2, 800c99c <CDC_Control_FS+0x1c>)
 800c998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c99c:	0800ca2d 	.word	0x0800ca2d
 800c9a0:	0800ca2d 	.word	0x0800ca2d
 800c9a4:	0800ca2d 	.word	0x0800ca2d
 800c9a8:	0800ca2d 	.word	0x0800ca2d
 800c9ac:	0800ca2d 	.word	0x0800ca2d
 800c9b0:	0800ca2d 	.word	0x0800ca2d
 800c9b4:	0800ca2d 	.word	0x0800ca2d
 800c9b8:	0800ca2d 	.word	0x0800ca2d
 800c9bc:	0800ca2d 	.word	0x0800ca2d
 800c9c0:	0800ca2d 	.word	0x0800ca2d
 800c9c4:	0800ca2d 	.word	0x0800ca2d
 800c9c8:	0800ca2d 	.word	0x0800ca2d
 800c9cc:	0800ca2d 	.word	0x0800ca2d
 800c9d0:	0800ca2d 	.word	0x0800ca2d
 800c9d4:	0800ca2d 	.word	0x0800ca2d
 800c9d8:	0800ca2d 	.word	0x0800ca2d
 800c9dc:	0800ca2d 	.word	0x0800ca2d
 800c9e0:	0800ca2d 	.word	0x0800ca2d
 800c9e4:	0800ca2d 	.word	0x0800ca2d
 800c9e8:	0800ca2d 	.word	0x0800ca2d
 800c9ec:	0800ca2d 	.word	0x0800ca2d
 800c9f0:	0800ca2d 	.word	0x0800ca2d
 800c9f4:	0800ca2d 	.word	0x0800ca2d
 800c9f8:	0800ca2d 	.word	0x0800ca2d
 800c9fc:	0800ca2d 	.word	0x0800ca2d
 800ca00:	0800ca2d 	.word	0x0800ca2d
 800ca04:	0800ca2d 	.word	0x0800ca2d
 800ca08:	0800ca2d 	.word	0x0800ca2d
 800ca0c:	0800ca2d 	.word	0x0800ca2d
 800ca10:	0800ca2d 	.word	0x0800ca2d
 800ca14:	0800ca2d 	.word	0x0800ca2d
 800ca18:	0800ca2d 	.word	0x0800ca2d
 800ca1c:	0800ca2d 	.word	0x0800ca2d
 800ca20:	0800ca2d 	.word	0x0800ca2d
 800ca24:	0800ca2d 	.word	0x0800ca2d
 800ca28:	0800ca2d 	.word	0x0800ca2d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ca2c:	bf00      	nop
  }

  return (USBD_OK);
 800ca2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	370c      	adds	r7, #12
 800ca34:	46bd      	mov	sp, r7
 800ca36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3a:	4770      	bx	lr

0800ca3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ca46:	6879      	ldr	r1, [r7, #4]
 800ca48:	480e      	ldr	r0, [pc, #56]	@ (800ca84 <CDC_Receive_FS+0x48>)
 800ca4a:	f7fe fbf7 	bl	800b23c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ca4e:	480d      	ldr	r0, [pc, #52]	@ (800ca84 <CDC_Receive_FS+0x48>)
 800ca50:	f7fe fc12 	bl	800b278 <USBD_CDC_ReceivePacket>

  //https://controllerstech.com/send-and-receive-data-to-pc-without-uart-stm32-usb-com/

  uint8_t len = (uint8_t) *Len;
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	73fb      	strb	r3, [r7, #15]

    if(len == ROS_COMM_RX_SIZE){
 800ca5a:	7bfb      	ldrb	r3, [r7, #15]
 800ca5c:	2b0d      	cmp	r3, #13
 800ca5e:	d105      	bne.n	800ca6c <CDC_Receive_FS+0x30>
	  memcpy((uint8_t *)&rbc_Packet_t, Buf, len);  // copy the data to the buffer
 800ca60:	7bfb      	ldrb	r3, [r7, #15]
 800ca62:	461a      	mov	r2, r3
 800ca64:	6879      	ldr	r1, [r7, #4]
 800ca66:	4808      	ldr	r0, [pc, #32]	@ (800ca88 <CDC_Receive_FS+0x4c>)
 800ca68:	f000 fc7c 	bl	800d364 <memcpy>
    }

    rx_flag = 1;
 800ca6c:	4b07      	ldr	r3, [pc, #28]	@ (800ca8c <CDC_Receive_FS+0x50>)
 800ca6e:	2201      	movs	r2, #1
 800ca70:	701a      	strb	r2, [r3, #0]
    tx_flag = 0;
 800ca72:	4b07      	ldr	r3, [pc, #28]	@ (800ca90 <CDC_Receive_FS+0x54>)
 800ca74:	2200      	movs	r2, #0
 800ca76:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800ca78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3710      	adds	r7, #16
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	200008b4 	.word	0x200008b4
 800ca88:	20000884 	.word	0x20000884
 800ca8c:	20000b90 	.word	0x20000b90
 800ca90:	2000009e 	.word	0x2000009e

0800ca94 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b087      	sub	sp, #28
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	60f8      	str	r0, [r7, #12]
 800ca9c:	60b9      	str	r1, [r7, #8]
 800ca9e:	4613      	mov	r3, r2
 800caa0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800caa2:	2300      	movs	r3, #0
 800caa4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800caa6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800caaa:	4618      	mov	r0, r3
 800caac:	371c      	adds	r7, #28
 800caae:	46bd      	mov	sp, r7
 800cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab4:	4770      	bx	lr
	...

0800cab8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cab8:	b480      	push	{r7}
 800caba:	b083      	sub	sp, #12
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	4603      	mov	r3, r0
 800cac0:	6039      	str	r1, [r7, #0]
 800cac2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	2212      	movs	r2, #18
 800cac8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800caca:	4b03      	ldr	r3, [pc, #12]	@ (800cad8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cacc:	4618      	mov	r0, r3
 800cace:	370c      	adds	r7, #12
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr
 800cad8:	200000d0 	.word	0x200000d0

0800cadc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cadc:	b480      	push	{r7}
 800cade:	b083      	sub	sp, #12
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	4603      	mov	r3, r0
 800cae4:	6039      	str	r1, [r7, #0]
 800cae6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	2204      	movs	r2, #4
 800caec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800caee:	4b03      	ldr	r3, [pc, #12]	@ (800cafc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	370c      	adds	r7, #12
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr
 800cafc:	200000e4 	.word	0x200000e4

0800cb00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	4603      	mov	r3, r0
 800cb08:	6039      	str	r1, [r7, #0]
 800cb0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cb0c:	79fb      	ldrb	r3, [r7, #7]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d105      	bne.n	800cb1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb12:	683a      	ldr	r2, [r7, #0]
 800cb14:	4907      	ldr	r1, [pc, #28]	@ (800cb34 <USBD_FS_ProductStrDescriptor+0x34>)
 800cb16:	4808      	ldr	r0, [pc, #32]	@ (800cb38 <USBD_FS_ProductStrDescriptor+0x38>)
 800cb18:	f7ff fdfa 	bl	800c710 <USBD_GetString>
 800cb1c:	e004      	b.n	800cb28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cb1e:	683a      	ldr	r2, [r7, #0]
 800cb20:	4904      	ldr	r1, [pc, #16]	@ (800cb34 <USBD_FS_ProductStrDescriptor+0x34>)
 800cb22:	4805      	ldr	r0, [pc, #20]	@ (800cb38 <USBD_FS_ProductStrDescriptor+0x38>)
 800cb24:	f7ff fdf4 	bl	800c710 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb28:	4b02      	ldr	r3, [pc, #8]	@ (800cb34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3708      	adds	r7, #8
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	20001b94 	.word	0x20001b94
 800cb38:	0800ebb0 	.word	0x0800ebb0

0800cb3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	4603      	mov	r3, r0
 800cb44:	6039      	str	r1, [r7, #0]
 800cb46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cb48:	683a      	ldr	r2, [r7, #0]
 800cb4a:	4904      	ldr	r1, [pc, #16]	@ (800cb5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cb4c:	4804      	ldr	r0, [pc, #16]	@ (800cb60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cb4e:	f7ff fddf 	bl	800c710 <USBD_GetString>
  return USBD_StrDesc;
 800cb52:	4b02      	ldr	r3, [pc, #8]	@ (800cb5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3708      	adds	r7, #8
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bd80      	pop	{r7, pc}
 800cb5c:	20001b94 	.word	0x20001b94
 800cb60:	0800ebc8 	.word	0x0800ebc8

0800cb64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b082      	sub	sp, #8
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	6039      	str	r1, [r7, #0]
 800cb6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	221a      	movs	r2, #26
 800cb74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cb76:	f000 f843 	bl	800cc00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cb7a:	4b02      	ldr	r3, [pc, #8]	@ (800cb84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3708      	adds	r7, #8
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}
 800cb84:	200000e8 	.word	0x200000e8

0800cb88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	4603      	mov	r3, r0
 800cb90:	6039      	str	r1, [r7, #0]
 800cb92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cb94:	79fb      	ldrb	r3, [r7, #7]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d105      	bne.n	800cba6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cb9a:	683a      	ldr	r2, [r7, #0]
 800cb9c:	4907      	ldr	r1, [pc, #28]	@ (800cbbc <USBD_FS_ConfigStrDescriptor+0x34>)
 800cb9e:	4808      	ldr	r0, [pc, #32]	@ (800cbc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cba0:	f7ff fdb6 	bl	800c710 <USBD_GetString>
 800cba4:	e004      	b.n	800cbb0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cba6:	683a      	ldr	r2, [r7, #0]
 800cba8:	4904      	ldr	r1, [pc, #16]	@ (800cbbc <USBD_FS_ConfigStrDescriptor+0x34>)
 800cbaa:	4805      	ldr	r0, [pc, #20]	@ (800cbc0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cbac:	f7ff fdb0 	bl	800c710 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cbb0:	4b02      	ldr	r3, [pc, #8]	@ (800cbbc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3708      	adds	r7, #8
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	20001b94 	.word	0x20001b94
 800cbc0:	0800ebdc 	.word	0x0800ebdc

0800cbc4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	4603      	mov	r3, r0
 800cbcc:	6039      	str	r1, [r7, #0]
 800cbce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cbd0:	79fb      	ldrb	r3, [r7, #7]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d105      	bne.n	800cbe2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cbd6:	683a      	ldr	r2, [r7, #0]
 800cbd8:	4907      	ldr	r1, [pc, #28]	@ (800cbf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cbda:	4808      	ldr	r0, [pc, #32]	@ (800cbfc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cbdc:	f7ff fd98 	bl	800c710 <USBD_GetString>
 800cbe0:	e004      	b.n	800cbec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cbe2:	683a      	ldr	r2, [r7, #0]
 800cbe4:	4904      	ldr	r1, [pc, #16]	@ (800cbf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cbe6:	4805      	ldr	r0, [pc, #20]	@ (800cbfc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cbe8:	f7ff fd92 	bl	800c710 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cbec:	4b02      	ldr	r3, [pc, #8]	@ (800cbf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3708      	adds	r7, #8
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	20001b94 	.word	0x20001b94
 800cbfc:	0800ebe8 	.word	0x0800ebe8

0800cc00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cc06:	4b0f      	ldr	r3, [pc, #60]	@ (800cc44 <Get_SerialNum+0x44>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cc0c:	4b0e      	ldr	r3, [pc, #56]	@ (800cc48 <Get_SerialNum+0x48>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cc12:	4b0e      	ldr	r3, [pc, #56]	@ (800cc4c <Get_SerialNum+0x4c>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cc18:	68fa      	ldr	r2, [r7, #12]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d009      	beq.n	800cc3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cc26:	2208      	movs	r2, #8
 800cc28:	4909      	ldr	r1, [pc, #36]	@ (800cc50 <Get_SerialNum+0x50>)
 800cc2a:	68f8      	ldr	r0, [r7, #12]
 800cc2c:	f000 f814 	bl	800cc58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cc30:	2204      	movs	r2, #4
 800cc32:	4908      	ldr	r1, [pc, #32]	@ (800cc54 <Get_SerialNum+0x54>)
 800cc34:	68b8      	ldr	r0, [r7, #8]
 800cc36:	f000 f80f 	bl	800cc58 <IntToUnicode>
  }
}
 800cc3a:	bf00      	nop
 800cc3c:	3710      	adds	r7, #16
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	1fff7a10 	.word	0x1fff7a10
 800cc48:	1fff7a14 	.word	0x1fff7a14
 800cc4c:	1fff7a18 	.word	0x1fff7a18
 800cc50:	200000ea 	.word	0x200000ea
 800cc54:	200000fa 	.word	0x200000fa

0800cc58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b087      	sub	sp, #28
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	4613      	mov	r3, r2
 800cc64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cc66:	2300      	movs	r3, #0
 800cc68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	75fb      	strb	r3, [r7, #23]
 800cc6e:	e027      	b.n	800ccc0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	0f1b      	lsrs	r3, r3, #28
 800cc74:	2b09      	cmp	r3, #9
 800cc76:	d80b      	bhi.n	800cc90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	0f1b      	lsrs	r3, r3, #28
 800cc7c:	b2da      	uxtb	r2, r3
 800cc7e:	7dfb      	ldrb	r3, [r7, #23]
 800cc80:	005b      	lsls	r3, r3, #1
 800cc82:	4619      	mov	r1, r3
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	440b      	add	r3, r1
 800cc88:	3230      	adds	r2, #48	@ 0x30
 800cc8a:	b2d2      	uxtb	r2, r2
 800cc8c:	701a      	strb	r2, [r3, #0]
 800cc8e:	e00a      	b.n	800cca6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	0f1b      	lsrs	r3, r3, #28
 800cc94:	b2da      	uxtb	r2, r3
 800cc96:	7dfb      	ldrb	r3, [r7, #23]
 800cc98:	005b      	lsls	r3, r3, #1
 800cc9a:	4619      	mov	r1, r3
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	440b      	add	r3, r1
 800cca0:	3237      	adds	r2, #55	@ 0x37
 800cca2:	b2d2      	uxtb	r2, r2
 800cca4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	011b      	lsls	r3, r3, #4
 800ccaa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ccac:	7dfb      	ldrb	r3, [r7, #23]
 800ccae:	005b      	lsls	r3, r3, #1
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	68ba      	ldr	r2, [r7, #8]
 800ccb4:	4413      	add	r3, r2
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ccba:	7dfb      	ldrb	r3, [r7, #23]
 800ccbc:	3301      	adds	r3, #1
 800ccbe:	75fb      	strb	r3, [r7, #23]
 800ccc0:	7dfa      	ldrb	r2, [r7, #23]
 800ccc2:	79fb      	ldrb	r3, [r7, #7]
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d3d3      	bcc.n	800cc70 <IntToUnicode+0x18>
  }
}
 800ccc8:	bf00      	nop
 800ccca:	bf00      	nop
 800cccc:	371c      	adds	r7, #28
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr
	...

0800ccd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b08a      	sub	sp, #40	@ 0x28
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cce0:	f107 0314 	add.w	r3, r7, #20
 800cce4:	2200      	movs	r2, #0
 800cce6:	601a      	str	r2, [r3, #0]
 800cce8:	605a      	str	r2, [r3, #4]
 800ccea:	609a      	str	r2, [r3, #8]
 800ccec:	60da      	str	r2, [r3, #12]
 800ccee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ccf8:	d13a      	bne.n	800cd70 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	613b      	str	r3, [r7, #16]
 800ccfe:	4b1e      	ldr	r3, [pc, #120]	@ (800cd78 <HAL_PCD_MspInit+0xa0>)
 800cd00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd02:	4a1d      	ldr	r2, [pc, #116]	@ (800cd78 <HAL_PCD_MspInit+0xa0>)
 800cd04:	f043 0301 	orr.w	r3, r3, #1
 800cd08:	6313      	str	r3, [r2, #48]	@ 0x30
 800cd0a:	4b1b      	ldr	r3, [pc, #108]	@ (800cd78 <HAL_PCD_MspInit+0xa0>)
 800cd0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd0e:	f003 0301 	and.w	r3, r3, #1
 800cd12:	613b      	str	r3, [r7, #16]
 800cd14:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cd16:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800cd1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd1c:	2302      	movs	r3, #2
 800cd1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd20:	2300      	movs	r3, #0
 800cd22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd24:	2303      	movs	r3, #3
 800cd26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cd28:	230a      	movs	r3, #10
 800cd2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd2c:	f107 0314 	add.w	r3, r7, #20
 800cd30:	4619      	mov	r1, r3
 800cd32:	4812      	ldr	r0, [pc, #72]	@ (800cd7c <HAL_PCD_MspInit+0xa4>)
 800cd34:	f7f6 fbc6 	bl	80034c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cd38:	4b0f      	ldr	r3, [pc, #60]	@ (800cd78 <HAL_PCD_MspInit+0xa0>)
 800cd3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd3c:	4a0e      	ldr	r2, [pc, #56]	@ (800cd78 <HAL_PCD_MspInit+0xa0>)
 800cd3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd42:	6353      	str	r3, [r2, #52]	@ 0x34
 800cd44:	2300      	movs	r3, #0
 800cd46:	60fb      	str	r3, [r7, #12]
 800cd48:	4b0b      	ldr	r3, [pc, #44]	@ (800cd78 <HAL_PCD_MspInit+0xa0>)
 800cd4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd4c:	4a0a      	ldr	r2, [pc, #40]	@ (800cd78 <HAL_PCD_MspInit+0xa0>)
 800cd4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cd52:	6453      	str	r3, [r2, #68]	@ 0x44
 800cd54:	4b08      	ldr	r3, [pc, #32]	@ (800cd78 <HAL_PCD_MspInit+0xa0>)
 800cd56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cd5c:	60fb      	str	r3, [r7, #12]
 800cd5e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cd60:	2200      	movs	r2, #0
 800cd62:	2100      	movs	r1, #0
 800cd64:	2043      	movs	r0, #67	@ 0x43
 800cd66:	f7f6 fad6 	bl	8003316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cd6a:	2043      	movs	r0, #67	@ 0x43
 800cd6c:	f7f6 faef 	bl	800334e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cd70:	bf00      	nop
 800cd72:	3728      	adds	r7, #40	@ 0x28
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	40023800 	.word	0x40023800
 800cd7c:	40020000 	.word	0x40020000

0800cd80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b082      	sub	sp, #8
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cd94:	4619      	mov	r1, r3
 800cd96:	4610      	mov	r0, r2
 800cd98:	f7fe fb57 	bl	800b44a <USBD_LL_SetupStage>
}
 800cd9c:	bf00      	nop
 800cd9e:	3708      	adds	r7, #8
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	460b      	mov	r3, r1
 800cdae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cdb6:	78fa      	ldrb	r2, [r7, #3]
 800cdb8:	6879      	ldr	r1, [r7, #4]
 800cdba:	4613      	mov	r3, r2
 800cdbc:	00db      	lsls	r3, r3, #3
 800cdbe:	4413      	add	r3, r2
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	440b      	add	r3, r1
 800cdc4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	78fb      	ldrb	r3, [r7, #3]
 800cdcc:	4619      	mov	r1, r3
 800cdce:	f7fe fb91 	bl	800b4f4 <USBD_LL_DataOutStage>
}
 800cdd2:	bf00      	nop
 800cdd4:	3708      	adds	r7, #8
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}

0800cdda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b082      	sub	sp, #8
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
 800cde2:	460b      	mov	r3, r1
 800cde4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cdec:	78fa      	ldrb	r2, [r7, #3]
 800cdee:	6879      	ldr	r1, [r7, #4]
 800cdf0:	4613      	mov	r3, r2
 800cdf2:	00db      	lsls	r3, r3, #3
 800cdf4:	4413      	add	r3, r2
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	440b      	add	r3, r1
 800cdfa:	3320      	adds	r3, #32
 800cdfc:	681a      	ldr	r2, [r3, #0]
 800cdfe:	78fb      	ldrb	r3, [r7, #3]
 800ce00:	4619      	mov	r1, r3
 800ce02:	f7fe fc2a 	bl	800b65a <USBD_LL_DataInStage>
}
 800ce06:	bf00      	nop
 800ce08:	3708      	adds	r7, #8
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}

0800ce0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce0e:	b580      	push	{r7, lr}
 800ce10:	b082      	sub	sp, #8
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7fe fd64 	bl	800b8ea <USBD_LL_SOF>
}
 800ce22:	bf00      	nop
 800ce24:	3708      	adds	r7, #8
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce2a:	b580      	push	{r7, lr}
 800ce2c:	b084      	sub	sp, #16
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ce32:	2301      	movs	r3, #1
 800ce34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	79db      	ldrb	r3, [r3, #7]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d102      	bne.n	800ce44 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	73fb      	strb	r3, [r7, #15]
 800ce42:	e008      	b.n	800ce56 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	79db      	ldrb	r3, [r3, #7]
 800ce48:	2b02      	cmp	r3, #2
 800ce4a:	d102      	bne.n	800ce52 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ce4c:	2301      	movs	r3, #1
 800ce4e:	73fb      	strb	r3, [r7, #15]
 800ce50:	e001      	b.n	800ce56 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ce52:	f7f5 f8df 	bl	8002014 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce5c:	7bfa      	ldrb	r2, [r7, #15]
 800ce5e:	4611      	mov	r1, r2
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7fe fcfe 	bl	800b862 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7fe fca6 	bl	800b7be <USBD_LL_Reset>
}
 800ce72:	bf00      	nop
 800ce74:	3710      	adds	r7, #16
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
	...

0800ce7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7fe fcf9 	bl	800b882 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	687a      	ldr	r2, [r7, #4]
 800ce9c:	6812      	ldr	r2, [r2, #0]
 800ce9e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cea2:	f043 0301 	orr.w	r3, r3, #1
 800cea6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	7adb      	ldrb	r3, [r3, #11]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d005      	beq.n	800cebc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ceb0:	4b04      	ldr	r3, [pc, #16]	@ (800cec4 <HAL_PCD_SuspendCallback+0x48>)
 800ceb2:	691b      	ldr	r3, [r3, #16]
 800ceb4:	4a03      	ldr	r2, [pc, #12]	@ (800cec4 <HAL_PCD_SuspendCallback+0x48>)
 800ceb6:	f043 0306 	orr.w	r3, r3, #6
 800ceba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cebc:	bf00      	nop
 800cebe:	3708      	adds	r7, #8
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	e000ed00 	.word	0xe000ed00

0800cec8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7fe fcef 	bl	800b8ba <USBD_LL_Resume>
}
 800cedc:	bf00      	nop
 800cede:	3708      	adds	r7, #8
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b082      	sub	sp, #8
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	460b      	mov	r3, r1
 800ceee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cef6:	78fa      	ldrb	r2, [r7, #3]
 800cef8:	4611      	mov	r1, r2
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7fe fd47 	bl	800b98e <USBD_LL_IsoOUTIncomplete>
}
 800cf00:	bf00      	nop
 800cf02:	3708      	adds	r7, #8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}

0800cf08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	460b      	mov	r3, r1
 800cf12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf1a:	78fa      	ldrb	r2, [r7, #3]
 800cf1c:	4611      	mov	r1, r2
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7fe fd03 	bl	800b92a <USBD_LL_IsoINIncomplete>
}
 800cf24:	bf00      	nop
 800cf26:	3708      	adds	r7, #8
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b082      	sub	sp, #8
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7fe fd59 	bl	800b9f2 <USBD_LL_DevConnected>
}
 800cf40:	bf00      	nop
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7fe fd56 	bl	800ba08 <USBD_LL_DevDisconnected>
}
 800cf5c:	bf00      	nop
 800cf5e:	3708      	adds	r7, #8
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b082      	sub	sp, #8
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d13c      	bne.n	800cfee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cf74:	4a20      	ldr	r2, [pc, #128]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	4a1e      	ldr	r2, [pc, #120]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cf80:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cf84:	4b1c      	ldr	r3, [pc, #112]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cf86:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cf8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cf8c:	4b1a      	ldr	r3, [pc, #104]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cf8e:	2204      	movs	r2, #4
 800cf90:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cf92:	4b19      	ldr	r3, [pc, #100]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cf94:	2202      	movs	r2, #2
 800cf96:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cf98:	4b17      	ldr	r3, [pc, #92]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cf9e:	4b16      	ldr	r3, [pc, #88]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cfa0:	2202      	movs	r2, #2
 800cfa2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cfa4:	4b14      	ldr	r3, [pc, #80]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cfaa:	4b13      	ldr	r3, [pc, #76]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cfac:	2200      	movs	r2, #0
 800cfae:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cfb0:	4b11      	ldr	r3, [pc, #68]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cfb6:	4b10      	ldr	r3, [pc, #64]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cfb8:	2200      	movs	r2, #0
 800cfba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cfbc:	4b0e      	ldr	r3, [pc, #56]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cfc2:	480d      	ldr	r0, [pc, #52]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cfc4:	f7f6 fe74 	bl	8003cb0 <HAL_PCD_Init>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d001      	beq.n	800cfd2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cfce:	f7f5 f821 	bl	8002014 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cfd2:	2180      	movs	r1, #128	@ 0x80
 800cfd4:	4808      	ldr	r0, [pc, #32]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cfd6:	f7f8 f8a0 	bl	800511a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cfda:	2240      	movs	r2, #64	@ 0x40
 800cfdc:	2100      	movs	r1, #0
 800cfde:	4806      	ldr	r0, [pc, #24]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cfe0:	f7f8 f854 	bl	800508c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cfe4:	2280      	movs	r2, #128	@ 0x80
 800cfe6:	2101      	movs	r1, #1
 800cfe8:	4803      	ldr	r0, [pc, #12]	@ (800cff8 <USBD_LL_Init+0x94>)
 800cfea:	f7f8 f84f 	bl	800508c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cfee:	2300      	movs	r3, #0
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	3708      	adds	r7, #8
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}
 800cff8:	20001d94 	.word	0x20001d94

0800cffc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b084      	sub	sp, #16
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d004:	2300      	movs	r3, #0
 800d006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d008:	2300      	movs	r3, #0
 800d00a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d012:	4618      	mov	r0, r3
 800d014:	f7f6 ff5b 	bl	8003ece <HAL_PCD_Start>
 800d018:	4603      	mov	r3, r0
 800d01a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d01c:	7bfb      	ldrb	r3, [r7, #15]
 800d01e:	4618      	mov	r0, r3
 800d020:	f000 f942 	bl	800d2a8 <USBD_Get_USB_Status>
 800d024:	4603      	mov	r3, r0
 800d026:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d028:	7bbb      	ldrb	r3, [r7, #14]
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3710      	adds	r7, #16
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d032:	b580      	push	{r7, lr}
 800d034:	b084      	sub	sp, #16
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
 800d03a:	4608      	mov	r0, r1
 800d03c:	4611      	mov	r1, r2
 800d03e:	461a      	mov	r2, r3
 800d040:	4603      	mov	r3, r0
 800d042:	70fb      	strb	r3, [r7, #3]
 800d044:	460b      	mov	r3, r1
 800d046:	70bb      	strb	r3, [r7, #2]
 800d048:	4613      	mov	r3, r2
 800d04a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d04c:	2300      	movs	r3, #0
 800d04e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d050:	2300      	movs	r3, #0
 800d052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d05a:	78bb      	ldrb	r3, [r7, #2]
 800d05c:	883a      	ldrh	r2, [r7, #0]
 800d05e:	78f9      	ldrb	r1, [r7, #3]
 800d060:	f7f7 fc2f 	bl	80048c2 <HAL_PCD_EP_Open>
 800d064:	4603      	mov	r3, r0
 800d066:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d068:	7bfb      	ldrb	r3, [r7, #15]
 800d06a:	4618      	mov	r0, r3
 800d06c:	f000 f91c 	bl	800d2a8 <USBD_Get_USB_Status>
 800d070:	4603      	mov	r3, r0
 800d072:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d074:	7bbb      	ldrb	r3, [r7, #14]
}
 800d076:	4618      	mov	r0, r3
 800d078:	3710      	adds	r7, #16
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}

0800d07e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d07e:	b580      	push	{r7, lr}
 800d080:	b084      	sub	sp, #16
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]
 800d086:	460b      	mov	r3, r1
 800d088:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d08a:	2300      	movs	r3, #0
 800d08c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d08e:	2300      	movs	r3, #0
 800d090:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d098:	78fa      	ldrb	r2, [r7, #3]
 800d09a:	4611      	mov	r1, r2
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7f7 fc7a 	bl	8004996 <HAL_PCD_EP_Close>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0a6:	7bfb      	ldrb	r3, [r7, #15]
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f000 f8fd 	bl	800d2a8 <USBD_Get_USB_Status>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3710      	adds	r7, #16
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	460b      	mov	r3, r1
 800d0c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d0d6:	78fa      	ldrb	r2, [r7, #3]
 800d0d8:	4611      	mov	r1, r2
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7f7 fd32 	bl	8004b44 <HAL_PCD_EP_SetStall>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0e4:	7bfb      	ldrb	r3, [r7, #15]
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f000 f8de 	bl	800d2a8 <USBD_Get_USB_Status>
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3710      	adds	r7, #16
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}

0800d0fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0fa:	b580      	push	{r7, lr}
 800d0fc:	b084      	sub	sp, #16
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	6078      	str	r0, [r7, #4]
 800d102:	460b      	mov	r3, r1
 800d104:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d106:	2300      	movs	r3, #0
 800d108:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d10a:	2300      	movs	r3, #0
 800d10c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d114:	78fa      	ldrb	r2, [r7, #3]
 800d116:	4611      	mov	r1, r2
 800d118:	4618      	mov	r0, r3
 800d11a:	f7f7 fd76 	bl	8004c0a <HAL_PCD_EP_ClrStall>
 800d11e:	4603      	mov	r3, r0
 800d120:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d122:	7bfb      	ldrb	r3, [r7, #15]
 800d124:	4618      	mov	r0, r3
 800d126:	f000 f8bf 	bl	800d2a8 <USBD_Get_USB_Status>
 800d12a:	4603      	mov	r3, r0
 800d12c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d12e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d130:	4618      	mov	r0, r3
 800d132:	3710      	adds	r7, #16
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d138:	b480      	push	{r7}
 800d13a:	b085      	sub	sp, #20
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	460b      	mov	r3, r1
 800d142:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d14a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d14c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d150:	2b00      	cmp	r3, #0
 800d152:	da0b      	bge.n	800d16c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d154:	78fb      	ldrb	r3, [r7, #3]
 800d156:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d15a:	68f9      	ldr	r1, [r7, #12]
 800d15c:	4613      	mov	r3, r2
 800d15e:	00db      	lsls	r3, r3, #3
 800d160:	4413      	add	r3, r2
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	440b      	add	r3, r1
 800d166:	3316      	adds	r3, #22
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	e00b      	b.n	800d184 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d16c:	78fb      	ldrb	r3, [r7, #3]
 800d16e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d172:	68f9      	ldr	r1, [r7, #12]
 800d174:	4613      	mov	r3, r2
 800d176:	00db      	lsls	r3, r3, #3
 800d178:	4413      	add	r3, r2
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	440b      	add	r3, r1
 800d17e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d182:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d184:	4618      	mov	r0, r3
 800d186:	3714      	adds	r7, #20
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b084      	sub	sp, #16
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
 800d198:	460b      	mov	r3, r1
 800d19a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d19c:	2300      	movs	r3, #0
 800d19e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d1aa:	78fa      	ldrb	r2, [r7, #3]
 800d1ac:	4611      	mov	r1, r2
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7f7 fb63 	bl	800487a <HAL_PCD_SetAddress>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1b8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f000 f874 	bl	800d2a8 <USBD_Get_USB_Status>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b086      	sub	sp, #24
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	60f8      	str	r0, [r7, #12]
 800d1d6:	607a      	str	r2, [r7, #4]
 800d1d8:	603b      	str	r3, [r7, #0]
 800d1da:	460b      	mov	r3, r1
 800d1dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d1ec:	7af9      	ldrb	r1, [r7, #11]
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	687a      	ldr	r2, [r7, #4]
 800d1f2:	f7f7 fc6d 	bl	8004ad0 <HAL_PCD_EP_Transmit>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1fa:	7dfb      	ldrb	r3, [r7, #23]
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f000 f853 	bl	800d2a8 <USBD_Get_USB_Status>
 800d202:	4603      	mov	r3, r0
 800d204:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d206:	7dbb      	ldrb	r3, [r7, #22]
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3718      	adds	r7, #24
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b086      	sub	sp, #24
 800d214:	af00      	add	r7, sp, #0
 800d216:	60f8      	str	r0, [r7, #12]
 800d218:	607a      	str	r2, [r7, #4]
 800d21a:	603b      	str	r3, [r7, #0]
 800d21c:	460b      	mov	r3, r1
 800d21e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d220:	2300      	movs	r3, #0
 800d222:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d224:	2300      	movs	r3, #0
 800d226:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d22e:	7af9      	ldrb	r1, [r7, #11]
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	f7f7 fbf9 	bl	8004a2a <HAL_PCD_EP_Receive>
 800d238:	4603      	mov	r3, r0
 800d23a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d23c:	7dfb      	ldrb	r3, [r7, #23]
 800d23e:	4618      	mov	r0, r3
 800d240:	f000 f832 	bl	800d2a8 <USBD_Get_USB_Status>
 800d244:	4603      	mov	r3, r0
 800d246:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d248:	7dbb      	ldrb	r3, [r7, #22]
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	3718      	adds	r7, #24
 800d24e:	46bd      	mov	sp, r7
 800d250:	bd80      	pop	{r7, pc}

0800d252 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d252:	b580      	push	{r7, lr}
 800d254:	b082      	sub	sp, #8
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
 800d25a:	460b      	mov	r3, r1
 800d25c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d264:	78fa      	ldrb	r2, [r7, #3]
 800d266:	4611      	mov	r1, r2
 800d268:	4618      	mov	r0, r3
 800d26a:	f7f7 fc19 	bl	8004aa0 <HAL_PCD_EP_GetRxCount>
 800d26e:	4603      	mov	r3, r0
}
 800d270:	4618      	mov	r0, r3
 800d272:	3708      	adds	r7, #8
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}

0800d278 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d278:	b480      	push	{r7}
 800d27a:	b083      	sub	sp, #12
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d280:	4b03      	ldr	r3, [pc, #12]	@ (800d290 <USBD_static_malloc+0x18>)
}
 800d282:	4618      	mov	r0, r3
 800d284:	370c      	adds	r7, #12
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	20002278 	.word	0x20002278

0800d294 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d294:	b480      	push	{r7}
 800d296:	b083      	sub	sp, #12
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]

}
 800d29c:	bf00      	nop
 800d29e:	370c      	adds	r7, #12
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr

0800d2a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b085      	sub	sp, #20
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d2b6:	79fb      	ldrb	r3, [r7, #7]
 800d2b8:	2b03      	cmp	r3, #3
 800d2ba:	d817      	bhi.n	800d2ec <USBD_Get_USB_Status+0x44>
 800d2bc:	a201      	add	r2, pc, #4	@ (adr r2, 800d2c4 <USBD_Get_USB_Status+0x1c>)
 800d2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2c2:	bf00      	nop
 800d2c4:	0800d2d5 	.word	0x0800d2d5
 800d2c8:	0800d2db 	.word	0x0800d2db
 800d2cc:	0800d2e1 	.word	0x0800d2e1
 800d2d0:	0800d2e7 	.word	0x0800d2e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	73fb      	strb	r3, [r7, #15]
    break;
 800d2d8:	e00b      	b.n	800d2f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d2da:	2303      	movs	r3, #3
 800d2dc:	73fb      	strb	r3, [r7, #15]
    break;
 800d2de:	e008      	b.n	800d2f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d2e4:	e005      	b.n	800d2f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d2e6:	2303      	movs	r3, #3
 800d2e8:	73fb      	strb	r3, [r7, #15]
    break;
 800d2ea:	e002      	b.n	800d2f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d2ec:	2303      	movs	r3, #3
 800d2ee:	73fb      	strb	r3, [r7, #15]
    break;
 800d2f0:	bf00      	nop
  }
  return usb_status;
 800d2f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3714      	adds	r7, #20
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fe:	4770      	bx	lr

0800d300 <memset>:
 800d300:	4402      	add	r2, r0
 800d302:	4603      	mov	r3, r0
 800d304:	4293      	cmp	r3, r2
 800d306:	d100      	bne.n	800d30a <memset+0xa>
 800d308:	4770      	bx	lr
 800d30a:	f803 1b01 	strb.w	r1, [r3], #1
 800d30e:	e7f9      	b.n	800d304 <memset+0x4>

0800d310 <__errno>:
 800d310:	4b01      	ldr	r3, [pc, #4]	@ (800d318 <__errno+0x8>)
 800d312:	6818      	ldr	r0, [r3, #0]
 800d314:	4770      	bx	lr
 800d316:	bf00      	nop
 800d318:	20000104 	.word	0x20000104

0800d31c <__libc_init_array>:
 800d31c:	b570      	push	{r4, r5, r6, lr}
 800d31e:	4d0d      	ldr	r5, [pc, #52]	@ (800d354 <__libc_init_array+0x38>)
 800d320:	4c0d      	ldr	r4, [pc, #52]	@ (800d358 <__libc_init_array+0x3c>)
 800d322:	1b64      	subs	r4, r4, r5
 800d324:	10a4      	asrs	r4, r4, #2
 800d326:	2600      	movs	r6, #0
 800d328:	42a6      	cmp	r6, r4
 800d32a:	d109      	bne.n	800d340 <__libc_init_array+0x24>
 800d32c:	4d0b      	ldr	r5, [pc, #44]	@ (800d35c <__libc_init_array+0x40>)
 800d32e:	4c0c      	ldr	r4, [pc, #48]	@ (800d360 <__libc_init_array+0x44>)
 800d330:	f001 fc16 	bl	800eb60 <_init>
 800d334:	1b64      	subs	r4, r4, r5
 800d336:	10a4      	asrs	r4, r4, #2
 800d338:	2600      	movs	r6, #0
 800d33a:	42a6      	cmp	r6, r4
 800d33c:	d105      	bne.n	800d34a <__libc_init_array+0x2e>
 800d33e:	bd70      	pop	{r4, r5, r6, pc}
 800d340:	f855 3b04 	ldr.w	r3, [r5], #4
 800d344:	4798      	blx	r3
 800d346:	3601      	adds	r6, #1
 800d348:	e7ee      	b.n	800d328 <__libc_init_array+0xc>
 800d34a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d34e:	4798      	blx	r3
 800d350:	3601      	adds	r6, #1
 800d352:	e7f2      	b.n	800d33a <__libc_init_array+0x1e>
 800d354:	0800ee60 	.word	0x0800ee60
 800d358:	0800ee60 	.word	0x0800ee60
 800d35c:	0800ee60 	.word	0x0800ee60
 800d360:	0800ee64 	.word	0x0800ee64

0800d364 <memcpy>:
 800d364:	440a      	add	r2, r1
 800d366:	4291      	cmp	r1, r2
 800d368:	f100 33ff 	add.w	r3, r0, #4294967295
 800d36c:	d100      	bne.n	800d370 <memcpy+0xc>
 800d36e:	4770      	bx	lr
 800d370:	b510      	push	{r4, lr}
 800d372:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d376:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d37a:	4291      	cmp	r1, r2
 800d37c:	d1f9      	bne.n	800d372 <memcpy+0xe>
 800d37e:	bd10      	pop	{r4, pc}

0800d380 <atan2>:
 800d380:	f000 bb36 	b.w	800d9f0 <__ieee754_atan2>

0800d384 <sqrt>:
 800d384:	b538      	push	{r3, r4, r5, lr}
 800d386:	ed2d 8b02 	vpush	{d8}
 800d38a:	ec55 4b10 	vmov	r4, r5, d0
 800d38e:	f000 f8cf 	bl	800d530 <__ieee754_sqrt>
 800d392:	4622      	mov	r2, r4
 800d394:	462b      	mov	r3, r5
 800d396:	4620      	mov	r0, r4
 800d398:	4629      	mov	r1, r5
 800d39a:	eeb0 8a40 	vmov.f32	s16, s0
 800d39e:	eef0 8a60 	vmov.f32	s17, s1
 800d3a2:	f7f3 fb67 	bl	8000a74 <__aeabi_dcmpun>
 800d3a6:	b990      	cbnz	r0, 800d3ce <sqrt+0x4a>
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	2300      	movs	r3, #0
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	4629      	mov	r1, r5
 800d3b0:	f7f3 fb38 	bl	8000a24 <__aeabi_dcmplt>
 800d3b4:	b158      	cbz	r0, 800d3ce <sqrt+0x4a>
 800d3b6:	f7ff ffab 	bl	800d310 <__errno>
 800d3ba:	2321      	movs	r3, #33	@ 0x21
 800d3bc:	6003      	str	r3, [r0, #0]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	4610      	mov	r0, r2
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	f7f3 f9e5 	bl	8000794 <__aeabi_ddiv>
 800d3ca:	ec41 0b18 	vmov	d8, r0, r1
 800d3ce:	eeb0 0a48 	vmov.f32	s0, s16
 800d3d2:	eef0 0a68 	vmov.f32	s1, s17
 800d3d6:	ecbd 8b02 	vpop	{d8}
 800d3da:	bd38      	pop	{r3, r4, r5, pc}
 800d3dc:	0000      	movs	r0, r0
	...

0800d3e0 <cos>:
 800d3e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d3e2:	ec53 2b10 	vmov	r2, r3, d0
 800d3e6:	4826      	ldr	r0, [pc, #152]	@ (800d480 <cos+0xa0>)
 800d3e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d3ec:	4281      	cmp	r1, r0
 800d3ee:	d806      	bhi.n	800d3fe <cos+0x1e>
 800d3f0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d478 <cos+0x98>
 800d3f4:	b005      	add	sp, #20
 800d3f6:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3fa:	f000 b975 	b.w	800d6e8 <__kernel_cos>
 800d3fe:	4821      	ldr	r0, [pc, #132]	@ (800d484 <cos+0xa4>)
 800d400:	4281      	cmp	r1, r0
 800d402:	d908      	bls.n	800d416 <cos+0x36>
 800d404:	4610      	mov	r0, r2
 800d406:	4619      	mov	r1, r3
 800d408:	f7f2 fee2 	bl	80001d0 <__aeabi_dsub>
 800d40c:	ec41 0b10 	vmov	d0, r0, r1
 800d410:	b005      	add	sp, #20
 800d412:	f85d fb04 	ldr.w	pc, [sp], #4
 800d416:	4668      	mov	r0, sp
 800d418:	f000 fbb2 	bl	800db80 <__ieee754_rem_pio2>
 800d41c:	f000 0003 	and.w	r0, r0, #3
 800d420:	2801      	cmp	r0, #1
 800d422:	d00b      	beq.n	800d43c <cos+0x5c>
 800d424:	2802      	cmp	r0, #2
 800d426:	d015      	beq.n	800d454 <cos+0x74>
 800d428:	b9d8      	cbnz	r0, 800d462 <cos+0x82>
 800d42a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d42e:	ed9d 0b00 	vldr	d0, [sp]
 800d432:	f000 f959 	bl	800d6e8 <__kernel_cos>
 800d436:	ec51 0b10 	vmov	r0, r1, d0
 800d43a:	e7e7      	b.n	800d40c <cos+0x2c>
 800d43c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d440:	ed9d 0b00 	vldr	d0, [sp]
 800d444:	f000 fa18 	bl	800d878 <__kernel_sin>
 800d448:	ec53 2b10 	vmov	r2, r3, d0
 800d44c:	4610      	mov	r0, r2
 800d44e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d452:	e7db      	b.n	800d40c <cos+0x2c>
 800d454:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d458:	ed9d 0b00 	vldr	d0, [sp]
 800d45c:	f000 f944 	bl	800d6e8 <__kernel_cos>
 800d460:	e7f2      	b.n	800d448 <cos+0x68>
 800d462:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d466:	ed9d 0b00 	vldr	d0, [sp]
 800d46a:	2001      	movs	r0, #1
 800d46c:	f000 fa04 	bl	800d878 <__kernel_sin>
 800d470:	e7e1      	b.n	800d436 <cos+0x56>
 800d472:	bf00      	nop
 800d474:	f3af 8000 	nop.w
	...
 800d480:	3fe921fb 	.word	0x3fe921fb
 800d484:	7fefffff 	.word	0x7fefffff

0800d488 <sin>:
 800d488:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d48a:	ec53 2b10 	vmov	r2, r3, d0
 800d48e:	4826      	ldr	r0, [pc, #152]	@ (800d528 <sin+0xa0>)
 800d490:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d494:	4281      	cmp	r1, r0
 800d496:	d807      	bhi.n	800d4a8 <sin+0x20>
 800d498:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800d520 <sin+0x98>
 800d49c:	2000      	movs	r0, #0
 800d49e:	b005      	add	sp, #20
 800d4a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4a4:	f000 b9e8 	b.w	800d878 <__kernel_sin>
 800d4a8:	4820      	ldr	r0, [pc, #128]	@ (800d52c <sin+0xa4>)
 800d4aa:	4281      	cmp	r1, r0
 800d4ac:	d908      	bls.n	800d4c0 <sin+0x38>
 800d4ae:	4610      	mov	r0, r2
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	f7f2 fe8d 	bl	80001d0 <__aeabi_dsub>
 800d4b6:	ec41 0b10 	vmov	d0, r0, r1
 800d4ba:	b005      	add	sp, #20
 800d4bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800d4c0:	4668      	mov	r0, sp
 800d4c2:	f000 fb5d 	bl	800db80 <__ieee754_rem_pio2>
 800d4c6:	f000 0003 	and.w	r0, r0, #3
 800d4ca:	2801      	cmp	r0, #1
 800d4cc:	d00c      	beq.n	800d4e8 <sin+0x60>
 800d4ce:	2802      	cmp	r0, #2
 800d4d0:	d011      	beq.n	800d4f6 <sin+0x6e>
 800d4d2:	b9e8      	cbnz	r0, 800d510 <sin+0x88>
 800d4d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d4d8:	ed9d 0b00 	vldr	d0, [sp]
 800d4dc:	2001      	movs	r0, #1
 800d4de:	f000 f9cb 	bl	800d878 <__kernel_sin>
 800d4e2:	ec51 0b10 	vmov	r0, r1, d0
 800d4e6:	e7e6      	b.n	800d4b6 <sin+0x2e>
 800d4e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d4ec:	ed9d 0b00 	vldr	d0, [sp]
 800d4f0:	f000 f8fa 	bl	800d6e8 <__kernel_cos>
 800d4f4:	e7f5      	b.n	800d4e2 <sin+0x5a>
 800d4f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d4fa:	ed9d 0b00 	vldr	d0, [sp]
 800d4fe:	2001      	movs	r0, #1
 800d500:	f000 f9ba 	bl	800d878 <__kernel_sin>
 800d504:	ec53 2b10 	vmov	r2, r3, d0
 800d508:	4610      	mov	r0, r2
 800d50a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d50e:	e7d2      	b.n	800d4b6 <sin+0x2e>
 800d510:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d514:	ed9d 0b00 	vldr	d0, [sp]
 800d518:	f000 f8e6 	bl	800d6e8 <__kernel_cos>
 800d51c:	e7f2      	b.n	800d504 <sin+0x7c>
 800d51e:	bf00      	nop
	...
 800d528:	3fe921fb 	.word	0x3fe921fb
 800d52c:	7fefffff 	.word	0x7fefffff

0800d530 <__ieee754_sqrt>:
 800d530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d534:	4a68      	ldr	r2, [pc, #416]	@ (800d6d8 <__ieee754_sqrt+0x1a8>)
 800d536:	ec55 4b10 	vmov	r4, r5, d0
 800d53a:	43aa      	bics	r2, r5
 800d53c:	462b      	mov	r3, r5
 800d53e:	4621      	mov	r1, r4
 800d540:	d110      	bne.n	800d564 <__ieee754_sqrt+0x34>
 800d542:	4622      	mov	r2, r4
 800d544:	4620      	mov	r0, r4
 800d546:	4629      	mov	r1, r5
 800d548:	f7f2 fffa 	bl	8000540 <__aeabi_dmul>
 800d54c:	4602      	mov	r2, r0
 800d54e:	460b      	mov	r3, r1
 800d550:	4620      	mov	r0, r4
 800d552:	4629      	mov	r1, r5
 800d554:	f7f2 fe3e 	bl	80001d4 <__adddf3>
 800d558:	4604      	mov	r4, r0
 800d55a:	460d      	mov	r5, r1
 800d55c:	ec45 4b10 	vmov	d0, r4, r5
 800d560:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d564:	2d00      	cmp	r5, #0
 800d566:	dc0e      	bgt.n	800d586 <__ieee754_sqrt+0x56>
 800d568:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d56c:	4322      	orrs	r2, r4
 800d56e:	d0f5      	beq.n	800d55c <__ieee754_sqrt+0x2c>
 800d570:	b19d      	cbz	r5, 800d59a <__ieee754_sqrt+0x6a>
 800d572:	4622      	mov	r2, r4
 800d574:	4620      	mov	r0, r4
 800d576:	4629      	mov	r1, r5
 800d578:	f7f2 fe2a 	bl	80001d0 <__aeabi_dsub>
 800d57c:	4602      	mov	r2, r0
 800d57e:	460b      	mov	r3, r1
 800d580:	f7f3 f908 	bl	8000794 <__aeabi_ddiv>
 800d584:	e7e8      	b.n	800d558 <__ieee754_sqrt+0x28>
 800d586:	152a      	asrs	r2, r5, #20
 800d588:	d115      	bne.n	800d5b6 <__ieee754_sqrt+0x86>
 800d58a:	2000      	movs	r0, #0
 800d58c:	e009      	b.n	800d5a2 <__ieee754_sqrt+0x72>
 800d58e:	0acb      	lsrs	r3, r1, #11
 800d590:	3a15      	subs	r2, #21
 800d592:	0549      	lsls	r1, r1, #21
 800d594:	2b00      	cmp	r3, #0
 800d596:	d0fa      	beq.n	800d58e <__ieee754_sqrt+0x5e>
 800d598:	e7f7      	b.n	800d58a <__ieee754_sqrt+0x5a>
 800d59a:	462a      	mov	r2, r5
 800d59c:	e7fa      	b.n	800d594 <__ieee754_sqrt+0x64>
 800d59e:	005b      	lsls	r3, r3, #1
 800d5a0:	3001      	adds	r0, #1
 800d5a2:	02dc      	lsls	r4, r3, #11
 800d5a4:	d5fb      	bpl.n	800d59e <__ieee754_sqrt+0x6e>
 800d5a6:	1e44      	subs	r4, r0, #1
 800d5a8:	1b12      	subs	r2, r2, r4
 800d5aa:	f1c0 0420 	rsb	r4, r0, #32
 800d5ae:	fa21 f404 	lsr.w	r4, r1, r4
 800d5b2:	4323      	orrs	r3, r4
 800d5b4:	4081      	lsls	r1, r0
 800d5b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5ba:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d5be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d5c2:	07d2      	lsls	r2, r2, #31
 800d5c4:	bf5c      	itt	pl
 800d5c6:	005b      	lslpl	r3, r3, #1
 800d5c8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800d5cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d5d0:	bf58      	it	pl
 800d5d2:	0049      	lslpl	r1, r1, #1
 800d5d4:	2600      	movs	r6, #0
 800d5d6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800d5da:	106d      	asrs	r5, r5, #1
 800d5dc:	0049      	lsls	r1, r1, #1
 800d5de:	2016      	movs	r0, #22
 800d5e0:	4632      	mov	r2, r6
 800d5e2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800d5e6:	1917      	adds	r7, r2, r4
 800d5e8:	429f      	cmp	r7, r3
 800d5ea:	bfde      	ittt	le
 800d5ec:	193a      	addle	r2, r7, r4
 800d5ee:	1bdb      	suble	r3, r3, r7
 800d5f0:	1936      	addle	r6, r6, r4
 800d5f2:	0fcf      	lsrs	r7, r1, #31
 800d5f4:	3801      	subs	r0, #1
 800d5f6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800d5fa:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d5fe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800d602:	d1f0      	bne.n	800d5e6 <__ieee754_sqrt+0xb6>
 800d604:	4604      	mov	r4, r0
 800d606:	2720      	movs	r7, #32
 800d608:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800d60c:	429a      	cmp	r2, r3
 800d60e:	eb00 0e0c 	add.w	lr, r0, ip
 800d612:	db02      	blt.n	800d61a <__ieee754_sqrt+0xea>
 800d614:	d113      	bne.n	800d63e <__ieee754_sqrt+0x10e>
 800d616:	458e      	cmp	lr, r1
 800d618:	d811      	bhi.n	800d63e <__ieee754_sqrt+0x10e>
 800d61a:	f1be 0f00 	cmp.w	lr, #0
 800d61e:	eb0e 000c 	add.w	r0, lr, ip
 800d622:	da42      	bge.n	800d6aa <__ieee754_sqrt+0x17a>
 800d624:	2800      	cmp	r0, #0
 800d626:	db40      	blt.n	800d6aa <__ieee754_sqrt+0x17a>
 800d628:	f102 0801 	add.w	r8, r2, #1
 800d62c:	1a9b      	subs	r3, r3, r2
 800d62e:	458e      	cmp	lr, r1
 800d630:	bf88      	it	hi
 800d632:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800d636:	eba1 010e 	sub.w	r1, r1, lr
 800d63a:	4464      	add	r4, ip
 800d63c:	4642      	mov	r2, r8
 800d63e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800d642:	3f01      	subs	r7, #1
 800d644:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d648:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d64c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800d650:	d1dc      	bne.n	800d60c <__ieee754_sqrt+0xdc>
 800d652:	4319      	orrs	r1, r3
 800d654:	d01b      	beq.n	800d68e <__ieee754_sqrt+0x15e>
 800d656:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d6dc <__ieee754_sqrt+0x1ac>
 800d65a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d6e0 <__ieee754_sqrt+0x1b0>
 800d65e:	e9da 0100 	ldrd	r0, r1, [sl]
 800d662:	e9db 2300 	ldrd	r2, r3, [fp]
 800d666:	f7f2 fdb3 	bl	80001d0 <__aeabi_dsub>
 800d66a:	e9da 8900 	ldrd	r8, r9, [sl]
 800d66e:	4602      	mov	r2, r0
 800d670:	460b      	mov	r3, r1
 800d672:	4640      	mov	r0, r8
 800d674:	4649      	mov	r1, r9
 800d676:	f7f3 f9df 	bl	8000a38 <__aeabi_dcmple>
 800d67a:	b140      	cbz	r0, 800d68e <__ieee754_sqrt+0x15e>
 800d67c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d680:	e9da 0100 	ldrd	r0, r1, [sl]
 800d684:	e9db 2300 	ldrd	r2, r3, [fp]
 800d688:	d111      	bne.n	800d6ae <__ieee754_sqrt+0x17e>
 800d68a:	3601      	adds	r6, #1
 800d68c:	463c      	mov	r4, r7
 800d68e:	1072      	asrs	r2, r6, #1
 800d690:	0863      	lsrs	r3, r4, #1
 800d692:	07f1      	lsls	r1, r6, #31
 800d694:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800d698:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800d69c:	bf48      	it	mi
 800d69e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d6a2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	e756      	b.n	800d558 <__ieee754_sqrt+0x28>
 800d6aa:	4690      	mov	r8, r2
 800d6ac:	e7be      	b.n	800d62c <__ieee754_sqrt+0xfc>
 800d6ae:	f7f2 fd91 	bl	80001d4 <__adddf3>
 800d6b2:	e9da 8900 	ldrd	r8, r9, [sl]
 800d6b6:	4602      	mov	r2, r0
 800d6b8:	460b      	mov	r3, r1
 800d6ba:	4640      	mov	r0, r8
 800d6bc:	4649      	mov	r1, r9
 800d6be:	f7f3 f9b1 	bl	8000a24 <__aeabi_dcmplt>
 800d6c2:	b120      	cbz	r0, 800d6ce <__ieee754_sqrt+0x19e>
 800d6c4:	1ca0      	adds	r0, r4, #2
 800d6c6:	bf08      	it	eq
 800d6c8:	3601      	addeq	r6, #1
 800d6ca:	3402      	adds	r4, #2
 800d6cc:	e7df      	b.n	800d68e <__ieee754_sqrt+0x15e>
 800d6ce:	1c63      	adds	r3, r4, #1
 800d6d0:	f023 0401 	bic.w	r4, r3, #1
 800d6d4:	e7db      	b.n	800d68e <__ieee754_sqrt+0x15e>
 800d6d6:	bf00      	nop
 800d6d8:	7ff00000 	.word	0x7ff00000
 800d6dc:	20000160 	.word	0x20000160
 800d6e0:	20000158 	.word	0x20000158
 800d6e4:	00000000 	.word	0x00000000

0800d6e8 <__kernel_cos>:
 800d6e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ec:	ec57 6b10 	vmov	r6, r7, d0
 800d6f0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d6f4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800d6f8:	ed8d 1b00 	vstr	d1, [sp]
 800d6fc:	d206      	bcs.n	800d70c <__kernel_cos+0x24>
 800d6fe:	4630      	mov	r0, r6
 800d700:	4639      	mov	r1, r7
 800d702:	f7f3 f9cd 	bl	8000aa0 <__aeabi_d2iz>
 800d706:	2800      	cmp	r0, #0
 800d708:	f000 8088 	beq.w	800d81c <__kernel_cos+0x134>
 800d70c:	4632      	mov	r2, r6
 800d70e:	463b      	mov	r3, r7
 800d710:	4630      	mov	r0, r6
 800d712:	4639      	mov	r1, r7
 800d714:	f7f2 ff14 	bl	8000540 <__aeabi_dmul>
 800d718:	4b51      	ldr	r3, [pc, #324]	@ (800d860 <__kernel_cos+0x178>)
 800d71a:	2200      	movs	r2, #0
 800d71c:	4604      	mov	r4, r0
 800d71e:	460d      	mov	r5, r1
 800d720:	f7f2 ff0e 	bl	8000540 <__aeabi_dmul>
 800d724:	a340      	add	r3, pc, #256	@ (adr r3, 800d828 <__kernel_cos+0x140>)
 800d726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72a:	4682      	mov	sl, r0
 800d72c:	468b      	mov	fp, r1
 800d72e:	4620      	mov	r0, r4
 800d730:	4629      	mov	r1, r5
 800d732:	f7f2 ff05 	bl	8000540 <__aeabi_dmul>
 800d736:	a33e      	add	r3, pc, #248	@ (adr r3, 800d830 <__kernel_cos+0x148>)
 800d738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d73c:	f7f2 fd4a 	bl	80001d4 <__adddf3>
 800d740:	4622      	mov	r2, r4
 800d742:	462b      	mov	r3, r5
 800d744:	f7f2 fefc 	bl	8000540 <__aeabi_dmul>
 800d748:	a33b      	add	r3, pc, #236	@ (adr r3, 800d838 <__kernel_cos+0x150>)
 800d74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74e:	f7f2 fd3f 	bl	80001d0 <__aeabi_dsub>
 800d752:	4622      	mov	r2, r4
 800d754:	462b      	mov	r3, r5
 800d756:	f7f2 fef3 	bl	8000540 <__aeabi_dmul>
 800d75a:	a339      	add	r3, pc, #228	@ (adr r3, 800d840 <__kernel_cos+0x158>)
 800d75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d760:	f7f2 fd38 	bl	80001d4 <__adddf3>
 800d764:	4622      	mov	r2, r4
 800d766:	462b      	mov	r3, r5
 800d768:	f7f2 feea 	bl	8000540 <__aeabi_dmul>
 800d76c:	a336      	add	r3, pc, #216	@ (adr r3, 800d848 <__kernel_cos+0x160>)
 800d76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d772:	f7f2 fd2d 	bl	80001d0 <__aeabi_dsub>
 800d776:	4622      	mov	r2, r4
 800d778:	462b      	mov	r3, r5
 800d77a:	f7f2 fee1 	bl	8000540 <__aeabi_dmul>
 800d77e:	a334      	add	r3, pc, #208	@ (adr r3, 800d850 <__kernel_cos+0x168>)
 800d780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d784:	f7f2 fd26 	bl	80001d4 <__adddf3>
 800d788:	4622      	mov	r2, r4
 800d78a:	462b      	mov	r3, r5
 800d78c:	f7f2 fed8 	bl	8000540 <__aeabi_dmul>
 800d790:	4622      	mov	r2, r4
 800d792:	462b      	mov	r3, r5
 800d794:	f7f2 fed4 	bl	8000540 <__aeabi_dmul>
 800d798:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d79c:	4604      	mov	r4, r0
 800d79e:	460d      	mov	r5, r1
 800d7a0:	4630      	mov	r0, r6
 800d7a2:	4639      	mov	r1, r7
 800d7a4:	f7f2 fecc 	bl	8000540 <__aeabi_dmul>
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	4629      	mov	r1, r5
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	f7f2 fd0e 	bl	80001d0 <__aeabi_dsub>
 800d7b4:	4b2b      	ldr	r3, [pc, #172]	@ (800d864 <__kernel_cos+0x17c>)
 800d7b6:	4598      	cmp	r8, r3
 800d7b8:	4606      	mov	r6, r0
 800d7ba:	460f      	mov	r7, r1
 800d7bc:	d810      	bhi.n	800d7e0 <__kernel_cos+0xf8>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	4650      	mov	r0, sl
 800d7c4:	4659      	mov	r1, fp
 800d7c6:	f7f2 fd03 	bl	80001d0 <__aeabi_dsub>
 800d7ca:	460b      	mov	r3, r1
 800d7cc:	4926      	ldr	r1, [pc, #152]	@ (800d868 <__kernel_cos+0x180>)
 800d7ce:	4602      	mov	r2, r0
 800d7d0:	2000      	movs	r0, #0
 800d7d2:	f7f2 fcfd 	bl	80001d0 <__aeabi_dsub>
 800d7d6:	ec41 0b10 	vmov	d0, r0, r1
 800d7da:	b003      	add	sp, #12
 800d7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7e0:	4b22      	ldr	r3, [pc, #136]	@ (800d86c <__kernel_cos+0x184>)
 800d7e2:	4921      	ldr	r1, [pc, #132]	@ (800d868 <__kernel_cos+0x180>)
 800d7e4:	4598      	cmp	r8, r3
 800d7e6:	bf8c      	ite	hi
 800d7e8:	4d21      	ldrhi	r5, [pc, #132]	@ (800d870 <__kernel_cos+0x188>)
 800d7ea:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800d7ee:	2400      	movs	r4, #0
 800d7f0:	4622      	mov	r2, r4
 800d7f2:	462b      	mov	r3, r5
 800d7f4:	2000      	movs	r0, #0
 800d7f6:	f7f2 fceb 	bl	80001d0 <__aeabi_dsub>
 800d7fa:	4622      	mov	r2, r4
 800d7fc:	4680      	mov	r8, r0
 800d7fe:	4689      	mov	r9, r1
 800d800:	462b      	mov	r3, r5
 800d802:	4650      	mov	r0, sl
 800d804:	4659      	mov	r1, fp
 800d806:	f7f2 fce3 	bl	80001d0 <__aeabi_dsub>
 800d80a:	4632      	mov	r2, r6
 800d80c:	463b      	mov	r3, r7
 800d80e:	f7f2 fcdf 	bl	80001d0 <__aeabi_dsub>
 800d812:	4602      	mov	r2, r0
 800d814:	460b      	mov	r3, r1
 800d816:	4640      	mov	r0, r8
 800d818:	4649      	mov	r1, r9
 800d81a:	e7da      	b.n	800d7d2 <__kernel_cos+0xea>
 800d81c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800d858 <__kernel_cos+0x170>
 800d820:	e7db      	b.n	800d7da <__kernel_cos+0xf2>
 800d822:	bf00      	nop
 800d824:	f3af 8000 	nop.w
 800d828:	be8838d4 	.word	0xbe8838d4
 800d82c:	bda8fae9 	.word	0xbda8fae9
 800d830:	bdb4b1c4 	.word	0xbdb4b1c4
 800d834:	3e21ee9e 	.word	0x3e21ee9e
 800d838:	809c52ad 	.word	0x809c52ad
 800d83c:	3e927e4f 	.word	0x3e927e4f
 800d840:	19cb1590 	.word	0x19cb1590
 800d844:	3efa01a0 	.word	0x3efa01a0
 800d848:	16c15177 	.word	0x16c15177
 800d84c:	3f56c16c 	.word	0x3f56c16c
 800d850:	5555554c 	.word	0x5555554c
 800d854:	3fa55555 	.word	0x3fa55555
 800d858:	00000000 	.word	0x00000000
 800d85c:	3ff00000 	.word	0x3ff00000
 800d860:	3fe00000 	.word	0x3fe00000
 800d864:	3fd33332 	.word	0x3fd33332
 800d868:	3ff00000 	.word	0x3ff00000
 800d86c:	3fe90000 	.word	0x3fe90000
 800d870:	3fd20000 	.word	0x3fd20000
 800d874:	00000000 	.word	0x00000000

0800d878 <__kernel_sin>:
 800d878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d87c:	ec55 4b10 	vmov	r4, r5, d0
 800d880:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d884:	b085      	sub	sp, #20
 800d886:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800d88a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d88e:	4680      	mov	r8, r0
 800d890:	d205      	bcs.n	800d89e <__kernel_sin+0x26>
 800d892:	4620      	mov	r0, r4
 800d894:	4629      	mov	r1, r5
 800d896:	f7f3 f903 	bl	8000aa0 <__aeabi_d2iz>
 800d89a:	2800      	cmp	r0, #0
 800d89c:	d052      	beq.n	800d944 <__kernel_sin+0xcc>
 800d89e:	4622      	mov	r2, r4
 800d8a0:	462b      	mov	r3, r5
 800d8a2:	4620      	mov	r0, r4
 800d8a4:	4629      	mov	r1, r5
 800d8a6:	f7f2 fe4b 	bl	8000540 <__aeabi_dmul>
 800d8aa:	4682      	mov	sl, r0
 800d8ac:	468b      	mov	fp, r1
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	4620      	mov	r0, r4
 800d8b4:	4629      	mov	r1, r5
 800d8b6:	f7f2 fe43 	bl	8000540 <__aeabi_dmul>
 800d8ba:	a342      	add	r3, pc, #264	@ (adr r3, 800d9c4 <__kernel_sin+0x14c>)
 800d8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c0:	e9cd 0100 	strd	r0, r1, [sp]
 800d8c4:	4650      	mov	r0, sl
 800d8c6:	4659      	mov	r1, fp
 800d8c8:	f7f2 fe3a 	bl	8000540 <__aeabi_dmul>
 800d8cc:	a33f      	add	r3, pc, #252	@ (adr r3, 800d9cc <__kernel_sin+0x154>)
 800d8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d2:	f7f2 fc7d 	bl	80001d0 <__aeabi_dsub>
 800d8d6:	4652      	mov	r2, sl
 800d8d8:	465b      	mov	r3, fp
 800d8da:	f7f2 fe31 	bl	8000540 <__aeabi_dmul>
 800d8de:	a33d      	add	r3, pc, #244	@ (adr r3, 800d9d4 <__kernel_sin+0x15c>)
 800d8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e4:	f7f2 fc76 	bl	80001d4 <__adddf3>
 800d8e8:	4652      	mov	r2, sl
 800d8ea:	465b      	mov	r3, fp
 800d8ec:	f7f2 fe28 	bl	8000540 <__aeabi_dmul>
 800d8f0:	a33a      	add	r3, pc, #232	@ (adr r3, 800d9dc <__kernel_sin+0x164>)
 800d8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f6:	f7f2 fc6b 	bl	80001d0 <__aeabi_dsub>
 800d8fa:	4652      	mov	r2, sl
 800d8fc:	465b      	mov	r3, fp
 800d8fe:	f7f2 fe1f 	bl	8000540 <__aeabi_dmul>
 800d902:	a338      	add	r3, pc, #224	@ (adr r3, 800d9e4 <__kernel_sin+0x16c>)
 800d904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d908:	f7f2 fc64 	bl	80001d4 <__adddf3>
 800d90c:	4606      	mov	r6, r0
 800d90e:	460f      	mov	r7, r1
 800d910:	f1b8 0f00 	cmp.w	r8, #0
 800d914:	d11b      	bne.n	800d94e <__kernel_sin+0xd6>
 800d916:	4602      	mov	r2, r0
 800d918:	460b      	mov	r3, r1
 800d91a:	4650      	mov	r0, sl
 800d91c:	4659      	mov	r1, fp
 800d91e:	f7f2 fe0f 	bl	8000540 <__aeabi_dmul>
 800d922:	a325      	add	r3, pc, #148	@ (adr r3, 800d9b8 <__kernel_sin+0x140>)
 800d924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d928:	f7f2 fc52 	bl	80001d0 <__aeabi_dsub>
 800d92c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d930:	f7f2 fe06 	bl	8000540 <__aeabi_dmul>
 800d934:	4602      	mov	r2, r0
 800d936:	460b      	mov	r3, r1
 800d938:	4620      	mov	r0, r4
 800d93a:	4629      	mov	r1, r5
 800d93c:	f7f2 fc4a 	bl	80001d4 <__adddf3>
 800d940:	4604      	mov	r4, r0
 800d942:	460d      	mov	r5, r1
 800d944:	ec45 4b10 	vmov	d0, r4, r5
 800d948:	b005      	add	sp, #20
 800d94a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d94e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d952:	4b1b      	ldr	r3, [pc, #108]	@ (800d9c0 <__kernel_sin+0x148>)
 800d954:	2200      	movs	r2, #0
 800d956:	f7f2 fdf3 	bl	8000540 <__aeabi_dmul>
 800d95a:	4632      	mov	r2, r6
 800d95c:	4680      	mov	r8, r0
 800d95e:	4689      	mov	r9, r1
 800d960:	463b      	mov	r3, r7
 800d962:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d966:	f7f2 fdeb 	bl	8000540 <__aeabi_dmul>
 800d96a:	4602      	mov	r2, r0
 800d96c:	460b      	mov	r3, r1
 800d96e:	4640      	mov	r0, r8
 800d970:	4649      	mov	r1, r9
 800d972:	f7f2 fc2d 	bl	80001d0 <__aeabi_dsub>
 800d976:	4652      	mov	r2, sl
 800d978:	465b      	mov	r3, fp
 800d97a:	f7f2 fde1 	bl	8000540 <__aeabi_dmul>
 800d97e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d982:	f7f2 fc25 	bl	80001d0 <__aeabi_dsub>
 800d986:	a30c      	add	r3, pc, #48	@ (adr r3, 800d9b8 <__kernel_sin+0x140>)
 800d988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d98c:	4606      	mov	r6, r0
 800d98e:	460f      	mov	r7, r1
 800d990:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d994:	f7f2 fdd4 	bl	8000540 <__aeabi_dmul>
 800d998:	4602      	mov	r2, r0
 800d99a:	460b      	mov	r3, r1
 800d99c:	4630      	mov	r0, r6
 800d99e:	4639      	mov	r1, r7
 800d9a0:	f7f2 fc18 	bl	80001d4 <__adddf3>
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	460b      	mov	r3, r1
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	4629      	mov	r1, r5
 800d9ac:	f7f2 fc10 	bl	80001d0 <__aeabi_dsub>
 800d9b0:	e7c6      	b.n	800d940 <__kernel_sin+0xc8>
 800d9b2:	bf00      	nop
 800d9b4:	f3af 8000 	nop.w
 800d9b8:	55555549 	.word	0x55555549
 800d9bc:	3fc55555 	.word	0x3fc55555
 800d9c0:	3fe00000 	.word	0x3fe00000
 800d9c4:	5acfd57c 	.word	0x5acfd57c
 800d9c8:	3de5d93a 	.word	0x3de5d93a
 800d9cc:	8a2b9ceb 	.word	0x8a2b9ceb
 800d9d0:	3e5ae5e6 	.word	0x3e5ae5e6
 800d9d4:	57b1fe7d 	.word	0x57b1fe7d
 800d9d8:	3ec71de3 	.word	0x3ec71de3
 800d9dc:	19c161d5 	.word	0x19c161d5
 800d9e0:	3f2a01a0 	.word	0x3f2a01a0
 800d9e4:	1110f8a6 	.word	0x1110f8a6
 800d9e8:	3f811111 	.word	0x3f811111
 800d9ec:	00000000 	.word	0x00000000

0800d9f0 <__ieee754_atan2>:
 800d9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9f4:	ec57 6b11 	vmov	r6, r7, d1
 800d9f8:	4273      	negs	r3, r6
 800d9fa:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800db78 <__ieee754_atan2+0x188>
 800d9fe:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800da02:	4333      	orrs	r3, r6
 800da04:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800da08:	4543      	cmp	r3, r8
 800da0a:	ec51 0b10 	vmov	r0, r1, d0
 800da0e:	4635      	mov	r5, r6
 800da10:	d809      	bhi.n	800da26 <__ieee754_atan2+0x36>
 800da12:	4244      	negs	r4, r0
 800da14:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800da18:	4304      	orrs	r4, r0
 800da1a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800da1e:	4544      	cmp	r4, r8
 800da20:	468e      	mov	lr, r1
 800da22:	4681      	mov	r9, r0
 800da24:	d907      	bls.n	800da36 <__ieee754_atan2+0x46>
 800da26:	4632      	mov	r2, r6
 800da28:	463b      	mov	r3, r7
 800da2a:	f7f2 fbd3 	bl	80001d4 <__adddf3>
 800da2e:	ec41 0b10 	vmov	d0, r0, r1
 800da32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da36:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800da3a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800da3e:	4334      	orrs	r4, r6
 800da40:	d103      	bne.n	800da4a <__ieee754_atan2+0x5a>
 800da42:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da46:	f000 ba97 	b.w	800df78 <atan>
 800da4a:	17bc      	asrs	r4, r7, #30
 800da4c:	f004 0402 	and.w	r4, r4, #2
 800da50:	ea53 0909 	orrs.w	r9, r3, r9
 800da54:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800da58:	d107      	bne.n	800da6a <__ieee754_atan2+0x7a>
 800da5a:	2c02      	cmp	r4, #2
 800da5c:	d05f      	beq.n	800db1e <__ieee754_atan2+0x12e>
 800da5e:	2c03      	cmp	r4, #3
 800da60:	d1e5      	bne.n	800da2e <__ieee754_atan2+0x3e>
 800da62:	a141      	add	r1, pc, #260	@ (adr r1, 800db68 <__ieee754_atan2+0x178>)
 800da64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da68:	e7e1      	b.n	800da2e <__ieee754_atan2+0x3e>
 800da6a:	4315      	orrs	r5, r2
 800da6c:	d106      	bne.n	800da7c <__ieee754_atan2+0x8c>
 800da6e:	f1be 0f00 	cmp.w	lr, #0
 800da72:	da5f      	bge.n	800db34 <__ieee754_atan2+0x144>
 800da74:	a13e      	add	r1, pc, #248	@ (adr r1, 800db70 <__ieee754_atan2+0x180>)
 800da76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da7a:	e7d8      	b.n	800da2e <__ieee754_atan2+0x3e>
 800da7c:	4542      	cmp	r2, r8
 800da7e:	d10f      	bne.n	800daa0 <__ieee754_atan2+0xb0>
 800da80:	4293      	cmp	r3, r2
 800da82:	f104 34ff 	add.w	r4, r4, #4294967295
 800da86:	d107      	bne.n	800da98 <__ieee754_atan2+0xa8>
 800da88:	2c02      	cmp	r4, #2
 800da8a:	d84c      	bhi.n	800db26 <__ieee754_atan2+0x136>
 800da8c:	4b34      	ldr	r3, [pc, #208]	@ (800db60 <__ieee754_atan2+0x170>)
 800da8e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800da92:	e9d3 0100 	ldrd	r0, r1, [r3]
 800da96:	e7ca      	b.n	800da2e <__ieee754_atan2+0x3e>
 800da98:	2c02      	cmp	r4, #2
 800da9a:	d848      	bhi.n	800db2e <__ieee754_atan2+0x13e>
 800da9c:	4b31      	ldr	r3, [pc, #196]	@ (800db64 <__ieee754_atan2+0x174>)
 800da9e:	e7f6      	b.n	800da8e <__ieee754_atan2+0x9e>
 800daa0:	4543      	cmp	r3, r8
 800daa2:	d0e4      	beq.n	800da6e <__ieee754_atan2+0x7e>
 800daa4:	1a9b      	subs	r3, r3, r2
 800daa6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800daaa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800daae:	da1e      	bge.n	800daee <__ieee754_atan2+0xfe>
 800dab0:	2f00      	cmp	r7, #0
 800dab2:	da01      	bge.n	800dab8 <__ieee754_atan2+0xc8>
 800dab4:	323c      	adds	r2, #60	@ 0x3c
 800dab6:	db1e      	blt.n	800daf6 <__ieee754_atan2+0x106>
 800dab8:	4632      	mov	r2, r6
 800daba:	463b      	mov	r3, r7
 800dabc:	f7f2 fe6a 	bl	8000794 <__aeabi_ddiv>
 800dac0:	ec41 0b10 	vmov	d0, r0, r1
 800dac4:	f000 fbf0 	bl	800e2a8 <fabs>
 800dac8:	f000 fa56 	bl	800df78 <atan>
 800dacc:	ec51 0b10 	vmov	r0, r1, d0
 800dad0:	2c01      	cmp	r4, #1
 800dad2:	d013      	beq.n	800dafc <__ieee754_atan2+0x10c>
 800dad4:	2c02      	cmp	r4, #2
 800dad6:	d015      	beq.n	800db04 <__ieee754_atan2+0x114>
 800dad8:	2c00      	cmp	r4, #0
 800dada:	d0a8      	beq.n	800da2e <__ieee754_atan2+0x3e>
 800dadc:	a318      	add	r3, pc, #96	@ (adr r3, 800db40 <__ieee754_atan2+0x150>)
 800dade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae2:	f7f2 fb75 	bl	80001d0 <__aeabi_dsub>
 800dae6:	a318      	add	r3, pc, #96	@ (adr r3, 800db48 <__ieee754_atan2+0x158>)
 800dae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daec:	e014      	b.n	800db18 <__ieee754_atan2+0x128>
 800daee:	a118      	add	r1, pc, #96	@ (adr r1, 800db50 <__ieee754_atan2+0x160>)
 800daf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800daf4:	e7ec      	b.n	800dad0 <__ieee754_atan2+0xe0>
 800daf6:	2000      	movs	r0, #0
 800daf8:	2100      	movs	r1, #0
 800dafa:	e7e9      	b.n	800dad0 <__ieee754_atan2+0xe0>
 800dafc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800db00:	4619      	mov	r1, r3
 800db02:	e794      	b.n	800da2e <__ieee754_atan2+0x3e>
 800db04:	a30e      	add	r3, pc, #56	@ (adr r3, 800db40 <__ieee754_atan2+0x150>)
 800db06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db0a:	f7f2 fb61 	bl	80001d0 <__aeabi_dsub>
 800db0e:	4602      	mov	r2, r0
 800db10:	460b      	mov	r3, r1
 800db12:	a10d      	add	r1, pc, #52	@ (adr r1, 800db48 <__ieee754_atan2+0x158>)
 800db14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db18:	f7f2 fb5a 	bl	80001d0 <__aeabi_dsub>
 800db1c:	e787      	b.n	800da2e <__ieee754_atan2+0x3e>
 800db1e:	a10a      	add	r1, pc, #40	@ (adr r1, 800db48 <__ieee754_atan2+0x158>)
 800db20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db24:	e783      	b.n	800da2e <__ieee754_atan2+0x3e>
 800db26:	a10c      	add	r1, pc, #48	@ (adr r1, 800db58 <__ieee754_atan2+0x168>)
 800db28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db2c:	e77f      	b.n	800da2e <__ieee754_atan2+0x3e>
 800db2e:	2000      	movs	r0, #0
 800db30:	2100      	movs	r1, #0
 800db32:	e77c      	b.n	800da2e <__ieee754_atan2+0x3e>
 800db34:	a106      	add	r1, pc, #24	@ (adr r1, 800db50 <__ieee754_atan2+0x160>)
 800db36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db3a:	e778      	b.n	800da2e <__ieee754_atan2+0x3e>
 800db3c:	f3af 8000 	nop.w
 800db40:	33145c07 	.word	0x33145c07
 800db44:	3ca1a626 	.word	0x3ca1a626
 800db48:	54442d18 	.word	0x54442d18
 800db4c:	400921fb 	.word	0x400921fb
 800db50:	54442d18 	.word	0x54442d18
 800db54:	3ff921fb 	.word	0x3ff921fb
 800db58:	54442d18 	.word	0x54442d18
 800db5c:	3fe921fb 	.word	0x3fe921fb
 800db60:	0800ec28 	.word	0x0800ec28
 800db64:	0800ec10 	.word	0x0800ec10
 800db68:	54442d18 	.word	0x54442d18
 800db6c:	c00921fb 	.word	0xc00921fb
 800db70:	54442d18 	.word	0x54442d18
 800db74:	bff921fb 	.word	0xbff921fb
 800db78:	7ff00000 	.word	0x7ff00000
 800db7c:	00000000 	.word	0x00000000

0800db80 <__ieee754_rem_pio2>:
 800db80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db84:	ec57 6b10 	vmov	r6, r7, d0
 800db88:	4bc5      	ldr	r3, [pc, #788]	@ (800dea0 <__ieee754_rem_pio2+0x320>)
 800db8a:	b08d      	sub	sp, #52	@ 0x34
 800db8c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800db90:	4598      	cmp	r8, r3
 800db92:	4604      	mov	r4, r0
 800db94:	9704      	str	r7, [sp, #16]
 800db96:	d807      	bhi.n	800dba8 <__ieee754_rem_pio2+0x28>
 800db98:	2200      	movs	r2, #0
 800db9a:	2300      	movs	r3, #0
 800db9c:	ed80 0b00 	vstr	d0, [r0]
 800dba0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dba4:	2500      	movs	r5, #0
 800dba6:	e028      	b.n	800dbfa <__ieee754_rem_pio2+0x7a>
 800dba8:	4bbe      	ldr	r3, [pc, #760]	@ (800dea4 <__ieee754_rem_pio2+0x324>)
 800dbaa:	4598      	cmp	r8, r3
 800dbac:	d878      	bhi.n	800dca0 <__ieee754_rem_pio2+0x120>
 800dbae:	9b04      	ldr	r3, [sp, #16]
 800dbb0:	4dbd      	ldr	r5, [pc, #756]	@ (800dea8 <__ieee754_rem_pio2+0x328>)
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	4630      	mov	r0, r6
 800dbb6:	a3ac      	add	r3, pc, #688	@ (adr r3, 800de68 <__ieee754_rem_pio2+0x2e8>)
 800dbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbbc:	4639      	mov	r1, r7
 800dbbe:	dd38      	ble.n	800dc32 <__ieee754_rem_pio2+0xb2>
 800dbc0:	f7f2 fb06 	bl	80001d0 <__aeabi_dsub>
 800dbc4:	45a8      	cmp	r8, r5
 800dbc6:	4606      	mov	r6, r0
 800dbc8:	460f      	mov	r7, r1
 800dbca:	d01a      	beq.n	800dc02 <__ieee754_rem_pio2+0x82>
 800dbcc:	a3a8      	add	r3, pc, #672	@ (adr r3, 800de70 <__ieee754_rem_pio2+0x2f0>)
 800dbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd2:	f7f2 fafd 	bl	80001d0 <__aeabi_dsub>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	460b      	mov	r3, r1
 800dbda:	4680      	mov	r8, r0
 800dbdc:	4689      	mov	r9, r1
 800dbde:	4630      	mov	r0, r6
 800dbe0:	4639      	mov	r1, r7
 800dbe2:	f7f2 faf5 	bl	80001d0 <__aeabi_dsub>
 800dbe6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800de70 <__ieee754_rem_pio2+0x2f0>)
 800dbe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbec:	f7f2 faf0 	bl	80001d0 <__aeabi_dsub>
 800dbf0:	e9c4 8900 	strd	r8, r9, [r4]
 800dbf4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dbf8:	2501      	movs	r5, #1
 800dbfa:	4628      	mov	r0, r5
 800dbfc:	b00d      	add	sp, #52	@ 0x34
 800dbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc02:	a39d      	add	r3, pc, #628	@ (adr r3, 800de78 <__ieee754_rem_pio2+0x2f8>)
 800dc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc08:	f7f2 fae2 	bl	80001d0 <__aeabi_dsub>
 800dc0c:	a39c      	add	r3, pc, #624	@ (adr r3, 800de80 <__ieee754_rem_pio2+0x300>)
 800dc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc12:	4606      	mov	r6, r0
 800dc14:	460f      	mov	r7, r1
 800dc16:	f7f2 fadb 	bl	80001d0 <__aeabi_dsub>
 800dc1a:	4602      	mov	r2, r0
 800dc1c:	460b      	mov	r3, r1
 800dc1e:	4680      	mov	r8, r0
 800dc20:	4689      	mov	r9, r1
 800dc22:	4630      	mov	r0, r6
 800dc24:	4639      	mov	r1, r7
 800dc26:	f7f2 fad3 	bl	80001d0 <__aeabi_dsub>
 800dc2a:	a395      	add	r3, pc, #596	@ (adr r3, 800de80 <__ieee754_rem_pio2+0x300>)
 800dc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc30:	e7dc      	b.n	800dbec <__ieee754_rem_pio2+0x6c>
 800dc32:	f7f2 facf 	bl	80001d4 <__adddf3>
 800dc36:	45a8      	cmp	r8, r5
 800dc38:	4606      	mov	r6, r0
 800dc3a:	460f      	mov	r7, r1
 800dc3c:	d018      	beq.n	800dc70 <__ieee754_rem_pio2+0xf0>
 800dc3e:	a38c      	add	r3, pc, #560	@ (adr r3, 800de70 <__ieee754_rem_pio2+0x2f0>)
 800dc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc44:	f7f2 fac6 	bl	80001d4 <__adddf3>
 800dc48:	4602      	mov	r2, r0
 800dc4a:	460b      	mov	r3, r1
 800dc4c:	4680      	mov	r8, r0
 800dc4e:	4689      	mov	r9, r1
 800dc50:	4630      	mov	r0, r6
 800dc52:	4639      	mov	r1, r7
 800dc54:	f7f2 fabc 	bl	80001d0 <__aeabi_dsub>
 800dc58:	a385      	add	r3, pc, #532	@ (adr r3, 800de70 <__ieee754_rem_pio2+0x2f0>)
 800dc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5e:	f7f2 fab9 	bl	80001d4 <__adddf3>
 800dc62:	f04f 35ff 	mov.w	r5, #4294967295
 800dc66:	e9c4 8900 	strd	r8, r9, [r4]
 800dc6a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dc6e:	e7c4      	b.n	800dbfa <__ieee754_rem_pio2+0x7a>
 800dc70:	a381      	add	r3, pc, #516	@ (adr r3, 800de78 <__ieee754_rem_pio2+0x2f8>)
 800dc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc76:	f7f2 faad 	bl	80001d4 <__adddf3>
 800dc7a:	a381      	add	r3, pc, #516	@ (adr r3, 800de80 <__ieee754_rem_pio2+0x300>)
 800dc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc80:	4606      	mov	r6, r0
 800dc82:	460f      	mov	r7, r1
 800dc84:	f7f2 faa6 	bl	80001d4 <__adddf3>
 800dc88:	4602      	mov	r2, r0
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	4680      	mov	r8, r0
 800dc8e:	4689      	mov	r9, r1
 800dc90:	4630      	mov	r0, r6
 800dc92:	4639      	mov	r1, r7
 800dc94:	f7f2 fa9c 	bl	80001d0 <__aeabi_dsub>
 800dc98:	a379      	add	r3, pc, #484	@ (adr r3, 800de80 <__ieee754_rem_pio2+0x300>)
 800dc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc9e:	e7de      	b.n	800dc5e <__ieee754_rem_pio2+0xde>
 800dca0:	4b82      	ldr	r3, [pc, #520]	@ (800deac <__ieee754_rem_pio2+0x32c>)
 800dca2:	4598      	cmp	r8, r3
 800dca4:	f200 80d1 	bhi.w	800de4a <__ieee754_rem_pio2+0x2ca>
 800dca8:	f000 fafe 	bl	800e2a8 <fabs>
 800dcac:	ec57 6b10 	vmov	r6, r7, d0
 800dcb0:	a375      	add	r3, pc, #468	@ (adr r3, 800de88 <__ieee754_rem_pio2+0x308>)
 800dcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	4639      	mov	r1, r7
 800dcba:	f7f2 fc41 	bl	8000540 <__aeabi_dmul>
 800dcbe:	4b7c      	ldr	r3, [pc, #496]	@ (800deb0 <__ieee754_rem_pio2+0x330>)
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	f7f2 fa87 	bl	80001d4 <__adddf3>
 800dcc6:	f7f2 feeb 	bl	8000aa0 <__aeabi_d2iz>
 800dcca:	4605      	mov	r5, r0
 800dccc:	f7f2 fbce 	bl	800046c <__aeabi_i2d>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	460b      	mov	r3, r1
 800dcd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dcd8:	a363      	add	r3, pc, #396	@ (adr r3, 800de68 <__ieee754_rem_pio2+0x2e8>)
 800dcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcde:	f7f2 fc2f 	bl	8000540 <__aeabi_dmul>
 800dce2:	4602      	mov	r2, r0
 800dce4:	460b      	mov	r3, r1
 800dce6:	4630      	mov	r0, r6
 800dce8:	4639      	mov	r1, r7
 800dcea:	f7f2 fa71 	bl	80001d0 <__aeabi_dsub>
 800dcee:	a360      	add	r3, pc, #384	@ (adr r3, 800de70 <__ieee754_rem_pio2+0x2f0>)
 800dcf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf4:	4682      	mov	sl, r0
 800dcf6:	468b      	mov	fp, r1
 800dcf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcfc:	f7f2 fc20 	bl	8000540 <__aeabi_dmul>
 800dd00:	2d1f      	cmp	r5, #31
 800dd02:	4606      	mov	r6, r0
 800dd04:	460f      	mov	r7, r1
 800dd06:	dc0c      	bgt.n	800dd22 <__ieee754_rem_pio2+0x1a2>
 800dd08:	4b6a      	ldr	r3, [pc, #424]	@ (800deb4 <__ieee754_rem_pio2+0x334>)
 800dd0a:	1e6a      	subs	r2, r5, #1
 800dd0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd10:	4543      	cmp	r3, r8
 800dd12:	d006      	beq.n	800dd22 <__ieee754_rem_pio2+0x1a2>
 800dd14:	4632      	mov	r2, r6
 800dd16:	463b      	mov	r3, r7
 800dd18:	4650      	mov	r0, sl
 800dd1a:	4659      	mov	r1, fp
 800dd1c:	f7f2 fa58 	bl	80001d0 <__aeabi_dsub>
 800dd20:	e00e      	b.n	800dd40 <__ieee754_rem_pio2+0x1c0>
 800dd22:	463b      	mov	r3, r7
 800dd24:	4632      	mov	r2, r6
 800dd26:	4650      	mov	r0, sl
 800dd28:	4659      	mov	r1, fp
 800dd2a:	f7f2 fa51 	bl	80001d0 <__aeabi_dsub>
 800dd2e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800dd32:	9305      	str	r3, [sp, #20]
 800dd34:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800dd38:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800dd3c:	2b10      	cmp	r3, #16
 800dd3e:	dc02      	bgt.n	800dd46 <__ieee754_rem_pio2+0x1c6>
 800dd40:	e9c4 0100 	strd	r0, r1, [r4]
 800dd44:	e039      	b.n	800ddba <__ieee754_rem_pio2+0x23a>
 800dd46:	a34c      	add	r3, pc, #304	@ (adr r3, 800de78 <__ieee754_rem_pio2+0x2f8>)
 800dd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd50:	f7f2 fbf6 	bl	8000540 <__aeabi_dmul>
 800dd54:	4606      	mov	r6, r0
 800dd56:	460f      	mov	r7, r1
 800dd58:	4602      	mov	r2, r0
 800dd5a:	460b      	mov	r3, r1
 800dd5c:	4650      	mov	r0, sl
 800dd5e:	4659      	mov	r1, fp
 800dd60:	f7f2 fa36 	bl	80001d0 <__aeabi_dsub>
 800dd64:	4602      	mov	r2, r0
 800dd66:	460b      	mov	r3, r1
 800dd68:	4680      	mov	r8, r0
 800dd6a:	4689      	mov	r9, r1
 800dd6c:	4650      	mov	r0, sl
 800dd6e:	4659      	mov	r1, fp
 800dd70:	f7f2 fa2e 	bl	80001d0 <__aeabi_dsub>
 800dd74:	4632      	mov	r2, r6
 800dd76:	463b      	mov	r3, r7
 800dd78:	f7f2 fa2a 	bl	80001d0 <__aeabi_dsub>
 800dd7c:	a340      	add	r3, pc, #256	@ (adr r3, 800de80 <__ieee754_rem_pio2+0x300>)
 800dd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd82:	4606      	mov	r6, r0
 800dd84:	460f      	mov	r7, r1
 800dd86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd8a:	f7f2 fbd9 	bl	8000540 <__aeabi_dmul>
 800dd8e:	4632      	mov	r2, r6
 800dd90:	463b      	mov	r3, r7
 800dd92:	f7f2 fa1d 	bl	80001d0 <__aeabi_dsub>
 800dd96:	4602      	mov	r2, r0
 800dd98:	460b      	mov	r3, r1
 800dd9a:	4606      	mov	r6, r0
 800dd9c:	460f      	mov	r7, r1
 800dd9e:	4640      	mov	r0, r8
 800dda0:	4649      	mov	r1, r9
 800dda2:	f7f2 fa15 	bl	80001d0 <__aeabi_dsub>
 800dda6:	9a05      	ldr	r2, [sp, #20]
 800dda8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ddac:	1ad3      	subs	r3, r2, r3
 800ddae:	2b31      	cmp	r3, #49	@ 0x31
 800ddb0:	dc20      	bgt.n	800ddf4 <__ieee754_rem_pio2+0x274>
 800ddb2:	e9c4 0100 	strd	r0, r1, [r4]
 800ddb6:	46c2      	mov	sl, r8
 800ddb8:	46cb      	mov	fp, r9
 800ddba:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ddbe:	4650      	mov	r0, sl
 800ddc0:	4642      	mov	r2, r8
 800ddc2:	464b      	mov	r3, r9
 800ddc4:	4659      	mov	r1, fp
 800ddc6:	f7f2 fa03 	bl	80001d0 <__aeabi_dsub>
 800ddca:	463b      	mov	r3, r7
 800ddcc:	4632      	mov	r2, r6
 800ddce:	f7f2 f9ff 	bl	80001d0 <__aeabi_dsub>
 800ddd2:	9b04      	ldr	r3, [sp, #16]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ddda:	f6bf af0e 	bge.w	800dbfa <__ieee754_rem_pio2+0x7a>
 800ddde:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800dde2:	6063      	str	r3, [r4, #4]
 800dde4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dde8:	f8c4 8000 	str.w	r8, [r4]
 800ddec:	60a0      	str	r0, [r4, #8]
 800ddee:	60e3      	str	r3, [r4, #12]
 800ddf0:	426d      	negs	r5, r5
 800ddf2:	e702      	b.n	800dbfa <__ieee754_rem_pio2+0x7a>
 800ddf4:	a326      	add	r3, pc, #152	@ (adr r3, 800de90 <__ieee754_rem_pio2+0x310>)
 800ddf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddfe:	f7f2 fb9f 	bl	8000540 <__aeabi_dmul>
 800de02:	4606      	mov	r6, r0
 800de04:	460f      	mov	r7, r1
 800de06:	4602      	mov	r2, r0
 800de08:	460b      	mov	r3, r1
 800de0a:	4640      	mov	r0, r8
 800de0c:	4649      	mov	r1, r9
 800de0e:	f7f2 f9df 	bl	80001d0 <__aeabi_dsub>
 800de12:	4602      	mov	r2, r0
 800de14:	460b      	mov	r3, r1
 800de16:	4682      	mov	sl, r0
 800de18:	468b      	mov	fp, r1
 800de1a:	4640      	mov	r0, r8
 800de1c:	4649      	mov	r1, r9
 800de1e:	f7f2 f9d7 	bl	80001d0 <__aeabi_dsub>
 800de22:	4632      	mov	r2, r6
 800de24:	463b      	mov	r3, r7
 800de26:	f7f2 f9d3 	bl	80001d0 <__aeabi_dsub>
 800de2a:	a31b      	add	r3, pc, #108	@ (adr r3, 800de98 <__ieee754_rem_pio2+0x318>)
 800de2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de30:	4606      	mov	r6, r0
 800de32:	460f      	mov	r7, r1
 800de34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de38:	f7f2 fb82 	bl	8000540 <__aeabi_dmul>
 800de3c:	4632      	mov	r2, r6
 800de3e:	463b      	mov	r3, r7
 800de40:	f7f2 f9c6 	bl	80001d0 <__aeabi_dsub>
 800de44:	4606      	mov	r6, r0
 800de46:	460f      	mov	r7, r1
 800de48:	e764      	b.n	800dd14 <__ieee754_rem_pio2+0x194>
 800de4a:	4b1b      	ldr	r3, [pc, #108]	@ (800deb8 <__ieee754_rem_pio2+0x338>)
 800de4c:	4598      	cmp	r8, r3
 800de4e:	d935      	bls.n	800debc <__ieee754_rem_pio2+0x33c>
 800de50:	4632      	mov	r2, r6
 800de52:	463b      	mov	r3, r7
 800de54:	4630      	mov	r0, r6
 800de56:	4639      	mov	r1, r7
 800de58:	f7f2 f9ba 	bl	80001d0 <__aeabi_dsub>
 800de5c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800de60:	e9c4 0100 	strd	r0, r1, [r4]
 800de64:	e69e      	b.n	800dba4 <__ieee754_rem_pio2+0x24>
 800de66:	bf00      	nop
 800de68:	54400000 	.word	0x54400000
 800de6c:	3ff921fb 	.word	0x3ff921fb
 800de70:	1a626331 	.word	0x1a626331
 800de74:	3dd0b461 	.word	0x3dd0b461
 800de78:	1a600000 	.word	0x1a600000
 800de7c:	3dd0b461 	.word	0x3dd0b461
 800de80:	2e037073 	.word	0x2e037073
 800de84:	3ba3198a 	.word	0x3ba3198a
 800de88:	6dc9c883 	.word	0x6dc9c883
 800de8c:	3fe45f30 	.word	0x3fe45f30
 800de90:	2e000000 	.word	0x2e000000
 800de94:	3ba3198a 	.word	0x3ba3198a
 800de98:	252049c1 	.word	0x252049c1
 800de9c:	397b839a 	.word	0x397b839a
 800dea0:	3fe921fb 	.word	0x3fe921fb
 800dea4:	4002d97b 	.word	0x4002d97b
 800dea8:	3ff921fb 	.word	0x3ff921fb
 800deac:	413921fb 	.word	0x413921fb
 800deb0:	3fe00000 	.word	0x3fe00000
 800deb4:	0800ec40 	.word	0x0800ec40
 800deb8:	7fefffff 	.word	0x7fefffff
 800debc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800dec0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800dec4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800dec8:	4630      	mov	r0, r6
 800deca:	460f      	mov	r7, r1
 800decc:	f7f2 fde8 	bl	8000aa0 <__aeabi_d2iz>
 800ded0:	f7f2 facc 	bl	800046c <__aeabi_i2d>
 800ded4:	4602      	mov	r2, r0
 800ded6:	460b      	mov	r3, r1
 800ded8:	4630      	mov	r0, r6
 800deda:	4639      	mov	r1, r7
 800dedc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dee0:	f7f2 f976 	bl	80001d0 <__aeabi_dsub>
 800dee4:	4b22      	ldr	r3, [pc, #136]	@ (800df70 <__ieee754_rem_pio2+0x3f0>)
 800dee6:	2200      	movs	r2, #0
 800dee8:	f7f2 fb2a 	bl	8000540 <__aeabi_dmul>
 800deec:	460f      	mov	r7, r1
 800deee:	4606      	mov	r6, r0
 800def0:	f7f2 fdd6 	bl	8000aa0 <__aeabi_d2iz>
 800def4:	f7f2 faba 	bl	800046c <__aeabi_i2d>
 800def8:	4602      	mov	r2, r0
 800defa:	460b      	mov	r3, r1
 800defc:	4630      	mov	r0, r6
 800defe:	4639      	mov	r1, r7
 800df00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800df04:	f7f2 f964 	bl	80001d0 <__aeabi_dsub>
 800df08:	4b19      	ldr	r3, [pc, #100]	@ (800df70 <__ieee754_rem_pio2+0x3f0>)
 800df0a:	2200      	movs	r2, #0
 800df0c:	f7f2 fb18 	bl	8000540 <__aeabi_dmul>
 800df10:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800df14:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800df18:	f04f 0803 	mov.w	r8, #3
 800df1c:	2600      	movs	r6, #0
 800df1e:	2700      	movs	r7, #0
 800df20:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800df24:	4632      	mov	r2, r6
 800df26:	463b      	mov	r3, r7
 800df28:	46c2      	mov	sl, r8
 800df2a:	f108 38ff 	add.w	r8, r8, #4294967295
 800df2e:	f7f2 fd6f 	bl	8000a10 <__aeabi_dcmpeq>
 800df32:	2800      	cmp	r0, #0
 800df34:	d1f4      	bne.n	800df20 <__ieee754_rem_pio2+0x3a0>
 800df36:	4b0f      	ldr	r3, [pc, #60]	@ (800df74 <__ieee754_rem_pio2+0x3f4>)
 800df38:	9301      	str	r3, [sp, #4]
 800df3a:	2302      	movs	r3, #2
 800df3c:	9300      	str	r3, [sp, #0]
 800df3e:	462a      	mov	r2, r5
 800df40:	4653      	mov	r3, sl
 800df42:	4621      	mov	r1, r4
 800df44:	a806      	add	r0, sp, #24
 800df46:	f000 f9b7 	bl	800e2b8 <__kernel_rem_pio2>
 800df4a:	9b04      	ldr	r3, [sp, #16]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	4605      	mov	r5, r0
 800df50:	f6bf ae53 	bge.w	800dbfa <__ieee754_rem_pio2+0x7a>
 800df54:	e9d4 2100 	ldrd	r2, r1, [r4]
 800df58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800df5c:	e9c4 2300 	strd	r2, r3, [r4]
 800df60:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800df64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800df68:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800df6c:	e740      	b.n	800ddf0 <__ieee754_rem_pio2+0x270>
 800df6e:	bf00      	nop
 800df70:	41700000 	.word	0x41700000
 800df74:	0800ecc0 	.word	0x0800ecc0

0800df78 <atan>:
 800df78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df7c:	ec55 4b10 	vmov	r4, r5, d0
 800df80:	4bbf      	ldr	r3, [pc, #764]	@ (800e280 <atan+0x308>)
 800df82:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800df86:	429e      	cmp	r6, r3
 800df88:	46ab      	mov	fp, r5
 800df8a:	d918      	bls.n	800dfbe <atan+0x46>
 800df8c:	4bbd      	ldr	r3, [pc, #756]	@ (800e284 <atan+0x30c>)
 800df8e:	429e      	cmp	r6, r3
 800df90:	d801      	bhi.n	800df96 <atan+0x1e>
 800df92:	d109      	bne.n	800dfa8 <atan+0x30>
 800df94:	b144      	cbz	r4, 800dfa8 <atan+0x30>
 800df96:	4622      	mov	r2, r4
 800df98:	462b      	mov	r3, r5
 800df9a:	4620      	mov	r0, r4
 800df9c:	4629      	mov	r1, r5
 800df9e:	f7f2 f919 	bl	80001d4 <__adddf3>
 800dfa2:	4604      	mov	r4, r0
 800dfa4:	460d      	mov	r5, r1
 800dfa6:	e006      	b.n	800dfb6 <atan+0x3e>
 800dfa8:	f1bb 0f00 	cmp.w	fp, #0
 800dfac:	f340 812b 	ble.w	800e206 <atan+0x28e>
 800dfb0:	a597      	add	r5, pc, #604	@ (adr r5, 800e210 <atan+0x298>)
 800dfb2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dfb6:	ec45 4b10 	vmov	d0, r4, r5
 800dfba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfbe:	4bb2      	ldr	r3, [pc, #712]	@ (800e288 <atan+0x310>)
 800dfc0:	429e      	cmp	r6, r3
 800dfc2:	d813      	bhi.n	800dfec <atan+0x74>
 800dfc4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800dfc8:	429e      	cmp	r6, r3
 800dfca:	d80c      	bhi.n	800dfe6 <atan+0x6e>
 800dfcc:	a392      	add	r3, pc, #584	@ (adr r3, 800e218 <atan+0x2a0>)
 800dfce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd2:	4620      	mov	r0, r4
 800dfd4:	4629      	mov	r1, r5
 800dfd6:	f7f2 f8fd 	bl	80001d4 <__adddf3>
 800dfda:	4bac      	ldr	r3, [pc, #688]	@ (800e28c <atan+0x314>)
 800dfdc:	2200      	movs	r2, #0
 800dfde:	f7f2 fd3f 	bl	8000a60 <__aeabi_dcmpgt>
 800dfe2:	2800      	cmp	r0, #0
 800dfe4:	d1e7      	bne.n	800dfb6 <atan+0x3e>
 800dfe6:	f04f 3aff 	mov.w	sl, #4294967295
 800dfea:	e029      	b.n	800e040 <atan+0xc8>
 800dfec:	f000 f95c 	bl	800e2a8 <fabs>
 800dff0:	4ba7      	ldr	r3, [pc, #668]	@ (800e290 <atan+0x318>)
 800dff2:	429e      	cmp	r6, r3
 800dff4:	ec55 4b10 	vmov	r4, r5, d0
 800dff8:	f200 80bc 	bhi.w	800e174 <atan+0x1fc>
 800dffc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800e000:	429e      	cmp	r6, r3
 800e002:	f200 809e 	bhi.w	800e142 <atan+0x1ca>
 800e006:	4622      	mov	r2, r4
 800e008:	462b      	mov	r3, r5
 800e00a:	4620      	mov	r0, r4
 800e00c:	4629      	mov	r1, r5
 800e00e:	f7f2 f8e1 	bl	80001d4 <__adddf3>
 800e012:	4b9e      	ldr	r3, [pc, #632]	@ (800e28c <atan+0x314>)
 800e014:	2200      	movs	r2, #0
 800e016:	f7f2 f8db 	bl	80001d0 <__aeabi_dsub>
 800e01a:	2200      	movs	r2, #0
 800e01c:	4606      	mov	r6, r0
 800e01e:	460f      	mov	r7, r1
 800e020:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e024:	4620      	mov	r0, r4
 800e026:	4629      	mov	r1, r5
 800e028:	f7f2 f8d4 	bl	80001d4 <__adddf3>
 800e02c:	4602      	mov	r2, r0
 800e02e:	460b      	mov	r3, r1
 800e030:	4630      	mov	r0, r6
 800e032:	4639      	mov	r1, r7
 800e034:	f7f2 fbae 	bl	8000794 <__aeabi_ddiv>
 800e038:	f04f 0a00 	mov.w	sl, #0
 800e03c:	4604      	mov	r4, r0
 800e03e:	460d      	mov	r5, r1
 800e040:	4622      	mov	r2, r4
 800e042:	462b      	mov	r3, r5
 800e044:	4620      	mov	r0, r4
 800e046:	4629      	mov	r1, r5
 800e048:	f7f2 fa7a 	bl	8000540 <__aeabi_dmul>
 800e04c:	4602      	mov	r2, r0
 800e04e:	460b      	mov	r3, r1
 800e050:	4680      	mov	r8, r0
 800e052:	4689      	mov	r9, r1
 800e054:	f7f2 fa74 	bl	8000540 <__aeabi_dmul>
 800e058:	a371      	add	r3, pc, #452	@ (adr r3, 800e220 <atan+0x2a8>)
 800e05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e05e:	4606      	mov	r6, r0
 800e060:	460f      	mov	r7, r1
 800e062:	f7f2 fa6d 	bl	8000540 <__aeabi_dmul>
 800e066:	a370      	add	r3, pc, #448	@ (adr r3, 800e228 <atan+0x2b0>)
 800e068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e06c:	f7f2 f8b2 	bl	80001d4 <__adddf3>
 800e070:	4632      	mov	r2, r6
 800e072:	463b      	mov	r3, r7
 800e074:	f7f2 fa64 	bl	8000540 <__aeabi_dmul>
 800e078:	a36d      	add	r3, pc, #436	@ (adr r3, 800e230 <atan+0x2b8>)
 800e07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07e:	f7f2 f8a9 	bl	80001d4 <__adddf3>
 800e082:	4632      	mov	r2, r6
 800e084:	463b      	mov	r3, r7
 800e086:	f7f2 fa5b 	bl	8000540 <__aeabi_dmul>
 800e08a:	a36b      	add	r3, pc, #428	@ (adr r3, 800e238 <atan+0x2c0>)
 800e08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e090:	f7f2 f8a0 	bl	80001d4 <__adddf3>
 800e094:	4632      	mov	r2, r6
 800e096:	463b      	mov	r3, r7
 800e098:	f7f2 fa52 	bl	8000540 <__aeabi_dmul>
 800e09c:	a368      	add	r3, pc, #416	@ (adr r3, 800e240 <atan+0x2c8>)
 800e09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0a2:	f7f2 f897 	bl	80001d4 <__adddf3>
 800e0a6:	4632      	mov	r2, r6
 800e0a8:	463b      	mov	r3, r7
 800e0aa:	f7f2 fa49 	bl	8000540 <__aeabi_dmul>
 800e0ae:	a366      	add	r3, pc, #408	@ (adr r3, 800e248 <atan+0x2d0>)
 800e0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b4:	f7f2 f88e 	bl	80001d4 <__adddf3>
 800e0b8:	4642      	mov	r2, r8
 800e0ba:	464b      	mov	r3, r9
 800e0bc:	f7f2 fa40 	bl	8000540 <__aeabi_dmul>
 800e0c0:	a363      	add	r3, pc, #396	@ (adr r3, 800e250 <atan+0x2d8>)
 800e0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c6:	4680      	mov	r8, r0
 800e0c8:	4689      	mov	r9, r1
 800e0ca:	4630      	mov	r0, r6
 800e0cc:	4639      	mov	r1, r7
 800e0ce:	f7f2 fa37 	bl	8000540 <__aeabi_dmul>
 800e0d2:	a361      	add	r3, pc, #388	@ (adr r3, 800e258 <atan+0x2e0>)
 800e0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d8:	f7f2 f87a 	bl	80001d0 <__aeabi_dsub>
 800e0dc:	4632      	mov	r2, r6
 800e0de:	463b      	mov	r3, r7
 800e0e0:	f7f2 fa2e 	bl	8000540 <__aeabi_dmul>
 800e0e4:	a35e      	add	r3, pc, #376	@ (adr r3, 800e260 <atan+0x2e8>)
 800e0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ea:	f7f2 f871 	bl	80001d0 <__aeabi_dsub>
 800e0ee:	4632      	mov	r2, r6
 800e0f0:	463b      	mov	r3, r7
 800e0f2:	f7f2 fa25 	bl	8000540 <__aeabi_dmul>
 800e0f6:	a35c      	add	r3, pc, #368	@ (adr r3, 800e268 <atan+0x2f0>)
 800e0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0fc:	f7f2 f868 	bl	80001d0 <__aeabi_dsub>
 800e100:	4632      	mov	r2, r6
 800e102:	463b      	mov	r3, r7
 800e104:	f7f2 fa1c 	bl	8000540 <__aeabi_dmul>
 800e108:	a359      	add	r3, pc, #356	@ (adr r3, 800e270 <atan+0x2f8>)
 800e10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10e:	f7f2 f85f 	bl	80001d0 <__aeabi_dsub>
 800e112:	4632      	mov	r2, r6
 800e114:	463b      	mov	r3, r7
 800e116:	f7f2 fa13 	bl	8000540 <__aeabi_dmul>
 800e11a:	4602      	mov	r2, r0
 800e11c:	460b      	mov	r3, r1
 800e11e:	4640      	mov	r0, r8
 800e120:	4649      	mov	r1, r9
 800e122:	f7f2 f857 	bl	80001d4 <__adddf3>
 800e126:	4622      	mov	r2, r4
 800e128:	462b      	mov	r3, r5
 800e12a:	f7f2 fa09 	bl	8000540 <__aeabi_dmul>
 800e12e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e132:	4602      	mov	r2, r0
 800e134:	460b      	mov	r3, r1
 800e136:	d148      	bne.n	800e1ca <atan+0x252>
 800e138:	4620      	mov	r0, r4
 800e13a:	4629      	mov	r1, r5
 800e13c:	f7f2 f848 	bl	80001d0 <__aeabi_dsub>
 800e140:	e72f      	b.n	800dfa2 <atan+0x2a>
 800e142:	4b52      	ldr	r3, [pc, #328]	@ (800e28c <atan+0x314>)
 800e144:	2200      	movs	r2, #0
 800e146:	4620      	mov	r0, r4
 800e148:	4629      	mov	r1, r5
 800e14a:	f7f2 f841 	bl	80001d0 <__aeabi_dsub>
 800e14e:	4b4f      	ldr	r3, [pc, #316]	@ (800e28c <atan+0x314>)
 800e150:	4606      	mov	r6, r0
 800e152:	460f      	mov	r7, r1
 800e154:	2200      	movs	r2, #0
 800e156:	4620      	mov	r0, r4
 800e158:	4629      	mov	r1, r5
 800e15a:	f7f2 f83b 	bl	80001d4 <__adddf3>
 800e15e:	4602      	mov	r2, r0
 800e160:	460b      	mov	r3, r1
 800e162:	4630      	mov	r0, r6
 800e164:	4639      	mov	r1, r7
 800e166:	f7f2 fb15 	bl	8000794 <__aeabi_ddiv>
 800e16a:	f04f 0a01 	mov.w	sl, #1
 800e16e:	4604      	mov	r4, r0
 800e170:	460d      	mov	r5, r1
 800e172:	e765      	b.n	800e040 <atan+0xc8>
 800e174:	4b47      	ldr	r3, [pc, #284]	@ (800e294 <atan+0x31c>)
 800e176:	429e      	cmp	r6, r3
 800e178:	d21c      	bcs.n	800e1b4 <atan+0x23c>
 800e17a:	4b47      	ldr	r3, [pc, #284]	@ (800e298 <atan+0x320>)
 800e17c:	2200      	movs	r2, #0
 800e17e:	4620      	mov	r0, r4
 800e180:	4629      	mov	r1, r5
 800e182:	f7f2 f825 	bl	80001d0 <__aeabi_dsub>
 800e186:	4b44      	ldr	r3, [pc, #272]	@ (800e298 <atan+0x320>)
 800e188:	4606      	mov	r6, r0
 800e18a:	460f      	mov	r7, r1
 800e18c:	2200      	movs	r2, #0
 800e18e:	4620      	mov	r0, r4
 800e190:	4629      	mov	r1, r5
 800e192:	f7f2 f9d5 	bl	8000540 <__aeabi_dmul>
 800e196:	4b3d      	ldr	r3, [pc, #244]	@ (800e28c <atan+0x314>)
 800e198:	2200      	movs	r2, #0
 800e19a:	f7f2 f81b 	bl	80001d4 <__adddf3>
 800e19e:	4602      	mov	r2, r0
 800e1a0:	460b      	mov	r3, r1
 800e1a2:	4630      	mov	r0, r6
 800e1a4:	4639      	mov	r1, r7
 800e1a6:	f7f2 faf5 	bl	8000794 <__aeabi_ddiv>
 800e1aa:	f04f 0a02 	mov.w	sl, #2
 800e1ae:	4604      	mov	r4, r0
 800e1b0:	460d      	mov	r5, r1
 800e1b2:	e745      	b.n	800e040 <atan+0xc8>
 800e1b4:	4622      	mov	r2, r4
 800e1b6:	462b      	mov	r3, r5
 800e1b8:	4938      	ldr	r1, [pc, #224]	@ (800e29c <atan+0x324>)
 800e1ba:	2000      	movs	r0, #0
 800e1bc:	f7f2 faea 	bl	8000794 <__aeabi_ddiv>
 800e1c0:	f04f 0a03 	mov.w	sl, #3
 800e1c4:	4604      	mov	r4, r0
 800e1c6:	460d      	mov	r5, r1
 800e1c8:	e73a      	b.n	800e040 <atan+0xc8>
 800e1ca:	4b35      	ldr	r3, [pc, #212]	@ (800e2a0 <atan+0x328>)
 800e1cc:	4e35      	ldr	r6, [pc, #212]	@ (800e2a4 <atan+0x32c>)
 800e1ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d6:	f7f1 fffb 	bl	80001d0 <__aeabi_dsub>
 800e1da:	4622      	mov	r2, r4
 800e1dc:	462b      	mov	r3, r5
 800e1de:	f7f1 fff7 	bl	80001d0 <__aeabi_dsub>
 800e1e2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e1e6:	4602      	mov	r2, r0
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e1ee:	f7f1 ffef 	bl	80001d0 <__aeabi_dsub>
 800e1f2:	f1bb 0f00 	cmp.w	fp, #0
 800e1f6:	4604      	mov	r4, r0
 800e1f8:	460d      	mov	r5, r1
 800e1fa:	f6bf aedc 	bge.w	800dfb6 <atan+0x3e>
 800e1fe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e202:	461d      	mov	r5, r3
 800e204:	e6d7      	b.n	800dfb6 <atan+0x3e>
 800e206:	a51c      	add	r5, pc, #112	@ (adr r5, 800e278 <atan+0x300>)
 800e208:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e20c:	e6d3      	b.n	800dfb6 <atan+0x3e>
 800e20e:	bf00      	nop
 800e210:	54442d18 	.word	0x54442d18
 800e214:	3ff921fb 	.word	0x3ff921fb
 800e218:	8800759c 	.word	0x8800759c
 800e21c:	7e37e43c 	.word	0x7e37e43c
 800e220:	e322da11 	.word	0xe322da11
 800e224:	3f90ad3a 	.word	0x3f90ad3a
 800e228:	24760deb 	.word	0x24760deb
 800e22c:	3fa97b4b 	.word	0x3fa97b4b
 800e230:	a0d03d51 	.word	0xa0d03d51
 800e234:	3fb10d66 	.word	0x3fb10d66
 800e238:	c54c206e 	.word	0xc54c206e
 800e23c:	3fb745cd 	.word	0x3fb745cd
 800e240:	920083ff 	.word	0x920083ff
 800e244:	3fc24924 	.word	0x3fc24924
 800e248:	5555550d 	.word	0x5555550d
 800e24c:	3fd55555 	.word	0x3fd55555
 800e250:	2c6a6c2f 	.word	0x2c6a6c2f
 800e254:	bfa2b444 	.word	0xbfa2b444
 800e258:	52defd9a 	.word	0x52defd9a
 800e25c:	3fadde2d 	.word	0x3fadde2d
 800e260:	af749a6d 	.word	0xaf749a6d
 800e264:	3fb3b0f2 	.word	0x3fb3b0f2
 800e268:	fe231671 	.word	0xfe231671
 800e26c:	3fbc71c6 	.word	0x3fbc71c6
 800e270:	9998ebc4 	.word	0x9998ebc4
 800e274:	3fc99999 	.word	0x3fc99999
 800e278:	54442d18 	.word	0x54442d18
 800e27c:	bff921fb 	.word	0xbff921fb
 800e280:	440fffff 	.word	0x440fffff
 800e284:	7ff00000 	.word	0x7ff00000
 800e288:	3fdbffff 	.word	0x3fdbffff
 800e28c:	3ff00000 	.word	0x3ff00000
 800e290:	3ff2ffff 	.word	0x3ff2ffff
 800e294:	40038000 	.word	0x40038000
 800e298:	3ff80000 	.word	0x3ff80000
 800e29c:	bff00000 	.word	0xbff00000
 800e2a0:	0800edc8 	.word	0x0800edc8
 800e2a4:	0800ede8 	.word	0x0800ede8

0800e2a8 <fabs>:
 800e2a8:	ec51 0b10 	vmov	r0, r1, d0
 800e2ac:	4602      	mov	r2, r0
 800e2ae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e2b2:	ec43 2b10 	vmov	d0, r2, r3
 800e2b6:	4770      	bx	lr

0800e2b8 <__kernel_rem_pio2>:
 800e2b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2bc:	ed2d 8b02 	vpush	{d8}
 800e2c0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800e2c4:	f112 0f14 	cmn.w	r2, #20
 800e2c8:	9306      	str	r3, [sp, #24]
 800e2ca:	9104      	str	r1, [sp, #16]
 800e2cc:	4bbe      	ldr	r3, [pc, #760]	@ (800e5c8 <__kernel_rem_pio2+0x310>)
 800e2ce:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800e2d0:	9008      	str	r0, [sp, #32]
 800e2d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e2d6:	9300      	str	r3, [sp, #0]
 800e2d8:	9b06      	ldr	r3, [sp, #24]
 800e2da:	f103 33ff 	add.w	r3, r3, #4294967295
 800e2de:	bfa8      	it	ge
 800e2e0:	1ed4      	subge	r4, r2, #3
 800e2e2:	9305      	str	r3, [sp, #20]
 800e2e4:	bfb2      	itee	lt
 800e2e6:	2400      	movlt	r4, #0
 800e2e8:	2318      	movge	r3, #24
 800e2ea:	fb94 f4f3 	sdivge	r4, r4, r3
 800e2ee:	f06f 0317 	mvn.w	r3, #23
 800e2f2:	fb04 3303 	mla	r3, r4, r3, r3
 800e2f6:	eb03 0b02 	add.w	fp, r3, r2
 800e2fa:	9b00      	ldr	r3, [sp, #0]
 800e2fc:	9a05      	ldr	r2, [sp, #20]
 800e2fe:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800e5b8 <__kernel_rem_pio2+0x300>
 800e302:	eb03 0802 	add.w	r8, r3, r2
 800e306:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800e308:	1aa7      	subs	r7, r4, r2
 800e30a:	ae20      	add	r6, sp, #128	@ 0x80
 800e30c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e310:	2500      	movs	r5, #0
 800e312:	4545      	cmp	r5, r8
 800e314:	dd13      	ble.n	800e33e <__kernel_rem_pio2+0x86>
 800e316:	9b06      	ldr	r3, [sp, #24]
 800e318:	aa20      	add	r2, sp, #128	@ 0x80
 800e31a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e31e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800e322:	f04f 0800 	mov.w	r8, #0
 800e326:	9b00      	ldr	r3, [sp, #0]
 800e328:	4598      	cmp	r8, r3
 800e32a:	dc31      	bgt.n	800e390 <__kernel_rem_pio2+0xd8>
 800e32c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800e5b8 <__kernel_rem_pio2+0x300>
 800e330:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e334:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e338:	462f      	mov	r7, r5
 800e33a:	2600      	movs	r6, #0
 800e33c:	e01b      	b.n	800e376 <__kernel_rem_pio2+0xbe>
 800e33e:	42ef      	cmn	r7, r5
 800e340:	d407      	bmi.n	800e352 <__kernel_rem_pio2+0x9a>
 800e342:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e346:	f7f2 f891 	bl	800046c <__aeabi_i2d>
 800e34a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e34e:	3501      	adds	r5, #1
 800e350:	e7df      	b.n	800e312 <__kernel_rem_pio2+0x5a>
 800e352:	ec51 0b18 	vmov	r0, r1, d8
 800e356:	e7f8      	b.n	800e34a <__kernel_rem_pio2+0x92>
 800e358:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e35c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e360:	f7f2 f8ee 	bl	8000540 <__aeabi_dmul>
 800e364:	4602      	mov	r2, r0
 800e366:	460b      	mov	r3, r1
 800e368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e36c:	f7f1 ff32 	bl	80001d4 <__adddf3>
 800e370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e374:	3601      	adds	r6, #1
 800e376:	9b05      	ldr	r3, [sp, #20]
 800e378:	429e      	cmp	r6, r3
 800e37a:	f1a7 0708 	sub.w	r7, r7, #8
 800e37e:	ddeb      	ble.n	800e358 <__kernel_rem_pio2+0xa0>
 800e380:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e384:	f108 0801 	add.w	r8, r8, #1
 800e388:	ecaa 7b02 	vstmia	sl!, {d7}
 800e38c:	3508      	adds	r5, #8
 800e38e:	e7ca      	b.n	800e326 <__kernel_rem_pio2+0x6e>
 800e390:	9b00      	ldr	r3, [sp, #0]
 800e392:	f8dd 8000 	ldr.w	r8, [sp]
 800e396:	aa0c      	add	r2, sp, #48	@ 0x30
 800e398:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e39c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e39e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800e3a0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e3a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3a6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800e3aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3ac:	ab98      	add	r3, sp, #608	@ 0x260
 800e3ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e3b2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800e3b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e3ba:	ac0c      	add	r4, sp, #48	@ 0x30
 800e3bc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800e3be:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800e3c2:	46a1      	mov	r9, r4
 800e3c4:	46c2      	mov	sl, r8
 800e3c6:	f1ba 0f00 	cmp.w	sl, #0
 800e3ca:	f1a5 0508 	sub.w	r5, r5, #8
 800e3ce:	dc77      	bgt.n	800e4c0 <__kernel_rem_pio2+0x208>
 800e3d0:	4658      	mov	r0, fp
 800e3d2:	ed9d 0b02 	vldr	d0, [sp, #8]
 800e3d6:	f000 fac7 	bl	800e968 <scalbn>
 800e3da:	ec57 6b10 	vmov	r6, r7, d0
 800e3de:	2200      	movs	r2, #0
 800e3e0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800e3e4:	4630      	mov	r0, r6
 800e3e6:	4639      	mov	r1, r7
 800e3e8:	f7f2 f8aa 	bl	8000540 <__aeabi_dmul>
 800e3ec:	ec41 0b10 	vmov	d0, r0, r1
 800e3f0:	f000 fb3a 	bl	800ea68 <floor>
 800e3f4:	4b75      	ldr	r3, [pc, #468]	@ (800e5cc <__kernel_rem_pio2+0x314>)
 800e3f6:	ec51 0b10 	vmov	r0, r1, d0
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	f7f2 f8a0 	bl	8000540 <__aeabi_dmul>
 800e400:	4602      	mov	r2, r0
 800e402:	460b      	mov	r3, r1
 800e404:	4630      	mov	r0, r6
 800e406:	4639      	mov	r1, r7
 800e408:	f7f1 fee2 	bl	80001d0 <__aeabi_dsub>
 800e40c:	460f      	mov	r7, r1
 800e40e:	4606      	mov	r6, r0
 800e410:	f7f2 fb46 	bl	8000aa0 <__aeabi_d2iz>
 800e414:	9002      	str	r0, [sp, #8]
 800e416:	f7f2 f829 	bl	800046c <__aeabi_i2d>
 800e41a:	4602      	mov	r2, r0
 800e41c:	460b      	mov	r3, r1
 800e41e:	4630      	mov	r0, r6
 800e420:	4639      	mov	r1, r7
 800e422:	f7f1 fed5 	bl	80001d0 <__aeabi_dsub>
 800e426:	f1bb 0f00 	cmp.w	fp, #0
 800e42a:	4606      	mov	r6, r0
 800e42c:	460f      	mov	r7, r1
 800e42e:	dd6c      	ble.n	800e50a <__kernel_rem_pio2+0x252>
 800e430:	f108 31ff 	add.w	r1, r8, #4294967295
 800e434:	ab0c      	add	r3, sp, #48	@ 0x30
 800e436:	9d02      	ldr	r5, [sp, #8]
 800e438:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e43c:	f1cb 0018 	rsb	r0, fp, #24
 800e440:	fa43 f200 	asr.w	r2, r3, r0
 800e444:	4415      	add	r5, r2
 800e446:	4082      	lsls	r2, r0
 800e448:	1a9b      	subs	r3, r3, r2
 800e44a:	aa0c      	add	r2, sp, #48	@ 0x30
 800e44c:	9502      	str	r5, [sp, #8]
 800e44e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e452:	f1cb 0217 	rsb	r2, fp, #23
 800e456:	fa43 f902 	asr.w	r9, r3, r2
 800e45a:	f1b9 0f00 	cmp.w	r9, #0
 800e45e:	dd64      	ble.n	800e52a <__kernel_rem_pio2+0x272>
 800e460:	9b02      	ldr	r3, [sp, #8]
 800e462:	2200      	movs	r2, #0
 800e464:	3301      	adds	r3, #1
 800e466:	9302      	str	r3, [sp, #8]
 800e468:	4615      	mov	r5, r2
 800e46a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800e46e:	4590      	cmp	r8, r2
 800e470:	f300 80b8 	bgt.w	800e5e4 <__kernel_rem_pio2+0x32c>
 800e474:	f1bb 0f00 	cmp.w	fp, #0
 800e478:	dd07      	ble.n	800e48a <__kernel_rem_pio2+0x1d2>
 800e47a:	f1bb 0f01 	cmp.w	fp, #1
 800e47e:	f000 80bf 	beq.w	800e600 <__kernel_rem_pio2+0x348>
 800e482:	f1bb 0f02 	cmp.w	fp, #2
 800e486:	f000 80c6 	beq.w	800e616 <__kernel_rem_pio2+0x35e>
 800e48a:	f1b9 0f02 	cmp.w	r9, #2
 800e48e:	d14c      	bne.n	800e52a <__kernel_rem_pio2+0x272>
 800e490:	4632      	mov	r2, r6
 800e492:	463b      	mov	r3, r7
 800e494:	494e      	ldr	r1, [pc, #312]	@ (800e5d0 <__kernel_rem_pio2+0x318>)
 800e496:	2000      	movs	r0, #0
 800e498:	f7f1 fe9a 	bl	80001d0 <__aeabi_dsub>
 800e49c:	4606      	mov	r6, r0
 800e49e:	460f      	mov	r7, r1
 800e4a0:	2d00      	cmp	r5, #0
 800e4a2:	d042      	beq.n	800e52a <__kernel_rem_pio2+0x272>
 800e4a4:	4658      	mov	r0, fp
 800e4a6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800e5c0 <__kernel_rem_pio2+0x308>
 800e4aa:	f000 fa5d 	bl	800e968 <scalbn>
 800e4ae:	4630      	mov	r0, r6
 800e4b0:	4639      	mov	r1, r7
 800e4b2:	ec53 2b10 	vmov	r2, r3, d0
 800e4b6:	f7f1 fe8b 	bl	80001d0 <__aeabi_dsub>
 800e4ba:	4606      	mov	r6, r0
 800e4bc:	460f      	mov	r7, r1
 800e4be:	e034      	b.n	800e52a <__kernel_rem_pio2+0x272>
 800e4c0:	4b44      	ldr	r3, [pc, #272]	@ (800e5d4 <__kernel_rem_pio2+0x31c>)
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4c8:	f7f2 f83a 	bl	8000540 <__aeabi_dmul>
 800e4cc:	f7f2 fae8 	bl	8000aa0 <__aeabi_d2iz>
 800e4d0:	f7f1 ffcc 	bl	800046c <__aeabi_i2d>
 800e4d4:	4b40      	ldr	r3, [pc, #256]	@ (800e5d8 <__kernel_rem_pio2+0x320>)
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	4606      	mov	r6, r0
 800e4da:	460f      	mov	r7, r1
 800e4dc:	f7f2 f830 	bl	8000540 <__aeabi_dmul>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4e8:	f7f1 fe72 	bl	80001d0 <__aeabi_dsub>
 800e4ec:	f7f2 fad8 	bl	8000aa0 <__aeabi_d2iz>
 800e4f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e4f4:	f849 0b04 	str.w	r0, [r9], #4
 800e4f8:	4639      	mov	r1, r7
 800e4fa:	4630      	mov	r0, r6
 800e4fc:	f7f1 fe6a 	bl	80001d4 <__adddf3>
 800e500:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e504:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e508:	e75d      	b.n	800e3c6 <__kernel_rem_pio2+0x10e>
 800e50a:	d107      	bne.n	800e51c <__kernel_rem_pio2+0x264>
 800e50c:	f108 33ff 	add.w	r3, r8, #4294967295
 800e510:	aa0c      	add	r2, sp, #48	@ 0x30
 800e512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e516:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800e51a:	e79e      	b.n	800e45a <__kernel_rem_pio2+0x1a2>
 800e51c:	4b2f      	ldr	r3, [pc, #188]	@ (800e5dc <__kernel_rem_pio2+0x324>)
 800e51e:	2200      	movs	r2, #0
 800e520:	f7f2 fa94 	bl	8000a4c <__aeabi_dcmpge>
 800e524:	2800      	cmp	r0, #0
 800e526:	d143      	bne.n	800e5b0 <__kernel_rem_pio2+0x2f8>
 800e528:	4681      	mov	r9, r0
 800e52a:	2200      	movs	r2, #0
 800e52c:	2300      	movs	r3, #0
 800e52e:	4630      	mov	r0, r6
 800e530:	4639      	mov	r1, r7
 800e532:	f7f2 fa6d 	bl	8000a10 <__aeabi_dcmpeq>
 800e536:	2800      	cmp	r0, #0
 800e538:	f000 80bf 	beq.w	800e6ba <__kernel_rem_pio2+0x402>
 800e53c:	f108 33ff 	add.w	r3, r8, #4294967295
 800e540:	2200      	movs	r2, #0
 800e542:	9900      	ldr	r1, [sp, #0]
 800e544:	428b      	cmp	r3, r1
 800e546:	da6e      	bge.n	800e626 <__kernel_rem_pio2+0x36e>
 800e548:	2a00      	cmp	r2, #0
 800e54a:	f000 8089 	beq.w	800e660 <__kernel_rem_pio2+0x3a8>
 800e54e:	f108 38ff 	add.w	r8, r8, #4294967295
 800e552:	ab0c      	add	r3, sp, #48	@ 0x30
 800e554:	f1ab 0b18 	sub.w	fp, fp, #24
 800e558:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d0f6      	beq.n	800e54e <__kernel_rem_pio2+0x296>
 800e560:	4658      	mov	r0, fp
 800e562:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800e5c0 <__kernel_rem_pio2+0x308>
 800e566:	f000 f9ff 	bl	800e968 <scalbn>
 800e56a:	f108 0301 	add.w	r3, r8, #1
 800e56e:	00da      	lsls	r2, r3, #3
 800e570:	9205      	str	r2, [sp, #20]
 800e572:	ec55 4b10 	vmov	r4, r5, d0
 800e576:	aa70      	add	r2, sp, #448	@ 0x1c0
 800e578:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800e5d4 <__kernel_rem_pio2+0x31c>
 800e57c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800e580:	4646      	mov	r6, r8
 800e582:	f04f 0a00 	mov.w	sl, #0
 800e586:	2e00      	cmp	r6, #0
 800e588:	f280 80cf 	bge.w	800e72a <__kernel_rem_pio2+0x472>
 800e58c:	4644      	mov	r4, r8
 800e58e:	2c00      	cmp	r4, #0
 800e590:	f2c0 80fd 	blt.w	800e78e <__kernel_rem_pio2+0x4d6>
 800e594:	4b12      	ldr	r3, [pc, #72]	@ (800e5e0 <__kernel_rem_pio2+0x328>)
 800e596:	461f      	mov	r7, r3
 800e598:	ab70      	add	r3, sp, #448	@ 0x1c0
 800e59a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e59e:	9306      	str	r3, [sp, #24]
 800e5a0:	f04f 0a00 	mov.w	sl, #0
 800e5a4:	f04f 0b00 	mov.w	fp, #0
 800e5a8:	2600      	movs	r6, #0
 800e5aa:	eba8 0504 	sub.w	r5, r8, r4
 800e5ae:	e0e2      	b.n	800e776 <__kernel_rem_pio2+0x4be>
 800e5b0:	f04f 0902 	mov.w	r9, #2
 800e5b4:	e754      	b.n	800e460 <__kernel_rem_pio2+0x1a8>
 800e5b6:	bf00      	nop
	...
 800e5c4:	3ff00000 	.word	0x3ff00000
 800e5c8:	0800ee48 	.word	0x0800ee48
 800e5cc:	40200000 	.word	0x40200000
 800e5d0:	3ff00000 	.word	0x3ff00000
 800e5d4:	3e700000 	.word	0x3e700000
 800e5d8:	41700000 	.word	0x41700000
 800e5dc:	3fe00000 	.word	0x3fe00000
 800e5e0:	0800ee08 	.word	0x0800ee08
 800e5e4:	f854 3b04 	ldr.w	r3, [r4], #4
 800e5e8:	b945      	cbnz	r5, 800e5fc <__kernel_rem_pio2+0x344>
 800e5ea:	b123      	cbz	r3, 800e5f6 <__kernel_rem_pio2+0x33e>
 800e5ec:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800e5f0:	f844 3c04 	str.w	r3, [r4, #-4]
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	3201      	adds	r2, #1
 800e5f8:	461d      	mov	r5, r3
 800e5fa:	e738      	b.n	800e46e <__kernel_rem_pio2+0x1b6>
 800e5fc:	1acb      	subs	r3, r1, r3
 800e5fe:	e7f7      	b.n	800e5f0 <__kernel_rem_pio2+0x338>
 800e600:	f108 32ff 	add.w	r2, r8, #4294967295
 800e604:	ab0c      	add	r3, sp, #48	@ 0x30
 800e606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e60a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e60e:	a90c      	add	r1, sp, #48	@ 0x30
 800e610:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e614:	e739      	b.n	800e48a <__kernel_rem_pio2+0x1d2>
 800e616:	f108 32ff 	add.w	r2, r8, #4294967295
 800e61a:	ab0c      	add	r3, sp, #48	@ 0x30
 800e61c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e620:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e624:	e7f3      	b.n	800e60e <__kernel_rem_pio2+0x356>
 800e626:	a90c      	add	r1, sp, #48	@ 0x30
 800e628:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e62c:	3b01      	subs	r3, #1
 800e62e:	430a      	orrs	r2, r1
 800e630:	e787      	b.n	800e542 <__kernel_rem_pio2+0x28a>
 800e632:	3401      	adds	r4, #1
 800e634:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e638:	2a00      	cmp	r2, #0
 800e63a:	d0fa      	beq.n	800e632 <__kernel_rem_pio2+0x37a>
 800e63c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e63e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e642:	eb0d 0503 	add.w	r5, sp, r3
 800e646:	9b06      	ldr	r3, [sp, #24]
 800e648:	aa20      	add	r2, sp, #128	@ 0x80
 800e64a:	4443      	add	r3, r8
 800e64c:	f108 0701 	add.w	r7, r8, #1
 800e650:	3d98      	subs	r5, #152	@ 0x98
 800e652:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800e656:	4444      	add	r4, r8
 800e658:	42bc      	cmp	r4, r7
 800e65a:	da04      	bge.n	800e666 <__kernel_rem_pio2+0x3ae>
 800e65c:	46a0      	mov	r8, r4
 800e65e:	e6a2      	b.n	800e3a6 <__kernel_rem_pio2+0xee>
 800e660:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e662:	2401      	movs	r4, #1
 800e664:	e7e6      	b.n	800e634 <__kernel_rem_pio2+0x37c>
 800e666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e668:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800e66c:	f7f1 fefe 	bl	800046c <__aeabi_i2d>
 800e670:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800e938 <__kernel_rem_pio2+0x680>
 800e674:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e678:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e67c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e680:	46b2      	mov	sl, r6
 800e682:	f04f 0800 	mov.w	r8, #0
 800e686:	9b05      	ldr	r3, [sp, #20]
 800e688:	4598      	cmp	r8, r3
 800e68a:	dd05      	ble.n	800e698 <__kernel_rem_pio2+0x3e0>
 800e68c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e690:	3701      	adds	r7, #1
 800e692:	eca5 7b02 	vstmia	r5!, {d7}
 800e696:	e7df      	b.n	800e658 <__kernel_rem_pio2+0x3a0>
 800e698:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800e69c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e6a0:	f7f1 ff4e 	bl	8000540 <__aeabi_dmul>
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	460b      	mov	r3, r1
 800e6a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6ac:	f7f1 fd92 	bl	80001d4 <__adddf3>
 800e6b0:	f108 0801 	add.w	r8, r8, #1
 800e6b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6b8:	e7e5      	b.n	800e686 <__kernel_rem_pio2+0x3ce>
 800e6ba:	f1cb 0000 	rsb	r0, fp, #0
 800e6be:	ec47 6b10 	vmov	d0, r6, r7
 800e6c2:	f000 f951 	bl	800e968 <scalbn>
 800e6c6:	ec55 4b10 	vmov	r4, r5, d0
 800e6ca:	4b9d      	ldr	r3, [pc, #628]	@ (800e940 <__kernel_rem_pio2+0x688>)
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	4629      	mov	r1, r5
 800e6d2:	f7f2 f9bb 	bl	8000a4c <__aeabi_dcmpge>
 800e6d6:	b300      	cbz	r0, 800e71a <__kernel_rem_pio2+0x462>
 800e6d8:	4b9a      	ldr	r3, [pc, #616]	@ (800e944 <__kernel_rem_pio2+0x68c>)
 800e6da:	2200      	movs	r2, #0
 800e6dc:	4620      	mov	r0, r4
 800e6de:	4629      	mov	r1, r5
 800e6e0:	f7f1 ff2e 	bl	8000540 <__aeabi_dmul>
 800e6e4:	f7f2 f9dc 	bl	8000aa0 <__aeabi_d2iz>
 800e6e8:	4606      	mov	r6, r0
 800e6ea:	f7f1 febf 	bl	800046c <__aeabi_i2d>
 800e6ee:	4b94      	ldr	r3, [pc, #592]	@ (800e940 <__kernel_rem_pio2+0x688>)
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f7f1 ff25 	bl	8000540 <__aeabi_dmul>
 800e6f6:	460b      	mov	r3, r1
 800e6f8:	4602      	mov	r2, r0
 800e6fa:	4629      	mov	r1, r5
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	f7f1 fd67 	bl	80001d0 <__aeabi_dsub>
 800e702:	f7f2 f9cd 	bl	8000aa0 <__aeabi_d2iz>
 800e706:	ab0c      	add	r3, sp, #48	@ 0x30
 800e708:	f10b 0b18 	add.w	fp, fp, #24
 800e70c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e710:	f108 0801 	add.w	r8, r8, #1
 800e714:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800e718:	e722      	b.n	800e560 <__kernel_rem_pio2+0x2a8>
 800e71a:	4620      	mov	r0, r4
 800e71c:	4629      	mov	r1, r5
 800e71e:	f7f2 f9bf 	bl	8000aa0 <__aeabi_d2iz>
 800e722:	ab0c      	add	r3, sp, #48	@ 0x30
 800e724:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800e728:	e71a      	b.n	800e560 <__kernel_rem_pio2+0x2a8>
 800e72a:	ab0c      	add	r3, sp, #48	@ 0x30
 800e72c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e730:	f7f1 fe9c 	bl	800046c <__aeabi_i2d>
 800e734:	4622      	mov	r2, r4
 800e736:	462b      	mov	r3, r5
 800e738:	f7f1 ff02 	bl	8000540 <__aeabi_dmul>
 800e73c:	4652      	mov	r2, sl
 800e73e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800e742:	465b      	mov	r3, fp
 800e744:	4620      	mov	r0, r4
 800e746:	4629      	mov	r1, r5
 800e748:	f7f1 fefa 	bl	8000540 <__aeabi_dmul>
 800e74c:	3e01      	subs	r6, #1
 800e74e:	4604      	mov	r4, r0
 800e750:	460d      	mov	r5, r1
 800e752:	e718      	b.n	800e586 <__kernel_rem_pio2+0x2ce>
 800e754:	9906      	ldr	r1, [sp, #24]
 800e756:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800e75a:	9106      	str	r1, [sp, #24]
 800e75c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800e760:	f7f1 feee 	bl	8000540 <__aeabi_dmul>
 800e764:	4602      	mov	r2, r0
 800e766:	460b      	mov	r3, r1
 800e768:	4650      	mov	r0, sl
 800e76a:	4659      	mov	r1, fp
 800e76c:	f7f1 fd32 	bl	80001d4 <__adddf3>
 800e770:	3601      	adds	r6, #1
 800e772:	4682      	mov	sl, r0
 800e774:	468b      	mov	fp, r1
 800e776:	9b00      	ldr	r3, [sp, #0]
 800e778:	429e      	cmp	r6, r3
 800e77a:	dc01      	bgt.n	800e780 <__kernel_rem_pio2+0x4c8>
 800e77c:	42b5      	cmp	r5, r6
 800e77e:	dae9      	bge.n	800e754 <__kernel_rem_pio2+0x49c>
 800e780:	ab48      	add	r3, sp, #288	@ 0x120
 800e782:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e786:	e9c5 ab00 	strd	sl, fp, [r5]
 800e78a:	3c01      	subs	r4, #1
 800e78c:	e6ff      	b.n	800e58e <__kernel_rem_pio2+0x2d6>
 800e78e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e790:	2b02      	cmp	r3, #2
 800e792:	dc0b      	bgt.n	800e7ac <__kernel_rem_pio2+0x4f4>
 800e794:	2b00      	cmp	r3, #0
 800e796:	dc39      	bgt.n	800e80c <__kernel_rem_pio2+0x554>
 800e798:	d05d      	beq.n	800e856 <__kernel_rem_pio2+0x59e>
 800e79a:	9b02      	ldr	r3, [sp, #8]
 800e79c:	f003 0007 	and.w	r0, r3, #7
 800e7a0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800e7a4:	ecbd 8b02 	vpop	{d8}
 800e7a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ac:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800e7ae:	2b03      	cmp	r3, #3
 800e7b0:	d1f3      	bne.n	800e79a <__kernel_rem_pio2+0x4e2>
 800e7b2:	9b05      	ldr	r3, [sp, #20]
 800e7b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e7b8:	eb0d 0403 	add.w	r4, sp, r3
 800e7bc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800e7c0:	4625      	mov	r5, r4
 800e7c2:	46c2      	mov	sl, r8
 800e7c4:	f1ba 0f00 	cmp.w	sl, #0
 800e7c8:	f1a5 0508 	sub.w	r5, r5, #8
 800e7cc:	dc6b      	bgt.n	800e8a6 <__kernel_rem_pio2+0x5ee>
 800e7ce:	4645      	mov	r5, r8
 800e7d0:	2d01      	cmp	r5, #1
 800e7d2:	f1a4 0408 	sub.w	r4, r4, #8
 800e7d6:	f300 8087 	bgt.w	800e8e8 <__kernel_rem_pio2+0x630>
 800e7da:	9c05      	ldr	r4, [sp, #20]
 800e7dc:	ab48      	add	r3, sp, #288	@ 0x120
 800e7de:	441c      	add	r4, r3
 800e7e0:	2000      	movs	r0, #0
 800e7e2:	2100      	movs	r1, #0
 800e7e4:	f1b8 0f01 	cmp.w	r8, #1
 800e7e8:	f300 809c 	bgt.w	800e924 <__kernel_rem_pio2+0x66c>
 800e7ec:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800e7f0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800e7f4:	f1b9 0f00 	cmp.w	r9, #0
 800e7f8:	f040 80a6 	bne.w	800e948 <__kernel_rem_pio2+0x690>
 800e7fc:	9b04      	ldr	r3, [sp, #16]
 800e7fe:	e9c3 7800 	strd	r7, r8, [r3]
 800e802:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e806:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e80a:	e7c6      	b.n	800e79a <__kernel_rem_pio2+0x4e2>
 800e80c:	9d05      	ldr	r5, [sp, #20]
 800e80e:	ab48      	add	r3, sp, #288	@ 0x120
 800e810:	441d      	add	r5, r3
 800e812:	4644      	mov	r4, r8
 800e814:	2000      	movs	r0, #0
 800e816:	2100      	movs	r1, #0
 800e818:	2c00      	cmp	r4, #0
 800e81a:	da35      	bge.n	800e888 <__kernel_rem_pio2+0x5d0>
 800e81c:	f1b9 0f00 	cmp.w	r9, #0
 800e820:	d038      	beq.n	800e894 <__kernel_rem_pio2+0x5dc>
 800e822:	4602      	mov	r2, r0
 800e824:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e828:	9c04      	ldr	r4, [sp, #16]
 800e82a:	e9c4 2300 	strd	r2, r3, [r4]
 800e82e:	4602      	mov	r2, r0
 800e830:	460b      	mov	r3, r1
 800e832:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800e836:	f7f1 fccb 	bl	80001d0 <__aeabi_dsub>
 800e83a:	ad4a      	add	r5, sp, #296	@ 0x128
 800e83c:	2401      	movs	r4, #1
 800e83e:	45a0      	cmp	r8, r4
 800e840:	da2b      	bge.n	800e89a <__kernel_rem_pio2+0x5e2>
 800e842:	f1b9 0f00 	cmp.w	r9, #0
 800e846:	d002      	beq.n	800e84e <__kernel_rem_pio2+0x596>
 800e848:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e84c:	4619      	mov	r1, r3
 800e84e:	9b04      	ldr	r3, [sp, #16]
 800e850:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e854:	e7a1      	b.n	800e79a <__kernel_rem_pio2+0x4e2>
 800e856:	9c05      	ldr	r4, [sp, #20]
 800e858:	ab48      	add	r3, sp, #288	@ 0x120
 800e85a:	441c      	add	r4, r3
 800e85c:	2000      	movs	r0, #0
 800e85e:	2100      	movs	r1, #0
 800e860:	f1b8 0f00 	cmp.w	r8, #0
 800e864:	da09      	bge.n	800e87a <__kernel_rem_pio2+0x5c2>
 800e866:	f1b9 0f00 	cmp.w	r9, #0
 800e86a:	d002      	beq.n	800e872 <__kernel_rem_pio2+0x5ba>
 800e86c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e870:	4619      	mov	r1, r3
 800e872:	9b04      	ldr	r3, [sp, #16]
 800e874:	e9c3 0100 	strd	r0, r1, [r3]
 800e878:	e78f      	b.n	800e79a <__kernel_rem_pio2+0x4e2>
 800e87a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e87e:	f7f1 fca9 	bl	80001d4 <__adddf3>
 800e882:	f108 38ff 	add.w	r8, r8, #4294967295
 800e886:	e7eb      	b.n	800e860 <__kernel_rem_pio2+0x5a8>
 800e888:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e88c:	f7f1 fca2 	bl	80001d4 <__adddf3>
 800e890:	3c01      	subs	r4, #1
 800e892:	e7c1      	b.n	800e818 <__kernel_rem_pio2+0x560>
 800e894:	4602      	mov	r2, r0
 800e896:	460b      	mov	r3, r1
 800e898:	e7c6      	b.n	800e828 <__kernel_rem_pio2+0x570>
 800e89a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e89e:	f7f1 fc99 	bl	80001d4 <__adddf3>
 800e8a2:	3401      	adds	r4, #1
 800e8a4:	e7cb      	b.n	800e83e <__kernel_rem_pio2+0x586>
 800e8a6:	ed95 7b00 	vldr	d7, [r5]
 800e8aa:	ed8d 7b00 	vstr	d7, [sp]
 800e8ae:	ed95 7b02 	vldr	d7, [r5, #8]
 800e8b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8b6:	ec53 2b17 	vmov	r2, r3, d7
 800e8ba:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e8be:	f7f1 fc89 	bl	80001d4 <__adddf3>
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	4606      	mov	r6, r0
 800e8c8:	460f      	mov	r7, r1
 800e8ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8ce:	f7f1 fc7f 	bl	80001d0 <__aeabi_dsub>
 800e8d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e8d6:	f7f1 fc7d 	bl	80001d4 <__adddf3>
 800e8da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e8de:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800e8e2:	e9c5 6700 	strd	r6, r7, [r5]
 800e8e6:	e76d      	b.n	800e7c4 <__kernel_rem_pio2+0x50c>
 800e8e8:	ed94 7b00 	vldr	d7, [r4]
 800e8ec:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800e8f0:	ec51 0b17 	vmov	r0, r1, d7
 800e8f4:	4652      	mov	r2, sl
 800e8f6:	465b      	mov	r3, fp
 800e8f8:	ed8d 7b00 	vstr	d7, [sp]
 800e8fc:	f7f1 fc6a 	bl	80001d4 <__adddf3>
 800e900:	4602      	mov	r2, r0
 800e902:	460b      	mov	r3, r1
 800e904:	4606      	mov	r6, r0
 800e906:	460f      	mov	r7, r1
 800e908:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e90c:	f7f1 fc60 	bl	80001d0 <__aeabi_dsub>
 800e910:	4652      	mov	r2, sl
 800e912:	465b      	mov	r3, fp
 800e914:	f7f1 fc5e 	bl	80001d4 <__adddf3>
 800e918:	3d01      	subs	r5, #1
 800e91a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e91e:	e9c4 6700 	strd	r6, r7, [r4]
 800e922:	e755      	b.n	800e7d0 <__kernel_rem_pio2+0x518>
 800e924:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e928:	f7f1 fc54 	bl	80001d4 <__adddf3>
 800e92c:	f108 38ff 	add.w	r8, r8, #4294967295
 800e930:	e758      	b.n	800e7e4 <__kernel_rem_pio2+0x52c>
 800e932:	bf00      	nop
 800e934:	f3af 8000 	nop.w
	...
 800e940:	41700000 	.word	0x41700000
 800e944:	3e700000 	.word	0x3e700000
 800e948:	9b04      	ldr	r3, [sp, #16]
 800e94a:	9a04      	ldr	r2, [sp, #16]
 800e94c:	601f      	str	r7, [r3, #0]
 800e94e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800e952:	605c      	str	r4, [r3, #4]
 800e954:	609d      	str	r5, [r3, #8]
 800e956:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e95a:	60d3      	str	r3, [r2, #12]
 800e95c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e960:	6110      	str	r0, [r2, #16]
 800e962:	6153      	str	r3, [r2, #20]
 800e964:	e719      	b.n	800e79a <__kernel_rem_pio2+0x4e2>
 800e966:	bf00      	nop

0800e968 <scalbn>:
 800e968:	b570      	push	{r4, r5, r6, lr}
 800e96a:	ec55 4b10 	vmov	r4, r5, d0
 800e96e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e972:	4606      	mov	r6, r0
 800e974:	462b      	mov	r3, r5
 800e976:	b991      	cbnz	r1, 800e99e <scalbn+0x36>
 800e978:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e97c:	4323      	orrs	r3, r4
 800e97e:	d03d      	beq.n	800e9fc <scalbn+0x94>
 800e980:	4b35      	ldr	r3, [pc, #212]	@ (800ea58 <scalbn+0xf0>)
 800e982:	4620      	mov	r0, r4
 800e984:	4629      	mov	r1, r5
 800e986:	2200      	movs	r2, #0
 800e988:	f7f1 fdda 	bl	8000540 <__aeabi_dmul>
 800e98c:	4b33      	ldr	r3, [pc, #204]	@ (800ea5c <scalbn+0xf4>)
 800e98e:	429e      	cmp	r6, r3
 800e990:	4604      	mov	r4, r0
 800e992:	460d      	mov	r5, r1
 800e994:	da0f      	bge.n	800e9b6 <scalbn+0x4e>
 800e996:	a328      	add	r3, pc, #160	@ (adr r3, 800ea38 <scalbn+0xd0>)
 800e998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99c:	e01e      	b.n	800e9dc <scalbn+0x74>
 800e99e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e9a2:	4291      	cmp	r1, r2
 800e9a4:	d10b      	bne.n	800e9be <scalbn+0x56>
 800e9a6:	4622      	mov	r2, r4
 800e9a8:	4620      	mov	r0, r4
 800e9aa:	4629      	mov	r1, r5
 800e9ac:	f7f1 fc12 	bl	80001d4 <__adddf3>
 800e9b0:	4604      	mov	r4, r0
 800e9b2:	460d      	mov	r5, r1
 800e9b4:	e022      	b.n	800e9fc <scalbn+0x94>
 800e9b6:	460b      	mov	r3, r1
 800e9b8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e9bc:	3936      	subs	r1, #54	@ 0x36
 800e9be:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e9c2:	4296      	cmp	r6, r2
 800e9c4:	dd0d      	ble.n	800e9e2 <scalbn+0x7a>
 800e9c6:	2d00      	cmp	r5, #0
 800e9c8:	a11d      	add	r1, pc, #116	@ (adr r1, 800ea40 <scalbn+0xd8>)
 800e9ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9ce:	da02      	bge.n	800e9d6 <scalbn+0x6e>
 800e9d0:	a11d      	add	r1, pc, #116	@ (adr r1, 800ea48 <scalbn+0xe0>)
 800e9d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e9d6:	a31a      	add	r3, pc, #104	@ (adr r3, 800ea40 <scalbn+0xd8>)
 800e9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9dc:	f7f1 fdb0 	bl	8000540 <__aeabi_dmul>
 800e9e0:	e7e6      	b.n	800e9b0 <scalbn+0x48>
 800e9e2:	1872      	adds	r2, r6, r1
 800e9e4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e9e8:	428a      	cmp	r2, r1
 800e9ea:	dcec      	bgt.n	800e9c6 <scalbn+0x5e>
 800e9ec:	2a00      	cmp	r2, #0
 800e9ee:	dd08      	ble.n	800ea02 <scalbn+0x9a>
 800e9f0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e9f4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e9f8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e9fc:	ec45 4b10 	vmov	d0, r4, r5
 800ea00:	bd70      	pop	{r4, r5, r6, pc}
 800ea02:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800ea06:	da08      	bge.n	800ea1a <scalbn+0xb2>
 800ea08:	2d00      	cmp	r5, #0
 800ea0a:	a10b      	add	r1, pc, #44	@ (adr r1, 800ea38 <scalbn+0xd0>)
 800ea0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea10:	dac1      	bge.n	800e996 <scalbn+0x2e>
 800ea12:	a10f      	add	r1, pc, #60	@ (adr r1, 800ea50 <scalbn+0xe8>)
 800ea14:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ea18:	e7bd      	b.n	800e996 <scalbn+0x2e>
 800ea1a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ea1e:	3236      	adds	r2, #54	@ 0x36
 800ea20:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ea24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ea28:	4620      	mov	r0, r4
 800ea2a:	4b0d      	ldr	r3, [pc, #52]	@ (800ea60 <scalbn+0xf8>)
 800ea2c:	4629      	mov	r1, r5
 800ea2e:	2200      	movs	r2, #0
 800ea30:	e7d4      	b.n	800e9dc <scalbn+0x74>
 800ea32:	bf00      	nop
 800ea34:	f3af 8000 	nop.w
 800ea38:	c2f8f359 	.word	0xc2f8f359
 800ea3c:	01a56e1f 	.word	0x01a56e1f
 800ea40:	8800759c 	.word	0x8800759c
 800ea44:	7e37e43c 	.word	0x7e37e43c
 800ea48:	8800759c 	.word	0x8800759c
 800ea4c:	fe37e43c 	.word	0xfe37e43c
 800ea50:	c2f8f359 	.word	0xc2f8f359
 800ea54:	81a56e1f 	.word	0x81a56e1f
 800ea58:	43500000 	.word	0x43500000
 800ea5c:	ffff3cb0 	.word	0xffff3cb0
 800ea60:	3c900000 	.word	0x3c900000
 800ea64:	00000000 	.word	0x00000000

0800ea68 <floor>:
 800ea68:	ec51 0b10 	vmov	r0, r1, d0
 800ea6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ea70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea74:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800ea78:	2e13      	cmp	r6, #19
 800ea7a:	460c      	mov	r4, r1
 800ea7c:	4605      	mov	r5, r0
 800ea7e:	4680      	mov	r8, r0
 800ea80:	dc34      	bgt.n	800eaec <floor+0x84>
 800ea82:	2e00      	cmp	r6, #0
 800ea84:	da17      	bge.n	800eab6 <floor+0x4e>
 800ea86:	a332      	add	r3, pc, #200	@ (adr r3, 800eb50 <floor+0xe8>)
 800ea88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8c:	f7f1 fba2 	bl	80001d4 <__adddf3>
 800ea90:	2200      	movs	r2, #0
 800ea92:	2300      	movs	r3, #0
 800ea94:	f7f1 ffe4 	bl	8000a60 <__aeabi_dcmpgt>
 800ea98:	b150      	cbz	r0, 800eab0 <floor+0x48>
 800ea9a:	2c00      	cmp	r4, #0
 800ea9c:	da55      	bge.n	800eb4a <floor+0xe2>
 800ea9e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800eaa2:	432c      	orrs	r4, r5
 800eaa4:	2500      	movs	r5, #0
 800eaa6:	42ac      	cmp	r4, r5
 800eaa8:	4c2b      	ldr	r4, [pc, #172]	@ (800eb58 <floor+0xf0>)
 800eaaa:	bf08      	it	eq
 800eaac:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800eab0:	4621      	mov	r1, r4
 800eab2:	4628      	mov	r0, r5
 800eab4:	e023      	b.n	800eafe <floor+0x96>
 800eab6:	4f29      	ldr	r7, [pc, #164]	@ (800eb5c <floor+0xf4>)
 800eab8:	4137      	asrs	r7, r6
 800eaba:	ea01 0307 	and.w	r3, r1, r7
 800eabe:	4303      	orrs	r3, r0
 800eac0:	d01d      	beq.n	800eafe <floor+0x96>
 800eac2:	a323      	add	r3, pc, #140	@ (adr r3, 800eb50 <floor+0xe8>)
 800eac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac8:	f7f1 fb84 	bl	80001d4 <__adddf3>
 800eacc:	2200      	movs	r2, #0
 800eace:	2300      	movs	r3, #0
 800ead0:	f7f1 ffc6 	bl	8000a60 <__aeabi_dcmpgt>
 800ead4:	2800      	cmp	r0, #0
 800ead6:	d0eb      	beq.n	800eab0 <floor+0x48>
 800ead8:	2c00      	cmp	r4, #0
 800eada:	bfbe      	ittt	lt
 800eadc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800eae0:	4133      	asrlt	r3, r6
 800eae2:	18e4      	addlt	r4, r4, r3
 800eae4:	ea24 0407 	bic.w	r4, r4, r7
 800eae8:	2500      	movs	r5, #0
 800eaea:	e7e1      	b.n	800eab0 <floor+0x48>
 800eaec:	2e33      	cmp	r6, #51	@ 0x33
 800eaee:	dd0a      	ble.n	800eb06 <floor+0x9e>
 800eaf0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800eaf4:	d103      	bne.n	800eafe <floor+0x96>
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	460b      	mov	r3, r1
 800eafa:	f7f1 fb6b 	bl	80001d4 <__adddf3>
 800eafe:	ec41 0b10 	vmov	d0, r0, r1
 800eb02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb06:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800eb0a:	f04f 37ff 	mov.w	r7, #4294967295
 800eb0e:	40df      	lsrs	r7, r3
 800eb10:	4207      	tst	r7, r0
 800eb12:	d0f4      	beq.n	800eafe <floor+0x96>
 800eb14:	a30e      	add	r3, pc, #56	@ (adr r3, 800eb50 <floor+0xe8>)
 800eb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb1a:	f7f1 fb5b 	bl	80001d4 <__adddf3>
 800eb1e:	2200      	movs	r2, #0
 800eb20:	2300      	movs	r3, #0
 800eb22:	f7f1 ff9d 	bl	8000a60 <__aeabi_dcmpgt>
 800eb26:	2800      	cmp	r0, #0
 800eb28:	d0c2      	beq.n	800eab0 <floor+0x48>
 800eb2a:	2c00      	cmp	r4, #0
 800eb2c:	da0a      	bge.n	800eb44 <floor+0xdc>
 800eb2e:	2e14      	cmp	r6, #20
 800eb30:	d101      	bne.n	800eb36 <floor+0xce>
 800eb32:	3401      	adds	r4, #1
 800eb34:	e006      	b.n	800eb44 <floor+0xdc>
 800eb36:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	40b3      	lsls	r3, r6
 800eb3e:	441d      	add	r5, r3
 800eb40:	4545      	cmp	r5, r8
 800eb42:	d3f6      	bcc.n	800eb32 <floor+0xca>
 800eb44:	ea25 0507 	bic.w	r5, r5, r7
 800eb48:	e7b2      	b.n	800eab0 <floor+0x48>
 800eb4a:	2500      	movs	r5, #0
 800eb4c:	462c      	mov	r4, r5
 800eb4e:	e7af      	b.n	800eab0 <floor+0x48>
 800eb50:	8800759c 	.word	0x8800759c
 800eb54:	7e37e43c 	.word	0x7e37e43c
 800eb58:	bff00000 	.word	0xbff00000
 800eb5c:	000fffff 	.word	0x000fffff

0800eb60 <_init>:
 800eb60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb62:	bf00      	nop
 800eb64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb66:	bc08      	pop	{r3}
 800eb68:	469e      	mov	lr, r3
 800eb6a:	4770      	bx	lr

0800eb6c <_fini>:
 800eb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb6e:	bf00      	nop
 800eb70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb72:	bc08      	pop	{r3}
 800eb74:	469e      	mov	lr, r3
 800eb76:	4770      	bx	lr
