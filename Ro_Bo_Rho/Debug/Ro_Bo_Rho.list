
Ro_Bo_Rho.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bee0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800c068  0800c068  0000d068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0f8  0800c0f8  0000e104  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0f8  0800c0f8  0000d0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c100  0800c100  0000e104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c100  0800c100  0000d100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c104  0800c104  0000d104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000104  20000000  0800c108  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e104  2**0
                  CONTENTS
 10 .bss          00002328  20000104  20000104  0000e104  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000242c  2000242c  0000e104  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e104  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f3d3  00000000  00000000  0000e134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004813  00000000  00000000  0002d507  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bf8  00000000  00000000  00031d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015d0  00000000  00000000  00033918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027714  00000000  00000000  00034ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024eff  00000000  00000000  0005c5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e179a  00000000  00000000  000814fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00162c95  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007704  00000000  00000000  00162cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  0016a3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000104 	.word	0x20000104
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c050 	.word	0x0800c050

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000108 	.word	0x20000108
 80001c4:	0800c050 	.word	0x0800c050

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f001 fd6a 	bl	8001f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f99c 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 fee6 	bl	8001294 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004c8:	f000 fb10 	bl	8000aec <MX_TIM2_Init>
  MX_TIM4_Init();
 80004cc:	f000 fbb6 	bl	8000c3c <MX_TIM4_Init>
  MX_ADC1_Init();
 80004d0:	f000 f9fe 	bl	80008d0 <MX_ADC1_Init>
  MX_SPI2_Init();
 80004d4:	f000 fa7c 	bl	80009d0 <MX_SPI2_Init>
  MX_TIM1_Init();
 80004d8:	f000 fab0 	bl	8000a3c <MX_TIM1_Init>
  MX_TIM8_Init();
 80004dc:	f000 fc56 	bl	8000d8c <MX_TIM8_Init>
  MX_TIM9_Init();
 80004e0:	f000 fcac 	bl	8000e3c <MX_TIM9_Init>
  MX_TIM10_Init();
 80004e4:	f000 fcfa 	bl	8000edc <MX_TIM10_Init>
  MX_TIM11_Init();
 80004e8:	f000 fd46 	bl	8000f78 <MX_TIM11_Init>
  MX_TIM12_Init();
 80004ec:	f000 fd92 	bl	8001014 <MX_TIM12_Init>
  MX_TIM13_Init();
 80004f0:	f000 fde0 	bl	80010b4 <MX_TIM13_Init>
  MX_TIM14_Init();
 80004f4:	f000 fe2c 	bl	8001150 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 80004f8:	f000 fea2 	bl	8001240 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80004fc:	f00b f832 	bl	800b564 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8000500:	f000 fe74 	bl	80011ec <MX_UART4_Init>
  MX_I2C2_Init();
 8000504:	f000 fa36 	bl	8000974 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000508:	f000 fb44 	bl	8000b94 <MX_TIM3_Init>
  MX_TIM5_Init();
 800050c:	f000 fbea 	bl	8000ce4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
   Motor_setup_LF(&htim14   ,&htim5    ,"PC05");
 8000510:	4a9b      	ldr	r2, [pc, #620]	@ (8000780 <main+0x2c8>)
 8000512:	499c      	ldr	r1, [pc, #624]	@ (8000784 <main+0x2cc>)
 8000514:	489c      	ldr	r0, [pc, #624]	@ (8000788 <main+0x2d0>)
 8000516:	f007 fd5d 	bl	8007fd4 <Motor_setup_LF>
   Motor_setup_LB(&htim12   ,&htim1    ,"PE12");
 800051a:	4a9c      	ldr	r2, [pc, #624]	@ (800078c <main+0x2d4>)
 800051c:	499c      	ldr	r1, [pc, #624]	@ (8000790 <main+0x2d8>)
 800051e:	489d      	ldr	r0, [pc, #628]	@ (8000794 <main+0x2dc>)
 8000520:	f007 fd86 	bl	8008030 <Motor_setup_LB>
   Motor_setup_RF(&htim11   ,&htim8    ,"PE01");
 8000524:	4a9c      	ldr	r2, [pc, #624]	@ (8000798 <main+0x2e0>)
 8000526:	499d      	ldr	r1, [pc, #628]	@ (800079c <main+0x2e4>)
 8000528:	489d      	ldr	r0, [pc, #628]	@ (80007a0 <main+0x2e8>)
 800052a:	f007 fdaf 	bl	800808c <Motor_setup_RF>
   Motor_setup_RB(&htim12   ,&htim4    ,"PD09");
 800052e:	4a9d      	ldr	r2, [pc, #628]	@ (80007a4 <main+0x2ec>)
 8000530:	499d      	ldr	r1, [pc, #628]	@ (80007a8 <main+0x2f0>)
 8000532:	4898      	ldr	r0, [pc, #608]	@ (8000794 <main+0x2dc>)
 8000534:	f007 fdd8 	bl	80080e8 <Motor_setup_RB>
   Motor_setup_EXTRA1(&htim9,&htim3    ,"PC13");
 8000538:	4a9c      	ldr	r2, [pc, #624]	@ (80007ac <main+0x2f4>)
 800053a:	499d      	ldr	r1, [pc, #628]	@ (80007b0 <main+0x2f8>)
 800053c:	489d      	ldr	r0, [pc, #628]	@ (80007b4 <main+0x2fc>)
 800053e:	f007 fe01 	bl	8008144 <Motor_setup_EXTRA1>
   Motor_setup_EXTRA2(&htim10,&htim2   ,"PE00");
 8000542:	4a9d      	ldr	r2, [pc, #628]	@ (80007b8 <main+0x300>)
 8000544:	499d      	ldr	r1, [pc, #628]	@ (80007bc <main+0x304>)
 8000546:	489e      	ldr	r0, [pc, #632]	@ (80007c0 <main+0x308>)
 8000548:	f007 fe2a 	bl	80081a0 <Motor_setup_EXTRA2>

   Setup_Gear_Ratio(27);
 800054c:	201b      	movs	r0, #27
 800054e:	f007 fe75 	bl	800823c <Setup_Gear_Ratio>
   Setup_CPR(68);
 8000552:	2044      	movs	r0, #68	@ 0x44
 8000554:	f007 fe62 	bl	800821c <Setup_CPR>
   Setup_frequency_Motor(100);
 8000558:	2064      	movs	r0, #100	@ 0x64
 800055a:	f007 fe7f 	bl	800825c <Setup_frequency_Motor>

   Setup_PID_LF(0.8 ,0.0 ,0.1 ,0 ,300);
 800055e:	ed9f 2a99 	vldr	s4, [pc, #612]	@ 80007c4 <main+0x30c>
 8000562:	eddf 1a99 	vldr	s3, [pc, #612]	@ 80007c8 <main+0x310>
 8000566:	ed9f 1a99 	vldr	s2, [pc, #612]	@ 80007cc <main+0x314>
 800056a:	eddf 0a97 	vldr	s1, [pc, #604]	@ 80007c8 <main+0x310>
 800056e:	ed9f 0a98 	vldr	s0, [pc, #608]	@ 80007d0 <main+0x318>
 8000572:	f007 fef1 	bl	8008358 <Setup_PID_LF>
   Setup_PID_LB(0.8 ,0.0 ,0.1 ,0 ,300);
 8000576:	ed9f 2a93 	vldr	s4, [pc, #588]	@ 80007c4 <main+0x30c>
 800057a:	eddf 1a93 	vldr	s3, [pc, #588]	@ 80007c8 <main+0x310>
 800057e:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 80007cc <main+0x314>
 8000582:	eddf 0a91 	vldr	s1, [pc, #580]	@ 80007c8 <main+0x310>
 8000586:	ed9f 0a92 	vldr	s0, [pc, #584]	@ 80007d0 <main+0x318>
 800058a:	f007 ff11 	bl	80083b0 <Setup_PID_LB>
   Setup_PID_RF(0.8 ,0.0 ,0.1 ,0 ,300);
 800058e:	ed9f 2a8d 	vldr	s4, [pc, #564]	@ 80007c4 <main+0x30c>
 8000592:	eddf 1a8d 	vldr	s3, [pc, #564]	@ 80007c8 <main+0x310>
 8000596:	ed9f 1a8d 	vldr	s2, [pc, #564]	@ 80007cc <main+0x314>
 800059a:	eddf 0a8b 	vldr	s1, [pc, #556]	@ 80007c8 <main+0x310>
 800059e:	ed9f 0a8c 	vldr	s0, [pc, #560]	@ 80007d0 <main+0x318>
 80005a2:	f007 ff31 	bl	8008408 <Setup_PID_RF>
   Setup_PID_RB(0.8 ,0.0 ,0.1 ,0 ,300);
 80005a6:	ed9f 2a87 	vldr	s4, [pc, #540]	@ 80007c4 <main+0x30c>
 80005aa:	eddf 1a87 	vldr	s3, [pc, #540]	@ 80007c8 <main+0x310>
 80005ae:	ed9f 1a87 	vldr	s2, [pc, #540]	@ 80007cc <main+0x314>
 80005b2:	eddf 0a85 	vldr	s1, [pc, #532]	@ 80007c8 <main+0x310>
 80005b6:	ed9f 0a86 	vldr	s0, [pc, #536]	@ 80007d0 <main+0x318>
 80005ba:	f007 ff51 	bl	8008460 <Setup_PID_RB>
//   Setup_PID_EXTRA1(0.5 ,0.1 ,0 ,0 ,280);
//   Setup_PID_EXTRA2(0.5 ,0.1 ,0 ,0 ,280);

   Setup_frequency_Forward_Kinematic(100);
 80005be:	2064      	movs	r0, #100	@ 0x64
 80005c0:	f008 fed8 	bl	8009374 <Setup_frequency_Forward_Kinematic>
   Setup_Forward_Kinematic(0.23f ,0.23f ,0.06f);
 80005c4:	ed9f 1a83 	vldr	s2, [pc, #524]	@ 80007d4 <main+0x31c>
 80005c8:	eddf 0a83 	vldr	s1, [pc, #524]	@ 80007d8 <main+0x320>
 80005cc:	ed9f 0a82 	vldr	s0, [pc, #520]	@ 80007d8 <main+0x320>
 80005d0:	f008 feb2 	bl	8009338 <Setup_Forward_Kinematic>

   Setup_Inverse_Kinematic(0.23f ,0.23f ,0.06f);
 80005d4:	ed9f 1a7f 	vldr	s2, [pc, #508]	@ 80007d4 <main+0x31c>
 80005d8:	eddf 0a7f 	vldr	s1, [pc, #508]	@ 80007d8 <main+0x320>
 80005dc:	ed9f 0a7e 	vldr	s0, [pc, #504]	@ 80007d8 <main+0x320>
 80005e0:	f008 fed8 	bl	8009394 <Setup_Inverse_Kinematic>

   //UAST2 esp_s3_zero to STM32
   HAL_UART_Receive_IT(&huart2, (uint8_t *)&temp_buffer, 1);
 80005e4:	2201      	movs	r2, #1
 80005e6:	497d      	ldr	r1, [pc, #500]	@ (80007dc <main+0x324>)
 80005e8:	487d      	ldr	r0, [pc, #500]	@ (80007e0 <main+0x328>)
 80005ea:	f005 fa87 	bl	8005afc <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if ((uwTick - PastTime) > 10) {
 80005ee:	4b7d      	ldr	r3, [pc, #500]	@ (80007e4 <main+0x32c>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a7d      	ldr	r2, [pc, #500]	@ (80007e8 <main+0x330>)
 80005f4:	6812      	ldr	r2, [r2, #0]
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	2b0a      	cmp	r3, #10
 80005fa:	d9f8      	bls.n	80005ee <main+0x136>
	    PastTime = uwTick;
 80005fc:	4b79      	ldr	r3, [pc, #484]	@ (80007e4 <main+0x32c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	461a      	mov	r2, r3
 8000602:	4b79      	ldr	r3, [pc, #484]	@ (80007e8 <main+0x330>)
 8000604:	601a      	str	r2, [r3, #0]
	    // count[2] = getCount(&htim8);
	    // count[3] = getCount(&htim4);
	    // count[4] = getCount(&htim2);
	    // count[5] = getCount(&htim3);

	    RPM[0] = getRPM_TIM_Wheel(&htim5, LF);
 8000606:	2100      	movs	r1, #0
 8000608:	485e      	ldr	r0, [pc, #376]	@ (8000784 <main+0x2cc>)
 800060a:	f007 fe37 	bl	800827c <getRPM_TIM_Wheel>
 800060e:	eef0 7a40 	vmov.f32	s15, s0
 8000612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000616:	ee17 3a90 	vmov	r3, s15
 800061a:	b21a      	sxth	r2, r3
 800061c:	4b73      	ldr	r3, [pc, #460]	@ (80007ec <main+0x334>)
 800061e:	801a      	strh	r2, [r3, #0]
	    RPM[1] = -getRPM_TIM_Wheel(&htim1, LB);
 8000620:	2101      	movs	r1, #1
 8000622:	485b      	ldr	r0, [pc, #364]	@ (8000790 <main+0x2d8>)
 8000624:	f007 fe2a 	bl	800827c <getRPM_TIM_Wheel>
 8000628:	eef0 7a40 	vmov.f32	s15, s0
 800062c:	eef1 7a67 	vneg.f32	s15, s15
 8000630:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000634:	ee17 3a90 	vmov	r3, s15
 8000638:	b21a      	sxth	r2, r3
 800063a:	4b6c      	ldr	r3, [pc, #432]	@ (80007ec <main+0x334>)
 800063c:	805a      	strh	r2, [r3, #2]
	    RPM[2] = getRPM_TIM_Wheel(&htim8, RF);
 800063e:	2102      	movs	r1, #2
 8000640:	4856      	ldr	r0, [pc, #344]	@ (800079c <main+0x2e4>)
 8000642:	f007 fe1b 	bl	800827c <getRPM_TIM_Wheel>
 8000646:	eef0 7a40 	vmov.f32	s15, s0
 800064a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800064e:	ee17 3a90 	vmov	r3, s15
 8000652:	b21a      	sxth	r2, r3
 8000654:	4b65      	ldr	r3, [pc, #404]	@ (80007ec <main+0x334>)
 8000656:	809a      	strh	r2, [r3, #4]
	    RPM[3] = getRPM_TIM_Wheel(&htim4, RB);
 8000658:	2103      	movs	r1, #3
 800065a:	4853      	ldr	r0, [pc, #332]	@ (80007a8 <main+0x2f0>)
 800065c:	f007 fe0e 	bl	800827c <getRPM_TIM_Wheel>
 8000660:	eef0 7a40 	vmov.f32	s15, s0
 8000664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000668:	ee17 3a90 	vmov	r3, s15
 800066c:	b21a      	sxth	r2, r3
 800066e:	4b5f      	ldr	r3, [pc, #380]	@ (80007ec <main+0x334>)
 8000670:	80da      	strh	r2, [r3, #6]
	    // RPM[5] = getRPM_TIM_Wheel(&htim2, EXTRA2);

	    // Odometry_Forward_Kinematic(getRPM_to_Rad_s(RPM[0]), getRPM_to_Rad_s(RPM[1]), getRPM_to_Rad_s(RPM[2]), getRPM_to_Rad_s(RPM[3]));
	    // x = get_Vz();
#ifdef USE_ROS
	    app_ros_comm_runner();
 8000672:	f008 fead 	bl	80093d0 <app_ros_comm_runner>

	    PID[0] = Motor_Speed_LF((motor_cmdvel_ptr_t.v1/Gear_Ratio), RPM[0]);
 8000676:	4b5e      	ldr	r3, [pc, #376]	@ (80007f0 <main+0x338>)
 8000678:	edd3 6a00 	vldr	s13, [r3]
 800067c:	4b5d      	ldr	r3, [pc, #372]	@ (80007f4 <main+0x33c>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	ee07 3a90 	vmov	s15, r3
 8000684:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000688:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800068c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000690:	ee17 3a90 	vmov	r3, s15
 8000694:	b21b      	sxth	r3, r3
 8000696:	4a55      	ldr	r2, [pc, #340]	@ (80007ec <main+0x334>)
 8000698:	f9b2 2000 	ldrsh.w	r2, [r2]
 800069c:	ee07 2a90 	vmov	s15, r2
 80006a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006a4:	eeb0 0a67 	vmov.f32	s0, s15
 80006a8:	4618      	mov	r0, r3
 80006aa:	f008 f917 	bl	80088dc <Motor_Speed_LF>
 80006ae:	eef0 7a40 	vmov.f32	s15, s0
 80006b2:	4b51      	ldr	r3, [pc, #324]	@ (80007f8 <main+0x340>)
 80006b4:	edc3 7a00 	vstr	s15, [r3]
	    PID[1] = Motor_Speed_LB((motor_cmdvel_ptr_t.v2/Gear_Ratio), RPM[1]);
 80006b8:	4b4d      	ldr	r3, [pc, #308]	@ (80007f0 <main+0x338>)
 80006ba:	edd3 6a01 	vldr	s13, [r3, #4]
 80006be:	4b4d      	ldr	r3, [pc, #308]	@ (80007f4 <main+0x33c>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	ee07 3a90 	vmov	s15, r3
 80006c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006d2:	ee17 3a90 	vmov	r3, s15
 80006d6:	b21b      	sxth	r3, r3
 80006d8:	4a44      	ldr	r2, [pc, #272]	@ (80007ec <main+0x334>)
 80006da:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80006de:	ee07 2a90 	vmov	s15, r2
 80006e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006e6:	eeb0 0a67 	vmov.f32	s0, s15
 80006ea:	4618      	mov	r0, r3
 80006ec:	f008 f968 	bl	80089c0 <Motor_Speed_LB>
 80006f0:	eef0 7a40 	vmov.f32	s15, s0
 80006f4:	4b40      	ldr	r3, [pc, #256]	@ (80007f8 <main+0x340>)
 80006f6:	edc3 7a01 	vstr	s15, [r3, #4]
	    PID[2] = Motor_Speed_RF((motor_cmdvel_ptr_t.v4/Gear_Ratio), RPM[2]);
 80006fa:	4b3d      	ldr	r3, [pc, #244]	@ (80007f0 <main+0x338>)
 80006fc:	edd3 6a03 	vldr	s13, [r3, #12]
 8000700:	4b3c      	ldr	r3, [pc, #240]	@ (80007f4 <main+0x33c>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	ee07 3a90 	vmov	s15, r3
 8000708:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800070c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000714:	ee17 3a90 	vmov	r3, s15
 8000718:	b21b      	sxth	r3, r3
 800071a:	4a34      	ldr	r2, [pc, #208]	@ (80007ec <main+0x334>)
 800071c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000720:	ee07 2a90 	vmov	s15, r2
 8000724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000728:	eeb0 0a67 	vmov.f32	s0, s15
 800072c:	4618      	mov	r0, r3
 800072e:	f008 f9b9 	bl	8008aa4 <Motor_Speed_RF>
 8000732:	eef0 7a40 	vmov.f32	s15, s0
 8000736:	4b30      	ldr	r3, [pc, #192]	@ (80007f8 <main+0x340>)
 8000738:	edc3 7a02 	vstr	s15, [r3, #8]
	    PID[3] = Motor_Speed_RB((motor_cmdvel_ptr_t.v3/Gear_Ratio), RPM[3]);
 800073c:	4b2c      	ldr	r3, [pc, #176]	@ (80007f0 <main+0x338>)
 800073e:	edd3 6a02 	vldr	s13, [r3, #8]
 8000742:	4b2c      	ldr	r3, [pc, #176]	@ (80007f4 <main+0x33c>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	ee07 3a90 	vmov	s15, r3
 800074a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800074e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000752:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000756:	ee17 3a90 	vmov	r3, s15
 800075a:	b21b      	sxth	r3, r3
 800075c:	4a23      	ldr	r2, [pc, #140]	@ (80007ec <main+0x334>)
 800075e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000762:	ee07 2a90 	vmov	s15, r2
 8000766:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800076a:	eeb0 0a67 	vmov.f32	s0, s15
 800076e:	4618      	mov	r0, r3
 8000770:	f008 fa0a 	bl	8008b88 <Motor_Speed_RB>
 8000774:	eef0 7a40 	vmov.f32	s15, s0
 8000778:	4b1f      	ldr	r3, [pc, #124]	@ (80007f8 <main+0x340>)
 800077a:	edc3 7a03 	vstr	s15, [r3, #12]
	  if ((uwTick - PastTime) > 10) {
 800077e:	e736      	b.n	80005ee <main+0x136>
 8000780:	0800c068 	.word	0x0800c068
 8000784:	20000334 	.word	0x20000334
 8000788:	2000052c 	.word	0x2000052c
 800078c:	0800c070 	.word	0x0800c070
 8000790:	20000214 	.word	0x20000214
 8000794:	2000049c 	.word	0x2000049c
 8000798:	0800c078 	.word	0x0800c078
 800079c:	2000037c 	.word	0x2000037c
 80007a0:	20000454 	.word	0x20000454
 80007a4:	0800c080 	.word	0x0800c080
 80007a8:	200002ec 	.word	0x200002ec
 80007ac:	0800c088 	.word	0x0800c088
 80007b0:	200002a4 	.word	0x200002a4
 80007b4:	200003c4 	.word	0x200003c4
 80007b8:	0800c090 	.word	0x0800c090
 80007bc:	2000025c 	.word	0x2000025c
 80007c0:	2000040c 	.word	0x2000040c
 80007c4:	43960000 	.word	0x43960000
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3dcccccd 	.word	0x3dcccccd
 80007d0:	3f4ccccd 	.word	0x3f4ccccd
 80007d4:	3d75c28f 	.word	0x3d75c28f
 80007d8:	3e6b851f 	.word	0x3e6b851f
 80007dc:	20000634 	.word	0x20000634
 80007e0:	200005bc 	.word	0x200005bc
 80007e4:	20000640 	.word	0x20000640
 80007e8:	20000618 	.word	0x20000618
 80007ec:	20000604 	.word	0x20000604
 80007f0:	20000800 	.word	0x20000800
 80007f4:	2000000e 	.word	0x2000000e
 80007f8:	2000061c 	.word	0x2000061c

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b094      	sub	sp, #80	@ 0x50
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	2230      	movs	r2, #48	@ 0x30
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f00b fbe6 	bl	800bfdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	4b28      	ldr	r3, [pc, #160]	@ (80008c8 <SystemClock_Config+0xcc>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000828:	4a27      	ldr	r2, [pc, #156]	@ (80008c8 <SystemClock_Config+0xcc>)
 800082a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800082e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000830:	4b25      	ldr	r3, [pc, #148]	@ (80008c8 <SystemClock_Config+0xcc>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	4b22      	ldr	r3, [pc, #136]	@ (80008cc <SystemClock_Config+0xd0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a21      	ldr	r2, [pc, #132]	@ (80008cc <SystemClock_Config+0xd0>)
 8000846:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b1f      	ldr	r3, [pc, #124]	@ (80008cc <SystemClock_Config+0xd0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800085c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000860:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000866:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800086a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 7;
 800086c:	2307      	movs	r3, #7
 800086e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000870:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000874:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000876:	2304      	movs	r3, #4
 8000878:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800087a:	2308      	movs	r3, #8
 800087c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087e:	f107 0320 	add.w	r3, r7, #32
 8000882:	4618      	mov	r0, r3
 8000884:	f003 fd6e 	bl	8004364 <HAL_RCC_OscConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800088e:	f000 fe2d 	bl	80014ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000892:	230f      	movs	r3, #15
 8000894:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000896:	2302      	movs	r3, #2
 8000898:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800089e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	2103      	movs	r1, #3
 80008b0:	4618      	mov	r0, r3
 80008b2:	f003 ffcf 	bl	8004854 <HAL_RCC_ClockConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008bc:	f000 fe16 	bl	80014ec <Error_Handler>
  }
}
 80008c0:	bf00      	nop
 80008c2:	3750      	adds	r7, #80	@ 0x50
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000

080008d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008d6:	463b      	mov	r3, r7
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008e2:	4b21      	ldr	r3, [pc, #132]	@ (8000968 <MX_ADC1_Init+0x98>)
 80008e4:	4a21      	ldr	r2, [pc, #132]	@ (800096c <MX_ADC1_Init+0x9c>)
 80008e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000968 <MX_ADC1_Init+0x98>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000968 <MX_ADC1_Init+0x98>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000968 <MX_ADC1_Init+0x98>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <MX_ADC1_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000900:	4b19      	ldr	r3, [pc, #100]	@ (8000968 <MX_ADC1_Init+0x98>)
 8000902:	2200      	movs	r2, #0
 8000904:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000908:	4b17      	ldr	r3, [pc, #92]	@ (8000968 <MX_ADC1_Init+0x98>)
 800090a:	2200      	movs	r2, #0
 800090c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800090e:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <MX_ADC1_Init+0x98>)
 8000910:	4a17      	ldr	r2, [pc, #92]	@ (8000970 <MX_ADC1_Init+0xa0>)
 8000912:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000914:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <MX_ADC1_Init+0x98>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800091a:	4b13      	ldr	r3, [pc, #76]	@ (8000968 <MX_ADC1_Init+0x98>)
 800091c:	2201      	movs	r2, #1
 800091e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000920:	4b11      	ldr	r3, [pc, #68]	@ (8000968 <MX_ADC1_Init+0x98>)
 8000922:	2200      	movs	r2, #0
 8000924:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000928:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <MX_ADC1_Init+0x98>)
 800092a:	2201      	movs	r2, #1
 800092c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800092e:	480e      	ldr	r0, [pc, #56]	@ (8000968 <MX_ADC1_Init+0x98>)
 8000930:	f001 fbc6 	bl	80020c0 <HAL_ADC_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800093a:	f000 fdd7 	bl	80014ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800093e:	2304      	movs	r3, #4
 8000940:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000942:	2301      	movs	r3, #1
 8000944:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094a:	463b      	mov	r3, r7
 800094c:	4619      	mov	r1, r3
 800094e:	4806      	ldr	r0, [pc, #24]	@ (8000968 <MX_ADC1_Init+0x98>)
 8000950:	f001 fbfa 	bl	8002148 <HAL_ADC_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800095a:	f000 fdc7 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000120 	.word	0x20000120
 800096c:	40012000 	.word	0x40012000
 8000970:	0f000001 	.word	0x0f000001

08000974 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000978:	4b12      	ldr	r3, [pc, #72]	@ (80009c4 <MX_I2C2_Init+0x50>)
 800097a:	4a13      	ldr	r2, [pc, #76]	@ (80009c8 <MX_I2C2_Init+0x54>)
 800097c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800097e:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <MX_I2C2_Init+0x50>)
 8000980:	4a12      	ldr	r2, [pc, #72]	@ (80009cc <MX_I2C2_Init+0x58>)
 8000982:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000984:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <MX_I2C2_Init+0x50>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800098a:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_I2C2_Init+0x50>)
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000990:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <MX_I2C2_Init+0x50>)
 8000992:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000996:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000998:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <MX_I2C2_Init+0x50>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <MX_I2C2_Init+0x50>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009a4:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <MX_I2C2_Init+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <MX_I2C2_Init+0x50>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009b0:	4804      	ldr	r0, [pc, #16]	@ (80009c4 <MX_I2C2_Init+0x50>)
 80009b2:	f002 f941 	bl	8002c38 <HAL_I2C_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80009bc:	f000 fd96 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20000168 	.word	0x20000168
 80009c8:	40005800 	.word	0x40005800
 80009cc:	000186a0 	.word	0x000186a0

080009d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009d4:	4b17      	ldr	r3, [pc, #92]	@ (8000a34 <MX_SPI2_Init+0x64>)
 80009d6:	4a18      	ldr	r2, [pc, #96]	@ (8000a38 <MX_SPI2_Init+0x68>)
 80009d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009da:	4b16      	ldr	r3, [pc, #88]	@ (8000a34 <MX_SPI2_Init+0x64>)
 80009dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009e2:	4b14      	ldr	r3, [pc, #80]	@ (8000a34 <MX_SPI2_Init+0x64>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009e8:	4b12      	ldr	r3, [pc, #72]	@ (8000a34 <MX_SPI2_Init+0x64>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ee:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_SPI2_Init+0x64>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a34 <MX_SPI2_Init+0x64>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_SPI2_Init+0x64>)
 80009fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a02:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <MX_SPI2_Init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	@ (8000a34 <MX_SPI2_Init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_SPI2_Init+0x64>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a14:	4b07      	ldr	r3, [pc, #28]	@ (8000a34 <MX_SPI2_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_SPI2_Init+0x64>)
 8000a1c:	220a      	movs	r2, #10
 8000a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	@ (8000a34 <MX_SPI2_Init+0x64>)
 8000a22:	f004 f937 	bl	8004c94 <HAL_SPI_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a2c:	f000 fd5e 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200001bc 	.word	0x200001bc
 8000a38:	40003800 	.word	0x40003800

08000a3c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	@ 0x30
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	2224      	movs	r2, #36	@ 0x24
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f00b fac6 	bl	800bfdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a58:	4b22      	ldr	r3, [pc, #136]	@ (8000ae4 <MX_TIM1_Init+0xa8>)
 8000a5a:	4a23      	ldr	r2, [pc, #140]	@ (8000ae8 <MX_TIM1_Init+0xac>)
 8000a5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <MX_TIM1_Init+0xa8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae4 <MX_TIM1_Init+0xa8>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae4 <MX_TIM1_Init+0xa8>)
 8000a6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <MX_TIM1_Init+0xa8>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <MX_TIM1_Init+0xa8>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <MX_TIM1_Init+0xa8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a84:	2303      	movs	r3, #3
 8000a86:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	4619      	mov	r1, r3
 8000aae:	480d      	ldr	r0, [pc, #52]	@ (8000ae4 <MX_TIM1_Init+0xa8>)
 8000ab0:	f004 fae0 	bl	8005074 <HAL_TIM_Encoder_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000aba:	f000 fd17 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4806      	ldr	r0, [pc, #24]	@ (8000ae4 <MX_TIM1_Init+0xa8>)
 8000acc:	f004 ff4a 	bl	8005964 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000ad6:	f000 fd09 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	3730      	adds	r7, #48	@ 0x30
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000214 	.word	0x20000214
 8000ae8:	40010000 	.word	0x40010000

08000aec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08c      	sub	sp, #48	@ 0x30
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000af2:	f107 030c 	add.w	r3, r7, #12
 8000af6:	2224      	movs	r2, #36	@ 0x24
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f00b fa6e 	bl	800bfdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b08:	4b21      	ldr	r3, [pc, #132]	@ (8000b90 <MX_TIM2_Init+0xa4>)
 8000b0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b10:	4b1f      	ldr	r3, [pc, #124]	@ (8000b90 <MX_TIM2_Init+0xa4>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b16:	4b1e      	ldr	r3, [pc, #120]	@ (8000b90 <MX_TIM2_Init+0xa4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <MX_TIM2_Init+0xa4>)
 8000b1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b24:	4b1a      	ldr	r3, [pc, #104]	@ (8000b90 <MX_TIM2_Init+0xa4>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2a:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <MX_TIM2_Init+0xa4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b30:	2303      	movs	r3, #3
 8000b32:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b34:	2300      	movs	r3, #0
 8000b36:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480d      	ldr	r0, [pc, #52]	@ (8000b90 <MX_TIM2_Init+0xa4>)
 8000b5c:	f004 fa8a 	bl	8005074 <HAL_TIM_Encoder_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000b66:	f000 fcc1 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	4619      	mov	r1, r3
 8000b76:	4806      	ldr	r0, [pc, #24]	@ (8000b90 <MX_TIM2_Init+0xa4>)
 8000b78:	f004 fef4 	bl	8005964 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000b82:	f000 fcb3 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	3730      	adds	r7, #48	@ 0x30
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2000025c 	.word	0x2000025c

08000b94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	@ 0x30
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	2224      	movs	r2, #36	@ 0x24
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f00b fa1a 	bl	800bfdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bb0:	4b20      	ldr	r3, [pc, #128]	@ (8000c34 <MX_TIM3_Init+0xa0>)
 8000bb2:	4a21      	ldr	r2, [pc, #132]	@ (8000c38 <MX_TIM3_Init+0xa4>)
 8000bb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <MX_TIM3_Init+0xa0>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <MX_TIM3_Init+0xa0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <MX_TIM3_Init+0xa0>)
 8000bc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bc8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <MX_TIM3_Init+0xa0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <MX_TIM3_Init+0xa0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bde:	2301      	movs	r3, #1
 8000be0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <MX_TIM3_Init+0xa0>)
 8000c02:	f004 fa37 	bl	8005074 <HAL_TIM_Encoder_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000c0c:	f000 fc6e 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c10:	2300      	movs	r3, #0
 8000c12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <MX_TIM3_Init+0xa0>)
 8000c1e:	f004 fea1 	bl	8005964 <HAL_TIMEx_MasterConfigSynchronization>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000c28:	f000 fc60 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c2c:	bf00      	nop
 8000c2e:	3730      	adds	r7, #48	@ 0x30
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	200002a4 	.word	0x200002a4
 8000c38:	40000400 	.word	0x40000400

08000c3c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	@ 0x30
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	2224      	movs	r2, #36	@ 0x24
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f00b f9c6 	bl	800bfdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c58:	4b20      	ldr	r3, [pc, #128]	@ (8000cdc <MX_TIM4_Init+0xa0>)
 8000c5a:	4a21      	ldr	r2, [pc, #132]	@ (8000ce0 <MX_TIM4_Init+0xa4>)
 8000c5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <MX_TIM4_Init+0xa0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c64:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <MX_TIM4_Init+0xa0>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <MX_TIM4_Init+0xa0>)
 8000c6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c70:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c72:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <MX_TIM4_Init+0xa0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c78:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <MX_TIM4_Init+0xa0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c82:	2300      	movs	r3, #0
 8000c84:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c86:	2301      	movs	r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c96:	2301      	movs	r3, #1
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000ca2:	f107 030c 	add.w	r3, r7, #12
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480c      	ldr	r0, [pc, #48]	@ (8000cdc <MX_TIM4_Init+0xa0>)
 8000caa:	f004 f9e3 	bl	8005074 <HAL_TIM_Encoder_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000cb4:	f000 fc1a 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	@ (8000cdc <MX_TIM4_Init+0xa0>)
 8000cc6:	f004 fe4d 	bl	8005964 <HAL_TIMEx_MasterConfigSynchronization>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000cd0:	f000 fc0c 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cd4:	bf00      	nop
 8000cd6:	3730      	adds	r7, #48	@ 0x30
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200002ec 	.word	0x200002ec
 8000ce0:	40000800 	.word	0x40000800

08000ce4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08c      	sub	sp, #48	@ 0x30
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	2224      	movs	r2, #36	@ 0x24
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f00b f972 	bl	800bfdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000d00:	4b20      	ldr	r3, [pc, #128]	@ (8000d84 <MX_TIM5_Init+0xa0>)
 8000d02:	4a21      	ldr	r2, [pc, #132]	@ (8000d88 <MX_TIM5_Init+0xa4>)
 8000d04:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000d06:	4b1f      	ldr	r3, [pc, #124]	@ (8000d84 <MX_TIM5_Init+0xa0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <MX_TIM5_Init+0xa0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	@ (8000d84 <MX_TIM5_Init+0xa0>)
 8000d14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d18:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <MX_TIM5_Init+0xa0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d20:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <MX_TIM5_Init+0xa0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d26:	2303      	movs	r3, #3
 8000d28:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480c      	ldr	r0, [pc, #48]	@ (8000d84 <MX_TIM5_Init+0xa0>)
 8000d52:	f004 f98f 	bl	8005074 <HAL_TIM_Encoder_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000d5c:	f000 fbc6 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d60:	2300      	movs	r3, #0
 8000d62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <MX_TIM5_Init+0xa0>)
 8000d6e:	f004 fdf9 	bl	8005964 <HAL_TIMEx_MasterConfigSynchronization>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000d78:	f000 fbb8 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	3730      	adds	r7, #48	@ 0x30
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000334 	.word	0x20000334
 8000d88:	40000c00 	.word	0x40000c00

08000d8c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08c      	sub	sp, #48	@ 0x30
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	2224      	movs	r2, #36	@ 0x24
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f00b f91e 	bl	800bfdc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000da8:	4b22      	ldr	r3, [pc, #136]	@ (8000e34 <MX_TIM8_Init+0xa8>)
 8000daa:	4a23      	ldr	r2, [pc, #140]	@ (8000e38 <MX_TIM8_Init+0xac>)
 8000dac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000dae:	4b21      	ldr	r3, [pc, #132]	@ (8000e34 <MX_TIM8_Init+0xa8>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e34 <MX_TIM8_Init+0xa8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000dba:	4b1e      	ldr	r3, [pc, #120]	@ (8000e34 <MX_TIM8_Init+0xa8>)
 8000dbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dc0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e34 <MX_TIM8_Init+0xa8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e34 <MX_TIM8_Init+0xa8>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <MX_TIM8_Init+0xa8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dec:	2301      	movs	r3, #1
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000df8:	f107 030c 	add.w	r3, r7, #12
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	480d      	ldr	r0, [pc, #52]	@ (8000e34 <MX_TIM8_Init+0xa8>)
 8000e00:	f004 f938 	bl	8005074 <HAL_TIM_Encoder_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8000e0a:	f000 fb6f 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4806      	ldr	r0, [pc, #24]	@ (8000e34 <MX_TIM8_Init+0xa8>)
 8000e1c:	f004 fda2 	bl	8005964 <HAL_TIMEx_MasterConfigSynchronization>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8000e26:	f000 fb61 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	3730      	adds	r7, #48	@ 0x30
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	2000037c 	.word	0x2000037c
 8000e38:	40010400 	.word	0x40010400

08000e3c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
 8000e50:	615a      	str	r2, [r3, #20]
 8000e52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000e54:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed4 <MX_TIM9_Init+0x98>)
 8000e56:	4a20      	ldr	r2, [pc, #128]	@ (8000ed8 <MX_TIM9_Init+0x9c>)
 8000e58:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 2-1;
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed4 <MX_TIM9_Init+0x98>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e60:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed4 <MX_TIM9_Init+0x98>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4096-1;
 8000e66:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed4 <MX_TIM9_Init+0x98>)
 8000e68:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000e6c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6e:	4b19      	ldr	r3, [pc, #100]	@ (8000ed4 <MX_TIM9_Init+0x98>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e74:	4b17      	ldr	r3, [pc, #92]	@ (8000ed4 <MX_TIM9_Init+0x98>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000e7a:	4816      	ldr	r0, [pc, #88]	@ (8000ed4 <MX_TIM9_Init+0x98>)
 8000e7c:	f003 ffe2 	bl	8004e44 <HAL_TIM_PWM_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8000e86:	f000 fb31 	bl	80014ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e8a:	2360      	movs	r3, #96	@ 0x60
 8000e8c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480c      	ldr	r0, [pc, #48]	@ (8000ed4 <MX_TIM9_Init+0x98>)
 8000ea2:	f004 fa1b 	bl	80052dc <HAL_TIM_PWM_ConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8000eac:	f000 fb1e 	bl	80014ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4807      	ldr	r0, [pc, #28]	@ (8000ed4 <MX_TIM9_Init+0x98>)
 8000eb8:	f004 fa10 	bl	80052dc <HAL_TIM_PWM_ConfigChannel>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8000ec2:	f000 fb13 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000ec6:	4803      	ldr	r0, [pc, #12]	@ (8000ed4 <MX_TIM9_Init+0x98>)
 8000ec8:	f000 fe60 	bl	8001b8c <HAL_TIM_MspPostInit>

}
 8000ecc:	bf00      	nop
 8000ece:	3720      	adds	r7, #32
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	200003c4 	.word	0x200003c4
 8000ed8:	40014000 	.word	0x40014000

08000edc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
 8000ef0:	615a      	str	r2, [r3, #20]
 8000ef2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f70 <MX_TIM10_Init+0x94>)
 8000ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8000f74 <MX_TIM10_Init+0x98>)
 8000ef8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 2-1;
 8000efa:	4b1d      	ldr	r3, [pc, #116]	@ (8000f70 <MX_TIM10_Init+0x94>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	@ (8000f70 <MX_TIM10_Init+0x94>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4096-1;
 8000f06:	4b1a      	ldr	r3, [pc, #104]	@ (8000f70 <MX_TIM10_Init+0x94>)
 8000f08:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000f0c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0e:	4b18      	ldr	r3, [pc, #96]	@ (8000f70 <MX_TIM10_Init+0x94>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f14:	4b16      	ldr	r3, [pc, #88]	@ (8000f70 <MX_TIM10_Init+0x94>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f1a:	4815      	ldr	r0, [pc, #84]	@ (8000f70 <MX_TIM10_Init+0x94>)
 8000f1c:	f003 ff43 	bl	8004da6 <HAL_TIM_Base_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8000f26:	f000 fae1 	bl	80014ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8000f2a:	4811      	ldr	r0, [pc, #68]	@ (8000f70 <MX_TIM10_Init+0x94>)
 8000f2c:	f003 ff8a 	bl	8004e44 <HAL_TIM_PWM_Init>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8000f36:	f000 fad9 	bl	80014ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f3a:	2360      	movs	r3, #96	@ 0x60
 8000f3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4807      	ldr	r0, [pc, #28]	@ (8000f70 <MX_TIM10_Init+0x94>)
 8000f52:	f004 f9c3 	bl	80052dc <HAL_TIM_PWM_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8000f5c:	f000 fac6 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000f60:	4803      	ldr	r0, [pc, #12]	@ (8000f70 <MX_TIM10_Init+0x94>)
 8000f62:	f000 fe13 	bl	8001b8c <HAL_TIM_MspPostInit>

}
 8000f66:	bf00      	nop
 8000f68:	3720      	adds	r7, #32
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2000040c 	.word	0x2000040c
 8000f74:	40014400 	.word	0x40014400

08000f78 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
 8000f8c:	615a      	str	r2, [r3, #20]
 8000f8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000f90:	4b1e      	ldr	r3, [pc, #120]	@ (800100c <MX_TIM11_Init+0x94>)
 8000f92:	4a1f      	ldr	r2, [pc, #124]	@ (8001010 <MX_TIM11_Init+0x98>)
 8000f94:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2-1;
 8000f96:	4b1d      	ldr	r3, [pc, #116]	@ (800100c <MX_TIM11_Init+0x94>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800100c <MX_TIM11_Init+0x94>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 4096-1;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <MX_TIM11_Init+0x94>)
 8000fa4:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000fa8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000faa:	4b18      	ldr	r3, [pc, #96]	@ (800100c <MX_TIM11_Init+0x94>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	@ (800100c <MX_TIM11_Init+0x94>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000fb6:	4815      	ldr	r0, [pc, #84]	@ (800100c <MX_TIM11_Init+0x94>)
 8000fb8:	f003 fef5 	bl	8004da6 <HAL_TIM_Base_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8000fc2:	f000 fa93 	bl	80014ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8000fc6:	4811      	ldr	r0, [pc, #68]	@ (800100c <MX_TIM11_Init+0x94>)
 8000fc8:	f003 ff3c 	bl	8004e44 <HAL_TIM_PWM_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8000fd2:	f000 fa8b 	bl	80014ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd6:	2360      	movs	r3, #96	@ 0x60
 8000fd8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4619      	mov	r1, r3
 8000fec:	4807      	ldr	r0, [pc, #28]	@ (800100c <MX_TIM11_Init+0x94>)
 8000fee:	f004 f975 	bl	80052dc <HAL_TIM_PWM_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8000ff8:	f000 fa78 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8000ffc:	4803      	ldr	r0, [pc, #12]	@ (800100c <MX_TIM11_Init+0x94>)
 8000ffe:	f000 fdc5 	bl	8001b8c <HAL_TIM_MspPostInit>

}
 8001002:	bf00      	nop
 8001004:	3720      	adds	r7, #32
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000454 	.word	0x20000454
 8001010:	40014800 	.word	0x40014800

08001014 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800101a:	1d3b      	adds	r3, r7, #4
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
 8001028:	615a      	str	r2, [r3, #20]
 800102a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800102c:	4b1f      	ldr	r3, [pc, #124]	@ (80010ac <MX_TIM12_Init+0x98>)
 800102e:	4a20      	ldr	r2, [pc, #128]	@ (80010b0 <MX_TIM12_Init+0x9c>)
 8001030:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 2-1;
 8001032:	4b1e      	ldr	r3, [pc, #120]	@ (80010ac <MX_TIM12_Init+0x98>)
 8001034:	2201      	movs	r2, #1
 8001036:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001038:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <MX_TIM12_Init+0x98>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4096-1;
 800103e:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <MX_TIM12_Init+0x98>)
 8001040:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001044:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001046:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <MX_TIM12_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104c:	4b17      	ldr	r3, [pc, #92]	@ (80010ac <MX_TIM12_Init+0x98>)
 800104e:	2200      	movs	r2, #0
 8001050:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001052:	4816      	ldr	r0, [pc, #88]	@ (80010ac <MX_TIM12_Init+0x98>)
 8001054:	f003 fef6 	bl	8004e44 <HAL_TIM_PWM_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800105e:	f000 fa45 	bl	80014ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001062:	2360      	movs	r3, #96	@ 0x60
 8001064:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2200      	movs	r2, #0
 8001076:	4619      	mov	r1, r3
 8001078:	480c      	ldr	r0, [pc, #48]	@ (80010ac <MX_TIM12_Init+0x98>)
 800107a:	f004 f92f 	bl	80052dc <HAL_TIM_PWM_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001084:	f000 fa32 	bl	80014ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2204      	movs	r2, #4
 800108c:	4619      	mov	r1, r3
 800108e:	4807      	ldr	r0, [pc, #28]	@ (80010ac <MX_TIM12_Init+0x98>)
 8001090:	f004 f924 	bl	80052dc <HAL_TIM_PWM_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800109a:	f000 fa27 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800109e:	4803      	ldr	r0, [pc, #12]	@ (80010ac <MX_TIM12_Init+0x98>)
 80010a0:	f000 fd74 	bl	8001b8c <HAL_TIM_MspPostInit>

}
 80010a4:	bf00      	nop
 80010a6:	3720      	adds	r7, #32
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2000049c 	.word	0x2000049c
 80010b0:	40001800 	.word	0x40001800

080010b4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
 80010c8:	615a      	str	r2, [r3, #20]
 80010ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80010cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001148 <MX_TIM13_Init+0x94>)
 80010ce:	4a1f      	ldr	r2, [pc, #124]	@ (800114c <MX_TIM13_Init+0x98>)
 80010d0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2-1;
 80010d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001148 <MX_TIM13_Init+0x94>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <MX_TIM13_Init+0x94>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 4096-1;
 80010de:	4b1a      	ldr	r3, [pc, #104]	@ (8001148 <MX_TIM13_Init+0x94>)
 80010e0:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80010e4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e6:	4b18      	ldr	r3, [pc, #96]	@ (8001148 <MX_TIM13_Init+0x94>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ec:	4b16      	ldr	r3, [pc, #88]	@ (8001148 <MX_TIM13_Init+0x94>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80010f2:	4815      	ldr	r0, [pc, #84]	@ (8001148 <MX_TIM13_Init+0x94>)
 80010f4:	f003 fe57 	bl	8004da6 <HAL_TIM_Base_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80010fe:	f000 f9f5 	bl	80014ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001102:	4811      	ldr	r0, [pc, #68]	@ (8001148 <MX_TIM13_Init+0x94>)
 8001104:	f003 fe9e 	bl	8004e44 <HAL_TIM_PWM_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800110e:	f000 f9ed 	bl	80014ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001112:	2360      	movs	r3, #96	@ 0x60
 8001114:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2200      	movs	r2, #0
 8001126:	4619      	mov	r1, r3
 8001128:	4807      	ldr	r0, [pc, #28]	@ (8001148 <MX_TIM13_Init+0x94>)
 800112a:	f004 f8d7 	bl	80052dc <HAL_TIM_PWM_ConfigChannel>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001134:	f000 f9da 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001138:	4803      	ldr	r0, [pc, #12]	@ (8001148 <MX_TIM13_Init+0x94>)
 800113a:	f000 fd27 	bl	8001b8c <HAL_TIM_MspPostInit>

}
 800113e:	bf00      	nop
 8001140:	3720      	adds	r7, #32
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200004e4 	.word	0x200004e4
 800114c:	40001c00 	.word	0x40001c00

08001150 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
 8001164:	615a      	str	r2, [r3, #20]
 8001166:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001168:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <MX_TIM14_Init+0x94>)
 800116a:	4a1f      	ldr	r2, [pc, #124]	@ (80011e8 <MX_TIM14_Init+0x98>)
 800116c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 2-1;
 800116e:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <MX_TIM14_Init+0x94>)
 8001170:	2201      	movs	r2, #1
 8001172:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001174:	4b1b      	ldr	r3, [pc, #108]	@ (80011e4 <MX_TIM14_Init+0x94>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4096-1;
 800117a:	4b1a      	ldr	r3, [pc, #104]	@ (80011e4 <MX_TIM14_Init+0x94>)
 800117c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001180:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001182:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <MX_TIM14_Init+0x94>)
 8001184:	2200      	movs	r2, #0
 8001186:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001188:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <MX_TIM14_Init+0x94>)
 800118a:	2200      	movs	r2, #0
 800118c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800118e:	4815      	ldr	r0, [pc, #84]	@ (80011e4 <MX_TIM14_Init+0x94>)
 8001190:	f003 fe09 	bl	8004da6 <HAL_TIM_Base_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 800119a:	f000 f9a7 	bl	80014ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800119e:	4811      	ldr	r0, [pc, #68]	@ (80011e4 <MX_TIM14_Init+0x94>)
 80011a0:	f003 fe50 	bl	8004e44 <HAL_TIM_PWM_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80011aa:	f000 f99f 	bl	80014ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ae:	2360      	movs	r3, #96	@ 0x60
 80011b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2200      	movs	r2, #0
 80011c2:	4619      	mov	r1, r3
 80011c4:	4807      	ldr	r0, [pc, #28]	@ (80011e4 <MX_TIM14_Init+0x94>)
 80011c6:	f004 f889 	bl	80052dc <HAL_TIM_PWM_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80011d0:	f000 f98c 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80011d4:	4803      	ldr	r0, [pc, #12]	@ (80011e4 <MX_TIM14_Init+0x94>)
 80011d6:	f000 fcd9 	bl	8001b8c <HAL_TIM_MspPostInit>

}
 80011da:	bf00      	nop
 80011dc:	3720      	adds	r7, #32
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000052c 	.word	0x2000052c
 80011e8:	40002000 	.word	0x40002000

080011ec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80011f0:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <MX_UART4_Init+0x4c>)
 80011f2:	4a12      	ldr	r2, [pc, #72]	@ (800123c <MX_UART4_Init+0x50>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80011f6:	4b10      	ldr	r3, [pc, #64]	@ (8001238 <MX_UART4_Init+0x4c>)
 80011f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <MX_UART4_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <MX_UART4_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800120a:	4b0b      	ldr	r3, [pc, #44]	@ (8001238 <MX_UART4_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <MX_UART4_Init+0x4c>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b08      	ldr	r3, [pc, #32]	@ (8001238 <MX_UART4_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <MX_UART4_Init+0x4c>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001222:	4805      	ldr	r0, [pc, #20]	@ (8001238 <MX_UART4_Init+0x4c>)
 8001224:	f004 fc1a 	bl	8005a5c <HAL_UART_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800122e:	f000 f95d 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000574 	.word	0x20000574
 800123c:	40004c00 	.word	0x40004c00

08001240 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001244:	4b11      	ldr	r3, [pc, #68]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 8001246:	4a12      	ldr	r2, [pc, #72]	@ (8001290 <MX_USART2_UART_Init+0x50>)
 8001248:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800124a:	4b10      	ldr	r3, [pc, #64]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 800124c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001250:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001252:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001258:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001264:	4b09      	ldr	r3, [pc, #36]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 8001266:	2204      	movs	r2, #4
 8001268:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 8001272:	2200      	movs	r2, #0
 8001274:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	@ (800128c <MX_USART2_UART_Init+0x4c>)
 8001278:	f004 fbf0 	bl	8005a5c <HAL_UART_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001282:	f000 f933 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200005bc 	.word	0x200005bc
 8001290:	40004400 	.word	0x40004400

08001294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08c      	sub	sp, #48	@ 0x30
 8001298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
 80012a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
 80012ae:	4b54      	ldr	r3, [pc, #336]	@ (8001400 <MX_GPIO_Init+0x16c>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a53      	ldr	r2, [pc, #332]	@ (8001400 <MX_GPIO_Init+0x16c>)
 80012b4:	f043 0310 	orr.w	r3, r3, #16
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b51      	ldr	r3, [pc, #324]	@ (8001400 <MX_GPIO_Init+0x16c>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0310 	and.w	r3, r3, #16
 80012c2:	61bb      	str	r3, [r7, #24]
 80012c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
 80012ca:	4b4d      	ldr	r3, [pc, #308]	@ (8001400 <MX_GPIO_Init+0x16c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	4a4c      	ldr	r2, [pc, #304]	@ (8001400 <MX_GPIO_Init+0x16c>)
 80012d0:	f043 0304 	orr.w	r3, r3, #4
 80012d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001400 <MX_GPIO_Init+0x16c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	4b46      	ldr	r3, [pc, #280]	@ (8001400 <MX_GPIO_Init+0x16c>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	4a45      	ldr	r2, [pc, #276]	@ (8001400 <MX_GPIO_Init+0x16c>)
 80012ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f2:	4b43      	ldr	r3, [pc, #268]	@ (8001400 <MX_GPIO_Init+0x16c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	4b3f      	ldr	r3, [pc, #252]	@ (8001400 <MX_GPIO_Init+0x16c>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	4a3e      	ldr	r2, [pc, #248]	@ (8001400 <MX_GPIO_Init+0x16c>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6313      	str	r3, [r2, #48]	@ 0x30
 800130e:	4b3c      	ldr	r3, [pc, #240]	@ (8001400 <MX_GPIO_Init+0x16c>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	4b38      	ldr	r3, [pc, #224]	@ (8001400 <MX_GPIO_Init+0x16c>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	4a37      	ldr	r2, [pc, #220]	@ (8001400 <MX_GPIO_Init+0x16c>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	6313      	str	r3, [r2, #48]	@ 0x30
 800132a:	4b35      	ldr	r3, [pc, #212]	@ (8001400 <MX_GPIO_Init+0x16c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b31      	ldr	r3, [pc, #196]	@ (8001400 <MX_GPIO_Init+0x16c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a30      	ldr	r2, [pc, #192]	@ (8001400 <MX_GPIO_Init+0x16c>)
 8001340:	f043 0308 	orr.w	r3, r3, #8
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b2e      	ldr	r3, [pc, #184]	@ (8001400 <MX_GPIO_Init+0x16c>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CE_1_Pin|CE_2_Pin|GPIO_PIN_7|GPIO_PIN_8
 8001352:	2200      	movs	r2, #0
 8001354:	f24b 518f 	movw	r1, #46479	@ 0xb58f
 8001358:	482a      	ldr	r0, [pc, #168]	@ (8001404 <MX_GPIO_Init+0x170>)
 800135a:	f001 fc53 	bl	8002c04 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|LB_DIGI_R_Pin|GPIO_PIN_13|GPIO_PIN_15
                          |EXTRA2_DIGI_R_Pin|RF_DIGI_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EXTRA1_DIGI_R_Pin|LF_DIGI_R_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	f242 0120 	movw	r1, #8224	@ 0x2020
 8001364:	4828      	ldr	r0, [pc, #160]	@ (8001408 <MX_GPIO_Init+0x174>)
 8001366:	f001 fc4d 	bl	8002c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2101      	movs	r1, #1
 800136e:	4827      	ldr	r0, [pc, #156]	@ (800140c <MX_GPIO_Init+0x178>)
 8001370:	f001 fc48 	bl	8002c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RB_DIGI_R_GPIO_Port, RB_DIGI_R_Pin, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800137a:	4825      	ldr	r0, [pc, #148]	@ (8001410 <MX_GPIO_Init+0x17c>)
 800137c:	f001 fc42 	bl	8002c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_1_Pin CE_2_Pin PE7 PE8
                           PE10 LB_DIGI_R_Pin PE13 PE15
                           EXTRA2_DIGI_R_Pin RF_DIGI_R_Pin */
  GPIO_InitStruct.Pin = CE_1_Pin|CE_2_Pin|GPIO_PIN_7|GPIO_PIN_8
 8001380:	f24b 538f 	movw	r3, #46479	@ 0xb58f
 8001384:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|LB_DIGI_R_Pin|GPIO_PIN_13|GPIO_PIN_15
                          |EXTRA2_DIGI_R_Pin|RF_DIGI_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	2301      	movs	r3, #1
 8001388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	4619      	mov	r1, r3
 8001398:	481a      	ldr	r0, [pc, #104]	@ (8001404 <MX_GPIO_Init+0x170>)
 800139a:	f001 fa97 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTRA1_DIGI_R_Pin LF_DIGI_R_Pin */
  GPIO_InitStruct.Pin = EXTRA1_DIGI_R_Pin|LF_DIGI_R_Pin;
 800139e:	f242 0320 	movw	r3, #8224	@ 0x2020
 80013a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	4619      	mov	r1, r3
 80013b6:	4814      	ldr	r0, [pc, #80]	@ (8001408 <MX_GPIO_Init+0x174>)
 80013b8:	f001 fa88 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013bc:	2301      	movs	r3, #1
 80013be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	480e      	ldr	r0, [pc, #56]	@ (800140c <MX_GPIO_Init+0x178>)
 80013d4:	f001 fa7a 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pin : RB_DIGI_R_Pin */
  GPIO_InitStruct.Pin = RB_DIGI_R_Pin;
 80013d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RB_DIGI_R_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	4807      	ldr	r0, [pc, #28]	@ (8001410 <MX_GPIO_Init+0x17c>)
 80013f2:	f001 fa6b 	bl	80028cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013f6:	bf00      	nop
 80013f8:	3730      	adds	r7, #48	@ 0x30
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800
 8001404:	40021000 	.word	0x40021000
 8001408:	40020800 	.word	0x40020800
 800140c:	40020400 	.word	0x40020400
 8001410:	40020c00 	.word	0x40020c00

08001414 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a28      	ldr	r2, [pc, #160]	@ (80014c4 <HAL_UART_RxCpltCallback+0xb0>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d14a      	bne.n	80014bc <HAL_UART_RxCpltCallback+0xa8>
		last_uart_data_time = uwTick;
 8001426:	4b28      	ldr	r3, [pc, #160]	@ (80014c8 <HAL_UART_RxCpltCallback+0xb4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a28      	ldr	r2, [pc, #160]	@ (80014cc <HAL_UART_RxCpltCallback+0xb8>)
 800142c:	6013      	str	r3, [r2, #0]
		uart_resetting = 0;
 800142e:	4b28      	ldr	r3, [pc, #160]	@ (80014d0 <HAL_UART_RxCpltCallback+0xbc>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]

		// Check for RB header
		switch (joy_recv_fsm) {
 8001434:	4b27      	ldr	r3, [pc, #156]	@ (80014d4 <HAL_UART_RxCpltCallback+0xc0>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b02      	cmp	r3, #2
 800143a:	d01c      	beq.n	8001476 <HAL_UART_RxCpltCallback+0x62>
 800143c:	2b02      	cmp	r3, #2
 800143e:	dc38      	bgt.n	80014b2 <HAL_UART_RxCpltCallback+0x9e>
 8001440:	2b00      	cmp	r3, #0
 8001442:	d002      	beq.n	800144a <HAL_UART_RxCpltCallback+0x36>
 8001444:	2b01      	cmp	r3, #1
 8001446:	d00b      	beq.n	8001460 <HAL_UART_RxCpltCallback+0x4c>
 8001448:	e033      	b.n	80014b2 <HAL_UART_RxCpltCallback+0x9e>
		case 0:
			// Check for 'R'
			if (temp_buffer == 'R') {
 800144a:	4b23      	ldr	r3, [pc, #140]	@ (80014d8 <HAL_UART_RxCpltCallback+0xc4>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b52      	cmp	r3, #82	@ 0x52
 8001450:	d12a      	bne.n	80014a8 <HAL_UART_RxCpltCallback+0x94>
				Str_PS2.Header[0] = 'R';
 8001452:	4b22      	ldr	r3, [pc, #136]	@ (80014dc <HAL_UART_RxCpltCallback+0xc8>)
 8001454:	2252      	movs	r2, #82	@ 0x52
 8001456:	701a      	strb	r2, [r3, #0]
				joy_recv_fsm = 1;
 8001458:	4b1e      	ldr	r3, [pc, #120]	@ (80014d4 <HAL_UART_RxCpltCallback+0xc0>)
 800145a:	2201      	movs	r2, #1
 800145c:	701a      	strb	r2, [r3, #0]
			}

			break;
 800145e:	e023      	b.n	80014a8 <HAL_UART_RxCpltCallback+0x94>

		case 1:
			// Check for 'B'
			if (temp_buffer == 'B') {
 8001460:	4b1d      	ldr	r3, [pc, #116]	@ (80014d8 <HAL_UART_RxCpltCallback+0xc4>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b42      	cmp	r3, #66	@ 0x42
 8001466:	d121      	bne.n	80014ac <HAL_UART_RxCpltCallback+0x98>
				Str_PS2.Header[1] = 'B';
 8001468:	4b1c      	ldr	r3, [pc, #112]	@ (80014dc <HAL_UART_RxCpltCallback+0xc8>)
 800146a:	2242      	movs	r2, #66	@ 0x42
 800146c:	705a      	strb	r2, [r3, #1]
				joy_recv_fsm = 2;
 800146e:	4b19      	ldr	r3, [pc, #100]	@ (80014d4 <HAL_UART_RxCpltCallback+0xc0>)
 8001470:	2202      	movs	r2, #2
 8001472:	701a      	strb	r2, [r3, #0]
			}

			break;
 8001474:	e01a      	b.n	80014ac <HAL_UART_RxCpltCallback+0x98>

		case 2:
			// Copy other bytes
			*((uint8_t*) &Str_PS2.attackBtnByte + cpy_pointer) = temp_buffer;
 8001476:	4b1a      	ldr	r3, [pc, #104]	@ (80014e0 <HAL_UART_RxCpltCallback+0xcc>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	4b19      	ldr	r3, [pc, #100]	@ (80014e4 <HAL_UART_RxCpltCallback+0xd0>)
 800147e:	4413      	add	r3, r2
 8001480:	4a15      	ldr	r2, [pc, #84]	@ (80014d8 <HAL_UART_RxCpltCallback+0xc4>)
 8001482:	7812      	ldrb	r2, [r2, #0]
 8001484:	701a      	strb	r2, [r3, #0]
			cpy_pointer++;
 8001486:	4b16      	ldr	r3, [pc, #88]	@ (80014e0 <HAL_UART_RxCpltCallback+0xcc>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	3301      	adds	r3, #1
 800148c:	b2da      	uxtb	r2, r3
 800148e:	4b14      	ldr	r3, [pc, #80]	@ (80014e0 <HAL_UART_RxCpltCallback+0xcc>)
 8001490:	701a      	strb	r2, [r3, #0]
			if (cpy_pointer > 6) {
 8001492:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <HAL_UART_RxCpltCallback+0xcc>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b06      	cmp	r3, #6
 8001498:	d90a      	bls.n	80014b0 <HAL_UART_RxCpltCallback+0x9c>
				cpy_pointer = 0;
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <HAL_UART_RxCpltCallback+0xcc>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
				joy_recv_fsm = 0;
 80014a0:	4b0c      	ldr	r3, [pc, #48]	@ (80014d4 <HAL_UART_RxCpltCallback+0xc0>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
			}

			break;
 80014a6:	e003      	b.n	80014b0 <HAL_UART_RxCpltCallback+0x9c>
			break;
 80014a8:	bf00      	nop
 80014aa:	e002      	b.n	80014b2 <HAL_UART_RxCpltCallback+0x9e>
			break;
 80014ac:	bf00      	nop
 80014ae:	e000      	b.n	80014b2 <HAL_UART_RxCpltCallback+0x9e>
			break;
 80014b0:	bf00      	nop
		}

		HAL_UART_Receive_IT(&huart2, (uint8_t*) &temp_buffer, 1);
 80014b2:	2201      	movs	r2, #1
 80014b4:	4908      	ldr	r1, [pc, #32]	@ (80014d8 <HAL_UART_RxCpltCallback+0xc4>)
 80014b6:	480c      	ldr	r0, [pc, #48]	@ (80014e8 <HAL_UART_RxCpltCallback+0xd4>)
 80014b8:	f004 fb20 	bl	8005afc <HAL_UART_Receive_IT>
	}
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40004400 	.word	0x40004400
 80014c8:	20000640 	.word	0x20000640
 80014cc:	20000610 	.word	0x20000610
 80014d0:	20000614 	.word	0x20000614
 80014d4:	20000636 	.word	0x20000636
 80014d8:	20000634 	.word	0x20000634
 80014dc:	20000638 	.word	0x20000638
 80014e0:	20000635 	.word	0x20000635
 80014e4:	2000063b 	.word	0x2000063b
 80014e8:	200005bc 	.word	0x200005bc

080014ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f0:	b672      	cpsid	i
}
 80014f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <Error_Handler+0x8>

080014f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	607b      	str	r3, [r7, #4]
 8001502:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <HAL_MspInit+0x4c>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001506:	4a0f      	ldr	r2, [pc, #60]	@ (8001544 <HAL_MspInit+0x4c>)
 8001508:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800150c:	6453      	str	r3, [r2, #68]	@ 0x44
 800150e:	4b0d      	ldr	r3, [pc, #52]	@ (8001544 <HAL_MspInit+0x4c>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	603b      	str	r3, [r7, #0]
 800151e:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <HAL_MspInit+0x4c>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001522:	4a08      	ldr	r2, [pc, #32]	@ (8001544 <HAL_MspInit+0x4c>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001528:	6413      	str	r3, [r2, #64]	@ 0x40
 800152a:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <HAL_MspInit+0x4c>)
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800

08001548 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	@ 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a24      	ldr	r2, [pc, #144]	@ (80015f8 <HAL_ADC_MspInit+0xb0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d141      	bne.n	80015ee <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b23      	ldr	r3, [pc, #140]	@ (80015fc <HAL_ADC_MspInit+0xb4>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	4a22      	ldr	r2, [pc, #136]	@ (80015fc <HAL_ADC_MspInit+0xb4>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001578:	6453      	str	r3, [r2, #68]	@ 0x44
 800157a:	4b20      	ldr	r3, [pc, #128]	@ (80015fc <HAL_ADC_MspInit+0xb4>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800157e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b1c      	ldr	r3, [pc, #112]	@ (80015fc <HAL_ADC_MspInit+0xb4>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	4a1b      	ldr	r2, [pc, #108]	@ (80015fc <HAL_ADC_MspInit+0xb4>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	6313      	str	r3, [r2, #48]	@ 0x30
 8001596:	4b19      	ldr	r3, [pc, #100]	@ (80015fc <HAL_ADC_MspInit+0xb4>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <HAL_ADC_MspInit+0xb4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4a14      	ldr	r2, [pc, #80]	@ (80015fc <HAL_ADC_MspInit+0xb4>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b2:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <HAL_ADC_MspInit+0xb4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015be:	2303      	movs	r3, #3
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c2:	2303      	movs	r3, #3
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	480b      	ldr	r0, [pc, #44]	@ (8001600 <HAL_ADC_MspInit+0xb8>)
 80015d2:	f001 f97b 	bl	80028cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80015d6:	2330      	movs	r3, #48	@ 0x30
 80015d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015da:	2303      	movs	r3, #3
 80015dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	4806      	ldr	r0, [pc, #24]	@ (8001604 <HAL_ADC_MspInit+0xbc>)
 80015ea:	f001 f96f 	bl	80028cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015ee:	bf00      	nop
 80015f0:	3728      	adds	r7, #40	@ 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40012000 	.word	0x40012000
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020800 	.word	0x40020800
 8001604:	40020000 	.word	0x40020000

08001608 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	@ 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a19      	ldr	r2, [pc, #100]	@ (800168c <HAL_I2C_MspInit+0x84>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d12c      	bne.n	8001684 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <HAL_I2C_MspInit+0x88>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a17      	ldr	r2, [pc, #92]	@ (8001690 <HAL_I2C_MspInit+0x88>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <HAL_I2C_MspInit+0x88>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001646:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800164a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164c:	2312      	movs	r3, #18
 800164e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001658:	2304      	movs	r3, #4
 800165a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165c:	f107 0314 	add.w	r3, r7, #20
 8001660:	4619      	mov	r1, r3
 8001662:	480c      	ldr	r0, [pc, #48]	@ (8001694 <HAL_I2C_MspInit+0x8c>)
 8001664:	f001 f932 	bl	80028cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <HAL_I2C_MspInit+0x88>)
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	4a07      	ldr	r2, [pc, #28]	@ (8001690 <HAL_I2C_MspInit+0x88>)
 8001672:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001676:	6413      	str	r3, [r2, #64]	@ 0x40
 8001678:	4b05      	ldr	r3, [pc, #20]	@ (8001690 <HAL_I2C_MspInit+0x88>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001684:	bf00      	nop
 8001686:	3728      	adds	r7, #40	@ 0x28
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40005800 	.word	0x40005800
 8001690:	40023800 	.word	0x40023800
 8001694:	40020400 	.word	0x40020400

08001698 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	@ 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a28      	ldr	r2, [pc, #160]	@ (8001758 <HAL_SPI_MspInit+0xc0>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d14a      	bne.n	8001750 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	4b27      	ldr	r3, [pc, #156]	@ (800175c <HAL_SPI_MspInit+0xc4>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	4a26      	ldr	r2, [pc, #152]	@ (800175c <HAL_SPI_MspInit+0xc4>)
 80016c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ca:	4b24      	ldr	r3, [pc, #144]	@ (800175c <HAL_SPI_MspInit+0xc4>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b20      	ldr	r3, [pc, #128]	@ (800175c <HAL_SPI_MspInit+0xc4>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	4a1f      	ldr	r2, [pc, #124]	@ (800175c <HAL_SPI_MspInit+0xc4>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e6:	4b1d      	ldr	r3, [pc, #116]	@ (800175c <HAL_SPI_MspInit+0xc4>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	4b19      	ldr	r3, [pc, #100]	@ (800175c <HAL_SPI_MspInit+0xc4>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	4a18      	ldr	r2, [pc, #96]	@ (800175c <HAL_SPI_MspInit+0xc4>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	6313      	str	r3, [r2, #48]	@ 0x30
 8001702:	4b16      	ldr	r3, [pc, #88]	@ (800175c <HAL_SPI_MspInit+0xc4>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800170e:	230c      	movs	r3, #12
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171a:	2303      	movs	r3, #3
 800171c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800171e:	2305      	movs	r3, #5
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	480d      	ldr	r0, [pc, #52]	@ (8001760 <HAL_SPI_MspInit+0xc8>)
 800172a:	f001 f8cf 	bl	80028cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800172e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001740:	2305      	movs	r3, #5
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	4806      	ldr	r0, [pc, #24]	@ (8001764 <HAL_SPI_MspInit+0xcc>)
 800174c:	f001 f8be 	bl	80028cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	@ 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40003800 	.word	0x40003800
 800175c:	40023800 	.word	0x40023800
 8001760:	40020800 	.word	0x40020800
 8001764:	40020400 	.word	0x40020400

08001768 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b094      	sub	sp, #80	@ 0x50
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a8c      	ldr	r2, [pc, #560]	@ (80019b8 <HAL_TIM_Encoder_MspInit+0x250>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d12d      	bne.n	80017e6 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800178e:	4b8b      	ldr	r3, [pc, #556]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001792:	4a8a      	ldr	r2, [pc, #552]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6453      	str	r3, [r2, #68]	@ 0x44
 800179a:	4b88      	ldr	r3, [pc, #544]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80017aa:	4b84      	ldr	r3, [pc, #528]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a83      	ldr	r2, [pc, #524]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 80017b0:	f043 0310 	orr.w	r3, r3, #16
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b81      	ldr	r3, [pc, #516]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0310 	and.w	r3, r3, #16
 80017be:	637b      	str	r3, [r7, #52]	@ 0x34
 80017c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80017c2:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80017c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017cc:	2302      	movs	r3, #2
 80017ce:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017d4:	2301      	movs	r3, #1
 80017d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017d8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80017dc:	4619      	mov	r1, r3
 80017de:	4878      	ldr	r0, [pc, #480]	@ (80019c0 <HAL_TIM_Encoder_MspInit+0x258>)
 80017e0:	f001 f874 	bl	80028cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80017e4:	e12b      	b.n	8001a3e <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM2)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017ee:	d14b      	bne.n	8001888 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80017f4:	4b71      	ldr	r3, [pc, #452]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f8:	4a70      	ldr	r2, [pc, #448]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001800:	4b6e      	ldr	r3, [pc, #440]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	633b      	str	r3, [r7, #48]	@ 0x30
 800180a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001810:	4b6a      	ldr	r3, [pc, #424]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 8001812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001814:	4a69      	ldr	r2, [pc, #420]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6313      	str	r3, [r2, #48]	@ 0x30
 800181c:	4b67      	ldr	r3, [pc, #412]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 800181e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001828:	2300      	movs	r3, #0
 800182a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800182c:	4b63      	ldr	r3, [pc, #396]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001830:	4a62      	ldr	r2, [pc, #392]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 8001832:	f043 0302 	orr.w	r3, r3, #2
 8001836:	6313      	str	r3, [r2, #48]	@ 0x30
 8001838:	4b60      	ldr	r3, [pc, #384]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = EN_X_A_Pin;
 8001844:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001848:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001856:	2301      	movs	r3, #1
 8001858:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(EN_X_A_GPIO_Port, &GPIO_InitStruct);
 800185a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800185e:	4619      	mov	r1, r3
 8001860:	4858      	ldr	r0, [pc, #352]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001862:	f001 f833 	bl	80028cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EN_X_B_Pin;
 8001866:	2308      	movs	r3, #8
 8001868:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001876:	2301      	movs	r3, #1
 8001878:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(EN_X_B_GPIO_Port, &GPIO_InitStruct);
 800187a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800187e:	4619      	mov	r1, r3
 8001880:	4851      	ldr	r0, [pc, #324]	@ (80019c8 <HAL_TIM_Encoder_MspInit+0x260>)
 8001882:	f001 f823 	bl	80028cc <HAL_GPIO_Init>
}
 8001886:	e0da      	b.n	8001a3e <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM3)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a4f      	ldr	r2, [pc, #316]	@ (80019cc <HAL_TIM_Encoder_MspInit+0x264>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d12c      	bne.n	80018ec <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
 8001896:	4b49      	ldr	r3, [pc, #292]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189a:	4a48      	ldr	r2, [pc, #288]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 800189c:	f043 0302 	orr.w	r3, r3, #2
 80018a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018a2:	4b46      	ldr	r3, [pc, #280]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
 80018b2:	4b42      	ldr	r3, [pc, #264]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	4a41      	ldr	r2, [pc, #260]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018be:	4b3f      	ldr	r3, [pc, #252]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	623b      	str	r3, [r7, #32]
 80018c8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = EN_Y_A_Pin|EN_Y_B_Pin;
 80018ca:	2330      	movs	r3, #48	@ 0x30
 80018cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018d2:	2302      	movs	r3, #2
 80018d4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018da:	2302      	movs	r3, #2
 80018dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018de:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80018e2:	4619      	mov	r1, r3
 80018e4:	4838      	ldr	r0, [pc, #224]	@ (80019c8 <HAL_TIM_Encoder_MspInit+0x260>)
 80018e6:	f000 fff1 	bl	80028cc <HAL_GPIO_Init>
}
 80018ea:	e0a8      	b.n	8001a3e <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM4)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a37      	ldr	r2, [pc, #220]	@ (80019d0 <HAL_TIM_Encoder_MspInit+0x268>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d12d      	bne.n	8001952 <HAL_TIM_Encoder_MspInit+0x1ea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
 80018fa:	4b30      	ldr	r3, [pc, #192]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fe:	4a2f      	ldr	r2, [pc, #188]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 8001900:	f043 0304 	orr.w	r3, r3, #4
 8001904:	6413      	str	r3, [r2, #64]	@ 0x40
 8001906:	4b2d      	ldr	r3, [pc, #180]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	61fb      	str	r3, [r7, #28]
 8001910:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	4b29      	ldr	r3, [pc, #164]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191a:	4a28      	ldr	r2, [pc, #160]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 800191c:	f043 0308 	orr.w	r3, r3, #8
 8001920:	6313      	str	r3, [r2, #48]	@ 0x30
 8001922:	4b26      	ldr	r3, [pc, #152]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	61bb      	str	r3, [r7, #24]
 800192c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800192e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001932:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193c:	2303      	movs	r3, #3
 800193e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001940:	2302      	movs	r3, #2
 8001942:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001944:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001948:	4619      	mov	r1, r3
 800194a:	4822      	ldr	r0, [pc, #136]	@ (80019d4 <HAL_TIM_Encoder_MspInit+0x26c>)
 800194c:	f000 ffbe 	bl	80028cc <HAL_GPIO_Init>
}
 8001950:	e075      	b.n	8001a3e <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM5)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a20      	ldr	r2, [pc, #128]	@ (80019d8 <HAL_TIM_Encoder_MspInit+0x270>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d13f      	bne.n	80019dc <HAL_TIM_Encoder_MspInit+0x274>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	4b16      	ldr	r3, [pc, #88]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 8001962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001964:	4a15      	ldr	r2, [pc, #84]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 8001966:	f043 0308 	orr.w	r3, r3, #8
 800196a:	6413      	str	r3, [r2, #64]	@ 0x40
 800196c:	4b13      	ldr	r3, [pc, #76]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 800196e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001980:	4a0e      	ldr	r2, [pc, #56]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	6313      	str	r3, [r2, #48]	@ 0x30
 8001988:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <HAL_TIM_Encoder_MspInit+0x254>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001994:	2303      	movs	r3, #3
 8001996:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001998:	2302      	movs	r3, #2
 800199a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800199c:	2302      	movs	r3, #2
 800199e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a0:	2303      	movs	r3, #3
 80019a2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80019a4:	2302      	movs	r3, #2
 80019a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80019ac:	4619      	mov	r1, r3
 80019ae:	4805      	ldr	r0, [pc, #20]	@ (80019c4 <HAL_TIM_Encoder_MspInit+0x25c>)
 80019b0:	f000 ff8c 	bl	80028cc <HAL_GPIO_Init>
}
 80019b4:	e043      	b.n	8001a3e <HAL_TIM_Encoder_MspInit+0x2d6>
 80019b6:	bf00      	nop
 80019b8:	40010000 	.word	0x40010000
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40020000 	.word	0x40020000
 80019c8:	40020400 	.word	0x40020400
 80019cc:	40000400 	.word	0x40000400
 80019d0:	40000800 	.word	0x40000800
 80019d4:	40020c00 	.word	0x40020c00
 80019d8:	40000c00 	.word	0x40000c00
  else if(htim_encoder->Instance==TIM8)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a19      	ldr	r2, [pc, #100]	@ (8001a48 <HAL_TIM_Encoder_MspInit+0x2e0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d12b      	bne.n	8001a3e <HAL_TIM_Encoder_MspInit+0x2d6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b18      	ldr	r3, [pc, #96]	@ (8001a4c <HAL_TIM_Encoder_MspInit+0x2e4>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ee:	4a17      	ldr	r2, [pc, #92]	@ (8001a4c <HAL_TIM_Encoder_MspInit+0x2e4>)
 80019f0:	f043 0302 	orr.w	r3, r3, #2
 80019f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019f6:	4b15      	ldr	r3, [pc, #84]	@ (8001a4c <HAL_TIM_Encoder_MspInit+0x2e4>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	4a10      	ldr	r2, [pc, #64]	@ (8001a4c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001a0c:	f043 0304 	orr.w	r3, r3, #4
 8001a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a12:	4b0e      	ldr	r3, [pc, #56]	@ (8001a4c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a1e:	23c0      	movs	r3, #192	@ 0xc0
 8001a20:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a26:	2302      	movs	r3, #2
 8001a28:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a32:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001a36:	4619      	mov	r1, r3
 8001a38:	4805      	ldr	r0, [pc, #20]	@ (8001a50 <HAL_TIM_Encoder_MspInit+0x2e8>)
 8001a3a:	f000 ff47 	bl	80028cc <HAL_GPIO_Init>
}
 8001a3e:	bf00      	nop
 8001a40:	3750      	adds	r7, #80	@ 0x50
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40010400 	.word	0x40010400
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40020800 	.word	0x40020800

08001a54 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a15      	ldr	r2, [pc, #84]	@ (8001ab8 <HAL_TIM_PWM_MspInit+0x64>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d10e      	bne.n	8001a84 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b14      	ldr	r3, [pc, #80]	@ (8001abc <HAL_TIM_PWM_MspInit+0x68>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6e:	4a13      	ldr	r2, [pc, #76]	@ (8001abc <HAL_TIM_PWM_MspInit+0x68>)
 8001a70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a76:	4b11      	ldr	r3, [pc, #68]	@ (8001abc <HAL_TIM_PWM_MspInit+0x68>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001a82:	e012      	b.n	8001aaa <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac0 <HAL_TIM_PWM_MspInit+0x6c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d10d      	bne.n	8001aaa <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <HAL_TIM_PWM_MspInit+0x68>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	4a09      	ldr	r2, [pc, #36]	@ (8001abc <HAL_TIM_PWM_MspInit+0x68>)
 8001a98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a9e:	4b07      	ldr	r3, [pc, #28]	@ (8001abc <HAL_TIM_PWM_MspInit+0x68>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40014000 	.word	0x40014000
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40001800 	.word	0x40001800

08001ac4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b087      	sub	sp, #28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a29      	ldr	r2, [pc, #164]	@ (8001b78 <HAL_TIM_Base_MspInit+0xb4>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d10e      	bne.n	8001af4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	4b28      	ldr	r3, [pc, #160]	@ (8001b7c <HAL_TIM_Base_MspInit+0xb8>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ade:	4a27      	ldr	r2, [pc, #156]	@ (8001b7c <HAL_TIM_Base_MspInit+0xb8>)
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ae6:	4b25      	ldr	r3, [pc, #148]	@ (8001b7c <HAL_TIM_Base_MspInit+0xb8>)
 8001ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001af2:	e03a      	b.n	8001b6a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a21      	ldr	r2, [pc, #132]	@ (8001b80 <HAL_TIM_Base_MspInit+0xbc>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d10e      	bne.n	8001b1c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	4b1e      	ldr	r3, [pc, #120]	@ (8001b7c <HAL_TIM_Base_MspInit+0xb8>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	4a1d      	ldr	r2, [pc, #116]	@ (8001b7c <HAL_TIM_Base_MspInit+0xb8>)
 8001b08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001b7c <HAL_TIM_Base_MspInit+0xb8>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]
}
 8001b1a:	e026      	b.n	8001b6a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM13)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a18      	ldr	r2, [pc, #96]	@ (8001b84 <HAL_TIM_Base_MspInit+0xc0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d10e      	bne.n	8001b44 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b14      	ldr	r3, [pc, #80]	@ (8001b7c <HAL_TIM_Base_MspInit+0xb8>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	4a13      	ldr	r2, [pc, #76]	@ (8001b7c <HAL_TIM_Base_MspInit+0xb8>)
 8001b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b36:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <HAL_TIM_Base_MspInit+0xb8>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
}
 8001b42:	e012      	b.n	8001b6a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM14)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0f      	ldr	r2, [pc, #60]	@ (8001b88 <HAL_TIM_Base_MspInit+0xc4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d10d      	bne.n	8001b6a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <HAL_TIM_Base_MspInit+0xb8>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	4a09      	ldr	r2, [pc, #36]	@ (8001b7c <HAL_TIM_Base_MspInit+0xb8>)
 8001b58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5e:	4b07      	ldr	r3, [pc, #28]	@ (8001b7c <HAL_TIM_Base_MspInit+0xb8>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
}
 8001b6a:	bf00      	nop
 8001b6c:	371c      	adds	r7, #28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40014400 	.word	0x40014400
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40014800 	.word	0x40014800
 8001b84:	40001c00 	.word	0x40001c00
 8001b88:	40002000 	.word	0x40002000

08001b8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08e      	sub	sp, #56	@ 0x38
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a6d      	ldr	r2, [pc, #436]	@ (8001d60 <HAL_TIM_MspPostInit+0x1d4>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d11e      	bne.n	8001bec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
 8001bb2:	4b6c      	ldr	r3, [pc, #432]	@ (8001d64 <HAL_TIM_MspPostInit+0x1d8>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	4a6b      	ldr	r2, [pc, #428]	@ (8001d64 <HAL_TIM_MspPostInit+0x1d8>)
 8001bb8:	f043 0310 	orr.w	r3, r3, #16
 8001bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bbe:	4b69      	ldr	r3, [pc, #420]	@ (8001d64 <HAL_TIM_MspPostInit+0x1d8>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	f003 0310 	and.w	r3, r3, #16
 8001bc6:	623b      	str	r3, [r7, #32]
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = EXTRA1_PWM_L_Pin|SERVO_1_Pin;
 8001bca:	2360      	movs	r3, #96	@ 0x60
 8001bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001be2:	4619      	mov	r1, r3
 8001be4:	4860      	ldr	r0, [pc, #384]	@ (8001d68 <HAL_TIM_MspPostInit+0x1dc>)
 8001be6:	f000 fe71 	bl	80028cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001bea:	e0b5      	b.n	8001d58 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM10)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a5e      	ldr	r2, [pc, #376]	@ (8001d6c <HAL_TIM_MspPostInit+0x1e0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d11f      	bne.n	8001c36 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	4b5a      	ldr	r3, [pc, #360]	@ (8001d64 <HAL_TIM_MspPostInit+0x1d8>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	4a59      	ldr	r2, [pc, #356]	@ (8001d64 <HAL_TIM_MspPostInit+0x1d8>)
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c06:	4b57      	ldr	r3, [pc, #348]	@ (8001d64 <HAL_TIM_MspPostInit+0x1d8>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	61fb      	str	r3, [r7, #28]
 8001c10:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = EXTRA2_PWM_L_Pin;
 8001c12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c20:	2300      	movs	r3, #0
 8001c22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001c24:	2303      	movs	r3, #3
 8001c26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(EXTRA2_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001c28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4850      	ldr	r0, [pc, #320]	@ (8001d70 <HAL_TIM_MspPostInit+0x1e4>)
 8001c30:	f000 fe4c 	bl	80028cc <HAL_GPIO_Init>
}
 8001c34:	e090      	b.n	8001d58 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM11)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a4e      	ldr	r2, [pc, #312]	@ (8001d74 <HAL_TIM_MspPostInit+0x1e8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d11f      	bne.n	8001c80 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
 8001c44:	4b47      	ldr	r3, [pc, #284]	@ (8001d64 <HAL_TIM_MspPostInit+0x1d8>)
 8001c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c48:	4a46      	ldr	r2, [pc, #280]	@ (8001d64 <HAL_TIM_MspPostInit+0x1d8>)
 8001c4a:	f043 0302 	orr.w	r3, r3, #2
 8001c4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c50:	4b44      	ldr	r3, [pc, #272]	@ (8001d64 <HAL_TIM_MspPostInit+0x1d8>)
 8001c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RF_PWM_L_Pin;
 8001c5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RF_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c76:	4619      	mov	r1, r3
 8001c78:	483d      	ldr	r0, [pc, #244]	@ (8001d70 <HAL_TIM_MspPostInit+0x1e4>)
 8001c7a:	f000 fe27 	bl	80028cc <HAL_GPIO_Init>
}
 8001c7e:	e06b      	b.n	8001d58 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM12)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a3c      	ldr	r2, [pc, #240]	@ (8001d78 <HAL_TIM_MspPostInit+0x1ec>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d11f      	bne.n	8001cca <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	4b35      	ldr	r3, [pc, #212]	@ (8001d64 <HAL_TIM_MspPostInit+0x1d8>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	4a34      	ldr	r2, [pc, #208]	@ (8001d64 <HAL_TIM_MspPostInit+0x1d8>)
 8001c94:	f043 0302 	orr.w	r3, r3, #2
 8001c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9a:	4b32      	ldr	r3, [pc, #200]	@ (8001d64 <HAL_TIM_MspPostInit+0x1d8>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LB_PWM_L_Pin|RB_PWM_L_Pin;
 8001ca6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001caa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001cb8:	2309      	movs	r3, #9
 8001cba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	482b      	ldr	r0, [pc, #172]	@ (8001d70 <HAL_TIM_MspPostInit+0x1e4>)
 8001cc4:	f000 fe02 	bl	80028cc <HAL_GPIO_Init>
}
 8001cc8:	e046      	b.n	8001d58 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM13)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a2b      	ldr	r2, [pc, #172]	@ (8001d7c <HAL_TIM_MspPostInit+0x1f0>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d11e      	bne.n	8001d12 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	4b22      	ldr	r3, [pc, #136]	@ (8001d64 <HAL_TIM_MspPostInit+0x1d8>)
 8001cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cdc:	4a21      	ldr	r2, [pc, #132]	@ (8001d64 <HAL_TIM_MspPostInit+0x1d8>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d64 <HAL_TIM_MspPostInit+0x1d8>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO_2_Pin;
 8001cf0:	2340      	movs	r3, #64	@ 0x40
 8001cf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001d00:	2309      	movs	r3, #9
 8001d02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SERVO_2_GPIO_Port, &GPIO_InitStruct);
 8001d04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d08:	4619      	mov	r1, r3
 8001d0a:	481d      	ldr	r0, [pc, #116]	@ (8001d80 <HAL_TIM_MspPostInit+0x1f4>)
 8001d0c:	f000 fdde 	bl	80028cc <HAL_GPIO_Init>
}
 8001d10:	e022      	b.n	8001d58 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM14)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a1b      	ldr	r2, [pc, #108]	@ (8001d84 <HAL_TIM_MspPostInit+0x1f8>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d11d      	bne.n	8001d58 <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	4b10      	ldr	r3, [pc, #64]	@ (8001d64 <HAL_TIM_MspPostInit+0x1d8>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d24:	4a0f      	ldr	r2, [pc, #60]	@ (8001d64 <HAL_TIM_MspPostInit+0x1d8>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d64 <HAL_TIM_MspPostInit+0x1d8>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LF_PWM_L_Pin;
 8001d38:	2380      	movs	r3, #128	@ 0x80
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001d48:	2309      	movs	r3, #9
 8001d4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LF_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001d4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d50:	4619      	mov	r1, r3
 8001d52:	480b      	ldr	r0, [pc, #44]	@ (8001d80 <HAL_TIM_MspPostInit+0x1f4>)
 8001d54:	f000 fdba 	bl	80028cc <HAL_GPIO_Init>
}
 8001d58:	bf00      	nop
 8001d5a:	3738      	adds	r7, #56	@ 0x38
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40014000 	.word	0x40014000
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40014400 	.word	0x40014400
 8001d70:	40020400 	.word	0x40020400
 8001d74:	40014800 	.word	0x40014800
 8001d78:	40001800 	.word	0x40001800
 8001d7c:	40001c00 	.word	0x40001c00
 8001d80:	40020000 	.word	0x40020000
 8001d84:	40002000 	.word	0x40002000

08001d88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08c      	sub	sp, #48	@ 0x30
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a36      	ldr	r2, [pc, #216]	@ (8001e80 <HAL_UART_MspInit+0xf8>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d12d      	bne.n	8001e06 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	4b35      	ldr	r3, [pc, #212]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db2:	4a34      	ldr	r2, [pc, #208]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001db4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dba:	4b32      	ldr	r3, [pc, #200]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dc2:	61bb      	str	r3, [r7, #24]
 8001dc4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	4b2e      	ldr	r3, [pc, #184]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a2d      	ldr	r2, [pc, #180]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001de2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001df4:	2308      	movs	r3, #8
 8001df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4822      	ldr	r0, [pc, #136]	@ (8001e88 <HAL_UART_MspInit+0x100>)
 8001e00:	f000 fd64 	bl	80028cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e04:	e038      	b.n	8001e78 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a20      	ldr	r2, [pc, #128]	@ (8001e8c <HAL_UART_MspInit+0x104>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d133      	bne.n	8001e78 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e10:	2300      	movs	r3, #0
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	4b1b      	ldr	r3, [pc, #108]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e18:	4a1a      	ldr	r2, [pc, #104]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001e1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e20:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e34:	4a13      	ldr	r2, [pc, #76]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3c:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <HAL_UART_MspInit+0xfc>)
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e48:	230c      	movs	r3, #12
 8001e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e54:	2303      	movs	r3, #3
 8001e56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e58:	2307      	movs	r3, #7
 8001e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	4619      	mov	r1, r3
 8001e62:	480b      	ldr	r0, [pc, #44]	@ (8001e90 <HAL_UART_MspInit+0x108>)
 8001e64:	f000 fd32 	bl	80028cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	2026      	movs	r0, #38	@ 0x26
 8001e6e:	f000 fc64 	bl	800273a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e72:	2026      	movs	r0, #38	@ 0x26
 8001e74:	f000 fc7d 	bl	8002772 <HAL_NVIC_EnableIRQ>
}
 8001e78:	bf00      	nop
 8001e7a:	3730      	adds	r7, #48	@ 0x30
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40004c00 	.word	0x40004c00
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40020800 	.word	0x40020800
 8001e8c:	40004400 	.word	0x40004400
 8001e90:	40020000 	.word	0x40020000

08001e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <NMI_Handler+0x4>

08001e9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea0:	bf00      	nop
 8001ea2:	e7fd      	b.n	8001ea0 <HardFault_Handler+0x4>

08001ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ea8:	bf00      	nop
 8001eaa:	e7fd      	b.n	8001ea8 <MemManage_Handler+0x4>

08001eac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb0:	bf00      	nop
 8001eb2:	e7fd      	b.n	8001eb0 <BusFault_Handler+0x4>

08001eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb8:	bf00      	nop
 8001eba:	e7fd      	b.n	8001eb8 <UsageFault_Handler+0x4>

08001ebc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eea:	f000 f8a5 	bl	8002038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ef8:	4802      	ldr	r0, [pc, #8]	@ (8001f04 <USART2_IRQHandler+0x10>)
 8001efa:	f003 fe25 	bl	8005b48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	200005bc 	.word	0x200005bc

08001f08 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f0c:	4802      	ldr	r0, [pc, #8]	@ (8001f18 <OTG_FS_IRQHandler+0x10>)
 8001f0e:	f001 f91b 	bl	8003148 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20001d28 	.word	0x20001d28

08001f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f20:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <SystemInit+0x20>)
 8001f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f26:	4a05      	ldr	r2, [pc, #20]	@ (8001f3c <SystemInit+0x20>)
 8001f28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <Reset_Handler>:
 8001f40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f78 <LoopFillZerobss+0xe>
 8001f44:	f7ff ffea 	bl	8001f1c <SystemInit>
 8001f48:	480c      	ldr	r0, [pc, #48]	@ (8001f7c <LoopFillZerobss+0x12>)
 8001f4a:	490d      	ldr	r1, [pc, #52]	@ (8001f80 <LoopFillZerobss+0x16>)
 8001f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f84 <LoopFillZerobss+0x1a>)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e002      	b.n	8001f58 <LoopCopyDataInit>

08001f52 <CopyDataInit>:
 8001f52:	58d4      	ldr	r4, [r2, r3]
 8001f54:	50c4      	str	r4, [r0, r3]
 8001f56:	3304      	adds	r3, #4

08001f58 <LoopCopyDataInit>:
 8001f58:	18c4      	adds	r4, r0, r3
 8001f5a:	428c      	cmp	r4, r1
 8001f5c:	d3f9      	bcc.n	8001f52 <CopyDataInit>
 8001f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f88 <LoopFillZerobss+0x1e>)
 8001f60:	4c0a      	ldr	r4, [pc, #40]	@ (8001f8c <LoopFillZerobss+0x22>)
 8001f62:	2300      	movs	r3, #0
 8001f64:	e001      	b.n	8001f6a <LoopFillZerobss>

08001f66 <FillZerobss>:
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	3204      	adds	r2, #4

08001f6a <LoopFillZerobss>:
 8001f6a:	42a2      	cmp	r2, r4
 8001f6c:	d3fb      	bcc.n	8001f66 <FillZerobss>
 8001f6e:	f00a f83d 	bl	800bfec <__libc_init_array>
 8001f72:	f7fe faa1 	bl	80004b8 <main>
 8001f76:	4770      	bx	lr
 8001f78:	20020000 	.word	0x20020000
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	20000104 	.word	0x20000104
 8001f84:	0800c108 	.word	0x0800c108
 8001f88:	20000104 	.word	0x20000104
 8001f8c:	2000242c 	.word	0x2000242c

08001f90 <ADC_IRQHandler>:
 8001f90:	e7fe      	b.n	8001f90 <ADC_IRQHandler>
	...

08001f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f98:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd4 <HAL_Init+0x40>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd4 <HAL_Init+0x40>)
 8001f9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd4 <HAL_Init+0x40>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <HAL_Init+0x40>)
 8001faa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb0:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <HAL_Init+0x40>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a07      	ldr	r2, [pc, #28]	@ (8001fd4 <HAL_Init+0x40>)
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f000 fbb1 	bl	8002724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc2:	200f      	movs	r0, #15
 8001fc4:	f000 f808 	bl	8001fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc8:	f7ff fa96 	bl	80014f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023c00 	.word	0x40023c00

08001fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe0:	4b12      	ldr	r3, [pc, #72]	@ (800202c <HAL_InitTick+0x54>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <HAL_InitTick+0x58>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 fbc9 	bl	800278e <HAL_SYSTICK_Config>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e00e      	b.n	8002024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b0f      	cmp	r3, #15
 800200a:	d80a      	bhi.n	8002022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800200c:	2200      	movs	r2, #0
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f000 fb91 	bl	800273a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002018:	4a06      	ldr	r2, [pc, #24]	@ (8002034 <HAL_InitTick+0x5c>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	e000      	b.n	8002024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000000 	.word	0x20000000
 8002030:	20000008 	.word	0x20000008
 8002034:	20000004 	.word	0x20000004

08002038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800203c:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <HAL_IncTick+0x20>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b06      	ldr	r3, [pc, #24]	@ (800205c <HAL_IncTick+0x24>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4413      	add	r3, r2
 8002048:	4a04      	ldr	r2, [pc, #16]	@ (800205c <HAL_IncTick+0x24>)
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000008 	.word	0x20000008
 800205c:	20000640 	.word	0x20000640

08002060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return uwTick;
 8002064:	4b03      	ldr	r3, [pc, #12]	@ (8002074 <HAL_GetTick+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000640 	.word	0x20000640

08002078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002080:	f7ff ffee 	bl	8002060 <HAL_GetTick>
 8002084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002090:	d005      	beq.n	800209e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002092:	4b0a      	ldr	r3, [pc, #40]	@ (80020bc <HAL_Delay+0x44>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4413      	add	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800209e:	bf00      	nop
 80020a0:	f7ff ffde 	bl	8002060 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d8f7      	bhi.n	80020a0 <HAL_Delay+0x28>
  {
  }
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000008 	.word	0x20000008

080020c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e033      	b.n	800213e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d109      	bne.n	80020f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff fa32 	bl	8001548 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d118      	bne.n	8002130 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002102:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002106:	f023 0302 	bic.w	r3, r3, #2
 800210a:	f043 0202 	orr.w	r2, r3, #2
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f93a 	bl	800238c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	f023 0303 	bic.w	r3, r3, #3
 8002126:	f043 0201 	orr.w	r2, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	641a      	str	r2, [r3, #64]	@ 0x40
 800212e:	e001      	b.n	8002134 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x1c>
 8002160:	2302      	movs	r3, #2
 8002162:	e105      	b.n	8002370 <HAL_ADC_ConfigChannel+0x228>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b09      	cmp	r3, #9
 8002172:	d925      	bls.n	80021c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68d9      	ldr	r1, [r3, #12]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	b29b      	uxth	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	4613      	mov	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4413      	add	r3, r2
 8002188:	3b1e      	subs	r3, #30
 800218a:	2207      	movs	r2, #7
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43da      	mvns	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	400a      	ands	r2, r1
 8002198:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68d9      	ldr	r1, [r3, #12]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	4618      	mov	r0, r3
 80021ac:	4603      	mov	r3, r0
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4403      	add	r3, r0
 80021b2:	3b1e      	subs	r3, #30
 80021b4:	409a      	lsls	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	e022      	b.n	8002206 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6919      	ldr	r1, [r3, #16]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	4613      	mov	r3, r2
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	4413      	add	r3, r2
 80021d4:	2207      	movs	r2, #7
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43da      	mvns	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	400a      	ands	r2, r1
 80021e2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6919      	ldr	r1, [r3, #16]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	4618      	mov	r0, r3
 80021f6:	4603      	mov	r3, r0
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4403      	add	r3, r0
 80021fc:	409a      	lsls	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b06      	cmp	r3, #6
 800220c:	d824      	bhi.n	8002258 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	3b05      	subs	r3, #5
 8002220:	221f      	movs	r2, #31
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	400a      	ands	r2, r1
 800222e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	b29b      	uxth	r3, r3
 800223c:	4618      	mov	r0, r3
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	3b05      	subs	r3, #5
 800224a:	fa00 f203 	lsl.w	r2, r0, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	635a      	str	r2, [r3, #52]	@ 0x34
 8002256:	e04c      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b0c      	cmp	r3, #12
 800225e:	d824      	bhi.n	80022aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	3b23      	subs	r3, #35	@ 0x23
 8002272:	221f      	movs	r2, #31
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43da      	mvns	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	400a      	ands	r2, r1
 8002280:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	b29b      	uxth	r3, r3
 800228e:	4618      	mov	r0, r3
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	3b23      	subs	r3, #35	@ 0x23
 800229c:	fa00 f203 	lsl.w	r2, r0, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80022a8:	e023      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	3b41      	subs	r3, #65	@ 0x41
 80022bc:	221f      	movs	r2, #31
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43da      	mvns	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	400a      	ands	r2, r1
 80022ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	4618      	mov	r0, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	3b41      	subs	r3, #65	@ 0x41
 80022e6:	fa00 f203 	lsl.w	r2, r0, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022f2:	4b22      	ldr	r3, [pc, #136]	@ (800237c <HAL_ADC_ConfigChannel+0x234>)
 80022f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a21      	ldr	r2, [pc, #132]	@ (8002380 <HAL_ADC_ConfigChannel+0x238>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d109      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x1cc>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b12      	cmp	r3, #18
 8002306:	d105      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a19      	ldr	r2, [pc, #100]	@ (8002380 <HAL_ADC_ConfigChannel+0x238>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d123      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x21e>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b10      	cmp	r3, #16
 8002324:	d003      	beq.n	800232e <HAL_ADC_ConfigChannel+0x1e6>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2b11      	cmp	r3, #17
 800232c:	d11b      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b10      	cmp	r3, #16
 8002340:	d111      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002342:	4b10      	ldr	r3, [pc, #64]	@ (8002384 <HAL_ADC_ConfigChannel+0x23c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a10      	ldr	r2, [pc, #64]	@ (8002388 <HAL_ADC_ConfigChannel+0x240>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	0c9a      	lsrs	r2, r3, #18
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002358:	e002      	b.n	8002360 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	3b01      	subs	r3, #1
 800235e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f9      	bne.n	800235a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	40012300 	.word	0x40012300
 8002380:	40012000 	.word	0x40012000
 8002384:	20000000 	.word	0x20000000
 8002388:	431bde83 	.word	0x431bde83

0800238c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002394:	4b79      	ldr	r3, [pc, #484]	@ (800257c <ADC_Init+0x1f0>)
 8002396:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	431a      	orrs	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	021a      	lsls	r2, r3, #8
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80023e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002406:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6899      	ldr	r1, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241e:	4a58      	ldr	r2, [pc, #352]	@ (8002580 <ADC_Init+0x1f4>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d022      	beq.n	800246a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002432:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6899      	ldr	r1, [r3, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002454:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6899      	ldr	r1, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	430a      	orrs	r2, r1
 8002466:	609a      	str	r2, [r3, #8]
 8002468:	e00f      	b.n	800248a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002478:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002488:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0202 	bic.w	r2, r2, #2
 8002498:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6899      	ldr	r1, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	7e1b      	ldrb	r3, [r3, #24]
 80024a4:	005a      	lsls	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d01b      	beq.n	80024f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024c6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80024d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6859      	ldr	r1, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e2:	3b01      	subs	r3, #1
 80024e4:	035a      	lsls	r2, r3, #13
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	e007      	b.n	8002500 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024fe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800250e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	3b01      	subs	r3, #1
 800251c:	051a      	lsls	r2, r3, #20
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002534:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6899      	ldr	r1, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002542:	025a      	lsls	r2, r3, #9
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800255a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6899      	ldr	r1, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	029a      	lsls	r2, r3, #10
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	609a      	str	r2, [r3, #8]
}
 8002570:	bf00      	nop
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	40012300 	.word	0x40012300
 8002580:	0f000001 	.word	0x0f000001

08002584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002594:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025a0:	4013      	ands	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b6:	4a04      	ldr	r2, [pc, #16]	@ (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	60d3      	str	r3, [r2, #12]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d0:	4b04      	ldr	r3, [pc, #16]	@ (80025e4 <__NVIC_GetPriorityGrouping+0x18>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	f003 0307 	and.w	r3, r3, #7
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	db0b      	blt.n	8002612 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	f003 021f 	and.w	r2, r3, #31
 8002600:	4907      	ldr	r1, [pc, #28]	@ (8002620 <__NVIC_EnableIRQ+0x38>)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	2001      	movs	r0, #1
 800260a:	fa00 f202 	lsl.w	r2, r0, r2
 800260e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000e100 	.word	0xe000e100

08002624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	6039      	str	r1, [r7, #0]
 800262e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002634:	2b00      	cmp	r3, #0
 8002636:	db0a      	blt.n	800264e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	b2da      	uxtb	r2, r3
 800263c:	490c      	ldr	r1, [pc, #48]	@ (8002670 <__NVIC_SetPriority+0x4c>)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	0112      	lsls	r2, r2, #4
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	440b      	add	r3, r1
 8002648:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800264c:	e00a      	b.n	8002664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4908      	ldr	r1, [pc, #32]	@ (8002674 <__NVIC_SetPriority+0x50>)
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	3b04      	subs	r3, #4
 800265c:	0112      	lsls	r2, r2, #4
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	440b      	add	r3, r1
 8002662:	761a      	strb	r2, [r3, #24]
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000e100 	.word	0xe000e100
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002678:	b480      	push	{r7}
 800267a:	b089      	sub	sp, #36	@ 0x24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f1c3 0307 	rsb	r3, r3, #7
 8002692:	2b04      	cmp	r3, #4
 8002694:	bf28      	it	cs
 8002696:	2304      	movcs	r3, #4
 8002698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3304      	adds	r3, #4
 800269e:	2b06      	cmp	r3, #6
 80026a0:	d902      	bls.n	80026a8 <NVIC_EncodePriority+0x30>
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3b03      	subs	r3, #3
 80026a6:	e000      	b.n	80026aa <NVIC_EncodePriority+0x32>
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ac:	f04f 32ff 	mov.w	r2, #4294967295
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43da      	mvns	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	401a      	ands	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c0:	f04f 31ff 	mov.w	r1, #4294967295
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ca:	43d9      	mvns	r1, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d0:	4313      	orrs	r3, r2
         );
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3724      	adds	r7, #36	@ 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
	...

080026e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026f0:	d301      	bcc.n	80026f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026f2:	2301      	movs	r3, #1
 80026f4:	e00f      	b.n	8002716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002720 <SysTick_Config+0x40>)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026fe:	210f      	movs	r1, #15
 8002700:	f04f 30ff 	mov.w	r0, #4294967295
 8002704:	f7ff ff8e 	bl	8002624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002708:	4b05      	ldr	r3, [pc, #20]	@ (8002720 <SysTick_Config+0x40>)
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800270e:	4b04      	ldr	r3, [pc, #16]	@ (8002720 <SysTick_Config+0x40>)
 8002710:	2207      	movs	r2, #7
 8002712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	e000e010 	.word	0xe000e010

08002724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff ff29 	bl	8002584 <__NVIC_SetPriorityGrouping>
}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800273a:	b580      	push	{r7, lr}
 800273c:	b086      	sub	sp, #24
 800273e:	af00      	add	r7, sp, #0
 8002740:	4603      	mov	r3, r0
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
 8002746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800274c:	f7ff ff3e 	bl	80025cc <__NVIC_GetPriorityGrouping>
 8002750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	6978      	ldr	r0, [r7, #20]
 8002758:	f7ff ff8e 	bl	8002678 <NVIC_EncodePriority>
 800275c:	4602      	mov	r2, r0
 800275e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff5d 	bl	8002624 <__NVIC_SetPriority>
}
 800276a:	bf00      	nop
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	4603      	mov	r3, r0
 800277a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800277c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff31 	bl	80025e8 <__NVIC_EnableIRQ>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ffa2 	bl	80026e0 <SysTick_Config>
 800279c:	4603      	mov	r3, r0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027b4:	f7ff fc54 	bl	8002060 <HAL_GetTick>
 80027b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d008      	beq.n	80027d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2280      	movs	r2, #128	@ 0x80
 80027ca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e052      	b.n	800287e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0216 	bic.w	r2, r2, #22
 80027e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d103      	bne.n	8002808 <HAL_DMA_Abort+0x62>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002804:	2b00      	cmp	r3, #0
 8002806:	d007      	beq.n	8002818 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0208 	bic.w	r2, r2, #8
 8002816:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002828:	e013      	b.n	8002852 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800282a:	f7ff fc19 	bl	8002060 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b05      	cmp	r3, #5
 8002836:	d90c      	bls.n	8002852 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2220      	movs	r2, #32
 800283c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2203      	movs	r2, #3
 8002842:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e015      	b.n	800287e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1e4      	bne.n	800282a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002864:	223f      	movs	r2, #63	@ 0x3f
 8002866:	409a      	lsls	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d004      	beq.n	80028a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2280      	movs	r2, #128	@ 0x80
 800289e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e00c      	b.n	80028be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2205      	movs	r2, #5
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0201 	bic.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b089      	sub	sp, #36	@ 0x24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028de:	2300      	movs	r3, #0
 80028e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	e16b      	b.n	8002bc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028e8:	2201      	movs	r2, #1
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	697a      	ldr	r2, [r7, #20]
 80028f8:	4013      	ands	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	429a      	cmp	r2, r3
 8002902:	f040 815a 	bne.w	8002bba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	2b01      	cmp	r3, #1
 8002910:	d005      	beq.n	800291e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800291a:	2b02      	cmp	r3, #2
 800291c:	d130      	bne.n	8002980 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	2203      	movs	r2, #3
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4313      	orrs	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002954:	2201      	movs	r2, #1
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	091b      	lsrs	r3, r3, #4
 800296a:	f003 0201 	and.w	r2, r3, #1
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	4313      	orrs	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	2b03      	cmp	r3, #3
 800298a:	d017      	beq.n	80029bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	2203      	movs	r2, #3
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d123      	bne.n	8002a10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	08da      	lsrs	r2, r3, #3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3208      	adds	r2, #8
 80029d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	220f      	movs	r2, #15
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	08da      	lsrs	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3208      	adds	r2, #8
 8002a0a:	69b9      	ldr	r1, [r7, #24]
 8002a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0203 	and.w	r2, r3, #3
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 80b4 	beq.w	8002bba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	4b60      	ldr	r3, [pc, #384]	@ (8002bd8 <HAL_GPIO_Init+0x30c>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5a:	4a5f      	ldr	r2, [pc, #380]	@ (8002bd8 <HAL_GPIO_Init+0x30c>)
 8002a5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a62:	4b5d      	ldr	r3, [pc, #372]	@ (8002bd8 <HAL_GPIO_Init+0x30c>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a6e:	4a5b      	ldr	r2, [pc, #364]	@ (8002bdc <HAL_GPIO_Init+0x310>)
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	089b      	lsrs	r3, r3, #2
 8002a74:	3302      	adds	r3, #2
 8002a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	220f      	movs	r2, #15
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a52      	ldr	r2, [pc, #328]	@ (8002be0 <HAL_GPIO_Init+0x314>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d02b      	beq.n	8002af2 <HAL_GPIO_Init+0x226>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a51      	ldr	r2, [pc, #324]	@ (8002be4 <HAL_GPIO_Init+0x318>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d025      	beq.n	8002aee <HAL_GPIO_Init+0x222>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a50      	ldr	r2, [pc, #320]	@ (8002be8 <HAL_GPIO_Init+0x31c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d01f      	beq.n	8002aea <HAL_GPIO_Init+0x21e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a4f      	ldr	r2, [pc, #316]	@ (8002bec <HAL_GPIO_Init+0x320>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d019      	beq.n	8002ae6 <HAL_GPIO_Init+0x21a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a4e      	ldr	r2, [pc, #312]	@ (8002bf0 <HAL_GPIO_Init+0x324>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d013      	beq.n	8002ae2 <HAL_GPIO_Init+0x216>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a4d      	ldr	r2, [pc, #308]	@ (8002bf4 <HAL_GPIO_Init+0x328>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00d      	beq.n	8002ade <HAL_GPIO_Init+0x212>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a4c      	ldr	r2, [pc, #304]	@ (8002bf8 <HAL_GPIO_Init+0x32c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d007      	beq.n	8002ada <HAL_GPIO_Init+0x20e>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a4b      	ldr	r2, [pc, #300]	@ (8002bfc <HAL_GPIO_Init+0x330>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d101      	bne.n	8002ad6 <HAL_GPIO_Init+0x20a>
 8002ad2:	2307      	movs	r3, #7
 8002ad4:	e00e      	b.n	8002af4 <HAL_GPIO_Init+0x228>
 8002ad6:	2308      	movs	r3, #8
 8002ad8:	e00c      	b.n	8002af4 <HAL_GPIO_Init+0x228>
 8002ada:	2306      	movs	r3, #6
 8002adc:	e00a      	b.n	8002af4 <HAL_GPIO_Init+0x228>
 8002ade:	2305      	movs	r3, #5
 8002ae0:	e008      	b.n	8002af4 <HAL_GPIO_Init+0x228>
 8002ae2:	2304      	movs	r3, #4
 8002ae4:	e006      	b.n	8002af4 <HAL_GPIO_Init+0x228>
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e004      	b.n	8002af4 <HAL_GPIO_Init+0x228>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e002      	b.n	8002af4 <HAL_GPIO_Init+0x228>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <HAL_GPIO_Init+0x228>
 8002af2:	2300      	movs	r3, #0
 8002af4:	69fa      	ldr	r2, [r7, #28]
 8002af6:	f002 0203 	and.w	r2, r2, #3
 8002afa:	0092      	lsls	r2, r2, #2
 8002afc:	4093      	lsls	r3, r2
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b04:	4935      	ldr	r1, [pc, #212]	@ (8002bdc <HAL_GPIO_Init+0x310>)
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	089b      	lsrs	r3, r3, #2
 8002b0a:	3302      	adds	r3, #2
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b12:	4b3b      	ldr	r3, [pc, #236]	@ (8002c00 <HAL_GPIO_Init+0x334>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4013      	ands	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d003      	beq.n	8002b36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b2e:	69ba      	ldr	r2, [r7, #24]
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b36:	4a32      	ldr	r2, [pc, #200]	@ (8002c00 <HAL_GPIO_Init+0x334>)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b3c:	4b30      	ldr	r3, [pc, #192]	@ (8002c00 <HAL_GPIO_Init+0x334>)
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b60:	4a27      	ldr	r2, [pc, #156]	@ (8002c00 <HAL_GPIO_Init+0x334>)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b66:	4b26      	ldr	r3, [pc, #152]	@ (8002c00 <HAL_GPIO_Init+0x334>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b8a:	4a1d      	ldr	r2, [pc, #116]	@ (8002c00 <HAL_GPIO_Init+0x334>)
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b90:	4b1b      	ldr	r3, [pc, #108]	@ (8002c00 <HAL_GPIO_Init+0x334>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bb4:	4a12      	ldr	r2, [pc, #72]	@ (8002c00 <HAL_GPIO_Init+0x334>)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	61fb      	str	r3, [r7, #28]
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	2b0f      	cmp	r3, #15
 8002bc4:	f67f ae90 	bls.w	80028e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bc8:	bf00      	nop
 8002bca:	bf00      	nop
 8002bcc:	3724      	adds	r7, #36	@ 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	40013800 	.word	0x40013800
 8002be0:	40020000 	.word	0x40020000
 8002be4:	40020400 	.word	0x40020400
 8002be8:	40020800 	.word	0x40020800
 8002bec:	40020c00 	.word	0x40020c00
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40021400 	.word	0x40021400
 8002bf8:	40021800 	.word	0x40021800
 8002bfc:	40021c00 	.word	0x40021c00
 8002c00:	40013c00 	.word	0x40013c00

08002c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	807b      	strh	r3, [r7, #2]
 8002c10:	4613      	mov	r3, r2
 8002c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c14:	787b      	ldrb	r3, [r7, #1]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c1a:	887a      	ldrh	r2, [r7, #2]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c20:	e003      	b.n	8002c2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c22:	887b      	ldrh	r3, [r7, #2]
 8002c24:	041a      	lsls	r2, r3, #16
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	619a      	str	r2, [r3, #24]
}
 8002c2a:	bf00      	nop
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e12b      	b.n	8002ea2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fe fcd2 	bl	8001608 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2224      	movs	r2, #36	@ 0x24
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0201 	bic.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c9c:	f001 ffd2 	bl	8004c44 <HAL_RCC_GetPCLK1Freq>
 8002ca0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4a81      	ldr	r2, [pc, #516]	@ (8002eac <HAL_I2C_Init+0x274>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d807      	bhi.n	8002cbc <HAL_I2C_Init+0x84>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4a80      	ldr	r2, [pc, #512]	@ (8002eb0 <HAL_I2C_Init+0x278>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	bf94      	ite	ls
 8002cb4:	2301      	movls	r3, #1
 8002cb6:	2300      	movhi	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	e006      	b.n	8002cca <HAL_I2C_Init+0x92>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4a7d      	ldr	r2, [pc, #500]	@ (8002eb4 <HAL_I2C_Init+0x27c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	bf94      	ite	ls
 8002cc4:	2301      	movls	r3, #1
 8002cc6:	2300      	movhi	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e0e7      	b.n	8002ea2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4a78      	ldr	r2, [pc, #480]	@ (8002eb8 <HAL_I2C_Init+0x280>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	0c9b      	lsrs	r3, r3, #18
 8002cdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	4a6a      	ldr	r2, [pc, #424]	@ (8002eac <HAL_I2C_Init+0x274>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d802      	bhi.n	8002d0c <HAL_I2C_Init+0xd4>
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	e009      	b.n	8002d20 <HAL_I2C_Init+0xe8>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d12:	fb02 f303 	mul.w	r3, r2, r3
 8002d16:	4a69      	ldr	r2, [pc, #420]	@ (8002ebc <HAL_I2C_Init+0x284>)
 8002d18:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1c:	099b      	lsrs	r3, r3, #6
 8002d1e:	3301      	adds	r3, #1
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	430b      	orrs	r3, r1
 8002d26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	495c      	ldr	r1, [pc, #368]	@ (8002eac <HAL_I2C_Init+0x274>)
 8002d3c:	428b      	cmp	r3, r1
 8002d3e:	d819      	bhi.n	8002d74 <HAL_I2C_Init+0x13c>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	1e59      	subs	r1, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d4e:	1c59      	adds	r1, r3, #1
 8002d50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d54:	400b      	ands	r3, r1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_I2C_Init+0x138>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	1e59      	subs	r1, r3, #1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6e:	e051      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002d70:	2304      	movs	r3, #4
 8002d72:	e04f      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d111      	bne.n	8002da0 <HAL_I2C_Init+0x168>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1e58      	subs	r0, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	440b      	add	r3, r1
 8002d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8e:	3301      	adds	r3, #1
 8002d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e012      	b.n	8002dc6 <HAL_I2C_Init+0x18e>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	1e58      	subs	r0, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6859      	ldr	r1, [r3, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	0099      	lsls	r1, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002db6:	3301      	adds	r3, #1
 8002db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_I2C_Init+0x196>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e022      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10e      	bne.n	8002df4 <HAL_I2C_Init+0x1bc>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	1e58      	subs	r0, r3, #1
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6859      	ldr	r1, [r3, #4]
 8002dde:	460b      	mov	r3, r1
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	440b      	add	r3, r1
 8002de4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002df2:	e00f      	b.n	8002e14 <HAL_I2C_Init+0x1dc>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1e58      	subs	r0, r3, #1
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	0099      	lsls	r1, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	6809      	ldr	r1, [r1, #0]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	69da      	ldr	r2, [r3, #28]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6911      	ldr	r1, [r2, #16]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68d2      	ldr	r2, [r2, #12]
 8002e4e:	4311      	orrs	r1, r2
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6812      	ldr	r2, [r2, #0]
 8002e54:	430b      	orrs	r3, r1
 8002e56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	000186a0 	.word	0x000186a0
 8002eb0:	001e847f 	.word	0x001e847f
 8002eb4:	003d08ff 	.word	0x003d08ff
 8002eb8:	431bde83 	.word	0x431bde83
 8002ebc:	10624dd3 	.word	0x10624dd3

08002ec0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e101      	b.n	80030d6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d106      	bne.n	8002ef2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f008 fd61 	bl	800b9b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2203      	movs	r2, #3
 8002ef6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f00:	d102      	bne.n	8002f08 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f003 fe30 	bl	8006b72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	7c1a      	ldrb	r2, [r3, #16]
 8002f1a:	f88d 2000 	strb.w	r2, [sp]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f22:	f003 fd0f 	bl	8006944 <USB_CoreInit>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0ce      	b.n	80030d6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f003 fe28 	bl	8006b94 <USB_SetCurrentMode>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e0bf      	b.n	80030d6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f56:	2300      	movs	r3, #0
 8002f58:	73fb      	strb	r3, [r7, #15]
 8002f5a:	e04a      	b.n	8002ff2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f5c:	7bfa      	ldrb	r2, [r7, #15]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	3315      	adds	r3, #21
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f70:	7bfa      	ldrb	r2, [r7, #15]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3314      	adds	r3, #20
 8002f80:	7bfa      	ldrb	r2, [r7, #15]
 8002f82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f84:	7bfa      	ldrb	r2, [r7, #15]
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	b298      	uxth	r0, r3
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	332e      	adds	r3, #46	@ 0x2e
 8002f98:	4602      	mov	r2, r0
 8002f9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f9c:	7bfa      	ldrb	r2, [r7, #15]
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	3318      	adds	r3, #24
 8002fac:	2200      	movs	r2, #0
 8002fae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002fb0:	7bfa      	ldrb	r2, [r7, #15]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	331c      	adds	r3, #28
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fc4:	7bfa      	ldrb	r2, [r7, #15]
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	3320      	adds	r3, #32
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fd8:	7bfa      	ldrb	r2, [r7, #15]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	3324      	adds	r3, #36	@ 0x24
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	791b      	ldrb	r3, [r3, #4]
 8002ff6:	7bfa      	ldrb	r2, [r7, #15]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d3af      	bcc.n	8002f5c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	73fb      	strb	r3, [r7, #15]
 8003000:	e044      	b.n	800308c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003002:	7bfa      	ldrb	r2, [r7, #15]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	00db      	lsls	r3, r3, #3
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003014:	2200      	movs	r2, #0
 8003016:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003018:	7bfa      	ldrb	r2, [r7, #15]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800302a:	7bfa      	ldrb	r2, [r7, #15]
 800302c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800302e:	7bfa      	ldrb	r2, [r7, #15]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4413      	add	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003044:	7bfa      	ldrb	r2, [r7, #15]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800305a:	7bfa      	ldrb	r2, [r7, #15]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	4613      	mov	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	3301      	adds	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	791b      	ldrb	r3, [r3, #4]
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	429a      	cmp	r2, r3
 8003094:	d3b5      	bcc.n	8003002 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	7c1a      	ldrb	r2, [r3, #16]
 800309e:	f88d 2000 	strb.w	r2, [sp]
 80030a2:	3304      	adds	r3, #4
 80030a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030a6:	f003 fdc1 	bl	8006c2c <USB_DevInit>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e00c      	b.n	80030d6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f004 fe0b 	bl	8007cea <USB_DevDisconnect>

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b084      	sub	sp, #16
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_PCD_Start+0x1c>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e022      	b.n	8003140 <HAL_PCD_Start+0x62>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800310a:	2b00      	cmp	r3, #0
 800310c:	d009      	beq.n	8003122 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003112:	2b01      	cmp	r3, #1
 8003114:	d105      	bne.n	8003122 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800311a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f003 fd12 	bl	8006b50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f004 fdb9 	bl	8007ca8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003148:	b590      	push	{r4, r7, lr}
 800314a:	b08d      	sub	sp, #52	@ 0x34
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4618      	mov	r0, r3
 8003160:	f004 fe77 	bl	8007e52 <USB_GetMode>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	f040 848c 	bne.w	8003a84 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f004 fddb 	bl	8007d2c <USB_ReadInterrupts>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 8482 	beq.w	8003a82 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	0a1b      	lsrs	r3, r3, #8
 8003188:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f004 fdc8 	bl	8007d2c <USB_ReadInterrupts>
 800319c:	4603      	mov	r3, r0
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d107      	bne.n	80031b6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695a      	ldr	r2, [r3, #20]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f002 0202 	and.w	r2, r2, #2
 80031b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f004 fdb6 	bl	8007d2c <USB_ReadInterrupts>
 80031c0:	4603      	mov	r3, r0
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b10      	cmp	r3, #16
 80031c8:	d161      	bne.n	800328e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	699a      	ldr	r2, [r3, #24]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0210 	bic.w	r2, r2, #16
 80031d8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80031da:	6a3b      	ldr	r3, [r7, #32]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	f003 020f 	and.w	r2, r3, #15
 80031e6:	4613      	mov	r3, r2
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	3304      	adds	r3, #4
 80031f8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	0c5b      	lsrs	r3, r3, #17
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	2b02      	cmp	r3, #2
 8003204:	d124      	bne.n	8003250 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800320c:	4013      	ands	r3, r2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d035      	beq.n	800327e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800321c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003220:	b29b      	uxth	r3, r3
 8003222:	461a      	mov	r2, r3
 8003224:	6a38      	ldr	r0, [r7, #32]
 8003226:	f004 fbed 	bl	8007a04 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003236:	441a      	add	r2, r3
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	695a      	ldr	r2, [r3, #20]
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	091b      	lsrs	r3, r3, #4
 8003244:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003248:	441a      	add	r2, r3
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	615a      	str	r2, [r3, #20]
 800324e:	e016      	b.n	800327e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	0c5b      	lsrs	r3, r3, #17
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	2b06      	cmp	r3, #6
 800325a:	d110      	bne.n	800327e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003262:	2208      	movs	r2, #8
 8003264:	4619      	mov	r1, r3
 8003266:	6a38      	ldr	r0, [r7, #32]
 8003268:	f004 fbcc 	bl	8007a04 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	695a      	ldr	r2, [r3, #20]
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003278:	441a      	add	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699a      	ldr	r2, [r3, #24]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0210 	orr.w	r2, r2, #16
 800328c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f004 fd4a 	bl	8007d2c <USB_ReadInterrupts>
 8003298:	4603      	mov	r3, r0
 800329a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800329e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80032a2:	f040 80a7 	bne.w	80033f4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f004 fd4f 	bl	8007d52 <USB_ReadDevAllOutEpInterrupt>
 80032b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80032b6:	e099      	b.n	80033ec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80032b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 808e 	beq.w	80033e0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ca:	b2d2      	uxtb	r2, r2
 80032cc:	4611      	mov	r1, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f004 fd73 	bl	8007dba <USB_ReadDevOutEPInterrupt>
 80032d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00c      	beq.n	80032fa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80032e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032ec:	461a      	mov	r2, r3
 80032ee:	2301      	movs	r3, #1
 80032f0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80032f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fea3 	bl	8004040 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00c      	beq.n	800331e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003310:	461a      	mov	r2, r3
 8003312:	2308      	movs	r3, #8
 8003314:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003316:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 ff79 	bl	8004210 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003334:	461a      	mov	r2, r3
 8003336:	2310      	movs	r3, #16
 8003338:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b00      	cmp	r3, #0
 8003342:	d030      	beq.n	80033a6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800334c:	2b80      	cmp	r3, #128	@ 0x80
 800334e:	d109      	bne.n	8003364 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	69fa      	ldr	r2, [r7, #28]
 800335a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800335e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003362:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003366:	4613      	mov	r3, r2
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	3304      	adds	r3, #4
 8003378:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	78db      	ldrb	r3, [r3, #3]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d108      	bne.n	8003394 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	2200      	movs	r2, #0
 8003386:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338a:	b2db      	uxtb	r3, r3
 800338c:	4619      	mov	r1, r3
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f008 fc16 	bl	800bbc0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	4413      	add	r3, r2
 800339c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033a0:	461a      	mov	r2, r3
 80033a2:	2302      	movs	r3, #2
 80033a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f003 0320 	and.w	r3, r3, #32
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033bc:	461a      	mov	r2, r3
 80033be:	2320      	movs	r3, #32
 80033c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d009      	beq.n	80033e0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	015a      	lsls	r2, r3, #5
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033d8:	461a      	mov	r2, r3
 80033da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80033de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80033e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e2:	3301      	adds	r3, #1
 80033e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80033e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e8:	085b      	lsrs	r3, r3, #1
 80033ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80033ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	f47f af62 	bne.w	80032b8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f004 fc97 	bl	8007d2c <USB_ReadInterrupts>
 80033fe:	4603      	mov	r3, r0
 8003400:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003404:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003408:	f040 80db 	bne.w	80035c2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f004 fcb8 	bl	8007d86 <USB_ReadDevAllInEpInterrupt>
 8003416:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800341c:	e0cd      	b.n	80035ba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800341e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80c2 	beq.w	80035ae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	4611      	mov	r1, r2
 8003434:	4618      	mov	r0, r3
 8003436:	f004 fcde 	bl	8007df6 <USB_ReadDevInEPInterrupt>
 800343a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d057      	beq.n	80034f6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	2201      	movs	r2, #1
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800345a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	43db      	mvns	r3, r3
 8003460:	69f9      	ldr	r1, [r7, #28]
 8003462:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003466:	4013      	ands	r3, r2
 8003468:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800346a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	4413      	add	r3, r2
 8003472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003476:	461a      	mov	r2, r3
 8003478:	2301      	movs	r3, #1
 800347a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	799b      	ldrb	r3, [r3, #6]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d132      	bne.n	80034ea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003488:	4613      	mov	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	4413      	add	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	440b      	add	r3, r1
 8003492:	3320      	adds	r3, #32
 8003494:	6819      	ldr	r1, [r3, #0]
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800349a:	4613      	mov	r3, r2
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4413      	add	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4403      	add	r3, r0
 80034a4:	331c      	adds	r3, #28
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4419      	add	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ae:	4613      	mov	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4403      	add	r3, r0
 80034b8:	3320      	adds	r3, #32
 80034ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80034bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d113      	bne.n	80034ea <HAL_PCD_IRQHandler+0x3a2>
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c6:	4613      	mov	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	4413      	add	r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	3324      	adds	r3, #36	@ 0x24
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d108      	bne.n	80034ea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80034e2:	461a      	mov	r2, r3
 80034e4:	2101      	movs	r1, #1
 80034e6:	f004 fce5 	bl	8007eb4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	4619      	mov	r1, r3
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f008 fae0 	bl	800bab6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	4413      	add	r3, r2
 8003508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800350c:	461a      	mov	r2, r3
 800350e:	2308      	movs	r3, #8
 8003510:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	4413      	add	r3, r2
 8003524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003528:	461a      	mov	r2, r3
 800352a:	2310      	movs	r3, #16
 800352c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	4413      	add	r3, r2
 8003540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003544:	461a      	mov	r2, r3
 8003546:	2340      	movs	r3, #64	@ 0x40
 8003548:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d023      	beq.n	800359c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003554:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003556:	6a38      	ldr	r0, [r7, #32]
 8003558:	f003 fccc 	bl	8006ef4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800355c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800355e:	4613      	mov	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	3310      	adds	r3, #16
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	4413      	add	r3, r2
 800356c:	3304      	adds	r3, #4
 800356e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	78db      	ldrb	r3, [r3, #3]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d108      	bne.n	800358a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2200      	movs	r2, #0
 800357c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003580:	b2db      	uxtb	r3, r3
 8003582:	4619      	mov	r1, r3
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f008 fb2d 	bl	800bbe4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800358a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358c:	015a      	lsls	r2, r3, #5
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	4413      	add	r3, r2
 8003592:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003596:	461a      	mov	r2, r3
 8003598:	2302      	movs	r3, #2
 800359a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80035a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fcbd 	bl	8003f28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b0:	3301      	adds	r3, #1
 80035b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80035b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b6:	085b      	lsrs	r3, r3, #1
 80035b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80035ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f47f af2e 	bne.w	800341e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f004 fbb0 	bl	8007d2c <USB_ReadInterrupts>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80035d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035d6:	d122      	bne.n	800361e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	69fa      	ldr	r2, [r7, #28]
 80035e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80035e6:	f023 0301 	bic.w	r3, r3, #1
 80035ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d108      	bne.n	8003608 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80035fe:	2100      	movs	r1, #0
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fea3 	bl	800434c <HAL_PCDEx_LPM_Callback>
 8003606:	e002      	b.n	800360e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f008 facb 	bl	800bba4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695a      	ldr	r2, [r3, #20]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800361c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f004 fb82 	bl	8007d2c <USB_ReadInterrupts>
 8003628:	4603      	mov	r3, r0
 800362a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800362e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003632:	d112      	bne.n	800365a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b01      	cmp	r3, #1
 8003642:	d102      	bne.n	800364a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f008 fa87 	bl	800bb58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695a      	ldr	r2, [r3, #20]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003658:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f004 fb64 	bl	8007d2c <USB_ReadInterrupts>
 8003664:	4603      	mov	r3, r0
 8003666:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800366a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800366e:	f040 80b7 	bne.w	80037e0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003680:	f023 0301 	bic.w	r3, r3, #1
 8003684:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2110      	movs	r1, #16
 800368c:	4618      	mov	r0, r3
 800368e:	f003 fc31 	bl	8006ef4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003692:	2300      	movs	r3, #0
 8003694:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003696:	e046      	b.n	8003726 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036a4:	461a      	mov	r2, r3
 80036a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80036aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036bc:	0151      	lsls	r1, r2, #5
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	440a      	add	r2, r1
 80036c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80036c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80036ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80036cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036d8:	461a      	mov	r2, r3
 80036da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80036de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80036e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036f0:	0151      	lsls	r1, r2, #5
 80036f2:	69fa      	ldr	r2, [r7, #28]
 80036f4:	440a      	add	r2, r1
 80036f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80036fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80036fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	4413      	add	r3, r2
 8003708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003710:	0151      	lsls	r1, r2, #5
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	440a      	add	r2, r1
 8003716:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800371a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800371e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003722:	3301      	adds	r3, #1
 8003724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	791b      	ldrb	r3, [r3, #4]
 800372a:	461a      	mov	r2, r3
 800372c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800372e:	4293      	cmp	r3, r2
 8003730:	d3b2      	bcc.n	8003698 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	69fa      	ldr	r2, [r7, #28]
 800373c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003740:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003744:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	7bdb      	ldrb	r3, [r3, #15]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d016      	beq.n	800377c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003754:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800375e:	f043 030b 	orr.w	r3, r3, #11
 8003762:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800376c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003774:	f043 030b 	orr.w	r3, r3, #11
 8003778:	6453      	str	r3, [r2, #68]	@ 0x44
 800377a:	e015      	b.n	80037a8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	69fa      	ldr	r2, [r7, #28]
 8003786:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800378a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800378e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003792:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037a2:	f043 030b 	orr.w	r3, r3, #11
 80037a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037b6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80037ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6818      	ldr	r0, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037ca:	461a      	mov	r2, r3
 80037cc:	f004 fb72 	bl	8007eb4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80037de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f004 faa1 	bl	8007d2c <USB_ReadInterrupts>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037f4:	d123      	bne.n	800383e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f004 fb37 	bl	8007e6e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f003 fbee 	bl	8006fe6 <USB_GetDevSpeed>
 800380a:	4603      	mov	r3, r0
 800380c:	461a      	mov	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681c      	ldr	r4, [r3, #0]
 8003816:	f001 fa09 	bl	8004c2c <HAL_RCC_GetHCLKFreq>
 800381a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003820:	461a      	mov	r2, r3
 8003822:	4620      	mov	r0, r4
 8003824:	f003 f8f2 	bl	8006a0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f008 f96c 	bl	800bb06 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800383c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f004 fa72 	bl	8007d2c <USB_ReadInterrupts>
 8003848:	4603      	mov	r3, r0
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b08      	cmp	r3, #8
 8003850:	d10a      	bne.n	8003868 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f008 f949 	bl	800baea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f002 0208 	and.w	r2, r2, #8
 8003866:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f004 fa5d 	bl	8007d2c <USB_ReadInterrupts>
 8003872:	4603      	mov	r3, r0
 8003874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003878:	2b80      	cmp	r3, #128	@ 0x80
 800387a:	d123      	bne.n	80038c4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003888:	2301      	movs	r3, #1
 800388a:	627b      	str	r3, [r7, #36]	@ 0x24
 800388c:	e014      	b.n	80038b8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003892:	4613      	mov	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	4413      	add	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d105      	bne.n	80038b2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80038a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	4619      	mov	r1, r3
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fb0a 	bl	8003ec6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b4:	3301      	adds	r3, #1
 80038b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	791b      	ldrb	r3, [r3, #4]
 80038bc:	461a      	mov	r2, r3
 80038be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d3e4      	bcc.n	800388e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f004 fa2f 	bl	8007d2c <USB_ReadInterrupts>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80038d8:	d13c      	bne.n	8003954 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038da:	2301      	movs	r3, #1
 80038dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80038de:	e02b      	b.n	8003938 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80038e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038f4:	4613      	mov	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	3318      	adds	r3, #24
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d115      	bne.n	8003932 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003906:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003908:	2b00      	cmp	r3, #0
 800390a:	da12      	bge.n	8003932 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003910:	4613      	mov	r3, r2
 8003912:	00db      	lsls	r3, r3, #3
 8003914:	4413      	add	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	3317      	adds	r3, #23
 800391c:	2201      	movs	r2, #1
 800391e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003922:	b2db      	uxtb	r3, r3
 8003924:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003928:	b2db      	uxtb	r3, r3
 800392a:	4619      	mov	r1, r3
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 faca 	bl	8003ec6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003934:	3301      	adds	r3, #1
 8003936:	627b      	str	r3, [r7, #36]	@ 0x24
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	791b      	ldrb	r3, [r3, #4]
 800393c:	461a      	mov	r2, r3
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	4293      	cmp	r3, r2
 8003942:	d3cd      	bcc.n	80038e0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695a      	ldr	r2, [r3, #20]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003952:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f004 f9e7 	bl	8007d2c <USB_ReadInterrupts>
 800395e:	4603      	mov	r3, r0
 8003960:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003964:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003968:	d156      	bne.n	8003a18 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800396a:	2301      	movs	r3, #1
 800396c:	627b      	str	r3, [r7, #36]	@ 0x24
 800396e:	e045      	b.n	80039fc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003984:	4613      	mov	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d12e      	bne.n	80039f6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003998:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800399a:	2b00      	cmp	r3, #0
 800399c:	da2b      	bge.n	80039f6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80039aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d121      	bne.n	80039f6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039b6:	4613      	mov	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4413      	add	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	440b      	add	r3, r1
 80039c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80039c4:	2201      	movs	r2, #1
 80039c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10a      	bne.n	80039f6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	69fa      	ldr	r2, [r7, #28]
 80039ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039f2:	6053      	str	r3, [r2, #4]
            break;
 80039f4:	e008      	b.n	8003a08 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f8:	3301      	adds	r3, #1
 80039fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	791b      	ldrb	r3, [r3, #4]
 8003a00:	461a      	mov	r2, r3
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d3b3      	bcc.n	8003970 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	695a      	ldr	r2, [r3, #20]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003a16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f004 f985 	bl	8007d2c <USB_ReadInterrupts>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a2c:	d10a      	bne.n	8003a44 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f008 f8ea 	bl	800bc08 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003a42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f004 f96f 	bl	8007d2c <USB_ReadInterrupts>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d115      	bne.n	8003a84 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f008 f8da 	bl	800bc24 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6859      	ldr	r1, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]
 8003a80:	e000      	b.n	8003a84 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003a82:	bf00      	nop
    }
  }
}
 8003a84:	3734      	adds	r7, #52	@ 0x34
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd90      	pop	{r4, r7, pc}

08003a8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	460b      	mov	r3, r1
 8003a94:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d101      	bne.n	8003aa4 <HAL_PCD_SetAddress+0x1a>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e012      	b.n	8003aca <HAL_PCD_SetAddress+0x40>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	78fa      	ldrb	r2, [r7, #3]
 8003ab0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	78fa      	ldrb	r2, [r7, #3]
 8003ab8:	4611      	mov	r1, r2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f004 f8ce 	bl	8007c5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	4608      	mov	r0, r1
 8003adc:	4611      	mov	r1, r2
 8003ade:	461a      	mov	r2, r3
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	70fb      	strb	r3, [r7, #3]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	803b      	strh	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003af0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	da0f      	bge.n	8003b18 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003af8:	78fb      	ldrb	r3, [r7, #3]
 8003afa:	f003 020f 	and.w	r2, r3, #15
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	3310      	adds	r3, #16
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2201      	movs	r2, #1
 8003b14:	705a      	strb	r2, [r3, #1]
 8003b16:	e00f      	b.n	8003b38 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	f003 020f 	and.w	r2, r3, #15
 8003b1e:	4613      	mov	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	4413      	add	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	3304      	adds	r3, #4
 8003b30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b38:	78fb      	ldrb	r3, [r7, #3]
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003b44:	883b      	ldrh	r3, [r7, #0]
 8003b46:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	78ba      	ldrb	r2, [r7, #2]
 8003b52:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	785b      	ldrb	r3, [r3, #1]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d004      	beq.n	8003b66 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b66:	78bb      	ldrb	r3, [r7, #2]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d102      	bne.n	8003b72 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_PCD_EP_Open+0xae>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e00e      	b.n	8003b9e <HAL_PCD_EP_Open+0xcc>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68f9      	ldr	r1, [r7, #12]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f003 fa4e 	bl	8007030 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003b9c:	7afb      	ldrb	r3, [r7, #11]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b084      	sub	sp, #16
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	da0f      	bge.n	8003bda <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	f003 020f 	and.w	r2, r3, #15
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	3310      	adds	r3, #16
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	3304      	adds	r3, #4
 8003bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	705a      	strb	r2, [r3, #1]
 8003bd8:	e00f      	b.n	8003bfa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bda:	78fb      	ldrb	r3, [r7, #3]
 8003bdc:	f003 020f 	and.w	r2, r3, #15
 8003be0:	4613      	mov	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	4413      	add	r3, r2
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	f003 030f 	and.w	r3, r3, #15
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_PCD_EP_Close+0x6e>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e00e      	b.n	8003c32 <HAL_PCD_EP_Close+0x8c>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68f9      	ldr	r1, [r7, #12]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f003 fa8c 	bl	8007140 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b086      	sub	sp, #24
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
 8003c46:	460b      	mov	r3, r1
 8003c48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c4a:	7afb      	ldrb	r3, [r7, #11]
 8003c4c:	f003 020f 	and.w	r2, r3, #15
 8003c50:	4613      	mov	r3, r2
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	3304      	adds	r3, #4
 8003c62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	2200      	movs	r2, #0
 8003c74:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c7c:	7afb      	ldrb	r3, [r7, #11]
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	799b      	ldrb	r3, [r3, #6]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d102      	bne.n	8003c96 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6818      	ldr	r0, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	799b      	ldrb	r3, [r3, #6]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	6979      	ldr	r1, [r7, #20]
 8003ca2:	f003 fb29 	bl	80072f8 <USB_EPStartXfer>

  return HAL_OK;
 8003ca6:	2300      	movs	r3, #0
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3718      	adds	r7, #24
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	f003 020f 	and.w	r2, r3, #15
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003cd2:	681b      	ldr	r3, [r3, #0]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	607a      	str	r2, [r7, #4]
 8003cea:	603b      	str	r3, [r7, #0]
 8003cec:	460b      	mov	r3, r1
 8003cee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cf0:	7afb      	ldrb	r3, [r7, #11]
 8003cf2:	f003 020f 	and.w	r2, r3, #15
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	3310      	adds	r3, #16
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4413      	add	r3, r2
 8003d04:	3304      	adds	r3, #4
 8003d06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2200      	movs	r2, #0
 8003d18:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d20:	7afb      	ldrb	r3, [r7, #11]
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	799b      	ldrb	r3, [r3, #6]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d102      	bne.n	8003d3a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6818      	ldr	r0, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	799b      	ldrb	r3, [r3, #6]
 8003d42:	461a      	mov	r2, r3
 8003d44:	6979      	ldr	r1, [r7, #20]
 8003d46:	f003 fad7 	bl	80072f8 <USB_EPStartXfer>

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	7912      	ldrb	r2, [r2, #4]
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d901      	bls.n	8003d72 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e04f      	b.n	8003e12 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	da0f      	bge.n	8003d9a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d7a:	78fb      	ldrb	r3, [r7, #3]
 8003d7c:	f003 020f 	and.w	r2, r3, #15
 8003d80:	4613      	mov	r3, r2
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	3310      	adds	r3, #16
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3304      	adds	r3, #4
 8003d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2201      	movs	r2, #1
 8003d96:	705a      	strb	r2, [r3, #1]
 8003d98:	e00d      	b.n	8003db6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d9a:	78fa      	ldrb	r2, [r7, #3]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	4413      	add	r3, r2
 8003dac:	3304      	adds	r3, #4
 8003dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_PCD_EP_SetStall+0x82>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e01d      	b.n	8003e12 <HAL_PCD_EP_SetStall+0xbe>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68f9      	ldr	r1, [r7, #12]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f003 fe65 	bl	8007ab4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d109      	bne.n	8003e08 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	7999      	ldrb	r1, [r3, #6]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e02:	461a      	mov	r2, r3
 8003e04:	f004 f856 	bl	8007eb4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	460b      	mov	r3, r1
 8003e24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e26:	78fb      	ldrb	r3, [r7, #3]
 8003e28:	f003 030f 	and.w	r3, r3, #15
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	7912      	ldrb	r2, [r2, #4]
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d901      	bls.n	8003e38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e042      	b.n	8003ebe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	da0f      	bge.n	8003e60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	f003 020f 	and.w	r2, r3, #15
 8003e46:	4613      	mov	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	3310      	adds	r3, #16
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	4413      	add	r3, r2
 8003e54:	3304      	adds	r3, #4
 8003e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	705a      	strb	r2, [r3, #1]
 8003e5e:	e00f      	b.n	8003e80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	f003 020f 	and.w	r2, r3, #15
 8003e66:	4613      	mov	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	4413      	add	r3, r2
 8003e76:	3304      	adds	r3, #4
 8003e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_PCD_EP_ClrStall+0x86>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e00e      	b.n	8003ebe <HAL_PCD_EP_ClrStall+0xa4>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68f9      	ldr	r1, [r7, #12]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f003 fe6e 	bl	8007b90 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b084      	sub	sp, #16
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003ed2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	da0c      	bge.n	8003ef4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	f003 020f 	and.w	r2, r3, #15
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	3310      	adds	r3, #16
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	4413      	add	r3, r2
 8003eee:	3304      	adds	r3, #4
 8003ef0:	60fb      	str	r3, [r7, #12]
 8003ef2:	e00c      	b.n	8003f0e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ef4:	78fb      	ldrb	r3, [r7, #3]
 8003ef6:	f003 020f 	and.w	r2, r3, #15
 8003efa:	4613      	mov	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	4413      	add	r3, r2
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68f9      	ldr	r1, [r7, #12]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f003 fc8d 	bl	8007834 <USB_EPStopXfer>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003f1e:	7afb      	ldrb	r3, [r7, #11]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08a      	sub	sp, #40	@ 0x28
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	00db      	lsls	r3, r3, #3
 8003f42:	4413      	add	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	3310      	adds	r3, #16
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d901      	bls.n	8003f60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e06b      	b.n	8004038 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d902      	bls.n	8003f7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	3303      	adds	r3, #3
 8003f80:	089b      	lsrs	r3, r3, #2
 8003f82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f84:	e02a      	b.n	8003fdc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d902      	bls.n	8003fa2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	3303      	adds	r3, #3
 8003fa6:	089b      	lsrs	r3, r3, #2
 8003fa8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	68d9      	ldr	r1, [r3, #12]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	6978      	ldr	r0, [r7, #20]
 8003fc0:	f003 fce2 	bl	8007988 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	441a      	add	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	695a      	ldr	r2, [r3, #20]
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	441a      	add	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d809      	bhi.n	8004006 <PCD_WriteEmptyTxFifo+0xde>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	695a      	ldr	r2, [r3, #20]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d203      	bcs.n	8004006 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1bf      	bne.n	8003f86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	691a      	ldr	r2, [r3, #16]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	429a      	cmp	r2, r3
 8004010:	d811      	bhi.n	8004036 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	f003 030f 	and.w	r3, r3, #15
 8004018:	2201      	movs	r2, #1
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004026:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	43db      	mvns	r3, r3
 800402c:	6939      	ldr	r1, [r7, #16]
 800402e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004032:	4013      	ands	r3, r2
 8004034:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3720      	adds	r7, #32
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	333c      	adds	r3, #60	@ 0x3c
 8004058:	3304      	adds	r3, #4
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	799b      	ldrb	r3, [r3, #6]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d17b      	bne.n	800416e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	d015      	beq.n	80040ac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	4a61      	ldr	r2, [pc, #388]	@ (8004208 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	f240 80b9 	bls.w	80041fc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 80b3 	beq.w	80041fc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040a2:	461a      	mov	r2, r3
 80040a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040a8:	6093      	str	r3, [r2, #8]
 80040aa:	e0a7      	b.n	80041fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d009      	beq.n	80040ca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040c2:	461a      	mov	r2, r3
 80040c4:	2320      	movs	r3, #32
 80040c6:	6093      	str	r3, [r2, #8]
 80040c8:	e098      	b.n	80041fc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f040 8093 	bne.w	80041fc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	4a4b      	ldr	r2, [pc, #300]	@ (8004208 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d90f      	bls.n	80040fe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040f4:	461a      	mov	r2, r3
 80040f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040fa:	6093      	str	r3, [r2, #8]
 80040fc:	e07e      	b.n	80041fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	4413      	add	r3, r2
 8004110:	3304      	adds	r3, #4
 8004112:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a1a      	ldr	r2, [r3, #32]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	0159      	lsls	r1, r3, #5
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	440b      	add	r3, r1
 8004120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800412a:	1ad2      	subs	r2, r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d114      	bne.n	8004160 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d109      	bne.n	8004152 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004148:	461a      	mov	r2, r3
 800414a:	2101      	movs	r1, #1
 800414c:	f003 feb2 	bl	8007eb4 <USB_EP0_OutStart>
 8004150:	e006      	b.n	8004160 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	441a      	add	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	4619      	mov	r1, r3
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f007 fc8a 	bl	800ba80 <HAL_PCD_DataOutStageCallback>
 800416c:	e046      	b.n	80041fc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	4a26      	ldr	r2, [pc, #152]	@ (800420c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d124      	bne.n	80041c0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800418c:	461a      	mov	r2, r3
 800418e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004192:	6093      	str	r3, [r2, #8]
 8004194:	e032      	b.n	80041fc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ac:	461a      	mov	r2, r3
 80041ae:	2320      	movs	r3, #32
 80041b0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	4619      	mov	r1, r3
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f007 fc61 	bl	800ba80 <HAL_PCD_DataOutStageCallback>
 80041be:	e01d      	b.n	80041fc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d114      	bne.n	80041f0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	4613      	mov	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d108      	bne.n	80041f0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041e8:	461a      	mov	r2, r3
 80041ea:	2100      	movs	r1, #0
 80041ec:	f003 fe62 	bl	8007eb4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	4619      	mov	r1, r3
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f007 fc42 	bl	800ba80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	4f54300a 	.word	0x4f54300a
 800420c:	4f54310a 	.word	0x4f54310a

08004210 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	333c      	adds	r3, #60	@ 0x3c
 8004228:	3304      	adds	r3, #4
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	015a      	lsls	r2, r3, #5
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4413      	add	r3, r2
 8004236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4a15      	ldr	r2, [pc, #84]	@ (8004298 <PCD_EP_OutSetupPacket_int+0x88>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d90e      	bls.n	8004264 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800424c:	2b00      	cmp	r3, #0
 800424e:	d009      	beq.n	8004264 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4413      	add	r3, r2
 8004258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800425c:	461a      	mov	r2, r3
 800425e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004262:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f007 fbf9 	bl	800ba5c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4a0a      	ldr	r2, [pc, #40]	@ (8004298 <PCD_EP_OutSetupPacket_int+0x88>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d90c      	bls.n	800428c <PCD_EP_OutSetupPacket_int+0x7c>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	799b      	ldrb	r3, [r3, #6]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d108      	bne.n	800428c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004284:	461a      	mov	r2, r3
 8004286:	2101      	movs	r1, #1
 8004288:	f003 fe14 	bl	8007eb4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	4f54300a 	.word	0x4f54300a

0800429c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	70fb      	strb	r3, [r7, #3]
 80042a8:	4613      	mov	r3, r2
 80042aa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d107      	bne.n	80042ca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042ba:	883b      	ldrh	r3, [r7, #0]
 80042bc:	0419      	lsls	r1, r3, #16
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	430a      	orrs	r2, r1
 80042c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80042c8:	e028      	b.n	800431c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d0:	0c1b      	lsrs	r3, r3, #16
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	4413      	add	r3, r2
 80042d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042d8:	2300      	movs	r3, #0
 80042da:	73fb      	strb	r3, [r7, #15]
 80042dc:	e00d      	b.n	80042fa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	3340      	adds	r3, #64	@ 0x40
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	0c1b      	lsrs	r3, r3, #16
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	4413      	add	r3, r2
 80042f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042f4:	7bfb      	ldrb	r3, [r7, #15]
 80042f6:	3301      	adds	r3, #1
 80042f8:	73fb      	strb	r3, [r7, #15]
 80042fa:	7bfa      	ldrb	r2, [r7, #15]
 80042fc:	78fb      	ldrb	r3, [r7, #3]
 80042fe:	3b01      	subs	r3, #1
 8004300:	429a      	cmp	r2, r3
 8004302:	d3ec      	bcc.n	80042de <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004304:	883b      	ldrh	r3, [r7, #0]
 8004306:	0418      	lsls	r0, r3, #16
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6819      	ldr	r1, [r3, #0]
 800430c:	78fb      	ldrb	r3, [r7, #3]
 800430e:	3b01      	subs	r3, #1
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	4302      	orrs	r2, r0
 8004314:	3340      	adds	r3, #64	@ 0x40
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	460b      	mov	r3, r1
 8004334:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	887a      	ldrh	r2, [r7, #2]
 800433c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	460b      	mov	r3, r1
 8004356:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e267      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d075      	beq.n	800446e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004382:	4b88      	ldr	r3, [pc, #544]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f003 030c 	and.w	r3, r3, #12
 800438a:	2b04      	cmp	r3, #4
 800438c:	d00c      	beq.n	80043a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800438e:	4b85      	ldr	r3, [pc, #532]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004396:	2b08      	cmp	r3, #8
 8004398:	d112      	bne.n	80043c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800439a:	4b82      	ldr	r3, [pc, #520]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043a6:	d10b      	bne.n	80043c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a8:	4b7e      	ldr	r3, [pc, #504]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d05b      	beq.n	800446c <HAL_RCC_OscConfig+0x108>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d157      	bne.n	800446c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e242      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043c8:	d106      	bne.n	80043d8 <HAL_RCC_OscConfig+0x74>
 80043ca:	4b76      	ldr	r3, [pc, #472]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a75      	ldr	r2, [pc, #468]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80043d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	e01d      	b.n	8004414 <HAL_RCC_OscConfig+0xb0>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043e0:	d10c      	bne.n	80043fc <HAL_RCC_OscConfig+0x98>
 80043e2:	4b70      	ldr	r3, [pc, #448]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a6f      	ldr	r2, [pc, #444]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80043e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	4b6d      	ldr	r3, [pc, #436]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a6c      	ldr	r2, [pc, #432]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80043f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	e00b      	b.n	8004414 <HAL_RCC_OscConfig+0xb0>
 80043fc:	4b69      	ldr	r3, [pc, #420]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a68      	ldr	r2, [pc, #416]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 8004402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	4b66      	ldr	r3, [pc, #408]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a65      	ldr	r2, [pc, #404]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 800440e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d013      	beq.n	8004444 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441c:	f7fd fe20 	bl	8002060 <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004424:	f7fd fe1c 	bl	8002060 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b64      	cmp	r3, #100	@ 0x64
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e207      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004436:	4b5b      	ldr	r3, [pc, #364]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCC_OscConfig+0xc0>
 8004442:	e014      	b.n	800446e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004444:	f7fd fe0c 	bl	8002060 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800444c:	f7fd fe08 	bl	8002060 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b64      	cmp	r3, #100	@ 0x64
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e1f3      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800445e:	4b51      	ldr	r3, [pc, #324]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d1f0      	bne.n	800444c <HAL_RCC_OscConfig+0xe8>
 800446a:	e000      	b.n	800446e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800446c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d063      	beq.n	8004542 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800447a:	4b4a      	ldr	r3, [pc, #296]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	f003 030c 	and.w	r3, r3, #12
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00b      	beq.n	800449e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004486:	4b47      	ldr	r3, [pc, #284]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800448e:	2b08      	cmp	r3, #8
 8004490:	d11c      	bne.n	80044cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004492:	4b44      	ldr	r3, [pc, #272]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d116      	bne.n	80044cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800449e:	4b41      	ldr	r3, [pc, #260]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d005      	beq.n	80044b6 <HAL_RCC_OscConfig+0x152>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d001      	beq.n	80044b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e1c7      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b6:	4b3b      	ldr	r3, [pc, #236]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	4937      	ldr	r1, [pc, #220]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ca:	e03a      	b.n	8004542 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d020      	beq.n	8004516 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044d4:	4b34      	ldr	r3, [pc, #208]	@ (80045a8 <HAL_RCC_OscConfig+0x244>)
 80044d6:	2201      	movs	r2, #1
 80044d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044da:	f7fd fdc1 	bl	8002060 <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044e0:	e008      	b.n	80044f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e2:	f7fd fdbd 	bl	8002060 <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d901      	bls.n	80044f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e1a8      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f4:	4b2b      	ldr	r3, [pc, #172]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d0f0      	beq.n	80044e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004500:	4b28      	ldr	r3, [pc, #160]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	4925      	ldr	r1, [pc, #148]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 8004510:	4313      	orrs	r3, r2
 8004512:	600b      	str	r3, [r1, #0]
 8004514:	e015      	b.n	8004542 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004516:	4b24      	ldr	r3, [pc, #144]	@ (80045a8 <HAL_RCC_OscConfig+0x244>)
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451c:	f7fd fda0 	bl	8002060 <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004524:	f7fd fd9c 	bl	8002060 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e187      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004536:	4b1b      	ldr	r3, [pc, #108]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1f0      	bne.n	8004524 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b00      	cmp	r3, #0
 800454c:	d036      	beq.n	80045bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d016      	beq.n	8004584 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004556:	4b15      	ldr	r3, [pc, #84]	@ (80045ac <HAL_RCC_OscConfig+0x248>)
 8004558:	2201      	movs	r2, #1
 800455a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455c:	f7fd fd80 	bl	8002060 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004564:	f7fd fd7c 	bl	8002060 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e167      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004576:	4b0b      	ldr	r3, [pc, #44]	@ (80045a4 <HAL_RCC_OscConfig+0x240>)
 8004578:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0x200>
 8004582:	e01b      	b.n	80045bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004584:	4b09      	ldr	r3, [pc, #36]	@ (80045ac <HAL_RCC_OscConfig+0x248>)
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458a:	f7fd fd69 	bl	8002060 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004590:	e00e      	b.n	80045b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004592:	f7fd fd65 	bl	8002060 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d907      	bls.n	80045b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e150      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
 80045a4:	40023800 	.word	0x40023800
 80045a8:	42470000 	.word	0x42470000
 80045ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b0:	4b88      	ldr	r3, [pc, #544]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 80045b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1ea      	bne.n	8004592 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 8097 	beq.w	80046f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ca:	2300      	movs	r3, #0
 80045cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ce:	4b81      	ldr	r3, [pc, #516]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 80045d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10f      	bne.n	80045fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045da:	2300      	movs	r3, #0
 80045dc:	60bb      	str	r3, [r7, #8]
 80045de:	4b7d      	ldr	r3, [pc, #500]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	4a7c      	ldr	r2, [pc, #496]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 80045e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80045ea:	4b7a      	ldr	r3, [pc, #488]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045f2:	60bb      	str	r3, [r7, #8]
 80045f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045f6:	2301      	movs	r3, #1
 80045f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fa:	4b77      	ldr	r3, [pc, #476]	@ (80047d8 <HAL_RCC_OscConfig+0x474>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004602:	2b00      	cmp	r3, #0
 8004604:	d118      	bne.n	8004638 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004606:	4b74      	ldr	r3, [pc, #464]	@ (80047d8 <HAL_RCC_OscConfig+0x474>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a73      	ldr	r2, [pc, #460]	@ (80047d8 <HAL_RCC_OscConfig+0x474>)
 800460c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004610:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004612:	f7fd fd25 	bl	8002060 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004618:	e008      	b.n	800462c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800461a:	f7fd fd21 	bl	8002060 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e10c      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462c:	4b6a      	ldr	r3, [pc, #424]	@ (80047d8 <HAL_RCC_OscConfig+0x474>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004634:	2b00      	cmp	r3, #0
 8004636:	d0f0      	beq.n	800461a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d106      	bne.n	800464e <HAL_RCC_OscConfig+0x2ea>
 8004640:	4b64      	ldr	r3, [pc, #400]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004644:	4a63      	ldr	r2, [pc, #396]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 8004646:	f043 0301 	orr.w	r3, r3, #1
 800464a:	6713      	str	r3, [r2, #112]	@ 0x70
 800464c:	e01c      	b.n	8004688 <HAL_RCC_OscConfig+0x324>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2b05      	cmp	r3, #5
 8004654:	d10c      	bne.n	8004670 <HAL_RCC_OscConfig+0x30c>
 8004656:	4b5f      	ldr	r3, [pc, #380]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 8004658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465a:	4a5e      	ldr	r2, [pc, #376]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 800465c:	f043 0304 	orr.w	r3, r3, #4
 8004660:	6713      	str	r3, [r2, #112]	@ 0x70
 8004662:	4b5c      	ldr	r3, [pc, #368]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 8004664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004666:	4a5b      	ldr	r2, [pc, #364]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	6713      	str	r3, [r2, #112]	@ 0x70
 800466e:	e00b      	b.n	8004688 <HAL_RCC_OscConfig+0x324>
 8004670:	4b58      	ldr	r3, [pc, #352]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004674:	4a57      	ldr	r2, [pc, #348]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 8004676:	f023 0301 	bic.w	r3, r3, #1
 800467a:	6713      	str	r3, [r2, #112]	@ 0x70
 800467c:	4b55      	ldr	r3, [pc, #340]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 800467e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004680:	4a54      	ldr	r2, [pc, #336]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 8004682:	f023 0304 	bic.w	r3, r3, #4
 8004686:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d015      	beq.n	80046bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004690:	f7fd fce6 	bl	8002060 <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004696:	e00a      	b.n	80046ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004698:	f7fd fce2 	bl	8002060 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e0cb      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ae:	4b49      	ldr	r3, [pc, #292]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 80046b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0ee      	beq.n	8004698 <HAL_RCC_OscConfig+0x334>
 80046ba:	e014      	b.n	80046e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046bc:	f7fd fcd0 	bl	8002060 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c2:	e00a      	b.n	80046da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c4:	f7fd fccc 	bl	8002060 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e0b5      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046da:	4b3e      	ldr	r3, [pc, #248]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 80046dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1ee      	bne.n	80046c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046e6:	7dfb      	ldrb	r3, [r7, #23]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d105      	bne.n	80046f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ec:	4b39      	ldr	r3, [pc, #228]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 80046ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f0:	4a38      	ldr	r2, [pc, #224]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 80046f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 80a1 	beq.w	8004844 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004702:	4b34      	ldr	r3, [pc, #208]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 030c 	and.w	r3, r3, #12
 800470a:	2b08      	cmp	r3, #8
 800470c:	d05c      	beq.n	80047c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	2b02      	cmp	r3, #2
 8004714:	d141      	bne.n	800479a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004716:	4b31      	ldr	r3, [pc, #196]	@ (80047dc <HAL_RCC_OscConfig+0x478>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471c:	f7fd fca0 	bl	8002060 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004724:	f7fd fc9c 	bl	8002060 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e087      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004736:	4b27      	ldr	r3, [pc, #156]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	69da      	ldr	r2, [r3, #28]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	431a      	orrs	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004750:	019b      	lsls	r3, r3, #6
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004758:	085b      	lsrs	r3, r3, #1
 800475a:	3b01      	subs	r3, #1
 800475c:	041b      	lsls	r3, r3, #16
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004764:	061b      	lsls	r3, r3, #24
 8004766:	491b      	ldr	r1, [pc, #108]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 8004768:	4313      	orrs	r3, r2
 800476a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800476c:	4b1b      	ldr	r3, [pc, #108]	@ (80047dc <HAL_RCC_OscConfig+0x478>)
 800476e:	2201      	movs	r2, #1
 8004770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004772:	f7fd fc75 	bl	8002060 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800477a:	f7fd fc71 	bl	8002060 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e05c      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800478c:	4b11      	ldr	r3, [pc, #68]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0f0      	beq.n	800477a <HAL_RCC_OscConfig+0x416>
 8004798:	e054      	b.n	8004844 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800479a:	4b10      	ldr	r3, [pc, #64]	@ (80047dc <HAL_RCC_OscConfig+0x478>)
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a0:	f7fd fc5e 	bl	8002060 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a8:	f7fd fc5a 	bl	8002060 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e045      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ba:	4b06      	ldr	r3, [pc, #24]	@ (80047d4 <HAL_RCC_OscConfig+0x470>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0x444>
 80047c6:	e03d      	b.n	8004844 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d107      	bne.n	80047e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e038      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
 80047d4:	40023800 	.word	0x40023800
 80047d8:	40007000 	.word	0x40007000
 80047dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004850 <HAL_RCC_OscConfig+0x4ec>)
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d028      	beq.n	8004840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d121      	bne.n	8004840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004806:	429a      	cmp	r2, r3
 8004808:	d11a      	bne.n	8004840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004810:	4013      	ands	r3, r2
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004816:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004818:	4293      	cmp	r3, r2
 800481a:	d111      	bne.n	8004840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004826:	085b      	lsrs	r3, r3, #1
 8004828:	3b01      	subs	r3, #1
 800482a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d107      	bne.n	8004840 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800483a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800483c:	429a      	cmp	r2, r3
 800483e:	d001      	beq.n	8004844 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40023800 	.word	0x40023800

08004854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0cc      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004868:	4b68      	ldr	r3, [pc, #416]	@ (8004a0c <HAL_RCC_ClockConfig+0x1b8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	d90c      	bls.n	8004890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004876:	4b65      	ldr	r3, [pc, #404]	@ (8004a0c <HAL_RCC_ClockConfig+0x1b8>)
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800487e:	4b63      	ldr	r3, [pc, #396]	@ (8004a0c <HAL_RCC_ClockConfig+0x1b8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d001      	beq.n	8004890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e0b8      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d020      	beq.n	80048de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048a8:	4b59      	ldr	r3, [pc, #356]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	4a58      	ldr	r2, [pc, #352]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048c0:	4b53      	ldr	r3, [pc, #332]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	4a52      	ldr	r2, [pc, #328]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048cc:	4b50      	ldr	r3, [pc, #320]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	494d      	ldr	r1, [pc, #308]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d044      	beq.n	8004974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d107      	bne.n	8004902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f2:	4b47      	ldr	r3, [pc, #284]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d119      	bne.n	8004932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e07f      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d003      	beq.n	8004912 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800490e:	2b03      	cmp	r3, #3
 8004910:	d107      	bne.n	8004922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004912:	4b3f      	ldr	r3, [pc, #252]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d109      	bne.n	8004932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e06f      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004922:	4b3b      	ldr	r3, [pc, #236]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e067      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004932:	4b37      	ldr	r3, [pc, #220]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f023 0203 	bic.w	r2, r3, #3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	4934      	ldr	r1, [pc, #208]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 8004940:	4313      	orrs	r3, r2
 8004942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004944:	f7fd fb8c 	bl	8002060 <HAL_GetTick>
 8004948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494a:	e00a      	b.n	8004962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800494c:	f7fd fb88 	bl	8002060 <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800495a:	4293      	cmp	r3, r2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e04f      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004962:	4b2b      	ldr	r3, [pc, #172]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 020c 	and.w	r2, r3, #12
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	429a      	cmp	r2, r3
 8004972:	d1eb      	bne.n	800494c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004974:	4b25      	ldr	r3, [pc, #148]	@ (8004a0c <HAL_RCC_ClockConfig+0x1b8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0307 	and.w	r3, r3, #7
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d20c      	bcs.n	800499c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004982:	4b22      	ldr	r3, [pc, #136]	@ (8004a0c <HAL_RCC_ClockConfig+0x1b8>)
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800498a:	4b20      	ldr	r3, [pc, #128]	@ (8004a0c <HAL_RCC_ClockConfig+0x1b8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	429a      	cmp	r2, r3
 8004996:	d001      	beq.n	800499c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e032      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d008      	beq.n	80049ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049a8:	4b19      	ldr	r3, [pc, #100]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	4916      	ldr	r1, [pc, #88]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d009      	beq.n	80049da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049c6:	4b12      	ldr	r3, [pc, #72]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	490e      	ldr	r1, [pc, #56]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049da:	f000 f821 	bl	8004a20 <HAL_RCC_GetSysClockFreq>
 80049de:	4602      	mov	r2, r0
 80049e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a10 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	091b      	lsrs	r3, r3, #4
 80049e6:	f003 030f 	and.w	r3, r3, #15
 80049ea:	490a      	ldr	r1, [pc, #40]	@ (8004a14 <HAL_RCC_ClockConfig+0x1c0>)
 80049ec:	5ccb      	ldrb	r3, [r1, r3]
 80049ee:	fa22 f303 	lsr.w	r3, r2, r3
 80049f2:	4a09      	ldr	r2, [pc, #36]	@ (8004a18 <HAL_RCC_ClockConfig+0x1c4>)
 80049f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049f6:	4b09      	ldr	r3, [pc, #36]	@ (8004a1c <HAL_RCC_ClockConfig+0x1c8>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fd faec 	bl	8001fd8 <HAL_InitTick>

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40023c00 	.word	0x40023c00
 8004a10:	40023800 	.word	0x40023800
 8004a14:	0800c0e0 	.word	0x0800c0e0
 8004a18:	20000000 	.word	0x20000000
 8004a1c:	20000004 	.word	0x20000004

08004a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a24:	b094      	sub	sp, #80	@ 0x50
 8004a26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a38:	4b79      	ldr	r3, [pc, #484]	@ (8004c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 030c 	and.w	r3, r3, #12
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d00d      	beq.n	8004a60 <HAL_RCC_GetSysClockFreq+0x40>
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	f200 80e1 	bhi.w	8004c0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d002      	beq.n	8004a54 <HAL_RCC_GetSysClockFreq+0x34>
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d003      	beq.n	8004a5a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a52:	e0db      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a54:	4b73      	ldr	r3, [pc, #460]	@ (8004c24 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a58:	e0db      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a5a:	4b73      	ldr	r3, [pc, #460]	@ (8004c28 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a5e:	e0d8      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a60:	4b6f      	ldr	r3, [pc, #444]	@ (8004c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a6a:	4b6d      	ldr	r3, [pc, #436]	@ (8004c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d063      	beq.n	8004b3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a76:	4b6a      	ldr	r3, [pc, #424]	@ (8004c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	099b      	lsrs	r3, r3, #6
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a88:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a92:	4622      	mov	r2, r4
 8004a94:	462b      	mov	r3, r5
 8004a96:	f04f 0000 	mov.w	r0, #0
 8004a9a:	f04f 0100 	mov.w	r1, #0
 8004a9e:	0159      	lsls	r1, r3, #5
 8004aa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aa4:	0150      	lsls	r0, r2, #5
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	4621      	mov	r1, r4
 8004aac:	1a51      	subs	r1, r2, r1
 8004aae:	6139      	str	r1, [r7, #16]
 8004ab0:	4629      	mov	r1, r5
 8004ab2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	f04f 0300 	mov.w	r3, #0
 8004ac0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ac4:	4659      	mov	r1, fp
 8004ac6:	018b      	lsls	r3, r1, #6
 8004ac8:	4651      	mov	r1, sl
 8004aca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ace:	4651      	mov	r1, sl
 8004ad0:	018a      	lsls	r2, r1, #6
 8004ad2:	4651      	mov	r1, sl
 8004ad4:	ebb2 0801 	subs.w	r8, r2, r1
 8004ad8:	4659      	mov	r1, fp
 8004ada:	eb63 0901 	sbc.w	r9, r3, r1
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004aee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004af2:	4690      	mov	r8, r2
 8004af4:	4699      	mov	r9, r3
 8004af6:	4623      	mov	r3, r4
 8004af8:	eb18 0303 	adds.w	r3, r8, r3
 8004afc:	60bb      	str	r3, [r7, #8]
 8004afe:	462b      	mov	r3, r5
 8004b00:	eb49 0303 	adc.w	r3, r9, r3
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	f04f 0200 	mov.w	r2, #0
 8004b0a:	f04f 0300 	mov.w	r3, #0
 8004b0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b12:	4629      	mov	r1, r5
 8004b14:	024b      	lsls	r3, r1, #9
 8004b16:	4621      	mov	r1, r4
 8004b18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	024a      	lsls	r2, r1, #9
 8004b20:	4610      	mov	r0, r2
 8004b22:	4619      	mov	r1, r3
 8004b24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b26:	2200      	movs	r2, #0
 8004b28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b30:	f7fb fb4a 	bl	80001c8 <__aeabi_uldivmod>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4613      	mov	r3, r2
 8004b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b3c:	e058      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b3e:	4b38      	ldr	r3, [pc, #224]	@ (8004c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	099b      	lsrs	r3, r3, #6
 8004b44:	2200      	movs	r2, #0
 8004b46:	4618      	mov	r0, r3
 8004b48:	4611      	mov	r1, r2
 8004b4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b4e:	623b      	str	r3, [r7, #32]
 8004b50:	2300      	movs	r3, #0
 8004b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b58:	4642      	mov	r2, r8
 8004b5a:	464b      	mov	r3, r9
 8004b5c:	f04f 0000 	mov.w	r0, #0
 8004b60:	f04f 0100 	mov.w	r1, #0
 8004b64:	0159      	lsls	r1, r3, #5
 8004b66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b6a:	0150      	lsls	r0, r2, #5
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	460b      	mov	r3, r1
 8004b70:	4641      	mov	r1, r8
 8004b72:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b76:	4649      	mov	r1, r9
 8004b78:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b90:	ebb2 040a 	subs.w	r4, r2, sl
 8004b94:	eb63 050b 	sbc.w	r5, r3, fp
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	00eb      	lsls	r3, r5, #3
 8004ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ba6:	00e2      	lsls	r2, r4, #3
 8004ba8:	4614      	mov	r4, r2
 8004baa:	461d      	mov	r5, r3
 8004bac:	4643      	mov	r3, r8
 8004bae:	18e3      	adds	r3, r4, r3
 8004bb0:	603b      	str	r3, [r7, #0]
 8004bb2:	464b      	mov	r3, r9
 8004bb4:	eb45 0303 	adc.w	r3, r5, r3
 8004bb8:	607b      	str	r3, [r7, #4]
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	028b      	lsls	r3, r1, #10
 8004bca:	4621      	mov	r1, r4
 8004bcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	028a      	lsls	r2, r1, #10
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bda:	2200      	movs	r2, #0
 8004bdc:	61bb      	str	r3, [r7, #24]
 8004bde:	61fa      	str	r2, [r7, #28]
 8004be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004be4:	f7fb faf0 	bl	80001c8 <__aeabi_uldivmod>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4613      	mov	r3, r2
 8004bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c20 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	0c1b      	lsrs	r3, r3, #16
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004c00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c0a:	e002      	b.n	8004c12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c0c:	4b05      	ldr	r3, [pc, #20]	@ (8004c24 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3750      	adds	r7, #80	@ 0x50
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c1e:	bf00      	nop
 8004c20:	40023800 	.word	0x40023800
 8004c24:	00f42400 	.word	0x00f42400
 8004c28:	007a1200 	.word	0x007a1200

08004c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c30:	4b03      	ldr	r3, [pc, #12]	@ (8004c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c32:	681b      	ldr	r3, [r3, #0]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	20000000 	.word	0x20000000

08004c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c48:	f7ff fff0 	bl	8004c2c <HAL_RCC_GetHCLKFreq>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	4b05      	ldr	r3, [pc, #20]	@ (8004c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	0a9b      	lsrs	r3, r3, #10
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	4903      	ldr	r1, [pc, #12]	@ (8004c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c5a:	5ccb      	ldrb	r3, [r1, r3]
 8004c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40023800 	.word	0x40023800
 8004c68:	0800c0f0 	.word	0x0800c0f0

08004c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c70:	f7ff ffdc 	bl	8004c2c <HAL_RCC_GetHCLKFreq>
 8004c74:	4602      	mov	r2, r0
 8004c76:	4b05      	ldr	r3, [pc, #20]	@ (8004c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	0b5b      	lsrs	r3, r3, #13
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	4903      	ldr	r1, [pc, #12]	@ (8004c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c82:	5ccb      	ldrb	r3, [r1, r3]
 8004c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	0800c0f0 	.word	0x0800c0f0

08004c94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e07b      	b.n	8004d9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d108      	bne.n	8004cc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cb6:	d009      	beq.n	8004ccc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	61da      	str	r2, [r3, #28]
 8004cbe:	e005      	b.n	8004ccc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d106      	bne.n	8004cec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7fc fcd6 	bl	8001698 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2202      	movs	r2, #2
 8004cf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004d14:	431a      	orrs	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d50:	ea42 0103 	orr.w	r1, r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d58:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	0c1b      	lsrs	r3, r3, #16
 8004d6a:	f003 0104 	and.w	r1, r3, #4
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d72:	f003 0210 	and.w	r2, r3, #16
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69da      	ldr	r2, [r3, #28]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b082      	sub	sp, #8
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e041      	b.n	8004e3c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d106      	bne.n	8004dd2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7fc fe79 	bl	8001ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	3304      	adds	r3, #4
 8004de2:	4619      	mov	r1, r3
 8004de4:	4610      	mov	r0, r2
 8004de6:	f000 fb3b 	bl	8005460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2201      	movs	r2, #1
 8004e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3708      	adds	r7, #8
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e041      	b.n	8004eda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7fc fdf2 	bl	8001a54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	4619      	mov	r1, r3
 8004e82:	4610      	mov	r0, r2
 8004e84:	f000 faec 	bl	8005460 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d109      	bne.n	8004f08 <HAL_TIM_PWM_Start+0x24>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	bf14      	ite	ne
 8004f00:	2301      	movne	r3, #1
 8004f02:	2300      	moveq	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	e022      	b.n	8004f4e <HAL_TIM_PWM_Start+0x6a>
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d109      	bne.n	8004f22 <HAL_TIM_PWM_Start+0x3e>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	bf14      	ite	ne
 8004f1a:	2301      	movne	r3, #1
 8004f1c:	2300      	moveq	r3, #0
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	e015      	b.n	8004f4e <HAL_TIM_PWM_Start+0x6a>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d109      	bne.n	8004f3c <HAL_TIM_PWM_Start+0x58>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	bf14      	ite	ne
 8004f34:	2301      	movne	r3, #1
 8004f36:	2300      	moveq	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	e008      	b.n	8004f4e <HAL_TIM_PWM_Start+0x6a>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	bf14      	ite	ne
 8004f48:	2301      	movne	r3, #1
 8004f4a:	2300      	moveq	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e07c      	b.n	8005050 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d104      	bne.n	8004f66 <HAL_TIM_PWM_Start+0x82>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f64:	e013      	b.n	8004f8e <HAL_TIM_PWM_Start+0xaa>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b04      	cmp	r3, #4
 8004f6a:	d104      	bne.n	8004f76 <HAL_TIM_PWM_Start+0x92>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f74:	e00b      	b.n	8004f8e <HAL_TIM_PWM_Start+0xaa>
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d104      	bne.n	8004f86 <HAL_TIM_PWM_Start+0xa2>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f84:	e003      	b.n	8004f8e <HAL_TIM_PWM_Start+0xaa>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2202      	movs	r2, #2
 8004f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2201      	movs	r2, #1
 8004f94:	6839      	ldr	r1, [r7, #0]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fcbe 	bl	8005918 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a2d      	ldr	r2, [pc, #180]	@ (8005058 <HAL_TIM_PWM_Start+0x174>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d004      	beq.n	8004fb0 <HAL_TIM_PWM_Start+0xcc>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a2c      	ldr	r2, [pc, #176]	@ (800505c <HAL_TIM_PWM_Start+0x178>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d101      	bne.n	8004fb4 <HAL_TIM_PWM_Start+0xd0>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <HAL_TIM_PWM_Start+0xd2>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d007      	beq.n	8004fca <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fc8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a22      	ldr	r2, [pc, #136]	@ (8005058 <HAL_TIM_PWM_Start+0x174>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d022      	beq.n	800501a <HAL_TIM_PWM_Start+0x136>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fdc:	d01d      	beq.n	800501a <HAL_TIM_PWM_Start+0x136>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a1f      	ldr	r2, [pc, #124]	@ (8005060 <HAL_TIM_PWM_Start+0x17c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d018      	beq.n	800501a <HAL_TIM_PWM_Start+0x136>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a1d      	ldr	r2, [pc, #116]	@ (8005064 <HAL_TIM_PWM_Start+0x180>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d013      	beq.n	800501a <HAL_TIM_PWM_Start+0x136>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8005068 <HAL_TIM_PWM_Start+0x184>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d00e      	beq.n	800501a <HAL_TIM_PWM_Start+0x136>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a16      	ldr	r2, [pc, #88]	@ (800505c <HAL_TIM_PWM_Start+0x178>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d009      	beq.n	800501a <HAL_TIM_PWM_Start+0x136>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a18      	ldr	r2, [pc, #96]	@ (800506c <HAL_TIM_PWM_Start+0x188>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d004      	beq.n	800501a <HAL_TIM_PWM_Start+0x136>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a16      	ldr	r2, [pc, #88]	@ (8005070 <HAL_TIM_PWM_Start+0x18c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d111      	bne.n	800503e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b06      	cmp	r3, #6
 800502a:	d010      	beq.n	800504e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0201 	orr.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800503c:	e007      	b.n	800504e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f042 0201 	orr.w	r2, r2, #1
 800504c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	40010000 	.word	0x40010000
 800505c:	40010400 	.word	0x40010400
 8005060:	40000400 	.word	0x40000400
 8005064:	40000800 	.word	0x40000800
 8005068:	40000c00 	.word	0x40000c00
 800506c:	40014000 	.word	0x40014000
 8005070:	40001800 	.word	0x40001800

08005074 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e097      	b.n	80051b8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b00      	cmp	r3, #0
 8005092:	d106      	bne.n	80050a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7fc fb63 	bl	8001768 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2202      	movs	r2, #2
 80050a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6812      	ldr	r2, [r2, #0]
 80050b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050b8:	f023 0307 	bic.w	r3, r3, #7
 80050bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3304      	adds	r3, #4
 80050c6:	4619      	mov	r1, r3
 80050c8:	4610      	mov	r0, r2
 80050ca:	f000 f9c9 	bl	8005460 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050f6:	f023 0303 	bic.w	r3, r3, #3
 80050fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	021b      	lsls	r3, r3, #8
 8005106:	4313      	orrs	r3, r2
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	4313      	orrs	r3, r2
 800510c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005114:	f023 030c 	bic.w	r3, r3, #12
 8005118:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005120:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005124:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	68da      	ldr	r2, [r3, #12]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	021b      	lsls	r3, r3, #8
 8005130:	4313      	orrs	r3, r2
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	4313      	orrs	r3, r2
 8005136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	011a      	lsls	r2, r3, #4
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	031b      	lsls	r3, r3, #12
 8005144:	4313      	orrs	r3, r2
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005152:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800515a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	4313      	orrs	r3, r2
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3718      	adds	r7, #24
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80051e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d110      	bne.n	8005212 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d102      	bne.n	80051fc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80051f6:	7b7b      	ldrb	r3, [r7, #13]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d001      	beq.n	8005200 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e069      	b.n	80052d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005210:	e031      	b.n	8005276 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b04      	cmp	r3, #4
 8005216:	d110      	bne.n	800523a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005218:	7bbb      	ldrb	r3, [r7, #14]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d102      	bne.n	8005224 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800521e:	7b3b      	ldrb	r3, [r7, #12]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d001      	beq.n	8005228 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e055      	b.n	80052d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2202      	movs	r2, #2
 8005234:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005238:	e01d      	b.n	8005276 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800523a:	7bfb      	ldrb	r3, [r7, #15]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d108      	bne.n	8005252 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005240:	7bbb      	ldrb	r3, [r7, #14]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d105      	bne.n	8005252 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005246:	7b7b      	ldrb	r3, [r7, #13]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d102      	bne.n	8005252 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800524c:	7b3b      	ldrb	r3, [r7, #12]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d001      	beq.n	8005256 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e03e      	b.n	80052d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2202      	movs	r2, #2
 800525a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2202      	movs	r2, #2
 8005262:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2202      	movs	r2, #2
 800526a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2202      	movs	r2, #2
 8005272:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <HAL_TIM_Encoder_Start+0xc4>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b04      	cmp	r3, #4
 8005280:	d008      	beq.n	8005294 <HAL_TIM_Encoder_Start+0xd4>
 8005282:	e00f      	b.n	80052a4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2201      	movs	r2, #1
 800528a:	2100      	movs	r1, #0
 800528c:	4618      	mov	r0, r3
 800528e:	f000 fb43 	bl	8005918 <TIM_CCxChannelCmd>
      break;
 8005292:	e016      	b.n	80052c2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2201      	movs	r2, #1
 800529a:	2104      	movs	r1, #4
 800529c:	4618      	mov	r0, r3
 800529e:	f000 fb3b 	bl	8005918 <TIM_CCxChannelCmd>
      break;
 80052a2:	e00e      	b.n	80052c2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2201      	movs	r2, #1
 80052aa:	2100      	movs	r1, #0
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fb33 	bl	8005918 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2201      	movs	r2, #1
 80052b8:	2104      	movs	r1, #4
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fb2c 	bl	8005918 <TIM_CCxChannelCmd>
      break;
 80052c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 0201 	orr.w	r2, r2, #1
 80052d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052e8:	2300      	movs	r3, #0
 80052ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d101      	bne.n	80052fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052f6:	2302      	movs	r3, #2
 80052f8:	e0ae      	b.n	8005458 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2b0c      	cmp	r3, #12
 8005306:	f200 809f 	bhi.w	8005448 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800530a:	a201      	add	r2, pc, #4	@ (adr r2, 8005310 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800530c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005310:	08005345 	.word	0x08005345
 8005314:	08005449 	.word	0x08005449
 8005318:	08005449 	.word	0x08005449
 800531c:	08005449 	.word	0x08005449
 8005320:	08005385 	.word	0x08005385
 8005324:	08005449 	.word	0x08005449
 8005328:	08005449 	.word	0x08005449
 800532c:	08005449 	.word	0x08005449
 8005330:	080053c7 	.word	0x080053c7
 8005334:	08005449 	.word	0x08005449
 8005338:	08005449 	.word	0x08005449
 800533c:	08005449 	.word	0x08005449
 8005340:	08005407 	.word	0x08005407
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68b9      	ldr	r1, [r7, #8]
 800534a:	4618      	mov	r0, r3
 800534c:	f000 f934 	bl	80055b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699a      	ldr	r2, [r3, #24]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0208 	orr.w	r2, r2, #8
 800535e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699a      	ldr	r2, [r3, #24]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0204 	bic.w	r2, r2, #4
 800536e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6999      	ldr	r1, [r3, #24]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	691a      	ldr	r2, [r3, #16]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	619a      	str	r2, [r3, #24]
      break;
 8005382:	e064      	b.n	800544e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	4618      	mov	r0, r3
 800538c:	f000 f984 	bl	8005698 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699a      	ldr	r2, [r3, #24]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800539e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699a      	ldr	r2, [r3, #24]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6999      	ldr	r1, [r3, #24]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	021a      	lsls	r2, r3, #8
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	619a      	str	r2, [r3, #24]
      break;
 80053c4:	e043      	b.n	800544e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 f9d9 	bl	8005784 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69da      	ldr	r2, [r3, #28]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f042 0208 	orr.w	r2, r2, #8
 80053e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69da      	ldr	r2, [r3, #28]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0204 	bic.w	r2, r2, #4
 80053f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69d9      	ldr	r1, [r3, #28]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	61da      	str	r2, [r3, #28]
      break;
 8005404:	e023      	b.n	800544e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	4618      	mov	r0, r3
 800540e:	f000 fa2d 	bl	800586c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69da      	ldr	r2, [r3, #28]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69da      	ldr	r2, [r3, #28]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69d9      	ldr	r1, [r3, #28]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	021a      	lsls	r2, r3, #8
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	61da      	str	r2, [r3, #28]
      break;
 8005446:	e002      	b.n	800544e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	75fb      	strb	r3, [r7, #23]
      break;
 800544c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005456:	7dfb      	ldrb	r3, [r7, #23]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3718      	adds	r7, #24
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a46      	ldr	r2, [pc, #280]	@ (800558c <TIM_Base_SetConfig+0x12c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d013      	beq.n	80054a0 <TIM_Base_SetConfig+0x40>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800547e:	d00f      	beq.n	80054a0 <TIM_Base_SetConfig+0x40>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a43      	ldr	r2, [pc, #268]	@ (8005590 <TIM_Base_SetConfig+0x130>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00b      	beq.n	80054a0 <TIM_Base_SetConfig+0x40>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a42      	ldr	r2, [pc, #264]	@ (8005594 <TIM_Base_SetConfig+0x134>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d007      	beq.n	80054a0 <TIM_Base_SetConfig+0x40>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a41      	ldr	r2, [pc, #260]	@ (8005598 <TIM_Base_SetConfig+0x138>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d003      	beq.n	80054a0 <TIM_Base_SetConfig+0x40>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a40      	ldr	r2, [pc, #256]	@ (800559c <TIM_Base_SetConfig+0x13c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d108      	bne.n	80054b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a35      	ldr	r2, [pc, #212]	@ (800558c <TIM_Base_SetConfig+0x12c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d02b      	beq.n	8005512 <TIM_Base_SetConfig+0xb2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054c0:	d027      	beq.n	8005512 <TIM_Base_SetConfig+0xb2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a32      	ldr	r2, [pc, #200]	@ (8005590 <TIM_Base_SetConfig+0x130>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d023      	beq.n	8005512 <TIM_Base_SetConfig+0xb2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a31      	ldr	r2, [pc, #196]	@ (8005594 <TIM_Base_SetConfig+0x134>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d01f      	beq.n	8005512 <TIM_Base_SetConfig+0xb2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a30      	ldr	r2, [pc, #192]	@ (8005598 <TIM_Base_SetConfig+0x138>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d01b      	beq.n	8005512 <TIM_Base_SetConfig+0xb2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a2f      	ldr	r2, [pc, #188]	@ (800559c <TIM_Base_SetConfig+0x13c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d017      	beq.n	8005512 <TIM_Base_SetConfig+0xb2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a2e      	ldr	r2, [pc, #184]	@ (80055a0 <TIM_Base_SetConfig+0x140>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d013      	beq.n	8005512 <TIM_Base_SetConfig+0xb2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a2d      	ldr	r2, [pc, #180]	@ (80055a4 <TIM_Base_SetConfig+0x144>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d00f      	beq.n	8005512 <TIM_Base_SetConfig+0xb2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a2c      	ldr	r2, [pc, #176]	@ (80055a8 <TIM_Base_SetConfig+0x148>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00b      	beq.n	8005512 <TIM_Base_SetConfig+0xb2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a2b      	ldr	r2, [pc, #172]	@ (80055ac <TIM_Base_SetConfig+0x14c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d007      	beq.n	8005512 <TIM_Base_SetConfig+0xb2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a2a      	ldr	r2, [pc, #168]	@ (80055b0 <TIM_Base_SetConfig+0x150>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d003      	beq.n	8005512 <TIM_Base_SetConfig+0xb2>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a29      	ldr	r2, [pc, #164]	@ (80055b4 <TIM_Base_SetConfig+0x154>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d108      	bne.n	8005524 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	4313      	orrs	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a10      	ldr	r2, [pc, #64]	@ (800558c <TIM_Base_SetConfig+0x12c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d003      	beq.n	8005558 <TIM_Base_SetConfig+0xf8>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a12      	ldr	r2, [pc, #72]	@ (800559c <TIM_Base_SetConfig+0x13c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d103      	bne.n	8005560 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b01      	cmp	r3, #1
 8005570:	d105      	bne.n	800557e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	f023 0201 	bic.w	r2, r3, #1
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	611a      	str	r2, [r3, #16]
  }
}
 800557e:	bf00      	nop
 8005580:	3714      	adds	r7, #20
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	40010000 	.word	0x40010000
 8005590:	40000400 	.word	0x40000400
 8005594:	40000800 	.word	0x40000800
 8005598:	40000c00 	.word	0x40000c00
 800559c:	40010400 	.word	0x40010400
 80055a0:	40014000 	.word	0x40014000
 80055a4:	40014400 	.word	0x40014400
 80055a8:	40014800 	.word	0x40014800
 80055ac:	40001800 	.word	0x40001800
 80055b0:	40001c00 	.word	0x40001c00
 80055b4:	40002000 	.word	0x40002000

080055b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	f023 0201 	bic.w	r2, r3, #1
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0303 	bic.w	r3, r3, #3
 80055ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f023 0302 	bic.w	r3, r3, #2
 8005600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	4313      	orrs	r3, r2
 800560a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a20      	ldr	r2, [pc, #128]	@ (8005690 <TIM_OC1_SetConfig+0xd8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d003      	beq.n	800561c <TIM_OC1_SetConfig+0x64>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a1f      	ldr	r2, [pc, #124]	@ (8005694 <TIM_OC1_SetConfig+0xdc>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d10c      	bne.n	8005636 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f023 0308 	bic.w	r3, r3, #8
 8005622:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	4313      	orrs	r3, r2
 800562c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f023 0304 	bic.w	r3, r3, #4
 8005634:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a15      	ldr	r2, [pc, #84]	@ (8005690 <TIM_OC1_SetConfig+0xd8>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d003      	beq.n	8005646 <TIM_OC1_SetConfig+0x8e>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a14      	ldr	r2, [pc, #80]	@ (8005694 <TIM_OC1_SetConfig+0xdc>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d111      	bne.n	800566a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800564c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005654:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	4313      	orrs	r3, r2
 800565e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	4313      	orrs	r3, r2
 8005668:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	621a      	str	r2, [r3, #32]
}
 8005684:	bf00      	nop
 8005686:	371c      	adds	r7, #28
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	40010000 	.word	0x40010000
 8005694:	40010400 	.word	0x40010400

08005698 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	f023 0210 	bic.w	r2, r3, #16
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	021b      	lsls	r3, r3, #8
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f023 0320 	bic.w	r3, r3, #32
 80056e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	011b      	lsls	r3, r3, #4
 80056ea:	697a      	ldr	r2, [r7, #20]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a22      	ldr	r2, [pc, #136]	@ (800577c <TIM_OC2_SetConfig+0xe4>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d003      	beq.n	8005700 <TIM_OC2_SetConfig+0x68>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a21      	ldr	r2, [pc, #132]	@ (8005780 <TIM_OC2_SetConfig+0xe8>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d10d      	bne.n	800571c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	4313      	orrs	r3, r2
 8005712:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800571a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a17      	ldr	r2, [pc, #92]	@ (800577c <TIM_OC2_SetConfig+0xe4>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d003      	beq.n	800572c <TIM_OC2_SetConfig+0x94>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a16      	ldr	r2, [pc, #88]	@ (8005780 <TIM_OC2_SetConfig+0xe8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d113      	bne.n	8005754 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005732:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800573a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	695b      	ldr	r3, [r3, #20]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685a      	ldr	r2, [r3, #4]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	621a      	str	r2, [r3, #32]
}
 800576e:	bf00      	nop
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	40010000 	.word	0x40010000
 8005780:	40010400 	.word	0x40010400

08005784 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0303 	bic.w	r3, r3, #3
 80057ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	021b      	lsls	r3, r3, #8
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a21      	ldr	r2, [pc, #132]	@ (8005864 <TIM_OC3_SetConfig+0xe0>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d003      	beq.n	80057ea <TIM_OC3_SetConfig+0x66>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a20      	ldr	r2, [pc, #128]	@ (8005868 <TIM_OC3_SetConfig+0xe4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d10d      	bne.n	8005806 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	021b      	lsls	r3, r3, #8
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a16      	ldr	r2, [pc, #88]	@ (8005864 <TIM_OC3_SetConfig+0xe0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d003      	beq.n	8005816 <TIM_OC3_SetConfig+0x92>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a15      	ldr	r2, [pc, #84]	@ (8005868 <TIM_OC3_SetConfig+0xe4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d113      	bne.n	800583e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800581c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	011b      	lsls	r3, r3, #4
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	011b      	lsls	r3, r3, #4
 8005838:	693a      	ldr	r2, [r7, #16]
 800583a:	4313      	orrs	r3, r2
 800583c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	621a      	str	r2, [r3, #32]
}
 8005858:	bf00      	nop
 800585a:	371c      	adds	r7, #28
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr
 8005864:	40010000 	.word	0x40010000
 8005868:	40010400 	.word	0x40010400

0800586c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800589a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	021b      	lsls	r3, r3, #8
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	031b      	lsls	r3, r3, #12
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a12      	ldr	r2, [pc, #72]	@ (8005910 <TIM_OC4_SetConfig+0xa4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d003      	beq.n	80058d4 <TIM_OC4_SetConfig+0x68>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a11      	ldr	r2, [pc, #68]	@ (8005914 <TIM_OC4_SetConfig+0xa8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d109      	bne.n	80058e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	019b      	lsls	r3, r3, #6
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	621a      	str	r2, [r3, #32]
}
 8005902:	bf00      	nop
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	40010000 	.word	0x40010000
 8005914:	40010400 	.word	0x40010400

08005918 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005918:	b480      	push	{r7}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	f003 031f 	and.w	r3, r3, #31
 800592a:	2201      	movs	r2, #1
 800592c:	fa02 f303 	lsl.w	r3, r2, r3
 8005930:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a1a      	ldr	r2, [r3, #32]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	43db      	mvns	r3, r3
 800593a:	401a      	ands	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a1a      	ldr	r2, [r3, #32]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f003 031f 	and.w	r3, r3, #31
 800594a:	6879      	ldr	r1, [r7, #4]
 800594c:	fa01 f303 	lsl.w	r3, r1, r3
 8005950:	431a      	orrs	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	621a      	str	r2, [r3, #32]
}
 8005956:	bf00      	nop
 8005958:	371c      	adds	r7, #28
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
	...

08005964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005978:	2302      	movs	r3, #2
 800597a:	e05a      	b.n	8005a32 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a21      	ldr	r2, [pc, #132]	@ (8005a40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d022      	beq.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059c8:	d01d      	beq.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005a44 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d018      	beq.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005a48 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d013      	beq.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a1a      	ldr	r2, [pc, #104]	@ (8005a4c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00e      	beq.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a18      	ldr	r2, [pc, #96]	@ (8005a50 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d009      	beq.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a17      	ldr	r2, [pc, #92]	@ (8005a54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d004      	beq.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a15      	ldr	r2, [pc, #84]	@ (8005a58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d10c      	bne.n	8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40010000 	.word	0x40010000
 8005a44:	40000400 	.word	0x40000400
 8005a48:	40000800 	.word	0x40000800
 8005a4c:	40000c00 	.word	0x40000c00
 8005a50:	40010400 	.word	0x40010400
 8005a54:	40014000 	.word	0x40014000
 8005a58:	40001800 	.word	0x40001800

08005a5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e042      	b.n	8005af4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7fc f980 	bl	8001d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2224      	movs	r2, #36	@ 0x24
 8005a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fcdb 	bl	800645c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ab4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	695a      	ldr	r2, [r3, #20]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ac4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ad4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	4613      	mov	r3, r2
 8005b08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d112      	bne.n	8005b3c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <HAL_UART_Receive_IT+0x26>
 8005b1c:	88fb      	ldrh	r3, [r7, #6]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e00b      	b.n	8005b3e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b2c:	88fb      	ldrh	r3, [r7, #6]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	68b9      	ldr	r1, [r7, #8]
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 faba 	bl	80060ac <UART_Start_Receive_IT>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	e000      	b.n	8005b3e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005b3c:	2302      	movs	r3, #2
  }
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
	...

08005b48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b0ba      	sub	sp, #232	@ 0xe8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b7e:	f003 030f 	and.w	r3, r3, #15
 8005b82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005b86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10f      	bne.n	8005bae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b92:	f003 0320 	and.w	r3, r3, #32
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d009      	beq.n	8005bae <HAL_UART_IRQHandler+0x66>
 8005b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b9e:	f003 0320 	and.w	r3, r3, #32
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fb99 	bl	80062de <UART_Receive_IT>
      return;
 8005bac:	e25b      	b.n	8006066 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005bae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 80de 	beq.w	8005d74 <HAL_UART_IRQHandler+0x22c>
 8005bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d106      	bne.n	8005bd2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bc8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 80d1 	beq.w	8005d74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00b      	beq.n	8005bf6 <HAL_UART_IRQHandler+0xae>
 8005bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d005      	beq.n	8005bf6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bee:	f043 0201 	orr.w	r2, r3, #1
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00b      	beq.n	8005c1a <HAL_UART_IRQHandler+0xd2>
 8005c02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d005      	beq.n	8005c1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c12:	f043 0202 	orr.w	r2, r3, #2
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00b      	beq.n	8005c3e <HAL_UART_IRQHandler+0xf6>
 8005c26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d005      	beq.n	8005c3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c36:	f043 0204 	orr.w	r2, r3, #4
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c42:	f003 0308 	and.w	r3, r3, #8
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d011      	beq.n	8005c6e <HAL_UART_IRQHandler+0x126>
 8005c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c4e:	f003 0320 	and.w	r3, r3, #32
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d105      	bne.n	8005c62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d005      	beq.n	8005c6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c66:	f043 0208 	orr.w	r2, r3, #8
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f000 81f2 	beq.w	800605c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c7c:	f003 0320 	and.w	r3, r3, #32
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d008      	beq.n	8005c96 <HAL_UART_IRQHandler+0x14e>
 8005c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c88:	f003 0320 	and.w	r3, r3, #32
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d002      	beq.n	8005c96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fb24 	bl	80062de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca0:	2b40      	cmp	r3, #64	@ 0x40
 8005ca2:	bf0c      	ite	eq
 8005ca4:	2301      	moveq	r3, #1
 8005ca6:	2300      	movne	r3, #0
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cb2:	f003 0308 	and.w	r3, r3, #8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d103      	bne.n	8005cc2 <HAL_UART_IRQHandler+0x17a>
 8005cba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d04f      	beq.n	8005d62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fa2c 	bl	8006120 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd2:	2b40      	cmp	r3, #64	@ 0x40
 8005cd4:	d141      	bne.n	8005d5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3314      	adds	r3, #20
 8005cdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ce4:	e853 3f00 	ldrex	r3, [r3]
 8005ce8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005cec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005cf0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3314      	adds	r3, #20
 8005cfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d02:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005d0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005d12:	e841 2300 	strex	r3, r2, [r1]
 8005d16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005d1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1d9      	bne.n	8005cd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d013      	beq.n	8005d52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d2e:	4a7e      	ldr	r2, [pc, #504]	@ (8005f28 <HAL_UART_IRQHandler+0x3e0>)
 8005d30:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fc fda5 	bl	8002886 <HAL_DMA_Abort_IT>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d016      	beq.n	8005d70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005d4c:	4610      	mov	r0, r2
 8005d4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d50:	e00e      	b.n	8005d70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f994 	bl	8006080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d58:	e00a      	b.n	8005d70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 f990 	bl	8006080 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d60:	e006      	b.n	8005d70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f98c 	bl	8006080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005d6e:	e175      	b.n	800605c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d70:	bf00      	nop
    return;
 8005d72:	e173      	b.n	800605c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	f040 814f 	bne.w	800601c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d82:	f003 0310 	and.w	r3, r3, #16
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 8148 	beq.w	800601c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d90:	f003 0310 	and.w	r3, r3, #16
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 8141 	beq.w	800601c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60bb      	str	r3, [r7, #8]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	60bb      	str	r3, [r7, #8]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	60bb      	str	r3, [r7, #8]
 8005dae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dba:	2b40      	cmp	r3, #64	@ 0x40
 8005dbc:	f040 80b6 	bne.w	8005f2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005dcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 8145 	beq.w	8006060 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005dda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005dde:	429a      	cmp	r2, r3
 8005de0:	f080 813e 	bcs.w	8006060 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005dea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005df6:	f000 8088 	beq.w	8005f0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	330c      	adds	r3, #12
 8005e00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e08:	e853 3f00 	ldrex	r3, [r3]
 8005e0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005e10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	330c      	adds	r3, #12
 8005e22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005e26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005e32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e36:	e841 2300 	strex	r3, r2, [r1]
 8005e3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1d9      	bne.n	8005dfa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	3314      	adds	r3, #20
 8005e4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e50:	e853 3f00 	ldrex	r3, [r3]
 8005e54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005e56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e58:	f023 0301 	bic.w	r3, r3, #1
 8005e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3314      	adds	r3, #20
 8005e66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005e6a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005e6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005e72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005e76:	e841 2300 	strex	r3, r2, [r1]
 8005e7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005e7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1e1      	bne.n	8005e46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	3314      	adds	r3, #20
 8005e88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005e8c:	e853 3f00 	ldrex	r3, [r3]
 8005e90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005e92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3314      	adds	r3, #20
 8005ea2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ea6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eaa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005eac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005eae:	e841 2300 	strex	r3, r2, [r1]
 8005eb2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005eb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1e3      	bne.n	8005e82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2220      	movs	r2, #32
 8005ebe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	330c      	adds	r3, #12
 8005ece:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ed2:	e853 3f00 	ldrex	r3, [r3]
 8005ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ed8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005eda:	f023 0310 	bic.w	r3, r3, #16
 8005ede:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	330c      	adds	r3, #12
 8005ee8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005eec:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005eee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ef2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ef4:	e841 2300 	strex	r3, r2, [r1]
 8005ef8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005efa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1e3      	bne.n	8005ec8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7fc fc4e 	bl	80027a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	4619      	mov	r1, r3
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f8b7 	bl	8006094 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f26:	e09b      	b.n	8006060 <HAL_UART_IRQHandler+0x518>
 8005f28:	080061e7 	.word	0x080061e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 808e 	beq.w	8006064 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005f48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 8089 	beq.w	8006064 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	330c      	adds	r3, #12
 8005f58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f5c:	e853 3f00 	ldrex	r3, [r3]
 8005f60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	330c      	adds	r3, #12
 8005f72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005f76:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f7e:	e841 2300 	strex	r3, r2, [r1]
 8005f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1e3      	bne.n	8005f52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3314      	adds	r3, #20
 8005f90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f94:	e853 3f00 	ldrex	r3, [r3]
 8005f98:	623b      	str	r3, [r7, #32]
   return(result);
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	f023 0301 	bic.w	r3, r3, #1
 8005fa0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	3314      	adds	r3, #20
 8005faa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005fae:	633a      	str	r2, [r7, #48]	@ 0x30
 8005fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e3      	bne.n	8005f8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	330c      	adds	r3, #12
 8005fd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	e853 3f00 	ldrex	r3, [r3]
 8005fde:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f023 0310 	bic.w	r3, r3, #16
 8005fe6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	330c      	adds	r3, #12
 8005ff0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005ff4:	61fa      	str	r2, [r7, #28]
 8005ff6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff8:	69b9      	ldr	r1, [r7, #24]
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	e841 2300 	strex	r3, r2, [r1]
 8006000:	617b      	str	r3, [r7, #20]
   return(result);
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d1e3      	bne.n	8005fd0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2202      	movs	r2, #2
 800600c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800600e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006012:	4619      	mov	r1, r3
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f83d 	bl	8006094 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800601a:	e023      	b.n	8006064 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800601c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006024:	2b00      	cmp	r3, #0
 8006026:	d009      	beq.n	800603c <HAL_UART_IRQHandler+0x4f4>
 8006028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800602c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006030:	2b00      	cmp	r3, #0
 8006032:	d003      	beq.n	800603c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f8ea 	bl	800620e <UART_Transmit_IT>
    return;
 800603a:	e014      	b.n	8006066 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800603c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006044:	2b00      	cmp	r3, #0
 8006046:	d00e      	beq.n	8006066 <HAL_UART_IRQHandler+0x51e>
 8006048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800604c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006050:	2b00      	cmp	r3, #0
 8006052:	d008      	beq.n	8006066 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f92a 	bl	80062ae <UART_EndTransmit_IT>
    return;
 800605a:	e004      	b.n	8006066 <HAL_UART_IRQHandler+0x51e>
    return;
 800605c:	bf00      	nop
 800605e:	e002      	b.n	8006066 <HAL_UART_IRQHandler+0x51e>
      return;
 8006060:	bf00      	nop
 8006062:	e000      	b.n	8006066 <HAL_UART_IRQHandler+0x51e>
      return;
 8006064:	bf00      	nop
  }
}
 8006066:	37e8      	adds	r7, #232	@ 0xe8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	460b      	mov	r3, r1
 800609e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	4613      	mov	r3, r2
 80060b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	88fa      	ldrh	r2, [r7, #6]
 80060c4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	88fa      	ldrh	r2, [r7, #6]
 80060ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2222      	movs	r2, #34	@ 0x22
 80060d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d007      	beq.n	80060f2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060f0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	695a      	ldr	r2, [r3, #20]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f042 0201 	orr.w	r2, r2, #1
 8006100:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68da      	ldr	r2, [r3, #12]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f042 0220 	orr.w	r2, r2, #32
 8006110:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006120:	b480      	push	{r7}
 8006122:	b095      	sub	sp, #84	@ 0x54
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	330c      	adds	r3, #12
 800612e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006132:	e853 3f00 	ldrex	r3, [r3]
 8006136:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800613e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	330c      	adds	r3, #12
 8006146:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006148:	643a      	str	r2, [r7, #64]	@ 0x40
 800614a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800614e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006150:	e841 2300 	strex	r3, r2, [r1]
 8006154:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e5      	bne.n	8006128 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3314      	adds	r3, #20
 8006162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	e853 3f00 	ldrex	r3, [r3]
 800616a:	61fb      	str	r3, [r7, #28]
   return(result);
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	f023 0301 	bic.w	r3, r3, #1
 8006172:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3314      	adds	r3, #20
 800617a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800617c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800617e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006180:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006182:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006184:	e841 2300 	strex	r3, r2, [r1]
 8006188:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800618a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1e5      	bne.n	800615c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006194:	2b01      	cmp	r3, #1
 8006196:	d119      	bne.n	80061cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	330c      	adds	r3, #12
 800619e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	e853 3f00 	ldrex	r3, [r3]
 80061a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f023 0310 	bic.w	r3, r3, #16
 80061ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	330c      	adds	r3, #12
 80061b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061b8:	61ba      	str	r2, [r7, #24]
 80061ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	6979      	ldr	r1, [r7, #20]
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	e841 2300 	strex	r3, r2, [r1]
 80061c4:	613b      	str	r3, [r7, #16]
   return(result);
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e5      	bne.n	8006198 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80061da:	bf00      	nop
 80061dc:	3754      	adds	r7, #84	@ 0x54
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f7ff ff3d 	bl	8006080 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006206:	bf00      	nop
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800620e:	b480      	push	{r7}
 8006210:	b085      	sub	sp, #20
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800621c:	b2db      	uxtb	r3, r3
 800621e:	2b21      	cmp	r3, #33	@ 0x21
 8006220:	d13e      	bne.n	80062a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800622a:	d114      	bne.n	8006256 <UART_Transmit_IT+0x48>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d110      	bne.n	8006256 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	461a      	mov	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006248:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	1c9a      	adds	r2, r3, #2
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	621a      	str	r2, [r3, #32]
 8006254:	e008      	b.n	8006268 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	1c59      	adds	r1, r3, #1
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6211      	str	r1, [r2, #32]
 8006260:	781a      	ldrb	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800626c:	b29b      	uxth	r3, r3
 800626e:	3b01      	subs	r3, #1
 8006270:	b29b      	uxth	r3, r3
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	4619      	mov	r1, r3
 8006276:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10f      	bne.n	800629c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800628a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800629a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800629c:	2300      	movs	r3, #0
 800629e:	e000      	b.n	80062a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062a0:	2302      	movs	r3, #2
  }
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b082      	sub	sp, #8
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7ff fecc 	bl	800606c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062de:	b580      	push	{r7, lr}
 80062e0:	b08c      	sub	sp, #48	@ 0x30
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b22      	cmp	r3, #34	@ 0x22
 80062f0:	f040 80ae 	bne.w	8006450 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062fc:	d117      	bne.n	800632e <UART_Receive_IT+0x50>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d113      	bne.n	800632e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006306:	2300      	movs	r3, #0
 8006308:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	b29b      	uxth	r3, r3
 8006318:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800631c:	b29a      	uxth	r2, r3
 800631e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006320:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006326:	1c9a      	adds	r2, r3, #2
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	629a      	str	r2, [r3, #40]	@ 0x28
 800632c:	e026      	b.n	800637c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006332:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006334:	2300      	movs	r3, #0
 8006336:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006340:	d007      	beq.n	8006352 <UART_Receive_IT+0x74>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10a      	bne.n	8006360 <UART_Receive_IT+0x82>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	b2da      	uxtb	r2, r3
 800635a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800635c:	701a      	strb	r2, [r3, #0]
 800635e:	e008      	b.n	8006372 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	b2db      	uxtb	r3, r3
 8006368:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800636c:	b2da      	uxtb	r2, r3
 800636e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006370:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006380:	b29b      	uxth	r3, r3
 8006382:	3b01      	subs	r3, #1
 8006384:	b29b      	uxth	r3, r3
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	4619      	mov	r1, r3
 800638a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800638c:	2b00      	cmp	r3, #0
 800638e:	d15d      	bne.n	800644c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 0220 	bic.w	r2, r2, #32
 800639e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	68da      	ldr	r2, [r3, #12]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80063ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	695a      	ldr	r2, [r3, #20]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f022 0201 	bic.w	r2, r2, #1
 80063be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2220      	movs	r2, #32
 80063c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d135      	bne.n	8006442 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	330c      	adds	r3, #12
 80063e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	e853 3f00 	ldrex	r3, [r3]
 80063ea:	613b      	str	r3, [r7, #16]
   return(result);
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f023 0310 	bic.w	r3, r3, #16
 80063f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	330c      	adds	r3, #12
 80063fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063fc:	623a      	str	r2, [r7, #32]
 80063fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006400:	69f9      	ldr	r1, [r7, #28]
 8006402:	6a3a      	ldr	r2, [r7, #32]
 8006404:	e841 2300 	strex	r3, r2, [r1]
 8006408:	61bb      	str	r3, [r7, #24]
   return(result);
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1e5      	bne.n	80063dc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 0310 	and.w	r3, r3, #16
 800641a:	2b10      	cmp	r3, #16
 800641c:	d10a      	bne.n	8006434 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800641e:	2300      	movs	r3, #0
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006438:	4619      	mov	r1, r3
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7ff fe2a 	bl	8006094 <HAL_UARTEx_RxEventCallback>
 8006440:	e002      	b.n	8006448 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7fa ffe6 	bl	8001414 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006448:	2300      	movs	r3, #0
 800644a:	e002      	b.n	8006452 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800644c:	2300      	movs	r3, #0
 800644e:	e000      	b.n	8006452 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006450:	2302      	movs	r3, #2
  }
}
 8006452:	4618      	mov	r0, r3
 8006454:	3730      	adds	r7, #48	@ 0x30
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
	...

0800645c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800645c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006460:	b0c0      	sub	sp, #256	@ 0x100
 8006462:	af00      	add	r7, sp, #0
 8006464:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006478:	68d9      	ldr	r1, [r3, #12]
 800647a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	ea40 0301 	orr.w	r3, r0, r1
 8006484:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800648a:	689a      	ldr	r2, [r3, #8]
 800648c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	431a      	orrs	r2, r3
 8006494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	431a      	orrs	r2, r3
 800649c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80064a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80064b4:	f021 010c 	bic.w	r1, r1, #12
 80064b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80064c2:	430b      	orrs	r3, r1
 80064c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80064d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d6:	6999      	ldr	r1, [r3, #24]
 80064d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	ea40 0301 	orr.w	r3, r0, r1
 80064e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	4b8f      	ldr	r3, [pc, #572]	@ (8006728 <UART_SetConfig+0x2cc>)
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d005      	beq.n	80064fc <UART_SetConfig+0xa0>
 80064f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	4b8d      	ldr	r3, [pc, #564]	@ (800672c <UART_SetConfig+0x2d0>)
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d104      	bne.n	8006506 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064fc:	f7fe fbb6 	bl	8004c6c <HAL_RCC_GetPCLK2Freq>
 8006500:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006504:	e003      	b.n	800650e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006506:	f7fe fb9d 	bl	8004c44 <HAL_RCC_GetPCLK1Freq>
 800650a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800650e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006518:	f040 810c 	bne.w	8006734 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800651c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006520:	2200      	movs	r2, #0
 8006522:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006526:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800652a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800652e:	4622      	mov	r2, r4
 8006530:	462b      	mov	r3, r5
 8006532:	1891      	adds	r1, r2, r2
 8006534:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006536:	415b      	adcs	r3, r3
 8006538:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800653a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800653e:	4621      	mov	r1, r4
 8006540:	eb12 0801 	adds.w	r8, r2, r1
 8006544:	4629      	mov	r1, r5
 8006546:	eb43 0901 	adc.w	r9, r3, r1
 800654a:	f04f 0200 	mov.w	r2, #0
 800654e:	f04f 0300 	mov.w	r3, #0
 8006552:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006556:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800655a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800655e:	4690      	mov	r8, r2
 8006560:	4699      	mov	r9, r3
 8006562:	4623      	mov	r3, r4
 8006564:	eb18 0303 	adds.w	r3, r8, r3
 8006568:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800656c:	462b      	mov	r3, r5
 800656e:	eb49 0303 	adc.w	r3, r9, r3
 8006572:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006582:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006586:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800658a:	460b      	mov	r3, r1
 800658c:	18db      	adds	r3, r3, r3
 800658e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006590:	4613      	mov	r3, r2
 8006592:	eb42 0303 	adc.w	r3, r2, r3
 8006596:	657b      	str	r3, [r7, #84]	@ 0x54
 8006598:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800659c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80065a0:	f7f9 fe12 	bl	80001c8 <__aeabi_uldivmod>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	4b61      	ldr	r3, [pc, #388]	@ (8006730 <UART_SetConfig+0x2d4>)
 80065aa:	fba3 2302 	umull	r2, r3, r3, r2
 80065ae:	095b      	lsrs	r3, r3, #5
 80065b0:	011c      	lsls	r4, r3, #4
 80065b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065b6:	2200      	movs	r2, #0
 80065b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80065c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80065c4:	4642      	mov	r2, r8
 80065c6:	464b      	mov	r3, r9
 80065c8:	1891      	adds	r1, r2, r2
 80065ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80065cc:	415b      	adcs	r3, r3
 80065ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80065d4:	4641      	mov	r1, r8
 80065d6:	eb12 0a01 	adds.w	sl, r2, r1
 80065da:	4649      	mov	r1, r9
 80065dc:	eb43 0b01 	adc.w	fp, r3, r1
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	f04f 0300 	mov.w	r3, #0
 80065e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065f4:	4692      	mov	sl, r2
 80065f6:	469b      	mov	fp, r3
 80065f8:	4643      	mov	r3, r8
 80065fa:	eb1a 0303 	adds.w	r3, sl, r3
 80065fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006602:	464b      	mov	r3, r9
 8006604:	eb4b 0303 	adc.w	r3, fp, r3
 8006608:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800660c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006618:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800661c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006620:	460b      	mov	r3, r1
 8006622:	18db      	adds	r3, r3, r3
 8006624:	643b      	str	r3, [r7, #64]	@ 0x40
 8006626:	4613      	mov	r3, r2
 8006628:	eb42 0303 	adc.w	r3, r2, r3
 800662c:	647b      	str	r3, [r7, #68]	@ 0x44
 800662e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006632:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006636:	f7f9 fdc7 	bl	80001c8 <__aeabi_uldivmod>
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	4611      	mov	r1, r2
 8006640:	4b3b      	ldr	r3, [pc, #236]	@ (8006730 <UART_SetConfig+0x2d4>)
 8006642:	fba3 2301 	umull	r2, r3, r3, r1
 8006646:	095b      	lsrs	r3, r3, #5
 8006648:	2264      	movs	r2, #100	@ 0x64
 800664a:	fb02 f303 	mul.w	r3, r2, r3
 800664e:	1acb      	subs	r3, r1, r3
 8006650:	00db      	lsls	r3, r3, #3
 8006652:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006656:	4b36      	ldr	r3, [pc, #216]	@ (8006730 <UART_SetConfig+0x2d4>)
 8006658:	fba3 2302 	umull	r2, r3, r3, r2
 800665c:	095b      	lsrs	r3, r3, #5
 800665e:	005b      	lsls	r3, r3, #1
 8006660:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006664:	441c      	add	r4, r3
 8006666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800666a:	2200      	movs	r2, #0
 800666c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006670:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006674:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006678:	4642      	mov	r2, r8
 800667a:	464b      	mov	r3, r9
 800667c:	1891      	adds	r1, r2, r2
 800667e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006680:	415b      	adcs	r3, r3
 8006682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006684:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006688:	4641      	mov	r1, r8
 800668a:	1851      	adds	r1, r2, r1
 800668c:	6339      	str	r1, [r7, #48]	@ 0x30
 800668e:	4649      	mov	r1, r9
 8006690:	414b      	adcs	r3, r1
 8006692:	637b      	str	r3, [r7, #52]	@ 0x34
 8006694:	f04f 0200 	mov.w	r2, #0
 8006698:	f04f 0300 	mov.w	r3, #0
 800669c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80066a0:	4659      	mov	r1, fp
 80066a2:	00cb      	lsls	r3, r1, #3
 80066a4:	4651      	mov	r1, sl
 80066a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066aa:	4651      	mov	r1, sl
 80066ac:	00ca      	lsls	r2, r1, #3
 80066ae:	4610      	mov	r0, r2
 80066b0:	4619      	mov	r1, r3
 80066b2:	4603      	mov	r3, r0
 80066b4:	4642      	mov	r2, r8
 80066b6:	189b      	adds	r3, r3, r2
 80066b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066bc:	464b      	mov	r3, r9
 80066be:	460a      	mov	r2, r1
 80066c0:	eb42 0303 	adc.w	r3, r2, r3
 80066c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80066d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80066d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80066dc:	460b      	mov	r3, r1
 80066de:	18db      	adds	r3, r3, r3
 80066e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066e2:	4613      	mov	r3, r2
 80066e4:	eb42 0303 	adc.w	r3, r2, r3
 80066e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80066f2:	f7f9 fd69 	bl	80001c8 <__aeabi_uldivmod>
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006730 <UART_SetConfig+0x2d4>)
 80066fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006700:	095b      	lsrs	r3, r3, #5
 8006702:	2164      	movs	r1, #100	@ 0x64
 8006704:	fb01 f303 	mul.w	r3, r1, r3
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	00db      	lsls	r3, r3, #3
 800670c:	3332      	adds	r3, #50	@ 0x32
 800670e:	4a08      	ldr	r2, [pc, #32]	@ (8006730 <UART_SetConfig+0x2d4>)
 8006710:	fba2 2303 	umull	r2, r3, r2, r3
 8006714:	095b      	lsrs	r3, r3, #5
 8006716:	f003 0207 	and.w	r2, r3, #7
 800671a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4422      	add	r2, r4
 8006722:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006724:	e106      	b.n	8006934 <UART_SetConfig+0x4d8>
 8006726:	bf00      	nop
 8006728:	40011000 	.word	0x40011000
 800672c:	40011400 	.word	0x40011400
 8006730:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006738:	2200      	movs	r2, #0
 800673a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800673e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006742:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006746:	4642      	mov	r2, r8
 8006748:	464b      	mov	r3, r9
 800674a:	1891      	adds	r1, r2, r2
 800674c:	6239      	str	r1, [r7, #32]
 800674e:	415b      	adcs	r3, r3
 8006750:	627b      	str	r3, [r7, #36]	@ 0x24
 8006752:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006756:	4641      	mov	r1, r8
 8006758:	1854      	adds	r4, r2, r1
 800675a:	4649      	mov	r1, r9
 800675c:	eb43 0501 	adc.w	r5, r3, r1
 8006760:	f04f 0200 	mov.w	r2, #0
 8006764:	f04f 0300 	mov.w	r3, #0
 8006768:	00eb      	lsls	r3, r5, #3
 800676a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800676e:	00e2      	lsls	r2, r4, #3
 8006770:	4614      	mov	r4, r2
 8006772:	461d      	mov	r5, r3
 8006774:	4643      	mov	r3, r8
 8006776:	18e3      	adds	r3, r4, r3
 8006778:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800677c:	464b      	mov	r3, r9
 800677e:	eb45 0303 	adc.w	r3, r5, r3
 8006782:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006792:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006796:	f04f 0200 	mov.w	r2, #0
 800679a:	f04f 0300 	mov.w	r3, #0
 800679e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80067a2:	4629      	mov	r1, r5
 80067a4:	008b      	lsls	r3, r1, #2
 80067a6:	4621      	mov	r1, r4
 80067a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067ac:	4621      	mov	r1, r4
 80067ae:	008a      	lsls	r2, r1, #2
 80067b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80067b4:	f7f9 fd08 	bl	80001c8 <__aeabi_uldivmod>
 80067b8:	4602      	mov	r2, r0
 80067ba:	460b      	mov	r3, r1
 80067bc:	4b60      	ldr	r3, [pc, #384]	@ (8006940 <UART_SetConfig+0x4e4>)
 80067be:	fba3 2302 	umull	r2, r3, r3, r2
 80067c2:	095b      	lsrs	r3, r3, #5
 80067c4:	011c      	lsls	r4, r3, #4
 80067c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80067d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80067d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80067d8:	4642      	mov	r2, r8
 80067da:	464b      	mov	r3, r9
 80067dc:	1891      	adds	r1, r2, r2
 80067de:	61b9      	str	r1, [r7, #24]
 80067e0:	415b      	adcs	r3, r3
 80067e2:	61fb      	str	r3, [r7, #28]
 80067e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067e8:	4641      	mov	r1, r8
 80067ea:	1851      	adds	r1, r2, r1
 80067ec:	6139      	str	r1, [r7, #16]
 80067ee:	4649      	mov	r1, r9
 80067f0:	414b      	adcs	r3, r1
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	f04f 0200 	mov.w	r2, #0
 80067f8:	f04f 0300 	mov.w	r3, #0
 80067fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006800:	4659      	mov	r1, fp
 8006802:	00cb      	lsls	r3, r1, #3
 8006804:	4651      	mov	r1, sl
 8006806:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800680a:	4651      	mov	r1, sl
 800680c:	00ca      	lsls	r2, r1, #3
 800680e:	4610      	mov	r0, r2
 8006810:	4619      	mov	r1, r3
 8006812:	4603      	mov	r3, r0
 8006814:	4642      	mov	r2, r8
 8006816:	189b      	adds	r3, r3, r2
 8006818:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800681c:	464b      	mov	r3, r9
 800681e:	460a      	mov	r2, r1
 8006820:	eb42 0303 	adc.w	r3, r2, r3
 8006824:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006832:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006834:	f04f 0200 	mov.w	r2, #0
 8006838:	f04f 0300 	mov.w	r3, #0
 800683c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006840:	4649      	mov	r1, r9
 8006842:	008b      	lsls	r3, r1, #2
 8006844:	4641      	mov	r1, r8
 8006846:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800684a:	4641      	mov	r1, r8
 800684c:	008a      	lsls	r2, r1, #2
 800684e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006852:	f7f9 fcb9 	bl	80001c8 <__aeabi_uldivmod>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	4611      	mov	r1, r2
 800685c:	4b38      	ldr	r3, [pc, #224]	@ (8006940 <UART_SetConfig+0x4e4>)
 800685e:	fba3 2301 	umull	r2, r3, r3, r1
 8006862:	095b      	lsrs	r3, r3, #5
 8006864:	2264      	movs	r2, #100	@ 0x64
 8006866:	fb02 f303 	mul.w	r3, r2, r3
 800686a:	1acb      	subs	r3, r1, r3
 800686c:	011b      	lsls	r3, r3, #4
 800686e:	3332      	adds	r3, #50	@ 0x32
 8006870:	4a33      	ldr	r2, [pc, #204]	@ (8006940 <UART_SetConfig+0x4e4>)
 8006872:	fba2 2303 	umull	r2, r3, r2, r3
 8006876:	095b      	lsrs	r3, r3, #5
 8006878:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800687c:	441c      	add	r4, r3
 800687e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006882:	2200      	movs	r2, #0
 8006884:	673b      	str	r3, [r7, #112]	@ 0x70
 8006886:	677a      	str	r2, [r7, #116]	@ 0x74
 8006888:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800688c:	4642      	mov	r2, r8
 800688e:	464b      	mov	r3, r9
 8006890:	1891      	adds	r1, r2, r2
 8006892:	60b9      	str	r1, [r7, #8]
 8006894:	415b      	adcs	r3, r3
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800689c:	4641      	mov	r1, r8
 800689e:	1851      	adds	r1, r2, r1
 80068a0:	6039      	str	r1, [r7, #0]
 80068a2:	4649      	mov	r1, r9
 80068a4:	414b      	adcs	r3, r1
 80068a6:	607b      	str	r3, [r7, #4]
 80068a8:	f04f 0200 	mov.w	r2, #0
 80068ac:	f04f 0300 	mov.w	r3, #0
 80068b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80068b4:	4659      	mov	r1, fp
 80068b6:	00cb      	lsls	r3, r1, #3
 80068b8:	4651      	mov	r1, sl
 80068ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068be:	4651      	mov	r1, sl
 80068c0:	00ca      	lsls	r2, r1, #3
 80068c2:	4610      	mov	r0, r2
 80068c4:	4619      	mov	r1, r3
 80068c6:	4603      	mov	r3, r0
 80068c8:	4642      	mov	r2, r8
 80068ca:	189b      	adds	r3, r3, r2
 80068cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80068ce:	464b      	mov	r3, r9
 80068d0:	460a      	mov	r2, r1
 80068d2:	eb42 0303 	adc.w	r3, r2, r3
 80068d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80068d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80068e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80068e4:	f04f 0200 	mov.w	r2, #0
 80068e8:	f04f 0300 	mov.w	r3, #0
 80068ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80068f0:	4649      	mov	r1, r9
 80068f2:	008b      	lsls	r3, r1, #2
 80068f4:	4641      	mov	r1, r8
 80068f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068fa:	4641      	mov	r1, r8
 80068fc:	008a      	lsls	r2, r1, #2
 80068fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006902:	f7f9 fc61 	bl	80001c8 <__aeabi_uldivmod>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4b0d      	ldr	r3, [pc, #52]	@ (8006940 <UART_SetConfig+0x4e4>)
 800690c:	fba3 1302 	umull	r1, r3, r3, r2
 8006910:	095b      	lsrs	r3, r3, #5
 8006912:	2164      	movs	r1, #100	@ 0x64
 8006914:	fb01 f303 	mul.w	r3, r1, r3
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	011b      	lsls	r3, r3, #4
 800691c:	3332      	adds	r3, #50	@ 0x32
 800691e:	4a08      	ldr	r2, [pc, #32]	@ (8006940 <UART_SetConfig+0x4e4>)
 8006920:	fba2 2303 	umull	r2, r3, r2, r3
 8006924:	095b      	lsrs	r3, r3, #5
 8006926:	f003 020f 	and.w	r2, r3, #15
 800692a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4422      	add	r2, r4
 8006932:	609a      	str	r2, [r3, #8]
}
 8006934:	bf00      	nop
 8006936:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800693a:	46bd      	mov	sp, r7
 800693c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006940:	51eb851f 	.word	0x51eb851f

08006944 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006944:	b084      	sub	sp, #16
 8006946:	b580      	push	{r7, lr}
 8006948:	b084      	sub	sp, #16
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	f107 001c 	add.w	r0, r7, #28
 8006952:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006956:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800695a:	2b01      	cmp	r3, #1
 800695c:	d123      	bne.n	80069a6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006962:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006972:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006986:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800698a:	2b01      	cmp	r3, #1
 800698c:	d105      	bne.n	800699a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 fae8 	bl	8007f70 <USB_CoreReset>
 80069a0:	4603      	mov	r3, r0
 80069a2:	73fb      	strb	r3, [r7, #15]
 80069a4:	e01b      	b.n	80069de <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f001 fadc 	bl	8007f70 <USB_CoreReset>
 80069b8:	4603      	mov	r3, r0
 80069ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80069bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d106      	bne.n	80069d2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80069d0:	e005      	b.n	80069de <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80069de:	7fbb      	ldrb	r3, [r7, #30]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d10b      	bne.n	80069fc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f043 0206 	orr.w	r2, r3, #6
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f043 0220 	orr.w	r2, r3, #32
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a08:	b004      	add	sp, #16
 8006a0a:	4770      	bx	lr

08006a0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	4613      	mov	r3, r2
 8006a18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006a1a:	79fb      	ldrb	r3, [r7, #7]
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d165      	bne.n	8006aec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	4a41      	ldr	r2, [pc, #260]	@ (8006b28 <USB_SetTurnaroundTime+0x11c>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d906      	bls.n	8006a36 <USB_SetTurnaroundTime+0x2a>
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4a40      	ldr	r2, [pc, #256]	@ (8006b2c <USB_SetTurnaroundTime+0x120>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d202      	bcs.n	8006a36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006a30:	230f      	movs	r3, #15
 8006a32:	617b      	str	r3, [r7, #20]
 8006a34:	e062      	b.n	8006afc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	4a3c      	ldr	r2, [pc, #240]	@ (8006b2c <USB_SetTurnaroundTime+0x120>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d306      	bcc.n	8006a4c <USB_SetTurnaroundTime+0x40>
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	4a3b      	ldr	r2, [pc, #236]	@ (8006b30 <USB_SetTurnaroundTime+0x124>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d202      	bcs.n	8006a4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006a46:	230e      	movs	r3, #14
 8006a48:	617b      	str	r3, [r7, #20]
 8006a4a:	e057      	b.n	8006afc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	4a38      	ldr	r2, [pc, #224]	@ (8006b30 <USB_SetTurnaroundTime+0x124>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d306      	bcc.n	8006a62 <USB_SetTurnaroundTime+0x56>
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	4a37      	ldr	r2, [pc, #220]	@ (8006b34 <USB_SetTurnaroundTime+0x128>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d202      	bcs.n	8006a62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006a5c:	230d      	movs	r3, #13
 8006a5e:	617b      	str	r3, [r7, #20]
 8006a60:	e04c      	b.n	8006afc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	4a33      	ldr	r2, [pc, #204]	@ (8006b34 <USB_SetTurnaroundTime+0x128>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d306      	bcc.n	8006a78 <USB_SetTurnaroundTime+0x6c>
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	4a32      	ldr	r2, [pc, #200]	@ (8006b38 <USB_SetTurnaroundTime+0x12c>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d802      	bhi.n	8006a78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006a72:	230c      	movs	r3, #12
 8006a74:	617b      	str	r3, [r7, #20]
 8006a76:	e041      	b.n	8006afc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	4a2f      	ldr	r2, [pc, #188]	@ (8006b38 <USB_SetTurnaroundTime+0x12c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d906      	bls.n	8006a8e <USB_SetTurnaroundTime+0x82>
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	4a2e      	ldr	r2, [pc, #184]	@ (8006b3c <USB_SetTurnaroundTime+0x130>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d802      	bhi.n	8006a8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006a88:	230b      	movs	r3, #11
 8006a8a:	617b      	str	r3, [r7, #20]
 8006a8c:	e036      	b.n	8006afc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	4a2a      	ldr	r2, [pc, #168]	@ (8006b3c <USB_SetTurnaroundTime+0x130>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d906      	bls.n	8006aa4 <USB_SetTurnaroundTime+0x98>
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	4a29      	ldr	r2, [pc, #164]	@ (8006b40 <USB_SetTurnaroundTime+0x134>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d802      	bhi.n	8006aa4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006a9e:	230a      	movs	r3, #10
 8006aa0:	617b      	str	r3, [r7, #20]
 8006aa2:	e02b      	b.n	8006afc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	4a26      	ldr	r2, [pc, #152]	@ (8006b40 <USB_SetTurnaroundTime+0x134>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d906      	bls.n	8006aba <USB_SetTurnaroundTime+0xae>
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	4a25      	ldr	r2, [pc, #148]	@ (8006b44 <USB_SetTurnaroundTime+0x138>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d202      	bcs.n	8006aba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006ab4:	2309      	movs	r3, #9
 8006ab6:	617b      	str	r3, [r7, #20]
 8006ab8:	e020      	b.n	8006afc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	4a21      	ldr	r2, [pc, #132]	@ (8006b44 <USB_SetTurnaroundTime+0x138>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d306      	bcc.n	8006ad0 <USB_SetTurnaroundTime+0xc4>
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	4a20      	ldr	r2, [pc, #128]	@ (8006b48 <USB_SetTurnaroundTime+0x13c>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d802      	bhi.n	8006ad0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006aca:	2308      	movs	r3, #8
 8006acc:	617b      	str	r3, [r7, #20]
 8006ace:	e015      	b.n	8006afc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	4a1d      	ldr	r2, [pc, #116]	@ (8006b48 <USB_SetTurnaroundTime+0x13c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d906      	bls.n	8006ae6 <USB_SetTurnaroundTime+0xda>
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	4a1c      	ldr	r2, [pc, #112]	@ (8006b4c <USB_SetTurnaroundTime+0x140>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d202      	bcs.n	8006ae6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006ae0:	2307      	movs	r3, #7
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	e00a      	b.n	8006afc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006ae6:	2306      	movs	r3, #6
 8006ae8:	617b      	str	r3, [r7, #20]
 8006aea:	e007      	b.n	8006afc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006aec:	79fb      	ldrb	r3, [r7, #7]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d102      	bne.n	8006af8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006af2:	2309      	movs	r3, #9
 8006af4:	617b      	str	r3, [r7, #20]
 8006af6:	e001      	b.n	8006afc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006af8:	2309      	movs	r3, #9
 8006afa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	68da      	ldr	r2, [r3, #12]
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	029b      	lsls	r3, r3, #10
 8006b10:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006b14:	431a      	orrs	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	371c      	adds	r7, #28
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	00d8acbf 	.word	0x00d8acbf
 8006b2c:	00e4e1c0 	.word	0x00e4e1c0
 8006b30:	00f42400 	.word	0x00f42400
 8006b34:	01067380 	.word	0x01067380
 8006b38:	011a499f 	.word	0x011a499f
 8006b3c:	01312cff 	.word	0x01312cff
 8006b40:	014ca43f 	.word	0x014ca43f
 8006b44:	016e3600 	.word	0x016e3600
 8006b48:	01a6ab1f 	.word	0x01a6ab1f
 8006b4c:	01e84800 	.word	0x01e84800

08006b50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f043 0201 	orr.w	r2, r3, #1
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	f023 0201 	bic.w	r2, r3, #1
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006bb0:	78fb      	ldrb	r3, [r7, #3]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d115      	bne.n	8006be2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006bc2:	200a      	movs	r0, #10
 8006bc4:	f7fb fa58 	bl	8002078 <HAL_Delay>
      ms += 10U;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	330a      	adds	r3, #10
 8006bcc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f001 f93f 	bl	8007e52 <USB_GetMode>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d01e      	beq.n	8006c18 <USB_SetCurrentMode+0x84>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2bc7      	cmp	r3, #199	@ 0xc7
 8006bde:	d9f0      	bls.n	8006bc2 <USB_SetCurrentMode+0x2e>
 8006be0:	e01a      	b.n	8006c18 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006be2:	78fb      	ldrb	r3, [r7, #3]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d115      	bne.n	8006c14 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006bf4:	200a      	movs	r0, #10
 8006bf6:	f7fb fa3f 	bl	8002078 <HAL_Delay>
      ms += 10U;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	330a      	adds	r3, #10
 8006bfe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f001 f926 	bl	8007e52 <USB_GetMode>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d005      	beq.n	8006c18 <USB_SetCurrentMode+0x84>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c10:	d9f0      	bls.n	8006bf4 <USB_SetCurrentMode+0x60>
 8006c12:	e001      	b.n	8006c18 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	e005      	b.n	8006c24 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2bc8      	cmp	r3, #200	@ 0xc8
 8006c1c:	d101      	bne.n	8006c22 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e000      	b.n	8006c24 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c2c:	b084      	sub	sp, #16
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b086      	sub	sp, #24
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006c3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c46:	2300      	movs	r3, #0
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	e009      	b.n	8006c60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	3340      	adds	r3, #64	@ 0x40
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	2200      	movs	r2, #0
 8006c58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	613b      	str	r3, [r7, #16]
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	2b0e      	cmp	r3, #14
 8006c64:	d9f2      	bls.n	8006c4c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c66:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d11c      	bne.n	8006ca8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c7c:	f043 0302 	orr.w	r3, r3, #2
 8006c80:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c86:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c92:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	639a      	str	r2, [r3, #56]	@ 0x38
 8006ca6:	e00b      	b.n	8006cc0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cac:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	2300      	movs	r3, #0
 8006cca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ccc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d10d      	bne.n	8006cf0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d104      	bne.n	8006ce6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006cdc:	2100      	movs	r1, #0
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f968 	bl	8006fb4 <USB_SetDevSpeed>
 8006ce4:	e008      	b.n	8006cf8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f963 	bl	8006fb4 <USB_SetDevSpeed>
 8006cee:	e003      	b.n	8006cf8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006cf0:	2103      	movs	r1, #3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f95e 	bl	8006fb4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006cf8:	2110      	movs	r1, #16
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f8fa 	bl	8006ef4 <USB_FlushTxFifo>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f924 	bl	8006f58 <USB_FlushRxFifo>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d20:	461a      	mov	r2, r3
 8006d22:	2300      	movs	r3, #0
 8006d24:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	2300      	movs	r3, #0
 8006d30:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d38:	461a      	mov	r2, r3
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d3e:	2300      	movs	r3, #0
 8006d40:	613b      	str	r3, [r7, #16]
 8006d42:	e043      	b.n	8006dcc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d5a:	d118      	bne.n	8006d8e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10a      	bne.n	8006d78 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	015a      	lsls	r2, r3, #5
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d6e:	461a      	mov	r2, r3
 8006d70:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006d74:	6013      	str	r3, [r2, #0]
 8006d76:	e013      	b.n	8006da0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d84:	461a      	mov	r2, r3
 8006d86:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006d8a:	6013      	str	r3, [r2, #0]
 8006d8c:	e008      	b.n	8006da0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dac:	461a      	mov	r2, r3
 8006dae:	2300      	movs	r3, #0
 8006db0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006dc4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	613b      	str	r3, [r7, #16]
 8006dcc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d3b5      	bcc.n	8006d44 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dd8:	2300      	movs	r3, #0
 8006dda:	613b      	str	r3, [r7, #16]
 8006ddc:	e043      	b.n	8006e66 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006df0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006df4:	d118      	bne.n	8006e28 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10a      	bne.n	8006e12 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	015a      	lsls	r2, r3, #5
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4413      	add	r3, r2
 8006e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e08:	461a      	mov	r2, r3
 8006e0a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006e0e:	6013      	str	r3, [r2, #0]
 8006e10:	e013      	b.n	8006e3a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e1e:	461a      	mov	r2, r3
 8006e20:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	e008      	b.n	8006e3a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e34:	461a      	mov	r2, r3
 8006e36:	2300      	movs	r3, #0
 8006e38:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e46:	461a      	mov	r2, r3
 8006e48:	2300      	movs	r3, #0
 8006e4a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e58:	461a      	mov	r2, r3
 8006e5a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006e5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	3301      	adds	r3, #1
 8006e64:	613b      	str	r3, [r7, #16]
 8006e66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d3b5      	bcc.n	8006dde <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e84:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006e92:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d105      	bne.n	8006ea8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	f043 0210 	orr.w	r2, r3, #16
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	699a      	ldr	r2, [r3, #24]
 8006eac:	4b10      	ldr	r3, [pc, #64]	@ (8006ef0 <USB_DevInit+0x2c4>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006eb4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d005      	beq.n	8006ec8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	f043 0208 	orr.w	r2, r3, #8
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ec8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d107      	bne.n	8006ee0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ed8:	f043 0304 	orr.w	r3, r3, #4
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3718      	adds	r7, #24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006eec:	b004      	add	sp, #16
 8006eee:	4770      	bx	lr
 8006ef0:	803c3800 	.word	0x803c3800

08006ef4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3301      	adds	r3, #1
 8006f06:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f0e:	d901      	bls.n	8006f14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e01b      	b.n	8006f4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	daf2      	bge.n	8006f02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	019b      	lsls	r3, r3, #6
 8006f24:	f043 0220 	orr.w	r2, r3, #32
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f38:	d901      	bls.n	8006f3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e006      	b.n	8006f4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	f003 0320 	and.w	r3, r3, #32
 8006f46:	2b20      	cmp	r3, #32
 8006f48:	d0f0      	beq.n	8006f2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f4a:	2300      	movs	r3, #0
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3714      	adds	r7, #20
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3301      	adds	r3, #1
 8006f68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f70:	d901      	bls.n	8006f76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e018      	b.n	8006fa8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	daf2      	bge.n	8006f64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2210      	movs	r2, #16
 8006f86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f94:	d901      	bls.n	8006f9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e006      	b.n	8006fa8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f003 0310 	and.w	r3, r3, #16
 8006fa2:	2b10      	cmp	r3, #16
 8006fa4:	d0f0      	beq.n	8006f88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	78fb      	ldrb	r3, [r7, #3]
 8006fce:	68f9      	ldr	r1, [r7, #12]
 8006fd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b087      	sub	sp, #28
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f003 0306 	and.w	r3, r3, #6
 8006ffe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d102      	bne.n	800700c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007006:	2300      	movs	r3, #0
 8007008:	75fb      	strb	r3, [r7, #23]
 800700a:	e00a      	b.n	8007022 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2b02      	cmp	r3, #2
 8007010:	d002      	beq.n	8007018 <USB_GetDevSpeed+0x32>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2b06      	cmp	r3, #6
 8007016:	d102      	bne.n	800701e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007018:	2302      	movs	r3, #2
 800701a:	75fb      	strb	r3, [r7, #23]
 800701c:	e001      	b.n	8007022 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800701e:	230f      	movs	r3, #15
 8007020:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007022:	7dfb      	ldrb	r3, [r7, #23]
}
 8007024:	4618      	mov	r0, r3
 8007026:	371c      	adds	r7, #28
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	785b      	ldrb	r3, [r3, #1]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d13a      	bne.n	80070c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007052:	69da      	ldr	r2, [r3, #28]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	f003 030f 	and.w	r3, r3, #15
 800705c:	2101      	movs	r1, #1
 800705e:	fa01 f303 	lsl.w	r3, r1, r3
 8007062:	b29b      	uxth	r3, r3
 8007064:	68f9      	ldr	r1, [r7, #12]
 8007066:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800706a:	4313      	orrs	r3, r2
 800706c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	4413      	add	r3, r2
 8007076:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007080:	2b00      	cmp	r3, #0
 8007082:	d155      	bne.n	8007130 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	015a      	lsls	r2, r3, #5
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4413      	add	r3, r2
 800708c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	791b      	ldrb	r3, [r3, #4]
 800709e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	059b      	lsls	r3, r3, #22
 80070a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070a8:	4313      	orrs	r3, r2
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	0151      	lsls	r1, r2, #5
 80070ae:	68fa      	ldr	r2, [r7, #12]
 80070b0:	440a      	add	r2, r1
 80070b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80070b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070be:	6013      	str	r3, [r2, #0]
 80070c0:	e036      	b.n	8007130 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070c8:	69da      	ldr	r2, [r3, #28]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	f003 030f 	and.w	r3, r3, #15
 80070d2:	2101      	movs	r1, #1
 80070d4:	fa01 f303 	lsl.w	r3, r1, r3
 80070d8:	041b      	lsls	r3, r3, #16
 80070da:	68f9      	ldr	r1, [r7, #12]
 80070dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070e0:	4313      	orrs	r3, r2
 80070e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	015a      	lsls	r2, r3, #5
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	4413      	add	r3, r2
 80070ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d11a      	bne.n	8007130 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	791b      	ldrb	r3, [r3, #4]
 8007114:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007116:	430b      	orrs	r3, r1
 8007118:	4313      	orrs	r3, r2
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	0151      	lsls	r1, r2, #5
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	440a      	add	r2, r1
 8007122:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800712a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800712e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
	...

08007140 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	785b      	ldrb	r3, [r3, #1]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d161      	bne.n	8007220 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4413      	add	r3, r2
 8007164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800716e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007172:	d11f      	bne.n	80071b4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	0151      	lsls	r1, r2, #5
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	440a      	add	r2, r1
 800718a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800718e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007192:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	4413      	add	r3, r2
 800719c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	0151      	lsls	r1, r2, #5
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	440a      	add	r2, r1
 80071aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	f003 030f 	and.w	r3, r3, #15
 80071c4:	2101      	movs	r1, #1
 80071c6:	fa01 f303 	lsl.w	r3, r1, r3
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	43db      	mvns	r3, r3
 80071ce:	68f9      	ldr	r1, [r7, #12]
 80071d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071d4:	4013      	ands	r3, r2
 80071d6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071de:	69da      	ldr	r2, [r3, #28]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	f003 030f 	and.w	r3, r3, #15
 80071e8:	2101      	movs	r1, #1
 80071ea:	fa01 f303 	lsl.w	r3, r1, r3
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	43db      	mvns	r3, r3
 80071f2:	68f9      	ldr	r1, [r7, #12]
 80071f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071f8:	4013      	ands	r3, r2
 80071fa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	0159      	lsls	r1, r3, #5
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	440b      	add	r3, r1
 8007212:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007216:	4619      	mov	r1, r3
 8007218:	4b35      	ldr	r3, [pc, #212]	@ (80072f0 <USB_DeactivateEndpoint+0x1b0>)
 800721a:	4013      	ands	r3, r2
 800721c:	600b      	str	r3, [r1, #0]
 800721e:	e060      	b.n	80072e2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007232:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007236:	d11f      	bne.n	8007278 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4413      	add	r3, r2
 8007240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	0151      	lsls	r1, r2, #5
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	440a      	add	r2, r1
 800724e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007252:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007256:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	015a      	lsls	r2, r3, #5
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4413      	add	r3, r2
 8007260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	0151      	lsls	r1, r2, #5
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	440a      	add	r2, r1
 800726e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007272:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007276:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800727e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	f003 030f 	and.w	r3, r3, #15
 8007288:	2101      	movs	r1, #1
 800728a:	fa01 f303 	lsl.w	r3, r1, r3
 800728e:	041b      	lsls	r3, r3, #16
 8007290:	43db      	mvns	r3, r3
 8007292:	68f9      	ldr	r1, [r7, #12]
 8007294:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007298:	4013      	ands	r3, r2
 800729a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072a2:	69da      	ldr	r2, [r3, #28]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	781b      	ldrb	r3, [r3, #0]
 80072a8:	f003 030f 	and.w	r3, r3, #15
 80072ac:	2101      	movs	r1, #1
 80072ae:	fa01 f303 	lsl.w	r3, r1, r3
 80072b2:	041b      	lsls	r3, r3, #16
 80072b4:	43db      	mvns	r3, r3
 80072b6:	68f9      	ldr	r1, [r7, #12]
 80072b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072bc:	4013      	ands	r3, r2
 80072be:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	0159      	lsls	r1, r3, #5
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	440b      	add	r3, r1
 80072d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072da:	4619      	mov	r1, r3
 80072dc:	4b05      	ldr	r3, [pc, #20]	@ (80072f4 <USB_DeactivateEndpoint+0x1b4>)
 80072de:	4013      	ands	r3, r2
 80072e0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3714      	adds	r7, #20
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr
 80072f0:	ec337800 	.word	0xec337800
 80072f4:	eff37800 	.word	0xeff37800

080072f8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08a      	sub	sp, #40	@ 0x28
 80072fc:	af02      	add	r7, sp, #8
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	4613      	mov	r3, r2
 8007304:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	785b      	ldrb	r3, [r3, #1]
 8007314:	2b01      	cmp	r3, #1
 8007316:	f040 817f 	bne.w	8007618 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d132      	bne.n	8007388 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	015a      	lsls	r2, r3, #5
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	4413      	add	r3, r2
 800732a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	69ba      	ldr	r2, [r7, #24]
 8007332:	0151      	lsls	r1, r2, #5
 8007334:	69fa      	ldr	r2, [r7, #28]
 8007336:	440a      	add	r2, r1
 8007338:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800733c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007340:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007344:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	4413      	add	r3, r2
 800734e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	0151      	lsls	r1, r2, #5
 8007358:	69fa      	ldr	r2, [r7, #28]
 800735a:	440a      	add	r2, r1
 800735c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007360:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007364:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	015a      	lsls	r2, r3, #5
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	4413      	add	r3, r2
 800736e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007372:	691b      	ldr	r3, [r3, #16]
 8007374:	69ba      	ldr	r2, [r7, #24]
 8007376:	0151      	lsls	r1, r2, #5
 8007378:	69fa      	ldr	r2, [r7, #28]
 800737a:	440a      	add	r2, r1
 800737c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007380:	0cdb      	lsrs	r3, r3, #19
 8007382:	04db      	lsls	r3, r3, #19
 8007384:	6113      	str	r3, [r2, #16]
 8007386:	e097      	b.n	80074b8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	69ba      	ldr	r2, [r7, #24]
 8007398:	0151      	lsls	r1, r2, #5
 800739a:	69fa      	ldr	r2, [r7, #28]
 800739c:	440a      	add	r2, r1
 800739e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073a2:	0cdb      	lsrs	r3, r3, #19
 80073a4:	04db      	lsls	r3, r3, #19
 80073a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	015a      	lsls	r2, r3, #5
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	69ba      	ldr	r2, [r7, #24]
 80073b8:	0151      	lsls	r1, r2, #5
 80073ba:	69fa      	ldr	r2, [r7, #28]
 80073bc:	440a      	add	r2, r1
 80073be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073c2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80073c6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80073ca:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d11a      	bne.n	8007408 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	691a      	ldr	r2, [r3, #16]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d903      	bls.n	80073e6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	689a      	ldr	r2, [r3, #8]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	015a      	lsls	r2, r3, #5
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	4413      	add	r3, r2
 80073ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	69ba      	ldr	r2, [r7, #24]
 80073f6:	0151      	lsls	r1, r2, #5
 80073f8:	69fa      	ldr	r2, [r7, #28]
 80073fa:	440a      	add	r2, r1
 80073fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007400:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007404:	6113      	str	r3, [r2, #16]
 8007406:	e044      	b.n	8007492 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	691a      	ldr	r2, [r3, #16]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	4413      	add	r3, r2
 8007412:	1e5a      	subs	r2, r3, #1
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	fbb2 f3f3 	udiv	r3, r2, r3
 800741c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800741e:	69bb      	ldr	r3, [r7, #24]
 8007420:	015a      	lsls	r2, r3, #5
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	4413      	add	r3, r2
 8007426:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800742a:	691a      	ldr	r2, [r3, #16]
 800742c:	8afb      	ldrh	r3, [r7, #22]
 800742e:	04d9      	lsls	r1, r3, #19
 8007430:	4ba4      	ldr	r3, [pc, #656]	@ (80076c4 <USB_EPStartXfer+0x3cc>)
 8007432:	400b      	ands	r3, r1
 8007434:	69b9      	ldr	r1, [r7, #24]
 8007436:	0148      	lsls	r0, r1, #5
 8007438:	69f9      	ldr	r1, [r7, #28]
 800743a:	4401      	add	r1, r0
 800743c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007440:	4313      	orrs	r3, r2
 8007442:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	791b      	ldrb	r3, [r3, #4]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d122      	bne.n	8007492 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	4413      	add	r3, r2
 8007454:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	0151      	lsls	r1, r2, #5
 800745e:	69fa      	ldr	r2, [r7, #28]
 8007460:	440a      	add	r2, r1
 8007462:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007466:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800746a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	015a      	lsls	r2, r3, #5
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	4413      	add	r3, r2
 8007474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007478:	691a      	ldr	r2, [r3, #16]
 800747a:	8afb      	ldrh	r3, [r7, #22]
 800747c:	075b      	lsls	r3, r3, #29
 800747e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007482:	69b9      	ldr	r1, [r7, #24]
 8007484:	0148      	lsls	r0, r1, #5
 8007486:	69f9      	ldr	r1, [r7, #28]
 8007488:	4401      	add	r1, r0
 800748a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800748e:	4313      	orrs	r3, r2
 8007490:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	015a      	lsls	r2, r3, #5
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	4413      	add	r3, r2
 800749a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800749e:	691a      	ldr	r2, [r3, #16]
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074a8:	69b9      	ldr	r1, [r7, #24]
 80074aa:	0148      	lsls	r0, r1, #5
 80074ac:	69f9      	ldr	r1, [r7, #28]
 80074ae:	4401      	add	r1, r0
 80074b0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80074b4:	4313      	orrs	r3, r2
 80074b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80074b8:	79fb      	ldrb	r3, [r7, #7]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d14b      	bne.n	8007556 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	69db      	ldr	r3, [r3, #28]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d009      	beq.n	80074da <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d2:	461a      	mov	r2, r3
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	69db      	ldr	r3, [r3, #28]
 80074d8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	791b      	ldrb	r3, [r3, #4]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d128      	bne.n	8007534 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d110      	bne.n	8007514 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	015a      	lsls	r2, r3, #5
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	4413      	add	r3, r2
 80074fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	0151      	lsls	r1, r2, #5
 8007504:	69fa      	ldr	r2, [r7, #28]
 8007506:	440a      	add	r2, r1
 8007508:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800750c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007510:	6013      	str	r3, [r2, #0]
 8007512:	e00f      	b.n	8007534 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	0151      	lsls	r1, r2, #5
 8007526:	69fa      	ldr	r2, [r7, #28]
 8007528:	440a      	add	r2, r1
 800752a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800752e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007532:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	69fb      	ldr	r3, [r7, #28]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	69ba      	ldr	r2, [r7, #24]
 8007544:	0151      	lsls	r1, r2, #5
 8007546:	69fa      	ldr	r2, [r7, #28]
 8007548:	440a      	add	r2, r1
 800754a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800754e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	e166      	b.n	8007824 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	015a      	lsls	r2, r3, #5
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	4413      	add	r3, r2
 800755e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	0151      	lsls	r1, r2, #5
 8007568:	69fa      	ldr	r2, [r7, #28]
 800756a:	440a      	add	r2, r1
 800756c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007570:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007574:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	791b      	ldrb	r3, [r3, #4]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d015      	beq.n	80075aa <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	f000 814e 	beq.w	8007824 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800758e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	f003 030f 	and.w	r3, r3, #15
 8007598:	2101      	movs	r1, #1
 800759a:	fa01 f303 	lsl.w	r3, r1, r3
 800759e:	69f9      	ldr	r1, [r7, #28]
 80075a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075a4:	4313      	orrs	r3, r2
 80075a6:	634b      	str	r3, [r1, #52]	@ 0x34
 80075a8:	e13c      	b.n	8007824 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d110      	bne.n	80075dc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	0151      	lsls	r1, r2, #5
 80075cc:	69fa      	ldr	r2, [r7, #28]
 80075ce:	440a      	add	r2, r1
 80075d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075d4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80075d8:	6013      	str	r3, [r2, #0]
 80075da:	e00f      	b.n	80075fc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	69ba      	ldr	r2, [r7, #24]
 80075ec:	0151      	lsls	r1, r2, #5
 80075ee:	69fa      	ldr	r2, [r7, #28]
 80075f0:	440a      	add	r2, r1
 80075f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075fa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	68d9      	ldr	r1, [r3, #12]
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	781a      	ldrb	r2, [r3, #0]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	b298      	uxth	r0, r3
 800760a:	79fb      	ldrb	r3, [r7, #7]
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	4603      	mov	r3, r0
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f000 f9b9 	bl	8007988 <USB_WritePacket>
 8007616:	e105      	b.n	8007824 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	69ba      	ldr	r2, [r7, #24]
 8007628:	0151      	lsls	r1, r2, #5
 800762a:	69fa      	ldr	r2, [r7, #28]
 800762c:	440a      	add	r2, r1
 800762e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007632:	0cdb      	lsrs	r3, r3, #19
 8007634:	04db      	lsls	r3, r3, #19
 8007636:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	4413      	add	r3, r2
 8007640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	69ba      	ldr	r2, [r7, #24]
 8007648:	0151      	lsls	r1, r2, #5
 800764a:	69fa      	ldr	r2, [r7, #28]
 800764c:	440a      	add	r2, r1
 800764e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007652:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007656:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800765a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d132      	bne.n	80076c8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d003      	beq.n	8007672 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	689a      	ldr	r2, [r3, #8]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	689a      	ldr	r2, [r3, #8]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007686:	691a      	ldr	r2, [r3, #16]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	6a1b      	ldr	r3, [r3, #32]
 800768c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007690:	69b9      	ldr	r1, [r7, #24]
 8007692:	0148      	lsls	r0, r1, #5
 8007694:	69f9      	ldr	r1, [r7, #28]
 8007696:	4401      	add	r1, r0
 8007698:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800769c:	4313      	orrs	r3, r2
 800769e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	0151      	lsls	r1, r2, #5
 80076b2:	69fa      	ldr	r2, [r7, #28]
 80076b4:	440a      	add	r2, r1
 80076b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80076be:	6113      	str	r3, [r2, #16]
 80076c0:	e062      	b.n	8007788 <USB_EPStartXfer+0x490>
 80076c2:	bf00      	nop
 80076c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d123      	bne.n	8007718 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	015a      	lsls	r2, r3, #5
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076dc:	691a      	ldr	r2, [r3, #16]
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076e6:	69b9      	ldr	r1, [r7, #24]
 80076e8:	0148      	lsls	r0, r1, #5
 80076ea:	69f9      	ldr	r1, [r7, #28]
 80076ec:	4401      	add	r1, r0
 80076ee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80076f2:	4313      	orrs	r3, r2
 80076f4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	015a      	lsls	r2, r3, #5
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	0151      	lsls	r1, r2, #5
 8007708:	69fa      	ldr	r2, [r7, #28]
 800770a:	440a      	add	r2, r1
 800770c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007710:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007714:	6113      	str	r3, [r2, #16]
 8007716:	e037      	b.n	8007788 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	691a      	ldr	r2, [r3, #16]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	4413      	add	r3, r2
 8007722:	1e5a      	subs	r2, r3, #1
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	fbb2 f3f3 	udiv	r3, r2, r3
 800772c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	8afa      	ldrh	r2, [r7, #22]
 8007734:	fb03 f202 	mul.w	r2, r3, r2
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007748:	691a      	ldr	r2, [r3, #16]
 800774a:	8afb      	ldrh	r3, [r7, #22]
 800774c:	04d9      	lsls	r1, r3, #19
 800774e:	4b38      	ldr	r3, [pc, #224]	@ (8007830 <USB_EPStartXfer+0x538>)
 8007750:	400b      	ands	r3, r1
 8007752:	69b9      	ldr	r1, [r7, #24]
 8007754:	0148      	lsls	r0, r1, #5
 8007756:	69f9      	ldr	r1, [r7, #28]
 8007758:	4401      	add	r1, r0
 800775a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800775e:	4313      	orrs	r3, r2
 8007760:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	015a      	lsls	r2, r3, #5
 8007766:	69fb      	ldr	r3, [r7, #28]
 8007768:	4413      	add	r3, r2
 800776a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800776e:	691a      	ldr	r2, [r3, #16]
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	6a1b      	ldr	r3, [r3, #32]
 8007774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007778:	69b9      	ldr	r1, [r7, #24]
 800777a:	0148      	lsls	r0, r1, #5
 800777c:	69f9      	ldr	r1, [r7, #28]
 800777e:	4401      	add	r1, r0
 8007780:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007784:	4313      	orrs	r3, r2
 8007786:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007788:	79fb      	ldrb	r3, [r7, #7]
 800778a:	2b01      	cmp	r3, #1
 800778c:	d10d      	bne.n	80077aa <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d009      	beq.n	80077aa <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	68d9      	ldr	r1, [r3, #12]
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077a6:	460a      	mov	r2, r1
 80077a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	791b      	ldrb	r3, [r3, #4]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d128      	bne.n	8007804 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d110      	bne.n	80077e4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	015a      	lsls	r2, r3, #5
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	4413      	add	r3, r2
 80077ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	69ba      	ldr	r2, [r7, #24]
 80077d2:	0151      	lsls	r1, r2, #5
 80077d4:	69fa      	ldr	r2, [r7, #28]
 80077d6:	440a      	add	r2, r1
 80077d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80077e0:	6013      	str	r3, [r2, #0]
 80077e2:	e00f      	b.n	8007804 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	69ba      	ldr	r2, [r7, #24]
 80077f4:	0151      	lsls	r1, r2, #5
 80077f6:	69fa      	ldr	r2, [r7, #28]
 80077f8:	440a      	add	r2, r1
 80077fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007802:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	69ba      	ldr	r2, [r7, #24]
 8007814:	0151      	lsls	r1, r2, #5
 8007816:	69fa      	ldr	r2, [r7, #28]
 8007818:	440a      	add	r2, r1
 800781a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800781e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007822:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3720      	adds	r7, #32
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	1ff80000 	.word	0x1ff80000

08007834 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007834:	b480      	push	{r7}
 8007836:	b087      	sub	sp, #28
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800783e:	2300      	movs	r3, #0
 8007840:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	785b      	ldrb	r3, [r3, #1]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d14a      	bne.n	80078e8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007866:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800786a:	f040 8086 	bne.w	800797a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	4413      	add	r3, r2
 8007878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	7812      	ldrb	r2, [r2, #0]
 8007882:	0151      	lsls	r1, r2, #5
 8007884:	693a      	ldr	r2, [r7, #16]
 8007886:	440a      	add	r2, r1
 8007888:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800788c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007890:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	4413      	add	r3, r2
 800789c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	7812      	ldrb	r2, [r2, #0]
 80078a6:	0151      	lsls	r1, r2, #5
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	440a      	add	r2, r1
 80078ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80078b4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3301      	adds	r3, #1
 80078ba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f242 7210 	movw	r2, #10000	@ 0x2710
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d902      	bls.n	80078cc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	75fb      	strb	r3, [r7, #23]
          break;
 80078ca:	e056      	b.n	800797a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	015a      	lsls	r2, r3, #5
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	4413      	add	r3, r2
 80078d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078e4:	d0e7      	beq.n	80078b6 <USB_EPStopXfer+0x82>
 80078e6:	e048      	b.n	800797a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	015a      	lsls	r2, r3, #5
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	4413      	add	r3, r2
 80078f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007900:	d13b      	bne.n	800797a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	4413      	add	r3, r2
 800790c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	7812      	ldrb	r2, [r2, #0]
 8007916:	0151      	lsls	r1, r2, #5
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	440a      	add	r2, r1
 800791c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007920:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007924:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	015a      	lsls	r2, r3, #5
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	4413      	add	r3, r2
 8007930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	7812      	ldrb	r2, [r2, #0]
 800793a:	0151      	lsls	r1, r2, #5
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	440a      	add	r2, r1
 8007940:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007944:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007948:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3301      	adds	r3, #1
 800794e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007956:	4293      	cmp	r3, r2
 8007958:	d902      	bls.n	8007960 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	75fb      	strb	r3, [r7, #23]
          break;
 800795e:	e00c      	b.n	800797a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	4413      	add	r3, r2
 800796a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007974:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007978:	d0e7      	beq.n	800794a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800797a:	7dfb      	ldrb	r3, [r7, #23]
}
 800797c:	4618      	mov	r0, r3
 800797e:	371c      	adds	r7, #28
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007988:	b480      	push	{r7}
 800798a:	b089      	sub	sp, #36	@ 0x24
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	4611      	mov	r1, r2
 8007994:	461a      	mov	r2, r3
 8007996:	460b      	mov	r3, r1
 8007998:	71fb      	strb	r3, [r7, #7]
 800799a:	4613      	mov	r3, r2
 800799c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80079a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d123      	bne.n	80079f6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80079ae:	88bb      	ldrh	r3, [r7, #4]
 80079b0:	3303      	adds	r3, #3
 80079b2:	089b      	lsrs	r3, r3, #2
 80079b4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80079b6:	2300      	movs	r3, #0
 80079b8:	61bb      	str	r3, [r7, #24]
 80079ba:	e018      	b.n	80079ee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80079bc:	79fb      	ldrb	r3, [r7, #7]
 80079be:	031a      	lsls	r2, r3, #12
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80079c8:	461a      	mov	r2, r3
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	6013      	str	r3, [r2, #0]
      pSrc++;
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	3301      	adds	r3, #1
 80079d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	3301      	adds	r3, #1
 80079da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	3301      	adds	r3, #1
 80079e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	3301      	adds	r3, #1
 80079e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	3301      	adds	r3, #1
 80079ec:	61bb      	str	r3, [r7, #24]
 80079ee:	69ba      	ldr	r2, [r7, #24]
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d3e2      	bcc.n	80079bc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3724      	adds	r7, #36	@ 0x24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b08b      	sub	sp, #44	@ 0x2c
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007a1a:	88fb      	ldrh	r3, [r7, #6]
 8007a1c:	089b      	lsrs	r3, r3, #2
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007a22:	88fb      	ldrh	r3, [r7, #6]
 8007a24:	f003 0303 	and.w	r3, r3, #3
 8007a28:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	623b      	str	r3, [r7, #32]
 8007a2e:	e014      	b.n	8007a5a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3e:	3301      	adds	r3, #1
 8007a40:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a44:	3301      	adds	r3, #1
 8007a46:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a50:	3301      	adds	r3, #1
 8007a52:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007a54:	6a3b      	ldr	r3, [r7, #32]
 8007a56:	3301      	adds	r3, #1
 8007a58:	623b      	str	r3, [r7, #32]
 8007a5a:	6a3a      	ldr	r2, [r7, #32]
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d3e6      	bcc.n	8007a30 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007a62:	8bfb      	ldrh	r3, [r7, #30]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d01e      	beq.n	8007aa6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007a72:	461a      	mov	r2, r3
 8007a74:	f107 0310 	add.w	r3, r7, #16
 8007a78:	6812      	ldr	r2, [r2, #0]
 8007a7a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	fa22 f303 	lsr.w	r3, r2, r3
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a8c:	701a      	strb	r2, [r3, #0]
      i++;
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	3301      	adds	r3, #1
 8007a92:	623b      	str	r3, [r7, #32]
      pDest++;
 8007a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a96:	3301      	adds	r3, #1
 8007a98:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007a9a:	8bfb      	ldrh	r3, [r7, #30]
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007aa0:	8bfb      	ldrh	r3, [r7, #30]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1ea      	bne.n	8007a7c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	372c      	adds	r7, #44	@ 0x2c
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	785b      	ldrb	r3, [r3, #1]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d12c      	bne.n	8007b2a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	db12      	blt.n	8007b08 <USB_EPSetStall+0x54>
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00f      	beq.n	8007b08 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68ba      	ldr	r2, [r7, #8]
 8007af8:	0151      	lsls	r1, r2, #5
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	440a      	add	r2, r1
 8007afe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b02:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007b06:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	0151      	lsls	r1, r2, #5
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	440a      	add	r2, r1
 8007b1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b22:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007b26:	6013      	str	r3, [r2, #0]
 8007b28:	e02b      	b.n	8007b82 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	015a      	lsls	r2, r3, #5
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	4413      	add	r3, r2
 8007b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	db12      	blt.n	8007b62 <USB_EPSetStall+0xae>
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00f      	beq.n	8007b62 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	015a      	lsls	r2, r3, #5
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	0151      	lsls	r1, r2, #5
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	440a      	add	r2, r1
 8007b58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b5c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007b60:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	0151      	lsls	r1, r2, #5
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	440a      	add	r2, r1
 8007b78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007b80:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	785b      	ldrb	r3, [r3, #1]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d128      	bne.n	8007bfe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	0151      	lsls	r1, r2, #5
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	440a      	add	r2, r1
 8007bc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bc6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007bca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	791b      	ldrb	r3, [r3, #4]
 8007bd0:	2b03      	cmp	r3, #3
 8007bd2:	d003      	beq.n	8007bdc <USB_EPClearStall+0x4c>
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	791b      	ldrb	r3, [r3, #4]
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d138      	bne.n	8007c4e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	015a      	lsls	r2, r3, #5
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	4413      	add	r3, r2
 8007be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	0151      	lsls	r1, r2, #5
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	440a      	add	r2, r1
 8007bf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bfa:	6013      	str	r3, [r2, #0]
 8007bfc:	e027      	b.n	8007c4e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	015a      	lsls	r2, r3, #5
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	4413      	add	r3, r2
 8007c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68ba      	ldr	r2, [r7, #8]
 8007c0e:	0151      	lsls	r1, r2, #5
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	440a      	add	r2, r1
 8007c14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c18:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007c1c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	791b      	ldrb	r3, [r3, #4]
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d003      	beq.n	8007c2e <USB_EPClearStall+0x9e>
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	791b      	ldrb	r3, [r3, #4]
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d10f      	bne.n	8007c4e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	015a      	lsls	r2, r3, #5
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	4413      	add	r3, r2
 8007c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	0151      	lsls	r1, r2, #5
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	440a      	add	r2, r1
 8007c44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c4c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	460b      	mov	r3, r1
 8007c66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007c7a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007c7e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	78fb      	ldrb	r3, [r7, #3]
 8007c8a:	011b      	lsls	r3, r3, #4
 8007c8c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007c90:	68f9      	ldr	r1, [r7, #12]
 8007c92:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007c96:	4313      	orrs	r3, r2
 8007c98:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007cc2:	f023 0303 	bic.w	r3, r3, #3
 8007cc6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007cd6:	f023 0302 	bic.w	r3, r3, #2
 8007cda:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b085      	sub	sp, #20
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007d04:	f023 0303 	bic.w	r3, r3, #3
 8007d08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d18:	f043 0302 	orr.w	r3, r3, #2
 8007d1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d1e:	2300      	movs	r3, #0
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	4013      	ands	r3, r2
 8007d42:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d44:	68fb      	ldr	r3, [r7, #12]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b085      	sub	sp, #20
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d6e:	69db      	ldr	r3, [r3, #28]
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	4013      	ands	r3, r2
 8007d74:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	0c1b      	lsrs	r3, r3, #16
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b085      	sub	sp, #20
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d98:	699b      	ldr	r3, [r3, #24]
 8007d9a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007da2:	69db      	ldr	r3, [r3, #28]
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	4013      	ands	r3, r2
 8007da8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	b29b      	uxth	r3, r3
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b085      	sub	sp, #20
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	460b      	mov	r3, r1
 8007dc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007dca:	78fb      	ldrb	r3, [r7, #3]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007de0:	695b      	ldr	r3, [r3, #20]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	4013      	ands	r3, r2
 8007de6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007de8:	68bb      	ldr	r3, [r7, #8]
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3714      	adds	r7, #20
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b087      	sub	sp, #28
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	460b      	mov	r3, r1
 8007e00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e18:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e1a:	78fb      	ldrb	r3, [r7, #3]
 8007e1c:	f003 030f 	and.w	r3, r3, #15
 8007e20:	68fa      	ldr	r2, [r7, #12]
 8007e22:	fa22 f303 	lsr.w	r3, r2, r3
 8007e26:	01db      	lsls	r3, r3, #7
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	015a      	lsls	r2, r3, #5
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	4413      	add	r3, r2
 8007e38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	693a      	ldr	r2, [r7, #16]
 8007e40:	4013      	ands	r3, r2
 8007e42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e44:	68bb      	ldr	r3, [r7, #8]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	371c      	adds	r7, #28
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b083      	sub	sp, #12
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	695b      	ldr	r3, [r3, #20]
 8007e5e:	f003 0301 	and.w	r3, r3, #1
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b085      	sub	sp, #20
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e88:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007e8c:	f023 0307 	bic.w	r3, r3, #7
 8007e90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ea0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ea4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	607a      	str	r2, [r7, #4]
 8007ec0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	333c      	adds	r3, #60	@ 0x3c
 8007eca:	3304      	adds	r3, #4
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	4a26      	ldr	r2, [pc, #152]	@ (8007f6c <USB_EP0_OutStart+0xb8>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d90a      	bls.n	8007eee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ee8:	d101      	bne.n	8007eee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	e037      	b.n	8007f5e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007f0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	697a      	ldr	r2, [r7, #20]
 8007f18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f1c:	f043 0318 	orr.w	r3, r3, #24
 8007f20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f30:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007f34:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007f36:	7afb      	ldrb	r3, [r7, #11]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d10f      	bne.n	8007f5c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f42:	461a      	mov	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	697a      	ldr	r2, [r7, #20]
 8007f52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f56:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8007f5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	371c      	adds	r7, #28
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	4f54300a 	.word	0x4f54300a

08007f70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f88:	d901      	bls.n	8007f8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e01b      	b.n	8007fc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	daf2      	bge.n	8007f7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f96:	2300      	movs	r3, #0
 8007f98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	f043 0201 	orr.w	r2, r3, #1
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fb2:	d901      	bls.n	8007fb8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007fb4:	2303      	movs	r3, #3
 8007fb6:	e006      	b.n	8007fc6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	691b      	ldr	r3, [r3, #16]
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d0f0      	beq.n	8007fa6 <USB_CoreReset+0x36>

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3714      	adds	r7, #20
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
	...

08007fd4 <Motor_setup_LF>:
char* IN_RF;
char* IN_RB;
char* IN_EXTRA1;
char* IN_EXTRA2;

void Motor_setup_LF(TIM_HandleTypeDef *_TIM_14_CH1 ,TIM_HandleTypeDef *_TIM_5  ,char* _IN_LF){
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	607a      	str	r2, [r7, #4]
	//Motor_setup_LF(PWM_TIM ,Encoder_TIM   ,IN_LF);

	LF_PWM = _TIM_14_CH1;
 8007fe0:	4a0f      	ldr	r2, [pc, #60]	@ (8008020 <Motor_setup_LF+0x4c>)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6013      	str	r3, [r2, #0]
	EN_LF      = _TIM_5;
 8007fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8008024 <Motor_setup_LF+0x50>)
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(LF_PWM, TIM_CHANNEL_1);       //PWM
 8007fec:	4b0c      	ldr	r3, [pc, #48]	@ (8008020 <Motor_setup_LF+0x4c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fc ff76 	bl	8004ee4 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_LF , TIM_CHANNEL_ALL);     //Encoder
 8007ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8008024 <Motor_setup_LF+0x50>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	213c      	movs	r1, #60	@ 0x3c
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fd f8de 	bl	80051c0 <HAL_TIM_Encoder_Start>

	IN_LF = _IN_LF;
 8008004:	4a08      	ldr	r2, [pc, #32]	@ (8008028 <Motor_setup_LF+0x54>)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6013      	str	r3, [r2, #0]

	DutyCycle_LF_MAX = (LF_PWM->Init.Period);
 800800a:	4b05      	ldr	r3, [pc, #20]	@ (8008020 <Motor_setup_LF+0x4c>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	b21a      	sxth	r2, r3
 8008012:	4b06      	ldr	r3, [pc, #24]	@ (800802c <Motor_setup_LF+0x58>)
 8008014:	801a      	strh	r2, [r3, #0]

}
 8008016:	bf00      	nop
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	2000065c 	.word	0x2000065c
 8008024:	20000644 	.word	0x20000644
 8008028:	20000680 	.word	0x20000680
 800802c:	20000674 	.word	0x20000674

08008030 <Motor_setup_LB>:

void Motor_setup_LB(TIM_HandleTypeDef *_TIM_12_CH1 ,TIM_HandleTypeDef *_TIM_1  ,char* _IN_LB){
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
    //Motor_setup_LB(PWM_TIM ,Encoder_TIM  ,IN1_LB ,IN2_LB);

	LB_PWM = _TIM_12_CH1;
 800803c:	4a0f      	ldr	r2, [pc, #60]	@ (800807c <Motor_setup_LB+0x4c>)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6013      	str	r3, [r2, #0]
	EN_LB      = _TIM_1;
 8008042:	4a0f      	ldr	r2, [pc, #60]	@ (8008080 <Motor_setup_LB+0x50>)
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(LB_PWM, TIM_CHANNEL_1);       //PWM
 8008048:	4b0c      	ldr	r3, [pc, #48]	@ (800807c <Motor_setup_LB+0x4c>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2100      	movs	r1, #0
 800804e:	4618      	mov	r0, r3
 8008050:	f7fc ff48 	bl	8004ee4 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_LB , TIM_CHANNEL_ALL);     //Encoder
 8008054:	4b0a      	ldr	r3, [pc, #40]	@ (8008080 <Motor_setup_LB+0x50>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	213c      	movs	r1, #60	@ 0x3c
 800805a:	4618      	mov	r0, r3
 800805c:	f7fd f8b0 	bl	80051c0 <HAL_TIM_Encoder_Start>

	IN_LB = _IN_LB;
 8008060:	4a08      	ldr	r2, [pc, #32]	@ (8008084 <Motor_setup_LB+0x54>)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6013      	str	r3, [r2, #0]

	DutyCycle_LB_MAX = (LB_PWM->Init.Period);
 8008066:	4b05      	ldr	r3, [pc, #20]	@ (800807c <Motor_setup_LB+0x4c>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	b21a      	sxth	r2, r3
 800806e:	4b06      	ldr	r3, [pc, #24]	@ (8008088 <Motor_setup_LB+0x58>)
 8008070:	801a      	strh	r2, [r3, #0]

}
 8008072:	bf00      	nop
 8008074:	3710      	adds	r7, #16
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}
 800807a:	bf00      	nop
 800807c:	20000660 	.word	0x20000660
 8008080:	20000648 	.word	0x20000648
 8008084:	20000684 	.word	0x20000684
 8008088:	20000676 	.word	0x20000676

0800808c <Motor_setup_RF>:

void Motor_setup_RF(TIM_HandleTypeDef *_TIM_11_CH1  ,TIM_HandleTypeDef *_TIM_8  ,char* _IN_RF){
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
    //Motor_setup_RF(PWM_TIM ,Encoder_TIM   ,IN1_RF ,IN2_RF);

	RF_PWM = _TIM_11_CH1;
 8008098:	4a0f      	ldr	r2, [pc, #60]	@ (80080d8 <Motor_setup_RF+0x4c>)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6013      	str	r3, [r2, #0]
	EN_RF  = _TIM_8;
 800809e:	4a0f      	ldr	r2, [pc, #60]	@ (80080dc <Motor_setup_RF+0x50>)
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(RF_PWM, TIM_CHANNEL_1);           //PWM
 80080a4:	4b0c      	ldr	r3, [pc, #48]	@ (80080d8 <Motor_setup_RF+0x4c>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2100      	movs	r1, #0
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7fc ff1a 	bl	8004ee4 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_RF , TIM_CHANNEL_ALL);     //Encoder
 80080b0:	4b0a      	ldr	r3, [pc, #40]	@ (80080dc <Motor_setup_RF+0x50>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	213c      	movs	r1, #60	@ 0x3c
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fd f882 	bl	80051c0 <HAL_TIM_Encoder_Start>

	IN_RF = _IN_RF;
 80080bc:	4a08      	ldr	r2, [pc, #32]	@ (80080e0 <Motor_setup_RF+0x54>)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6013      	str	r3, [r2, #0]

	DutyCycle_RF_MAX = (RF_PWM->Init.Period);
 80080c2:	4b05      	ldr	r3, [pc, #20]	@ (80080d8 <Motor_setup_RF+0x4c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	b21a      	sxth	r2, r3
 80080ca:	4b06      	ldr	r3, [pc, #24]	@ (80080e4 <Motor_setup_RF+0x58>)
 80080cc:	801a      	strh	r2, [r3, #0]

}
 80080ce:	bf00      	nop
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	20000664 	.word	0x20000664
 80080dc:	2000064c 	.word	0x2000064c
 80080e0:	20000688 	.word	0x20000688
 80080e4:	20000678 	.word	0x20000678

080080e8 <Motor_setup_RB>:

void Motor_setup_RB(TIM_HandleTypeDef *_TIM_12_CH2   ,TIM_HandleTypeDef *_TIM_4 ,char* _IN_RB){
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	RB_PWM = _TIM_12_CH2;
 80080f4:	4a0f      	ldr	r2, [pc, #60]	@ (8008134 <Motor_setup_RB+0x4c>)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6013      	str	r3, [r2, #0]
	EN_RB  = _TIM_4;
 80080fa:	4a0f      	ldr	r2, [pc, #60]	@ (8008138 <Motor_setup_RB+0x50>)
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(RB_PWM, TIM_CHANNEL_2);            //PWM
 8008100:	4b0c      	ldr	r3, [pc, #48]	@ (8008134 <Motor_setup_RB+0x4c>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2104      	movs	r1, #4
 8008106:	4618      	mov	r0, r3
 8008108:	f7fc feec 	bl	8004ee4 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_RB , TIM_CHANNEL_ALL);      //Encoder
 800810c:	4b0a      	ldr	r3, [pc, #40]	@ (8008138 <Motor_setup_RB+0x50>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	213c      	movs	r1, #60	@ 0x3c
 8008112:	4618      	mov	r0, r3
 8008114:	f7fd f854 	bl	80051c0 <HAL_TIM_Encoder_Start>

	IN_RB = _IN_RB;
 8008118:	4a08      	ldr	r2, [pc, #32]	@ (800813c <Motor_setup_RB+0x54>)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6013      	str	r3, [r2, #0]

	DutyCycle_RB_MAX = (RB_PWM->Init.Period);
 800811e:	4b05      	ldr	r3, [pc, #20]	@ (8008134 <Motor_setup_RB+0x4c>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	b21a      	sxth	r2, r3
 8008126:	4b06      	ldr	r3, [pc, #24]	@ (8008140 <Motor_setup_RB+0x58>)
 8008128:	801a      	strh	r2, [r3, #0]

}
 800812a:	bf00      	nop
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	20000668 	.word	0x20000668
 8008138:	20000650 	.word	0x20000650
 800813c:	2000068c 	.word	0x2000068c
 8008140:	2000067a 	.word	0x2000067a

08008144 <Motor_setup_EXTRA1>:

void Motor_setup_EXTRA1(TIM_HandleTypeDef *_TIM_9_CH1  ,TIM_HandleTypeDef *_TIM_3  ,char* _IN_EXTRA1){
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	EXTRA1_PWM = _TIM_9_CH1;
 8008150:	4a0f      	ldr	r2, [pc, #60]	@ (8008190 <Motor_setup_EXTRA1+0x4c>)
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6013      	str	r3, [r2, #0]
	EN_X  = _TIM_3;
 8008156:	4a0f      	ldr	r2, [pc, #60]	@ (8008194 <Motor_setup_EXTRA1+0x50>)
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(EXTRA1_PWM, TIM_CHANNEL_1);            //PWM
 800815c:	4b0c      	ldr	r3, [pc, #48]	@ (8008190 <Motor_setup_EXTRA1+0x4c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2100      	movs	r1, #0
 8008162:	4618      	mov	r0, r3
 8008164:	f7fc febe 	bl	8004ee4 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_X , TIM_CHANNEL_ALL);      //Encoder
 8008168:	4b0a      	ldr	r3, [pc, #40]	@ (8008194 <Motor_setup_EXTRA1+0x50>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	213c      	movs	r1, #60	@ 0x3c
 800816e:	4618      	mov	r0, r3
 8008170:	f7fd f826 	bl	80051c0 <HAL_TIM_Encoder_Start>

	IN_EXTRA1 = _IN_EXTRA1;
 8008174:	4a08      	ldr	r2, [pc, #32]	@ (8008198 <Motor_setup_EXTRA1+0x54>)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6013      	str	r3, [r2, #0]

	DutyCycle_EXTRA1_MAX = (EXTRA1_PWM->Init.Period);
 800817a:	4b05      	ldr	r3, [pc, #20]	@ (8008190 <Motor_setup_EXTRA1+0x4c>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	b21a      	sxth	r2, r3
 8008182:	4b06      	ldr	r3, [pc, #24]	@ (800819c <Motor_setup_EXTRA1+0x58>)
 8008184:	801a      	strh	r2, [r3, #0]

}
 8008186:	bf00      	nop
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	2000066c 	.word	0x2000066c
 8008194:	20000654 	.word	0x20000654
 8008198:	20000690 	.word	0x20000690
 800819c:	2000067c 	.word	0x2000067c

080081a0 <Motor_setup_EXTRA2>:

void Motor_setup_EXTRA2(TIM_HandleTypeDef *_TIM_10_CH1  ,TIM_HandleTypeDef *_TIM_2 ,char* _IN_EXTRA2){
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	EXTRA2_PWM = _TIM_10_CH1;
 80081ac:	4a0f      	ldr	r2, [pc, #60]	@ (80081ec <Motor_setup_EXTRA2+0x4c>)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6013      	str	r3, [r2, #0]
	EN_Y  = _TIM_2;
 80081b2:	4a0f      	ldr	r2, [pc, #60]	@ (80081f0 <Motor_setup_EXTRA2+0x50>)
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(EXTRA2_PWM, TIM_CHANNEL_1);            //PWM
 80081b8:	4b0c      	ldr	r3, [pc, #48]	@ (80081ec <Motor_setup_EXTRA2+0x4c>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2100      	movs	r1, #0
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fc fe90 	bl	8004ee4 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_Y , TIM_CHANNEL_ALL);      //Encoder
 80081c4:	4b0a      	ldr	r3, [pc, #40]	@ (80081f0 <Motor_setup_EXTRA2+0x50>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	213c      	movs	r1, #60	@ 0x3c
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fc fff8 	bl	80051c0 <HAL_TIM_Encoder_Start>

	IN_EXTRA2 = _IN_EXTRA2;
 80081d0:	4a08      	ldr	r2, [pc, #32]	@ (80081f4 <Motor_setup_EXTRA2+0x54>)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6013      	str	r3, [r2, #0]

	DutyCycle_EXTRA2_MAX = (EXTRA2_PWM->Init.Period);
 80081d6:	4b05      	ldr	r3, [pc, #20]	@ (80081ec <Motor_setup_EXTRA2+0x4c>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	b21a      	sxth	r2, r3
 80081de:	4b06      	ldr	r3, [pc, #24]	@ (80081f8 <Motor_setup_EXTRA2+0x58>)
 80081e0:	801a      	strh	r2, [r3, #0]

}
 80081e2:	bf00      	nop
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20000670 	.word	0x20000670
 80081f0:	20000658 	.word	0x20000658
 80081f4:	20000694 	.word	0x20000694
 80081f8:	2000067e 	.word	0x2000067e

080081fc <getCount>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////PID///////////////////////////////////////////////////////////////

int16_t getCount(TIM_HandleTypeDef *TIM){
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
	int16_t count = ((int16_t)(TIM->Instance->CNT));
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800820a:	81fb      	strh	r3, [r7, #14]

	return count;
 800820c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3714      	adds	r7, #20
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <Setup_CPR>:

float _RPM[6] = {0 ,0 ,0 ,0 ,0 ,0}; //Speed   //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

uint16_t CPR = 68;

void Setup_CPR(uint16_t _CPR){
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	4603      	mov	r3, r0
 8008224:	80fb      	strh	r3, [r7, #6]
	CPR = _CPR;
 8008226:	4a04      	ldr	r2, [pc, #16]	@ (8008238 <Setup_CPR+0x1c>)
 8008228:	88fb      	ldrh	r3, [r7, #6]
 800822a:	8013      	strh	r3, [r2, #0]
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr
 8008238:	2000000c 	.word	0x2000000c

0800823c <Setup_Gear_Ratio>:

uint16_t Gear_Ratio = 27;

void Setup_Gear_Ratio(uint16_t _Gear_Ratio){
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	4603      	mov	r3, r0
 8008244:	80fb      	strh	r3, [r7, #6]
	Gear_Ratio = _Gear_Ratio;
 8008246:	4a04      	ldr	r2, [pc, #16]	@ (8008258 <Setup_Gear_Ratio+0x1c>)
 8008248:	88fb      	ldrh	r3, [r7, #6]
 800824a:	8013      	strh	r3, [r2, #0]
}
 800824c:	bf00      	nop
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	2000000e 	.word	0x2000000e

0800825c <Setup_frequency_Motor>:

void Setup_frequency_Motor(uint16_t freq){
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	4603      	mov	r3, r0
 8008264:	80fb      	strh	r3, [r7, #6]
	_freq = freq;
 8008266:	4a04      	ldr	r2, [pc, #16]	@ (8008278 <Setup_frequency_Motor+0x1c>)
 8008268:	88fb      	ldrh	r3, [r7, #6]
 800826a:	8013      	strh	r3, [r2, #0]
}
 800826c:	bf00      	nop
 800826e:	370c      	adds	r7, #12
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	2000000a 	.word	0x2000000a

0800827c <getRPM_TIM_Wheel>:
	float RPM__ = Rad_s * 9.549297f;

	return RPM__;
}

float getRPM_TIM_Wheel(TIM_HandleTypeDef *TIM ,uint8_t _Wheel){
 800827c:	b590      	push	{r4, r7, lr}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	460b      	mov	r3, r1
 8008286:	70fb      	strb	r3, [r7, #3]
	Present_Count[_Wheel] = (int16_t)getCount(TIM);
 8008288:	78fc      	ldrb	r4, [r7, #3]
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7ff ffb6 	bl	80081fc <getCount>
 8008290:	4603      	mov	r3, r0
 8008292:	461a      	mov	r2, r3
 8008294:	4b29      	ldr	r3, [pc, #164]	@ (800833c <getRPM_TIM_Wheel+0xc0>)
 8008296:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	// V = count/t = count*freq
	_RPM[_Wheel] = (float)((int16_t)(Present_Count[_Wheel] - Past_Count[_Wheel]) * _freq);
 800829a:	78fb      	ldrb	r3, [r7, #3]
 800829c:	4a27      	ldr	r2, [pc, #156]	@ (800833c <getRPM_TIM_Wheel+0xc0>)
 800829e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	78fb      	ldrb	r3, [r7, #3]
 80082a6:	4926      	ldr	r1, [pc, #152]	@ (8008340 <getRPM_TIM_Wheel+0xc4>)
 80082a8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	b21b      	sxth	r3, r3
 80082b4:	461a      	mov	r2, r3
 80082b6:	4b23      	ldr	r3, [pc, #140]	@ (8008344 <getRPM_TIM_Wheel+0xc8>)
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	fb03 f202 	mul.w	r2, r3, r2
 80082be:	78fb      	ldrb	r3, [r7, #3]
 80082c0:	ee07 2a90 	vmov	s15, r2
 80082c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082c8:	4a1f      	ldr	r2, [pc, #124]	@ (8008348 <getRPM_TIM_Wheel+0xcc>)
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	edc3 7a00 	vstr	s15, [r3]
	_RPM[_Wheel] = (float)(((_RPM[_Wheel]* 60.0f)/CPR )/Gear_Ratio);
 80082d2:	78fb      	ldrb	r3, [r7, #3]
 80082d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008348 <getRPM_TIM_Wheel+0xcc>)
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4413      	add	r3, r2
 80082da:	edd3 7a00 	vldr	s15, [r3]
 80082de:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800834c <getRPM_TIM_Wheel+0xd0>
 80082e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80082e6:	4b1a      	ldr	r3, [pc, #104]	@ (8008350 <getRPM_TIM_Wheel+0xd4>)
 80082e8:	881b      	ldrh	r3, [r3, #0]
 80082ea:	ee07 3a90 	vmov	s15, r3
 80082ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082f2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80082f6:	4b17      	ldr	r3, [pc, #92]	@ (8008354 <getRPM_TIM_Wheel+0xd8>)
 80082f8:	881b      	ldrh	r3, [r3, #0]
 80082fa:	ee07 3a90 	vmov	s15, r3
 80082fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008302:	78fb      	ldrb	r3, [r7, #3]
 8008304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008308:	4a0f      	ldr	r2, [pc, #60]	@ (8008348 <getRPM_TIM_Wheel+0xcc>)
 800830a:	009b      	lsls	r3, r3, #2
 800830c:	4413      	add	r3, r2
 800830e:	edc3 7a00 	vstr	s15, [r3]

	Past_Count[_Wheel] = Present_Count[_Wheel];
 8008312:	78fa      	ldrb	r2, [r7, #3]
 8008314:	78fb      	ldrb	r3, [r7, #3]
 8008316:	4909      	ldr	r1, [pc, #36]	@ (800833c <getRPM_TIM_Wheel+0xc0>)
 8008318:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800831c:	4a08      	ldr	r2, [pc, #32]	@ (8008340 <getRPM_TIM_Wheel+0xc4>)
 800831e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return _RPM[_Wheel];
 8008322:	78fb      	ldrb	r3, [r7, #3]
 8008324:	4a08      	ldr	r2, [pc, #32]	@ (8008348 <getRPM_TIM_Wheel+0xcc>)
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4413      	add	r3, r2
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	ee07 3a90 	vmov	s15, r3
}
 8008330:	eeb0 0a67 	vmov.f32	s0, s15
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	bd90      	pop	{r4, r7, pc}
 800833a:	bf00      	nop
 800833c:	20000698 	.word	0x20000698
 8008340:	200006a4 	.word	0x200006a4
 8008344:	2000000a 	.word	0x2000000a
 8008348:	200006b0 	.word	0x200006b0
 800834c:	42700000 	.word	0x42700000
 8008350:	2000000c 	.word	0x2000000c
 8008354:	2000000e 	.word	0x2000000e

08008358 <Setup_PID_LF>:

float min_speed[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2
float max_speed[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2


void Setup_PID_LF(float Kp_LF ,float Ki_LF ,float Kd_LF ,float min_speed_LF ,float max_speed_LF){
 8008358:	b480      	push	{r7}
 800835a:	b087      	sub	sp, #28
 800835c:	af00      	add	r7, sp, #0
 800835e:	ed87 0a05 	vstr	s0, [r7, #20]
 8008362:	edc7 0a04 	vstr	s1, [r7, #16]
 8008366:	ed87 1a03 	vstr	s2, [r7, #12]
 800836a:	edc7 1a02 	vstr	s3, [r7, #8]
 800836e:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[0] = Kp_LF;
 8008372:	4a0a      	ldr	r2, [pc, #40]	@ (800839c <Setup_PID_LF+0x44>)
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	6013      	str	r3, [r2, #0]
	Ki_Wheel[0] = Ki_LF;
 8008378:	4a09      	ldr	r2, [pc, #36]	@ (80083a0 <Setup_PID_LF+0x48>)
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	6013      	str	r3, [r2, #0]
	Kd_Wheel[0] = Kd_LF;
 800837e:	4a09      	ldr	r2, [pc, #36]	@ (80083a4 <Setup_PID_LF+0x4c>)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6013      	str	r3, [r2, #0]

	min_speed[0] = min_speed_LF;
 8008384:	4a08      	ldr	r2, [pc, #32]	@ (80083a8 <Setup_PID_LF+0x50>)
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	6013      	str	r3, [r2, #0]
	max_speed[0] = max_speed_LF;
 800838a:	4a08      	ldr	r2, [pc, #32]	@ (80083ac <Setup_PID_LF+0x54>)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6013      	str	r3, [r2, #0]
}
 8008390:	bf00      	nop
 8008392:	371c      	adds	r7, #28
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	200006c8 	.word	0x200006c8
 80083a0:	200006e0 	.word	0x200006e0
 80083a4:	200006f8 	.word	0x200006f8
 80083a8:	20000710 	.word	0x20000710
 80083ac:	20000728 	.word	0x20000728

080083b0 <Setup_PID_LB>:

void Setup_PID_LB(float Kp_LB ,float Ki_LB ,float Kd_LB ,float min_speed_LB ,float max_speed_LB){
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	ed87 0a05 	vstr	s0, [r7, #20]
 80083ba:	edc7 0a04 	vstr	s1, [r7, #16]
 80083be:	ed87 1a03 	vstr	s2, [r7, #12]
 80083c2:	edc7 1a02 	vstr	s3, [r7, #8]
 80083c6:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[1] = Kp_LB;
 80083ca:	4a0a      	ldr	r2, [pc, #40]	@ (80083f4 <Setup_PID_LB+0x44>)
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	6053      	str	r3, [r2, #4]
	Ki_Wheel[1] = Ki_LB;
 80083d0:	4a09      	ldr	r2, [pc, #36]	@ (80083f8 <Setup_PID_LB+0x48>)
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	6053      	str	r3, [r2, #4]
	Kd_Wheel[1] = Kd_LB;
 80083d6:	4a09      	ldr	r2, [pc, #36]	@ (80083fc <Setup_PID_LB+0x4c>)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6053      	str	r3, [r2, #4]

	min_speed[1] = min_speed_LB;
 80083dc:	4a08      	ldr	r2, [pc, #32]	@ (8008400 <Setup_PID_LB+0x50>)
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	6053      	str	r3, [r2, #4]
	max_speed[1] = max_speed_LB;
 80083e2:	4a08      	ldr	r2, [pc, #32]	@ (8008404 <Setup_PID_LB+0x54>)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6053      	str	r3, [r2, #4]
}
 80083e8:	bf00      	nop
 80083ea:	371c      	adds	r7, #28
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	200006c8 	.word	0x200006c8
 80083f8:	200006e0 	.word	0x200006e0
 80083fc:	200006f8 	.word	0x200006f8
 8008400:	20000710 	.word	0x20000710
 8008404:	20000728 	.word	0x20000728

08008408 <Setup_PID_RF>:

void Setup_PID_RF(float Kp_RF ,float Ki_RF ,float Kd_RF ,float min_speed_RF ,float max_speed_RF){
 8008408:	b480      	push	{r7}
 800840a:	b087      	sub	sp, #28
 800840c:	af00      	add	r7, sp, #0
 800840e:	ed87 0a05 	vstr	s0, [r7, #20]
 8008412:	edc7 0a04 	vstr	s1, [r7, #16]
 8008416:	ed87 1a03 	vstr	s2, [r7, #12]
 800841a:	edc7 1a02 	vstr	s3, [r7, #8]
 800841e:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[2] = Kp_RF;
 8008422:	4a0a      	ldr	r2, [pc, #40]	@ (800844c <Setup_PID_RF+0x44>)
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	6093      	str	r3, [r2, #8]
	Ki_Wheel[2] = Ki_RF;
 8008428:	4a09      	ldr	r2, [pc, #36]	@ (8008450 <Setup_PID_RF+0x48>)
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	6093      	str	r3, [r2, #8]
	Kd_Wheel[2] = Kd_RF;
 800842e:	4a09      	ldr	r2, [pc, #36]	@ (8008454 <Setup_PID_RF+0x4c>)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6093      	str	r3, [r2, #8]

	min_speed[2] = min_speed_RF;
 8008434:	4a08      	ldr	r2, [pc, #32]	@ (8008458 <Setup_PID_RF+0x50>)
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	6093      	str	r3, [r2, #8]
	max_speed[2] = max_speed_RF;
 800843a:	4a08      	ldr	r2, [pc, #32]	@ (800845c <Setup_PID_RF+0x54>)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6093      	str	r3, [r2, #8]
}
 8008440:	bf00      	nop
 8008442:	371c      	adds	r7, #28
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	200006c8 	.word	0x200006c8
 8008450:	200006e0 	.word	0x200006e0
 8008454:	200006f8 	.word	0x200006f8
 8008458:	20000710 	.word	0x20000710
 800845c:	20000728 	.word	0x20000728

08008460 <Setup_PID_RB>:

void Setup_PID_RB(float Kp_RB ,float Ki_RB ,float Kd_RB ,float min_speed_RB ,float max_speed_RB){
 8008460:	b480      	push	{r7}
 8008462:	b087      	sub	sp, #28
 8008464:	af00      	add	r7, sp, #0
 8008466:	ed87 0a05 	vstr	s0, [r7, #20]
 800846a:	edc7 0a04 	vstr	s1, [r7, #16]
 800846e:	ed87 1a03 	vstr	s2, [r7, #12]
 8008472:	edc7 1a02 	vstr	s3, [r7, #8]
 8008476:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[3] = Kp_RB;
 800847a:	4a0a      	ldr	r2, [pc, #40]	@ (80084a4 <Setup_PID_RB+0x44>)
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	60d3      	str	r3, [r2, #12]
	Ki_Wheel[3] = Ki_RB;
 8008480:	4a09      	ldr	r2, [pc, #36]	@ (80084a8 <Setup_PID_RB+0x48>)
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	60d3      	str	r3, [r2, #12]
	Kd_Wheel[3] = Kd_RB;
 8008486:	4a09      	ldr	r2, [pc, #36]	@ (80084ac <Setup_PID_RB+0x4c>)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	60d3      	str	r3, [r2, #12]

	min_speed[3] = min_speed_RB;
 800848c:	4a08      	ldr	r2, [pc, #32]	@ (80084b0 <Setup_PID_RB+0x50>)
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	60d3      	str	r3, [r2, #12]
	max_speed[3] = max_speed_RB;
 8008492:	4a08      	ldr	r2, [pc, #32]	@ (80084b4 <Setup_PID_RB+0x54>)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	60d3      	str	r3, [r2, #12]
}
 8008498:	bf00      	nop
 800849a:	371c      	adds	r7, #28
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr
 80084a4:	200006c8 	.word	0x200006c8
 80084a8:	200006e0 	.word	0x200006e0
 80084ac:	200006f8 	.word	0x200006f8
 80084b0:	20000710 	.word	0x20000710
 80084b4:	20000728 	.word	0x20000728

080084b8 <PID_Speed>:

float Past_Error[6]   = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float Output_PID[6]    = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float PID_Speed(float _Setpoint ,int16_t RPM ,uint8_t _Wheel){
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	ed87 0a01 	vstr	s0, [r7, #4]
 80084c2:	4603      	mov	r3, r0
 80084c4:	460a      	mov	r2, r1
 80084c6:	807b      	strh	r3, [r7, #2]
 80084c8:	4613      	mov	r3, r2
 80084ca:	707b      	strb	r3, [r7, #1]
//	  case 4 : getRPM_TIM_Wheel(EN_X ,EXTRA1 ); break;
//	  case 5 : getRPM_TIM_Wheel(EN_Y ,EXTRA2 ); break;
//	}

//	Error_Speed[_Wheel] = _Setpoint-_RPM[_Wheel];
	Error_Speed[_Wheel] = _Setpoint-RPM;
 80084cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80084d0:	ee07 3a90 	vmov	s15, r3
 80084d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084d8:	787b      	ldrb	r3, [r7, #1]
 80084da:	ed97 7a01 	vldr	s14, [r7, #4]
 80084de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084e2:	4a41      	ldr	r2, [pc, #260]	@ (80085e8 <PID_Speed+0x130>)
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	4413      	add	r3, r2
 80084e8:	edc3 7a00 	vstr	s15, [r3]

	Proportional[_Wheel] = Error_Speed[_Wheel];
 80084ec:	787a      	ldrb	r2, [r7, #1]
 80084ee:	787b      	ldrb	r3, [r7, #1]
 80084f0:	493d      	ldr	r1, [pc, #244]	@ (80085e8 <PID_Speed+0x130>)
 80084f2:	0092      	lsls	r2, r2, #2
 80084f4:	440a      	add	r2, r1
 80084f6:	6812      	ldr	r2, [r2, #0]
 80084f8:	493c      	ldr	r1, [pc, #240]	@ (80085ec <PID_Speed+0x134>)
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	440b      	add	r3, r1
 80084fe:	601a      	str	r2, [r3, #0]
	Integnator[_Wheel]   += Error_Speed[_Wheel];
 8008500:	787b      	ldrb	r3, [r7, #1]
 8008502:	4a3b      	ldr	r2, [pc, #236]	@ (80085f0 <PID_Speed+0x138>)
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4413      	add	r3, r2
 8008508:	ed93 7a00 	vldr	s14, [r3]
 800850c:	787b      	ldrb	r3, [r7, #1]
 800850e:	4a36      	ldr	r2, [pc, #216]	@ (80085e8 <PID_Speed+0x130>)
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	edd3 7a00 	vldr	s15, [r3]
 8008518:	787b      	ldrb	r3, [r7, #1]
 800851a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800851e:	4a34      	ldr	r2, [pc, #208]	@ (80085f0 <PID_Speed+0x138>)
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	4413      	add	r3, r2
 8008524:	edc3 7a00 	vstr	s15, [r3]
	Derivative[_Wheel]   = Error_Speed[_Wheel] - Past_Error[_Wheel];
 8008528:	787b      	ldrb	r3, [r7, #1]
 800852a:	4a2f      	ldr	r2, [pc, #188]	@ (80085e8 <PID_Speed+0x130>)
 800852c:	009b      	lsls	r3, r3, #2
 800852e:	4413      	add	r3, r2
 8008530:	ed93 7a00 	vldr	s14, [r3]
 8008534:	787b      	ldrb	r3, [r7, #1]
 8008536:	4a2f      	ldr	r2, [pc, #188]	@ (80085f4 <PID_Speed+0x13c>)
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	4413      	add	r3, r2
 800853c:	edd3 7a00 	vldr	s15, [r3]
 8008540:	787b      	ldrb	r3, [r7, #1]
 8008542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008546:	4a2c      	ldr	r2, [pc, #176]	@ (80085f8 <PID_Speed+0x140>)
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4413      	add	r3, r2
 800854c:	edc3 7a00 	vstr	s15, [r3]

	Past_Error[_Wheel] = Error_Speed[_Wheel];
 8008550:	787a      	ldrb	r2, [r7, #1]
 8008552:	787b      	ldrb	r3, [r7, #1]
 8008554:	4924      	ldr	r1, [pc, #144]	@ (80085e8 <PID_Speed+0x130>)
 8008556:	0092      	lsls	r2, r2, #2
 8008558:	440a      	add	r2, r1
 800855a:	6812      	ldr	r2, [r2, #0]
 800855c:	4925      	ldr	r1, [pc, #148]	@ (80085f4 <PID_Speed+0x13c>)
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	440b      	add	r3, r1
 8008562:	601a      	str	r2, [r3, #0]

	Output_PID[_Wheel]  = (float)((Proportional[_Wheel]*Kp_Wheel[_Wheel]) + (Integnator[_Wheel]*Ki_Wheel[_Wheel]) + (Derivative[_Wheel]*Kd_Wheel[_Wheel]));
 8008564:	787b      	ldrb	r3, [r7, #1]
 8008566:	4a21      	ldr	r2, [pc, #132]	@ (80085ec <PID_Speed+0x134>)
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	ed93 7a00 	vldr	s14, [r3]
 8008570:	787b      	ldrb	r3, [r7, #1]
 8008572:	4a22      	ldr	r2, [pc, #136]	@ (80085fc <PID_Speed+0x144>)
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4413      	add	r3, r2
 8008578:	edd3 7a00 	vldr	s15, [r3]
 800857c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008580:	787b      	ldrb	r3, [r7, #1]
 8008582:	4a1b      	ldr	r2, [pc, #108]	@ (80085f0 <PID_Speed+0x138>)
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	4413      	add	r3, r2
 8008588:	edd3 6a00 	vldr	s13, [r3]
 800858c:	787b      	ldrb	r3, [r7, #1]
 800858e:	4a1c      	ldr	r2, [pc, #112]	@ (8008600 <PID_Speed+0x148>)
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4413      	add	r3, r2
 8008594:	edd3 7a00 	vldr	s15, [r3]
 8008598:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800859c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80085a0:	787b      	ldrb	r3, [r7, #1]
 80085a2:	4a15      	ldr	r2, [pc, #84]	@ (80085f8 <PID_Speed+0x140>)
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	edd3 6a00 	vldr	s13, [r3]
 80085ac:	787b      	ldrb	r3, [r7, #1]
 80085ae:	4a15      	ldr	r2, [pc, #84]	@ (8008604 <PID_Speed+0x14c>)
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	edd3 7a00 	vldr	s15, [r3]
 80085b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80085bc:	787b      	ldrb	r3, [r7, #1]
 80085be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085c2:	4a11      	ldr	r2, [pc, #68]	@ (8008608 <PID_Speed+0x150>)
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	4413      	add	r3, r2
 80085c8:	edc3 7a00 	vstr	s15, [r3]


	return Output_PID[_Wheel];
 80085cc:	787b      	ldrb	r3, [r7, #1]
 80085ce:	4a0e      	ldr	r2, [pc, #56]	@ (8008608 <PID_Speed+0x150>)
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	4413      	add	r3, r2
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	ee07 3a90 	vmov	s15, r3
}
 80085da:	eeb0 0a67 	vmov.f32	s0, s15
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr
 80085e8:	20000740 	.word	0x20000740
 80085ec:	20000758 	.word	0x20000758
 80085f0:	20000770 	.word	0x20000770
 80085f4:	200007a0 	.word	0x200007a0
 80085f8:	20000788 	.word	0x20000788
 80085fc:	200006c8 	.word	0x200006c8
 8008600:	200006e0 	.word	0x200006e0
 8008604:	200006f8 	.word	0x200006f8
 8008608:	200007b8 	.word	0x200007b8

0800860c <Motor_DutyCycle_LF>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////Motor////////////////////////////////////////////////////////////////////
void Motor_DutyCycle_LF(int16_t DutyCycle_LF){
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
 8008612:	4603      	mov	r3, r0
 8008614:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_LF > DutyCycle_LF_MAX) {
 8008616:	4b26      	ldr	r3, [pc, #152]	@ (80086b0 <Motor_DutyCycle_LF+0xa4>)
 8008618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800861c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008620:	429a      	cmp	r2, r3
 8008622:	dd03      	ble.n	800862c <Motor_DutyCycle_LF+0x20>
	    DutyCycle_LF = DutyCycle_LF_MAX;
 8008624:	4b22      	ldr	r3, [pc, #136]	@ (80086b0 <Motor_DutyCycle_LF+0xa4>)
 8008626:	881b      	ldrh	r3, [r3, #0]
 8008628:	80fb      	strh	r3, [r7, #6]
 800862a:	e00e      	b.n	800864a <Motor_DutyCycle_LF+0x3e>
	} else if (DutyCycle_LF < -DutyCycle_LF_MAX) {
 800862c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008630:	4b1f      	ldr	r3, [pc, #124]	@ (80086b0 <Motor_DutyCycle_LF+0xa4>)
 8008632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008636:	425b      	negs	r3, r3
 8008638:	429a      	cmp	r2, r3
 800863a:	da06      	bge.n	800864a <Motor_DutyCycle_LF+0x3e>
		DutyCycle_LF = -DutyCycle_LF_MAX;
 800863c:	4b1c      	ldr	r3, [pc, #112]	@ (80086b0 <Motor_DutyCycle_LF+0xa4>)
 800863e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008642:	b29b      	uxth	r3, r3
 8008644:	425b      	negs	r3, r3
 8008646:	b29b      	uxth	r3, r3
 8008648:	80fb      	strh	r3, [r7, #6]
	}

	LF_PWM->Instance->CCR1 = (DutyCycle_LF > 0) ? (int16_t)DutyCycle_LF : (DutyCycle_LF_MAX + (int16_t)DutyCycle_LF);
 800864a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800864e:	2b00      	cmp	r3, #0
 8008650:	dd02      	ble.n	8008658 <Motor_DutyCycle_LF+0x4c>
 8008652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008656:	e006      	b.n	8008666 <Motor_DutyCycle_LF+0x5a>
 8008658:	4b15      	ldr	r3, [pc, #84]	@ (80086b0 <Motor_DutyCycle_LF+0xa4>)
 800865a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800865e:	461a      	mov	r2, r3
 8008660:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008664:	4413      	add	r3, r2
 8008666:	4a13      	ldr	r2, [pc, #76]	@ (80086b4 <Motor_DutyCycle_LF+0xa8>)
 8008668:	6812      	ldr	r2, [r2, #0]
 800866a:	6812      	ldr	r2, [r2, #0]
 800866c:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_LF , (DutyCycle_LF < 0) ? 1 : 0);
 800866e:	4b12      	ldr	r3, [pc, #72]	@ (80086b8 <Motor_DutyCycle_LF+0xac>)
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008676:	13db      	asrs	r3, r3, #15
 8008678:	b21b      	sxth	r3, r3
 800867a:	b2db      	uxtb	r3, r3
 800867c:	f003 0301 	and.w	r3, r3, #1
 8008680:	b2db      	uxtb	r3, r3
 8008682:	4619      	mov	r1, r3
 8008684:	4610      	mov	r0, r2
 8008686:	f000 faf1 	bl	8008c6c <digitalWrite>

	if(DutyCycle_LF == 0){
 800868a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10a      	bne.n	80086a8 <Motor_DutyCycle_LF+0x9c>
	   LF_PWM->Instance->CCR1 = 0;
 8008692:	4b08      	ldr	r3, [pc, #32]	@ (80086b4 <Motor_DutyCycle_LF+0xa8>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2200      	movs	r2, #0
 800869a:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_LF ,0);
 800869c:	4b06      	ldr	r3, [pc, #24]	@ (80086b8 <Motor_DutyCycle_LF+0xac>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2100      	movs	r1, #0
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 fae2 	bl	8008c6c <digitalWrite>
	}
}
 80086a8:	bf00      	nop
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	20000674 	.word	0x20000674
 80086b4:	2000065c 	.word	0x2000065c
 80086b8:	20000680 	.word	0x20000680

080086bc <Motor_DutyCycle_LB>:

void Motor_DutyCycle_LB(int16_t DutyCycle_LB){
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	4603      	mov	r3, r0
 80086c4:	80fb      	strh	r3, [r7, #6]
	DutyCycle_LB = -DutyCycle_LB;
 80086c6:	88fb      	ldrh	r3, [r7, #6]
 80086c8:	425b      	negs	r3, r3
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_LB > DutyCycle_LB_MAX) {
 80086ce:	4b26      	ldr	r3, [pc, #152]	@ (8008768 <Motor_DutyCycle_LB+0xac>)
 80086d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80086d8:	429a      	cmp	r2, r3
 80086da:	dd03      	ble.n	80086e4 <Motor_DutyCycle_LB+0x28>
		DutyCycle_LB = DutyCycle_LB_MAX;
 80086dc:	4b22      	ldr	r3, [pc, #136]	@ (8008768 <Motor_DutyCycle_LB+0xac>)
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	80fb      	strh	r3, [r7, #6]
 80086e2:	e00e      	b.n	8008702 <Motor_DutyCycle_LB+0x46>
	} else if (DutyCycle_LB < -DutyCycle_LB_MAX) {
 80086e4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80086e8:	4b1f      	ldr	r3, [pc, #124]	@ (8008768 <Motor_DutyCycle_LB+0xac>)
 80086ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086ee:	425b      	negs	r3, r3
 80086f0:	429a      	cmp	r2, r3
 80086f2:	da06      	bge.n	8008702 <Motor_DutyCycle_LB+0x46>
		DutyCycle_LB = -DutyCycle_LB_MAX;
 80086f4:	4b1c      	ldr	r3, [pc, #112]	@ (8008768 <Motor_DutyCycle_LB+0xac>)
 80086f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	425b      	negs	r3, r3
 80086fe:	b29b      	uxth	r3, r3
 8008700:	80fb      	strh	r3, [r7, #6]
	}

	LB_PWM->Instance->CCR1 = (DutyCycle_LB > 0) ? (int16_t)DutyCycle_LB : (DutyCycle_LB_MAX + (int16_t)DutyCycle_LB);
 8008702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008706:	2b00      	cmp	r3, #0
 8008708:	dd02      	ble.n	8008710 <Motor_DutyCycle_LB+0x54>
 800870a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800870e:	e006      	b.n	800871e <Motor_DutyCycle_LB+0x62>
 8008710:	4b15      	ldr	r3, [pc, #84]	@ (8008768 <Motor_DutyCycle_LB+0xac>)
 8008712:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008716:	461a      	mov	r2, r3
 8008718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800871c:	4413      	add	r3, r2
 800871e:	4a13      	ldr	r2, [pc, #76]	@ (800876c <Motor_DutyCycle_LB+0xb0>)
 8008720:	6812      	ldr	r2, [r2, #0]
 8008722:	6812      	ldr	r2, [r2, #0]
 8008724:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_LB , (DutyCycle_LB < 0) ? 1 : 0);
 8008726:	4b12      	ldr	r3, [pc, #72]	@ (8008770 <Motor_DutyCycle_LB+0xb4>)
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800872e:	13db      	asrs	r3, r3, #15
 8008730:	b21b      	sxth	r3, r3
 8008732:	b2db      	uxtb	r3, r3
 8008734:	f003 0301 	and.w	r3, r3, #1
 8008738:	b2db      	uxtb	r3, r3
 800873a:	4619      	mov	r1, r3
 800873c:	4610      	mov	r0, r2
 800873e:	f000 fa95 	bl	8008c6c <digitalWrite>

	if(DutyCycle_LB == 0){
 8008742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10a      	bne.n	8008760 <Motor_DutyCycle_LB+0xa4>
	   LB_PWM->Instance->CCR1 = 0;
 800874a:	4b08      	ldr	r3, [pc, #32]	@ (800876c <Motor_DutyCycle_LB+0xb0>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2200      	movs	r2, #0
 8008752:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_LB ,0);
 8008754:	4b06      	ldr	r3, [pc, #24]	@ (8008770 <Motor_DutyCycle_LB+0xb4>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2100      	movs	r1, #0
 800875a:	4618      	mov	r0, r3
 800875c:	f000 fa86 	bl	8008c6c <digitalWrite>
	}
}
 8008760:	bf00      	nop
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	20000676 	.word	0x20000676
 800876c:	20000660 	.word	0x20000660
 8008770:	20000684 	.word	0x20000684

08008774 <Motor_DutyCycle_RF>:

void Motor_DutyCycle_RF(int16_t DutyCycle_RF){
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	4603      	mov	r3, r0
 800877c:	80fb      	strh	r3, [r7, #6]
	DutyCycle_RF = -DutyCycle_RF;
 800877e:	88fb      	ldrh	r3, [r7, #6]
 8008780:	425b      	negs	r3, r3
 8008782:	b29b      	uxth	r3, r3
 8008784:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_RF > DutyCycle_RF_MAX) {
 8008786:	4b26      	ldr	r3, [pc, #152]	@ (8008820 <Motor_DutyCycle_RF+0xac>)
 8008788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800878c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008790:	429a      	cmp	r2, r3
 8008792:	dd03      	ble.n	800879c <Motor_DutyCycle_RF+0x28>
		DutyCycle_RF = DutyCycle_RF_MAX;
 8008794:	4b22      	ldr	r3, [pc, #136]	@ (8008820 <Motor_DutyCycle_RF+0xac>)
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	80fb      	strh	r3, [r7, #6]
 800879a:	e00e      	b.n	80087ba <Motor_DutyCycle_RF+0x46>
	} else if (DutyCycle_RF < -DutyCycle_RF_MAX) {
 800879c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80087a0:	4b1f      	ldr	r3, [pc, #124]	@ (8008820 <Motor_DutyCycle_RF+0xac>)
 80087a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087a6:	425b      	negs	r3, r3
 80087a8:	429a      	cmp	r2, r3
 80087aa:	da06      	bge.n	80087ba <Motor_DutyCycle_RF+0x46>
		DutyCycle_RF = -DutyCycle_RF_MAX;
 80087ac:	4b1c      	ldr	r3, [pc, #112]	@ (8008820 <Motor_DutyCycle_RF+0xac>)
 80087ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	425b      	negs	r3, r3
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	80fb      	strh	r3, [r7, #6]
	}

	RF_PWM->Instance->CCR1 = (DutyCycle_RF > 0) ? (int16_t)DutyCycle_RF : (DutyCycle_RF_MAX + (int16_t)DutyCycle_RF);
 80087ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	dd02      	ble.n	80087c8 <Motor_DutyCycle_RF+0x54>
 80087c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80087c6:	e006      	b.n	80087d6 <Motor_DutyCycle_RF+0x62>
 80087c8:	4b15      	ldr	r3, [pc, #84]	@ (8008820 <Motor_DutyCycle_RF+0xac>)
 80087ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087ce:	461a      	mov	r2, r3
 80087d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80087d4:	4413      	add	r3, r2
 80087d6:	4a13      	ldr	r2, [pc, #76]	@ (8008824 <Motor_DutyCycle_RF+0xb0>)
 80087d8:	6812      	ldr	r2, [r2, #0]
 80087da:	6812      	ldr	r2, [r2, #0]
 80087dc:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_RF , (DutyCycle_RF < 0) ? 1 : 0);
 80087de:	4b12      	ldr	r3, [pc, #72]	@ (8008828 <Motor_DutyCycle_RF+0xb4>)
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80087e6:	13db      	asrs	r3, r3, #15
 80087e8:	b21b      	sxth	r3, r3
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	4619      	mov	r1, r3
 80087f4:	4610      	mov	r0, r2
 80087f6:	f000 fa39 	bl	8008c6c <digitalWrite>

	if(DutyCycle_RF == 0){
 80087fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10a      	bne.n	8008818 <Motor_DutyCycle_RF+0xa4>
	   RF_PWM->Instance->CCR1 = 0;
 8008802:	4b08      	ldr	r3, [pc, #32]	@ (8008824 <Motor_DutyCycle_RF+0xb0>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2200      	movs	r2, #0
 800880a:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_RF ,0);
 800880c:	4b06      	ldr	r3, [pc, #24]	@ (8008828 <Motor_DutyCycle_RF+0xb4>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2100      	movs	r1, #0
 8008812:	4618      	mov	r0, r3
 8008814:	f000 fa2a 	bl	8008c6c <digitalWrite>
	}
}
 8008818:	bf00      	nop
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	20000678 	.word	0x20000678
 8008824:	20000664 	.word	0x20000664
 8008828:	20000688 	.word	0x20000688

0800882c <Motor_DutyCycle_RB>:

void Motor_DutyCycle_RB(int16_t DutyCycle_RB){
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	4603      	mov	r3, r0
 8008834:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_RB > DutyCycle_RB_MAX) {
 8008836:	4b26      	ldr	r3, [pc, #152]	@ (80088d0 <Motor_DutyCycle_RB+0xa4>)
 8008838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800883c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008840:	429a      	cmp	r2, r3
 8008842:	dd03      	ble.n	800884c <Motor_DutyCycle_RB+0x20>
		DutyCycle_RB = DutyCycle_RB_MAX;
 8008844:	4b22      	ldr	r3, [pc, #136]	@ (80088d0 <Motor_DutyCycle_RB+0xa4>)
 8008846:	881b      	ldrh	r3, [r3, #0]
 8008848:	80fb      	strh	r3, [r7, #6]
 800884a:	e00e      	b.n	800886a <Motor_DutyCycle_RB+0x3e>
	} else if (DutyCycle_RB < -DutyCycle_RB_MAX) {
 800884c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008850:	4b1f      	ldr	r3, [pc, #124]	@ (80088d0 <Motor_DutyCycle_RB+0xa4>)
 8008852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008856:	425b      	negs	r3, r3
 8008858:	429a      	cmp	r2, r3
 800885a:	da06      	bge.n	800886a <Motor_DutyCycle_RB+0x3e>
	    DutyCycle_RB = -DutyCycle_RB_MAX;
 800885c:	4b1c      	ldr	r3, [pc, #112]	@ (80088d0 <Motor_DutyCycle_RB+0xa4>)
 800885e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008862:	b29b      	uxth	r3, r3
 8008864:	425b      	negs	r3, r3
 8008866:	b29b      	uxth	r3, r3
 8008868:	80fb      	strh	r3, [r7, #6]
	}

	RB_PWM->Instance->CCR2 = (DutyCycle_RB > 0) ? (int16_t)DutyCycle_RB : (DutyCycle_RB_MAX + (int16_t)DutyCycle_RB);
 800886a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800886e:	2b00      	cmp	r3, #0
 8008870:	dd02      	ble.n	8008878 <Motor_DutyCycle_RB+0x4c>
 8008872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008876:	e006      	b.n	8008886 <Motor_DutyCycle_RB+0x5a>
 8008878:	4b15      	ldr	r3, [pc, #84]	@ (80088d0 <Motor_DutyCycle_RB+0xa4>)
 800887a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800887e:	461a      	mov	r2, r3
 8008880:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008884:	4413      	add	r3, r2
 8008886:	4a13      	ldr	r2, [pc, #76]	@ (80088d4 <Motor_DutyCycle_RB+0xa8>)
 8008888:	6812      	ldr	r2, [r2, #0]
 800888a:	6812      	ldr	r2, [r2, #0]
 800888c:	6393      	str	r3, [r2, #56]	@ 0x38

	digitalWrite(IN_RB , (DutyCycle_RB < 0) ? 1 : 0);
 800888e:	4b12      	ldr	r3, [pc, #72]	@ (80088d8 <Motor_DutyCycle_RB+0xac>)
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008896:	13db      	asrs	r3, r3, #15
 8008898:	b21b      	sxth	r3, r3
 800889a:	b2db      	uxtb	r3, r3
 800889c:	f003 0301 	and.w	r3, r3, #1
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	4619      	mov	r1, r3
 80088a4:	4610      	mov	r0, r2
 80088a6:	f000 f9e1 	bl	8008c6c <digitalWrite>

	if(DutyCycle_RB == 0){
 80088aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d10a      	bne.n	80088c8 <Motor_DutyCycle_RB+0x9c>
	    RB_PWM->Instance->CCR2 = 0;
 80088b2:	4b08      	ldr	r3, [pc, #32]	@ (80088d4 <Motor_DutyCycle_RB+0xa8>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2200      	movs	r2, #0
 80088ba:	639a      	str	r2, [r3, #56]	@ 0x38
		digitalWrite(IN_RB ,0);
 80088bc:	4b06      	ldr	r3, [pc, #24]	@ (80088d8 <Motor_DutyCycle_RB+0xac>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2100      	movs	r1, #0
 80088c2:	4618      	mov	r0, r3
 80088c4:	f000 f9d2 	bl	8008c6c <digitalWrite>
	}
}
 80088c8:	bf00      	nop
 80088ca:	3708      	adds	r7, #8
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	2000067a 	.word	0x2000067a
 80088d4:	20000668 	.word	0x20000668
 80088d8:	2000068c 	.word	0x2000068c

080088dc <Motor_Speed_LF>:
	}
}

int16_t Duty_Cycle[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float Motor_Speed_LF(int16_t RPM_INPUT ,float RPM_LF){
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	4603      	mov	r3, r0
 80088e4:	ed87 0a00 	vstr	s0, [r7]
 80088e8:	80fb      	strh	r3, [r7, #6]
	if (RPM_LF > max_speed[0]) {
 80088ea:	4b30      	ldr	r3, [pc, #192]	@ (80089ac <Motor_Speed_LF+0xd0>)
 80088ec:	edd3 7a00 	vldr	s15, [r3]
 80088f0:	ed97 7a00 	vldr	s14, [r7]
 80088f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088fc:	dd03      	ble.n	8008906 <Motor_Speed_LF+0x2a>
	   RPM_LF = max_speed[0];
 80088fe:	4b2b      	ldr	r3, [pc, #172]	@ (80089ac <Motor_Speed_LF+0xd0>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	603b      	str	r3, [r7, #0]
 8008904:	e012      	b.n	800892c <Motor_Speed_LF+0x50>
	} else if (RPM_LF < -max_speed[0]) {
 8008906:	4b29      	ldr	r3, [pc, #164]	@ (80089ac <Motor_Speed_LF+0xd0>)
 8008908:	edd3 7a00 	vldr	s15, [r3]
 800890c:	eef1 7a67 	vneg.f32	s15, s15
 8008910:	ed97 7a00 	vldr	s14, [r7]
 8008914:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800891c:	d506      	bpl.n	800892c <Motor_Speed_LF+0x50>
	   RPM_LF = -max_speed[0];
 800891e:	4b23      	ldr	r3, [pc, #140]	@ (80089ac <Motor_Speed_LF+0xd0>)
 8008920:	edd3 7a00 	vldr	s15, [r3]
 8008924:	eef1 7a67 	vneg.f32	s15, s15
 8008928:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_LF , 0);
 800892c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008930:	ee07 3a90 	vmov	s15, r3
 8008934:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008938:	edd7 7a00 	vldr	s15, [r7]
 800893c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008940:	ee17 3a90 	vmov	r3, s15
 8008944:	b21b      	sxth	r3, r3
 8008946:	2100      	movs	r1, #0
 8008948:	4618      	mov	r0, r3
 800894a:	eeb0 0a47 	vmov.f32	s0, s14
 800894e:	f7ff fdb3 	bl	80084b8 <PID_Speed>

	Duty_Cycle[0] = (int16_t)((Output_PID[0] / ((float)(max_speed[0] - min_speed[0]))) * DutyCycle_LF_MAX);
 8008952:	4b17      	ldr	r3, [pc, #92]	@ (80089b0 <Motor_Speed_LF+0xd4>)
 8008954:	edd3 6a00 	vldr	s13, [r3]
 8008958:	4b14      	ldr	r3, [pc, #80]	@ (80089ac <Motor_Speed_LF+0xd0>)
 800895a:	ed93 7a00 	vldr	s14, [r3]
 800895e:	4b15      	ldr	r3, [pc, #84]	@ (80089b4 <Motor_Speed_LF+0xd8>)
 8008960:	edd3 7a00 	vldr	s15, [r3]
 8008964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008968:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800896c:	4b12      	ldr	r3, [pc, #72]	@ (80089b8 <Motor_Speed_LF+0xdc>)
 800896e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008972:	ee07 3a90 	vmov	s15, r3
 8008976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800897a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800897e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008982:	ee17 3a90 	vmov	r3, s15
 8008986:	b21a      	sxth	r2, r3
 8008988:	4b0c      	ldr	r3, [pc, #48]	@ (80089bc <Motor_Speed_LF+0xe0>)
 800898a:	801a      	strh	r2, [r3, #0]

	Motor_DutyCycle_LF(Duty_Cycle[0]);
 800898c:	4b0b      	ldr	r3, [pc, #44]	@ (80089bc <Motor_Speed_LF+0xe0>)
 800898e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008992:	4618      	mov	r0, r3
 8008994:	f7ff fe3a 	bl	800860c <Motor_DutyCycle_LF>

//	return _RPM[0];
	return Output_PID[0];
 8008998:	4b05      	ldr	r3, [pc, #20]	@ (80089b0 <Motor_Speed_LF+0xd4>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	ee07 3a90 	vmov	s15, r3
}
 80089a0:	eeb0 0a67 	vmov.f32	s0, s15
 80089a4:	3708      	adds	r7, #8
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	20000728 	.word	0x20000728
 80089b0:	200007b8 	.word	0x200007b8
 80089b4:	20000710 	.word	0x20000710
 80089b8:	20000674 	.word	0x20000674
 80089bc:	200007d0 	.word	0x200007d0

080089c0 <Motor_Speed_LB>:

float Motor_Speed_LB(int16_t RPM_INPUT ,float RPM_LB){
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	4603      	mov	r3, r0
 80089c8:	ed87 0a00 	vstr	s0, [r7]
 80089cc:	80fb      	strh	r3, [r7, #6]
	if (RPM_LB > max_speed[1]) {
 80089ce:	4b30      	ldr	r3, [pc, #192]	@ (8008a90 <Motor_Speed_LB+0xd0>)
 80089d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80089d4:	ed97 7a00 	vldr	s14, [r7]
 80089d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80089dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089e0:	dd03      	ble.n	80089ea <Motor_Speed_LB+0x2a>
	   RPM_LB = max_speed[1];
 80089e2:	4b2b      	ldr	r3, [pc, #172]	@ (8008a90 <Motor_Speed_LB+0xd0>)
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	603b      	str	r3, [r7, #0]
 80089e8:	e012      	b.n	8008a10 <Motor_Speed_LB+0x50>
	} else if (RPM_LB < -max_speed[1]) {
 80089ea:	4b29      	ldr	r3, [pc, #164]	@ (8008a90 <Motor_Speed_LB+0xd0>)
 80089ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80089f0:	eef1 7a67 	vneg.f32	s15, s15
 80089f4:	ed97 7a00 	vldr	s14, [r7]
 80089f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80089fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a00:	d506      	bpl.n	8008a10 <Motor_Speed_LB+0x50>
	   RPM_LB = -max_speed[1];
 8008a02:	4b23      	ldr	r3, [pc, #140]	@ (8008a90 <Motor_Speed_LB+0xd0>)
 8008a04:	edd3 7a01 	vldr	s15, [r3, #4]
 8008a08:	eef1 7a67 	vneg.f32	s15, s15
 8008a0c:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_LB ,1);
 8008a10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a14:	ee07 3a90 	vmov	s15, r3
 8008a18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008a1c:	edd7 7a00 	vldr	s15, [r7]
 8008a20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a24:	ee17 3a90 	vmov	r3, s15
 8008a28:	b21b      	sxth	r3, r3
 8008a2a:	2101      	movs	r1, #1
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	eeb0 0a47 	vmov.f32	s0, s14
 8008a32:	f7ff fd41 	bl	80084b8 <PID_Speed>

	Duty_Cycle[1] = (int16_t)((Output_PID[1]/((float)(max_speed[1] - min_speed[1]))) * DutyCycle_LB_MAX);
 8008a36:	4b17      	ldr	r3, [pc, #92]	@ (8008a94 <Motor_Speed_LB+0xd4>)
 8008a38:	edd3 6a01 	vldr	s13, [r3, #4]
 8008a3c:	4b14      	ldr	r3, [pc, #80]	@ (8008a90 <Motor_Speed_LB+0xd0>)
 8008a3e:	ed93 7a01 	vldr	s14, [r3, #4]
 8008a42:	4b15      	ldr	r3, [pc, #84]	@ (8008a98 <Motor_Speed_LB+0xd8>)
 8008a44:	edd3 7a01 	vldr	s15, [r3, #4]
 8008a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a50:	4b12      	ldr	r3, [pc, #72]	@ (8008a9c <Motor_Speed_LB+0xdc>)
 8008a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a56:	ee07 3a90 	vmov	s15, r3
 8008a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a66:	ee17 3a90 	vmov	r3, s15
 8008a6a:	b21a      	sxth	r2, r3
 8008a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8008aa0 <Motor_Speed_LB+0xe0>)
 8008a6e:	805a      	strh	r2, [r3, #2]

	Motor_DutyCycle_LB(Duty_Cycle[1]);
 8008a70:	4b0b      	ldr	r3, [pc, #44]	@ (8008aa0 <Motor_Speed_LB+0xe0>)
 8008a72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7ff fe20 	bl	80086bc <Motor_DutyCycle_LB>

//	return _RPM[1];
	return Output_PID[1];
 8008a7c:	4b05      	ldr	r3, [pc, #20]	@ (8008a94 <Motor_Speed_LB+0xd4>)
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	ee07 3a90 	vmov	s15, r3
}
 8008a84:	eeb0 0a67 	vmov.f32	s0, s15
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	20000728 	.word	0x20000728
 8008a94:	200007b8 	.word	0x200007b8
 8008a98:	20000710 	.word	0x20000710
 8008a9c:	20000676 	.word	0x20000676
 8008aa0:	200007d0 	.word	0x200007d0

08008aa4 <Motor_Speed_RF>:

float Motor_Speed_RF(int16_t RPM_INPUT ,float RPM_RF){
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	ed87 0a00 	vstr	s0, [r7]
 8008ab0:	80fb      	strh	r3, [r7, #6]
	if (RPM_RF > max_speed[2]) {
 8008ab2:	4b30      	ldr	r3, [pc, #192]	@ (8008b74 <Motor_Speed_RF+0xd0>)
 8008ab4:	edd3 7a02 	vldr	s15, [r3, #8]
 8008ab8:	ed97 7a00 	vldr	s14, [r7]
 8008abc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ac4:	dd03      	ble.n	8008ace <Motor_Speed_RF+0x2a>
	   RPM_RF = max_speed[2];
 8008ac6:	4b2b      	ldr	r3, [pc, #172]	@ (8008b74 <Motor_Speed_RF+0xd0>)
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	603b      	str	r3, [r7, #0]
 8008acc:	e012      	b.n	8008af4 <Motor_Speed_RF+0x50>
	} else if (RPM_RF < -max_speed[2]) {
 8008ace:	4b29      	ldr	r3, [pc, #164]	@ (8008b74 <Motor_Speed_RF+0xd0>)
 8008ad0:	edd3 7a02 	vldr	s15, [r3, #8]
 8008ad4:	eef1 7a67 	vneg.f32	s15, s15
 8008ad8:	ed97 7a00 	vldr	s14, [r7]
 8008adc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ae4:	d506      	bpl.n	8008af4 <Motor_Speed_RF+0x50>
	   RPM_RF = -max_speed[2];
 8008ae6:	4b23      	ldr	r3, [pc, #140]	@ (8008b74 <Motor_Speed_RF+0xd0>)
 8008ae8:	edd3 7a02 	vldr	s15, [r3, #8]
 8008aec:	eef1 7a67 	vneg.f32	s15, s15
 8008af0:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_RF ,2);
 8008af4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008af8:	ee07 3a90 	vmov	s15, r3
 8008afc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b00:	edd7 7a00 	vldr	s15, [r7]
 8008b04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b08:	ee17 3a90 	vmov	r3, s15
 8008b0c:	b21b      	sxth	r3, r3
 8008b0e:	2102      	movs	r1, #2
 8008b10:	4618      	mov	r0, r3
 8008b12:	eeb0 0a47 	vmov.f32	s0, s14
 8008b16:	f7ff fccf 	bl	80084b8 <PID_Speed>

	Duty_Cycle[2] = (int16_t)((Output_PID[2]/((float)(max_speed[2] - min_speed[2]))) * DutyCycle_RF_MAX);
 8008b1a:	4b17      	ldr	r3, [pc, #92]	@ (8008b78 <Motor_Speed_RF+0xd4>)
 8008b1c:	edd3 6a02 	vldr	s13, [r3, #8]
 8008b20:	4b14      	ldr	r3, [pc, #80]	@ (8008b74 <Motor_Speed_RF+0xd0>)
 8008b22:	ed93 7a02 	vldr	s14, [r3, #8]
 8008b26:	4b15      	ldr	r3, [pc, #84]	@ (8008b7c <Motor_Speed_RF+0xd8>)
 8008b28:	edd3 7a02 	vldr	s15, [r3, #8]
 8008b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b34:	4b12      	ldr	r3, [pc, #72]	@ (8008b80 <Motor_Speed_RF+0xdc>)
 8008b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b3a:	ee07 3a90 	vmov	s15, r3
 8008b3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b4a:	ee17 3a90 	vmov	r3, s15
 8008b4e:	b21a      	sxth	r2, r3
 8008b50:	4b0c      	ldr	r3, [pc, #48]	@ (8008b84 <Motor_Speed_RF+0xe0>)
 8008b52:	809a      	strh	r2, [r3, #4]

	Motor_DutyCycle_RF(Duty_Cycle[2]);
 8008b54:	4b0b      	ldr	r3, [pc, #44]	@ (8008b84 <Motor_Speed_RF+0xe0>)
 8008b56:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7ff fe0a 	bl	8008774 <Motor_DutyCycle_RF>

//	return _RPM[2];
	return Output_PID[2];
 8008b60:	4b05      	ldr	r3, [pc, #20]	@ (8008b78 <Motor_Speed_RF+0xd4>)
 8008b62:	689b      	ldr	r3, [r3, #8]
 8008b64:	ee07 3a90 	vmov	s15, r3
}
 8008b68:	eeb0 0a67 	vmov.f32	s0, s15
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	20000728 	.word	0x20000728
 8008b78:	200007b8 	.word	0x200007b8
 8008b7c:	20000710 	.word	0x20000710
 8008b80:	20000678 	.word	0x20000678
 8008b84:	200007d0 	.word	0x200007d0

08008b88 <Motor_Speed_RB>:

float Motor_Speed_RB(int16_t RPM_INPUT ,float RPM_RB){
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	4603      	mov	r3, r0
 8008b90:	ed87 0a00 	vstr	s0, [r7]
 8008b94:	80fb      	strh	r3, [r7, #6]
	if (RPM_RB > max_speed[3]) {
 8008b96:	4b30      	ldr	r3, [pc, #192]	@ (8008c58 <Motor_Speed_RB+0xd0>)
 8008b98:	edd3 7a03 	vldr	s15, [r3, #12]
 8008b9c:	ed97 7a00 	vldr	s14, [r7]
 8008ba0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba8:	dd03      	ble.n	8008bb2 <Motor_Speed_RB+0x2a>
		RPM_RB = max_speed[3];
 8008baa:	4b2b      	ldr	r3, [pc, #172]	@ (8008c58 <Motor_Speed_RB+0xd0>)
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	603b      	str	r3, [r7, #0]
 8008bb0:	e012      	b.n	8008bd8 <Motor_Speed_RB+0x50>
	} else if (RPM_RB < -max_speed[3]) {
 8008bb2:	4b29      	ldr	r3, [pc, #164]	@ (8008c58 <Motor_Speed_RB+0xd0>)
 8008bb4:	edd3 7a03 	vldr	s15, [r3, #12]
 8008bb8:	eef1 7a67 	vneg.f32	s15, s15
 8008bbc:	ed97 7a00 	vldr	s14, [r7]
 8008bc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bc8:	d506      	bpl.n	8008bd8 <Motor_Speed_RB+0x50>
		RPM_RB = -max_speed[3];
 8008bca:	4b23      	ldr	r3, [pc, #140]	@ (8008c58 <Motor_Speed_RB+0xd0>)
 8008bcc:	edd3 7a03 	vldr	s15, [r3, #12]
 8008bd0:	eef1 7a67 	vneg.f32	s15, s15
 8008bd4:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_RB ,3);
 8008bd8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008bdc:	ee07 3a90 	vmov	s15, r3
 8008be0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008be4:	edd7 7a00 	vldr	s15, [r7]
 8008be8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bec:	ee17 3a90 	vmov	r3, s15
 8008bf0:	b21b      	sxth	r3, r3
 8008bf2:	2103      	movs	r1, #3
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	eeb0 0a47 	vmov.f32	s0, s14
 8008bfa:	f7ff fc5d 	bl	80084b8 <PID_Speed>

	Duty_Cycle[3] = (int16_t)((Output_PID[3]/((float)(max_speed[3] - min_speed[3]))) * DutyCycle_RB_MAX);
 8008bfe:	4b17      	ldr	r3, [pc, #92]	@ (8008c5c <Motor_Speed_RB+0xd4>)
 8008c00:	edd3 6a03 	vldr	s13, [r3, #12]
 8008c04:	4b14      	ldr	r3, [pc, #80]	@ (8008c58 <Motor_Speed_RB+0xd0>)
 8008c06:	ed93 7a03 	vldr	s14, [r3, #12]
 8008c0a:	4b15      	ldr	r3, [pc, #84]	@ (8008c60 <Motor_Speed_RB+0xd8>)
 8008c0c:	edd3 7a03 	vldr	s15, [r3, #12]
 8008c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c18:	4b12      	ldr	r3, [pc, #72]	@ (8008c64 <Motor_Speed_RB+0xdc>)
 8008c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c1e:	ee07 3a90 	vmov	s15, r3
 8008c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c2e:	ee17 3a90 	vmov	r3, s15
 8008c32:	b21a      	sxth	r2, r3
 8008c34:	4b0c      	ldr	r3, [pc, #48]	@ (8008c68 <Motor_Speed_RB+0xe0>)
 8008c36:	80da      	strh	r2, [r3, #6]

	Motor_DutyCycle_RB(Duty_Cycle[3]);
 8008c38:	4b0b      	ldr	r3, [pc, #44]	@ (8008c68 <Motor_Speed_RB+0xe0>)
 8008c3a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7ff fdf4 	bl	800882c <Motor_DutyCycle_RB>

//	return _RPM[3];
	return Output_PID[3];
 8008c44:	4b05      	ldr	r3, [pc, #20]	@ (8008c5c <Motor_Speed_RB+0xd4>)
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	ee07 3a90 	vmov	s15, r3
}
 8008c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	20000728 	.word	0x20000728
 8008c5c:	200007b8 	.word	0x200007b8
 8008c60:	20000710 	.word	0x20000710
 8008c64:	2000067a 	.word	0x2000067a
 8008c68:	200007d0 	.word	0x200007d0

08008c6c <digitalWrite>:

//	return _RPM[5];
	return Output_PID[5];
}

void digitalWrite(char* _PIN , uint8_t vlue){
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	460b      	mov	r3, r1
 8008c76:	70fb      	strb	r3, [r7, #3]
	uint8_t PIN = (_PIN[2] - '0') * 10 + (_PIN[3] - '0');
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3302      	adds	r3, #2
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	3b30      	subs	r3, #48	@ 0x30
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	461a      	mov	r2, r3
 8008c84:	0092      	lsls	r2, r2, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	005b      	lsls	r3, r3, #1
 8008c8a:	b2da      	uxtb	r2, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	3303      	adds	r3, #3
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	4413      	add	r3, r2
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	3b30      	subs	r3, #48	@ 0x30
 8008c98:	73fb      	strb	r3, [r7, #15]

	if (_PIN[1] == 'A') {
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3301      	adds	r3, #1
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	2b41      	cmp	r3, #65	@ 0x41
 8008ca2:	f040 809f 	bne.w	8008de4 <digitalWrite+0x178>
	        switch (PIN) {
 8008ca6:	7bfb      	ldrb	r3, [r7, #15]
 8008ca8:	2b0f      	cmp	r3, #15
 8008caa:	f200 833f 	bhi.w	800932c <digitalWrite+0x6c0>
 8008cae:	a201      	add	r2, pc, #4	@ (adr r2, 8008cb4 <digitalWrite+0x48>)
 8008cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb4:	08008cf5 	.word	0x08008cf5
 8008cb8:	08008d03 	.word	0x08008d03
 8008cbc:	08008d11 	.word	0x08008d11
 8008cc0:	08008d1f 	.word	0x08008d1f
 8008cc4:	08008d2d 	.word	0x08008d2d
 8008cc8:	08008d3b 	.word	0x08008d3b
 8008ccc:	08008d49 	.word	0x08008d49
 8008cd0:	08008d57 	.word	0x08008d57
 8008cd4:	08008d65 	.word	0x08008d65
 8008cd8:	08008d75 	.word	0x08008d75
 8008cdc:	08008d85 	.word	0x08008d85
 8008ce0:	08008d95 	.word	0x08008d95
 8008ce4:	08008da5 	.word	0x08008da5
 8008ce8:	08008db5 	.word	0x08008db5
 8008cec:	08008dc5 	.word	0x08008dc5
 8008cf0:	08008dd5 	.word	0x08008dd5
	            case 0: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, vlue); break;
 8008cf4:	78fb      	ldrb	r3, [r7, #3]
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	2101      	movs	r1, #1
 8008cfa:	48bd      	ldr	r0, [pc, #756]	@ (8008ff0 <digitalWrite+0x384>)
 8008cfc:	f7f9 ff82 	bl	8002c04 <HAL_GPIO_WritePin>
 8008d00:	e314      	b.n	800932c <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, vlue); break;
 8008d02:	78fb      	ldrb	r3, [r7, #3]
 8008d04:	461a      	mov	r2, r3
 8008d06:	2102      	movs	r1, #2
 8008d08:	48b9      	ldr	r0, [pc, #740]	@ (8008ff0 <digitalWrite+0x384>)
 8008d0a:	f7f9 ff7b 	bl	8002c04 <HAL_GPIO_WritePin>
 8008d0e:	e30d      	b.n	800932c <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, vlue); break;
 8008d10:	78fb      	ldrb	r3, [r7, #3]
 8008d12:	461a      	mov	r2, r3
 8008d14:	2104      	movs	r1, #4
 8008d16:	48b6      	ldr	r0, [pc, #728]	@ (8008ff0 <digitalWrite+0x384>)
 8008d18:	f7f9 ff74 	bl	8002c04 <HAL_GPIO_WritePin>
 8008d1c:	e306      	b.n	800932c <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, vlue); break;
 8008d1e:	78fb      	ldrb	r3, [r7, #3]
 8008d20:	461a      	mov	r2, r3
 8008d22:	2108      	movs	r1, #8
 8008d24:	48b2      	ldr	r0, [pc, #712]	@ (8008ff0 <digitalWrite+0x384>)
 8008d26:	f7f9 ff6d 	bl	8002c04 <HAL_GPIO_WritePin>
 8008d2a:	e2ff      	b.n	800932c <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, vlue); break;
 8008d2c:	78fb      	ldrb	r3, [r7, #3]
 8008d2e:	461a      	mov	r2, r3
 8008d30:	2110      	movs	r1, #16
 8008d32:	48af      	ldr	r0, [pc, #700]	@ (8008ff0 <digitalWrite+0x384>)
 8008d34:	f7f9 ff66 	bl	8002c04 <HAL_GPIO_WritePin>
 8008d38:	e2f8      	b.n	800932c <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, vlue); break;
 8008d3a:	78fb      	ldrb	r3, [r7, #3]
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	2120      	movs	r1, #32
 8008d40:	48ab      	ldr	r0, [pc, #684]	@ (8008ff0 <digitalWrite+0x384>)
 8008d42:	f7f9 ff5f 	bl	8002c04 <HAL_GPIO_WritePin>
 8008d46:	e2f1      	b.n	800932c <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, vlue); break;
 8008d48:	78fb      	ldrb	r3, [r7, #3]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	2140      	movs	r1, #64	@ 0x40
 8008d4e:	48a8      	ldr	r0, [pc, #672]	@ (8008ff0 <digitalWrite+0x384>)
 8008d50:	f7f9 ff58 	bl	8002c04 <HAL_GPIO_WritePin>
 8008d54:	e2ea      	b.n	800932c <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, vlue); break;
 8008d56:	78fb      	ldrb	r3, [r7, #3]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	2180      	movs	r1, #128	@ 0x80
 8008d5c:	48a4      	ldr	r0, [pc, #656]	@ (8008ff0 <digitalWrite+0x384>)
 8008d5e:	f7f9 ff51 	bl	8002c04 <HAL_GPIO_WritePin>
 8008d62:	e2e3      	b.n	800932c <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, vlue); break;
 8008d64:	78fb      	ldrb	r3, [r7, #3]
 8008d66:	461a      	mov	r2, r3
 8008d68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008d6c:	48a0      	ldr	r0, [pc, #640]	@ (8008ff0 <digitalWrite+0x384>)
 8008d6e:	f7f9 ff49 	bl	8002c04 <HAL_GPIO_WritePin>
 8008d72:	e2db      	b.n	800932c <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, vlue); break;
 8008d74:	78fb      	ldrb	r3, [r7, #3]
 8008d76:	461a      	mov	r2, r3
 8008d78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008d7c:	489c      	ldr	r0, [pc, #624]	@ (8008ff0 <digitalWrite+0x384>)
 8008d7e:	f7f9 ff41 	bl	8002c04 <HAL_GPIO_WritePin>
 8008d82:	e2d3      	b.n	800932c <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, vlue); break;
 8008d84:	78fb      	ldrb	r3, [r7, #3]
 8008d86:	461a      	mov	r2, r3
 8008d88:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008d8c:	4898      	ldr	r0, [pc, #608]	@ (8008ff0 <digitalWrite+0x384>)
 8008d8e:	f7f9 ff39 	bl	8002c04 <HAL_GPIO_WritePin>
 8008d92:	e2cb      	b.n	800932c <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, vlue); break;
 8008d94:	78fb      	ldrb	r3, [r7, #3]
 8008d96:	461a      	mov	r2, r3
 8008d98:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008d9c:	4894      	ldr	r0, [pc, #592]	@ (8008ff0 <digitalWrite+0x384>)
 8008d9e:	f7f9 ff31 	bl	8002c04 <HAL_GPIO_WritePin>
 8008da2:	e2c3      	b.n	800932c <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, vlue); break;
 8008da4:	78fb      	ldrb	r3, [r7, #3]
 8008da6:	461a      	mov	r2, r3
 8008da8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008dac:	4890      	ldr	r0, [pc, #576]	@ (8008ff0 <digitalWrite+0x384>)
 8008dae:	f7f9 ff29 	bl	8002c04 <HAL_GPIO_WritePin>
 8008db2:	e2bb      	b.n	800932c <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, vlue); break;
 8008db4:	78fb      	ldrb	r3, [r7, #3]
 8008db6:	461a      	mov	r2, r3
 8008db8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008dbc:	488c      	ldr	r0, [pc, #560]	@ (8008ff0 <digitalWrite+0x384>)
 8008dbe:	f7f9 ff21 	bl	8002c04 <HAL_GPIO_WritePin>
 8008dc2:	e2b3      	b.n	800932c <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, vlue); break;
 8008dc4:	78fb      	ldrb	r3, [r7, #3]
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008dcc:	4888      	ldr	r0, [pc, #544]	@ (8008ff0 <digitalWrite+0x384>)
 8008dce:	f7f9 ff19 	bl	8002c04 <HAL_GPIO_WritePin>
 8008dd2:	e2ab      	b.n	800932c <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, vlue); break;
 8008dd4:	78fb      	ldrb	r3, [r7, #3]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008ddc:	4884      	ldr	r0, [pc, #528]	@ (8008ff0 <digitalWrite+0x384>)
 8008dde:	f7f9 ff11 	bl	8002c04 <HAL_GPIO_WritePin>
 8008de2:	e2a3      	b.n	800932c <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'B') {
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	3301      	adds	r3, #1
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	2b42      	cmp	r3, #66	@ 0x42
 8008dec:	f040 80a0 	bne.w	8008f30 <digitalWrite+0x2c4>
	        switch (PIN) {
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
 8008df2:	2b0f      	cmp	r3, #15
 8008df4:	f200 829a 	bhi.w	800932c <digitalWrite+0x6c0>
 8008df8:	a201      	add	r2, pc, #4	@ (adr r2, 8008e00 <digitalWrite+0x194>)
 8008dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfe:	bf00      	nop
 8008e00:	08008e41 	.word	0x08008e41
 8008e04:	08008e4f 	.word	0x08008e4f
 8008e08:	08008e5d 	.word	0x08008e5d
 8008e0c:	08008e6b 	.word	0x08008e6b
 8008e10:	08008e79 	.word	0x08008e79
 8008e14:	08008e87 	.word	0x08008e87
 8008e18:	08008e95 	.word	0x08008e95
 8008e1c:	08008ea3 	.word	0x08008ea3
 8008e20:	08008eb1 	.word	0x08008eb1
 8008e24:	08008ec1 	.word	0x08008ec1
 8008e28:	08008ed1 	.word	0x08008ed1
 8008e2c:	08008ee1 	.word	0x08008ee1
 8008e30:	08008ef1 	.word	0x08008ef1
 8008e34:	08008f01 	.word	0x08008f01
 8008e38:	08008f11 	.word	0x08008f11
 8008e3c:	08008f21 	.word	0x08008f21
	            case 0: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, vlue); break;
 8008e40:	78fb      	ldrb	r3, [r7, #3]
 8008e42:	461a      	mov	r2, r3
 8008e44:	2101      	movs	r1, #1
 8008e46:	486b      	ldr	r0, [pc, #428]	@ (8008ff4 <digitalWrite+0x388>)
 8008e48:	f7f9 fedc 	bl	8002c04 <HAL_GPIO_WritePin>
 8008e4c:	e26e      	b.n	800932c <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, vlue); break;
 8008e4e:	78fb      	ldrb	r3, [r7, #3]
 8008e50:	461a      	mov	r2, r3
 8008e52:	2102      	movs	r1, #2
 8008e54:	4867      	ldr	r0, [pc, #412]	@ (8008ff4 <digitalWrite+0x388>)
 8008e56:	f7f9 fed5 	bl	8002c04 <HAL_GPIO_WritePin>
 8008e5a:	e267      	b.n	800932c <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, vlue); break;
 8008e5c:	78fb      	ldrb	r3, [r7, #3]
 8008e5e:	461a      	mov	r2, r3
 8008e60:	2104      	movs	r1, #4
 8008e62:	4864      	ldr	r0, [pc, #400]	@ (8008ff4 <digitalWrite+0x388>)
 8008e64:	f7f9 fece 	bl	8002c04 <HAL_GPIO_WritePin>
 8008e68:	e260      	b.n	800932c <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, vlue); break;
 8008e6a:	78fb      	ldrb	r3, [r7, #3]
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	2108      	movs	r1, #8
 8008e70:	4860      	ldr	r0, [pc, #384]	@ (8008ff4 <digitalWrite+0x388>)
 8008e72:	f7f9 fec7 	bl	8002c04 <HAL_GPIO_WritePin>
 8008e76:	e259      	b.n	800932c <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, vlue); break;
 8008e78:	78fb      	ldrb	r3, [r7, #3]
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	2110      	movs	r1, #16
 8008e7e:	485d      	ldr	r0, [pc, #372]	@ (8008ff4 <digitalWrite+0x388>)
 8008e80:	f7f9 fec0 	bl	8002c04 <HAL_GPIO_WritePin>
 8008e84:	e252      	b.n	800932c <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, vlue); break;
 8008e86:	78fb      	ldrb	r3, [r7, #3]
 8008e88:	461a      	mov	r2, r3
 8008e8a:	2120      	movs	r1, #32
 8008e8c:	4859      	ldr	r0, [pc, #356]	@ (8008ff4 <digitalWrite+0x388>)
 8008e8e:	f7f9 feb9 	bl	8002c04 <HAL_GPIO_WritePin>
 8008e92:	e24b      	b.n	800932c <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, vlue); break;
 8008e94:	78fb      	ldrb	r3, [r7, #3]
 8008e96:	461a      	mov	r2, r3
 8008e98:	2140      	movs	r1, #64	@ 0x40
 8008e9a:	4856      	ldr	r0, [pc, #344]	@ (8008ff4 <digitalWrite+0x388>)
 8008e9c:	f7f9 feb2 	bl	8002c04 <HAL_GPIO_WritePin>
 8008ea0:	e244      	b.n	800932c <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, vlue); break;
 8008ea2:	78fb      	ldrb	r3, [r7, #3]
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	2180      	movs	r1, #128	@ 0x80
 8008ea8:	4852      	ldr	r0, [pc, #328]	@ (8008ff4 <digitalWrite+0x388>)
 8008eaa:	f7f9 feab 	bl	8002c04 <HAL_GPIO_WritePin>
 8008eae:	e23d      	b.n	800932c <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, vlue); break;
 8008eb0:	78fb      	ldrb	r3, [r7, #3]
 8008eb2:	461a      	mov	r2, r3
 8008eb4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008eb8:	484e      	ldr	r0, [pc, #312]	@ (8008ff4 <digitalWrite+0x388>)
 8008eba:	f7f9 fea3 	bl	8002c04 <HAL_GPIO_WritePin>
 8008ebe:	e235      	b.n	800932c <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, vlue); break;
 8008ec0:	78fb      	ldrb	r3, [r7, #3]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008ec8:	484a      	ldr	r0, [pc, #296]	@ (8008ff4 <digitalWrite+0x388>)
 8008eca:	f7f9 fe9b 	bl	8002c04 <HAL_GPIO_WritePin>
 8008ece:	e22d      	b.n	800932c <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, vlue); break;
 8008ed0:	78fb      	ldrb	r3, [r7, #3]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008ed8:	4846      	ldr	r0, [pc, #280]	@ (8008ff4 <digitalWrite+0x388>)
 8008eda:	f7f9 fe93 	bl	8002c04 <HAL_GPIO_WritePin>
 8008ede:	e225      	b.n	800932c <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, vlue); break;
 8008ee0:	78fb      	ldrb	r3, [r7, #3]
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008ee8:	4842      	ldr	r0, [pc, #264]	@ (8008ff4 <digitalWrite+0x388>)
 8008eea:	f7f9 fe8b 	bl	8002c04 <HAL_GPIO_WritePin>
 8008eee:	e21d      	b.n	800932c <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, vlue); break;
 8008ef0:	78fb      	ldrb	r3, [r7, #3]
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008ef8:	483e      	ldr	r0, [pc, #248]	@ (8008ff4 <digitalWrite+0x388>)
 8008efa:	f7f9 fe83 	bl	8002c04 <HAL_GPIO_WritePin>
 8008efe:	e215      	b.n	800932c <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, vlue); break;
 8008f00:	78fb      	ldrb	r3, [r7, #3]
 8008f02:	461a      	mov	r2, r3
 8008f04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008f08:	483a      	ldr	r0, [pc, #232]	@ (8008ff4 <digitalWrite+0x388>)
 8008f0a:	f7f9 fe7b 	bl	8002c04 <HAL_GPIO_WritePin>
 8008f0e:	e20d      	b.n	800932c <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, vlue); break;
 8008f10:	78fb      	ldrb	r3, [r7, #3]
 8008f12:	461a      	mov	r2, r3
 8008f14:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8008f18:	4836      	ldr	r0, [pc, #216]	@ (8008ff4 <digitalWrite+0x388>)
 8008f1a:	f7f9 fe73 	bl	8002c04 <HAL_GPIO_WritePin>
 8008f1e:	e205      	b.n	800932c <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, vlue); break;
 8008f20:	78fb      	ldrb	r3, [r7, #3]
 8008f22:	461a      	mov	r2, r3
 8008f24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008f28:	4832      	ldr	r0, [pc, #200]	@ (8008ff4 <digitalWrite+0x388>)
 8008f2a:	f7f9 fe6b 	bl	8002c04 <HAL_GPIO_WritePin>
 8008f2e:	e1fd      	b.n	800932c <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'C') {
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	3301      	adds	r3, #1
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	2b43      	cmp	r3, #67	@ 0x43
 8008f38:	f040 80a7 	bne.w	800908a <digitalWrite+0x41e>
	        switch (PIN) {
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
 8008f3e:	2b0f      	cmp	r3, #15
 8008f40:	f200 81f4 	bhi.w	800932c <digitalWrite+0x6c0>
 8008f44:	a201      	add	r2, pc, #4	@ (adr r2, 8008f4c <digitalWrite+0x2e0>)
 8008f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4a:	bf00      	nop
 8008f4c:	08008f8d 	.word	0x08008f8d
 8008f50:	08008f9b 	.word	0x08008f9b
 8008f54:	08008fa9 	.word	0x08008fa9
 8008f58:	08008fb7 	.word	0x08008fb7
 8008f5c:	08008fc5 	.word	0x08008fc5
 8008f60:	08008fd3 	.word	0x08008fd3
 8008f64:	08008fe1 	.word	0x08008fe1
 8008f68:	08008ffd 	.word	0x08008ffd
 8008f6c:	0800900b 	.word	0x0800900b
 8008f70:	0800901b 	.word	0x0800901b
 8008f74:	0800902b 	.word	0x0800902b
 8008f78:	0800903b 	.word	0x0800903b
 8008f7c:	0800904b 	.word	0x0800904b
 8008f80:	0800905b 	.word	0x0800905b
 8008f84:	0800906b 	.word	0x0800906b
 8008f88:	0800907b 	.word	0x0800907b
	            case 0: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, vlue); break;
 8008f8c:	78fb      	ldrb	r3, [r7, #3]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	2101      	movs	r1, #1
 8008f92:	4819      	ldr	r0, [pc, #100]	@ (8008ff8 <digitalWrite+0x38c>)
 8008f94:	f7f9 fe36 	bl	8002c04 <HAL_GPIO_WritePin>
 8008f98:	e1c8      	b.n	800932c <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, vlue); break;
 8008f9a:	78fb      	ldrb	r3, [r7, #3]
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	2102      	movs	r1, #2
 8008fa0:	4815      	ldr	r0, [pc, #84]	@ (8008ff8 <digitalWrite+0x38c>)
 8008fa2:	f7f9 fe2f 	bl	8002c04 <HAL_GPIO_WritePin>
 8008fa6:	e1c1      	b.n	800932c <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, vlue); break;
 8008fa8:	78fb      	ldrb	r3, [r7, #3]
 8008faa:	461a      	mov	r2, r3
 8008fac:	2104      	movs	r1, #4
 8008fae:	4812      	ldr	r0, [pc, #72]	@ (8008ff8 <digitalWrite+0x38c>)
 8008fb0:	f7f9 fe28 	bl	8002c04 <HAL_GPIO_WritePin>
 8008fb4:	e1ba      	b.n	800932c <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, vlue); break;
 8008fb6:	78fb      	ldrb	r3, [r7, #3]
 8008fb8:	461a      	mov	r2, r3
 8008fba:	2108      	movs	r1, #8
 8008fbc:	480e      	ldr	r0, [pc, #56]	@ (8008ff8 <digitalWrite+0x38c>)
 8008fbe:	f7f9 fe21 	bl	8002c04 <HAL_GPIO_WritePin>
 8008fc2:	e1b3      	b.n	800932c <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, vlue); break;
 8008fc4:	78fb      	ldrb	r3, [r7, #3]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	2110      	movs	r1, #16
 8008fca:	480b      	ldr	r0, [pc, #44]	@ (8008ff8 <digitalWrite+0x38c>)
 8008fcc:	f7f9 fe1a 	bl	8002c04 <HAL_GPIO_WritePin>
 8008fd0:	e1ac      	b.n	800932c <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, vlue); break;
 8008fd2:	78fb      	ldrb	r3, [r7, #3]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	2120      	movs	r1, #32
 8008fd8:	4807      	ldr	r0, [pc, #28]	@ (8008ff8 <digitalWrite+0x38c>)
 8008fda:	f7f9 fe13 	bl	8002c04 <HAL_GPIO_WritePin>
 8008fde:	e1a5      	b.n	800932c <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, vlue); break;
 8008fe0:	78fb      	ldrb	r3, [r7, #3]
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	2140      	movs	r1, #64	@ 0x40
 8008fe6:	4804      	ldr	r0, [pc, #16]	@ (8008ff8 <digitalWrite+0x38c>)
 8008fe8:	f7f9 fe0c 	bl	8002c04 <HAL_GPIO_WritePin>
 8008fec:	e19e      	b.n	800932c <digitalWrite+0x6c0>
 8008fee:	bf00      	nop
 8008ff0:	40020000 	.word	0x40020000
 8008ff4:	40020400 	.word	0x40020400
 8008ff8:	40020800 	.word	0x40020800
	            case 7: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, vlue); break;
 8008ffc:	78fb      	ldrb	r3, [r7, #3]
 8008ffe:	461a      	mov	r2, r3
 8009000:	2180      	movs	r1, #128	@ 0x80
 8009002:	48bb      	ldr	r0, [pc, #748]	@ (80092f0 <digitalWrite+0x684>)
 8009004:	f7f9 fdfe 	bl	8002c04 <HAL_GPIO_WritePin>
 8009008:	e190      	b.n	800932c <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, vlue); break;
 800900a:	78fb      	ldrb	r3, [r7, #3]
 800900c:	461a      	mov	r2, r3
 800900e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009012:	48b7      	ldr	r0, [pc, #732]	@ (80092f0 <digitalWrite+0x684>)
 8009014:	f7f9 fdf6 	bl	8002c04 <HAL_GPIO_WritePin>
 8009018:	e188      	b.n	800932c <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, vlue); break;
 800901a:	78fb      	ldrb	r3, [r7, #3]
 800901c:	461a      	mov	r2, r3
 800901e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009022:	48b3      	ldr	r0, [pc, #716]	@ (80092f0 <digitalWrite+0x684>)
 8009024:	f7f9 fdee 	bl	8002c04 <HAL_GPIO_WritePin>
 8009028:	e180      	b.n	800932c <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, vlue); break;
 800902a:	78fb      	ldrb	r3, [r7, #3]
 800902c:	461a      	mov	r2, r3
 800902e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009032:	48af      	ldr	r0, [pc, #700]	@ (80092f0 <digitalWrite+0x684>)
 8009034:	f7f9 fde6 	bl	8002c04 <HAL_GPIO_WritePin>
 8009038:	e178      	b.n	800932c <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, vlue); break;
 800903a:	78fb      	ldrb	r3, [r7, #3]
 800903c:	461a      	mov	r2, r3
 800903e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009042:	48ab      	ldr	r0, [pc, #684]	@ (80092f0 <digitalWrite+0x684>)
 8009044:	f7f9 fdde 	bl	8002c04 <HAL_GPIO_WritePin>
 8009048:	e170      	b.n	800932c <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, vlue); break;
 800904a:	78fb      	ldrb	r3, [r7, #3]
 800904c:	461a      	mov	r2, r3
 800904e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009052:	48a7      	ldr	r0, [pc, #668]	@ (80092f0 <digitalWrite+0x684>)
 8009054:	f7f9 fdd6 	bl	8002c04 <HAL_GPIO_WritePin>
 8009058:	e168      	b.n	800932c <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, vlue); break;
 800905a:	78fb      	ldrb	r3, [r7, #3]
 800905c:	461a      	mov	r2, r3
 800905e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009062:	48a3      	ldr	r0, [pc, #652]	@ (80092f0 <digitalWrite+0x684>)
 8009064:	f7f9 fdce 	bl	8002c04 <HAL_GPIO_WritePin>
 8009068:	e160      	b.n	800932c <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, vlue); break;
 800906a:	78fb      	ldrb	r3, [r7, #3]
 800906c:	461a      	mov	r2, r3
 800906e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009072:	489f      	ldr	r0, [pc, #636]	@ (80092f0 <digitalWrite+0x684>)
 8009074:	f7f9 fdc6 	bl	8002c04 <HAL_GPIO_WritePin>
 8009078:	e158      	b.n	800932c <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, vlue); break;
 800907a:	78fb      	ldrb	r3, [r7, #3]
 800907c:	461a      	mov	r2, r3
 800907e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009082:	489b      	ldr	r0, [pc, #620]	@ (80092f0 <digitalWrite+0x684>)
 8009084:	f7f9 fdbe 	bl	8002c04 <HAL_GPIO_WritePin>
 8009088:	e150      	b.n	800932c <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'D') {
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	3301      	adds	r3, #1
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	2b44      	cmp	r3, #68	@ 0x44
 8009092:	f040 809f 	bne.w	80091d4 <digitalWrite+0x568>
	        switch (PIN) {
 8009096:	7bfb      	ldrb	r3, [r7, #15]
 8009098:	2b0f      	cmp	r3, #15
 800909a:	f200 8147 	bhi.w	800932c <digitalWrite+0x6c0>
 800909e:	a201      	add	r2, pc, #4	@ (adr r2, 80090a4 <digitalWrite+0x438>)
 80090a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a4:	080090e5 	.word	0x080090e5
 80090a8:	080090f3 	.word	0x080090f3
 80090ac:	08009101 	.word	0x08009101
 80090b0:	0800910f 	.word	0x0800910f
 80090b4:	0800911d 	.word	0x0800911d
 80090b8:	0800912b 	.word	0x0800912b
 80090bc:	08009139 	.word	0x08009139
 80090c0:	08009147 	.word	0x08009147
 80090c4:	08009155 	.word	0x08009155
 80090c8:	08009165 	.word	0x08009165
 80090cc:	08009175 	.word	0x08009175
 80090d0:	08009185 	.word	0x08009185
 80090d4:	08009195 	.word	0x08009195
 80090d8:	080091a5 	.word	0x080091a5
 80090dc:	080091b5 	.word	0x080091b5
 80090e0:	080091c5 	.word	0x080091c5
	            case 0: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, vlue); break;
 80090e4:	78fb      	ldrb	r3, [r7, #3]
 80090e6:	461a      	mov	r2, r3
 80090e8:	2101      	movs	r1, #1
 80090ea:	4882      	ldr	r0, [pc, #520]	@ (80092f4 <digitalWrite+0x688>)
 80090ec:	f7f9 fd8a 	bl	8002c04 <HAL_GPIO_WritePin>
 80090f0:	e11c      	b.n	800932c <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, vlue); break;
 80090f2:	78fb      	ldrb	r3, [r7, #3]
 80090f4:	461a      	mov	r2, r3
 80090f6:	2102      	movs	r1, #2
 80090f8:	487e      	ldr	r0, [pc, #504]	@ (80092f4 <digitalWrite+0x688>)
 80090fa:	f7f9 fd83 	bl	8002c04 <HAL_GPIO_WritePin>
 80090fe:	e115      	b.n	800932c <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, vlue); break;
 8009100:	78fb      	ldrb	r3, [r7, #3]
 8009102:	461a      	mov	r2, r3
 8009104:	2104      	movs	r1, #4
 8009106:	487b      	ldr	r0, [pc, #492]	@ (80092f4 <digitalWrite+0x688>)
 8009108:	f7f9 fd7c 	bl	8002c04 <HAL_GPIO_WritePin>
 800910c:	e10e      	b.n	800932c <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, vlue); break;
 800910e:	78fb      	ldrb	r3, [r7, #3]
 8009110:	461a      	mov	r2, r3
 8009112:	2108      	movs	r1, #8
 8009114:	4877      	ldr	r0, [pc, #476]	@ (80092f4 <digitalWrite+0x688>)
 8009116:	f7f9 fd75 	bl	8002c04 <HAL_GPIO_WritePin>
 800911a:	e107      	b.n	800932c <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, vlue); break;
 800911c:	78fb      	ldrb	r3, [r7, #3]
 800911e:	461a      	mov	r2, r3
 8009120:	2110      	movs	r1, #16
 8009122:	4874      	ldr	r0, [pc, #464]	@ (80092f4 <digitalWrite+0x688>)
 8009124:	f7f9 fd6e 	bl	8002c04 <HAL_GPIO_WritePin>
 8009128:	e100      	b.n	800932c <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, vlue); break;
 800912a:	78fb      	ldrb	r3, [r7, #3]
 800912c:	461a      	mov	r2, r3
 800912e:	2120      	movs	r1, #32
 8009130:	4870      	ldr	r0, [pc, #448]	@ (80092f4 <digitalWrite+0x688>)
 8009132:	f7f9 fd67 	bl	8002c04 <HAL_GPIO_WritePin>
 8009136:	e0f9      	b.n	800932c <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, vlue); break;
 8009138:	78fb      	ldrb	r3, [r7, #3]
 800913a:	461a      	mov	r2, r3
 800913c:	2140      	movs	r1, #64	@ 0x40
 800913e:	486d      	ldr	r0, [pc, #436]	@ (80092f4 <digitalWrite+0x688>)
 8009140:	f7f9 fd60 	bl	8002c04 <HAL_GPIO_WritePin>
 8009144:	e0f2      	b.n	800932c <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, vlue); break;
 8009146:	78fb      	ldrb	r3, [r7, #3]
 8009148:	461a      	mov	r2, r3
 800914a:	2180      	movs	r1, #128	@ 0x80
 800914c:	4869      	ldr	r0, [pc, #420]	@ (80092f4 <digitalWrite+0x688>)
 800914e:	f7f9 fd59 	bl	8002c04 <HAL_GPIO_WritePin>
 8009152:	e0eb      	b.n	800932c <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, vlue); break;
 8009154:	78fb      	ldrb	r3, [r7, #3]
 8009156:	461a      	mov	r2, r3
 8009158:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800915c:	4865      	ldr	r0, [pc, #404]	@ (80092f4 <digitalWrite+0x688>)
 800915e:	f7f9 fd51 	bl	8002c04 <HAL_GPIO_WritePin>
 8009162:	e0e3      	b.n	800932c <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, vlue); break;
 8009164:	78fb      	ldrb	r3, [r7, #3]
 8009166:	461a      	mov	r2, r3
 8009168:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800916c:	4861      	ldr	r0, [pc, #388]	@ (80092f4 <digitalWrite+0x688>)
 800916e:	f7f9 fd49 	bl	8002c04 <HAL_GPIO_WritePin>
 8009172:	e0db      	b.n	800932c <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, vlue); break;
 8009174:	78fb      	ldrb	r3, [r7, #3]
 8009176:	461a      	mov	r2, r3
 8009178:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800917c:	485d      	ldr	r0, [pc, #372]	@ (80092f4 <digitalWrite+0x688>)
 800917e:	f7f9 fd41 	bl	8002c04 <HAL_GPIO_WritePin>
 8009182:	e0d3      	b.n	800932c <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, vlue); break;
 8009184:	78fb      	ldrb	r3, [r7, #3]
 8009186:	461a      	mov	r2, r3
 8009188:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800918c:	4859      	ldr	r0, [pc, #356]	@ (80092f4 <digitalWrite+0x688>)
 800918e:	f7f9 fd39 	bl	8002c04 <HAL_GPIO_WritePin>
 8009192:	e0cb      	b.n	800932c <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, vlue); break;
 8009194:	78fb      	ldrb	r3, [r7, #3]
 8009196:	461a      	mov	r2, r3
 8009198:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800919c:	4855      	ldr	r0, [pc, #340]	@ (80092f4 <digitalWrite+0x688>)
 800919e:	f7f9 fd31 	bl	8002c04 <HAL_GPIO_WritePin>
 80091a2:	e0c3      	b.n	800932c <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, vlue); break;
 80091a4:	78fb      	ldrb	r3, [r7, #3]
 80091a6:	461a      	mov	r2, r3
 80091a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80091ac:	4851      	ldr	r0, [pc, #324]	@ (80092f4 <digitalWrite+0x688>)
 80091ae:	f7f9 fd29 	bl	8002c04 <HAL_GPIO_WritePin>
 80091b2:	e0bb      	b.n	800932c <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, vlue); break;
 80091b4:	78fb      	ldrb	r3, [r7, #3]
 80091b6:	461a      	mov	r2, r3
 80091b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80091bc:	484d      	ldr	r0, [pc, #308]	@ (80092f4 <digitalWrite+0x688>)
 80091be:	f7f9 fd21 	bl	8002c04 <HAL_GPIO_WritePin>
 80091c2:	e0b3      	b.n	800932c <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, vlue); break;
 80091c4:	78fb      	ldrb	r3, [r7, #3]
 80091c6:	461a      	mov	r2, r3
 80091c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80091cc:	4849      	ldr	r0, [pc, #292]	@ (80092f4 <digitalWrite+0x688>)
 80091ce:	f7f9 fd19 	bl	8002c04 <HAL_GPIO_WritePin>
 80091d2:	e0ab      	b.n	800932c <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'E') {
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	3301      	adds	r3, #1
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	2b45      	cmp	r3, #69	@ 0x45
 80091dc:	f040 80a6 	bne.w	800932c <digitalWrite+0x6c0>
	        switch (PIN) {
 80091e0:	7bfb      	ldrb	r3, [r7, #15]
 80091e2:	2b0f      	cmp	r3, #15
 80091e4:	f200 80a2 	bhi.w	800932c <digitalWrite+0x6c0>
 80091e8:	a201      	add	r2, pc, #4	@ (adr r2, 80091f0 <digitalWrite+0x584>)
 80091ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ee:	bf00      	nop
 80091f0:	08009231 	.word	0x08009231
 80091f4:	0800923f 	.word	0x0800923f
 80091f8:	0800924d 	.word	0x0800924d
 80091fc:	0800925b 	.word	0x0800925b
 8009200:	08009269 	.word	0x08009269
 8009204:	08009277 	.word	0x08009277
 8009208:	08009285 	.word	0x08009285
 800920c:	08009293 	.word	0x08009293
 8009210:	080092a1 	.word	0x080092a1
 8009214:	080092b1 	.word	0x080092b1
 8009218:	080092c1 	.word	0x080092c1
 800921c:	080092d1 	.word	0x080092d1
 8009220:	080092e1 	.word	0x080092e1
 8009224:	080092fd 	.word	0x080092fd
 8009228:	0800930d 	.word	0x0800930d
 800922c:	0800931d 	.word	0x0800931d
	            case 0: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, vlue); break;
 8009230:	78fb      	ldrb	r3, [r7, #3]
 8009232:	461a      	mov	r2, r3
 8009234:	2101      	movs	r1, #1
 8009236:	4830      	ldr	r0, [pc, #192]	@ (80092f8 <digitalWrite+0x68c>)
 8009238:	f7f9 fce4 	bl	8002c04 <HAL_GPIO_WritePin>
 800923c:	e076      	b.n	800932c <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, vlue); break;
 800923e:	78fb      	ldrb	r3, [r7, #3]
 8009240:	461a      	mov	r2, r3
 8009242:	2102      	movs	r1, #2
 8009244:	482c      	ldr	r0, [pc, #176]	@ (80092f8 <digitalWrite+0x68c>)
 8009246:	f7f9 fcdd 	bl	8002c04 <HAL_GPIO_WritePin>
 800924a:	e06f      	b.n	800932c <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, vlue); break;
 800924c:	78fb      	ldrb	r3, [r7, #3]
 800924e:	461a      	mov	r2, r3
 8009250:	2104      	movs	r1, #4
 8009252:	4829      	ldr	r0, [pc, #164]	@ (80092f8 <digitalWrite+0x68c>)
 8009254:	f7f9 fcd6 	bl	8002c04 <HAL_GPIO_WritePin>
 8009258:	e068      	b.n	800932c <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, vlue); break;
 800925a:	78fb      	ldrb	r3, [r7, #3]
 800925c:	461a      	mov	r2, r3
 800925e:	2108      	movs	r1, #8
 8009260:	4825      	ldr	r0, [pc, #148]	@ (80092f8 <digitalWrite+0x68c>)
 8009262:	f7f9 fccf 	bl	8002c04 <HAL_GPIO_WritePin>
 8009266:	e061      	b.n	800932c <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, vlue); break;
 8009268:	78fb      	ldrb	r3, [r7, #3]
 800926a:	461a      	mov	r2, r3
 800926c:	2110      	movs	r1, #16
 800926e:	4822      	ldr	r0, [pc, #136]	@ (80092f8 <digitalWrite+0x68c>)
 8009270:	f7f9 fcc8 	bl	8002c04 <HAL_GPIO_WritePin>
 8009274:	e05a      	b.n	800932c <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, vlue); break;
 8009276:	78fb      	ldrb	r3, [r7, #3]
 8009278:	461a      	mov	r2, r3
 800927a:	2120      	movs	r1, #32
 800927c:	481e      	ldr	r0, [pc, #120]	@ (80092f8 <digitalWrite+0x68c>)
 800927e:	f7f9 fcc1 	bl	8002c04 <HAL_GPIO_WritePin>
 8009282:	e053      	b.n	800932c <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, vlue); break;
 8009284:	78fb      	ldrb	r3, [r7, #3]
 8009286:	461a      	mov	r2, r3
 8009288:	2140      	movs	r1, #64	@ 0x40
 800928a:	481b      	ldr	r0, [pc, #108]	@ (80092f8 <digitalWrite+0x68c>)
 800928c:	f7f9 fcba 	bl	8002c04 <HAL_GPIO_WritePin>
 8009290:	e04c      	b.n	800932c <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, vlue); break;
 8009292:	78fb      	ldrb	r3, [r7, #3]
 8009294:	461a      	mov	r2, r3
 8009296:	2180      	movs	r1, #128	@ 0x80
 8009298:	4817      	ldr	r0, [pc, #92]	@ (80092f8 <digitalWrite+0x68c>)
 800929a:	f7f9 fcb3 	bl	8002c04 <HAL_GPIO_WritePin>
 800929e:	e045      	b.n	800932c <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, vlue); break;
 80092a0:	78fb      	ldrb	r3, [r7, #3]
 80092a2:	461a      	mov	r2, r3
 80092a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80092a8:	4813      	ldr	r0, [pc, #76]	@ (80092f8 <digitalWrite+0x68c>)
 80092aa:	f7f9 fcab 	bl	8002c04 <HAL_GPIO_WritePin>
 80092ae:	e03d      	b.n	800932c <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, vlue); break;
 80092b0:	78fb      	ldrb	r3, [r7, #3]
 80092b2:	461a      	mov	r2, r3
 80092b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80092b8:	480f      	ldr	r0, [pc, #60]	@ (80092f8 <digitalWrite+0x68c>)
 80092ba:	f7f9 fca3 	bl	8002c04 <HAL_GPIO_WritePin>
 80092be:	e035      	b.n	800932c <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, vlue); break;
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	461a      	mov	r2, r3
 80092c4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80092c8:	480b      	ldr	r0, [pc, #44]	@ (80092f8 <digitalWrite+0x68c>)
 80092ca:	f7f9 fc9b 	bl	8002c04 <HAL_GPIO_WritePin>
 80092ce:	e02d      	b.n	800932c <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, vlue); break;
 80092d0:	78fb      	ldrb	r3, [r7, #3]
 80092d2:	461a      	mov	r2, r3
 80092d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80092d8:	4807      	ldr	r0, [pc, #28]	@ (80092f8 <digitalWrite+0x68c>)
 80092da:	f7f9 fc93 	bl	8002c04 <HAL_GPIO_WritePin>
 80092de:	e025      	b.n	800932c <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, vlue); break;
 80092e0:	78fb      	ldrb	r3, [r7, #3]
 80092e2:	461a      	mov	r2, r3
 80092e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80092e8:	4803      	ldr	r0, [pc, #12]	@ (80092f8 <digitalWrite+0x68c>)
 80092ea:	f7f9 fc8b 	bl	8002c04 <HAL_GPIO_WritePin>
 80092ee:	e01d      	b.n	800932c <digitalWrite+0x6c0>
 80092f0:	40020800 	.word	0x40020800
 80092f4:	40020c00 	.word	0x40020c00
 80092f8:	40021000 	.word	0x40021000
	            case 13: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, vlue); break;
 80092fc:	78fb      	ldrb	r3, [r7, #3]
 80092fe:	461a      	mov	r2, r3
 8009300:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009304:	480b      	ldr	r0, [pc, #44]	@ (8009334 <digitalWrite+0x6c8>)
 8009306:	f7f9 fc7d 	bl	8002c04 <HAL_GPIO_WritePin>
 800930a:	e00f      	b.n	800932c <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, vlue); break;
 800930c:	78fb      	ldrb	r3, [r7, #3]
 800930e:	461a      	mov	r2, r3
 8009310:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009314:	4807      	ldr	r0, [pc, #28]	@ (8009334 <digitalWrite+0x6c8>)
 8009316:	f7f9 fc75 	bl	8002c04 <HAL_GPIO_WritePin>
 800931a:	e007      	b.n	800932c <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, vlue); break;
 800931c:	78fb      	ldrb	r3, [r7, #3]
 800931e:	461a      	mov	r2, r3
 8009320:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009324:	4803      	ldr	r0, [pc, #12]	@ (8009334 <digitalWrite+0x6c8>)
 8009326:	f7f9 fc6d 	bl	8002c04 <HAL_GPIO_WritePin>
 800932a:	bf00      	nop
	        }
	    }
}
 800932c:	bf00      	nop
 800932e:	3710      	adds	r7, #16
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	40021000 	.word	0x40021000

08009338 <Setup_Forward_Kinematic>:

float _Lx;
float _Ly;
float _Radius_wheel;

void Setup_Forward_Kinematic(float Lx ,float Ly ,float Radius_wheel){
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	ed87 0a03 	vstr	s0, [r7, #12]
 8009342:	edc7 0a02 	vstr	s1, [r7, #8]
 8009346:	ed87 1a01 	vstr	s2, [r7, #4]
	_Lx = Lx;
 800934a:	4a07      	ldr	r2, [pc, #28]	@ (8009368 <Setup_Forward_Kinematic+0x30>)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6013      	str	r3, [r2, #0]
	_Ly = Ly;
 8009350:	4a06      	ldr	r2, [pc, #24]	@ (800936c <Setup_Forward_Kinematic+0x34>)
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	6013      	str	r3, [r2, #0]
	_Radius_wheel = Radius_wheel;
 8009356:	4a06      	ldr	r2, [pc, #24]	@ (8009370 <Setup_Forward_Kinematic+0x38>)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6013      	str	r3, [r2, #0]
}
 800935c:	bf00      	nop
 800935e:	3714      	adds	r7, #20
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	200007dc 	.word	0x200007dc
 800936c:	200007e0 	.word	0x200007e0
 8009370:	200007e4 	.word	0x200007e4

08009374 <Setup_frequency_Forward_Kinematic>:

float _Pos_X = 0.0f;
float _Pos_Y = 0.0f;
float _Pos_Z = 0.0f;

void Setup_frequency_Forward_Kinematic(uint8_t freq){
 8009374:	b480      	push	{r7}
 8009376:	b083      	sub	sp, #12
 8009378:	af00      	add	r7, sp, #0
 800937a:	4603      	mov	r3, r0
 800937c:	71fb      	strb	r3, [r7, #7]
	__freq = freq;
 800937e:	4a04      	ldr	r2, [pc, #16]	@ (8009390 <Setup_frequency_Forward_Kinematic+0x1c>)
 8009380:	79fb      	ldrb	r3, [r7, #7]
 8009382:	7013      	strb	r3, [r2, #0]
}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr
 8009390:	20000010 	.word	0x20000010

08009394 <Setup_Inverse_Kinematic>:

float Lx_;
float Ly_;
float Radius_wheel_;

void Setup_Inverse_Kinematic(float Lx ,float Ly ,float Radius_wheel){
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	ed87 0a03 	vstr	s0, [r7, #12]
 800939e:	edc7 0a02 	vstr	s1, [r7, #8]
 80093a2:	ed87 1a01 	vstr	s2, [r7, #4]
	Lx_ = Lx;
 80093a6:	4a07      	ldr	r2, [pc, #28]	@ (80093c4 <Setup_Inverse_Kinematic+0x30>)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6013      	str	r3, [r2, #0]
	Ly_ = Ly;
 80093ac:	4a06      	ldr	r2, [pc, #24]	@ (80093c8 <Setup_Inverse_Kinematic+0x34>)
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	6013      	str	r3, [r2, #0]
	Radius_wheel_ = Radius_wheel;
 80093b2:	4a06      	ldr	r2, [pc, #24]	@ (80093cc <Setup_Inverse_Kinematic+0x38>)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6013      	str	r3, [r2, #0]
}
 80093b8:	bf00      	nop
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	200007e8 	.word	0x200007e8
 80093c8:	200007ec 	.word	0x200007ec
 80093cc:	200007f0 	.word	0x200007f0

080093d0 <app_ros_comm_runner>:
// Private variable
uint8_t comm_fsm        = 0;
uint8_t rx_timeOutFlag = 0;


void app_ros_comm_runner(){
 80093d0:	b580      	push	{r7, lr}
 80093d2:	af00      	add	r7, sp, #0

  if((uwTick - commTimeout_millis) > COMM_TIMEOUT_MS){
 80093d4:	4b1c      	ldr	r3, [pc, #112]	@ (8009448 <app_ros_comm_runner+0x78>)
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	4b1c      	ldr	r3, [pc, #112]	@ (800944c <app_ros_comm_runner+0x7c>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	2b27      	cmp	r3, #39	@ 0x27
 80093e0:	d919      	bls.n	8009416 <app_ros_comm_runner+0x46>
    commTimeout_millis = uwTick;
 80093e2:	4b19      	ldr	r3, [pc, #100]	@ (8009448 <app_ros_comm_runner+0x78>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a19      	ldr	r2, [pc, #100]	@ (800944c <app_ros_comm_runner+0x7c>)
 80093e8:	6013      	str	r3, [r2, #0]
    comm_fsm = COMMSTATE_WAITFORREPLY;
 80093ea:	4b19      	ldr	r3, [pc, #100]	@ (8009450 <app_ros_comm_runner+0x80>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	701a      	strb	r2, [r3, #0]
    rx_timeOutFlag = 1;
 80093f0:	4b18      	ldr	r3, [pc, #96]	@ (8009454 <app_ros_comm_runner+0x84>)
 80093f2:	2201      	movs	r2, #1
 80093f4:	701a      	strb	r2, [r3, #0]

    motor_cmdvel_ptr_t.v1 = 0.0f;
 80093f6:	4b18      	ldr	r3, [pc, #96]	@ (8009458 <app_ros_comm_runner+0x88>)
 80093f8:	f04f 0200 	mov.w	r2, #0
 80093fc:	601a      	str	r2, [r3, #0]
    motor_cmdvel_ptr_t.v2 = 0.0f;
 80093fe:	4b16      	ldr	r3, [pc, #88]	@ (8009458 <app_ros_comm_runner+0x88>)
 8009400:	f04f 0200 	mov.w	r2, #0
 8009404:	605a      	str	r2, [r3, #4]
    motor_cmdvel_ptr_t.v3 = 0.0f;
 8009406:	4b14      	ldr	r3, [pc, #80]	@ (8009458 <app_ros_comm_runner+0x88>)
 8009408:	f04f 0200 	mov.w	r2, #0
 800940c:	609a      	str	r2, [r3, #8]
    motor_cmdvel_ptr_t.v4 = 0.0f;
 800940e:	4b12      	ldr	r3, [pc, #72]	@ (8009458 <app_ros_comm_runner+0x88>)
 8009410:	f04f 0200 	mov.w	r2, #0
 8009414:	60da      	str	r2, [r3, #12]
  }

  switch(comm_fsm){
 8009416:	4b0e      	ldr	r3, [pc, #56]	@ (8009450 <app_ros_comm_runner+0x80>)
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d002      	beq.n	8009424 <app_ros_comm_runner+0x54>
 800941e:	2b01      	cmp	r3, #1
 8009420:	d00a      	beq.n	8009438 <app_ros_comm_runner+0x68>
        comm_fsm = COMMSTATE_WAITFORREPLY;
    }
    break;
  }

}
 8009422:	e00f      	b.n	8009444 <app_ros_comm_runner+0x74>
      commTimeout_millis = uwTick;
 8009424:	4b08      	ldr	r3, [pc, #32]	@ (8009448 <app_ros_comm_runner+0x78>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a08      	ldr	r2, [pc, #32]	@ (800944c <app_ros_comm_runner+0x7c>)
 800942a:	6013      	str	r3, [r2, #0]
      rx_timeOutFlag = 0;
 800942c:	4b09      	ldr	r3, [pc, #36]	@ (8009454 <app_ros_comm_runner+0x84>)
 800942e:	2200      	movs	r2, #0
 8009430:	701a      	strb	r2, [r3, #0]
      app_ros_comm_processRX();
 8009432:	f000 f813 	bl	800945c <app_ros_comm_processRX>
    break;
 8009436:	e005      	b.n	8009444 <app_ros_comm_runner+0x74>
    	app_ros_comm_txPoll();
 8009438:	f000 f862 	bl	8009500 <app_ros_comm_txPoll>
        comm_fsm = COMMSTATE_WAITFORREPLY;
 800943c:	4b04      	ldr	r3, [pc, #16]	@ (8009450 <app_ros_comm_runner+0x80>)
 800943e:	2200      	movs	r2, #0
 8009440:	701a      	strb	r2, [r3, #0]
    break;
 8009442:	bf00      	nop
}
 8009444:	bf00      	nop
 8009446:	bd80      	pop	{r7, pc}
 8009448:	20000640 	.word	0x20000640
 800944c:	20000840 	.word	0x20000840
 8009450:	20000844 	.word	0x20000844
 8009454:	20000845 	.word	0x20000845
 8009458:	20000800 	.word	0x20000800

0800945c <app_ros_comm_processRX>:

void app_ros_comm_processRX(){
 800945c:	b580      	push	{r7, lr}
 800945e:	af00      	add	r7, sp, #0
  if(
  (rbc_Packet_t.rbcHeader[0] != 'R')  ||
 8009460:	4b20      	ldr	r3, [pc, #128]	@ (80094e4 <app_ros_comm_processRX+0x88>)
 8009462:	781b      	ldrb	r3, [r3, #0]
  if(
 8009464:	2b52      	cmp	r3, #82	@ 0x52
 8009466:	d13a      	bne.n	80094de <app_ros_comm_processRX+0x82>
  (rbc_Packet_t.rbcHeader[1] != 'B')
 8009468:	4b1e      	ldr	r3, [pc, #120]	@ (80094e4 <app_ros_comm_processRX+0x88>)
 800946a:	785b      	ldrb	r3, [r3, #1]
  (rbc_Packet_t.rbcHeader[0] != 'R')  ||
 800946c:	2b42      	cmp	r3, #66	@ 0x42
 800946e:	d136      	bne.n	80094de <app_ros_comm_processRX+0x82>
  )
    return;

  // Apply header
  rbc_Packet_t.ajbHeader[0] = 'J';
 8009470:	4b1c      	ldr	r3, [pc, #112]	@ (80094e4 <app_ros_comm_processRX+0x88>)
 8009472:	224a      	movs	r2, #74	@ 0x4a
 8009474:	735a      	strb	r2, [r3, #13]
  rbc_Packet_t.ajbHeader[1] = 'B';
 8009476:	4b1b      	ldr	r3, [pc, #108]	@ (80094e4 <app_ros_comm_processRX+0x88>)
 8009478:	2242      	movs	r2, #66	@ 0x42
 800947a:	739a      	strb	r2, [r3, #14]

  // Apply motor RPM command
  motor_cmdvel_ptr_t.v1  =
    (float)rbc_Packet_t.motorControl.motor1_ctrl;// LF
 800947c:	4b19      	ldr	r3, [pc, #100]	@ (80094e4 <app_ros_comm_processRX+0x88>)
 800947e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009482:	ee07 3a90 	vmov	s15, r3
 8009486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  motor_cmdvel_ptr_t.v1  =
 800948a:	4b17      	ldr	r3, [pc, #92]	@ (80094e8 <app_ros_comm_processRX+0x8c>)
 800948c:	edc3 7a00 	vstr	s15, [r3]
  motor_cmdvel_ptr_t.v2  =
    (float)rbc_Packet_t.motorControl.motor2_ctrl;// LB
 8009490:	4b14      	ldr	r3, [pc, #80]	@ (80094e4 <app_ros_comm_processRX+0x88>)
 8009492:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009496:	ee07 3a90 	vmov	s15, r3
 800949a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  motor_cmdvel_ptr_t.v2  =
 800949e:	4b12      	ldr	r3, [pc, #72]	@ (80094e8 <app_ros_comm_processRX+0x8c>)
 80094a0:	edc3 7a01 	vstr	s15, [r3, #4]
  motor_cmdvel_ptr_t.v3  =
    (float)rbc_Packet_t.motorControl.motor3_ctrl;// RB
 80094a4:	4b0f      	ldr	r3, [pc, #60]	@ (80094e4 <app_ros_comm_processRX+0x88>)
 80094a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80094aa:	ee07 3a90 	vmov	s15, r3
 80094ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  motor_cmdvel_ptr_t.v3  =
 80094b2:	4b0d      	ldr	r3, [pc, #52]	@ (80094e8 <app_ros_comm_processRX+0x8c>)
 80094b4:	edc3 7a02 	vstr	s15, [r3, #8]
  motor_cmdvel_ptr_t.v4  =
    (float)rbc_Packet_t.motorControl.motor4_ctrl;// RF
 80094b8:	4b0a      	ldr	r3, [pc, #40]	@ (80094e4 <app_ros_comm_processRX+0x88>)
 80094ba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80094be:	ee07 3a90 	vmov	s15, r3
 80094c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  motor_cmdvel_ptr_t.v4  =
 80094c6:	4b08      	ldr	r3, [pc, #32]	@ (80094e8 <app_ros_comm_processRX+0x8c>)
 80094c8:	edc3 7a03 	vstr	s15, [r3, #12]

  // Reply command
  rbc_Packet_t.cmdDataMCU = 0x00;
 80094cc:	4b05      	ldr	r3, [pc, #20]	@ (80094e4 <app_ros_comm_processRX+0x88>)
 80094ce:	2200      	movs	r2, #0
 80094d0:	73da      	strb	r2, [r3, #15]

  // Process PC command
  app_ros_comm_comandProcessor();
 80094d2:	f000 f80d 	bl	80094f0 <app_ros_comm_comandProcessor>

  comm_fsm = COMMSTATE_REPLYDATA;
 80094d6:	4b05      	ldr	r3, [pc, #20]	@ (80094ec <app_ros_comm_processRX+0x90>)
 80094d8:	2201      	movs	r2, #1
 80094da:	701a      	strb	r2, [r3, #0]
 80094dc:	e000      	b.n	80094e0 <app_ros_comm_processRX+0x84>
    return;
 80094de:	bf00      	nop
}
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	20000810 	.word	0x20000810
 80094e8:	20000800 	.word	0x20000800
 80094ec:	20000844 	.word	0x20000844

080094f0 <app_ros_comm_comandProcessor>:

void app_ros_comm_comandProcessor(){
 80094f0:	b480      	push	{r7}
 80094f2:	af00      	add	r7, sp, #0
//        // Reply command
//        rbc_Packet_t.cmdDataMCU = 0x00;
//      break;
//  }
//
}
 80094f4:	bf00      	nop
 80094f6:	46bd      	mov	sp, r7
 80094f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fc:	4770      	bx	lr
	...

08009500 <app_ros_comm_txPoll>:

void app_ros_comm_txPoll(){
 8009500:	b580      	push	{r7, lr}
 8009502:	af00      	add	r7, sp, #0
	// Send encoder RPM count
	  rbc_Packet_t.motorFeedBack.motor1_fb  = _RPM[0];                       // LF
 8009504:	4b2a      	ldr	r3, [pc, #168]	@ (80095b0 <app_ros_comm_txPoll+0xb0>)
 8009506:	edd3 7a00 	vldr	s15, [r3]
 800950a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800950e:	ee17 3a90 	vmov	r3, s15
 8009512:	b21a      	sxth	r2, r3
 8009514:	4b27      	ldr	r3, [pc, #156]	@ (80095b4 <app_ros_comm_txPoll+0xb4>)
 8009516:	821a      	strh	r2, [r3, #16]
	  rbc_Packet_t.motorFeedBack.motor2_fb  = _RPM[1];                       // LB
 8009518:	4b25      	ldr	r3, [pc, #148]	@ (80095b0 <app_ros_comm_txPoll+0xb0>)
 800951a:	edd3 7a01 	vldr	s15, [r3, #4]
 800951e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009522:	ee17 3a90 	vmov	r3, s15
 8009526:	b21a      	sxth	r2, r3
 8009528:	4b22      	ldr	r3, [pc, #136]	@ (80095b4 <app_ros_comm_txPoll+0xb4>)
 800952a:	825a      	strh	r2, [r3, #18]
	  rbc_Packet_t.motorFeedBack.motor3_fb  = _RPM[2];                       // RB
 800952c:	4b20      	ldr	r3, [pc, #128]	@ (80095b0 <app_ros_comm_txPoll+0xb0>)
 800952e:	edd3 7a02 	vldr	s15, [r3, #8]
 8009532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009536:	ee17 3a90 	vmov	r3, s15
 800953a:	b21a      	sxth	r2, r3
 800953c:	4b1d      	ldr	r3, [pc, #116]	@ (80095b4 <app_ros_comm_txPoll+0xb4>)
 800953e:	829a      	strh	r2, [r3, #20]
	  rbc_Packet_t.motorFeedBack.motor4_fb  = _RPM[3];                       // RF
 8009540:	4b1b      	ldr	r3, [pc, #108]	@ (80095b0 <app_ros_comm_txPoll+0xb0>)
 8009542:	edd3 7a03 	vldr	s15, [r3, #12]
 8009546:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800954a:	ee17 3a90 	vmov	r3, s15
 800954e:	b21a      	sxth	r2, r3
 8009550:	4b18      	ldr	r3, [pc, #96]	@ (80095b4 <app_ros_comm_txPoll+0xb4>)
 8009552:	82da      	strh	r2, [r3, #22]

	// Send gyro data
	  rbc_Packet_t.gyro_x_raw = imu_data.gx;
 8009554:	4b18      	ldr	r3, [pc, #96]	@ (80095b8 <app_ros_comm_txPoll+0xb8>)
 8009556:	f9b3 2000 	ldrsh.w	r2, [r3]
 800955a:	4b16      	ldr	r3, [pc, #88]	@ (80095b4 <app_ros_comm_txPoll+0xb4>)
 800955c:	835a      	strh	r2, [r3, #26]
	  rbc_Packet_t.gyro_y_raw = imu_data.gy;
 800955e:	4b16      	ldr	r3, [pc, #88]	@ (80095b8 <app_ros_comm_txPoll+0xb8>)
 8009560:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009564:	4b13      	ldr	r3, [pc, #76]	@ (80095b4 <app_ros_comm_txPoll+0xb4>)
 8009566:	839a      	strh	r2, [r3, #28]
	  rbc_Packet_t.gyro_z_raw = imu_data.gz;
 8009568:	4b13      	ldr	r3, [pc, #76]	@ (80095b8 <app_ros_comm_txPoll+0xb8>)
 800956a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800956e:	4b11      	ldr	r3, [pc, #68]	@ (80095b4 <app_ros_comm_txPoll+0xb4>)
 8009570:	83da      	strh	r2, [r3, #30]
		// Send mag data
//	  rbc_Packet_t.mag_x_raw = imu_acmag_data_ptr_t->mag_x;
//	  rbc_Packet_t.mag_y_raw = imu_acmag_data_ptr_t->mag_y;
//	  rbc_Packet_t.mag_z_raw = imu_acmag_data_ptr_t->mag_z;

	  rbc_Packet_t.mag_x_raw = 0;
 8009572:	4b10      	ldr	r3, [pc, #64]	@ (80095b4 <app_ros_comm_txPoll+0xb4>)
 8009574:	2200      	movs	r2, #0
 8009576:	841a      	strh	r2, [r3, #32]
	  rbc_Packet_t.mag_y_raw = 0;
 8009578:	4b0e      	ldr	r3, [pc, #56]	@ (80095b4 <app_ros_comm_txPoll+0xb4>)
 800957a:	2200      	movs	r2, #0
 800957c:	845a      	strh	r2, [r3, #34]	@ 0x22
	  rbc_Packet_t.mag_z_raw = 0;
 800957e:	4b0d      	ldr	r3, [pc, #52]	@ (80095b4 <app_ros_comm_txPoll+0xb4>)
 8009580:	2200      	movs	r2, #0
 8009582:	849a      	strh	r2, [r3, #36]	@ 0x24

		// Send accel data
	  rbc_Packet_t.acc_x_raw = imu_data.Ax;
 8009584:	4b0c      	ldr	r3, [pc, #48]	@ (80095b8 <app_ros_comm_txPoll+0xb8>)
 8009586:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800958a:	4b0a      	ldr	r3, [pc, #40]	@ (80095b4 <app_ros_comm_txPoll+0xb4>)
 800958c:	84da      	strh	r2, [r3, #38]	@ 0x26
	  rbc_Packet_t.acc_y_raw = imu_data.Ay;
 800958e:	4b0a      	ldr	r3, [pc, #40]	@ (80095b8 <app_ros_comm_txPoll+0xb8>)
 8009590:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8009594:	4b07      	ldr	r3, [pc, #28]	@ (80095b4 <app_ros_comm_txPoll+0xb4>)
 8009596:	851a      	strh	r2, [r3, #40]	@ 0x28
	  rbc_Packet_t.acc_z_raw = imu_data.Az;
 8009598:	4b07      	ldr	r3, [pc, #28]	@ (80095b8 <app_ros_comm_txPoll+0xb8>)
 800959a:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800959e:	4b05      	ldr	r3, [pc, #20]	@ (80095b4 <app_ros_comm_txPoll+0xb4>)
 80095a0:	855a      	strh	r2, [r3, #42]	@ 0x2a


	  CDC_Transmit_FS((uint8_t *)(&rbc_Packet_t.ajbHeader), ROS_COMM_TX_SIZE);
 80095a2:	2120      	movs	r1, #32
 80095a4:	4805      	ldr	r0, [pc, #20]	@ (80095bc <app_ros_comm_txPoll+0xbc>)
 80095a6:	f002 f8b3 	bl	800b710 <CDC_Transmit_FS>

}
 80095aa:	bf00      	nop
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	200006b0 	.word	0x200006b0
 80095b4:	20000810 	.word	0x20000810
 80095b8:	200007f4 	.word	0x200007f4
 80095bc:	2000081d 	.word	0x2000081d

080095c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80095cc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80095d0:	f002 fcc0 	bl	800bf54 <USBD_static_malloc>
 80095d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d109      	bne.n	80095f0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	32b0      	adds	r2, #176	@ 0xb0
 80095e6:	2100      	movs	r1, #0
 80095e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80095ec:	2302      	movs	r3, #2
 80095ee:	e0d4      	b.n	800979a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80095f0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80095f4:	2100      	movs	r1, #0
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f002 fcf0 	bl	800bfdc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	32b0      	adds	r2, #176	@ 0xb0
 8009606:	68f9      	ldr	r1, [r7, #12]
 8009608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	32b0      	adds	r2, #176	@ 0xb0
 8009616:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	7c1b      	ldrb	r3, [r3, #16]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d138      	bne.n	800969a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009628:	4b5e      	ldr	r3, [pc, #376]	@ (80097a4 <USBD_CDC_Init+0x1e4>)
 800962a:	7819      	ldrb	r1, [r3, #0]
 800962c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009630:	2202      	movs	r2, #2
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f002 fb6b 	bl	800bd0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009638:	4b5a      	ldr	r3, [pc, #360]	@ (80097a4 <USBD_CDC_Init+0x1e4>)
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	f003 020f 	and.w	r2, r3, #15
 8009640:	6879      	ldr	r1, [r7, #4]
 8009642:	4613      	mov	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	4413      	add	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	440b      	add	r3, r1
 800964c:	3324      	adds	r3, #36	@ 0x24
 800964e:	2201      	movs	r2, #1
 8009650:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009652:	4b55      	ldr	r3, [pc, #340]	@ (80097a8 <USBD_CDC_Init+0x1e8>)
 8009654:	7819      	ldrb	r1, [r3, #0]
 8009656:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800965a:	2202      	movs	r2, #2
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f002 fb56 	bl	800bd0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009662:	4b51      	ldr	r3, [pc, #324]	@ (80097a8 <USBD_CDC_Init+0x1e8>)
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	f003 020f 	and.w	r2, r3, #15
 800966a:	6879      	ldr	r1, [r7, #4]
 800966c:	4613      	mov	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4413      	add	r3, r2
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	440b      	add	r3, r1
 8009676:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800967a:	2201      	movs	r2, #1
 800967c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800967e:	4b4b      	ldr	r3, [pc, #300]	@ (80097ac <USBD_CDC_Init+0x1ec>)
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	f003 020f 	and.w	r2, r3, #15
 8009686:	6879      	ldr	r1, [r7, #4]
 8009688:	4613      	mov	r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4413      	add	r3, r2
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	440b      	add	r3, r1
 8009692:	3326      	adds	r3, #38	@ 0x26
 8009694:	2210      	movs	r2, #16
 8009696:	801a      	strh	r2, [r3, #0]
 8009698:	e035      	b.n	8009706 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800969a:	4b42      	ldr	r3, [pc, #264]	@ (80097a4 <USBD_CDC_Init+0x1e4>)
 800969c:	7819      	ldrb	r1, [r3, #0]
 800969e:	2340      	movs	r3, #64	@ 0x40
 80096a0:	2202      	movs	r2, #2
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f002 fb33 	bl	800bd0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80096a8:	4b3e      	ldr	r3, [pc, #248]	@ (80097a4 <USBD_CDC_Init+0x1e4>)
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	f003 020f 	and.w	r2, r3, #15
 80096b0:	6879      	ldr	r1, [r7, #4]
 80096b2:	4613      	mov	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	4413      	add	r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	440b      	add	r3, r1
 80096bc:	3324      	adds	r3, #36	@ 0x24
 80096be:	2201      	movs	r2, #1
 80096c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80096c2:	4b39      	ldr	r3, [pc, #228]	@ (80097a8 <USBD_CDC_Init+0x1e8>)
 80096c4:	7819      	ldrb	r1, [r3, #0]
 80096c6:	2340      	movs	r3, #64	@ 0x40
 80096c8:	2202      	movs	r2, #2
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f002 fb1f 	bl	800bd0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80096d0:	4b35      	ldr	r3, [pc, #212]	@ (80097a8 <USBD_CDC_Init+0x1e8>)
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	f003 020f 	and.w	r2, r3, #15
 80096d8:	6879      	ldr	r1, [r7, #4]
 80096da:	4613      	mov	r3, r2
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	009b      	lsls	r3, r3, #2
 80096e2:	440b      	add	r3, r1
 80096e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80096e8:	2201      	movs	r2, #1
 80096ea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80096ec:	4b2f      	ldr	r3, [pc, #188]	@ (80097ac <USBD_CDC_Init+0x1ec>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	f003 020f 	and.w	r2, r3, #15
 80096f4:	6879      	ldr	r1, [r7, #4]
 80096f6:	4613      	mov	r3, r2
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	4413      	add	r3, r2
 80096fc:	009b      	lsls	r3, r3, #2
 80096fe:	440b      	add	r3, r1
 8009700:	3326      	adds	r3, #38	@ 0x26
 8009702:	2210      	movs	r2, #16
 8009704:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009706:	4b29      	ldr	r3, [pc, #164]	@ (80097ac <USBD_CDC_Init+0x1ec>)
 8009708:	7819      	ldrb	r1, [r3, #0]
 800970a:	2308      	movs	r3, #8
 800970c:	2203      	movs	r2, #3
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f002 fafd 	bl	800bd0e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009714:	4b25      	ldr	r3, [pc, #148]	@ (80097ac <USBD_CDC_Init+0x1ec>)
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	f003 020f 	and.w	r2, r3, #15
 800971c:	6879      	ldr	r1, [r7, #4]
 800971e:	4613      	mov	r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	440b      	add	r3, r1
 8009728:	3324      	adds	r3, #36	@ 0x24
 800972a:	2201      	movs	r2, #1
 800972c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2200      	movs	r2, #0
 8009732:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	33b0      	adds	r3, #176	@ 0xb0
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	4413      	add	r3, r2
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2200      	movs	r2, #0
 800974e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009760:	2b00      	cmp	r3, #0
 8009762:	d101      	bne.n	8009768 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009764:	2302      	movs	r3, #2
 8009766:	e018      	b.n	800979a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	7c1b      	ldrb	r3, [r3, #16]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d10a      	bne.n	8009786 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009770:	4b0d      	ldr	r3, [pc, #52]	@ (80097a8 <USBD_CDC_Init+0x1e8>)
 8009772:	7819      	ldrb	r1, [r3, #0]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800977a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f002 fbb4 	bl	800beec <USBD_LL_PrepareReceive>
 8009784:	e008      	b.n	8009798 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009786:	4b08      	ldr	r3, [pc, #32]	@ (80097a8 <USBD_CDC_Init+0x1e8>)
 8009788:	7819      	ldrb	r1, [r3, #0]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009790:	2340      	movs	r3, #64	@ 0x40
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f002 fbaa 	bl	800beec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	2000009b 	.word	0x2000009b
 80097a8:	2000009c 	.word	0x2000009c
 80097ac:	2000009d 	.word	0x2000009d

080097b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	460b      	mov	r3, r1
 80097ba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80097bc:	4b3a      	ldr	r3, [pc, #232]	@ (80098a8 <USBD_CDC_DeInit+0xf8>)
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	4619      	mov	r1, r3
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f002 fac9 	bl	800bd5a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80097c8:	4b37      	ldr	r3, [pc, #220]	@ (80098a8 <USBD_CDC_DeInit+0xf8>)
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	f003 020f 	and.w	r2, r3, #15
 80097d0:	6879      	ldr	r1, [r7, #4]
 80097d2:	4613      	mov	r3, r2
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4413      	add	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	440b      	add	r3, r1
 80097dc:	3324      	adds	r3, #36	@ 0x24
 80097de:	2200      	movs	r2, #0
 80097e0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80097e2:	4b32      	ldr	r3, [pc, #200]	@ (80098ac <USBD_CDC_DeInit+0xfc>)
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	4619      	mov	r1, r3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f002 fab6 	bl	800bd5a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80097ee:	4b2f      	ldr	r3, [pc, #188]	@ (80098ac <USBD_CDC_DeInit+0xfc>)
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	f003 020f 	and.w	r2, r3, #15
 80097f6:	6879      	ldr	r1, [r7, #4]
 80097f8:	4613      	mov	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	440b      	add	r3, r1
 8009802:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009806:	2200      	movs	r2, #0
 8009808:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800980a:	4b29      	ldr	r3, [pc, #164]	@ (80098b0 <USBD_CDC_DeInit+0x100>)
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	4619      	mov	r1, r3
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f002 faa2 	bl	800bd5a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009816:	4b26      	ldr	r3, [pc, #152]	@ (80098b0 <USBD_CDC_DeInit+0x100>)
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	f003 020f 	and.w	r2, r3, #15
 800981e:	6879      	ldr	r1, [r7, #4]
 8009820:	4613      	mov	r3, r2
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	4413      	add	r3, r2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	440b      	add	r3, r1
 800982a:	3324      	adds	r3, #36	@ 0x24
 800982c:	2200      	movs	r2, #0
 800982e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009830:	4b1f      	ldr	r3, [pc, #124]	@ (80098b0 <USBD_CDC_DeInit+0x100>)
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	f003 020f 	and.w	r2, r3, #15
 8009838:	6879      	ldr	r1, [r7, #4]
 800983a:	4613      	mov	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	440b      	add	r3, r1
 8009844:	3326      	adds	r3, #38	@ 0x26
 8009846:	2200      	movs	r2, #0
 8009848:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	32b0      	adds	r2, #176	@ 0xb0
 8009854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d01f      	beq.n	800989c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	33b0      	adds	r3, #176	@ 0xb0
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	32b0      	adds	r2, #176	@ 0xb0
 800987a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800987e:	4618      	mov	r0, r3
 8009880:	f002 fb76 	bl	800bf70 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	32b0      	adds	r2, #176	@ 0xb0
 800988e:	2100      	movs	r1, #0
 8009890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800989c:	2300      	movs	r3, #0
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3708      	adds	r7, #8
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	2000009b 	.word	0x2000009b
 80098ac:	2000009c 	.word	0x2000009c
 80098b0:	2000009d 	.word	0x2000009d

080098b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	32b0      	adds	r2, #176	@ 0xb0
 80098c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80098ce:	2300      	movs	r3, #0
 80098d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80098d2:	2300      	movs	r3, #0
 80098d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80098d6:	2300      	movs	r3, #0
 80098d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d101      	bne.n	80098e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80098e0:	2303      	movs	r3, #3
 80098e2:	e0bf      	b.n	8009a64 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d050      	beq.n	8009992 <USBD_CDC_Setup+0xde>
 80098f0:	2b20      	cmp	r3, #32
 80098f2:	f040 80af 	bne.w	8009a54 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	88db      	ldrh	r3, [r3, #6]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d03a      	beq.n	8009974 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	b25b      	sxtb	r3, r3
 8009904:	2b00      	cmp	r3, #0
 8009906:	da1b      	bge.n	8009940 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	33b0      	adds	r3, #176	@ 0xb0
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	689b      	ldr	r3, [r3, #8]
 800991a:	683a      	ldr	r2, [r7, #0]
 800991c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800991e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009920:	683a      	ldr	r2, [r7, #0]
 8009922:	88d2      	ldrh	r2, [r2, #6]
 8009924:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	88db      	ldrh	r3, [r3, #6]
 800992a:	2b07      	cmp	r3, #7
 800992c:	bf28      	it	cs
 800992e:	2307      	movcs	r3, #7
 8009930:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	89fa      	ldrh	r2, [r7, #14]
 8009936:	4619      	mov	r1, r3
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f001 fd93 	bl	800b464 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800993e:	e090      	b.n	8009a62 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	785a      	ldrb	r2, [r3, #1]
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	88db      	ldrh	r3, [r3, #6]
 800994e:	2b3f      	cmp	r3, #63	@ 0x3f
 8009950:	d803      	bhi.n	800995a <USBD_CDC_Setup+0xa6>
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	88db      	ldrh	r3, [r3, #6]
 8009956:	b2da      	uxtb	r2, r3
 8009958:	e000      	b.n	800995c <USBD_CDC_Setup+0xa8>
 800995a:	2240      	movs	r2, #64	@ 0x40
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009962:	6939      	ldr	r1, [r7, #16]
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800996a:	461a      	mov	r2, r3
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f001 fda5 	bl	800b4bc <USBD_CtlPrepareRx>
      break;
 8009972:	e076      	b.n	8009a62 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	33b0      	adds	r3, #176	@ 0xb0
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	4413      	add	r3, r2
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	7850      	ldrb	r0, [r2, #1]
 800998a:	2200      	movs	r2, #0
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	4798      	blx	r3
      break;
 8009990:	e067      	b.n	8009a62 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	785b      	ldrb	r3, [r3, #1]
 8009996:	2b0b      	cmp	r3, #11
 8009998:	d851      	bhi.n	8009a3e <USBD_CDC_Setup+0x18a>
 800999a:	a201      	add	r2, pc, #4	@ (adr r2, 80099a0 <USBD_CDC_Setup+0xec>)
 800999c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a0:	080099d1 	.word	0x080099d1
 80099a4:	08009a4d 	.word	0x08009a4d
 80099a8:	08009a3f 	.word	0x08009a3f
 80099ac:	08009a3f 	.word	0x08009a3f
 80099b0:	08009a3f 	.word	0x08009a3f
 80099b4:	08009a3f 	.word	0x08009a3f
 80099b8:	08009a3f 	.word	0x08009a3f
 80099bc:	08009a3f 	.word	0x08009a3f
 80099c0:	08009a3f 	.word	0x08009a3f
 80099c4:	08009a3f 	.word	0x08009a3f
 80099c8:	080099fb 	.word	0x080099fb
 80099cc:	08009a25 	.word	0x08009a25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	2b03      	cmp	r3, #3
 80099da:	d107      	bne.n	80099ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80099dc:	f107 030a 	add.w	r3, r7, #10
 80099e0:	2202      	movs	r2, #2
 80099e2:	4619      	mov	r1, r3
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f001 fd3d 	bl	800b464 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099ea:	e032      	b.n	8009a52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80099ec:	6839      	ldr	r1, [r7, #0]
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f001 fcbb 	bl	800b36a <USBD_CtlError>
            ret = USBD_FAIL;
 80099f4:	2303      	movs	r3, #3
 80099f6:	75fb      	strb	r3, [r7, #23]
          break;
 80099f8:	e02b      	b.n	8009a52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	2b03      	cmp	r3, #3
 8009a04:	d107      	bne.n	8009a16 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009a06:	f107 030d 	add.w	r3, r7, #13
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f001 fd28 	bl	800b464 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a14:	e01d      	b.n	8009a52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009a16:	6839      	ldr	r1, [r7, #0]
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f001 fca6 	bl	800b36a <USBD_CtlError>
            ret = USBD_FAIL;
 8009a1e:	2303      	movs	r3, #3
 8009a20:	75fb      	strb	r3, [r7, #23]
          break;
 8009a22:	e016      	b.n	8009a52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	2b03      	cmp	r3, #3
 8009a2e:	d00f      	beq.n	8009a50 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f001 fc99 	bl	800b36a <USBD_CtlError>
            ret = USBD_FAIL;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009a3c:	e008      	b.n	8009a50 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009a3e:	6839      	ldr	r1, [r7, #0]
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f001 fc92 	bl	800b36a <USBD_CtlError>
          ret = USBD_FAIL;
 8009a46:	2303      	movs	r3, #3
 8009a48:	75fb      	strb	r3, [r7, #23]
          break;
 8009a4a:	e002      	b.n	8009a52 <USBD_CDC_Setup+0x19e>
          break;
 8009a4c:	bf00      	nop
 8009a4e:	e008      	b.n	8009a62 <USBD_CDC_Setup+0x1ae>
          break;
 8009a50:	bf00      	nop
      }
      break;
 8009a52:	e006      	b.n	8009a62 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009a54:	6839      	ldr	r1, [r7, #0]
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f001 fc87 	bl	800b36a <USBD_CtlError>
      ret = USBD_FAIL;
 8009a5c:	2303      	movs	r3, #3
 8009a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8009a60:	bf00      	nop
  }

  return (uint8_t)ret;
 8009a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3718      	adds	r7, #24
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	460b      	mov	r3, r1
 8009a76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	32b0      	adds	r2, #176	@ 0xb0
 8009a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d101      	bne.n	8009a96 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009a92:	2303      	movs	r3, #3
 8009a94:	e065      	b.n	8009b62 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	32b0      	adds	r2, #176	@ 0xb0
 8009aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aa4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009aa6:	78fb      	ldrb	r3, [r7, #3]
 8009aa8:	f003 020f 	and.w	r2, r3, #15
 8009aac:	6879      	ldr	r1, [r7, #4]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	4413      	add	r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	440b      	add	r3, r1
 8009ab8:	3318      	adds	r3, #24
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d02f      	beq.n	8009b20 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009ac0:	78fb      	ldrb	r3, [r7, #3]
 8009ac2:	f003 020f 	and.w	r2, r3, #15
 8009ac6:	6879      	ldr	r1, [r7, #4]
 8009ac8:	4613      	mov	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4413      	add	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	440b      	add	r3, r1
 8009ad2:	3318      	adds	r3, #24
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	78fb      	ldrb	r3, [r7, #3]
 8009ad8:	f003 010f 	and.w	r1, r3, #15
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	460b      	mov	r3, r1
 8009ae0:	00db      	lsls	r3, r3, #3
 8009ae2:	440b      	add	r3, r1
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4403      	add	r3, r0
 8009ae8:	331c      	adds	r3, #28
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	fbb2 f1f3 	udiv	r1, r2, r3
 8009af0:	fb01 f303 	mul.w	r3, r1, r3
 8009af4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d112      	bne.n	8009b20 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009afa:	78fb      	ldrb	r3, [r7, #3]
 8009afc:	f003 020f 	and.w	r2, r3, #15
 8009b00:	6879      	ldr	r1, [r7, #4]
 8009b02:	4613      	mov	r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	4413      	add	r3, r2
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	440b      	add	r3, r1
 8009b0c:	3318      	adds	r3, #24
 8009b0e:	2200      	movs	r2, #0
 8009b10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009b12:	78f9      	ldrb	r1, [r7, #3]
 8009b14:	2300      	movs	r3, #0
 8009b16:	2200      	movs	r2, #0
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f002 f9c6 	bl	800beaa <USBD_LL_Transmit>
 8009b1e:	e01f      	b.n	8009b60 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	2200      	movs	r2, #0
 8009b24:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	33b0      	adds	r3, #176	@ 0xb0
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	4413      	add	r3, r2
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d010      	beq.n	8009b60 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	33b0      	adds	r3, #176	@ 0xb0
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4413      	add	r3, r2
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	68ba      	ldr	r2, [r7, #8]
 8009b52:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009b5c:	78fa      	ldrb	r2, [r7, #3]
 8009b5e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b084      	sub	sp, #16
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
 8009b72:	460b      	mov	r3, r1
 8009b74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	32b0      	adds	r2, #176	@ 0xb0
 8009b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	32b0      	adds	r2, #176	@ 0xb0
 8009b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d101      	bne.n	8009b9c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	e01a      	b.n	8009bd2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009b9c:	78fb      	ldrb	r3, [r7, #3]
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f002 f9c4 	bl	800bf2e <USBD_LL_GetRxDataSize>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	33b0      	adds	r3, #176	@ 0xb0
 8009bb8:	009b      	lsls	r3, r3, #2
 8009bba:	4413      	add	r3, r2
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009bcc:	4611      	mov	r1, r2
 8009bce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b084      	sub	sp, #16
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	32b0      	adds	r2, #176	@ 0xb0
 8009bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bf0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d101      	bne.n	8009bfc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009bf8:	2303      	movs	r3, #3
 8009bfa:	e024      	b.n	8009c46 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	33b0      	adds	r3, #176	@ 0xb0
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	4413      	add	r3, r2
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d019      	beq.n	8009c44 <USBD_CDC_EP0_RxReady+0x6a>
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009c16:	2bff      	cmp	r3, #255	@ 0xff
 8009c18:	d014      	beq.n	8009c44 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	33b0      	adds	r3, #176	@ 0xb0
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4413      	add	r3, r2
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009c32:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009c3a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	22ff      	movs	r2, #255	@ 0xff
 8009c40:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
	...

08009c50 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b086      	sub	sp, #24
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009c58:	2182      	movs	r1, #130	@ 0x82
 8009c5a:	4818      	ldr	r0, [pc, #96]	@ (8009cbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c5c:	f000 fd4f 	bl	800a6fe <USBD_GetEpDesc>
 8009c60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009c62:	2101      	movs	r1, #1
 8009c64:	4815      	ldr	r0, [pc, #84]	@ (8009cbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c66:	f000 fd4a 	bl	800a6fe <USBD_GetEpDesc>
 8009c6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009c6c:	2181      	movs	r1, #129	@ 0x81
 8009c6e:	4813      	ldr	r0, [pc, #76]	@ (8009cbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c70:	f000 fd45 	bl	800a6fe <USBD_GetEpDesc>
 8009c74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d002      	beq.n	8009c82 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	2210      	movs	r2, #16
 8009c80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d006      	beq.n	8009c96 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c90:	711a      	strb	r2, [r3, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d006      	beq.n	8009caa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ca4:	711a      	strb	r2, [r3, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2243      	movs	r2, #67	@ 0x43
 8009cae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009cb0:	4b02      	ldr	r3, [pc, #8]	@ (8009cbc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3718      	adds	r7, #24
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	20000058 	.word	0x20000058

08009cc0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b086      	sub	sp, #24
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009cc8:	2182      	movs	r1, #130	@ 0x82
 8009cca:	4818      	ldr	r0, [pc, #96]	@ (8009d2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ccc:	f000 fd17 	bl	800a6fe <USBD_GetEpDesc>
 8009cd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009cd2:	2101      	movs	r1, #1
 8009cd4:	4815      	ldr	r0, [pc, #84]	@ (8009d2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009cd6:	f000 fd12 	bl	800a6fe <USBD_GetEpDesc>
 8009cda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009cdc:	2181      	movs	r1, #129	@ 0x81
 8009cde:	4813      	ldr	r0, [pc, #76]	@ (8009d2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ce0:	f000 fd0d 	bl	800a6fe <USBD_GetEpDesc>
 8009ce4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d002      	beq.n	8009cf2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	2210      	movs	r2, #16
 8009cf0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d006      	beq.n	8009d06 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	711a      	strb	r2, [r3, #4]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f042 0202 	orr.w	r2, r2, #2
 8009d04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d006      	beq.n	8009d1a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	711a      	strb	r2, [r3, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f042 0202 	orr.w	r2, r2, #2
 8009d18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2243      	movs	r2, #67	@ 0x43
 8009d1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d20:	4b02      	ldr	r3, [pc, #8]	@ (8009d2c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3718      	adds	r7, #24
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	20000058 	.word	0x20000058

08009d30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009d38:	2182      	movs	r1, #130	@ 0x82
 8009d3a:	4818      	ldr	r0, [pc, #96]	@ (8009d9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d3c:	f000 fcdf 	bl	800a6fe <USBD_GetEpDesc>
 8009d40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009d42:	2101      	movs	r1, #1
 8009d44:	4815      	ldr	r0, [pc, #84]	@ (8009d9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d46:	f000 fcda 	bl	800a6fe <USBD_GetEpDesc>
 8009d4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009d4c:	2181      	movs	r1, #129	@ 0x81
 8009d4e:	4813      	ldr	r0, [pc, #76]	@ (8009d9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009d50:	f000 fcd5 	bl	800a6fe <USBD_GetEpDesc>
 8009d54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d002      	beq.n	8009d62 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	2210      	movs	r2, #16
 8009d60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d006      	beq.n	8009d76 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d70:	711a      	strb	r2, [r3, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d006      	beq.n	8009d8a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d84:	711a      	strb	r2, [r3, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2243      	movs	r2, #67	@ 0x43
 8009d8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d90:	4b02      	ldr	r3, [pc, #8]	@ (8009d9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3718      	adds	r7, #24
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	20000058 	.word	0x20000058

08009da0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	220a      	movs	r2, #10
 8009dac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009dae:	4b03      	ldr	r3, [pc, #12]	@ (8009dbc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	20000014 	.word	0x20000014

08009dc0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d101      	bne.n	8009dd4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	e009      	b.n	8009de8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	33b0      	adds	r3, #176	@ 0xb0
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4413      	add	r3, r2
 8009de2:	683a      	ldr	r2, [r7, #0]
 8009de4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009de6:	2300      	movs	r3, #0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b087      	sub	sp, #28
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	32b0      	adds	r2, #176	@ 0xb0
 8009e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e0e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d101      	bne.n	8009e1a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009e16:	2303      	movs	r3, #3
 8009e18:	e008      	b.n	8009e2c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	371c      	adds	r7, #28
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	32b0      	adds	r2, #176	@ 0xb0
 8009e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d101      	bne.n	8009e5c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	e004      	b.n	8009e66 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	683a      	ldr	r2, [r7, #0]
 8009e60:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3714      	adds	r7, #20
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
	...

08009e74 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b084      	sub	sp, #16
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	32b0      	adds	r2, #176	@ 0xb0
 8009e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e8a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d101      	bne.n	8009e9a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009e96:	2303      	movs	r3, #3
 8009e98:	e025      	b.n	8009ee6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d11f      	bne.n	8009ee4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009eac:	4b10      	ldr	r3, [pc, #64]	@ (8009ef0 <USBD_CDC_TransmitPacket+0x7c>)
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	f003 020f 	and.w	r2, r3, #15
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	4613      	mov	r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4413      	add	r3, r2
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	4403      	add	r3, r0
 8009ec6:	3318      	adds	r3, #24
 8009ec8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009eca:	4b09      	ldr	r3, [pc, #36]	@ (8009ef0 <USBD_CDC_TransmitPacket+0x7c>)
 8009ecc:	7819      	ldrb	r1, [r3, #0]
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f001 ffe5 	bl	800beaa <USBD_LL_Transmit>

    ret = USBD_OK;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	2000009b 	.word	0x2000009b

08009ef4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	32b0      	adds	r2, #176	@ 0xb0
 8009f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f0a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	32b0      	adds	r2, #176	@ 0xb0
 8009f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d101      	bne.n	8009f22 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009f1e:	2303      	movs	r3, #3
 8009f20:	e018      	b.n	8009f54 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	7c1b      	ldrb	r3, [r3, #16]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d10a      	bne.n	8009f40 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8009f5c <USBD_CDC_ReceivePacket+0x68>)
 8009f2c:	7819      	ldrb	r1, [r3, #0]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009f34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f001 ffd7 	bl	800beec <USBD_LL_PrepareReceive>
 8009f3e:	e008      	b.n	8009f52 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009f40:	4b06      	ldr	r3, [pc, #24]	@ (8009f5c <USBD_CDC_ReceivePacket+0x68>)
 8009f42:	7819      	ldrb	r1, [r3, #0]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009f4a:	2340      	movs	r3, #64	@ 0x40
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f001 ffcd 	bl	800beec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	2000009c 	.word	0x2000009c

08009f60 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b086      	sub	sp, #24
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	4613      	mov	r3, r2
 8009f6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d101      	bne.n	8009f78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009f74:	2303      	movs	r3, #3
 8009f76:	e01f      	b.n	8009fb8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d003      	beq.n	8009f9e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	79fa      	ldrb	r2, [r7, #7]
 8009faa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	f001 fe47 	bl	800bc40 <USBD_LL_Init>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3718      	adds	r7, #24
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b084      	sub	sp, #16
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d101      	bne.n	8009fd8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009fd4:	2303      	movs	r3, #3
 8009fd6:	e025      	b.n	800a024 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	683a      	ldr	r2, [r7, #0]
 8009fdc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	32ae      	adds	r2, #174	@ 0xae
 8009fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00f      	beq.n	800a014 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	32ae      	adds	r2, #174	@ 0xae
 8009ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a004:	f107 020e 	add.w	r2, r7, #14
 800a008:	4610      	mov	r0, r2
 800a00a:	4798      	blx	r3
 800a00c:	4602      	mov	r2, r0
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a01a:	1c5a      	adds	r2, r3, #1
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f001 fe4f 	bl	800bcd8 <USBD_LL_Start>
 800a03a:	4603      	mov	r3, r0
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3708      	adds	r7, #8
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a04c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a04e:	4618      	mov	r0, r3
 800a050:	370c      	adds	r7, #12
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr

0800a05a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b084      	sub	sp, #16
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
 800a062:	460b      	mov	r3, r1
 800a064:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a066:	2300      	movs	r3, #0
 800a068:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a070:	2b00      	cmp	r3, #0
 800a072:	d009      	beq.n	800a088 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	78fa      	ldrb	r2, [r7, #3]
 800a07e:	4611      	mov	r1, r2
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	4798      	blx	r3
 800a084:	4603      	mov	r3, r0
 800a086:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a088:	7bfb      	ldrb	r3, [r7, #15]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b084      	sub	sp, #16
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	460b      	mov	r3, r1
 800a09c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	78fa      	ldrb	r2, [r7, #3]
 800a0ac:	4611      	mov	r1, r2
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	4798      	blx	r3
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d001      	beq.n	800a0bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a0b8:	2303      	movs	r3, #3
 800a0ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}

0800a0c6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b084      	sub	sp, #16
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a0d6:	6839      	ldr	r1, [r7, #0]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f001 f90c 	bl	800b2f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a0fa:	f003 031f 	and.w	r3, r3, #31
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	d01a      	beq.n	800a138 <USBD_LL_SetupStage+0x72>
 800a102:	2b02      	cmp	r3, #2
 800a104:	d822      	bhi.n	800a14c <USBD_LL_SetupStage+0x86>
 800a106:	2b00      	cmp	r3, #0
 800a108:	d002      	beq.n	800a110 <USBD_LL_SetupStage+0x4a>
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d00a      	beq.n	800a124 <USBD_LL_SetupStage+0x5e>
 800a10e:	e01d      	b.n	800a14c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a116:	4619      	mov	r1, r3
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 fb63 	bl	800a7e4 <USBD_StdDevReq>
 800a11e:	4603      	mov	r3, r0
 800a120:	73fb      	strb	r3, [r7, #15]
      break;
 800a122:	e020      	b.n	800a166 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a12a:	4619      	mov	r1, r3
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 fbcb 	bl	800a8c8 <USBD_StdItfReq>
 800a132:	4603      	mov	r3, r0
 800a134:	73fb      	strb	r3, [r7, #15]
      break;
 800a136:	e016      	b.n	800a166 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a13e:	4619      	mov	r1, r3
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 fc2d 	bl	800a9a0 <USBD_StdEPReq>
 800a146:	4603      	mov	r3, r0
 800a148:	73fb      	strb	r3, [r7, #15]
      break;
 800a14a:	e00c      	b.n	800a166 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a152:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a156:	b2db      	uxtb	r3, r3
 800a158:	4619      	mov	r1, r3
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f001 fe1c 	bl	800bd98 <USBD_LL_StallEP>
 800a160:	4603      	mov	r3, r0
 800a162:	73fb      	strb	r3, [r7, #15]
      break;
 800a164:	bf00      	nop
  }

  return ret;
 800a166:	7bfb      	ldrb	r3, [r7, #15]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	460b      	mov	r3, r1
 800a17a:	607a      	str	r2, [r7, #4]
 800a17c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a17e:	2300      	movs	r3, #0
 800a180:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a182:	7afb      	ldrb	r3, [r7, #11]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d16e      	bne.n	800a266 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a18e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a196:	2b03      	cmp	r3, #3
 800a198:	f040 8098 	bne.w	800a2cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	689a      	ldr	r2, [r3, #8]
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d913      	bls.n	800a1d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	689a      	ldr	r2, [r3, #8]
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	1ad2      	subs	r2, r2, r3
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	68da      	ldr	r2, [r3, #12]
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	bf28      	it	cs
 800a1c2:	4613      	movcs	r3, r2
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	6879      	ldr	r1, [r7, #4]
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f001 f994 	bl	800b4f6 <USBD_CtlContinueRx>
 800a1ce:	e07d      	b.n	800a2cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a1d6:	f003 031f 	and.w	r3, r3, #31
 800a1da:	2b02      	cmp	r3, #2
 800a1dc:	d014      	beq.n	800a208 <USBD_LL_DataOutStage+0x98>
 800a1de:	2b02      	cmp	r3, #2
 800a1e0:	d81d      	bhi.n	800a21e <USBD_LL_DataOutStage+0xae>
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d002      	beq.n	800a1ec <USBD_LL_DataOutStage+0x7c>
 800a1e6:	2b01      	cmp	r3, #1
 800a1e8:	d003      	beq.n	800a1f2 <USBD_LL_DataOutStage+0x82>
 800a1ea:	e018      	b.n	800a21e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	75bb      	strb	r3, [r7, #22]
            break;
 800a1f0:	e018      	b.n	800a224 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 fa64 	bl	800a6ca <USBD_CoreFindIF>
 800a202:	4603      	mov	r3, r0
 800a204:	75bb      	strb	r3, [r7, #22]
            break;
 800a206:	e00d      	b.n	800a224 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	4619      	mov	r1, r3
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f000 fa66 	bl	800a6e4 <USBD_CoreFindEP>
 800a218:	4603      	mov	r3, r0
 800a21a:	75bb      	strb	r3, [r7, #22]
            break;
 800a21c:	e002      	b.n	800a224 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a21e:	2300      	movs	r3, #0
 800a220:	75bb      	strb	r3, [r7, #22]
            break;
 800a222:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a224:	7dbb      	ldrb	r3, [r7, #22]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d119      	bne.n	800a25e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a230:	b2db      	uxtb	r3, r3
 800a232:	2b03      	cmp	r3, #3
 800a234:	d113      	bne.n	800a25e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a236:	7dba      	ldrb	r2, [r7, #22]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	32ae      	adds	r2, #174	@ 0xae
 800a23c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a240:	691b      	ldr	r3, [r3, #16]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00b      	beq.n	800a25e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a246:	7dba      	ldrb	r2, [r7, #22]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a24e:	7dba      	ldrb	r2, [r7, #22]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	32ae      	adds	r2, #174	@ 0xae
 800a254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f001 f95a 	bl	800b518 <USBD_CtlSendStatus>
 800a264:	e032      	b.n	800a2cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a266:	7afb      	ldrb	r3, [r7, #11]
 800a268:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	4619      	mov	r1, r3
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f000 fa37 	bl	800a6e4 <USBD_CoreFindEP>
 800a276:	4603      	mov	r3, r0
 800a278:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a27a:	7dbb      	ldrb	r3, [r7, #22]
 800a27c:	2bff      	cmp	r3, #255	@ 0xff
 800a27e:	d025      	beq.n	800a2cc <USBD_LL_DataOutStage+0x15c>
 800a280:	7dbb      	ldrb	r3, [r7, #22]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d122      	bne.n	800a2cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	2b03      	cmp	r3, #3
 800a290:	d117      	bne.n	800a2c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a292:	7dba      	ldrb	r2, [r7, #22]
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	32ae      	adds	r2, #174	@ 0xae
 800a298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a29c:	699b      	ldr	r3, [r3, #24]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00f      	beq.n	800a2c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a2a2:	7dba      	ldrb	r2, [r7, #22]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a2aa:	7dba      	ldrb	r2, [r7, #22]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	32ae      	adds	r2, #174	@ 0xae
 800a2b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b4:	699b      	ldr	r3, [r3, #24]
 800a2b6:	7afa      	ldrb	r2, [r7, #11]
 800a2b8:	4611      	mov	r1, r2
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	4798      	blx	r3
 800a2be:	4603      	mov	r3, r0
 800a2c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a2c2:	7dfb      	ldrb	r3, [r7, #23]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d001      	beq.n	800a2cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a2c8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ca:	e000      	b.n	800a2ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3718      	adds	r7, #24
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b086      	sub	sp, #24
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	60f8      	str	r0, [r7, #12]
 800a2de:	460b      	mov	r3, r1
 800a2e0:	607a      	str	r2, [r7, #4]
 800a2e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a2e4:	7afb      	ldrb	r3, [r7, #11]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d16f      	bne.n	800a3ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	3314      	adds	r3, #20
 800a2ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	d15a      	bne.n	800a3b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	689a      	ldr	r2, [r3, #8]
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	429a      	cmp	r2, r3
 800a304:	d914      	bls.n	800a330 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	689a      	ldr	r2, [r3, #8]
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	68db      	ldr	r3, [r3, #12]
 800a30e:	1ad2      	subs	r2, r2, r3
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	461a      	mov	r2, r3
 800a31a:	6879      	ldr	r1, [r7, #4]
 800a31c:	68f8      	ldr	r0, [r7, #12]
 800a31e:	f001 f8bc 	bl	800b49a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a322:	2300      	movs	r3, #0
 800a324:	2200      	movs	r2, #0
 800a326:	2100      	movs	r1, #0
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f001 fddf 	bl	800beec <USBD_LL_PrepareReceive>
 800a32e:	e03f      	b.n	800a3b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	68da      	ldr	r2, [r3, #12]
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d11c      	bne.n	800a376 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a344:	429a      	cmp	r2, r3
 800a346:	d316      	bcc.n	800a376 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	685a      	ldr	r2, [r3, #4]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a352:	429a      	cmp	r2, r3
 800a354:	d20f      	bcs.n	800a376 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a356:	2200      	movs	r2, #0
 800a358:	2100      	movs	r1, #0
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f001 f89d 	bl	800b49a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2200      	movs	r2, #0
 800a364:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a368:	2300      	movs	r3, #0
 800a36a:	2200      	movs	r2, #0
 800a36c:	2100      	movs	r1, #0
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	f001 fdbc 	bl	800beec <USBD_LL_PrepareReceive>
 800a374:	e01c      	b.n	800a3b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	2b03      	cmp	r3, #3
 800a380:	d10f      	bne.n	800a3a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d009      	beq.n	800a3a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2200      	movs	r2, #0
 800a392:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a39c:	68db      	ldr	r3, [r3, #12]
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a3a2:	2180      	movs	r1, #128	@ 0x80
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f001 fcf7 	bl	800bd98 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f001 f8c7 	bl	800b53e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d03a      	beq.n	800a430 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f7ff fe42 	bl	800a044 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a3c8:	e032      	b.n	800a430 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a3ca:	7afb      	ldrb	r3, [r7, #11]
 800a3cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f000 f985 	bl	800a6e4 <USBD_CoreFindEP>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a3de:	7dfb      	ldrb	r3, [r7, #23]
 800a3e0:	2bff      	cmp	r3, #255	@ 0xff
 800a3e2:	d025      	beq.n	800a430 <USBD_LL_DataInStage+0x15a>
 800a3e4:	7dfb      	ldrb	r3, [r7, #23]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d122      	bne.n	800a430 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3f0:	b2db      	uxtb	r3, r3
 800a3f2:	2b03      	cmp	r3, #3
 800a3f4:	d11c      	bne.n	800a430 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a3f6:	7dfa      	ldrb	r2, [r7, #23]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	32ae      	adds	r2, #174	@ 0xae
 800a3fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a400:	695b      	ldr	r3, [r3, #20]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d014      	beq.n	800a430 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a406:	7dfa      	ldrb	r2, [r7, #23]
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a40e:	7dfa      	ldrb	r2, [r7, #23]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	32ae      	adds	r2, #174	@ 0xae
 800a414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	7afa      	ldrb	r2, [r7, #11]
 800a41c:	4611      	mov	r1, r2
 800a41e:	68f8      	ldr	r0, [r7, #12]
 800a420:	4798      	blx	r3
 800a422:	4603      	mov	r3, r0
 800a424:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a426:	7dbb      	ldrb	r3, [r7, #22]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a42c:	7dbb      	ldrb	r3, [r7, #22]
 800a42e:	e000      	b.n	800a432 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a430:	2300      	movs	r3, #0
}
 800a432:	4618      	mov	r0, r3
 800a434:	3718      	adds	r7, #24
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b084      	sub	sp, #16
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a442:	2300      	movs	r3, #0
 800a444:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2200      	movs	r2, #0
 800a468:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a472:	2b00      	cmp	r3, #0
 800a474:	d014      	beq.n	800a4a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00e      	beq.n	800a4a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	6852      	ldr	r2, [r2, #4]
 800a48e:	b2d2      	uxtb	r2, r2
 800a490:	4611      	mov	r1, r2
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	4798      	blx	r3
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a49c:	2303      	movs	r3, #3
 800a49e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4a0:	2340      	movs	r3, #64	@ 0x40
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	2100      	movs	r1, #0
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f001 fc31 	bl	800bd0e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2240      	movs	r2, #64	@ 0x40
 800a4b8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a4bc:	2340      	movs	r3, #64	@ 0x40
 800a4be:	2200      	movs	r2, #0
 800a4c0:	2180      	movs	r1, #128	@ 0x80
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f001 fc23 	bl	800bd0e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2240      	movs	r2, #64	@ 0x40
 800a4d2:	621a      	str	r2, [r3, #32]

  return ret;
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a4de:	b480      	push	{r7}
 800a4e0:	b083      	sub	sp, #12
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	78fa      	ldrb	r2, [r7, #3]
 800a4ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a4f0:	2300      	movs	r3, #0
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	370c      	adds	r7, #12
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a4fe:	b480      	push	{r7}
 800a500:	b083      	sub	sp, #12
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a50c:	b2db      	uxtb	r3, r3
 800a50e:	2b04      	cmp	r3, #4
 800a510:	d006      	beq.n	800a520 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a518:	b2da      	uxtb	r2, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2204      	movs	r2, #4
 800a524:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a536:	b480      	push	{r7}
 800a538:	b083      	sub	sp, #12
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b04      	cmp	r3, #4
 800a548:	d106      	bne.n	800a558 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a550:	b2da      	uxtb	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a558:	2300      	movs	r3, #0
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	370c      	adds	r7, #12
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr

0800a566 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b082      	sub	sp, #8
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a574:	b2db      	uxtb	r3, r3
 800a576:	2b03      	cmp	r3, #3
 800a578:	d110      	bne.n	800a59c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a580:	2b00      	cmp	r3, #0
 800a582:	d00b      	beq.n	800a59c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a58a:	69db      	ldr	r3, [r3, #28]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d005      	beq.n	800a59c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a596:	69db      	ldr	r3, [r3, #28]
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3708      	adds	r7, #8
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}

0800a5a6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a5a6:	b580      	push	{r7, lr}
 800a5a8:	b082      	sub	sp, #8
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	32ae      	adds	r2, #174	@ 0xae
 800a5bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d101      	bne.n	800a5c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a5c4:	2303      	movs	r3, #3
 800a5c6:	e01c      	b.n	800a602 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5ce:	b2db      	uxtb	r3, r3
 800a5d0:	2b03      	cmp	r3, #3
 800a5d2:	d115      	bne.n	800a600 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	32ae      	adds	r2, #174	@ 0xae
 800a5de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5e2:	6a1b      	ldr	r3, [r3, #32]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00b      	beq.n	800a600 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	32ae      	adds	r2, #174	@ 0xae
 800a5f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5f6:	6a1b      	ldr	r3, [r3, #32]
 800a5f8:	78fa      	ldrb	r2, [r7, #3]
 800a5fa:	4611      	mov	r1, r2
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b082      	sub	sp, #8
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	460b      	mov	r3, r1
 800a614:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	32ae      	adds	r2, #174	@ 0xae
 800a620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d101      	bne.n	800a62c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a628:	2303      	movs	r3, #3
 800a62a:	e01c      	b.n	800a666 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a632:	b2db      	uxtb	r3, r3
 800a634:	2b03      	cmp	r3, #3
 800a636:	d115      	bne.n	800a664 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	32ae      	adds	r2, #174	@ 0xae
 800a642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00b      	beq.n	800a664 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	32ae      	adds	r2, #174	@ 0xae
 800a656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a65a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a65c:	78fa      	ldrb	r2, [r7, #3]
 800a65e:	4611      	mov	r1, r2
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a66e:	b480      	push	{r7}
 800a670:	b083      	sub	sp, #12
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a676:	2300      	movs	r3, #0
}
 800a678:	4618      	mov	r0, r3
 800a67a:	370c      	adds	r7, #12
 800a67c:	46bd      	mov	sp, r7
 800a67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a682:	4770      	bx	lr

0800a684 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a68c:	2300      	movs	r3, #0
 800a68e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2201      	movs	r2, #1
 800a694:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00e      	beq.n	800a6c0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	6852      	ldr	r2, [r2, #4]
 800a6ae:	b2d2      	uxtb	r2, r2
 800a6b0:	4611      	mov	r1, r2
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	4798      	blx	r3
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d001      	beq.n	800a6c0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a6bc:	2303      	movs	r3, #3
 800a6be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	b083      	sub	sp, #12
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a6d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a6f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	370c      	adds	r7, #12
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr

0800a6fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b086      	sub	sp, #24
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	460b      	mov	r3, r1
 800a708:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a712:	2300      	movs	r3, #0
 800a714:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	885b      	ldrh	r3, [r3, #2]
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	7812      	ldrb	r2, [r2, #0]
 800a720:	4293      	cmp	r3, r2
 800a722:	d91f      	bls.n	800a764 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a72a:	e013      	b.n	800a754 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a72c:	f107 030a 	add.w	r3, r7, #10
 800a730:	4619      	mov	r1, r3
 800a732:	6978      	ldr	r0, [r7, #20]
 800a734:	f000 f81b 	bl	800a76e <USBD_GetNextDesc>
 800a738:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	785b      	ldrb	r3, [r3, #1]
 800a73e:	2b05      	cmp	r3, #5
 800a740:	d108      	bne.n	800a754 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	789b      	ldrb	r3, [r3, #2]
 800a74a:	78fa      	ldrb	r2, [r7, #3]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d008      	beq.n	800a762 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a750:	2300      	movs	r3, #0
 800a752:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	885b      	ldrh	r3, [r3, #2]
 800a758:	b29a      	uxth	r2, r3
 800a75a:	897b      	ldrh	r3, [r7, #10]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d8e5      	bhi.n	800a72c <USBD_GetEpDesc+0x2e>
 800a760:	e000      	b.n	800a764 <USBD_GetEpDesc+0x66>
          break;
 800a762:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a764:	693b      	ldr	r3, [r7, #16]
}
 800a766:	4618      	mov	r0, r3
 800a768:	3718      	adds	r7, #24
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}

0800a76e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a76e:	b480      	push	{r7}
 800a770:	b085      	sub	sp, #20
 800a772:	af00      	add	r7, sp, #0
 800a774:	6078      	str	r0, [r7, #4]
 800a776:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	881b      	ldrh	r3, [r3, #0]
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	7812      	ldrb	r2, [r2, #0]
 800a784:	4413      	add	r3, r2
 800a786:	b29a      	uxth	r2, r3
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	461a      	mov	r2, r3
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4413      	add	r3, r2
 800a796:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a798:	68fb      	ldr	r3, [r7, #12]
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3714      	adds	r7, #20
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr

0800a7a6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a7a6:	b480      	push	{r7}
 800a7a8:	b087      	sub	sp, #28
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	781b      	ldrb	r3, [r3, #0]
 800a7b6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a7c4:	8a3b      	ldrh	r3, [r7, #16]
 800a7c6:	021b      	lsls	r3, r3, #8
 800a7c8:	b21a      	sxth	r2, r3
 800a7ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	b21b      	sxth	r3, r3
 800a7d2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a7d4:	89fb      	ldrh	r3, [r7, #14]
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	371c      	adds	r7, #28
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr
	...

0800a7e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a7fa:	2b40      	cmp	r3, #64	@ 0x40
 800a7fc:	d005      	beq.n	800a80a <USBD_StdDevReq+0x26>
 800a7fe:	2b40      	cmp	r3, #64	@ 0x40
 800a800:	d857      	bhi.n	800a8b2 <USBD_StdDevReq+0xce>
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00f      	beq.n	800a826 <USBD_StdDevReq+0x42>
 800a806:	2b20      	cmp	r3, #32
 800a808:	d153      	bne.n	800a8b2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	32ae      	adds	r2, #174	@ 0xae
 800a814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a818:	689b      	ldr	r3, [r3, #8]
 800a81a:	6839      	ldr	r1, [r7, #0]
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	4798      	blx	r3
 800a820:	4603      	mov	r3, r0
 800a822:	73fb      	strb	r3, [r7, #15]
      break;
 800a824:	e04a      	b.n	800a8bc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	785b      	ldrb	r3, [r3, #1]
 800a82a:	2b09      	cmp	r3, #9
 800a82c:	d83b      	bhi.n	800a8a6 <USBD_StdDevReq+0xc2>
 800a82e:	a201      	add	r2, pc, #4	@ (adr r2, 800a834 <USBD_StdDevReq+0x50>)
 800a830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a834:	0800a889 	.word	0x0800a889
 800a838:	0800a89d 	.word	0x0800a89d
 800a83c:	0800a8a7 	.word	0x0800a8a7
 800a840:	0800a893 	.word	0x0800a893
 800a844:	0800a8a7 	.word	0x0800a8a7
 800a848:	0800a867 	.word	0x0800a867
 800a84c:	0800a85d 	.word	0x0800a85d
 800a850:	0800a8a7 	.word	0x0800a8a7
 800a854:	0800a87f 	.word	0x0800a87f
 800a858:	0800a871 	.word	0x0800a871
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a85c:	6839      	ldr	r1, [r7, #0]
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 fa3c 	bl	800acdc <USBD_GetDescriptor>
          break;
 800a864:	e024      	b.n	800a8b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a866:	6839      	ldr	r1, [r7, #0]
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fba1 	bl	800afb0 <USBD_SetAddress>
          break;
 800a86e:	e01f      	b.n	800a8b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a870:	6839      	ldr	r1, [r7, #0]
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f000 fbe0 	bl	800b038 <USBD_SetConfig>
 800a878:	4603      	mov	r3, r0
 800a87a:	73fb      	strb	r3, [r7, #15]
          break;
 800a87c:	e018      	b.n	800a8b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a87e:	6839      	ldr	r1, [r7, #0]
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 fc83 	bl	800b18c <USBD_GetConfig>
          break;
 800a886:	e013      	b.n	800a8b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a888:	6839      	ldr	r1, [r7, #0]
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	f000 fcb4 	bl	800b1f8 <USBD_GetStatus>
          break;
 800a890:	e00e      	b.n	800a8b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a892:	6839      	ldr	r1, [r7, #0]
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 fce3 	bl	800b260 <USBD_SetFeature>
          break;
 800a89a:	e009      	b.n	800a8b0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a89c:	6839      	ldr	r1, [r7, #0]
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 fd07 	bl	800b2b2 <USBD_ClrFeature>
          break;
 800a8a4:	e004      	b.n	800a8b0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a8a6:	6839      	ldr	r1, [r7, #0]
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 fd5e 	bl	800b36a <USBD_CtlError>
          break;
 800a8ae:	bf00      	nop
      }
      break;
 800a8b0:	e004      	b.n	800a8bc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a8b2:	6839      	ldr	r1, [r7, #0]
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 fd58 	bl	800b36a <USBD_CtlError>
      break;
 800a8ba:	bf00      	nop
  }

  return ret;
 800a8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop

0800a8c8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a8de:	2b40      	cmp	r3, #64	@ 0x40
 800a8e0:	d005      	beq.n	800a8ee <USBD_StdItfReq+0x26>
 800a8e2:	2b40      	cmp	r3, #64	@ 0x40
 800a8e4:	d852      	bhi.n	800a98c <USBD_StdItfReq+0xc4>
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d001      	beq.n	800a8ee <USBD_StdItfReq+0x26>
 800a8ea:	2b20      	cmp	r3, #32
 800a8ec:	d14e      	bne.n	800a98c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8f4:	b2db      	uxtb	r3, r3
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	2b02      	cmp	r3, #2
 800a8fa:	d840      	bhi.n	800a97e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	889b      	ldrh	r3, [r3, #4]
 800a900:	b2db      	uxtb	r3, r3
 800a902:	2b01      	cmp	r3, #1
 800a904:	d836      	bhi.n	800a974 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	889b      	ldrh	r3, [r3, #4]
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	4619      	mov	r1, r3
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f7ff fedb 	bl	800a6ca <USBD_CoreFindIF>
 800a914:	4603      	mov	r3, r0
 800a916:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a918:	7bbb      	ldrb	r3, [r7, #14]
 800a91a:	2bff      	cmp	r3, #255	@ 0xff
 800a91c:	d01d      	beq.n	800a95a <USBD_StdItfReq+0x92>
 800a91e:	7bbb      	ldrb	r3, [r7, #14]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d11a      	bne.n	800a95a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a924:	7bba      	ldrb	r2, [r7, #14]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	32ae      	adds	r2, #174	@ 0xae
 800a92a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d00f      	beq.n	800a954 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a934:	7bba      	ldrb	r2, [r7, #14]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a93c:	7bba      	ldrb	r2, [r7, #14]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	32ae      	adds	r2, #174	@ 0xae
 800a942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	6839      	ldr	r1, [r7, #0]
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	4798      	blx	r3
 800a94e:	4603      	mov	r3, r0
 800a950:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a952:	e004      	b.n	800a95e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a954:	2303      	movs	r3, #3
 800a956:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a958:	e001      	b.n	800a95e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a95a:	2303      	movs	r3, #3
 800a95c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	88db      	ldrh	r3, [r3, #6]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d110      	bne.n	800a988 <USBD_StdItfReq+0xc0>
 800a966:	7bfb      	ldrb	r3, [r7, #15]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d10d      	bne.n	800a988 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 fdd3 	bl	800b518 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a972:	e009      	b.n	800a988 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a974:	6839      	ldr	r1, [r7, #0]
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 fcf7 	bl	800b36a <USBD_CtlError>
          break;
 800a97c:	e004      	b.n	800a988 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a97e:	6839      	ldr	r1, [r7, #0]
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 fcf2 	bl	800b36a <USBD_CtlError>
          break;
 800a986:	e000      	b.n	800a98a <USBD_StdItfReq+0xc2>
          break;
 800a988:	bf00      	nop
      }
      break;
 800a98a:	e004      	b.n	800a996 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a98c:	6839      	ldr	r1, [r7, #0]
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 fceb 	bl	800b36a <USBD_CtlError>
      break;
 800a994:	bf00      	nop
  }

  return ret;
 800a996:	7bfb      	ldrb	r3, [r7, #15]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3710      	adds	r7, #16
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
 800a9a8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	889b      	ldrh	r3, [r3, #4]
 800a9b2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a9bc:	2b40      	cmp	r3, #64	@ 0x40
 800a9be:	d007      	beq.n	800a9d0 <USBD_StdEPReq+0x30>
 800a9c0:	2b40      	cmp	r3, #64	@ 0x40
 800a9c2:	f200 817f 	bhi.w	800acc4 <USBD_StdEPReq+0x324>
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d02a      	beq.n	800aa20 <USBD_StdEPReq+0x80>
 800a9ca:	2b20      	cmp	r3, #32
 800a9cc:	f040 817a 	bne.w	800acc4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a9d0:	7bbb      	ldrb	r3, [r7, #14]
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f7ff fe85 	bl	800a6e4 <USBD_CoreFindEP>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9de:	7b7b      	ldrb	r3, [r7, #13]
 800a9e0:	2bff      	cmp	r3, #255	@ 0xff
 800a9e2:	f000 8174 	beq.w	800acce <USBD_StdEPReq+0x32e>
 800a9e6:	7b7b      	ldrb	r3, [r7, #13]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	f040 8170 	bne.w	800acce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a9ee:	7b7a      	ldrb	r2, [r7, #13]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a9f6:	7b7a      	ldrb	r2, [r7, #13]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	32ae      	adds	r2, #174	@ 0xae
 800a9fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f000 8163 	beq.w	800acce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800aa08:	7b7a      	ldrb	r2, [r7, #13]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	32ae      	adds	r2, #174	@ 0xae
 800aa0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	6839      	ldr	r1, [r7, #0]
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	4798      	blx	r3
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800aa1e:	e156      	b.n	800acce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	785b      	ldrb	r3, [r3, #1]
 800aa24:	2b03      	cmp	r3, #3
 800aa26:	d008      	beq.n	800aa3a <USBD_StdEPReq+0x9a>
 800aa28:	2b03      	cmp	r3, #3
 800aa2a:	f300 8145 	bgt.w	800acb8 <USBD_StdEPReq+0x318>
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	f000 809b 	beq.w	800ab6a <USBD_StdEPReq+0x1ca>
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d03c      	beq.n	800aab2 <USBD_StdEPReq+0x112>
 800aa38:	e13e      	b.n	800acb8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	2b02      	cmp	r3, #2
 800aa44:	d002      	beq.n	800aa4c <USBD_StdEPReq+0xac>
 800aa46:	2b03      	cmp	r3, #3
 800aa48:	d016      	beq.n	800aa78 <USBD_StdEPReq+0xd8>
 800aa4a:	e02c      	b.n	800aaa6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa4c:	7bbb      	ldrb	r3, [r7, #14]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d00d      	beq.n	800aa6e <USBD_StdEPReq+0xce>
 800aa52:	7bbb      	ldrb	r3, [r7, #14]
 800aa54:	2b80      	cmp	r3, #128	@ 0x80
 800aa56:	d00a      	beq.n	800aa6e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa58:	7bbb      	ldrb	r3, [r7, #14]
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f001 f99b 	bl	800bd98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa62:	2180      	movs	r1, #128	@ 0x80
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f001 f997 	bl	800bd98 <USBD_LL_StallEP>
 800aa6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa6c:	e020      	b.n	800aab0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800aa6e:	6839      	ldr	r1, [r7, #0]
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 fc7a 	bl	800b36a <USBD_CtlError>
              break;
 800aa76:	e01b      	b.n	800aab0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	885b      	ldrh	r3, [r3, #2]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d10e      	bne.n	800aa9e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa80:	7bbb      	ldrb	r3, [r7, #14]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00b      	beq.n	800aa9e <USBD_StdEPReq+0xfe>
 800aa86:	7bbb      	ldrb	r3, [r7, #14]
 800aa88:	2b80      	cmp	r3, #128	@ 0x80
 800aa8a:	d008      	beq.n	800aa9e <USBD_StdEPReq+0xfe>
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	88db      	ldrh	r3, [r3, #6]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d104      	bne.n	800aa9e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa94:	7bbb      	ldrb	r3, [r7, #14]
 800aa96:	4619      	mov	r1, r3
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f001 f97d 	bl	800bd98 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 fd3a 	bl	800b518 <USBD_CtlSendStatus>

              break;
 800aaa4:	e004      	b.n	800aab0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800aaa6:	6839      	ldr	r1, [r7, #0]
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 fc5e 	bl	800b36a <USBD_CtlError>
              break;
 800aaae:	bf00      	nop
          }
          break;
 800aab0:	e107      	b.n	800acc2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	2b02      	cmp	r3, #2
 800aabc:	d002      	beq.n	800aac4 <USBD_StdEPReq+0x124>
 800aabe:	2b03      	cmp	r3, #3
 800aac0:	d016      	beq.n	800aaf0 <USBD_StdEPReq+0x150>
 800aac2:	e04b      	b.n	800ab5c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aac4:	7bbb      	ldrb	r3, [r7, #14]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d00d      	beq.n	800aae6 <USBD_StdEPReq+0x146>
 800aaca:	7bbb      	ldrb	r3, [r7, #14]
 800aacc:	2b80      	cmp	r3, #128	@ 0x80
 800aace:	d00a      	beq.n	800aae6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aad0:	7bbb      	ldrb	r3, [r7, #14]
 800aad2:	4619      	mov	r1, r3
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f001 f95f 	bl	800bd98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aada:	2180      	movs	r1, #128	@ 0x80
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f001 f95b 	bl	800bd98 <USBD_LL_StallEP>
 800aae2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aae4:	e040      	b.n	800ab68 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800aae6:	6839      	ldr	r1, [r7, #0]
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 fc3e 	bl	800b36a <USBD_CtlError>
              break;
 800aaee:	e03b      	b.n	800ab68 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	885b      	ldrh	r3, [r3, #2]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d136      	bne.n	800ab66 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aaf8:	7bbb      	ldrb	r3, [r7, #14]
 800aafa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d004      	beq.n	800ab0c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ab02:	7bbb      	ldrb	r3, [r7, #14]
 800ab04:	4619      	mov	r1, r3
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f001 f965 	bl	800bdd6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 fd03 	bl	800b518 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ab12:	7bbb      	ldrb	r3, [r7, #14]
 800ab14:	4619      	mov	r1, r3
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f7ff fde4 	bl	800a6e4 <USBD_CoreFindEP>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab20:	7b7b      	ldrb	r3, [r7, #13]
 800ab22:	2bff      	cmp	r3, #255	@ 0xff
 800ab24:	d01f      	beq.n	800ab66 <USBD_StdEPReq+0x1c6>
 800ab26:	7b7b      	ldrb	r3, [r7, #13]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d11c      	bne.n	800ab66 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ab2c:	7b7a      	ldrb	r2, [r7, #13]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ab34:	7b7a      	ldrb	r2, [r7, #13]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	32ae      	adds	r2, #174	@ 0xae
 800ab3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d010      	beq.n	800ab66 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ab44:	7b7a      	ldrb	r2, [r7, #13]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	32ae      	adds	r2, #174	@ 0xae
 800ab4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	6839      	ldr	r1, [r7, #0]
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	4798      	blx	r3
 800ab56:	4603      	mov	r3, r0
 800ab58:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ab5a:	e004      	b.n	800ab66 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ab5c:	6839      	ldr	r1, [r7, #0]
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 fc03 	bl	800b36a <USBD_CtlError>
              break;
 800ab64:	e000      	b.n	800ab68 <USBD_StdEPReq+0x1c8>
              break;
 800ab66:	bf00      	nop
          }
          break;
 800ab68:	e0ab      	b.n	800acc2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	2b02      	cmp	r3, #2
 800ab74:	d002      	beq.n	800ab7c <USBD_StdEPReq+0x1dc>
 800ab76:	2b03      	cmp	r3, #3
 800ab78:	d032      	beq.n	800abe0 <USBD_StdEPReq+0x240>
 800ab7a:	e097      	b.n	800acac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab7c:	7bbb      	ldrb	r3, [r7, #14]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d007      	beq.n	800ab92 <USBD_StdEPReq+0x1f2>
 800ab82:	7bbb      	ldrb	r3, [r7, #14]
 800ab84:	2b80      	cmp	r3, #128	@ 0x80
 800ab86:	d004      	beq.n	800ab92 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ab88:	6839      	ldr	r1, [r7, #0]
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f000 fbed 	bl	800b36a <USBD_CtlError>
                break;
 800ab90:	e091      	b.n	800acb6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	da0b      	bge.n	800abb2 <USBD_StdEPReq+0x212>
 800ab9a:	7bbb      	ldrb	r3, [r7, #14]
 800ab9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aba0:	4613      	mov	r3, r2
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	4413      	add	r3, r2
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	3310      	adds	r3, #16
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	4413      	add	r3, r2
 800abae:	3304      	adds	r3, #4
 800abb0:	e00b      	b.n	800abca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800abb2:	7bbb      	ldrb	r3, [r7, #14]
 800abb4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abb8:	4613      	mov	r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4413      	add	r3, r2
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	4413      	add	r3, r2
 800abc8:	3304      	adds	r3, #4
 800abca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	2200      	movs	r2, #0
 800abd0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	2202      	movs	r2, #2
 800abd6:	4619      	mov	r1, r3
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 fc43 	bl	800b464 <USBD_CtlSendData>
              break;
 800abde:	e06a      	b.n	800acb6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800abe0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	da11      	bge.n	800ac0c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800abe8:	7bbb      	ldrb	r3, [r7, #14]
 800abea:	f003 020f 	and.w	r2, r3, #15
 800abee:	6879      	ldr	r1, [r7, #4]
 800abf0:	4613      	mov	r3, r2
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	4413      	add	r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	440b      	add	r3, r1
 800abfa:	3324      	adds	r3, #36	@ 0x24
 800abfc:	881b      	ldrh	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d117      	bne.n	800ac32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ac02:	6839      	ldr	r1, [r7, #0]
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 fbb0 	bl	800b36a <USBD_CtlError>
                  break;
 800ac0a:	e054      	b.n	800acb6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ac0c:	7bbb      	ldrb	r3, [r7, #14]
 800ac0e:	f003 020f 	and.w	r2, r3, #15
 800ac12:	6879      	ldr	r1, [r7, #4]
 800ac14:	4613      	mov	r3, r2
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	4413      	add	r3, r2
 800ac1a:	009b      	lsls	r3, r3, #2
 800ac1c:	440b      	add	r3, r1
 800ac1e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac22:	881b      	ldrh	r3, [r3, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d104      	bne.n	800ac32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ac28:	6839      	ldr	r1, [r7, #0]
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fb9d 	bl	800b36a <USBD_CtlError>
                  break;
 800ac30:	e041      	b.n	800acb6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	da0b      	bge.n	800ac52 <USBD_StdEPReq+0x2b2>
 800ac3a:	7bbb      	ldrb	r3, [r7, #14]
 800ac3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ac40:	4613      	mov	r3, r2
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	4413      	add	r3, r2
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	3310      	adds	r3, #16
 800ac4a:	687a      	ldr	r2, [r7, #4]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	3304      	adds	r3, #4
 800ac50:	e00b      	b.n	800ac6a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac52:	7bbb      	ldrb	r3, [r7, #14]
 800ac54:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac58:	4613      	mov	r3, r2
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	4413      	add	r3, r2
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	4413      	add	r3, r2
 800ac68:	3304      	adds	r3, #4
 800ac6a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ac6c:	7bbb      	ldrb	r3, [r7, #14]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d002      	beq.n	800ac78 <USBD_StdEPReq+0x2d8>
 800ac72:	7bbb      	ldrb	r3, [r7, #14]
 800ac74:	2b80      	cmp	r3, #128	@ 0x80
 800ac76:	d103      	bne.n	800ac80 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	601a      	str	r2, [r3, #0]
 800ac7e:	e00e      	b.n	800ac9e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ac80:	7bbb      	ldrb	r3, [r7, #14]
 800ac82:	4619      	mov	r1, r3
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f001 f8c5 	bl	800be14 <USBD_LL_IsStallEP>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d003      	beq.n	800ac98 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	2201      	movs	r2, #1
 800ac94:	601a      	str	r2, [r3, #0]
 800ac96:	e002      	b.n	800ac9e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	2202      	movs	r2, #2
 800aca2:	4619      	mov	r1, r3
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f000 fbdd 	bl	800b464 <USBD_CtlSendData>
              break;
 800acaa:	e004      	b.n	800acb6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800acac:	6839      	ldr	r1, [r7, #0]
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 fb5b 	bl	800b36a <USBD_CtlError>
              break;
 800acb4:	bf00      	nop
          }
          break;
 800acb6:	e004      	b.n	800acc2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800acb8:	6839      	ldr	r1, [r7, #0]
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 fb55 	bl	800b36a <USBD_CtlError>
          break;
 800acc0:	bf00      	nop
      }
      break;
 800acc2:	e005      	b.n	800acd0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800acc4:	6839      	ldr	r1, [r7, #0]
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	f000 fb4f 	bl	800b36a <USBD_CtlError>
      break;
 800accc:	e000      	b.n	800acd0 <USBD_StdEPReq+0x330>
      break;
 800acce:	bf00      	nop
  }

  return ret;
 800acd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
	...

0800acdc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ace6:	2300      	movs	r3, #0
 800ace8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800acea:	2300      	movs	r3, #0
 800acec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800acee:	2300      	movs	r3, #0
 800acf0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	885b      	ldrh	r3, [r3, #2]
 800acf6:	0a1b      	lsrs	r3, r3, #8
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	3b01      	subs	r3, #1
 800acfc:	2b06      	cmp	r3, #6
 800acfe:	f200 8128 	bhi.w	800af52 <USBD_GetDescriptor+0x276>
 800ad02:	a201      	add	r2, pc, #4	@ (adr r2, 800ad08 <USBD_GetDescriptor+0x2c>)
 800ad04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad08:	0800ad25 	.word	0x0800ad25
 800ad0c:	0800ad3d 	.word	0x0800ad3d
 800ad10:	0800ad7d 	.word	0x0800ad7d
 800ad14:	0800af53 	.word	0x0800af53
 800ad18:	0800af53 	.word	0x0800af53
 800ad1c:	0800aef3 	.word	0x0800aef3
 800ad20:	0800af1f 	.word	0x0800af1f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	7c12      	ldrb	r2, [r2, #16]
 800ad30:	f107 0108 	add.w	r1, r7, #8
 800ad34:	4610      	mov	r0, r2
 800ad36:	4798      	blx	r3
 800ad38:	60f8      	str	r0, [r7, #12]
      break;
 800ad3a:	e112      	b.n	800af62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	7c1b      	ldrb	r3, [r3, #16]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d10d      	bne.n	800ad60 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad4c:	f107 0208 	add.w	r2, r7, #8
 800ad50:	4610      	mov	r0, r2
 800ad52:	4798      	blx	r3
 800ad54:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	2202      	movs	r2, #2
 800ad5c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ad5e:	e100      	b.n	800af62 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad68:	f107 0208 	add.w	r2, r7, #8
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	4798      	blx	r3
 800ad70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	3301      	adds	r3, #1
 800ad76:	2202      	movs	r2, #2
 800ad78:	701a      	strb	r2, [r3, #0]
      break;
 800ad7a:	e0f2      	b.n	800af62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	885b      	ldrh	r3, [r3, #2]
 800ad80:	b2db      	uxtb	r3, r3
 800ad82:	2b05      	cmp	r3, #5
 800ad84:	f200 80ac 	bhi.w	800aee0 <USBD_GetDescriptor+0x204>
 800ad88:	a201      	add	r2, pc, #4	@ (adr r2, 800ad90 <USBD_GetDescriptor+0xb4>)
 800ad8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad8e:	bf00      	nop
 800ad90:	0800ada9 	.word	0x0800ada9
 800ad94:	0800addd 	.word	0x0800addd
 800ad98:	0800ae11 	.word	0x0800ae11
 800ad9c:	0800ae45 	.word	0x0800ae45
 800ada0:	0800ae79 	.word	0x0800ae79
 800ada4:	0800aead 	.word	0x0800aead
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d00b      	beq.n	800adcc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	7c12      	ldrb	r2, [r2, #16]
 800adc0:	f107 0108 	add.w	r1, r7, #8
 800adc4:	4610      	mov	r0, r2
 800adc6:	4798      	blx	r3
 800adc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adca:	e091      	b.n	800aef0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800adcc:	6839      	ldr	r1, [r7, #0]
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 facb 	bl	800b36a <USBD_CtlError>
            err++;
 800add4:	7afb      	ldrb	r3, [r7, #11]
 800add6:	3301      	adds	r3, #1
 800add8:	72fb      	strb	r3, [r7, #11]
          break;
 800adda:	e089      	b.n	800aef0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d00b      	beq.n	800ae00 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	7c12      	ldrb	r2, [r2, #16]
 800adf4:	f107 0108 	add.w	r1, r7, #8
 800adf8:	4610      	mov	r0, r2
 800adfa:	4798      	blx	r3
 800adfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adfe:	e077      	b.n	800aef0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae00:	6839      	ldr	r1, [r7, #0]
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 fab1 	bl	800b36a <USBD_CtlError>
            err++;
 800ae08:	7afb      	ldrb	r3, [r7, #11]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae0e:	e06f      	b.n	800aef0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d00b      	beq.n	800ae34 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae22:	68db      	ldr	r3, [r3, #12]
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	7c12      	ldrb	r2, [r2, #16]
 800ae28:	f107 0108 	add.w	r1, r7, #8
 800ae2c:	4610      	mov	r0, r2
 800ae2e:	4798      	blx	r3
 800ae30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae32:	e05d      	b.n	800aef0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae34:	6839      	ldr	r1, [r7, #0]
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 fa97 	bl	800b36a <USBD_CtlError>
            err++;
 800ae3c:	7afb      	ldrb	r3, [r7, #11]
 800ae3e:	3301      	adds	r3, #1
 800ae40:	72fb      	strb	r3, [r7, #11]
          break;
 800ae42:	e055      	b.n	800aef0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae4a:	691b      	ldr	r3, [r3, #16]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00b      	beq.n	800ae68 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae56:	691b      	ldr	r3, [r3, #16]
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	7c12      	ldrb	r2, [r2, #16]
 800ae5c:	f107 0108 	add.w	r1, r7, #8
 800ae60:	4610      	mov	r0, r2
 800ae62:	4798      	blx	r3
 800ae64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae66:	e043      	b.n	800aef0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae68:	6839      	ldr	r1, [r7, #0]
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 fa7d 	bl	800b36a <USBD_CtlError>
            err++;
 800ae70:	7afb      	ldrb	r3, [r7, #11]
 800ae72:	3301      	adds	r3, #1
 800ae74:	72fb      	strb	r3, [r7, #11]
          break;
 800ae76:	e03b      	b.n	800aef0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae7e:	695b      	ldr	r3, [r3, #20]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d00b      	beq.n	800ae9c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae8a:	695b      	ldr	r3, [r3, #20]
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	7c12      	ldrb	r2, [r2, #16]
 800ae90:	f107 0108 	add.w	r1, r7, #8
 800ae94:	4610      	mov	r0, r2
 800ae96:	4798      	blx	r3
 800ae98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae9a:	e029      	b.n	800aef0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae9c:	6839      	ldr	r1, [r7, #0]
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fa63 	bl	800b36a <USBD_CtlError>
            err++;
 800aea4:	7afb      	ldrb	r3, [r7, #11]
 800aea6:	3301      	adds	r3, #1
 800aea8:	72fb      	strb	r3, [r7, #11]
          break;
 800aeaa:	e021      	b.n	800aef0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aeb2:	699b      	ldr	r3, [r3, #24]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d00b      	beq.n	800aed0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aebe:	699b      	ldr	r3, [r3, #24]
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	7c12      	ldrb	r2, [r2, #16]
 800aec4:	f107 0108 	add.w	r1, r7, #8
 800aec8:	4610      	mov	r0, r2
 800aeca:	4798      	blx	r3
 800aecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aece:	e00f      	b.n	800aef0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aed0:	6839      	ldr	r1, [r7, #0]
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 fa49 	bl	800b36a <USBD_CtlError>
            err++;
 800aed8:	7afb      	ldrb	r3, [r7, #11]
 800aeda:	3301      	adds	r3, #1
 800aedc:	72fb      	strb	r3, [r7, #11]
          break;
 800aede:	e007      	b.n	800aef0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aee0:	6839      	ldr	r1, [r7, #0]
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 fa41 	bl	800b36a <USBD_CtlError>
          err++;
 800aee8:	7afb      	ldrb	r3, [r7, #11]
 800aeea:	3301      	adds	r3, #1
 800aeec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800aeee:	bf00      	nop
      }
      break;
 800aef0:	e037      	b.n	800af62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	7c1b      	ldrb	r3, [r3, #16]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d109      	bne.n	800af0e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af02:	f107 0208 	add.w	r2, r7, #8
 800af06:	4610      	mov	r0, r2
 800af08:	4798      	blx	r3
 800af0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af0c:	e029      	b.n	800af62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af0e:	6839      	ldr	r1, [r7, #0]
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 fa2a 	bl	800b36a <USBD_CtlError>
        err++;
 800af16:	7afb      	ldrb	r3, [r7, #11]
 800af18:	3301      	adds	r3, #1
 800af1a:	72fb      	strb	r3, [r7, #11]
      break;
 800af1c:	e021      	b.n	800af62 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	7c1b      	ldrb	r3, [r3, #16]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d10d      	bne.n	800af42 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af2e:	f107 0208 	add.w	r2, r7, #8
 800af32:	4610      	mov	r0, r2
 800af34:	4798      	blx	r3
 800af36:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	3301      	adds	r3, #1
 800af3c:	2207      	movs	r2, #7
 800af3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af40:	e00f      	b.n	800af62 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af42:	6839      	ldr	r1, [r7, #0]
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 fa10 	bl	800b36a <USBD_CtlError>
        err++;
 800af4a:	7afb      	ldrb	r3, [r7, #11]
 800af4c:	3301      	adds	r3, #1
 800af4e:	72fb      	strb	r3, [r7, #11]
      break;
 800af50:	e007      	b.n	800af62 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800af52:	6839      	ldr	r1, [r7, #0]
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 fa08 	bl	800b36a <USBD_CtlError>
      err++;
 800af5a:	7afb      	ldrb	r3, [r7, #11]
 800af5c:	3301      	adds	r3, #1
 800af5e:	72fb      	strb	r3, [r7, #11]
      break;
 800af60:	bf00      	nop
  }

  if (err != 0U)
 800af62:	7afb      	ldrb	r3, [r7, #11]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d11e      	bne.n	800afa6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	88db      	ldrh	r3, [r3, #6]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d016      	beq.n	800af9e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800af70:	893b      	ldrh	r3, [r7, #8]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00e      	beq.n	800af94 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	88da      	ldrh	r2, [r3, #6]
 800af7a:	893b      	ldrh	r3, [r7, #8]
 800af7c:	4293      	cmp	r3, r2
 800af7e:	bf28      	it	cs
 800af80:	4613      	movcs	r3, r2
 800af82:	b29b      	uxth	r3, r3
 800af84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800af86:	893b      	ldrh	r3, [r7, #8]
 800af88:	461a      	mov	r2, r3
 800af8a:	68f9      	ldr	r1, [r7, #12]
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 fa69 	bl	800b464 <USBD_CtlSendData>
 800af92:	e009      	b.n	800afa8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800af94:	6839      	ldr	r1, [r7, #0]
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 f9e7 	bl	800b36a <USBD_CtlError>
 800af9c:	e004      	b.n	800afa8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 faba 	bl	800b518 <USBD_CtlSendStatus>
 800afa4:	e000      	b.n	800afa8 <USBD_GetDescriptor+0x2cc>
    return;
 800afa6:	bf00      	nop
  }
}
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop

0800afb0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b084      	sub	sp, #16
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	889b      	ldrh	r3, [r3, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d131      	bne.n	800b026 <USBD_SetAddress+0x76>
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	88db      	ldrh	r3, [r3, #6]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d12d      	bne.n	800b026 <USBD_SetAddress+0x76>
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	885b      	ldrh	r3, [r3, #2]
 800afce:	2b7f      	cmp	r3, #127	@ 0x7f
 800afd0:	d829      	bhi.n	800b026 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	885b      	ldrh	r3, [r3, #2]
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800afdc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	2b03      	cmp	r3, #3
 800afe8:	d104      	bne.n	800aff4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800afea:	6839      	ldr	r1, [r7, #0]
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 f9bc 	bl	800b36a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aff2:	e01d      	b.n	800b030 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	7bfa      	ldrb	r2, [r7, #15]
 800aff8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800affc:	7bfb      	ldrb	r3, [r7, #15]
 800affe:	4619      	mov	r1, r3
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 ff33 	bl	800be6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 fa86 	bl	800b518 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b00c:	7bfb      	ldrb	r3, [r7, #15]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d004      	beq.n	800b01c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2202      	movs	r2, #2
 800b016:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b01a:	e009      	b.n	800b030 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b024:	e004      	b.n	800b030 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b026:	6839      	ldr	r1, [r7, #0]
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 f99e 	bl	800b36a <USBD_CtlError>
  }
}
 800b02e:	bf00      	nop
 800b030:	bf00      	nop
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b042:	2300      	movs	r3, #0
 800b044:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	885b      	ldrh	r3, [r3, #2]
 800b04a:	b2da      	uxtb	r2, r3
 800b04c:	4b4e      	ldr	r3, [pc, #312]	@ (800b188 <USBD_SetConfig+0x150>)
 800b04e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b050:	4b4d      	ldr	r3, [pc, #308]	@ (800b188 <USBD_SetConfig+0x150>)
 800b052:	781b      	ldrb	r3, [r3, #0]
 800b054:	2b01      	cmp	r3, #1
 800b056:	d905      	bls.n	800b064 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b058:	6839      	ldr	r1, [r7, #0]
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 f985 	bl	800b36a <USBD_CtlError>
    return USBD_FAIL;
 800b060:	2303      	movs	r3, #3
 800b062:	e08c      	b.n	800b17e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	d002      	beq.n	800b076 <USBD_SetConfig+0x3e>
 800b070:	2b03      	cmp	r3, #3
 800b072:	d029      	beq.n	800b0c8 <USBD_SetConfig+0x90>
 800b074:	e075      	b.n	800b162 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b076:	4b44      	ldr	r3, [pc, #272]	@ (800b188 <USBD_SetConfig+0x150>)
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d020      	beq.n	800b0c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b07e:	4b42      	ldr	r3, [pc, #264]	@ (800b188 <USBD_SetConfig+0x150>)
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	461a      	mov	r2, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b088:	4b3f      	ldr	r3, [pc, #252]	@ (800b188 <USBD_SetConfig+0x150>)
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	4619      	mov	r1, r3
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f7fe ffe3 	bl	800a05a <USBD_SetClassConfig>
 800b094:	4603      	mov	r3, r0
 800b096:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b098:	7bfb      	ldrb	r3, [r7, #15]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d008      	beq.n	800b0b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b09e:	6839      	ldr	r1, [r7, #0]
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f000 f962 	bl	800b36a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2202      	movs	r2, #2
 800b0aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b0ae:	e065      	b.n	800b17c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 fa31 	bl	800b518 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2203      	movs	r2, #3
 800b0ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b0be:	e05d      	b.n	800b17c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 fa29 	bl	800b518 <USBD_CtlSendStatus>
      break;
 800b0c6:	e059      	b.n	800b17c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b0c8:	4b2f      	ldr	r3, [pc, #188]	@ (800b188 <USBD_SetConfig+0x150>)
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d112      	bne.n	800b0f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2202      	movs	r2, #2
 800b0d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b0d8:	4b2b      	ldr	r3, [pc, #172]	@ (800b188 <USBD_SetConfig+0x150>)
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	461a      	mov	r2, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b0e2:	4b29      	ldr	r3, [pc, #164]	@ (800b188 <USBD_SetConfig+0x150>)
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f7fe ffd2 	bl	800a092 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 fa12 	bl	800b518 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b0f4:	e042      	b.n	800b17c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b0f6:	4b24      	ldr	r3, [pc, #144]	@ (800b188 <USBD_SetConfig+0x150>)
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	461a      	mov	r2, r3
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	429a      	cmp	r2, r3
 800b102:	d02a      	beq.n	800b15a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	4619      	mov	r1, r3
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f7fe ffc0 	bl	800a092 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b112:	4b1d      	ldr	r3, [pc, #116]	@ (800b188 <USBD_SetConfig+0x150>)
 800b114:	781b      	ldrb	r3, [r3, #0]
 800b116:	461a      	mov	r2, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b11c:	4b1a      	ldr	r3, [pc, #104]	@ (800b188 <USBD_SetConfig+0x150>)
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	4619      	mov	r1, r3
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f7fe ff99 	bl	800a05a <USBD_SetClassConfig>
 800b128:	4603      	mov	r3, r0
 800b12a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b12c:	7bfb      	ldrb	r3, [r7, #15]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00f      	beq.n	800b152 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b132:	6839      	ldr	r1, [r7, #0]
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 f918 	bl	800b36a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	4619      	mov	r1, r3
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f7fe ffa5 	bl	800a092 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2202      	movs	r2, #2
 800b14c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b150:	e014      	b.n	800b17c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 f9e0 	bl	800b518 <USBD_CtlSendStatus>
      break;
 800b158:	e010      	b.n	800b17c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 f9dc 	bl	800b518 <USBD_CtlSendStatus>
      break;
 800b160:	e00c      	b.n	800b17c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b162:	6839      	ldr	r1, [r7, #0]
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 f900 	bl	800b36a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b16a:	4b07      	ldr	r3, [pc, #28]	@ (800b188 <USBD_SetConfig+0x150>)
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f7fe ff8e 	bl	800a092 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b176:	2303      	movs	r3, #3
 800b178:	73fb      	strb	r3, [r7, #15]
      break;
 800b17a:	bf00      	nop
  }

  return ret;
 800b17c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}
 800b186:	bf00      	nop
 800b188:	20000846 	.word	0x20000846

0800b18c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	88db      	ldrh	r3, [r3, #6]
 800b19a:	2b01      	cmp	r3, #1
 800b19c:	d004      	beq.n	800b1a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b19e:	6839      	ldr	r1, [r7, #0]
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 f8e2 	bl	800b36a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b1a6:	e023      	b.n	800b1f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	2b02      	cmp	r3, #2
 800b1b2:	dc02      	bgt.n	800b1ba <USBD_GetConfig+0x2e>
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	dc03      	bgt.n	800b1c0 <USBD_GetConfig+0x34>
 800b1b8:	e015      	b.n	800b1e6 <USBD_GetConfig+0x5a>
 800b1ba:	2b03      	cmp	r3, #3
 800b1bc:	d00b      	beq.n	800b1d6 <USBD_GetConfig+0x4a>
 800b1be:	e012      	b.n	800b1e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	3308      	adds	r3, #8
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	4619      	mov	r1, r3
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 f948 	bl	800b464 <USBD_CtlSendData>
        break;
 800b1d4:	e00c      	b.n	800b1f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	3304      	adds	r3, #4
 800b1da:	2201      	movs	r2, #1
 800b1dc:	4619      	mov	r1, r3
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 f940 	bl	800b464 <USBD_CtlSendData>
        break;
 800b1e4:	e004      	b.n	800b1f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b1e6:	6839      	ldr	r1, [r7, #0]
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 f8be 	bl	800b36a <USBD_CtlError>
        break;
 800b1ee:	bf00      	nop
}
 800b1f0:	bf00      	nop
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b208:	b2db      	uxtb	r3, r3
 800b20a:	3b01      	subs	r3, #1
 800b20c:	2b02      	cmp	r3, #2
 800b20e:	d81e      	bhi.n	800b24e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	88db      	ldrh	r3, [r3, #6]
 800b214:	2b02      	cmp	r3, #2
 800b216:	d004      	beq.n	800b222 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b218:	6839      	ldr	r1, [r7, #0]
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 f8a5 	bl	800b36a <USBD_CtlError>
        break;
 800b220:	e01a      	b.n	800b258 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2201      	movs	r2, #1
 800b226:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d005      	beq.n	800b23e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	68db      	ldr	r3, [r3, #12]
 800b236:	f043 0202 	orr.w	r2, r3, #2
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	330c      	adds	r3, #12
 800b242:	2202      	movs	r2, #2
 800b244:	4619      	mov	r1, r3
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 f90c 	bl	800b464 <USBD_CtlSendData>
      break;
 800b24c:	e004      	b.n	800b258 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b24e:	6839      	ldr	r1, [r7, #0]
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 f88a 	bl	800b36a <USBD_CtlError>
      break;
 800b256:	bf00      	nop
  }
}
 800b258:	bf00      	nop
 800b25a:	3708      	adds	r7, #8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	885b      	ldrh	r3, [r3, #2]
 800b26e:	2b01      	cmp	r3, #1
 800b270:	d107      	bne.n	800b282 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2201      	movs	r2, #1
 800b276:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f000 f94c 	bl	800b518 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b280:	e013      	b.n	800b2aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	885b      	ldrh	r3, [r3, #2]
 800b286:	2b02      	cmp	r3, #2
 800b288:	d10b      	bne.n	800b2a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	889b      	ldrh	r3, [r3, #4]
 800b28e:	0a1b      	lsrs	r3, r3, #8
 800b290:	b29b      	uxth	r3, r3
 800b292:	b2da      	uxtb	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 f93c 	bl	800b518 <USBD_CtlSendStatus>
}
 800b2a0:	e003      	b.n	800b2aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b2a2:	6839      	ldr	r1, [r7, #0]
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f860 	bl	800b36a <USBD_CtlError>
}
 800b2aa:	bf00      	nop
 800b2ac:	3708      	adds	r7, #8
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b082      	sub	sp, #8
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
 800b2ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2c2:	b2db      	uxtb	r3, r3
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	2b02      	cmp	r3, #2
 800b2c8:	d80b      	bhi.n	800b2e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	885b      	ldrh	r3, [r3, #2]
 800b2ce:	2b01      	cmp	r3, #1
 800b2d0:	d10c      	bne.n	800b2ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 f91c 	bl	800b518 <USBD_CtlSendStatus>
      }
      break;
 800b2e0:	e004      	b.n	800b2ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b2e2:	6839      	ldr	r1, [r7, #0]
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 f840 	bl	800b36a <USBD_CtlError>
      break;
 800b2ea:	e000      	b.n	800b2ee <USBD_ClrFeature+0x3c>
      break;
 800b2ec:	bf00      	nop
  }
}
 800b2ee:	bf00      	nop
 800b2f0:	3708      	adds	r7, #8
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b084      	sub	sp, #16
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
 800b2fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	781a      	ldrb	r2, [r3, #0]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	3301      	adds	r3, #1
 800b310:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	781a      	ldrb	r2, [r3, #0]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	3301      	adds	r3, #1
 800b31e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b320:	68f8      	ldr	r0, [r7, #12]
 800b322:	f7ff fa40 	bl	800a7a6 <SWAPBYTE>
 800b326:	4603      	mov	r3, r0
 800b328:	461a      	mov	r2, r3
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	3301      	adds	r3, #1
 800b332:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	3301      	adds	r3, #1
 800b338:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b33a:	68f8      	ldr	r0, [r7, #12]
 800b33c:	f7ff fa33 	bl	800a7a6 <SWAPBYTE>
 800b340:	4603      	mov	r3, r0
 800b342:	461a      	mov	r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	3301      	adds	r3, #1
 800b34c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	3301      	adds	r3, #1
 800b352:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	f7ff fa26 	bl	800a7a6 <SWAPBYTE>
 800b35a:	4603      	mov	r3, r0
 800b35c:	461a      	mov	r2, r3
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	80da      	strh	r2, [r3, #6]
}
 800b362:	bf00      	nop
 800b364:	3710      	adds	r7, #16
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}

0800b36a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b36a:	b580      	push	{r7, lr}
 800b36c:	b082      	sub	sp, #8
 800b36e:	af00      	add	r7, sp, #0
 800b370:	6078      	str	r0, [r7, #4]
 800b372:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b374:	2180      	movs	r1, #128	@ 0x80
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 fd0e 	bl	800bd98 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b37c:	2100      	movs	r1, #0
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 fd0a 	bl	800bd98 <USBD_LL_StallEP>
}
 800b384:	bf00      	nop
 800b386:	3708      	adds	r7, #8
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b086      	sub	sp, #24
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b398:	2300      	movs	r3, #0
 800b39a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d042      	beq.n	800b428 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b3a6:	6938      	ldr	r0, [r7, #16]
 800b3a8:	f000 f842 	bl	800b430 <USBD_GetLen>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	005b      	lsls	r3, r3, #1
 800b3b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3b6:	d808      	bhi.n	800b3ca <USBD_GetString+0x3e>
 800b3b8:	6938      	ldr	r0, [r7, #16]
 800b3ba:	f000 f839 	bl	800b430 <USBD_GetLen>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	005b      	lsls	r3, r3, #1
 800b3c6:	b29a      	uxth	r2, r3
 800b3c8:	e001      	b.n	800b3ce <USBD_GetString+0x42>
 800b3ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b3d2:	7dfb      	ldrb	r3, [r7, #23]
 800b3d4:	68ba      	ldr	r2, [r7, #8]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	7812      	ldrb	r2, [r2, #0]
 800b3dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800b3de:	7dfb      	ldrb	r3, [r7, #23]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b3e4:	7dfb      	ldrb	r3, [r7, #23]
 800b3e6:	68ba      	ldr	r2, [r7, #8]
 800b3e8:	4413      	add	r3, r2
 800b3ea:	2203      	movs	r2, #3
 800b3ec:	701a      	strb	r2, [r3, #0]
  idx++;
 800b3ee:	7dfb      	ldrb	r3, [r7, #23]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b3f4:	e013      	b.n	800b41e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b3f6:	7dfb      	ldrb	r3, [r7, #23]
 800b3f8:	68ba      	ldr	r2, [r7, #8]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	693a      	ldr	r2, [r7, #16]
 800b3fe:	7812      	ldrb	r2, [r2, #0]
 800b400:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	3301      	adds	r3, #1
 800b406:	613b      	str	r3, [r7, #16]
    idx++;
 800b408:	7dfb      	ldrb	r3, [r7, #23]
 800b40a:	3301      	adds	r3, #1
 800b40c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b40e:	7dfb      	ldrb	r3, [r7, #23]
 800b410:	68ba      	ldr	r2, [r7, #8]
 800b412:	4413      	add	r3, r2
 800b414:	2200      	movs	r2, #0
 800b416:	701a      	strb	r2, [r3, #0]
    idx++;
 800b418:	7dfb      	ldrb	r3, [r7, #23]
 800b41a:	3301      	adds	r3, #1
 800b41c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d1e7      	bne.n	800b3f6 <USBD_GetString+0x6a>
 800b426:	e000      	b.n	800b42a <USBD_GetString+0x9e>
    return;
 800b428:	bf00      	nop
  }
}
 800b42a:	3718      	adds	r7, #24
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b430:	b480      	push	{r7}
 800b432:	b085      	sub	sp, #20
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b438:	2300      	movs	r3, #0
 800b43a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b440:	e005      	b.n	800b44e <USBD_GetLen+0x1e>
  {
    len++;
 800b442:	7bfb      	ldrb	r3, [r7, #15]
 800b444:	3301      	adds	r3, #1
 800b446:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	3301      	adds	r3, #1
 800b44c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1f5      	bne.n	800b442 <USBD_GetLen+0x12>
  }

  return len;
 800b456:	7bfb      	ldrb	r3, [r7, #15]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3714      	adds	r7, #20
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	2202      	movs	r2, #2
 800b474:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	68ba      	ldr	r2, [r7, #8]
 800b488:	2100      	movs	r1, #0
 800b48a:	68f8      	ldr	r0, [r7, #12]
 800b48c:	f000 fd0d 	bl	800beaa <USBD_LL_Transmit>

  return USBD_OK;
 800b490:	2300      	movs	r3, #0
}
 800b492:	4618      	mov	r0, r3
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b084      	sub	sp, #16
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	60f8      	str	r0, [r7, #12]
 800b4a2:	60b9      	str	r1, [r7, #8]
 800b4a4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	68ba      	ldr	r2, [r7, #8]
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	68f8      	ldr	r0, [r7, #12]
 800b4ae:	f000 fcfc 	bl	800beaa <USBD_LL_Transmit>

  return USBD_OK;
 800b4b2:	2300      	movs	r3, #0
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3710      	adds	r7, #16
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2203      	movs	r2, #3
 800b4cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	68ba      	ldr	r2, [r7, #8]
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	68f8      	ldr	r0, [r7, #12]
 800b4e8:	f000 fd00 	bl	800beec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b084      	sub	sp, #16
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	60f8      	str	r0, [r7, #12]
 800b4fe:	60b9      	str	r1, [r7, #8]
 800b500:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	68ba      	ldr	r2, [r7, #8]
 800b506:	2100      	movs	r1, #0
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f000 fcef 	bl	800beec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	3710      	adds	r7, #16
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2204      	movs	r2, #4
 800b524:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b528:	2300      	movs	r3, #0
 800b52a:	2200      	movs	r2, #0
 800b52c:	2100      	movs	r1, #0
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 fcbb 	bl	800beaa <USBD_LL_Transmit>

  return USBD_OK;
 800b534:	2300      	movs	r3, #0
}
 800b536:	4618      	mov	r0, r3
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b53e:	b580      	push	{r7, lr}
 800b540:	b082      	sub	sp, #8
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2205      	movs	r2, #5
 800b54a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b54e:	2300      	movs	r3, #0
 800b550:	2200      	movs	r2, #0
 800b552:	2100      	movs	r1, #0
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 fcc9 	bl	800beec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b568:	2200      	movs	r2, #0
 800b56a:	4912      	ldr	r1, [pc, #72]	@ (800b5b4 <MX_USB_DEVICE_Init+0x50>)
 800b56c:	4812      	ldr	r0, [pc, #72]	@ (800b5b8 <MX_USB_DEVICE_Init+0x54>)
 800b56e:	f7fe fcf7 	bl	8009f60 <USBD_Init>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d001      	beq.n	800b57c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b578:	f7f5 ffb8 	bl	80014ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b57c:	490f      	ldr	r1, [pc, #60]	@ (800b5bc <MX_USB_DEVICE_Init+0x58>)
 800b57e:	480e      	ldr	r0, [pc, #56]	@ (800b5b8 <MX_USB_DEVICE_Init+0x54>)
 800b580:	f7fe fd1e 	bl	8009fc0 <USBD_RegisterClass>
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d001      	beq.n	800b58e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b58a:	f7f5 ffaf 	bl	80014ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b58e:	490c      	ldr	r1, [pc, #48]	@ (800b5c0 <MX_USB_DEVICE_Init+0x5c>)
 800b590:	4809      	ldr	r0, [pc, #36]	@ (800b5b8 <MX_USB_DEVICE_Init+0x54>)
 800b592:	f7fe fc15 	bl	8009dc0 <USBD_CDC_RegisterInterface>
 800b596:	4603      	mov	r3, r0
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d001      	beq.n	800b5a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b59c:	f7f5 ffa6 	bl	80014ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b5a0:	4805      	ldr	r0, [pc, #20]	@ (800b5b8 <MX_USB_DEVICE_Init+0x54>)
 800b5a2:	f7fe fd43 	bl	800a02c <USBD_Start>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d001      	beq.n	800b5b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b5ac:	f7f5 ff9e 	bl	80014ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b5b0:	bf00      	nop
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	200000b4 	.word	0x200000b4
 800b5b8:	20000848 	.word	0x20000848
 800b5bc:	20000020 	.word	0x20000020
 800b5c0:	200000a0 	.word	0x200000a0

0800b5c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	4905      	ldr	r1, [pc, #20]	@ (800b5e0 <CDC_Init_FS+0x1c>)
 800b5cc:	4805      	ldr	r0, [pc, #20]	@ (800b5e4 <CDC_Init_FS+0x20>)
 800b5ce:	f7fe fc11 	bl	8009df4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b5d2:	4905      	ldr	r1, [pc, #20]	@ (800b5e8 <CDC_Init_FS+0x24>)
 800b5d4:	4803      	ldr	r0, [pc, #12]	@ (800b5e4 <CDC_Init_FS+0x20>)
 800b5d6:	f7fe fc2f 	bl	8009e38 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b5da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	20001328 	.word	0x20001328
 800b5e4:	20000848 	.word	0x20000848
 800b5e8:	20000b28 	.word	0x20000b28

0800b5ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b5f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	4603      	mov	r3, r0
 800b604:	6039      	str	r1, [r7, #0]
 800b606:	71fb      	strb	r3, [r7, #7]
 800b608:	4613      	mov	r3, r2
 800b60a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b60c:	79fb      	ldrb	r3, [r7, #7]
 800b60e:	2b23      	cmp	r3, #35	@ 0x23
 800b610:	d84a      	bhi.n	800b6a8 <CDC_Control_FS+0xac>
 800b612:	a201      	add	r2, pc, #4	@ (adr r2, 800b618 <CDC_Control_FS+0x1c>)
 800b614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b618:	0800b6a9 	.word	0x0800b6a9
 800b61c:	0800b6a9 	.word	0x0800b6a9
 800b620:	0800b6a9 	.word	0x0800b6a9
 800b624:	0800b6a9 	.word	0x0800b6a9
 800b628:	0800b6a9 	.word	0x0800b6a9
 800b62c:	0800b6a9 	.word	0x0800b6a9
 800b630:	0800b6a9 	.word	0x0800b6a9
 800b634:	0800b6a9 	.word	0x0800b6a9
 800b638:	0800b6a9 	.word	0x0800b6a9
 800b63c:	0800b6a9 	.word	0x0800b6a9
 800b640:	0800b6a9 	.word	0x0800b6a9
 800b644:	0800b6a9 	.word	0x0800b6a9
 800b648:	0800b6a9 	.word	0x0800b6a9
 800b64c:	0800b6a9 	.word	0x0800b6a9
 800b650:	0800b6a9 	.word	0x0800b6a9
 800b654:	0800b6a9 	.word	0x0800b6a9
 800b658:	0800b6a9 	.word	0x0800b6a9
 800b65c:	0800b6a9 	.word	0x0800b6a9
 800b660:	0800b6a9 	.word	0x0800b6a9
 800b664:	0800b6a9 	.word	0x0800b6a9
 800b668:	0800b6a9 	.word	0x0800b6a9
 800b66c:	0800b6a9 	.word	0x0800b6a9
 800b670:	0800b6a9 	.word	0x0800b6a9
 800b674:	0800b6a9 	.word	0x0800b6a9
 800b678:	0800b6a9 	.word	0x0800b6a9
 800b67c:	0800b6a9 	.word	0x0800b6a9
 800b680:	0800b6a9 	.word	0x0800b6a9
 800b684:	0800b6a9 	.word	0x0800b6a9
 800b688:	0800b6a9 	.word	0x0800b6a9
 800b68c:	0800b6a9 	.word	0x0800b6a9
 800b690:	0800b6a9 	.word	0x0800b6a9
 800b694:	0800b6a9 	.word	0x0800b6a9
 800b698:	0800b6a9 	.word	0x0800b6a9
 800b69c:	0800b6a9 	.word	0x0800b6a9
 800b6a0:	0800b6a9 	.word	0x0800b6a9
 800b6a4:	0800b6a9 	.word	0x0800b6a9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b6a8:	bf00      	nop
  }

  return (USBD_OK);
 800b6aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	370c      	adds	r7, #12
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b6c2:	6879      	ldr	r1, [r7, #4]
 800b6c4:	480e      	ldr	r0, [pc, #56]	@ (800b700 <CDC_Receive_FS+0x48>)
 800b6c6:	f7fe fbb7 	bl	8009e38 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b6ca:	480d      	ldr	r0, [pc, #52]	@ (800b700 <CDC_Receive_FS+0x48>)
 800b6cc:	f7fe fc12 	bl	8009ef4 <USBD_CDC_ReceivePacket>

  //https://controllerstech.com/send-and-receive-data-to-pc-without-uart-stm32-usb-com/

  uint8_t len = (uint8_t) *Len;
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	73fb      	strb	r3, [r7, #15]

    if(len == ROS_COMM_RX_SIZE){
 800b6d6:	7bfb      	ldrb	r3, [r7, #15]
 800b6d8:	2b0d      	cmp	r3, #13
 800b6da:	d105      	bne.n	800b6e8 <CDC_Receive_FS+0x30>
	  memcpy((uint8_t *)&rbc_Packet_t, Buf, len);  // copy the data to the buffer
 800b6dc:	7bfb      	ldrb	r3, [r7, #15]
 800b6de:	461a      	mov	r2, r3
 800b6e0:	6879      	ldr	r1, [r7, #4]
 800b6e2:	4808      	ldr	r0, [pc, #32]	@ (800b704 <CDC_Receive_FS+0x4c>)
 800b6e4:	f000 fca6 	bl	800c034 <memcpy>
    }

    rx_flag = 1;
 800b6e8:	4b07      	ldr	r3, [pc, #28]	@ (800b708 <CDC_Receive_FS+0x50>)
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	701a      	strb	r2, [r3, #0]
    tx_flag = 0;
 800b6ee:	4b07      	ldr	r3, [pc, #28]	@ (800b70c <CDC_Receive_FS+0x54>)
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800b6f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	20000848 	.word	0x20000848
 800b704:	20000810 	.word	0x20000810
 800b708:	20000b24 	.word	0x20000b24
 800b70c:	2000009e 	.word	0x2000009e

0800b710 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	460b      	mov	r3, r1
 800b71a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b71c:	2300      	movs	r3, #0
 800b71e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b720:	4b10      	ldr	r3, [pc, #64]	@ (800b764 <CDC_Transmit_FS+0x54>)
 800b722:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b726:	60bb      	str	r3, [r7, #8]
    if (hcdc->TxState != 0){
 800b728:	68bb      	ldr	r3, [r7, #8]
 800b72a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d001      	beq.n	800b736 <CDC_Transmit_FS+0x26>
      return USBD_BUSY;
 800b732:	2301      	movs	r3, #1
 800b734:	e011      	b.n	800b75a <CDC_Transmit_FS+0x4a>
    }
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b736:	887b      	ldrh	r3, [r7, #2]
 800b738:	461a      	mov	r2, r3
 800b73a:	6879      	ldr	r1, [r7, #4]
 800b73c:	4809      	ldr	r0, [pc, #36]	@ (800b764 <CDC_Transmit_FS+0x54>)
 800b73e:	f7fe fb59 	bl	8009df4 <USBD_CDC_SetTxBuffer>
    result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b742:	4808      	ldr	r0, [pc, #32]	@ (800b764 <CDC_Transmit_FS+0x54>)
 800b744:	f7fe fb96 	bl	8009e74 <USBD_CDC_TransmitPacket>
 800b748:	4603      	mov	r3, r0
 800b74a:	73fb      	strb	r3, [r7, #15]

    rx_flag = 0;
 800b74c:	4b06      	ldr	r3, [pc, #24]	@ (800b768 <CDC_Transmit_FS+0x58>)
 800b74e:	2200      	movs	r2, #0
 800b750:	701a      	strb	r2, [r3, #0]
    tx_flag = 1;
 800b752:	4b06      	ldr	r3, [pc, #24]	@ (800b76c <CDC_Transmit_FS+0x5c>)
 800b754:	2201      	movs	r2, #1
 800b756:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 7 */
  return result;
 800b758:	7bfb      	ldrb	r3, [r7, #15]
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3710      	adds	r7, #16
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}
 800b762:	bf00      	nop
 800b764:	20000848 	.word	0x20000848
 800b768:	20000b24 	.word	0x20000b24
 800b76c:	2000009e 	.word	0x2000009e

0800b770 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b770:	b480      	push	{r7}
 800b772:	b087      	sub	sp, #28
 800b774:	af00      	add	r7, sp, #0
 800b776:	60f8      	str	r0, [r7, #12]
 800b778:	60b9      	str	r1, [r7, #8]
 800b77a:	4613      	mov	r3, r2
 800b77c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b77e:	2300      	movs	r3, #0
 800b780:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b782:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b786:	4618      	mov	r0, r3
 800b788:	371c      	adds	r7, #28
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
	...

0800b794 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	4603      	mov	r3, r0
 800b79c:	6039      	str	r1, [r7, #0]
 800b79e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	2212      	movs	r2, #18
 800b7a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b7a6:	4b03      	ldr	r3, [pc, #12]	@ (800b7b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	370c      	adds	r7, #12
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr
 800b7b4:	200000d0 	.word	0x200000d0

0800b7b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	4603      	mov	r3, r0
 800b7c0:	6039      	str	r1, [r7, #0]
 800b7c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	2204      	movs	r2, #4
 800b7c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b7ca:	4b03      	ldr	r3, [pc, #12]	@ (800b7d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	370c      	adds	r7, #12
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr
 800b7d8:	200000e4 	.word	0x200000e4

0800b7dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	6039      	str	r1, [r7, #0]
 800b7e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7e8:	79fb      	ldrb	r3, [r7, #7]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d105      	bne.n	800b7fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b7ee:	683a      	ldr	r2, [r7, #0]
 800b7f0:	4907      	ldr	r1, [pc, #28]	@ (800b810 <USBD_FS_ProductStrDescriptor+0x34>)
 800b7f2:	4808      	ldr	r0, [pc, #32]	@ (800b814 <USBD_FS_ProductStrDescriptor+0x38>)
 800b7f4:	f7ff fdca 	bl	800b38c <USBD_GetString>
 800b7f8:	e004      	b.n	800b804 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b7fa:	683a      	ldr	r2, [r7, #0]
 800b7fc:	4904      	ldr	r1, [pc, #16]	@ (800b810 <USBD_FS_ProductStrDescriptor+0x34>)
 800b7fe:	4805      	ldr	r0, [pc, #20]	@ (800b814 <USBD_FS_ProductStrDescriptor+0x38>)
 800b800:	f7ff fdc4 	bl	800b38c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b804:	4b02      	ldr	r3, [pc, #8]	@ (800b810 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b806:	4618      	mov	r0, r3
 800b808:	3708      	adds	r7, #8
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	20001b28 	.word	0x20001b28
 800b814:	0800c098 	.word	0x0800c098

0800b818 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	4603      	mov	r3, r0
 800b820:	6039      	str	r1, [r7, #0]
 800b822:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b824:	683a      	ldr	r2, [r7, #0]
 800b826:	4904      	ldr	r1, [pc, #16]	@ (800b838 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b828:	4804      	ldr	r0, [pc, #16]	@ (800b83c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b82a:	f7ff fdaf 	bl	800b38c <USBD_GetString>
  return USBD_StrDesc;
 800b82e:	4b02      	ldr	r3, [pc, #8]	@ (800b838 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b830:	4618      	mov	r0, r3
 800b832:	3708      	adds	r7, #8
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}
 800b838:	20001b28 	.word	0x20001b28
 800b83c:	0800c0b0 	.word	0x0800c0b0

0800b840 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	4603      	mov	r3, r0
 800b848:	6039      	str	r1, [r7, #0]
 800b84a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	221a      	movs	r2, #26
 800b850:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b852:	f000 f843 	bl	800b8dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b856:	4b02      	ldr	r3, [pc, #8]	@ (800b860 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3708      	adds	r7, #8
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	200000e8 	.word	0x200000e8

0800b864 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	4603      	mov	r3, r0
 800b86c:	6039      	str	r1, [r7, #0]
 800b86e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b870:	79fb      	ldrb	r3, [r7, #7]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d105      	bne.n	800b882 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b876:	683a      	ldr	r2, [r7, #0]
 800b878:	4907      	ldr	r1, [pc, #28]	@ (800b898 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b87a:	4808      	ldr	r0, [pc, #32]	@ (800b89c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b87c:	f7ff fd86 	bl	800b38c <USBD_GetString>
 800b880:	e004      	b.n	800b88c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b882:	683a      	ldr	r2, [r7, #0]
 800b884:	4904      	ldr	r1, [pc, #16]	@ (800b898 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b886:	4805      	ldr	r0, [pc, #20]	@ (800b89c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b888:	f7ff fd80 	bl	800b38c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b88c:	4b02      	ldr	r3, [pc, #8]	@ (800b898 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b88e:	4618      	mov	r0, r3
 800b890:	3708      	adds	r7, #8
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	20001b28 	.word	0x20001b28
 800b89c:	0800c0c4 	.word	0x0800c0c4

0800b8a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	6039      	str	r1, [r7, #0]
 800b8aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b8ac:	79fb      	ldrb	r3, [r7, #7]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d105      	bne.n	800b8be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b8b2:	683a      	ldr	r2, [r7, #0]
 800b8b4:	4907      	ldr	r1, [pc, #28]	@ (800b8d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b8b6:	4808      	ldr	r0, [pc, #32]	@ (800b8d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b8b8:	f7ff fd68 	bl	800b38c <USBD_GetString>
 800b8bc:	e004      	b.n	800b8c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b8be:	683a      	ldr	r2, [r7, #0]
 800b8c0:	4904      	ldr	r1, [pc, #16]	@ (800b8d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b8c2:	4805      	ldr	r0, [pc, #20]	@ (800b8d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b8c4:	f7ff fd62 	bl	800b38c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8c8:	4b02      	ldr	r3, [pc, #8]	@ (800b8d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	20001b28 	.word	0x20001b28
 800b8d8:	0800c0d0 	.word	0x0800c0d0

0800b8dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b8e2:	4b0f      	ldr	r3, [pc, #60]	@ (800b920 <Get_SerialNum+0x44>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b8e8:	4b0e      	ldr	r3, [pc, #56]	@ (800b924 <Get_SerialNum+0x48>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b8ee:	4b0e      	ldr	r3, [pc, #56]	@ (800b928 <Get_SerialNum+0x4c>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d009      	beq.n	800b916 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b902:	2208      	movs	r2, #8
 800b904:	4909      	ldr	r1, [pc, #36]	@ (800b92c <Get_SerialNum+0x50>)
 800b906:	68f8      	ldr	r0, [r7, #12]
 800b908:	f000 f814 	bl	800b934 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b90c:	2204      	movs	r2, #4
 800b90e:	4908      	ldr	r1, [pc, #32]	@ (800b930 <Get_SerialNum+0x54>)
 800b910:	68b8      	ldr	r0, [r7, #8]
 800b912:	f000 f80f 	bl	800b934 <IntToUnicode>
  }
}
 800b916:	bf00      	nop
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	1fff7a10 	.word	0x1fff7a10
 800b924:	1fff7a14 	.word	0x1fff7a14
 800b928:	1fff7a18 	.word	0x1fff7a18
 800b92c:	200000ea 	.word	0x200000ea
 800b930:	200000fa 	.word	0x200000fa

0800b934 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b934:	b480      	push	{r7}
 800b936:	b087      	sub	sp, #28
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	60b9      	str	r1, [r7, #8]
 800b93e:	4613      	mov	r3, r2
 800b940:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b942:	2300      	movs	r3, #0
 800b944:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b946:	2300      	movs	r3, #0
 800b948:	75fb      	strb	r3, [r7, #23]
 800b94a:	e027      	b.n	800b99c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	0f1b      	lsrs	r3, r3, #28
 800b950:	2b09      	cmp	r3, #9
 800b952:	d80b      	bhi.n	800b96c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	0f1b      	lsrs	r3, r3, #28
 800b958:	b2da      	uxtb	r2, r3
 800b95a:	7dfb      	ldrb	r3, [r7, #23]
 800b95c:	005b      	lsls	r3, r3, #1
 800b95e:	4619      	mov	r1, r3
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	440b      	add	r3, r1
 800b964:	3230      	adds	r2, #48	@ 0x30
 800b966:	b2d2      	uxtb	r2, r2
 800b968:	701a      	strb	r2, [r3, #0]
 800b96a:	e00a      	b.n	800b982 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	0f1b      	lsrs	r3, r3, #28
 800b970:	b2da      	uxtb	r2, r3
 800b972:	7dfb      	ldrb	r3, [r7, #23]
 800b974:	005b      	lsls	r3, r3, #1
 800b976:	4619      	mov	r1, r3
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	440b      	add	r3, r1
 800b97c:	3237      	adds	r2, #55	@ 0x37
 800b97e:	b2d2      	uxtb	r2, r2
 800b980:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	011b      	lsls	r3, r3, #4
 800b986:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b988:	7dfb      	ldrb	r3, [r7, #23]
 800b98a:	005b      	lsls	r3, r3, #1
 800b98c:	3301      	adds	r3, #1
 800b98e:	68ba      	ldr	r2, [r7, #8]
 800b990:	4413      	add	r3, r2
 800b992:	2200      	movs	r2, #0
 800b994:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b996:	7dfb      	ldrb	r3, [r7, #23]
 800b998:	3301      	adds	r3, #1
 800b99a:	75fb      	strb	r3, [r7, #23]
 800b99c:	7dfa      	ldrb	r2, [r7, #23]
 800b99e:	79fb      	ldrb	r3, [r7, #7]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d3d3      	bcc.n	800b94c <IntToUnicode+0x18>
  }
}
 800b9a4:	bf00      	nop
 800b9a6:	bf00      	nop
 800b9a8:	371c      	adds	r7, #28
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr
	...

0800b9b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b08a      	sub	sp, #40	@ 0x28
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9bc:	f107 0314 	add.w	r3, r7, #20
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	601a      	str	r2, [r3, #0]
 800b9c4:	605a      	str	r2, [r3, #4]
 800b9c6:	609a      	str	r2, [r3, #8]
 800b9c8:	60da      	str	r2, [r3, #12]
 800b9ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b9d4:	d13a      	bne.n	800ba4c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	613b      	str	r3, [r7, #16]
 800b9da:	4b1e      	ldr	r3, [pc, #120]	@ (800ba54 <HAL_PCD_MspInit+0xa0>)
 800b9dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9de:	4a1d      	ldr	r2, [pc, #116]	@ (800ba54 <HAL_PCD_MspInit+0xa0>)
 800b9e0:	f043 0301 	orr.w	r3, r3, #1
 800b9e4:	6313      	str	r3, [r2, #48]	@ 0x30
 800b9e6:	4b1b      	ldr	r3, [pc, #108]	@ (800ba54 <HAL_PCD_MspInit+0xa0>)
 800b9e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9ea:	f003 0301 	and.w	r3, r3, #1
 800b9ee:	613b      	str	r3, [r7, #16]
 800b9f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b9f2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b9f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9f8:	2302      	movs	r3, #2
 800b9fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba00:	2303      	movs	r3, #3
 800ba02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ba04:	230a      	movs	r3, #10
 800ba06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba08:	f107 0314 	add.w	r3, r7, #20
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	4812      	ldr	r0, [pc, #72]	@ (800ba58 <HAL_PCD_MspInit+0xa4>)
 800ba10:	f7f6 ff5c 	bl	80028cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ba14:	4b0f      	ldr	r3, [pc, #60]	@ (800ba54 <HAL_PCD_MspInit+0xa0>)
 800ba16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba18:	4a0e      	ldr	r2, [pc, #56]	@ (800ba54 <HAL_PCD_MspInit+0xa0>)
 800ba1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba1e:	6353      	str	r3, [r2, #52]	@ 0x34
 800ba20:	2300      	movs	r3, #0
 800ba22:	60fb      	str	r3, [r7, #12]
 800ba24:	4b0b      	ldr	r3, [pc, #44]	@ (800ba54 <HAL_PCD_MspInit+0xa0>)
 800ba26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba28:	4a0a      	ldr	r2, [pc, #40]	@ (800ba54 <HAL_PCD_MspInit+0xa0>)
 800ba2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ba2e:	6453      	str	r3, [r2, #68]	@ 0x44
 800ba30:	4b08      	ldr	r3, [pc, #32]	@ (800ba54 <HAL_PCD_MspInit+0xa0>)
 800ba32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ba38:	60fb      	str	r3, [r7, #12]
 800ba3a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	2100      	movs	r1, #0
 800ba40:	2043      	movs	r0, #67	@ 0x43
 800ba42:	f7f6 fe7a 	bl	800273a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ba46:	2043      	movs	r0, #67	@ 0x43
 800ba48:	f7f6 fe93 	bl	8002772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ba4c:	bf00      	nop
 800ba4e:	3728      	adds	r7, #40	@ 0x28
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}
 800ba54:	40023800 	.word	0x40023800
 800ba58:	40020000 	.word	0x40020000

0800ba5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ba70:	4619      	mov	r1, r3
 800ba72:	4610      	mov	r0, r2
 800ba74:	f7fe fb27 	bl	800a0c6 <USBD_LL_SetupStage>
}
 800ba78:	bf00      	nop
 800ba7a:	3708      	adds	r7, #8
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	460b      	mov	r3, r1
 800ba8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ba92:	78fa      	ldrb	r2, [r7, #3]
 800ba94:	6879      	ldr	r1, [r7, #4]
 800ba96:	4613      	mov	r3, r2
 800ba98:	00db      	lsls	r3, r3, #3
 800ba9a:	4413      	add	r3, r2
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	440b      	add	r3, r1
 800baa0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	78fb      	ldrb	r3, [r7, #3]
 800baa8:	4619      	mov	r1, r3
 800baaa:	f7fe fb61 	bl	800a170 <USBD_LL_DataOutStage>
}
 800baae:	bf00      	nop
 800bab0:	3708      	adds	r7, #8
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b082      	sub	sp, #8
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
 800babe:	460b      	mov	r3, r1
 800bac0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bac8:	78fa      	ldrb	r2, [r7, #3]
 800baca:	6879      	ldr	r1, [r7, #4]
 800bacc:	4613      	mov	r3, r2
 800bace:	00db      	lsls	r3, r3, #3
 800bad0:	4413      	add	r3, r2
 800bad2:	009b      	lsls	r3, r3, #2
 800bad4:	440b      	add	r3, r1
 800bad6:	3320      	adds	r3, #32
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	78fb      	ldrb	r3, [r7, #3]
 800badc:	4619      	mov	r1, r3
 800bade:	f7fe fbfa 	bl	800a2d6 <USBD_LL_DataInStage>
}
 800bae2:	bf00      	nop
 800bae4:	3708      	adds	r7, #8
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baea:	b580      	push	{r7, lr}
 800baec:	b082      	sub	sp, #8
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800baf8:	4618      	mov	r0, r3
 800bafa:	f7fe fd34 	bl	800a566 <USBD_LL_SOF>
}
 800bafe:	bf00      	nop
 800bb00:	3708      	adds	r7, #8
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b084      	sub	sp, #16
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	79db      	ldrb	r3, [r3, #7]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d102      	bne.n	800bb20 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	73fb      	strb	r3, [r7, #15]
 800bb1e:	e008      	b.n	800bb32 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	79db      	ldrb	r3, [r3, #7]
 800bb24:	2b02      	cmp	r3, #2
 800bb26:	d102      	bne.n	800bb2e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	73fb      	strb	r3, [r7, #15]
 800bb2c:	e001      	b.n	800bb32 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bb2e:	f7f5 fcdd 	bl	80014ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb38:	7bfa      	ldrb	r2, [r7, #15]
 800bb3a:	4611      	mov	r1, r2
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	f7fe fcce 	bl	800a4de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f7fe fc76 	bl	800a43a <USBD_LL_Reset>
}
 800bb4e:	bf00      	nop
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
	...

0800bb58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7fe fcc9 	bl	800a4fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	6812      	ldr	r2, [r2, #0]
 800bb7a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bb7e:	f043 0301 	orr.w	r3, r3, #1
 800bb82:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	7adb      	ldrb	r3, [r3, #11]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d005      	beq.n	800bb98 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb8c:	4b04      	ldr	r3, [pc, #16]	@ (800bba0 <HAL_PCD_SuspendCallback+0x48>)
 800bb8e:	691b      	ldr	r3, [r3, #16]
 800bb90:	4a03      	ldr	r2, [pc, #12]	@ (800bba0 <HAL_PCD_SuspendCallback+0x48>)
 800bb92:	f043 0306 	orr.w	r3, r3, #6
 800bb96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bb98:	bf00      	nop
 800bb9a:	3708      	adds	r7, #8
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	e000ed00 	.word	0xe000ed00

0800bba4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b082      	sub	sp, #8
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f7fe fcbf 	bl	800a536 <USBD_LL_Resume>
}
 800bbb8:	bf00      	nop
 800bbba:	3708      	adds	r7, #8
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	460b      	mov	r3, r1
 800bbca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bbd2:	78fa      	ldrb	r2, [r7, #3]
 800bbd4:	4611      	mov	r1, r2
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fe fd17 	bl	800a60a <USBD_LL_IsoOUTIncomplete>
}
 800bbdc:	bf00      	nop
 800bbde:	3708      	adds	r7, #8
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	460b      	mov	r3, r1
 800bbee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bbf6:	78fa      	ldrb	r2, [r7, #3]
 800bbf8:	4611      	mov	r1, r2
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7fe fcd3 	bl	800a5a6 <USBD_LL_IsoINIncomplete>
}
 800bc00:	bf00      	nop
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc16:	4618      	mov	r0, r3
 800bc18:	f7fe fd29 	bl	800a66e <USBD_LL_DevConnected>
}
 800bc1c:	bf00      	nop
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7fe fd26 	bl	800a684 <USBD_LL_DevDisconnected>
}
 800bc38:	bf00      	nop
 800bc3a:	3708      	adds	r7, #8
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b082      	sub	sp, #8
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d13c      	bne.n	800bcca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bc50:	4a20      	ldr	r2, [pc, #128]	@ (800bcd4 <USBD_LL_Init+0x94>)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	4a1e      	ldr	r2, [pc, #120]	@ (800bcd4 <USBD_LL_Init+0x94>)
 800bc5c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bc60:	4b1c      	ldr	r3, [pc, #112]	@ (800bcd4 <USBD_LL_Init+0x94>)
 800bc62:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bc66:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bc68:	4b1a      	ldr	r3, [pc, #104]	@ (800bcd4 <USBD_LL_Init+0x94>)
 800bc6a:	2204      	movs	r2, #4
 800bc6c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bc6e:	4b19      	ldr	r3, [pc, #100]	@ (800bcd4 <USBD_LL_Init+0x94>)
 800bc70:	2202      	movs	r2, #2
 800bc72:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bc74:	4b17      	ldr	r3, [pc, #92]	@ (800bcd4 <USBD_LL_Init+0x94>)
 800bc76:	2200      	movs	r2, #0
 800bc78:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bc7a:	4b16      	ldr	r3, [pc, #88]	@ (800bcd4 <USBD_LL_Init+0x94>)
 800bc7c:	2202      	movs	r2, #2
 800bc7e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bc80:	4b14      	ldr	r3, [pc, #80]	@ (800bcd4 <USBD_LL_Init+0x94>)
 800bc82:	2200      	movs	r2, #0
 800bc84:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bc86:	4b13      	ldr	r3, [pc, #76]	@ (800bcd4 <USBD_LL_Init+0x94>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bc8c:	4b11      	ldr	r3, [pc, #68]	@ (800bcd4 <USBD_LL_Init+0x94>)
 800bc8e:	2200      	movs	r2, #0
 800bc90:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bc92:	4b10      	ldr	r3, [pc, #64]	@ (800bcd4 <USBD_LL_Init+0x94>)
 800bc94:	2200      	movs	r2, #0
 800bc96:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bc98:	4b0e      	ldr	r3, [pc, #56]	@ (800bcd4 <USBD_LL_Init+0x94>)
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bc9e:	480d      	ldr	r0, [pc, #52]	@ (800bcd4 <USBD_LL_Init+0x94>)
 800bca0:	f7f7 f90e 	bl	8002ec0 <HAL_PCD_Init>
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d001      	beq.n	800bcae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bcaa:	f7f5 fc1f 	bl	80014ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bcae:	2180      	movs	r1, #128	@ 0x80
 800bcb0:	4808      	ldr	r0, [pc, #32]	@ (800bcd4 <USBD_LL_Init+0x94>)
 800bcb2:	f7f8 fb3a 	bl	800432a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bcb6:	2240      	movs	r2, #64	@ 0x40
 800bcb8:	2100      	movs	r1, #0
 800bcba:	4806      	ldr	r0, [pc, #24]	@ (800bcd4 <USBD_LL_Init+0x94>)
 800bcbc:	f7f8 faee 	bl	800429c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bcc0:	2280      	movs	r2, #128	@ 0x80
 800bcc2:	2101      	movs	r1, #1
 800bcc4:	4803      	ldr	r0, [pc, #12]	@ (800bcd4 <USBD_LL_Init+0x94>)
 800bcc6:	f7f8 fae9 	bl	800429c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bcca:	2300      	movs	r3, #0
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3708      	adds	r7, #8
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	20001d28 	.word	0x20001d28

0800bcd8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bce0:	2300      	movs	r3, #0
 800bce2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bce4:	2300      	movs	r3, #0
 800bce6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7f7 f9f5 	bl	80030de <HAL_PCD_Start>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcf8:	7bfb      	ldrb	r3, [r7, #15]
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f000 f942 	bl	800bf84 <USBD_Get_USB_Status>
 800bd00:	4603      	mov	r3, r0
 800bd02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd04:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b084      	sub	sp, #16
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
 800bd16:	4608      	mov	r0, r1
 800bd18:	4611      	mov	r1, r2
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	70fb      	strb	r3, [r7, #3]
 800bd20:	460b      	mov	r3, r1
 800bd22:	70bb      	strb	r3, [r7, #2]
 800bd24:	4613      	mov	r3, r2
 800bd26:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bd36:	78bb      	ldrb	r3, [r7, #2]
 800bd38:	883a      	ldrh	r2, [r7, #0]
 800bd3a:	78f9      	ldrb	r1, [r7, #3]
 800bd3c:	f7f7 fec9 	bl	8003ad2 <HAL_PCD_EP_Open>
 800bd40:	4603      	mov	r3, r0
 800bd42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd44:	7bfb      	ldrb	r3, [r7, #15]
 800bd46:	4618      	mov	r0, r3
 800bd48:	f000 f91c 	bl	800bf84 <USBD_Get_USB_Status>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd50:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3710      	adds	r7, #16
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b084      	sub	sp, #16
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
 800bd62:	460b      	mov	r3, r1
 800bd64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd66:	2300      	movs	r3, #0
 800bd68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bd74:	78fa      	ldrb	r2, [r7, #3]
 800bd76:	4611      	mov	r1, r2
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7f7 ff14 	bl	8003ba6 <HAL_PCD_EP_Close>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd82:	7bfb      	ldrb	r3, [r7, #15]
 800bd84:	4618      	mov	r0, r3
 800bd86:	f000 f8fd 	bl	800bf84 <USBD_Get_USB_Status>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3710      	adds	r7, #16
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	460b      	mov	r3, r1
 800bda2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bda4:	2300      	movs	r3, #0
 800bda6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bdb2:	78fa      	ldrb	r2, [r7, #3]
 800bdb4:	4611      	mov	r1, r2
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7f7 ffcc 	bl	8003d54 <HAL_PCD_EP_SetStall>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdc0:	7bfb      	ldrb	r3, [r7, #15]
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f000 f8de 	bl	800bf84 <USBD_Get_USB_Status>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdcc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3710      	adds	r7, #16
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdd6:	b580      	push	{r7, lr}
 800bdd8:	b084      	sub	sp, #16
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
 800bdde:	460b      	mov	r3, r1
 800bde0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bde2:	2300      	movs	r3, #0
 800bde4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bde6:	2300      	movs	r3, #0
 800bde8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bdf0:	78fa      	ldrb	r2, [r7, #3]
 800bdf2:	4611      	mov	r1, r2
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7f8 f810 	bl	8003e1a <HAL_PCD_EP_ClrStall>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdfe:	7bfb      	ldrb	r3, [r7, #15]
 800be00:	4618      	mov	r0, r3
 800be02:	f000 f8bf 	bl	800bf84 <USBD_Get_USB_Status>
 800be06:	4603      	mov	r3, r0
 800be08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3710      	adds	r7, #16
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	460b      	mov	r3, r1
 800be1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	da0b      	bge.n	800be48 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be30:	78fb      	ldrb	r3, [r7, #3]
 800be32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be36:	68f9      	ldr	r1, [r7, #12]
 800be38:	4613      	mov	r3, r2
 800be3a:	00db      	lsls	r3, r3, #3
 800be3c:	4413      	add	r3, r2
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	440b      	add	r3, r1
 800be42:	3316      	adds	r3, #22
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	e00b      	b.n	800be60 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be48:	78fb      	ldrb	r3, [r7, #3]
 800be4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be4e:	68f9      	ldr	r1, [r7, #12]
 800be50:	4613      	mov	r3, r2
 800be52:	00db      	lsls	r3, r3, #3
 800be54:	4413      	add	r3, r2
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	440b      	add	r3, r1
 800be5a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800be5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800be60:	4618      	mov	r0, r3
 800be62:	3714      	adds	r7, #20
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	460b      	mov	r3, r1
 800be76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be78:	2300      	movs	r3, #0
 800be7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be7c:	2300      	movs	r3, #0
 800be7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be86:	78fa      	ldrb	r2, [r7, #3]
 800be88:	4611      	mov	r1, r2
 800be8a:	4618      	mov	r0, r3
 800be8c:	f7f7 fdfd 	bl	8003a8a <HAL_PCD_SetAddress>
 800be90:	4603      	mov	r3, r0
 800be92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be94:	7bfb      	ldrb	r3, [r7, #15]
 800be96:	4618      	mov	r0, r3
 800be98:	f000 f874 	bl	800bf84 <USBD_Get_USB_Status>
 800be9c:	4603      	mov	r3, r0
 800be9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bea0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3710      	adds	r7, #16
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b086      	sub	sp, #24
 800beae:	af00      	add	r7, sp, #0
 800beb0:	60f8      	str	r0, [r7, #12]
 800beb2:	607a      	str	r2, [r7, #4]
 800beb4:	603b      	str	r3, [r7, #0]
 800beb6:	460b      	mov	r3, r1
 800beb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800beba:	2300      	movs	r3, #0
 800bebc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bebe:	2300      	movs	r3, #0
 800bec0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bec8:	7af9      	ldrb	r1, [r7, #11]
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	f7f7 ff07 	bl	8003ce0 <HAL_PCD_EP_Transmit>
 800bed2:	4603      	mov	r3, r0
 800bed4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bed6:	7dfb      	ldrb	r3, [r7, #23]
 800bed8:	4618      	mov	r0, r3
 800beda:	f000 f853 	bl	800bf84 <USBD_Get_USB_Status>
 800bede:	4603      	mov	r3, r0
 800bee0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bee2:	7dbb      	ldrb	r3, [r7, #22]
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3718      	adds	r7, #24
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b086      	sub	sp, #24
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	607a      	str	r2, [r7, #4]
 800bef6:	603b      	str	r3, [r7, #0]
 800bef8:	460b      	mov	r3, r1
 800befa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf00:	2300      	movs	r3, #0
 800bf02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bf0a:	7af9      	ldrb	r1, [r7, #11]
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	f7f7 fe93 	bl	8003c3a <HAL_PCD_EP_Receive>
 800bf14:	4603      	mov	r3, r0
 800bf16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf18:	7dfb      	ldrb	r3, [r7, #23]
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f000 f832 	bl	800bf84 <USBD_Get_USB_Status>
 800bf20:	4603      	mov	r3, r0
 800bf22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf24:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3718      	adds	r7, #24
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}

0800bf2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf2e:	b580      	push	{r7, lr}
 800bf30:	b082      	sub	sp, #8
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	460b      	mov	r3, r1
 800bf38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf40:	78fa      	ldrb	r2, [r7, #3]
 800bf42:	4611      	mov	r1, r2
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7f7 feb3 	bl	8003cb0 <HAL_PCD_EP_GetRxCount>
 800bf4a:	4603      	mov	r3, r0
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3708      	adds	r7, #8
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}

0800bf54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bf5c:	4b03      	ldr	r3, [pc, #12]	@ (800bf6c <USBD_static_malloc+0x18>)
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	370c      	adds	r7, #12
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr
 800bf6a:	bf00      	nop
 800bf6c:	2000220c 	.word	0x2000220c

0800bf70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b083      	sub	sp, #12
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]

}
 800bf78:	bf00      	nop
 800bf7a:	370c      	adds	r7, #12
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b085      	sub	sp, #20
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bf92:	79fb      	ldrb	r3, [r7, #7]
 800bf94:	2b03      	cmp	r3, #3
 800bf96:	d817      	bhi.n	800bfc8 <USBD_Get_USB_Status+0x44>
 800bf98:	a201      	add	r2, pc, #4	@ (adr r2, 800bfa0 <USBD_Get_USB_Status+0x1c>)
 800bf9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf9e:	bf00      	nop
 800bfa0:	0800bfb1 	.word	0x0800bfb1
 800bfa4:	0800bfb7 	.word	0x0800bfb7
 800bfa8:	0800bfbd 	.word	0x0800bfbd
 800bfac:	0800bfc3 	.word	0x0800bfc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	73fb      	strb	r3, [r7, #15]
    break;
 800bfb4:	e00b      	b.n	800bfce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bfb6:	2303      	movs	r3, #3
 800bfb8:	73fb      	strb	r3, [r7, #15]
    break;
 800bfba:	e008      	b.n	800bfce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	73fb      	strb	r3, [r7, #15]
    break;
 800bfc0:	e005      	b.n	800bfce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bfc2:	2303      	movs	r3, #3
 800bfc4:	73fb      	strb	r3, [r7, #15]
    break;
 800bfc6:	e002      	b.n	800bfce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bfc8:	2303      	movs	r3, #3
 800bfca:	73fb      	strb	r3, [r7, #15]
    break;
 800bfcc:	bf00      	nop
  }
  return usb_status;
 800bfce:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3714      	adds	r7, #20
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr

0800bfdc <memset>:
 800bfdc:	4402      	add	r2, r0
 800bfde:	4603      	mov	r3, r0
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d100      	bne.n	800bfe6 <memset+0xa>
 800bfe4:	4770      	bx	lr
 800bfe6:	f803 1b01 	strb.w	r1, [r3], #1
 800bfea:	e7f9      	b.n	800bfe0 <memset+0x4>

0800bfec <__libc_init_array>:
 800bfec:	b570      	push	{r4, r5, r6, lr}
 800bfee:	4d0d      	ldr	r5, [pc, #52]	@ (800c024 <__libc_init_array+0x38>)
 800bff0:	4c0d      	ldr	r4, [pc, #52]	@ (800c028 <__libc_init_array+0x3c>)
 800bff2:	1b64      	subs	r4, r4, r5
 800bff4:	10a4      	asrs	r4, r4, #2
 800bff6:	2600      	movs	r6, #0
 800bff8:	42a6      	cmp	r6, r4
 800bffa:	d109      	bne.n	800c010 <__libc_init_array+0x24>
 800bffc:	4d0b      	ldr	r5, [pc, #44]	@ (800c02c <__libc_init_array+0x40>)
 800bffe:	4c0c      	ldr	r4, [pc, #48]	@ (800c030 <__libc_init_array+0x44>)
 800c000:	f000 f826 	bl	800c050 <_init>
 800c004:	1b64      	subs	r4, r4, r5
 800c006:	10a4      	asrs	r4, r4, #2
 800c008:	2600      	movs	r6, #0
 800c00a:	42a6      	cmp	r6, r4
 800c00c:	d105      	bne.n	800c01a <__libc_init_array+0x2e>
 800c00e:	bd70      	pop	{r4, r5, r6, pc}
 800c010:	f855 3b04 	ldr.w	r3, [r5], #4
 800c014:	4798      	blx	r3
 800c016:	3601      	adds	r6, #1
 800c018:	e7ee      	b.n	800bff8 <__libc_init_array+0xc>
 800c01a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c01e:	4798      	blx	r3
 800c020:	3601      	adds	r6, #1
 800c022:	e7f2      	b.n	800c00a <__libc_init_array+0x1e>
 800c024:	0800c100 	.word	0x0800c100
 800c028:	0800c100 	.word	0x0800c100
 800c02c:	0800c100 	.word	0x0800c100
 800c030:	0800c104 	.word	0x0800c104

0800c034 <memcpy>:
 800c034:	440a      	add	r2, r1
 800c036:	4291      	cmp	r1, r2
 800c038:	f100 33ff 	add.w	r3, r0, #4294967295
 800c03c:	d100      	bne.n	800c040 <memcpy+0xc>
 800c03e:	4770      	bx	lr
 800c040:	b510      	push	{r4, lr}
 800c042:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c046:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c04a:	4291      	cmp	r1, r2
 800c04c:	d1f9      	bne.n	800c042 <memcpy+0xe>
 800c04e:	bd10      	pop	{r4, pc}

0800c050 <_init>:
 800c050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c052:	bf00      	nop
 800c054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c056:	bc08      	pop	{r3}
 800c058:	469e      	mov	lr, r3
 800c05a:	4770      	bx	lr

0800c05c <_fini>:
 800c05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c05e:	bf00      	nop
 800c060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c062:	bc08      	pop	{r3}
 800c064:	469e      	mov	lr, r3
 800c066:	4770      	bx	lr
