
Ro_Bo_Rho.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3ac  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800c534  0800c534  0000d534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5cc  0800c5cc  0000e110  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5cc  0800c5cc  0000d5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5d4  0800c5d4  0000e110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5d4  0800c5d4  0000d5d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c5d8  0800c5d8  0000d5d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  0800c5dc  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e110  2**0
                  CONTENTS
 10 .bss          00002310  20000110  20000110  0000e110  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002420  20002420  0000e110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e110  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eaf4  00000000  00000000  0000e140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004598  00000000  00000000  0002cc34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ba8  00000000  00000000  000311d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001595  00000000  00000000  00032d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027498  00000000  00000000  0003430d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000244d7  00000000  00000000  0005b7a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1656  00000000  00000000  0007fc7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001612d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000075f8  00000000  00000000  00161318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00168910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000110 	.word	0x20000110
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c51c 	.word	0x0800c51c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000114 	.word	0x20000114
 80001c4:	0800c51c 	.word	0x0800c51c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f001 fe16 	bl	80020ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 fa58 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 ffa2 	bl	800140c <MX_GPIO_Init>
  MX_TIM2_Init();
 80004c8:	f000 fbcc 	bl	8000c64 <MX_TIM2_Init>
  MX_TIM4_Init();
 80004cc:	f000 fc72 	bl	8000db4 <MX_TIM4_Init>
  MX_ADC1_Init();
 80004d0:	f000 faba 	bl	8000a48 <MX_ADC1_Init>
  MX_SPI2_Init();
 80004d4:	f000 fb38 	bl	8000b48 <MX_SPI2_Init>
  MX_TIM1_Init();
 80004d8:	f000 fb6c 	bl	8000bb4 <MX_TIM1_Init>
  MX_TIM8_Init();
 80004dc:	f000 fd12 	bl	8000f04 <MX_TIM8_Init>
  MX_TIM9_Init();
 80004e0:	f000 fd68 	bl	8000fb4 <MX_TIM9_Init>
  MX_TIM10_Init();
 80004e4:	f000 fdb6 	bl	8001054 <MX_TIM10_Init>
  MX_TIM11_Init();
 80004e8:	f000 fe02 	bl	80010f0 <MX_TIM11_Init>
  MX_TIM12_Init();
 80004ec:	f000 fe4e 	bl	800118c <MX_TIM12_Init>
  MX_TIM13_Init();
 80004f0:	f000 fe9c 	bl	800122c <MX_TIM13_Init>
  MX_TIM14_Init();
 80004f4:	f000 fee8 	bl	80012c8 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 80004f8:	f000 ff5e 	bl	80013b8 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80004fc:	f00b fac8 	bl	800ba90 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8000500:	f000 ff30 	bl	8001364 <MX_UART4_Init>
  MX_I2C2_Init();
 8000504:	f000 faf2 	bl	8000aec <MX_I2C2_Init>
  MX_TIM3_Init();
 8000508:	f000 fc00 	bl	8000d0c <MX_TIM3_Init>
  MX_TIM5_Init();
 800050c:	f000 fca6 	bl	8000e5c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
   Motor_setup_LF(&htim14   ,&htim5    ,"PC05");
 8000510:	4a4a      	ldr	r2, [pc, #296]	@ (800063c <main+0x184>)
 8000512:	494b      	ldr	r1, [pc, #300]	@ (8000640 <main+0x188>)
 8000514:	484b      	ldr	r0, [pc, #300]	@ (8000644 <main+0x18c>)
 8000516:	f007 ff69 	bl	80083ec <Motor_setup_LF>
   Motor_setup_LB(&htim12   ,&htim1    ,"PE12");
 800051a:	4a4b      	ldr	r2, [pc, #300]	@ (8000648 <main+0x190>)
 800051c:	494b      	ldr	r1, [pc, #300]	@ (800064c <main+0x194>)
 800051e:	484c      	ldr	r0, [pc, #304]	@ (8000650 <main+0x198>)
 8000520:	f007 ff92 	bl	8008448 <Motor_setup_LB>
   Motor_setup_RF(&htim11   ,&htim8    ,"PE01");
 8000524:	4a4b      	ldr	r2, [pc, #300]	@ (8000654 <main+0x19c>)
 8000526:	494c      	ldr	r1, [pc, #304]	@ (8000658 <main+0x1a0>)
 8000528:	484c      	ldr	r0, [pc, #304]	@ (800065c <main+0x1a4>)
 800052a:	f007 ffbb 	bl	80084a4 <Motor_setup_RF>
   Motor_setup_RB(&htim12   ,&htim4    ,"PD09");
 800052e:	4a4c      	ldr	r2, [pc, #304]	@ (8000660 <main+0x1a8>)
 8000530:	494c      	ldr	r1, [pc, #304]	@ (8000664 <main+0x1ac>)
 8000532:	4847      	ldr	r0, [pc, #284]	@ (8000650 <main+0x198>)
 8000534:	f007 ffe4 	bl	8008500 <Motor_setup_RB>
   Motor_setup_EXTRA1(&htim9,&htim3    ,"PC13");
 8000538:	4a4b      	ldr	r2, [pc, #300]	@ (8000668 <main+0x1b0>)
 800053a:	494c      	ldr	r1, [pc, #304]	@ (800066c <main+0x1b4>)
 800053c:	484c      	ldr	r0, [pc, #304]	@ (8000670 <main+0x1b8>)
 800053e:	f008 f80d 	bl	800855c <Motor_setup_EXTRA1>
   Motor_setup_EXTRA2(&htim10,&htim2   ,"PE00");
 8000542:	4a4c      	ldr	r2, [pc, #304]	@ (8000674 <main+0x1bc>)
 8000544:	494c      	ldr	r1, [pc, #304]	@ (8000678 <main+0x1c0>)
 8000546:	484d      	ldr	r0, [pc, #308]	@ (800067c <main+0x1c4>)
 8000548:	f008 f836 	bl	80085b8 <Motor_setup_EXTRA2>

   Setup_Gear_Ratio(27);
 800054c:	201b      	movs	r0, #27
 800054e:	f008 f881 	bl	8008654 <Setup_Gear_Ratio>
   Setup_CPR(68);
 8000552:	2044      	movs	r0, #68	@ 0x44
 8000554:	f008 f86e 	bl	8008634 <Setup_CPR>
   Setup_frequency_Motor(100);
 8000558:	2064      	movs	r0, #100	@ 0x64
 800055a:	f008 f88b 	bl	8008674 <Setup_frequency_Motor>

   Setup_PID_LF(1.0 ,0.0 ,0.1 ,0 ,280);
 800055e:	ed9f 2a48 	vldr	s4, [pc, #288]	@ 8000680 <main+0x1c8>
 8000562:	eddf 1a48 	vldr	s3, [pc, #288]	@ 8000684 <main+0x1cc>
 8000566:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 8000688 <main+0x1d0>
 800056a:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8000684 <main+0x1cc>
 800056e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000572:	f008 f917 	bl	80087a4 <Setup_PID_LF>
   Setup_PID_LB(1.0 ,0.0 ,0.1 ,0 ,280);
 8000576:	ed9f 2a42 	vldr	s4, [pc, #264]	@ 8000680 <main+0x1c8>
 800057a:	eddf 1a42 	vldr	s3, [pc, #264]	@ 8000684 <main+0x1cc>
 800057e:	ed9f 1a42 	vldr	s2, [pc, #264]	@ 8000688 <main+0x1d0>
 8000582:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8000684 <main+0x1cc>
 8000586:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800058a:	f008 f937 	bl	80087fc <Setup_PID_LB>
   Setup_PID_RF(1.0 ,0.0 ,0.1 ,0 ,280);
 800058e:	ed9f 2a3c 	vldr	s4, [pc, #240]	@ 8000680 <main+0x1c8>
 8000592:	eddf 1a3c 	vldr	s3, [pc, #240]	@ 8000684 <main+0x1cc>
 8000596:	ed9f 1a3c 	vldr	s2, [pc, #240]	@ 8000688 <main+0x1d0>
 800059a:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8000684 <main+0x1cc>
 800059e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80005a2:	f008 f957 	bl	8008854 <Setup_PID_RF>
   Setup_PID_RB(1.0 ,0.0 ,0.1 ,0 ,280);
 80005a6:	ed9f 2a36 	vldr	s4, [pc, #216]	@ 8000680 <main+0x1c8>
 80005aa:	eddf 1a36 	vldr	s3, [pc, #216]	@ 8000684 <main+0x1cc>
 80005ae:	ed9f 1a36 	vldr	s2, [pc, #216]	@ 8000688 <main+0x1d0>
 80005b2:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8000684 <main+0x1cc>
 80005b6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80005ba:	f008 f977 	bl	80088ac <Setup_PID_RB>
//   Setup_PID_EXTRA1(0.5 ,0.1 ,0 ,0 ,280);
//   Setup_PID_EXTRA2(0.5 ,0.1 ,0 ,0 ,280);

   Setup_frequency_Forward_Kinematic(100);
 80005be:	2064      	movs	r0, #100	@ 0x64
 80005c0:	f009 f9ae 	bl	8009920 <Setup_frequency_Forward_Kinematic>
   Setup_Forward_Kinematic(0.23f ,0.23f ,0.06f);
 80005c4:	ed9f 1a31 	vldr	s2, [pc, #196]	@ 800068c <main+0x1d4>
 80005c8:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8000690 <main+0x1d8>
 80005cc:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 8000690 <main+0x1d8>
 80005d0:	f009 f988 	bl	80098e4 <Setup_Forward_Kinematic>

   Setup_Inverse_Kinematic(0.23f ,0.23f ,0.06f);
 80005d4:	ed9f 1a2d 	vldr	s2, [pc, #180]	@ 800068c <main+0x1d4>
 80005d8:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8000690 <main+0x1d8>
 80005dc:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8000690 <main+0x1d8>
 80005e0:	f009 f9ae 	bl	8009940 <Setup_Inverse_Kinematic>

   //UAST2 esp_s3_zero to STM32
   HAL_UART_Receive_IT(&huart2, (uint8_t *)&Str_PS2, sizeof(Str_PS2));
 80005e4:	2208      	movs	r2, #8
 80005e6:	492b      	ldr	r1, [pc, #172]	@ (8000694 <main+0x1dc>)
 80005e8:	482b      	ldr	r0, [pc, #172]	@ (8000698 <main+0x1e0>)
 80005ea:	f005 fc93 	bl	8005f14 <HAL_UART_Receive_IT>
    /* USER CODE BEGIN 3 */

//	  CDC_Transmit_FS((uint8_t*)RPM ,6);
//	  HAL_Delay(1000);

	  if ((uwTick - PastTime) > 10) {
 80005ee:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <main+0x1e4>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a2b      	ldr	r2, [pc, #172]	@ (80006a0 <main+0x1e8>)
 80005f4:	6812      	ldr	r2, [r2, #0]
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	2b0a      	cmp	r3, #10
 80005fa:	d9f8      	bls.n	80005ee <main+0x136>
	    PastTime = uwTick;
 80005fc:	4b27      	ldr	r3, [pc, #156]	@ (800069c <main+0x1e4>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	461a      	mov	r2, r3
 8000602:	4b27      	ldr	r3, [pc, #156]	@ (80006a0 <main+0x1e8>)
 8000604:	601a      	str	r2, [r3, #0]

	    if (((uwTick - last_uart_data_time) < UART_TIMEOUT_MS) && (Str_PS2.Header[0] == 'R') && (Str_PS2.Header[1] == 'B')) {
 8000606:	4b25      	ldr	r3, [pc, #148]	@ (800069c <main+0x1e4>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <main+0x1ec>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000614:	d24a      	bcs.n	80006ac <main+0x1f4>
 8000616:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <main+0x1dc>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b52      	cmp	r3, #82	@ 0x52
 800061c:	d146      	bne.n	80006ac <main+0x1f4>
 800061e:	4b1d      	ldr	r3, [pc, #116]	@ (8000694 <main+0x1dc>)
 8000620:	785b      	ldrb	r3, [r3, #1]
 8000622:	2b42      	cmp	r3, #66	@ 0x42
 8000624:	d142      	bne.n	80006ac <main+0x1f4>
	      digitalWrite("PE07", 1);
 8000626:	2101      	movs	r1, #1
 8000628:	481f      	ldr	r0, [pc, #124]	@ (80006a8 <main+0x1f0>)
 800062a:	f008 fdf5 	bl	8009218 <digitalWrite>

	      Str_PS2.Header[0] = 0;
 800062e:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <main+0x1dc>)
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
	      Str_PS2.Header[1] = 0;
 8000634:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <main+0x1dc>)
 8000636:	2200      	movs	r2, #0
 8000638:	705a      	strb	r2, [r3, #1]
 800063a:	e069      	b.n	8000710 <main+0x258>
 800063c:	0800c534 	.word	0x0800c534
 8000640:	20000340 	.word	0x20000340
 8000644:	20000538 	.word	0x20000538
 8000648:	0800c53c 	.word	0x0800c53c
 800064c:	20000220 	.word	0x20000220
 8000650:	200004a8 	.word	0x200004a8
 8000654:	0800c544 	.word	0x0800c544
 8000658:	20000388 	.word	0x20000388
 800065c:	20000460 	.word	0x20000460
 8000660:	0800c54c 	.word	0x0800c54c
 8000664:	200002f8 	.word	0x200002f8
 8000668:	0800c554 	.word	0x0800c554
 800066c:	200002b0 	.word	0x200002b0
 8000670:	200003d0 	.word	0x200003d0
 8000674:	0800c55c 	.word	0x0800c55c
 8000678:	20000268 	.word	0x20000268
 800067c:	20000418 	.word	0x20000418
 8000680:	438c0000 	.word	0x438c0000
 8000684:	00000000 	.word	0x00000000
 8000688:	3dcccccd 	.word	0x3dcccccd
 800068c:	3d75c28f 	.word	0x3d75c28f
 8000690:	3e6b851f 	.word	0x3e6b851f
 8000694:	20000640 	.word	0x20000640
 8000698:	200005c8 	.word	0x200005c8
 800069c:	20000648 	.word	0x20000648
 80006a0:	20000624 	.word	0x20000624
 80006a4:	2000061c 	.word	0x2000061c
 80006a8:	0800c564 	.word	0x0800c564
	    } else {
	      // ถ้า UART ไม่มีข้อมูลเกินเวลาที่กำหนด และยังไม่รีเซ็ต
	      if (!uart_resetting && ((uwTick - last_uart_data_time) > UART_TIMEOUT_MS)) {
 80006ac:	4ba0      	ldr	r3, [pc, #640]	@ (8000930 <main+0x478>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d11b      	bne.n	80006ec <main+0x234>
 80006b4:	4b9f      	ldr	r3, [pc, #636]	@ (8000934 <main+0x47c>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b9f      	ldr	r3, [pc, #636]	@ (8000938 <main+0x480>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80006c2:	d913      	bls.n	80006ec <main+0x234>
	        uart_resetting = 1;  // ตั้ง flag เพื่อป้องกัน reset ซ้ำซ้อน
 80006c4:	4b9a      	ldr	r3, [pc, #616]	@ (8000930 <main+0x478>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]

	        HAL_UART_DeInit(&huart2);  // ปิด UART
 80006ca:	489c      	ldr	r0, [pc, #624]	@ (800093c <main+0x484>)
 80006cc:	f005 fbf0 	bl	8005eb0 <HAL_UART_DeInit>
	        HAL_Delay(10);             // หน่วงนิดนึง
 80006d0:	200a      	movs	r0, #10
 80006d2:	f001 fd7d 	bl	80021d0 <HAL_Delay>
	        MX_USART2_UART_Init();     // เรียกฟังก์ชัน init ใหม่ (สร้างจาก STM32CubeMX)
 80006d6:	f000 fe6f 	bl	80013b8 <MX_USART2_UART_Init>

	        HAL_UART_Receive_IT(&huart2, (uint8_t *)&Str_PS2, sizeof(Str_PS2));
 80006da:	2208      	movs	r2, #8
 80006dc:	4998      	ldr	r1, [pc, #608]	@ (8000940 <main+0x488>)
 80006de:	4897      	ldr	r0, [pc, #604]	@ (800093c <main+0x484>)
 80006e0:	f005 fc18 	bl	8005f14 <HAL_UART_Receive_IT>
//	        memset(Str_PS2.move, 0, 4);
//	        memset(Str_PS2.attack, 0, 8);
//	        memset(Str_PS2.seting, 0, 2);
//	        memset(Str_PS2.stickValue, 0, 4);

	        digitalWrite("PE07", 0);
 80006e4:	2100      	movs	r1, #0
 80006e6:	4897      	ldr	r0, [pc, #604]	@ (8000944 <main+0x48c>)
 80006e8:	f008 fd96 	bl	8009218 <digitalWrite>
	      }
	      // หยุดมอเตอร์เพื่อความปลอดภัย
	      Motor_DutyCycle_LF(0);
 80006ec:	2000      	movs	r0, #0
 80006ee:	f008 f9b3 	bl	8008a58 <Motor_DutyCycle_LF>
	      Motor_DutyCycle_LB(0);
 80006f2:	2000      	movs	r0, #0
 80006f4:	f008 fa08 	bl	8008b08 <Motor_DutyCycle_LB>
	      Motor_DutyCycle_RF(0);
 80006f8:	2000      	movs	r0, #0
 80006fa:	f008 fa61 	bl	8008bc0 <Motor_DutyCycle_RF>
	      Motor_DutyCycle_RB(0);
 80006fe:	2000      	movs	r0, #0
 8000700:	f008 faba 	bl	8008c78 <Motor_DutyCycle_RB>
	      Motor_DutyCycle_EXTRA1(0);
 8000704:	2000      	movs	r0, #0
 8000706:	f008 fb0f 	bl	8008d28 <Motor_DutyCycle_EXTRA1>
	      Motor_DutyCycle_EXTRA2(0);
 800070a:	2000      	movs	r0, #0
 800070c:	f008 fb64 	bl	8008dd8 <Motor_DutyCycle_EXTRA2>

//	    Vx = map(Str_PS2.stickValue[1], 0.0f, 255.0f, 2.0f, -2.0f);
//	    Vy = map(Str_PS2.stickValue[0], 0.0f, 255.0f, 2.0f, -2.0f);
//	    Vz = map(Str_PS2.stickValue[3], 0.0f, 255.0f, 4.0f, -4.0f);

	    Vx = map(Str_PS2.stickValue[1], 100.0f, -100.0f, 2.0f, -2.0f);
 8000710:	4b8b      	ldr	r3, [pc, #556]	@ (8000940 <main+0x488>)
 8000712:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8000716:	ee07 3a90 	vmov	s15, r3
 800071a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800071e:	eeb8 2a00 	vmov.f32	s4, #128	@ 0xc0000000 -2.0
 8000722:	eef0 1a00 	vmov.f32	s3, #0	@ 0x40000000  2.0
 8000726:	ed9f 1a88 	vldr	s2, [pc, #544]	@ 8000948 <main+0x490>
 800072a:	eddf 0a88 	vldr	s1, [pc, #544]	@ 800094c <main+0x494>
 800072e:	eeb0 0a67 	vmov.f32	s0, s15
 8000732:	f009 f9ed 	bl	8009b10 <map>
 8000736:	eef0 7a40 	vmov.f32	s15, s0
 800073a:	4b85      	ldr	r3, [pc, #532]	@ (8000950 <main+0x498>)
 800073c:	edc3 7a00 	vstr	s15, [r3]
	    Vy = map(Str_PS2.stickValue[0], 100.0f, -100.0f, 2.0f, -2.0f);
 8000740:	4b7f      	ldr	r3, [pc, #508]	@ (8000940 <main+0x488>)
 8000742:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8000746:	ee07 3a90 	vmov	s15, r3
 800074a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800074e:	eeb8 2a00 	vmov.f32	s4, #128	@ 0xc0000000 -2.0
 8000752:	eef0 1a00 	vmov.f32	s3, #0	@ 0x40000000  2.0
 8000756:	ed9f 1a7c 	vldr	s2, [pc, #496]	@ 8000948 <main+0x490>
 800075a:	eddf 0a7c 	vldr	s1, [pc, #496]	@ 800094c <main+0x494>
 800075e:	eeb0 0a67 	vmov.f32	s0, s15
 8000762:	f009 f9d5 	bl	8009b10 <map>
 8000766:	eef0 7a40 	vmov.f32	s15, s0
 800076a:	4b7a      	ldr	r3, [pc, #488]	@ (8000954 <main+0x49c>)
 800076c:	edc3 7a00 	vstr	s15, [r3]
	    Vz = map(Str_PS2.stickValue[3], 100.0f, -100.0f, 4.0f, -4.0f);
 8000770:	4b73      	ldr	r3, [pc, #460]	@ (8000940 <main+0x488>)
 8000772:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8000776:	ee07 3a90 	vmov	s15, r3
 800077a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800077e:	eeb9 2a00 	vmov.f32	s4, #144	@ 0xc0800000 -4.0
 8000782:	eef1 1a00 	vmov.f32	s3, #16	@ 0x40800000  4.0
 8000786:	ed9f 1a70 	vldr	s2, [pc, #448]	@ 8000948 <main+0x490>
 800078a:	eddf 0a70 	vldr	s1, [pc, #448]	@ 800094c <main+0x494>
 800078e:	eeb0 0a67 	vmov.f32	s0, s15
 8000792:	f009 f9bd 	bl	8009b10 <map>
 8000796:	eef0 7a40 	vmov.f32	s15, s0
 800079a:	4b6f      	ldr	r3, [pc, #444]	@ (8000958 <main+0x4a0>)
 800079c:	edc3 7a00 	vstr	s15, [r3]
	    // count[2] = getCount(&htim8);
	    // count[3] = getCount(&htim4);
	    // count[4] = getCount(&htim2);
	    // count[5] = getCount(&htim3);

	    RPM[0] = getRPM_TIM_Wheel(&htim5, LF);
 80007a0:	2100      	movs	r1, #0
 80007a2:	486e      	ldr	r0, [pc, #440]	@ (800095c <main+0x4a4>)
 80007a4:	f007 ff90 	bl	80086c8 <getRPM_TIM_Wheel>
 80007a8:	eef0 7a40 	vmov.f32	s15, s0
 80007ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007b0:	ee17 3a90 	vmov	r3, s15
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	4b6a      	ldr	r3, [pc, #424]	@ (8000960 <main+0x4a8>)
 80007b8:	801a      	strh	r2, [r3, #0]
	    RPM[1] = -getRPM_TIM_Wheel(&htim1, LB);
 80007ba:	2101      	movs	r1, #1
 80007bc:	4869      	ldr	r0, [pc, #420]	@ (8000964 <main+0x4ac>)
 80007be:	f007 ff83 	bl	80086c8 <getRPM_TIM_Wheel>
 80007c2:	eef0 7a40 	vmov.f32	s15, s0
 80007c6:	eef1 7a67 	vneg.f32	s15, s15
 80007ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007ce:	ee17 3a90 	vmov	r3, s15
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	4b62      	ldr	r3, [pc, #392]	@ (8000960 <main+0x4a8>)
 80007d6:	805a      	strh	r2, [r3, #2]
	    RPM[2] = getRPM_TIM_Wheel(&htim8, RF);
 80007d8:	2102      	movs	r1, #2
 80007da:	4863      	ldr	r0, [pc, #396]	@ (8000968 <main+0x4b0>)
 80007dc:	f007 ff74 	bl	80086c8 <getRPM_TIM_Wheel>
 80007e0:	eef0 7a40 	vmov.f32	s15, s0
 80007e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007e8:	ee17 3a90 	vmov	r3, s15
 80007ec:	b21a      	sxth	r2, r3
 80007ee:	4b5c      	ldr	r3, [pc, #368]	@ (8000960 <main+0x4a8>)
 80007f0:	809a      	strh	r2, [r3, #4]
	    RPM[3] = getRPM_TIM_Wheel(&htim4, RB);
 80007f2:	2103      	movs	r1, #3
 80007f4:	485d      	ldr	r0, [pc, #372]	@ (800096c <main+0x4b4>)
 80007f6:	f007 ff67 	bl	80086c8 <getRPM_TIM_Wheel>
 80007fa:	eef0 7a40 	vmov.f32	s15, s0
 80007fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000802:	ee17 3a90 	vmov	r3, s15
 8000806:	b21a      	sxth	r2, r3
 8000808:	4b55      	ldr	r3, [pc, #340]	@ (8000960 <main+0x4a8>)
 800080a:	80da      	strh	r2, [r3, #6]
	    // RPM[5] = getRPM_TIM_Wheel(&htim2, EXTRA2);

	    // Odometry_Forward_Kinematic(getRPM_to_Rad_s(RPM[0]), getRPM_to_Rad_s(RPM[1]), getRPM_to_Rad_s(RPM[2]), getRPM_to_Rad_s(RPM[3]));
	    // x = get_Vz();

	    Inverse_Kinematic(Vx, Vy, Vz);
 800080c:	4b50      	ldr	r3, [pc, #320]	@ (8000950 <main+0x498>)
 800080e:	edd3 7a00 	vldr	s15, [r3]
 8000812:	4b50      	ldr	r3, [pc, #320]	@ (8000954 <main+0x49c>)
 8000814:	ed93 7a00 	vldr	s14, [r3]
 8000818:	4b4f      	ldr	r3, [pc, #316]	@ (8000958 <main+0x4a0>)
 800081a:	edd3 6a00 	vldr	s13, [r3]
 800081e:	eeb0 1a66 	vmov.f32	s2, s13
 8000822:	eef0 0a47 	vmov.f32	s1, s14
 8000826:	eeb0 0a67 	vmov.f32	s0, s15
 800082a:	f009 f8a7 	bl	800997c <Inverse_Kinematic>

	    PID[0] = Motor_Speed_LF(getRad_s_to_RPM(get_w_LF()), RPM[0]);
 800082e:	f009 f937 	bl	8009aa0 <get_w_LF>
 8000832:	eef0 7a40 	vmov.f32	s15, s0
 8000836:	eeb0 0a67 	vmov.f32	s0, s15
 800083a:	f007 ff2b 	bl	8008694 <getRad_s_to_RPM>
 800083e:	eef0 7a40 	vmov.f32	s15, s0
 8000842:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000846:	ee17 3a90 	vmov	r3, s15
 800084a:	b21b      	sxth	r3, r3
 800084c:	4a44      	ldr	r2, [pc, #272]	@ (8000960 <main+0x4a8>)
 800084e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000852:	ee07 2a90 	vmov	s15, r2
 8000856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800085a:	eeb0 0a67 	vmov.f32	s0, s15
 800085e:	4618      	mov	r0, r3
 8000860:	f008 fb12 	bl	8008e88 <Motor_Speed_LF>
 8000864:	eef0 7a40 	vmov.f32	s15, s0
 8000868:	4b41      	ldr	r3, [pc, #260]	@ (8000970 <main+0x4b8>)
 800086a:	edc3 7a00 	vstr	s15, [r3]
	    PID[1] = Motor_Speed_LB(getRad_s_to_RPM(get_w_LB()), RPM[1]);
 800086e:	f009 f925 	bl	8009abc <get_w_LB>
 8000872:	eef0 7a40 	vmov.f32	s15, s0
 8000876:	eeb0 0a67 	vmov.f32	s0, s15
 800087a:	f007 ff0b 	bl	8008694 <getRad_s_to_RPM>
 800087e:	eef0 7a40 	vmov.f32	s15, s0
 8000882:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000886:	ee17 3a90 	vmov	r3, s15
 800088a:	b21b      	sxth	r3, r3
 800088c:	4a34      	ldr	r2, [pc, #208]	@ (8000960 <main+0x4a8>)
 800088e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000892:	ee07 2a90 	vmov	s15, r2
 8000896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800089a:	eeb0 0a67 	vmov.f32	s0, s15
 800089e:	4618      	mov	r0, r3
 80008a0:	f008 fb64 	bl	8008f6c <Motor_Speed_LB>
 80008a4:	eef0 7a40 	vmov.f32	s15, s0
 80008a8:	4b31      	ldr	r3, [pc, #196]	@ (8000970 <main+0x4b8>)
 80008aa:	edc3 7a01 	vstr	s15, [r3, #4]
	    PID[2] = Motor_Speed_RF(getRad_s_to_RPM(get_w_RF()), RPM[2]);
 80008ae:	f009 f913 	bl	8009ad8 <get_w_RF>
 80008b2:	eef0 7a40 	vmov.f32	s15, s0
 80008b6:	eeb0 0a67 	vmov.f32	s0, s15
 80008ba:	f007 feeb 	bl	8008694 <getRad_s_to_RPM>
 80008be:	eef0 7a40 	vmov.f32	s15, s0
 80008c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008c6:	ee17 3a90 	vmov	r3, s15
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	4a24      	ldr	r2, [pc, #144]	@ (8000960 <main+0x4a8>)
 80008ce:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80008d2:	ee07 2a90 	vmov	s15, r2
 80008d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008da:	eeb0 0a67 	vmov.f32	s0, s15
 80008de:	4618      	mov	r0, r3
 80008e0:	f008 fbb6 	bl	8009050 <Motor_Speed_RF>
 80008e4:	eef0 7a40 	vmov.f32	s15, s0
 80008e8:	4b21      	ldr	r3, [pc, #132]	@ (8000970 <main+0x4b8>)
 80008ea:	edc3 7a02 	vstr	s15, [r3, #8]
	    PID[3] = Motor_Speed_RB(getRad_s_to_RPM(get_w_RB()), RPM[3]);
 80008ee:	f009 f901 	bl	8009af4 <get_w_RB>
 80008f2:	eef0 7a40 	vmov.f32	s15, s0
 80008f6:	eeb0 0a67 	vmov.f32	s0, s15
 80008fa:	f007 fecb 	bl	8008694 <getRad_s_to_RPM>
 80008fe:	eef0 7a40 	vmov.f32	s15, s0
 8000902:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000906:	ee17 3a90 	vmov	r3, s15
 800090a:	b21b      	sxth	r3, r3
 800090c:	4a14      	ldr	r2, [pc, #80]	@ (8000960 <main+0x4a8>)
 800090e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000912:	ee07 2a90 	vmov	s15, r2
 8000916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800091a:	eeb0 0a67 	vmov.f32	s0, s15
 800091e:	4618      	mov	r0, r3
 8000920:	f008 fc08 	bl	8009134 <Motor_Speed_RB>
 8000924:	eef0 7a40 	vmov.f32	s15, s0
 8000928:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <main+0x4b8>)
 800092a:	edc3 7a03 	vstr	s15, [r3, #12]
	  if ((uwTick - PastTime) > 10) {
 800092e:	e65e      	b.n	80005ee <main+0x136>
 8000930:	20000620 	.word	0x20000620
 8000934:	20000648 	.word	0x20000648
 8000938:	2000061c 	.word	0x2000061c
 800093c:	200005c8 	.word	0x200005c8
 8000940:	20000640 	.word	0x20000640
 8000944:	0800c564 	.word	0x0800c564
 8000948:	c2c80000 	.word	0xc2c80000
 800094c:	42c80000 	.word	0x42c80000
 8000950:	20000610 	.word	0x20000610
 8000954:	20000614 	.word	0x20000614
 8000958:	20000618 	.word	0x20000618
 800095c:	20000340 	.word	0x20000340
 8000960:	20000000 	.word	0x20000000
 8000964:	20000220 	.word	0x20000220
 8000968:	20000388 	.word	0x20000388
 800096c:	200002f8 	.word	0x200002f8
 8000970:	20000628 	.word	0x20000628

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b094      	sub	sp, #80	@ 0x50
 8000978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0320 	add.w	r3, r7, #32
 800097e:	2230      	movs	r2, #48	@ 0x30
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f00b fd90 	bl	800c4a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	4b28      	ldr	r3, [pc, #160]	@ (8000a40 <SystemClock_Config+0xcc>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a0:	4a27      	ldr	r2, [pc, #156]	@ (8000a40 <SystemClock_Config+0xcc>)
 80009a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a8:	4b25      	ldr	r3, [pc, #148]	@ (8000a40 <SystemClock_Config+0xcc>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b4:	2300      	movs	r3, #0
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	4b22      	ldr	r3, [pc, #136]	@ (8000a44 <SystemClock_Config+0xd0>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a21      	ldr	r2, [pc, #132]	@ (8000a44 <SystemClock_Config+0xd0>)
 80009be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a44 <SystemClock_Config+0xd0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d0:	2301      	movs	r3, #1
 80009d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009da:	2302      	movs	r3, #2
 80009dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 7;
 80009e4:	2307      	movs	r3, #7
 80009e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009e8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ee:	2304      	movs	r3, #4
 80009f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80009f2:	2308      	movs	r3, #8
 80009f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	4618      	mov	r0, r3
 80009fc:	f003 fe8c 	bl	8004718 <HAL_RCC_OscConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a06:	f000 fde7 	bl	80015d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a16:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a20:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	2103      	movs	r1, #3
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f004 f8ed 	bl	8004c08 <HAL_RCC_ClockConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a34:	f000 fdd0 	bl	80015d8 <Error_Handler>
  }
}
 8000a38:	bf00      	nop
 8000a3a:	3750      	adds	r7, #80	@ 0x50
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40007000 	.word	0x40007000

08000a48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a4e:	463b      	mov	r3, r7
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a5a:	4b21      	ldr	r3, [pc, #132]	@ (8000ae0 <MX_ADC1_Init+0x98>)
 8000a5c:	4a21      	ldr	r2, [pc, #132]	@ (8000ae4 <MX_ADC1_Init+0x9c>)
 8000a5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a60:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae0 <MX_ADC1_Init+0x98>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae0 <MX_ADC1_Init+0x98>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae0 <MX_ADC1_Init+0x98>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a72:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae0 <MX_ADC1_Init+0x98>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a78:	4b19      	ldr	r3, [pc, #100]	@ (8000ae0 <MX_ADC1_Init+0x98>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a80:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <MX_ADC1_Init+0x98>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a86:	4b16      	ldr	r3, [pc, #88]	@ (8000ae0 <MX_ADC1_Init+0x98>)
 8000a88:	4a17      	ldr	r2, [pc, #92]	@ (8000ae8 <MX_ADC1_Init+0xa0>)
 8000a8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <MX_ADC1_Init+0x98>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a92:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <MX_ADC1_Init+0x98>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a98:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <MX_ADC1_Init+0x98>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <MX_ADC1_Init+0x98>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aa6:	480e      	ldr	r0, [pc, #56]	@ (8000ae0 <MX_ADC1_Init+0x98>)
 8000aa8:	f001 fbb6 	bl	8002218 <HAL_ADC_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ab2:	f000 fd91 	bl	80015d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000aba:	2301      	movs	r3, #1
 8000abc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4806      	ldr	r0, [pc, #24]	@ (8000ae0 <MX_ADC1_Init+0x98>)
 8000ac8:	f001 fbea 	bl	80022a0 <HAL_ADC_ConfigChannel>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000ad2:	f000 fd81 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000012c 	.word	0x2000012c
 8000ae4:	40012000 	.word	0x40012000
 8000ae8:	0f000001 	.word	0x0f000001

08000aec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000af0:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <MX_I2C2_Init+0x50>)
 8000af2:	4a13      	ldr	r2, [pc, #76]	@ (8000b40 <MX_I2C2_Init+0x54>)
 8000af4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000af6:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <MX_I2C2_Init+0x50>)
 8000af8:	4a12      	ldr	r2, [pc, #72]	@ (8000b44 <MX_I2C2_Init+0x58>)
 8000afa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <MX_I2C2_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <MX_I2C2_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <MX_I2C2_Init+0x50>)
 8000b0a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b0e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b10:	4b0a      	ldr	r3, [pc, #40]	@ (8000b3c <MX_I2C2_Init+0x50>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <MX_I2C2_Init+0x50>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1c:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <MX_I2C2_Init+0x50>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <MX_I2C2_Init+0x50>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	@ (8000b3c <MX_I2C2_Init+0x50>)
 8000b2a:	f002 fa5f 	bl	8002fec <HAL_I2C_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b34:	f000 fd50 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000174 	.word	0x20000174
 8000b40:	40005800 	.word	0x40005800
 8000b44:	00061a80 	.word	0x00061a80

08000b48 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b4c:	4b17      	ldr	r3, [pc, #92]	@ (8000bac <MX_SPI2_Init+0x64>)
 8000b4e:	4a18      	ldr	r2, [pc, #96]	@ (8000bb0 <MX_SPI2_Init+0x68>)
 8000b50:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b52:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <MX_SPI2_Init+0x64>)
 8000b54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b58:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5a:	4b14      	ldr	r3, [pc, #80]	@ (8000bac <MX_SPI2_Init+0x64>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b60:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <MX_SPI2_Init+0x64>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b66:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <MX_SPI2_Init+0x64>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bac <MX_SPI2_Init+0x64>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <MX_SPI2_Init+0x64>)
 8000b74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b78:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bac <MX_SPI2_Init+0x64>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b80:	4b0a      	ldr	r3, [pc, #40]	@ (8000bac <MX_SPI2_Init+0x64>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b86:	4b09      	ldr	r3, [pc, #36]	@ (8000bac <MX_SPI2_Init+0x64>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	@ (8000bac <MX_SPI2_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b92:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <MX_SPI2_Init+0x64>)
 8000b94:	220a      	movs	r2, #10
 8000b96:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b98:	4804      	ldr	r0, [pc, #16]	@ (8000bac <MX_SPI2_Init+0x64>)
 8000b9a:	f004 fa55 	bl	8005048 <HAL_SPI_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ba4:	f000 fd18 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	200001c8 	.word	0x200001c8
 8000bb0:	40003800 	.word	0x40003800

08000bb4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08c      	sub	sp, #48	@ 0x30
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	2224      	movs	r2, #36	@ 0x24
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f00b fc70 	bl	800c4a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	@ (8000c5c <MX_TIM1_Init+0xa8>)
 8000bd2:	4a23      	ldr	r2, [pc, #140]	@ (8000c60 <MX_TIM1_Init+0xac>)
 8000bd4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <MX_TIM1_Init+0xa8>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c5c <MX_TIM1_Init+0xa8>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000be2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c5c <MX_TIM1_Init+0xa8>)
 8000be4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000be8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	@ (8000c5c <MX_TIM1_Init+0xa8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <MX_TIM1_Init+0xa8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <MX_TIM1_Init+0xa8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c00:	2300      	movs	r3, #0
 8000c02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c04:	2301      	movs	r3, #1
 8000c06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c14:	2301      	movs	r3, #1
 8000c16:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	4619      	mov	r1, r3
 8000c26:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <MX_TIM1_Init+0xa8>)
 8000c28:	f004 fbfe 	bl	8005428 <HAL_TIM_Encoder_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000c32:	f000 fcd1 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	4619      	mov	r1, r3
 8000c42:	4806      	ldr	r0, [pc, #24]	@ (8000c5c <MX_TIM1_Init+0xa8>)
 8000c44:	f005 f868 	bl	8005d18 <HAL_TIMEx_MasterConfigSynchronization>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000c4e:	f000 fcc3 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	3730      	adds	r7, #48	@ 0x30
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000220 	.word	0x20000220
 8000c60:	40010000 	.word	0x40010000

08000c64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08c      	sub	sp, #48	@ 0x30
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	2224      	movs	r2, #36	@ 0x24
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f00b fc18 	bl	800c4a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c80:	4b21      	ldr	r3, [pc, #132]	@ (8000d08 <MX_TIM2_Init+0xa4>)
 8000c82:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c88:	4b1f      	ldr	r3, [pc, #124]	@ (8000d08 <MX_TIM2_Init+0xa4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d08 <MX_TIM2_Init+0xa4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c94:	4b1c      	ldr	r3, [pc, #112]	@ (8000d08 <MX_TIM2_Init+0xa4>)
 8000c96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <MX_TIM2_Init+0xa4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	@ (8000d08 <MX_TIM2_Init+0xa4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cac:	2300      	movs	r3, #0
 8000cae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480d      	ldr	r0, [pc, #52]	@ (8000d08 <MX_TIM2_Init+0xa4>)
 8000cd4:	f004 fba8 	bl	8005428 <HAL_TIM_Encoder_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000cde:	f000 fc7b 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	4619      	mov	r1, r3
 8000cee:	4806      	ldr	r0, [pc, #24]	@ (8000d08 <MX_TIM2_Init+0xa4>)
 8000cf0:	f005 f812 	bl	8005d18 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000cfa:	f000 fc6d 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	3730      	adds	r7, #48	@ 0x30
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000268 	.word	0x20000268

08000d0c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08c      	sub	sp, #48	@ 0x30
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d12:	f107 030c 	add.w	r3, r7, #12
 8000d16:	2224      	movs	r2, #36	@ 0x24
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f00b fbc4 	bl	800c4a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d28:	4b20      	ldr	r3, [pc, #128]	@ (8000dac <MX_TIM3_Init+0xa0>)
 8000d2a:	4a21      	ldr	r2, [pc, #132]	@ (8000db0 <MX_TIM3_Init+0xa4>)
 8000d2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dac <MX_TIM3_Init+0xa0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d34:	4b1d      	ldr	r3, [pc, #116]	@ (8000dac <MX_TIM3_Init+0xa0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dac <MX_TIM3_Init+0xa0>)
 8000d3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	@ (8000dac <MX_TIM3_Init+0xa0>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d48:	4b18      	ldr	r3, [pc, #96]	@ (8000dac <MX_TIM3_Init+0xa0>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d56:	2301      	movs	r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d66:	2301      	movs	r3, #1
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	4619      	mov	r1, r3
 8000d78:	480c      	ldr	r0, [pc, #48]	@ (8000dac <MX_TIM3_Init+0xa0>)
 8000d7a:	f004 fb55 	bl	8005428 <HAL_TIM_Encoder_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000d84:	f000 fc28 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	@ (8000dac <MX_TIM3_Init+0xa0>)
 8000d96:	f004 ffbf 	bl	8005d18 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000da0:	f000 fc1a 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000da4:	bf00      	nop
 8000da6:	3730      	adds	r7, #48	@ 0x30
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200002b0 	.word	0x200002b0
 8000db0:	40000400 	.word	0x40000400

08000db4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08c      	sub	sp, #48	@ 0x30
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dba:	f107 030c 	add.w	r3, r7, #12
 8000dbe:	2224      	movs	r2, #36	@ 0x24
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f00b fb70 	bl	800c4a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dd0:	4b20      	ldr	r3, [pc, #128]	@ (8000e54 <MX_TIM4_Init+0xa0>)
 8000dd2:	4a21      	ldr	r2, [pc, #132]	@ (8000e58 <MX_TIM4_Init+0xa4>)
 8000dd4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e54 <MX_TIM4_Init+0xa0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e54 <MX_TIM4_Init+0xa0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e54 <MX_TIM4_Init+0xa0>)
 8000de4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000de8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dea:	4b1a      	ldr	r3, [pc, #104]	@ (8000e54 <MX_TIM4_Init+0xa0>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df0:	4b18      	ldr	r3, [pc, #96]	@ (8000e54 <MX_TIM4_Init+0xa0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000df6:	2303      	movs	r3, #3
 8000df8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <MX_TIM4_Init+0xa0>)
 8000e22:	f004 fb01 	bl	8005428 <HAL_TIM_Encoder_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000e2c:	f000 fbd4 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e30:	2300      	movs	r3, #0
 8000e32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <MX_TIM4_Init+0xa0>)
 8000e3e:	f004 ff6b 	bl	8005d18 <HAL_TIMEx_MasterConfigSynchronization>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000e48:	f000 fbc6 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	3730      	adds	r7, #48	@ 0x30
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200002f8 	.word	0x200002f8
 8000e58:	40000800 	.word	0x40000800

08000e5c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08c      	sub	sp, #48	@ 0x30
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	2224      	movs	r2, #36	@ 0x24
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f00b fb1c 	bl	800c4a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e78:	4b20      	ldr	r3, [pc, #128]	@ (8000efc <MX_TIM5_Init+0xa0>)
 8000e7a:	4a21      	ldr	r2, [pc, #132]	@ (8000f00 <MX_TIM5_Init+0xa4>)
 8000e7c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <MX_TIM5_Init+0xa0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	@ (8000efc <MX_TIM5_Init+0xa0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <MX_TIM5_Init+0xa0>)
 8000e8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e90:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e92:	4b1a      	ldr	r3, [pc, #104]	@ (8000efc <MX_TIM5_Init+0xa0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e98:	4b18      	ldr	r3, [pc, #96]	@ (8000efc <MX_TIM5_Init+0xa0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480c      	ldr	r0, [pc, #48]	@ (8000efc <MX_TIM5_Init+0xa0>)
 8000eca:	f004 faad 	bl	8005428 <HAL_TIM_Encoder_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000ed4:	f000 fb80 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	@ (8000efc <MX_TIM5_Init+0xa0>)
 8000ee6:	f004 ff17 	bl	8005d18 <HAL_TIMEx_MasterConfigSynchronization>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000ef0:	f000 fb72 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	3730      	adds	r7, #48	@ 0x30
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000340 	.word	0x20000340
 8000f00:	40000c00 	.word	0x40000c00

08000f04 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08c      	sub	sp, #48	@ 0x30
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f0a:	f107 030c 	add.w	r3, r7, #12
 8000f0e:	2224      	movs	r2, #36	@ 0x24
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f00b fac8 	bl	800c4a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f20:	4b22      	ldr	r3, [pc, #136]	@ (8000fac <MX_TIM8_Init+0xa8>)
 8000f22:	4a23      	ldr	r2, [pc, #140]	@ (8000fb0 <MX_TIM8_Init+0xac>)
 8000f24:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000f26:	4b21      	ldr	r3, [pc, #132]	@ (8000fac <MX_TIM8_Init+0xa8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fac <MX_TIM8_Init+0xa8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000f32:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <MX_TIM8_Init+0xa8>)
 8000f34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f38:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fac <MX_TIM8_Init+0xa8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f40:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <MX_TIM8_Init+0xa8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f46:	4b19      	ldr	r3, [pc, #100]	@ (8000fac <MX_TIM8_Init+0xa8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f54:	2301      	movs	r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f64:	2301      	movs	r3, #1
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	4619      	mov	r1, r3
 8000f76:	480d      	ldr	r0, [pc, #52]	@ (8000fac <MX_TIM8_Init+0xa8>)
 8000f78:	f004 fa56 	bl	8005428 <HAL_TIM_Encoder_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8000f82:	f000 fb29 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	4619      	mov	r1, r3
 8000f92:	4806      	ldr	r0, [pc, #24]	@ (8000fac <MX_TIM8_Init+0xa8>)
 8000f94:	f004 fec0 	bl	8005d18 <HAL_TIMEx_MasterConfigSynchronization>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8000f9e:	f000 fb1b 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	3730      	adds	r7, #48	@ 0x30
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000388 	.word	0x20000388
 8000fb0:	40010400 	.word	0x40010400

08000fb4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
 8000fc8:	615a      	str	r2, [r3, #20]
 8000fca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <MX_TIM9_Init+0x98>)
 8000fce:	4a20      	ldr	r2, [pc, #128]	@ (8001050 <MX_TIM9_Init+0x9c>)
 8000fd0:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 2-1;
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	@ (800104c <MX_TIM9_Init+0x98>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <MX_TIM9_Init+0x98>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4096-1;
 8000fde:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <MX_TIM9_Init+0x98>)
 8000fe0:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000fe4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe6:	4b19      	ldr	r3, [pc, #100]	@ (800104c <MX_TIM9_Init+0x98>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fec:	4b17      	ldr	r3, [pc, #92]	@ (800104c <MX_TIM9_Init+0x98>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000ff2:	4816      	ldr	r0, [pc, #88]	@ (800104c <MX_TIM9_Init+0x98>)
 8000ff4:	f004 f900 	bl	80051f8 <HAL_TIM_PWM_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8000ffe:	f000 faeb 	bl	80015d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001002:	2360      	movs	r3, #96	@ 0x60
 8001004:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2200      	movs	r2, #0
 8001016:	4619      	mov	r1, r3
 8001018:	480c      	ldr	r0, [pc, #48]	@ (800104c <MX_TIM9_Init+0x98>)
 800101a:	f004 fb39 	bl	8005690 <HAL_TIM_PWM_ConfigChannel>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001024:	f000 fad8 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2204      	movs	r2, #4
 800102c:	4619      	mov	r1, r3
 800102e:	4807      	ldr	r0, [pc, #28]	@ (800104c <MX_TIM9_Init+0x98>)
 8001030:	f004 fb2e 	bl	8005690 <HAL_TIM_PWM_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 800103a:	f000 facd 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800103e:	4803      	ldr	r0, [pc, #12]	@ (800104c <MX_TIM9_Init+0x98>)
 8001040:	f000 fe1a 	bl	8001c78 <HAL_TIM_MspPostInit>

}
 8001044:	bf00      	nop
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200003d0 	.word	0x200003d0
 8001050:	40014000 	.word	0x40014000

08001054 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
 8001068:	615a      	str	r2, [r3, #20]
 800106a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800106c:	4b1e      	ldr	r3, [pc, #120]	@ (80010e8 <MX_TIM10_Init+0x94>)
 800106e:	4a1f      	ldr	r2, [pc, #124]	@ (80010ec <MX_TIM10_Init+0x98>)
 8001070:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 2-1;
 8001072:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <MX_TIM10_Init+0x94>)
 8001074:	2201      	movs	r2, #1
 8001076:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001078:	4b1b      	ldr	r3, [pc, #108]	@ (80010e8 <MX_TIM10_Init+0x94>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4096-1;
 800107e:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <MX_TIM10_Init+0x94>)
 8001080:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001084:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001086:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <MX_TIM10_Init+0x94>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108c:	4b16      	ldr	r3, [pc, #88]	@ (80010e8 <MX_TIM10_Init+0x94>)
 800108e:	2200      	movs	r2, #0
 8001090:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001092:	4815      	ldr	r0, [pc, #84]	@ (80010e8 <MX_TIM10_Init+0x94>)
 8001094:	f004 f861 	bl	800515a <HAL_TIM_Base_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800109e:	f000 fa9b 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80010a2:	4811      	ldr	r0, [pc, #68]	@ (80010e8 <MX_TIM10_Init+0x94>)
 80010a4:	f004 f8a8 	bl	80051f8 <HAL_TIM_PWM_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80010ae:	f000 fa93 	bl	80015d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b2:	2360      	movs	r3, #96	@ 0x60
 80010b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	4619      	mov	r1, r3
 80010c8:	4807      	ldr	r0, [pc, #28]	@ (80010e8 <MX_TIM10_Init+0x94>)
 80010ca:	f004 fae1 	bl	8005690 <HAL_TIM_PWM_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80010d4:	f000 fa80 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80010d8:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <MX_TIM10_Init+0x94>)
 80010da:	f000 fdcd 	bl	8001c78 <HAL_TIM_MspPostInit>

}
 80010de:	bf00      	nop
 80010e0:	3720      	adds	r7, #32
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000418 	.word	0x20000418
 80010ec:	40014400 	.word	0x40014400

080010f0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b088      	sub	sp, #32
 80010f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
 8001104:	615a      	str	r2, [r3, #20]
 8001106:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001108:	4b1e      	ldr	r3, [pc, #120]	@ (8001184 <MX_TIM11_Init+0x94>)
 800110a:	4a1f      	ldr	r2, [pc, #124]	@ (8001188 <MX_TIM11_Init+0x98>)
 800110c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2-1;
 800110e:	4b1d      	ldr	r3, [pc, #116]	@ (8001184 <MX_TIM11_Init+0x94>)
 8001110:	2201      	movs	r2, #1
 8001112:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001114:	4b1b      	ldr	r3, [pc, #108]	@ (8001184 <MX_TIM11_Init+0x94>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 4096-1;
 800111a:	4b1a      	ldr	r3, [pc, #104]	@ (8001184 <MX_TIM11_Init+0x94>)
 800111c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001120:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001122:	4b18      	ldr	r3, [pc, #96]	@ (8001184 <MX_TIM11_Init+0x94>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001128:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <MX_TIM11_Init+0x94>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800112e:	4815      	ldr	r0, [pc, #84]	@ (8001184 <MX_TIM11_Init+0x94>)
 8001130:	f004 f813 	bl	800515a <HAL_TIM_Base_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800113a:	f000 fa4d 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800113e:	4811      	ldr	r0, [pc, #68]	@ (8001184 <MX_TIM11_Init+0x94>)
 8001140:	f004 f85a 	bl	80051f8 <HAL_TIM_PWM_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800114a:	f000 fa45 	bl	80015d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800114e:	2360      	movs	r3, #96	@ 0x60
 8001150:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2200      	movs	r2, #0
 8001162:	4619      	mov	r1, r3
 8001164:	4807      	ldr	r0, [pc, #28]	@ (8001184 <MX_TIM11_Init+0x94>)
 8001166:	f004 fa93 	bl	8005690 <HAL_TIM_PWM_ConfigChannel>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001170:	f000 fa32 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001174:	4803      	ldr	r0, [pc, #12]	@ (8001184 <MX_TIM11_Init+0x94>)
 8001176:	f000 fd7f 	bl	8001c78 <HAL_TIM_MspPostInit>

}
 800117a:	bf00      	nop
 800117c:	3720      	adds	r7, #32
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000460 	.word	0x20000460
 8001188:	40014800 	.word	0x40014800

0800118c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
 80011a0:	615a      	str	r2, [r3, #20]
 80011a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80011a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001224 <MX_TIM12_Init+0x98>)
 80011a6:	4a20      	ldr	r2, [pc, #128]	@ (8001228 <MX_TIM12_Init+0x9c>)
 80011a8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 2-1;
 80011aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <MX_TIM12_Init+0x98>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <MX_TIM12_Init+0x98>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4096-1;
 80011b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <MX_TIM12_Init+0x98>)
 80011b8:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80011bc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011be:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <MX_TIM12_Init+0x98>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c4:	4b17      	ldr	r3, [pc, #92]	@ (8001224 <MX_TIM12_Init+0x98>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80011ca:	4816      	ldr	r0, [pc, #88]	@ (8001224 <MX_TIM12_Init+0x98>)
 80011cc:	f004 f814 	bl	80051f8 <HAL_TIM_PWM_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80011d6:	f000 f9ff 	bl	80015d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011da:	2360      	movs	r3, #96	@ 0x60
 80011dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2200      	movs	r2, #0
 80011ee:	4619      	mov	r1, r3
 80011f0:	480c      	ldr	r0, [pc, #48]	@ (8001224 <MX_TIM12_Init+0x98>)
 80011f2:	f004 fa4d 	bl	8005690 <HAL_TIM_PWM_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80011fc:	f000 f9ec 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	2204      	movs	r2, #4
 8001204:	4619      	mov	r1, r3
 8001206:	4807      	ldr	r0, [pc, #28]	@ (8001224 <MX_TIM12_Init+0x98>)
 8001208:	f004 fa42 	bl	8005690 <HAL_TIM_PWM_ConfigChannel>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001212:	f000 f9e1 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001216:	4803      	ldr	r0, [pc, #12]	@ (8001224 <MX_TIM12_Init+0x98>)
 8001218:	f000 fd2e 	bl	8001c78 <HAL_TIM_MspPostInit>

}
 800121c:	bf00      	nop
 800121e:	3720      	adds	r7, #32
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200004a8 	.word	0x200004a8
 8001228:	40001800 	.word	0x40001800

0800122c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
 8001240:	615a      	str	r2, [r3, #20]
 8001242:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001244:	4b1e      	ldr	r3, [pc, #120]	@ (80012c0 <MX_TIM13_Init+0x94>)
 8001246:	4a1f      	ldr	r2, [pc, #124]	@ (80012c4 <MX_TIM13_Init+0x98>)
 8001248:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2-1;
 800124a:	4b1d      	ldr	r3, [pc, #116]	@ (80012c0 <MX_TIM13_Init+0x94>)
 800124c:	2201      	movs	r2, #1
 800124e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001250:	4b1b      	ldr	r3, [pc, #108]	@ (80012c0 <MX_TIM13_Init+0x94>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 4096-1;
 8001256:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <MX_TIM13_Init+0x94>)
 8001258:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800125c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125e:	4b18      	ldr	r3, [pc, #96]	@ (80012c0 <MX_TIM13_Init+0x94>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001264:	4b16      	ldr	r3, [pc, #88]	@ (80012c0 <MX_TIM13_Init+0x94>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800126a:	4815      	ldr	r0, [pc, #84]	@ (80012c0 <MX_TIM13_Init+0x94>)
 800126c:	f003 ff75 	bl	800515a <HAL_TIM_Base_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001276:	f000 f9af 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800127a:	4811      	ldr	r0, [pc, #68]	@ (80012c0 <MX_TIM13_Init+0x94>)
 800127c:	f003 ffbc 	bl	80051f8 <HAL_TIM_PWM_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001286:	f000 f9a7 	bl	80015d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800128a:	2360      	movs	r3, #96	@ 0x60
 800128c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2200      	movs	r2, #0
 800129e:	4619      	mov	r1, r3
 80012a0:	4807      	ldr	r0, [pc, #28]	@ (80012c0 <MX_TIM13_Init+0x94>)
 80012a2:	f004 f9f5 	bl	8005690 <HAL_TIM_PWM_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80012ac:	f000 f994 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80012b0:	4803      	ldr	r0, [pc, #12]	@ (80012c0 <MX_TIM13_Init+0x94>)
 80012b2:	f000 fce1 	bl	8001c78 <HAL_TIM_MspPostInit>

}
 80012b6:	bf00      	nop
 80012b8:	3720      	adds	r7, #32
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200004f0 	.word	0x200004f0
 80012c4:	40001c00 	.word	0x40001c00

080012c8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
 80012dc:	615a      	str	r2, [r3, #20]
 80012de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80012e0:	4b1e      	ldr	r3, [pc, #120]	@ (800135c <MX_TIM14_Init+0x94>)
 80012e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001360 <MX_TIM14_Init+0x98>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 2-1;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	@ (800135c <MX_TIM14_Init+0x94>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <MX_TIM14_Init+0x94>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4096-1;
 80012f2:	4b1a      	ldr	r3, [pc, #104]	@ (800135c <MX_TIM14_Init+0x94>)
 80012f4:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80012f8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fa:	4b18      	ldr	r3, [pc, #96]	@ (800135c <MX_TIM14_Init+0x94>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001300:	4b16      	ldr	r3, [pc, #88]	@ (800135c <MX_TIM14_Init+0x94>)
 8001302:	2200      	movs	r2, #0
 8001304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001306:	4815      	ldr	r0, [pc, #84]	@ (800135c <MX_TIM14_Init+0x94>)
 8001308:	f003 ff27 	bl	800515a <HAL_TIM_Base_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8001312:	f000 f961 	bl	80015d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001316:	4811      	ldr	r0, [pc, #68]	@ (800135c <MX_TIM14_Init+0x94>)
 8001318:	f003 ff6e 	bl	80051f8 <HAL_TIM_PWM_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8001322:	f000 f959 	bl	80015d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001326:	2360      	movs	r3, #96	@ 0x60
 8001328:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	2200      	movs	r2, #0
 800133a:	4619      	mov	r1, r3
 800133c:	4807      	ldr	r0, [pc, #28]	@ (800135c <MX_TIM14_Init+0x94>)
 800133e:	f004 f9a7 	bl	8005690 <HAL_TIM_PWM_ConfigChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001348:	f000 f946 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800134c:	4803      	ldr	r0, [pc, #12]	@ (800135c <MX_TIM14_Init+0x94>)
 800134e:	f000 fc93 	bl	8001c78 <HAL_TIM_MspPostInit>

}
 8001352:	bf00      	nop
 8001354:	3720      	adds	r7, #32
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000538 	.word	0x20000538
 8001360:	40002000 	.word	0x40002000

08001364 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <MX_UART4_Init+0x4c>)
 800136a:	4a12      	ldr	r2, [pc, #72]	@ (80013b4 <MX_UART4_Init+0x50>)
 800136c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <MX_UART4_Init+0x4c>)
 8001370:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001374:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <MX_UART4_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <MX_UART4_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <MX_UART4_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001388:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <MX_UART4_Init+0x4c>)
 800138a:	220c      	movs	r2, #12
 800138c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138e:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <MX_UART4_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <MX_UART4_Init+0x4c>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <MX_UART4_Init+0x4c>)
 800139c:	f004 fd38 	bl	8005e10 <HAL_UART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80013a6:	f000 f917 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000580 	.word	0x20000580
 80013b4:	40004c00 	.word	0x40004c00

080013b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013bc:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013be:	4a12      	ldr	r2, [pc, #72]	@ (8001408 <MX_USART2_UART_Init+0x50>)
 80013c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013c2:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013de:	2204      	movs	r2, #4
 80013e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e2:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013f0:	f004 fd0e 	bl	8005e10 <HAL_UART_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013fa:	f000 f8ed 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200005c8 	.word	0x200005c8
 8001408:	40004400 	.word	0x40004400

0800140c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08c      	sub	sp, #48	@ 0x30
 8001410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
 8001420:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	61bb      	str	r3, [r7, #24]
 8001426:	4b54      	ldr	r3, [pc, #336]	@ (8001578 <MX_GPIO_Init+0x16c>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a53      	ldr	r2, [pc, #332]	@ (8001578 <MX_GPIO_Init+0x16c>)
 800142c:	f043 0310 	orr.w	r3, r3, #16
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b51      	ldr	r3, [pc, #324]	@ (8001578 <MX_GPIO_Init+0x16c>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0310 	and.w	r3, r3, #16
 800143a:	61bb      	str	r3, [r7, #24]
 800143c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	4b4d      	ldr	r3, [pc, #308]	@ (8001578 <MX_GPIO_Init+0x16c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a4c      	ldr	r2, [pc, #304]	@ (8001578 <MX_GPIO_Init+0x16c>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b4a      	ldr	r3, [pc, #296]	@ (8001578 <MX_GPIO_Init+0x16c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b46      	ldr	r3, [pc, #280]	@ (8001578 <MX_GPIO_Init+0x16c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a45      	ldr	r2, [pc, #276]	@ (8001578 <MX_GPIO_Init+0x16c>)
 8001464:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b43      	ldr	r3, [pc, #268]	@ (8001578 <MX_GPIO_Init+0x16c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b3f      	ldr	r3, [pc, #252]	@ (8001578 <MX_GPIO_Init+0x16c>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	4a3e      	ldr	r2, [pc, #248]	@ (8001578 <MX_GPIO_Init+0x16c>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	@ 0x30
 8001486:	4b3c      	ldr	r3, [pc, #240]	@ (8001578 <MX_GPIO_Init+0x16c>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	4b38      	ldr	r3, [pc, #224]	@ (8001578 <MX_GPIO_Init+0x16c>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a37      	ldr	r2, [pc, #220]	@ (8001578 <MX_GPIO_Init+0x16c>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b35      	ldr	r3, [pc, #212]	@ (8001578 <MX_GPIO_Init+0x16c>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	4b31      	ldr	r3, [pc, #196]	@ (8001578 <MX_GPIO_Init+0x16c>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	4a30      	ldr	r2, [pc, #192]	@ (8001578 <MX_GPIO_Init+0x16c>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014be:	4b2e      	ldr	r3, [pc, #184]	@ (8001578 <MX_GPIO_Init+0x16c>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CE_1_Pin|CE_2_Pin|GPIO_PIN_7|GPIO_PIN_8
 80014ca:	2200      	movs	r2, #0
 80014cc:	f24b 518f 	movw	r1, #46479	@ 0xb58f
 80014d0:	482a      	ldr	r0, [pc, #168]	@ (800157c <MX_GPIO_Init+0x170>)
 80014d2:	f001 fd71 	bl	8002fb8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|LB_DIGI_R_Pin|GPIO_PIN_13|GPIO_PIN_15
                          |EXTRA2_DIGI_R_Pin|RF_DIGI_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EXTRA1_DIGI_R_Pin|LF_DIGI_R_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f242 0120 	movw	r1, #8224	@ 0x2020
 80014dc:	4828      	ldr	r0, [pc, #160]	@ (8001580 <MX_GPIO_Init+0x174>)
 80014de:	f001 fd6b 	bl	8002fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2101      	movs	r1, #1
 80014e6:	4827      	ldr	r0, [pc, #156]	@ (8001584 <MX_GPIO_Init+0x178>)
 80014e8:	f001 fd66 	bl	8002fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RB_DIGI_R_GPIO_Port, RB_DIGI_R_Pin, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014f2:	4825      	ldr	r0, [pc, #148]	@ (8001588 <MX_GPIO_Init+0x17c>)
 80014f4:	f001 fd60 	bl	8002fb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_1_Pin CE_2_Pin PE7 PE8
                           PE10 LB_DIGI_R_Pin PE13 PE15
                           EXTRA2_DIGI_R_Pin RF_DIGI_R_Pin */
  GPIO_InitStruct.Pin = CE_1_Pin|CE_2_Pin|GPIO_PIN_7|GPIO_PIN_8
 80014f8:	f24b 538f 	movw	r3, #46479	@ 0xb58f
 80014fc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|LB_DIGI_R_Pin|GPIO_PIN_13|GPIO_PIN_15
                          |EXTRA2_DIGI_R_Pin|RF_DIGI_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	4619      	mov	r1, r3
 8001510:	481a      	ldr	r0, [pc, #104]	@ (800157c <MX_GPIO_Init+0x170>)
 8001512:	f001 fab9 	bl	8002a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTRA1_DIGI_R_Pin LF_DIGI_R_Pin */
  GPIO_InitStruct.Pin = EXTRA1_DIGI_R_Pin|LF_DIGI_R_Pin;
 8001516:	f242 0320 	movw	r3, #8224	@ 0x2020
 800151a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	2301      	movs	r3, #1
 800151e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	4619      	mov	r1, r3
 800152e:	4814      	ldr	r0, [pc, #80]	@ (8001580 <MX_GPIO_Init+0x174>)
 8001530:	f001 faaa 	bl	8002a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001534:	2301      	movs	r3, #1
 8001536:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	4619      	mov	r1, r3
 800154a:	480e      	ldr	r0, [pc, #56]	@ (8001584 <MX_GPIO_Init+0x178>)
 800154c:	f001 fa9c 	bl	8002a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : RB_DIGI_R_Pin */
  GPIO_InitStruct.Pin = RB_DIGI_R_Pin;
 8001550:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RB_DIGI_R_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	4807      	ldr	r0, [pc, #28]	@ (8001588 <MX_GPIO_Init+0x17c>)
 800156a:	f001 fa8d 	bl	8002a88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800156e:	bf00      	nop
 8001570:	3730      	adds	r7, #48	@ 0x30
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40021000 	.word	0x40021000
 8001580:	40020800 	.word	0x40020800
 8001584:	40020400 	.word	0x40020400
 8001588:	40020c00 	.word	0x40020c00

0800158c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	 if (huart->Instance == USART2){
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a09      	ldr	r2, [pc, #36]	@ (80015c0 <HAL_UART_RxCpltCallback+0x34>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d10b      	bne.n	80015b6 <HAL_UART_RxCpltCallback+0x2a>
	    last_uart_data_time = uwTick;
 800159e:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <HAL_UART_RxCpltCallback+0x38>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a09      	ldr	r2, [pc, #36]	@ (80015c8 <HAL_UART_RxCpltCallback+0x3c>)
 80015a4:	6013      	str	r3, [r2, #0]
	    uart_resetting = 0;  // กลับสู่สถานะปกติเมื่อมีข้อมูลเข้า
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <HAL_UART_RxCpltCallback+0x40>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
	    HAL_UART_Receive_IT(&huart2, (uint8_t *)&Str_PS2, sizeof(Str_PS2));
 80015ac:	2208      	movs	r2, #8
 80015ae:	4908      	ldr	r1, [pc, #32]	@ (80015d0 <HAL_UART_RxCpltCallback+0x44>)
 80015b0:	4808      	ldr	r0, [pc, #32]	@ (80015d4 <HAL_UART_RxCpltCallback+0x48>)
 80015b2:	f004 fcaf 	bl	8005f14 <HAL_UART_Receive_IT>
	 }
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40004400 	.word	0x40004400
 80015c4:	20000648 	.word	0x20000648
 80015c8:	2000061c 	.word	0x2000061c
 80015cc:	20000620 	.word	0x20000620
 80015d0:	20000640 	.word	0x20000640
 80015d4:	200005c8 	.word	0x200005c8

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <Error_Handler+0x8>

080015e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <HAL_MspInit+0x4c>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001630 <HAL_MspInit+0x4c>)
 80015f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001630 <HAL_MspInit+0x4c>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <HAL_MspInit+0x4c>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	4a08      	ldr	r2, [pc, #32]	@ (8001630 <HAL_MspInit+0x4c>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001614:	6413      	str	r3, [r2, #64]	@ 0x40
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <HAL_MspInit+0x4c>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800

08001634 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	@ 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a24      	ldr	r2, [pc, #144]	@ (80016e4 <HAL_ADC_MspInit+0xb0>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d141      	bne.n	80016da <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b23      	ldr	r3, [pc, #140]	@ (80016e8 <HAL_ADC_MspInit+0xb4>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165e:	4a22      	ldr	r2, [pc, #136]	@ (80016e8 <HAL_ADC_MspInit+0xb4>)
 8001660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001664:	6453      	str	r3, [r2, #68]	@ 0x44
 8001666:	4b20      	ldr	r3, [pc, #128]	@ (80016e8 <HAL_ADC_MspInit+0xb4>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b1c      	ldr	r3, [pc, #112]	@ (80016e8 <HAL_ADC_MspInit+0xb4>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a1b      	ldr	r2, [pc, #108]	@ (80016e8 <HAL_ADC_MspInit+0xb4>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b19      	ldr	r3, [pc, #100]	@ (80016e8 <HAL_ADC_MspInit+0xb4>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <HAL_ADC_MspInit+0xb4>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a14      	ldr	r2, [pc, #80]	@ (80016e8 <HAL_ADC_MspInit+0xb4>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <HAL_ADC_MspInit+0xb4>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016aa:	2303      	movs	r3, #3
 80016ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ae:	2303      	movs	r3, #3
 80016b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	480b      	ldr	r0, [pc, #44]	@ (80016ec <HAL_ADC_MspInit+0xb8>)
 80016be:	f001 f9e3 	bl	8002a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016c2:	2330      	movs	r3, #48	@ 0x30
 80016c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c6:	2303      	movs	r3, #3
 80016c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	4806      	ldr	r0, [pc, #24]	@ (80016f0 <HAL_ADC_MspInit+0xbc>)
 80016d6:	f001 f9d7 	bl	8002a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016da:	bf00      	nop
 80016dc:	3728      	adds	r7, #40	@ 0x28
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40012000 	.word	0x40012000
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020800 	.word	0x40020800
 80016f0:	40020000 	.word	0x40020000

080016f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	@ 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a19      	ldr	r2, [pc, #100]	@ (8001778 <HAL_I2C_MspInit+0x84>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d12c      	bne.n	8001770 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	4b18      	ldr	r3, [pc, #96]	@ (800177c <HAL_I2C_MspInit+0x88>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	4a17      	ldr	r2, [pc, #92]	@ (800177c <HAL_I2C_MspInit+0x88>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	6313      	str	r3, [r2, #48]	@ 0x30
 8001726:	4b15      	ldr	r3, [pc, #84]	@ (800177c <HAL_I2C_MspInit+0x88>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001732:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001736:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001738:	2312      	movs	r3, #18
 800173a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001744:	2304      	movs	r3, #4
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4619      	mov	r1, r3
 800174e:	480c      	ldr	r0, [pc, #48]	@ (8001780 <HAL_I2C_MspInit+0x8c>)
 8001750:	f001 f99a 	bl	8002a88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	4b08      	ldr	r3, [pc, #32]	@ (800177c <HAL_I2C_MspInit+0x88>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175c:	4a07      	ldr	r2, [pc, #28]	@ (800177c <HAL_I2C_MspInit+0x88>)
 800175e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001762:	6413      	str	r3, [r2, #64]	@ 0x40
 8001764:	4b05      	ldr	r3, [pc, #20]	@ (800177c <HAL_I2C_MspInit+0x88>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001768:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800176c:	60fb      	str	r3, [r7, #12]
 800176e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	@ 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40005800 	.word	0x40005800
 800177c:	40023800 	.word	0x40023800
 8001780:	40020400 	.word	0x40020400

08001784 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	@ 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a28      	ldr	r2, [pc, #160]	@ (8001844 <HAL_SPI_MspInit+0xc0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d14a      	bne.n	800183c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	4b27      	ldr	r3, [pc, #156]	@ (8001848 <HAL_SPI_MspInit+0xc4>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ae:	4a26      	ldr	r2, [pc, #152]	@ (8001848 <HAL_SPI_MspInit+0xc4>)
 80017b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b6:	4b24      	ldr	r3, [pc, #144]	@ (8001848 <HAL_SPI_MspInit+0xc4>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b20      	ldr	r3, [pc, #128]	@ (8001848 <HAL_SPI_MspInit+0xc4>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	4a1f      	ldr	r2, [pc, #124]	@ (8001848 <HAL_SPI_MspInit+0xc4>)
 80017cc:	f043 0304 	orr.w	r3, r3, #4
 80017d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001848 <HAL_SPI_MspInit+0xc4>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <HAL_SPI_MspInit+0xc4>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4a18      	ldr	r2, [pc, #96]	@ (8001848 <HAL_SPI_MspInit+0xc4>)
 80017e8:	f043 0302 	orr.w	r3, r3, #2
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ee:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <HAL_SPI_MspInit+0xc4>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017fa:	230c      	movs	r3, #12
 80017fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001806:	2303      	movs	r3, #3
 8001808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800180a:	2305      	movs	r3, #5
 800180c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	480d      	ldr	r0, [pc, #52]	@ (800184c <HAL_SPI_MspInit+0xc8>)
 8001816:	f001 f937 	bl	8002a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800181a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800181e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800182c:	2305      	movs	r3, #5
 800182e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	4806      	ldr	r0, [pc, #24]	@ (8001850 <HAL_SPI_MspInit+0xcc>)
 8001838:	f001 f926 	bl	8002a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800183c:	bf00      	nop
 800183e:	3728      	adds	r7, #40	@ 0x28
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40003800 	.word	0x40003800
 8001848:	40023800 	.word	0x40023800
 800184c:	40020800 	.word	0x40020800
 8001850:	40020400 	.word	0x40020400

08001854 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b094      	sub	sp, #80	@ 0x50
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a8c      	ldr	r2, [pc, #560]	@ (8001aa4 <HAL_TIM_Encoder_MspInit+0x250>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d12d      	bne.n	80018d2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	63bb      	str	r3, [r7, #56]	@ 0x38
 800187a:	4b8b      	ldr	r3, [pc, #556]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 800187c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187e:	4a8a      	ldr	r2, [pc, #552]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6453      	str	r3, [r2, #68]	@ 0x44
 8001886:	4b88      	ldr	r3, [pc, #544]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	637b      	str	r3, [r7, #52]	@ 0x34
 8001896:	4b84      	ldr	r3, [pc, #528]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	4a83      	ldr	r2, [pc, #524]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 800189c:	f043 0310 	orr.w	r3, r3, #16
 80018a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a2:	4b81      	ldr	r3, [pc, #516]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	f003 0310 	and.w	r3, r3, #16
 80018aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80018ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80018ae:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80018b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018b8:	2302      	movs	r3, #2
 80018ba:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018c0:	2301      	movs	r3, #1
 80018c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018c4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80018c8:	4619      	mov	r1, r3
 80018ca:	4878      	ldr	r0, [pc, #480]	@ (8001aac <HAL_TIM_Encoder_MspInit+0x258>)
 80018cc:	f001 f8dc 	bl	8002a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80018d0:	e12b      	b.n	8001b2a <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018da:	d14b      	bne.n	8001974 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	633b      	str	r3, [r7, #48]	@ 0x30
 80018e0:	4b71      	ldr	r3, [pc, #452]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e4:	4a70      	ldr	r2, [pc, #448]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ec:	4b6e      	ldr	r3, [pc, #440]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80018f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f8:	2300      	movs	r3, #0
 80018fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018fc:	4b6a      	ldr	r3, [pc, #424]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001900:	4a69      	ldr	r2, [pc, #420]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6313      	str	r3, [r2, #48]	@ 0x30
 8001908:	4b67      	ldr	r3, [pc, #412]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 800190a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001914:	2300      	movs	r3, #0
 8001916:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001918:	4b63      	ldr	r3, [pc, #396]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800191c:	4a62      	ldr	r2, [pc, #392]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 800191e:	f043 0302 	orr.w	r3, r3, #2
 8001922:	6313      	str	r3, [r2, #48]	@ 0x30
 8001924:	4b60      	ldr	r3, [pc, #384]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800192e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = EN_X_A_Pin;
 8001930:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001934:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001942:	2301      	movs	r3, #1
 8001944:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(EN_X_A_GPIO_Port, &GPIO_InitStruct);
 8001946:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800194a:	4619      	mov	r1, r3
 800194c:	4858      	ldr	r0, [pc, #352]	@ (8001ab0 <HAL_TIM_Encoder_MspInit+0x25c>)
 800194e:	f001 f89b 	bl	8002a88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EN_X_B_Pin;
 8001952:	2308      	movs	r3, #8
 8001954:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2300      	movs	r3, #0
 8001960:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001962:	2301      	movs	r3, #1
 8001964:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(EN_X_B_GPIO_Port, &GPIO_InitStruct);
 8001966:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800196a:	4619      	mov	r1, r3
 800196c:	4851      	ldr	r0, [pc, #324]	@ (8001ab4 <HAL_TIM_Encoder_MspInit+0x260>)
 800196e:	f001 f88b 	bl	8002a88 <HAL_GPIO_Init>
}
 8001972:	e0da      	b.n	8001b2a <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM3)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a4f      	ldr	r2, [pc, #316]	@ (8001ab8 <HAL_TIM_Encoder_MspInit+0x264>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d12c      	bne.n	80019d8 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
 8001982:	4b49      	ldr	r3, [pc, #292]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	4a48      	ldr	r2, [pc, #288]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	6413      	str	r3, [r2, #64]	@ 0x40
 800198e:	4b46      	ldr	r3, [pc, #280]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	627b      	str	r3, [r7, #36]	@ 0x24
 8001998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
 800199e:	4b42      	ldr	r3, [pc, #264]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	4a41      	ldr	r2, [pc, #260]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019aa:	4b3f      	ldr	r3, [pc, #252]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	623b      	str	r3, [r7, #32]
 80019b4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = EN_Y_A_Pin|EN_Y_B_Pin;
 80019b6:	2330      	movs	r3, #48	@ 0x30
 80019b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019be:	2302      	movs	r3, #2
 80019c0:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019c6:	2302      	movs	r3, #2
 80019c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ca:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80019ce:	4619      	mov	r1, r3
 80019d0:	4838      	ldr	r0, [pc, #224]	@ (8001ab4 <HAL_TIM_Encoder_MspInit+0x260>)
 80019d2:	f001 f859 	bl	8002a88 <HAL_GPIO_Init>
}
 80019d6:	e0a8      	b.n	8001b2a <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM4)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a37      	ldr	r2, [pc, #220]	@ (8001abc <HAL_TIM_Encoder_MspInit+0x268>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d12d      	bne.n	8001a3e <HAL_TIM_Encoder_MspInit+0x1ea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
 80019e6:	4b30      	ldr	r3, [pc, #192]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	4a2f      	ldr	r2, [pc, #188]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019ec:	f043 0304 	orr.w	r3, r3, #4
 80019f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019f2:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	61fb      	str	r3, [r7, #28]
 80019fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
 8001a02:	4b29      	ldr	r3, [pc, #164]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	4a28      	ldr	r2, [pc, #160]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a08:	f043 0308 	orr.w	r3, r3, #8
 8001a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0e:	4b26      	ldr	r3, [pc, #152]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	61bb      	str	r3, [r7, #24]
 8001a18:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a1a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a30:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001a34:	4619      	mov	r1, r3
 8001a36:	4822      	ldr	r0, [pc, #136]	@ (8001ac0 <HAL_TIM_Encoder_MspInit+0x26c>)
 8001a38:	f001 f826 	bl	8002a88 <HAL_GPIO_Init>
}
 8001a3c:	e075      	b.n	8001b2a <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM5)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a20      	ldr	r2, [pc, #128]	@ (8001ac4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d13f      	bne.n	8001ac8 <HAL_TIM_Encoder_MspInit+0x274>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	4b16      	ldr	r3, [pc, #88]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a50:	4a15      	ldr	r2, [pc, #84]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a52:	f043 0308 	orr.w	r3, r3, #8
 8001a56:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a58:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6c:	4a0e      	ldr	r2, [pc, #56]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a6e:	f043 0301 	orr.w	r3, r3, #1
 8001a72:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a74:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a80:	2303      	movs	r3, #3
 8001a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a90:	2302      	movs	r3, #2
 8001a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4805      	ldr	r0, [pc, #20]	@ (8001ab0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001a9c:	f000 fff4 	bl	8002a88 <HAL_GPIO_Init>
}
 8001aa0:	e043      	b.n	8001b2a <HAL_TIM_Encoder_MspInit+0x2d6>
 8001aa2:	bf00      	nop
 8001aa4:	40010000 	.word	0x40010000
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	40020400 	.word	0x40020400
 8001ab8:	40000400 	.word	0x40000400
 8001abc:	40000800 	.word	0x40000800
 8001ac0:	40020c00 	.word	0x40020c00
 8001ac4:	40000c00 	.word	0x40000c00
  else if(htim_encoder->Instance==TIM8)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a19      	ldr	r2, [pc, #100]	@ (8001b34 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d12b      	bne.n	8001b2a <HAL_TIM_Encoder_MspInit+0x2d6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ada:	4a17      	ldr	r2, [pc, #92]	@ (8001b38 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001adc:	f043 0302 	orr.w	r3, r3, #2
 8001ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	4a10      	ldr	r2, [pc, #64]	@ (8001b38 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b0a:	23c0      	movs	r3, #192	@ 0xc0
 8001b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b12:	2302      	movs	r3, #2
 8001b14:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	@ (8001b3c <HAL_TIM_Encoder_MspInit+0x2e8>)
 8001b26:	f000 ffaf 	bl	8002a88 <HAL_GPIO_Init>
}
 8001b2a:	bf00      	nop
 8001b2c:	3750      	adds	r7, #80	@ 0x50
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40010400 	.word	0x40010400
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020800 	.word	0x40020800

08001b40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a15      	ldr	r2, [pc, #84]	@ (8001ba4 <HAL_TIM_PWM_MspInit+0x64>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d10e      	bne.n	8001b70 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b14      	ldr	r3, [pc, #80]	@ (8001ba8 <HAL_TIM_PWM_MspInit+0x68>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5a:	4a13      	ldr	r2, [pc, #76]	@ (8001ba8 <HAL_TIM_PWM_MspInit+0x68>)
 8001b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b62:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <HAL_TIM_PWM_MspInit+0x68>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001b6e:	e012      	b.n	8001b96 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0d      	ldr	r2, [pc, #52]	@ (8001bac <HAL_TIM_PWM_MspInit+0x6c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d10d      	bne.n	8001b96 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba8 <HAL_TIM_PWM_MspInit+0x68>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	4a09      	ldr	r2, [pc, #36]	@ (8001ba8 <HAL_TIM_PWM_MspInit+0x68>)
 8001b84:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ba8 <HAL_TIM_PWM_MspInit+0x68>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b92:	60bb      	str	r3, [r7, #8]
 8001b94:	68bb      	ldr	r3, [r7, #8]
}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40014000 	.word	0x40014000
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40001800 	.word	0x40001800

08001bb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a29      	ldr	r2, [pc, #164]	@ (8001c64 <HAL_TIM_Base_MspInit+0xb4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d10e      	bne.n	8001be0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	4b28      	ldr	r3, [pc, #160]	@ (8001c68 <HAL_TIM_Base_MspInit+0xb8>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bca:	4a27      	ldr	r2, [pc, #156]	@ (8001c68 <HAL_TIM_Base_MspInit+0xb8>)
 8001bcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bd2:	4b25      	ldr	r3, [pc, #148]	@ (8001c68 <HAL_TIM_Base_MspInit+0xb8>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001bde:	e03a      	b.n	8001c56 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a21      	ldr	r2, [pc, #132]	@ (8001c6c <HAL_TIM_Base_MspInit+0xbc>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d10e      	bne.n	8001c08 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	4b1e      	ldr	r3, [pc, #120]	@ (8001c68 <HAL_TIM_Base_MspInit+0xb8>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8001c68 <HAL_TIM_Base_MspInit+0xb8>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8001c68 <HAL_TIM_Base_MspInit+0xb8>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
}
 8001c06:	e026      	b.n	8001c56 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM13)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a18      	ldr	r2, [pc, #96]	@ (8001c70 <HAL_TIM_Base_MspInit+0xc0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d10e      	bne.n	8001c30 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b14      	ldr	r3, [pc, #80]	@ (8001c68 <HAL_TIM_Base_MspInit+0xb8>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	4a13      	ldr	r2, [pc, #76]	@ (8001c68 <HAL_TIM_Base_MspInit+0xb8>)
 8001c1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c22:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <HAL_TIM_Base_MspInit+0xb8>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
}
 8001c2e:	e012      	b.n	8001c56 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM14)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0f      	ldr	r2, [pc, #60]	@ (8001c74 <HAL_TIM_Base_MspInit+0xc4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d10d      	bne.n	8001c56 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <HAL_TIM_Base_MspInit+0xb8>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	4a09      	ldr	r2, [pc, #36]	@ (8001c68 <HAL_TIM_Base_MspInit+0xb8>)
 8001c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c4a:	4b07      	ldr	r3, [pc, #28]	@ (8001c68 <HAL_TIM_Base_MspInit+0xb8>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
}
 8001c56:	bf00      	nop
 8001c58:	371c      	adds	r7, #28
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40014400 	.word	0x40014400
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40014800 	.word	0x40014800
 8001c70:	40001c00 	.word	0x40001c00
 8001c74:	40002000 	.word	0x40002000

08001c78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08e      	sub	sp, #56	@ 0x38
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a6d      	ldr	r2, [pc, #436]	@ (8001e4c <HAL_TIM_MspPostInit+0x1d4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d11e      	bne.n	8001cd8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	623b      	str	r3, [r7, #32]
 8001c9e:	4b6c      	ldr	r3, [pc, #432]	@ (8001e50 <HAL_TIM_MspPostInit+0x1d8>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	4a6b      	ldr	r2, [pc, #428]	@ (8001e50 <HAL_TIM_MspPostInit+0x1d8>)
 8001ca4:	f043 0310 	orr.w	r3, r3, #16
 8001ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001caa:	4b69      	ldr	r3, [pc, #420]	@ (8001e50 <HAL_TIM_MspPostInit+0x1d8>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	623b      	str	r3, [r7, #32]
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = EXTRA1_PWM_L_Pin|SERVO_1_Pin;
 8001cb6:	2360      	movs	r3, #96	@ 0x60
 8001cb8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4860      	ldr	r0, [pc, #384]	@ (8001e54 <HAL_TIM_MspPostInit+0x1dc>)
 8001cd2:	f000 fed9 	bl	8002a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001cd6:	e0b5      	b.n	8001e44 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM10)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a5e      	ldr	r2, [pc, #376]	@ (8001e58 <HAL_TIM_MspPostInit+0x1e0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d11f      	bne.n	8001d22 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	4b5a      	ldr	r3, [pc, #360]	@ (8001e50 <HAL_TIM_MspPostInit+0x1d8>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	4a59      	ldr	r2, [pc, #356]	@ (8001e50 <HAL_TIM_MspPostInit+0x1d8>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf2:	4b57      	ldr	r3, [pc, #348]	@ (8001e50 <HAL_TIM_MspPostInit+0x1d8>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	61fb      	str	r3, [r7, #28]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = EXTRA2_PWM_L_Pin;
 8001cfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001d10:	2303      	movs	r3, #3
 8001d12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(EXTRA2_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001d14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4850      	ldr	r0, [pc, #320]	@ (8001e5c <HAL_TIM_MspPostInit+0x1e4>)
 8001d1c:	f000 feb4 	bl	8002a88 <HAL_GPIO_Init>
}
 8001d20:	e090      	b.n	8001e44 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM11)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a4e      	ldr	r2, [pc, #312]	@ (8001e60 <HAL_TIM_MspPostInit+0x1e8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d11f      	bne.n	8001d6c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]
 8001d30:	4b47      	ldr	r3, [pc, #284]	@ (8001e50 <HAL_TIM_MspPostInit+0x1d8>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d34:	4a46      	ldr	r2, [pc, #280]	@ (8001e50 <HAL_TIM_MspPostInit+0x1d8>)
 8001d36:	f043 0302 	orr.w	r3, r3, #2
 8001d3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3c:	4b44      	ldr	r3, [pc, #272]	@ (8001e50 <HAL_TIM_MspPostInit+0x1d8>)
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RF_PWM_L_Pin;
 8001d48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d56:	2300      	movs	r3, #0
 8001d58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RF_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001d5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d62:	4619      	mov	r1, r3
 8001d64:	483d      	ldr	r0, [pc, #244]	@ (8001e5c <HAL_TIM_MspPostInit+0x1e4>)
 8001d66:	f000 fe8f 	bl	8002a88 <HAL_GPIO_Init>
}
 8001d6a:	e06b      	b.n	8001e44 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM12)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a3c      	ldr	r2, [pc, #240]	@ (8001e64 <HAL_TIM_MspPostInit+0x1ec>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d11f      	bne.n	8001db6 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	4b35      	ldr	r3, [pc, #212]	@ (8001e50 <HAL_TIM_MspPostInit+0x1d8>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	4a34      	ldr	r2, [pc, #208]	@ (8001e50 <HAL_TIM_MspPostInit+0x1d8>)
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d86:	4b32      	ldr	r3, [pc, #200]	@ (8001e50 <HAL_TIM_MspPostInit+0x1d8>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LB_PWM_L_Pin|RB_PWM_L_Pin;
 8001d92:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001d96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2300      	movs	r3, #0
 8001da2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001da4:	2309      	movs	r3, #9
 8001da6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dac:	4619      	mov	r1, r3
 8001dae:	482b      	ldr	r0, [pc, #172]	@ (8001e5c <HAL_TIM_MspPostInit+0x1e4>)
 8001db0:	f000 fe6a 	bl	8002a88 <HAL_GPIO_Init>
}
 8001db4:	e046      	b.n	8001e44 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM13)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a2b      	ldr	r2, [pc, #172]	@ (8001e68 <HAL_TIM_MspPostInit+0x1f0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d11e      	bne.n	8001dfe <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	4b22      	ldr	r3, [pc, #136]	@ (8001e50 <HAL_TIM_MspPostInit+0x1d8>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc8:	4a21      	ldr	r2, [pc, #132]	@ (8001e50 <HAL_TIM_MspPostInit+0x1d8>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e50 <HAL_TIM_MspPostInit+0x1d8>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO_2_Pin;
 8001ddc:	2340      	movs	r3, #64	@ 0x40
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001dec:	2309      	movs	r3, #9
 8001dee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SERVO_2_GPIO_Port, &GPIO_InitStruct);
 8001df0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001df4:	4619      	mov	r1, r3
 8001df6:	481d      	ldr	r0, [pc, #116]	@ (8001e6c <HAL_TIM_MspPostInit+0x1f4>)
 8001df8:	f000 fe46 	bl	8002a88 <HAL_GPIO_Init>
}
 8001dfc:	e022      	b.n	8001e44 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM14)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a1b      	ldr	r2, [pc, #108]	@ (8001e70 <HAL_TIM_MspPostInit+0x1f8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d11d      	bne.n	8001e44 <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	4b10      	ldr	r3, [pc, #64]	@ (8001e50 <HAL_TIM_MspPostInit+0x1d8>)
 8001e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e10:	4a0f      	ldr	r2, [pc, #60]	@ (8001e50 <HAL_TIM_MspPostInit+0x1d8>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e18:	4b0d      	ldr	r3, [pc, #52]	@ (8001e50 <HAL_TIM_MspPostInit+0x1d8>)
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LF_PWM_L_Pin;
 8001e24:	2380      	movs	r3, #128	@ 0x80
 8001e26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	2300      	movs	r3, #0
 8001e32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001e34:	2309      	movs	r3, #9
 8001e36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LF_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001e38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	480b      	ldr	r0, [pc, #44]	@ (8001e6c <HAL_TIM_MspPostInit+0x1f4>)
 8001e40:	f000 fe22 	bl	8002a88 <HAL_GPIO_Init>
}
 8001e44:	bf00      	nop
 8001e46:	3738      	adds	r7, #56	@ 0x38
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40014000 	.word	0x40014000
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40014400 	.word	0x40014400
 8001e5c:	40020400 	.word	0x40020400
 8001e60:	40014800 	.word	0x40014800
 8001e64:	40001800 	.word	0x40001800
 8001e68:	40001c00 	.word	0x40001c00
 8001e6c:	40020000 	.word	0x40020000
 8001e70:	40002000 	.word	0x40002000

08001e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08c      	sub	sp, #48	@ 0x30
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a36      	ldr	r2, [pc, #216]	@ (8001f6c <HAL_UART_MspInit+0xf8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d12d      	bne.n	8001ef2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	61bb      	str	r3, [r7, #24]
 8001e9a:	4b35      	ldr	r3, [pc, #212]	@ (8001f70 <HAL_UART_MspInit+0xfc>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	4a34      	ldr	r2, [pc, #208]	@ (8001f70 <HAL_UART_MspInit+0xfc>)
 8001ea0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ea4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ea6:	4b32      	ldr	r3, [pc, #200]	@ (8001f70 <HAL_UART_MspInit+0xfc>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001eae:	61bb      	str	r3, [r7, #24]
 8001eb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	4b2e      	ldr	r3, [pc, #184]	@ (8001f70 <HAL_UART_MspInit+0xfc>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	4a2d      	ldr	r2, [pc, #180]	@ (8001f70 <HAL_UART_MspInit+0xfc>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec2:	4b2b      	ldr	r3, [pc, #172]	@ (8001f70 <HAL_UART_MspInit+0xfc>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001ece:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001edc:	2303      	movs	r3, #3
 8001ede:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4822      	ldr	r0, [pc, #136]	@ (8001f74 <HAL_UART_MspInit+0x100>)
 8001eec:	f000 fdcc 	bl	8002a88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ef0:	e038      	b.n	8001f64 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a20      	ldr	r2, [pc, #128]	@ (8001f78 <HAL_UART_MspInit+0x104>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d133      	bne.n	8001f64 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]
 8001f00:	4b1b      	ldr	r3, [pc, #108]	@ (8001f70 <HAL_UART_MspInit+0xfc>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f04:	4a1a      	ldr	r2, [pc, #104]	@ (8001f70 <HAL_UART_MspInit+0xfc>)
 8001f06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f0c:	4b18      	ldr	r3, [pc, #96]	@ (8001f70 <HAL_UART_MspInit+0xfc>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f14:	613b      	str	r3, [r7, #16]
 8001f16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	4b14      	ldr	r3, [pc, #80]	@ (8001f70 <HAL_UART_MspInit+0xfc>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f20:	4a13      	ldr	r2, [pc, #76]	@ (8001f70 <HAL_UART_MspInit+0xfc>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f28:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <HAL_UART_MspInit+0xfc>)
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f34:	230c      	movs	r3, #12
 8001f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f38:	2302      	movs	r3, #2
 8001f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f40:	2303      	movs	r3, #3
 8001f42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f44:	2307      	movs	r3, #7
 8001f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	480b      	ldr	r0, [pc, #44]	@ (8001f7c <HAL_UART_MspInit+0x108>)
 8001f50:	f000 fd9a 	bl	8002a88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f54:	2200      	movs	r2, #0
 8001f56:	2100      	movs	r1, #0
 8001f58:	2026      	movs	r0, #38	@ 0x26
 8001f5a:	f000 fcbe 	bl	80028da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f5e:	2026      	movs	r0, #38	@ 0x26
 8001f60:	f000 fcd7 	bl	8002912 <HAL_NVIC_EnableIRQ>
}
 8001f64:	bf00      	nop
 8001f66:	3730      	adds	r7, #48	@ 0x30
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40004c00 	.word	0x40004c00
 8001f70:	40023800 	.word	0x40023800
 8001f74:	40020800 	.word	0x40020800
 8001f78:	40004400 	.word	0x40004400
 8001f7c:	40020000 	.word	0x40020000

08001f80 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a12      	ldr	r2, [pc, #72]	@ (8001fd8 <HAL_UART_MspDeInit+0x58>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d10b      	bne.n	8001faa <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8001f92:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <HAL_UART_MspDeInit+0x5c>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	4a11      	ldr	r2, [pc, #68]	@ (8001fdc <HAL_UART_MspDeInit+0x5c>)
 8001f98:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001f9c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 8001f9e:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8001fa2:	480f      	ldr	r0, [pc, #60]	@ (8001fe0 <HAL_UART_MspDeInit+0x60>)
 8001fa4:	f000 ff0c 	bl	8002dc0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8001fa8:	e011      	b.n	8001fce <HAL_UART_MspDeInit+0x4e>
  else if(huart->Instance==USART2)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe4 <HAL_UART_MspDeInit+0x64>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d10c      	bne.n	8001fce <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001fb4:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <HAL_UART_MspDeInit+0x5c>)
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb8:	4a08      	ldr	r2, [pc, #32]	@ (8001fdc <HAL_UART_MspDeInit+0x5c>)
 8001fba:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001fbe:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001fc0:	210c      	movs	r1, #12
 8001fc2:	4809      	ldr	r0, [pc, #36]	@ (8001fe8 <HAL_UART_MspDeInit+0x68>)
 8001fc4:	f000 fefc 	bl	8002dc0 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001fc8:	2026      	movs	r0, #38	@ 0x26
 8001fca:	f000 fcb0 	bl	800292e <HAL_NVIC_DisableIRQ>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40004c00 	.word	0x40004c00
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40020800 	.word	0x40020800
 8001fe4:	40004400 	.word	0x40004400
 8001fe8:	40020000 	.word	0x40020000

08001fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <NMI_Handler+0x4>

08001ff4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <HardFault_Handler+0x4>

08001ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <MemManage_Handler+0x4>

08002004 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <BusFault_Handler+0x4>

0800200c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <UsageFault_Handler+0x4>

08002014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002042:	f000 f8a5 	bl	8002190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002050:	4802      	ldr	r0, [pc, #8]	@ (800205c <USART2_IRQHandler+0x10>)
 8002052:	f003 ff85 	bl	8005f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	200005c8 	.word	0x200005c8

08002060 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002064:	4802      	ldr	r0, [pc, #8]	@ (8002070 <OTG_FS_IRQHandler+0x10>)
 8002066:	f001 fa49 	bl	80034fc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20001d1c 	.word	0x20001d1c

08002074 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002078:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <SystemInit+0x20>)
 800207a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800207e:	4a05      	ldr	r2, [pc, #20]	@ (8002094 <SystemInit+0x20>)
 8002080:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002084:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <Reset_Handler>:
 8002098:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020d0 <LoopFillZerobss+0xe>
 800209c:	f7ff ffea 	bl	8002074 <SystemInit>
 80020a0:	480c      	ldr	r0, [pc, #48]	@ (80020d4 <LoopFillZerobss+0x12>)
 80020a2:	490d      	ldr	r1, [pc, #52]	@ (80020d8 <LoopFillZerobss+0x16>)
 80020a4:	4a0d      	ldr	r2, [pc, #52]	@ (80020dc <LoopFillZerobss+0x1a>)
 80020a6:	2300      	movs	r3, #0
 80020a8:	e002      	b.n	80020b0 <LoopCopyDataInit>

080020aa <CopyDataInit>:
 80020aa:	58d4      	ldr	r4, [r2, r3]
 80020ac:	50c4      	str	r4, [r0, r3]
 80020ae:	3304      	adds	r3, #4

080020b0 <LoopCopyDataInit>:
 80020b0:	18c4      	adds	r4, r0, r3
 80020b2:	428c      	cmp	r4, r1
 80020b4:	d3f9      	bcc.n	80020aa <CopyDataInit>
 80020b6:	4a0a      	ldr	r2, [pc, #40]	@ (80020e0 <LoopFillZerobss+0x1e>)
 80020b8:	4c0a      	ldr	r4, [pc, #40]	@ (80020e4 <LoopFillZerobss+0x22>)
 80020ba:	2300      	movs	r3, #0
 80020bc:	e001      	b.n	80020c2 <LoopFillZerobss>

080020be <FillZerobss>:
 80020be:	6013      	str	r3, [r2, #0]
 80020c0:	3204      	adds	r2, #4

080020c2 <LoopFillZerobss>:
 80020c2:	42a2      	cmp	r2, r4
 80020c4:	d3fb      	bcc.n	80020be <FillZerobss>
 80020c6:	f00a f9f7 	bl	800c4b8 <__libc_init_array>
 80020ca:	f7fe f9f5 	bl	80004b8 <main>
 80020ce:	4770      	bx	lr
 80020d0:	20020000 	.word	0x20020000
 80020d4:	20000000 	.word	0x20000000
 80020d8:	20000110 	.word	0x20000110
 80020dc:	0800c5dc 	.word	0x0800c5dc
 80020e0:	20000110 	.word	0x20000110
 80020e4:	20002420 	.word	0x20002420

080020e8 <ADC_IRQHandler>:
 80020e8:	e7fe      	b.n	80020e8 <ADC_IRQHandler>
	...

080020ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020f0:	4b0e      	ldr	r3, [pc, #56]	@ (800212c <HAL_Init+0x40>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a0d      	ldr	r2, [pc, #52]	@ (800212c <HAL_Init+0x40>)
 80020f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020fc:	4b0b      	ldr	r3, [pc, #44]	@ (800212c <HAL_Init+0x40>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0a      	ldr	r2, [pc, #40]	@ (800212c <HAL_Init+0x40>)
 8002102:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002106:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002108:	4b08      	ldr	r3, [pc, #32]	@ (800212c <HAL_Init+0x40>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a07      	ldr	r2, [pc, #28]	@ (800212c <HAL_Init+0x40>)
 800210e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002112:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002114:	2003      	movs	r0, #3
 8002116:	f000 fbd5 	bl	80028c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800211a:	200f      	movs	r0, #15
 800211c:	f000 f808 	bl	8002130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002120:	f7ff fa60 	bl	80015e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40023c00 	.word	0x40023c00

08002130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002138:	4b12      	ldr	r3, [pc, #72]	@ (8002184 <HAL_InitTick+0x54>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b12      	ldr	r3, [pc, #72]	@ (8002188 <HAL_InitTick+0x58>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	4619      	mov	r1, r3
 8002142:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002146:	fbb3 f3f1 	udiv	r3, r3, r1
 800214a:	fbb2 f3f3 	udiv	r3, r2, r3
 800214e:	4618      	mov	r0, r3
 8002150:	f000 fbfb 	bl	800294a <HAL_SYSTICK_Config>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e00e      	b.n	800217c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b0f      	cmp	r3, #15
 8002162:	d80a      	bhi.n	800217a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002164:	2200      	movs	r2, #0
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f000 fbb5 	bl	80028da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002170:	4a06      	ldr	r2, [pc, #24]	@ (800218c <HAL_InitTick+0x5c>)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	e000      	b.n	800217c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	2000000c 	.word	0x2000000c
 8002188:	20000014 	.word	0x20000014
 800218c:	20000010 	.word	0x20000010

08002190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002194:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <HAL_IncTick+0x20>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	461a      	mov	r2, r3
 800219a:	4b06      	ldr	r3, [pc, #24]	@ (80021b4 <HAL_IncTick+0x24>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	4a04      	ldr	r2, [pc, #16]	@ (80021b4 <HAL_IncTick+0x24>)
 80021a2:	6013      	str	r3, [r2, #0]
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000014 	.word	0x20000014
 80021b4:	20000648 	.word	0x20000648

080021b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return uwTick;
 80021bc:	4b03      	ldr	r3, [pc, #12]	@ (80021cc <HAL_GetTick+0x14>)
 80021be:	681b      	ldr	r3, [r3, #0]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	20000648 	.word	0x20000648

080021d0 <HAL_Delay>:
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)

{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d8:	f7ff ffee 	bl	80021b8 <HAL_GetTick>
 80021dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d005      	beq.n	80021f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002214 <HAL_Delay+0x44>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	4413      	add	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021f6:	bf00      	nop
 80021f8:	f7ff ffde 	bl	80021b8 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	429a      	cmp	r2, r3
 8002206:	d8f7      	bhi.n	80021f8 <HAL_Delay+0x28>
  {
  }
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000014 	.word	0x20000014

08002218 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e033      	b.n	8002296 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff f9fc 	bl	8001634 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	2b00      	cmp	r3, #0
 8002254:	d118      	bne.n	8002288 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800225e:	f023 0302 	bic.w	r3, r3, #2
 8002262:	f043 0202 	orr.w	r2, r3, #2
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 f93a 	bl	80024e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	f023 0303 	bic.w	r3, r3, #3
 800227e:	f043 0201 	orr.w	r2, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	641a      	str	r2, [r3, #64]	@ 0x40
 8002286:	e001      	b.n	800228c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002294:	7bfb      	ldrb	r3, [r7, #15]
}
 8002296:	4618      	mov	r0, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d101      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x1c>
 80022b8:	2302      	movs	r3, #2
 80022ba:	e105      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x228>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b09      	cmp	r3, #9
 80022ca:	d925      	bls.n	8002318 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68d9      	ldr	r1, [r3, #12]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	3b1e      	subs	r3, #30
 80022e2:	2207      	movs	r2, #7
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43da      	mvns	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	400a      	ands	r2, r1
 80022f0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68d9      	ldr	r1, [r3, #12]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	b29b      	uxth	r3, r3
 8002302:	4618      	mov	r0, r3
 8002304:	4603      	mov	r3, r0
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	4403      	add	r3, r0
 800230a:	3b1e      	subs	r3, #30
 800230c:	409a      	lsls	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	e022      	b.n	800235e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6919      	ldr	r1, [r3, #16]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	b29b      	uxth	r3, r3
 8002324:	461a      	mov	r2, r3
 8002326:	4613      	mov	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4413      	add	r3, r2
 800232c:	2207      	movs	r2, #7
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43da      	mvns	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	400a      	ands	r2, r1
 800233a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6919      	ldr	r1, [r3, #16]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	b29b      	uxth	r3, r3
 800234c:	4618      	mov	r0, r3
 800234e:	4603      	mov	r3, r0
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4403      	add	r3, r0
 8002354:	409a      	lsls	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b06      	cmp	r3, #6
 8002364:	d824      	bhi.n	80023b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	3b05      	subs	r3, #5
 8002378:	221f      	movs	r2, #31
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43da      	mvns	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	400a      	ands	r2, r1
 8002386:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	b29b      	uxth	r3, r3
 8002394:	4618      	mov	r0, r3
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	4413      	add	r3, r2
 80023a0:	3b05      	subs	r3, #5
 80023a2:	fa00 f203 	lsl.w	r2, r0, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80023ae:	e04c      	b.n	800244a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b0c      	cmp	r3, #12
 80023b6:	d824      	bhi.n	8002402 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	3b23      	subs	r3, #35	@ 0x23
 80023ca:	221f      	movs	r2, #31
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43da      	mvns	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	400a      	ands	r2, r1
 80023d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	4618      	mov	r0, r3
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	3b23      	subs	r3, #35	@ 0x23
 80023f4:	fa00 f203 	lsl.w	r2, r0, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002400:	e023      	b.n	800244a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	3b41      	subs	r3, #65	@ 0x41
 8002414:	221f      	movs	r2, #31
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43da      	mvns	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	400a      	ands	r2, r1
 8002422:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	4618      	mov	r0, r3
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	4413      	add	r3, r2
 800243c:	3b41      	subs	r3, #65	@ 0x41
 800243e:	fa00 f203 	lsl.w	r2, r0, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800244a:	4b22      	ldr	r3, [pc, #136]	@ (80024d4 <HAL_ADC_ConfigChannel+0x234>)
 800244c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a21      	ldr	r2, [pc, #132]	@ (80024d8 <HAL_ADC_ConfigChannel+0x238>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d109      	bne.n	800246c <HAL_ADC_ConfigChannel+0x1cc>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b12      	cmp	r3, #18
 800245e:	d105      	bne.n	800246c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a19      	ldr	r2, [pc, #100]	@ (80024d8 <HAL_ADC_ConfigChannel+0x238>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d123      	bne.n	80024be <HAL_ADC_ConfigChannel+0x21e>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b10      	cmp	r3, #16
 800247c:	d003      	beq.n	8002486 <HAL_ADC_ConfigChannel+0x1e6>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b11      	cmp	r3, #17
 8002484:	d11b      	bne.n	80024be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b10      	cmp	r3, #16
 8002498:	d111      	bne.n	80024be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800249a:	4b10      	ldr	r3, [pc, #64]	@ (80024dc <HAL_ADC_ConfigChannel+0x23c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a10      	ldr	r2, [pc, #64]	@ (80024e0 <HAL_ADC_ConfigChannel+0x240>)
 80024a0:	fba2 2303 	umull	r2, r3, r2, r3
 80024a4:	0c9a      	lsrs	r2, r3, #18
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024b0:	e002      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	3b01      	subs	r3, #1
 80024b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f9      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	40012300 	.word	0x40012300
 80024d8:	40012000 	.word	0x40012000
 80024dc:	2000000c 	.word	0x2000000c
 80024e0:	431bde83 	.word	0x431bde83

080024e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ec:	4b79      	ldr	r3, [pc, #484]	@ (80026d4 <ADC_Init+0x1f0>)
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	431a      	orrs	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002518:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	021a      	lsls	r2, r3, #8
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800253c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800255e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6899      	ldr	r1, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002576:	4a58      	ldr	r2, [pc, #352]	@ (80026d8 <ADC_Init+0x1f4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d022      	beq.n	80025c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800258a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6899      	ldr	r1, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6899      	ldr	r1, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	e00f      	b.n	80025e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0202 	bic.w	r2, r2, #2
 80025f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6899      	ldr	r1, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	7e1b      	ldrb	r3, [r3, #24]
 80025fc:	005a      	lsls	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01b      	beq.n	8002648 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800261e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800262e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6859      	ldr	r1, [r3, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263a:	3b01      	subs	r3, #1
 800263c:	035a      	lsls	r2, r3, #13
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	e007      	b.n	8002658 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002656:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002666:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	3b01      	subs	r3, #1
 8002674:	051a      	lsls	r2, r3, #20
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800268c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6899      	ldr	r1, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800269a:	025a      	lsls	r2, r3, #9
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6899      	ldr	r1, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	029a      	lsls	r2, r3, #10
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	609a      	str	r2, [r3, #8]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	40012300 	.word	0x40012300
 80026d8:	0f000001 	.word	0x0f000001

080026dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002720 <__NVIC_SetPriorityGrouping+0x44>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026f8:	4013      	ands	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002704:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800270c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800270e:	4a04      	ldr	r2, [pc, #16]	@ (8002720 <__NVIC_SetPriorityGrouping+0x44>)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	60d3      	str	r3, [r2, #12]
}
 8002714:	bf00      	nop
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002728:	4b04      	ldr	r3, [pc, #16]	@ (800273c <__NVIC_GetPriorityGrouping+0x18>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	f003 0307 	and.w	r3, r3, #7
}
 8002732:	4618      	mov	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	2b00      	cmp	r3, #0
 8002750:	db0b      	blt.n	800276a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	f003 021f 	and.w	r2, r3, #31
 8002758:	4907      	ldr	r1, [pc, #28]	@ (8002778 <__NVIC_EnableIRQ+0x38>)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	2001      	movs	r0, #1
 8002762:	fa00 f202 	lsl.w	r2, r0, r2
 8002766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000e100 	.word	0xe000e100

0800277c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	2b00      	cmp	r3, #0
 800278c:	db12      	blt.n	80027b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	490a      	ldr	r1, [pc, #40]	@ (80027c0 <__NVIC_DisableIRQ+0x44>)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	2001      	movs	r0, #1
 800279e:	fa00 f202 	lsl.w	r2, r0, r2
 80027a2:	3320      	adds	r3, #32
 80027a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80027a8:	f3bf 8f4f 	dsb	sy
}
 80027ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027ae:	f3bf 8f6f 	isb	sy
}
 80027b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000e100 	.word	0xe000e100

080027c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	6039      	str	r1, [r7, #0]
 80027ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	db0a      	blt.n	80027ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	490c      	ldr	r1, [pc, #48]	@ (8002810 <__NVIC_SetPriority+0x4c>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	0112      	lsls	r2, r2, #4
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	440b      	add	r3, r1
 80027e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ec:	e00a      	b.n	8002804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4908      	ldr	r1, [pc, #32]	@ (8002814 <__NVIC_SetPriority+0x50>)
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	3b04      	subs	r3, #4
 80027fc:	0112      	lsls	r2, r2, #4
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	440b      	add	r3, r1
 8002802:	761a      	strb	r2, [r3, #24]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000e100 	.word	0xe000e100
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	@ 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f1c3 0307 	rsb	r3, r3, #7
 8002832:	2b04      	cmp	r3, #4
 8002834:	bf28      	it	cs
 8002836:	2304      	movcs	r3, #4
 8002838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3304      	adds	r3, #4
 800283e:	2b06      	cmp	r3, #6
 8002840:	d902      	bls.n	8002848 <NVIC_EncodePriority+0x30>
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3b03      	subs	r3, #3
 8002846:	e000      	b.n	800284a <NVIC_EncodePriority+0x32>
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284c:	f04f 32ff 	mov.w	r2, #4294967295
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43da      	mvns	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	401a      	ands	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002860:	f04f 31ff 	mov.w	r1, #4294967295
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa01 f303 	lsl.w	r3, r1, r3
 800286a:	43d9      	mvns	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002870:	4313      	orrs	r3, r2
         );
}
 8002872:	4618      	mov	r0, r3
 8002874:	3724      	adds	r7, #36	@ 0x24
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002890:	d301      	bcc.n	8002896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002892:	2301      	movs	r3, #1
 8002894:	e00f      	b.n	80028b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002896:	4a0a      	ldr	r2, [pc, #40]	@ (80028c0 <SysTick_Config+0x40>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800289e:	210f      	movs	r1, #15
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295
 80028a4:	f7ff ff8e 	bl	80027c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a8:	4b05      	ldr	r3, [pc, #20]	@ (80028c0 <SysTick_Config+0x40>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ae:	4b04      	ldr	r3, [pc, #16]	@ (80028c0 <SysTick_Config+0x40>)
 80028b0:	2207      	movs	r2, #7
 80028b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	e000e010 	.word	0xe000e010

080028c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ff05 	bl	80026dc <__NVIC_SetPriorityGrouping>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028ec:	f7ff ff1a 	bl	8002724 <__NVIC_GetPriorityGrouping>
 80028f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	68b9      	ldr	r1, [r7, #8]
 80028f6:	6978      	ldr	r0, [r7, #20]
 80028f8:	f7ff ff8e 	bl	8002818 <NVIC_EncodePriority>
 80028fc:	4602      	mov	r2, r0
 80028fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ff5d 	bl	80027c4 <__NVIC_SetPriority>
}
 800290a:	bf00      	nop
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	4603      	mov	r3, r0
 800291a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800291c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff0d 	bl	8002740 <__NVIC_EnableIRQ>
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	4603      	mov	r3, r0
 8002936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff1d 	bl	800277c <__NVIC_DisableIRQ>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ff94 	bl	8002880 <SysTick_Config>
 8002958:	4603      	mov	r3, r0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002970:	f7ff fc22 	bl	80021b8 <HAL_GetTick>
 8002974:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d008      	beq.n	8002994 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2280      	movs	r2, #128	@ 0x80
 8002986:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e052      	b.n	8002a3a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0216 	bic.w	r2, r2, #22
 80029a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029b2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d103      	bne.n	80029c4 <HAL_DMA_Abort+0x62>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d007      	beq.n	80029d4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0208 	bic.w	r2, r2, #8
 80029d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 0201 	bic.w	r2, r2, #1
 80029e2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029e4:	e013      	b.n	8002a0e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029e6:	f7ff fbe7 	bl	80021b8 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b05      	cmp	r3, #5
 80029f2:	d90c      	bls.n	8002a0e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2220      	movs	r2, #32
 80029f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2203      	movs	r2, #3
 80029fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e015      	b.n	8002a3a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1e4      	bne.n	80029e6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a20:	223f      	movs	r2, #63	@ 0x3f
 8002a22:	409a      	lsls	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d004      	beq.n	8002a60 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2280      	movs	r2, #128	@ 0x80
 8002a5a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e00c      	b.n	8002a7a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2205      	movs	r2, #5
 8002a64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f022 0201 	bic.w	r2, r2, #1
 8002a76:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b089      	sub	sp, #36	@ 0x24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]
 8002aa2:	e16b      	b.n	8002d7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	f040 815a 	bne.w	8002d76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d005      	beq.n	8002ada <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d130      	bne.n	8002b3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b10:	2201      	movs	r2, #1
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	091b      	lsrs	r3, r3, #4
 8002b26:	f003 0201 	and.w	r2, r3, #1
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d017      	beq.n	8002b78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	005b      	lsls	r3, r3, #1
 8002b52:	2203      	movs	r2, #3
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d123      	bne.n	8002bcc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	08da      	lsrs	r2, r3, #3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3208      	adds	r2, #8
 8002b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	220f      	movs	r2, #15
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	691a      	ldr	r2, [r3, #16]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	08da      	lsrs	r2, r3, #3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3208      	adds	r2, #8
 8002bc6:	69b9      	ldr	r1, [r7, #24]
 8002bc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0203 	and.w	r2, r3, #3
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 80b4 	beq.w	8002d76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	4b60      	ldr	r3, [pc, #384]	@ (8002d94 <HAL_GPIO_Init+0x30c>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	4a5f      	ldr	r2, [pc, #380]	@ (8002d94 <HAL_GPIO_Init+0x30c>)
 8002c18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c1e:	4b5d      	ldr	r3, [pc, #372]	@ (8002d94 <HAL_GPIO_Init+0x30c>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c2a:	4a5b      	ldr	r2, [pc, #364]	@ (8002d98 <HAL_GPIO_Init+0x310>)
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	089b      	lsrs	r3, r3, #2
 8002c30:	3302      	adds	r3, #2
 8002c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	220f      	movs	r2, #15
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a52      	ldr	r2, [pc, #328]	@ (8002d9c <HAL_GPIO_Init+0x314>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d02b      	beq.n	8002cae <HAL_GPIO_Init+0x226>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a51      	ldr	r2, [pc, #324]	@ (8002da0 <HAL_GPIO_Init+0x318>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d025      	beq.n	8002caa <HAL_GPIO_Init+0x222>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a50      	ldr	r2, [pc, #320]	@ (8002da4 <HAL_GPIO_Init+0x31c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d01f      	beq.n	8002ca6 <HAL_GPIO_Init+0x21e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a4f      	ldr	r2, [pc, #316]	@ (8002da8 <HAL_GPIO_Init+0x320>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d019      	beq.n	8002ca2 <HAL_GPIO_Init+0x21a>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a4e      	ldr	r2, [pc, #312]	@ (8002dac <HAL_GPIO_Init+0x324>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d013      	beq.n	8002c9e <HAL_GPIO_Init+0x216>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4d      	ldr	r2, [pc, #308]	@ (8002db0 <HAL_GPIO_Init+0x328>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00d      	beq.n	8002c9a <HAL_GPIO_Init+0x212>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4c      	ldr	r2, [pc, #304]	@ (8002db4 <HAL_GPIO_Init+0x32c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d007      	beq.n	8002c96 <HAL_GPIO_Init+0x20e>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a4b      	ldr	r2, [pc, #300]	@ (8002db8 <HAL_GPIO_Init+0x330>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d101      	bne.n	8002c92 <HAL_GPIO_Init+0x20a>
 8002c8e:	2307      	movs	r3, #7
 8002c90:	e00e      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002c92:	2308      	movs	r3, #8
 8002c94:	e00c      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002c96:	2306      	movs	r3, #6
 8002c98:	e00a      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002c9a:	2305      	movs	r3, #5
 8002c9c:	e008      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	e006      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e004      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e002      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <HAL_GPIO_Init+0x228>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	69fa      	ldr	r2, [r7, #28]
 8002cb2:	f002 0203 	and.w	r2, r2, #3
 8002cb6:	0092      	lsls	r2, r2, #2
 8002cb8:	4093      	lsls	r3, r2
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cc0:	4935      	ldr	r1, [pc, #212]	@ (8002d98 <HAL_GPIO_Init+0x310>)
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	089b      	lsrs	r3, r3, #2
 8002cc6:	3302      	adds	r3, #2
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cce:	4b3b      	ldr	r3, [pc, #236]	@ (8002dbc <HAL_GPIO_Init+0x334>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cf2:	4a32      	ldr	r2, [pc, #200]	@ (8002dbc <HAL_GPIO_Init+0x334>)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cf8:	4b30      	ldr	r3, [pc, #192]	@ (8002dbc <HAL_GPIO_Init+0x334>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d1c:	4a27      	ldr	r2, [pc, #156]	@ (8002dbc <HAL_GPIO_Init+0x334>)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d22:	4b26      	ldr	r3, [pc, #152]	@ (8002dbc <HAL_GPIO_Init+0x334>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d46:	4a1d      	ldr	r2, [pc, #116]	@ (8002dbc <HAL_GPIO_Init+0x334>)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dbc <HAL_GPIO_Init+0x334>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d70:	4a12      	ldr	r2, [pc, #72]	@ (8002dbc <HAL_GPIO_Init+0x334>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	61fb      	str	r3, [r7, #28]
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	2b0f      	cmp	r3, #15
 8002d80:	f67f ae90 	bls.w	8002aa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d84:	bf00      	nop
 8002d86:	bf00      	nop
 8002d88:	3724      	adds	r7, #36	@ 0x24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800
 8002d98:	40013800 	.word	0x40013800
 8002d9c:	40020000 	.word	0x40020000
 8002da0:	40020400 	.word	0x40020400
 8002da4:	40020800 	.word	0x40020800
 8002da8:	40020c00 	.word	0x40020c00
 8002dac:	40021000 	.word	0x40021000
 8002db0:	40021400 	.word	0x40021400
 8002db4:	40021800 	.word	0x40021800
 8002db8:	40021c00 	.word	0x40021c00
 8002dbc:	40013c00 	.word	0x40013c00

08002dc0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	e0cd      	b.n	8002f78 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ddc:	2201      	movs	r2, #1
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4013      	ands	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	f040 80bd 	bne.w	8002f72 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002df8:	4a65      	ldr	r2, [pc, #404]	@ (8002f90 <HAL_GPIO_DeInit+0x1d0>)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	089b      	lsrs	r3, r3, #2
 8002dfe:	3302      	adds	r3, #2
 8002e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e04:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	220f      	movs	r2, #15
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	4013      	ands	r3, r2
 8002e18:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a5d      	ldr	r2, [pc, #372]	@ (8002f94 <HAL_GPIO_DeInit+0x1d4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d02b      	beq.n	8002e7a <HAL_GPIO_DeInit+0xba>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a5c      	ldr	r2, [pc, #368]	@ (8002f98 <HAL_GPIO_DeInit+0x1d8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d025      	beq.n	8002e76 <HAL_GPIO_DeInit+0xb6>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a5b      	ldr	r2, [pc, #364]	@ (8002f9c <HAL_GPIO_DeInit+0x1dc>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01f      	beq.n	8002e72 <HAL_GPIO_DeInit+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a5a      	ldr	r2, [pc, #360]	@ (8002fa0 <HAL_GPIO_DeInit+0x1e0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d019      	beq.n	8002e6e <HAL_GPIO_DeInit+0xae>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a59      	ldr	r2, [pc, #356]	@ (8002fa4 <HAL_GPIO_DeInit+0x1e4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d013      	beq.n	8002e6a <HAL_GPIO_DeInit+0xaa>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a58      	ldr	r2, [pc, #352]	@ (8002fa8 <HAL_GPIO_DeInit+0x1e8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00d      	beq.n	8002e66 <HAL_GPIO_DeInit+0xa6>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a57      	ldr	r2, [pc, #348]	@ (8002fac <HAL_GPIO_DeInit+0x1ec>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d007      	beq.n	8002e62 <HAL_GPIO_DeInit+0xa2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a56      	ldr	r2, [pc, #344]	@ (8002fb0 <HAL_GPIO_DeInit+0x1f0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d101      	bne.n	8002e5e <HAL_GPIO_DeInit+0x9e>
 8002e5a:	2307      	movs	r3, #7
 8002e5c:	e00e      	b.n	8002e7c <HAL_GPIO_DeInit+0xbc>
 8002e5e:	2308      	movs	r3, #8
 8002e60:	e00c      	b.n	8002e7c <HAL_GPIO_DeInit+0xbc>
 8002e62:	2306      	movs	r3, #6
 8002e64:	e00a      	b.n	8002e7c <HAL_GPIO_DeInit+0xbc>
 8002e66:	2305      	movs	r3, #5
 8002e68:	e008      	b.n	8002e7c <HAL_GPIO_DeInit+0xbc>
 8002e6a:	2304      	movs	r3, #4
 8002e6c:	e006      	b.n	8002e7c <HAL_GPIO_DeInit+0xbc>
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e004      	b.n	8002e7c <HAL_GPIO_DeInit+0xbc>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e002      	b.n	8002e7c <HAL_GPIO_DeInit+0xbc>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <HAL_GPIO_DeInit+0xbc>
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	f002 0203 	and.w	r2, r2, #3
 8002e82:	0092      	lsls	r2, r2, #2
 8002e84:	4093      	lsls	r3, r2
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d132      	bne.n	8002ef2 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002e8c:	4b49      	ldr	r3, [pc, #292]	@ (8002fb4 <HAL_GPIO_DeInit+0x1f4>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	4947      	ldr	r1, [pc, #284]	@ (8002fb4 <HAL_GPIO_DeInit+0x1f4>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002e9a:	4b46      	ldr	r3, [pc, #280]	@ (8002fb4 <HAL_GPIO_DeInit+0x1f4>)
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	4944      	ldr	r1, [pc, #272]	@ (8002fb4 <HAL_GPIO_DeInit+0x1f4>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002ea8:	4b42      	ldr	r3, [pc, #264]	@ (8002fb4 <HAL_GPIO_DeInit+0x1f4>)
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	4940      	ldr	r1, [pc, #256]	@ (8002fb4 <HAL_GPIO_DeInit+0x1f4>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8002fb4 <HAL_GPIO_DeInit+0x1f4>)
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	493d      	ldr	r1, [pc, #244]	@ (8002fb4 <HAL_GPIO_DeInit+0x1f4>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	220f      	movs	r2, #15
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002ed4:	4a2e      	ldr	r2, [pc, #184]	@ (8002f90 <HAL_GPIO_DeInit+0x1d0>)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	089b      	lsrs	r3, r3, #2
 8002eda:	3302      	adds	r3, #2
 8002edc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	43da      	mvns	r2, r3
 8002ee4:	482a      	ldr	r0, [pc, #168]	@ (8002f90 <HAL_GPIO_DeInit+0x1d0>)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	089b      	lsrs	r3, r3, #2
 8002eea:	400a      	ands	r2, r1
 8002eec:	3302      	adds	r3, #2
 8002eee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	2103      	movs	r1, #3
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	401a      	ands	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	08da      	lsrs	r2, r3, #3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3208      	adds	r2, #8
 8002f10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	220f      	movs	r2, #15
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	08d2      	lsrs	r2, r2, #3
 8002f28:	4019      	ands	r1, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	3208      	adds	r2, #8
 8002f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	2103      	movs	r1, #3
 8002f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	401a      	ands	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	fa01 f303 	lsl.w	r3, r1, r3
 8002f54:	43db      	mvns	r3, r3
 8002f56:	401a      	ands	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	2103      	movs	r1, #3
 8002f66:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	401a      	ands	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	3301      	adds	r3, #1
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	2b0f      	cmp	r3, #15
 8002f7c:	f67f af2e 	bls.w	8002ddc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002f80:	bf00      	nop
 8002f82:	bf00      	nop
 8002f84:	371c      	adds	r7, #28
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	40013800 	.word	0x40013800
 8002f94:	40020000 	.word	0x40020000
 8002f98:	40020400 	.word	0x40020400
 8002f9c:	40020800 	.word	0x40020800
 8002fa0:	40020c00 	.word	0x40020c00
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	40021400 	.word	0x40021400
 8002fac:	40021800 	.word	0x40021800
 8002fb0:	40021c00 	.word	0x40021c00
 8002fb4:	40013c00 	.word	0x40013c00

08002fb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	807b      	strh	r3, [r7, #2]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fc8:	787b      	ldrb	r3, [r7, #1]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fce:	887a      	ldrh	r2, [r7, #2]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fd4:	e003      	b.n	8002fde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fd6:	887b      	ldrh	r3, [r7, #2]
 8002fd8:	041a      	lsls	r2, r3, #16
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	619a      	str	r2, [r3, #24]
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e12b      	b.n	8003256 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fe fb6e 	bl	80016f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2224      	movs	r2, #36	@ 0x24
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0201 	bic.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800303e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800304e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003050:	f001 ffd2 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 8003054:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	4a81      	ldr	r2, [pc, #516]	@ (8003260 <HAL_I2C_Init+0x274>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d807      	bhi.n	8003070 <HAL_I2C_Init+0x84>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4a80      	ldr	r2, [pc, #512]	@ (8003264 <HAL_I2C_Init+0x278>)
 8003064:	4293      	cmp	r3, r2
 8003066:	bf94      	ite	ls
 8003068:	2301      	movls	r3, #1
 800306a:	2300      	movhi	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	e006      	b.n	800307e <HAL_I2C_Init+0x92>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4a7d      	ldr	r2, [pc, #500]	@ (8003268 <HAL_I2C_Init+0x27c>)
 8003074:	4293      	cmp	r3, r2
 8003076:	bf94      	ite	ls
 8003078:	2301      	movls	r3, #1
 800307a:	2300      	movhi	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e0e7      	b.n	8003256 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4a78      	ldr	r2, [pc, #480]	@ (800326c <HAL_I2C_Init+0x280>)
 800308a:	fba2 2303 	umull	r2, r3, r2, r3
 800308e:	0c9b      	lsrs	r3, r3, #18
 8003090:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4a6a      	ldr	r2, [pc, #424]	@ (8003260 <HAL_I2C_Init+0x274>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d802      	bhi.n	80030c0 <HAL_I2C_Init+0xd4>
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	3301      	adds	r3, #1
 80030be:	e009      	b.n	80030d4 <HAL_I2C_Init+0xe8>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030c6:	fb02 f303 	mul.w	r3, r2, r3
 80030ca:	4a69      	ldr	r2, [pc, #420]	@ (8003270 <HAL_I2C_Init+0x284>)
 80030cc:	fba2 2303 	umull	r2, r3, r2, r3
 80030d0:	099b      	lsrs	r3, r3, #6
 80030d2:	3301      	adds	r3, #1
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	430b      	orrs	r3, r1
 80030da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	495c      	ldr	r1, [pc, #368]	@ (8003260 <HAL_I2C_Init+0x274>)
 80030f0:	428b      	cmp	r3, r1
 80030f2:	d819      	bhi.n	8003128 <HAL_I2C_Init+0x13c>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	1e59      	subs	r1, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003102:	1c59      	adds	r1, r3, #1
 8003104:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003108:	400b      	ands	r3, r1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <HAL_I2C_Init+0x138>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	1e59      	subs	r1, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	fbb1 f3f3 	udiv	r3, r1, r3
 800311c:	3301      	adds	r3, #1
 800311e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003122:	e051      	b.n	80031c8 <HAL_I2C_Init+0x1dc>
 8003124:	2304      	movs	r3, #4
 8003126:	e04f      	b.n	80031c8 <HAL_I2C_Init+0x1dc>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d111      	bne.n	8003154 <HAL_I2C_Init+0x168>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1e58      	subs	r0, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	440b      	add	r3, r1
 800313e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003142:	3301      	adds	r3, #1
 8003144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	e012      	b.n	800317a <HAL_I2C_Init+0x18e>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	1e58      	subs	r0, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	0099      	lsls	r1, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	fbb0 f3f3 	udiv	r3, r0, r3
 800316a:	3301      	adds	r3, #1
 800316c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003170:	2b00      	cmp	r3, #0
 8003172:	bf0c      	ite	eq
 8003174:	2301      	moveq	r3, #1
 8003176:	2300      	movne	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_I2C_Init+0x196>
 800317e:	2301      	movs	r3, #1
 8003180:	e022      	b.n	80031c8 <HAL_I2C_Init+0x1dc>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10e      	bne.n	80031a8 <HAL_I2C_Init+0x1bc>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1e58      	subs	r0, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6859      	ldr	r1, [r3, #4]
 8003192:	460b      	mov	r3, r1
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	440b      	add	r3, r1
 8003198:	fbb0 f3f3 	udiv	r3, r0, r3
 800319c:	3301      	adds	r3, #1
 800319e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031a6:	e00f      	b.n	80031c8 <HAL_I2C_Init+0x1dc>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1e58      	subs	r0, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	0099      	lsls	r1, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80031be:	3301      	adds	r3, #1
 80031c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	6809      	ldr	r1, [r1, #0]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69da      	ldr	r2, [r3, #28]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6911      	ldr	r1, [r2, #16]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	68d2      	ldr	r2, [r2, #12]
 8003202:	4311      	orrs	r1, r2
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6812      	ldr	r2, [r2, #0]
 8003208:	430b      	orrs	r3, r1
 800320a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695a      	ldr	r2, [r3, #20]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	000186a0 	.word	0x000186a0
 8003264:	001e847f 	.word	0x001e847f
 8003268:	003d08ff 	.word	0x003d08ff
 800326c:	431bde83 	.word	0x431bde83
 8003270:	10624dd3 	.word	0x10624dd3

08003274 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af02      	add	r7, sp, #8
 800327a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e101      	b.n	800348a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d106      	bne.n	80032a6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f008 fded 	bl	800be80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2203      	movs	r2, #3
 80032aa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032b4:	d102      	bne.n	80032bc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f003 fe62 	bl	8006f8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	7c1a      	ldrb	r2, [r3, #16]
 80032ce:	f88d 2000 	strb.w	r2, [sp]
 80032d2:	3304      	adds	r3, #4
 80032d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032d6:	f003 fd41 	bl	8006d5c <USB_CoreInit>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0ce      	b.n	800348a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2100      	movs	r1, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	f003 fe5a 	bl	8006fac <USB_SetCurrentMode>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d005      	beq.n	800330a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2202      	movs	r2, #2
 8003302:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e0bf      	b.n	800348a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800330a:	2300      	movs	r3, #0
 800330c:	73fb      	strb	r3, [r7, #15]
 800330e:	e04a      	b.n	80033a6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003310:	7bfa      	ldrb	r2, [r7, #15]
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	4613      	mov	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	3315      	adds	r3, #21
 8003320:	2201      	movs	r2, #1
 8003322:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003324:	7bfa      	ldrb	r2, [r7, #15]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	3314      	adds	r3, #20
 8003334:	7bfa      	ldrb	r2, [r7, #15]
 8003336:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003338:	7bfa      	ldrb	r2, [r7, #15]
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	b298      	uxth	r0, r3
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4613      	mov	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	440b      	add	r3, r1
 800334a:	332e      	adds	r3, #46	@ 0x2e
 800334c:	4602      	mov	r2, r0
 800334e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003350:	7bfa      	ldrb	r2, [r7, #15]
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	4613      	mov	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	3318      	adds	r3, #24
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003364:	7bfa      	ldrb	r2, [r7, #15]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	331c      	adds	r3, #28
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003378:	7bfa      	ldrb	r2, [r7, #15]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	3320      	adds	r3, #32
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800338c:	7bfa      	ldrb	r2, [r7, #15]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	3324      	adds	r3, #36	@ 0x24
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
 80033a2:	3301      	adds	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	791b      	ldrb	r3, [r3, #4]
 80033aa:	7bfa      	ldrb	r2, [r7, #15]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d3af      	bcc.n	8003310 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b0:	2300      	movs	r3, #0
 80033b2:	73fb      	strb	r3, [r7, #15]
 80033b4:	e044      	b.n	8003440 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033b6:	7bfa      	ldrb	r2, [r7, #15]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	440b      	add	r3, r1
 80033c4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033cc:	7bfa      	ldrb	r2, [r7, #15]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80033de:	7bfa      	ldrb	r2, [r7, #15]
 80033e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033e2:	7bfa      	ldrb	r2, [r7, #15]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033f8:	7bfa      	ldrb	r2, [r7, #15]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4413      	add	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800340e:	7bfa      	ldrb	r2, [r7, #15]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003424:	7bfa      	ldrb	r2, [r7, #15]
 8003426:	6879      	ldr	r1, [r7, #4]
 8003428:	4613      	mov	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800343a:	7bfb      	ldrb	r3, [r7, #15]
 800343c:	3301      	adds	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	791b      	ldrb	r3, [r3, #4]
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	429a      	cmp	r2, r3
 8003448:	d3b5      	bcc.n	80033b6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	7c1a      	ldrb	r2, [r3, #16]
 8003452:	f88d 2000 	strb.w	r2, [sp]
 8003456:	3304      	adds	r3, #4
 8003458:	cb0e      	ldmia	r3, {r1, r2, r3}
 800345a:	f003 fdf3 	bl	8007044 <USB_DevInit>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e00c      	b.n	800348a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f004 fe3d 	bl	8008102 <USB_DevDisconnect>

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b084      	sub	sp, #16
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_PCD_Start+0x1c>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e022      	b.n	80034f4 <HAL_PCD_Start+0x62>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d009      	beq.n	80034d6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d105      	bne.n	80034d6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f003 fd44 	bl	8006f68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f004 fdeb 	bl	80080c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80034fc:	b590      	push	{r4, r7, lr}
 80034fe:	b08d      	sub	sp, #52	@ 0x34
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f004 fea9 	bl	800826a <USB_GetMode>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	f040 848c 	bne.w	8003e38 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f004 fe0d 	bl	8008144 <USB_ReadInterrupts>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 8482 	beq.w	8003e36 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	0a1b      	lsrs	r3, r3, #8
 800353c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f004 fdfa 	bl	8008144 <USB_ReadInterrupts>
 8003550:	4603      	mov	r3, r0
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b02      	cmp	r3, #2
 8003558:	d107      	bne.n	800356a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695a      	ldr	r2, [r3, #20]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f002 0202 	and.w	r2, r2, #2
 8003568:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f004 fde8 	bl	8008144 <USB_ReadInterrupts>
 8003574:	4603      	mov	r3, r0
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	2b10      	cmp	r3, #16
 800357c:	d161      	bne.n	8003642 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	699a      	ldr	r2, [r3, #24]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0210 	bic.w	r2, r2, #16
 800358c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	f003 020f 	and.w	r2, r3, #15
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	4413      	add	r3, r2
 80035aa:	3304      	adds	r3, #4
 80035ac:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	0c5b      	lsrs	r3, r3, #17
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d124      	bne.n	8003604 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d035      	beq.n	8003632 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	091b      	lsrs	r3, r3, #4
 80035ce:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80035d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	461a      	mov	r2, r3
 80035d8:	6a38      	ldr	r0, [r7, #32]
 80035da:	f004 fc1f 	bl	8007e1c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	091b      	lsrs	r3, r3, #4
 80035e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035ea:	441a      	add	r2, r3
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	695a      	ldr	r2, [r3, #20]
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	091b      	lsrs	r3, r3, #4
 80035f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035fc:	441a      	add	r2, r3
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	615a      	str	r2, [r3, #20]
 8003602:	e016      	b.n	8003632 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	0c5b      	lsrs	r3, r3, #17
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	2b06      	cmp	r3, #6
 800360e:	d110      	bne.n	8003632 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003616:	2208      	movs	r2, #8
 8003618:	4619      	mov	r1, r3
 800361a:	6a38      	ldr	r0, [r7, #32]
 800361c:	f004 fbfe 	bl	8007e1c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	695a      	ldr	r2, [r3, #20]
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	091b      	lsrs	r3, r3, #4
 8003628:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800362c:	441a      	add	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699a      	ldr	r2, [r3, #24]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0210 	orr.w	r2, r2, #16
 8003640:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f004 fd7c 	bl	8008144 <USB_ReadInterrupts>
 800364c:	4603      	mov	r3, r0
 800364e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003652:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003656:	f040 80a7 	bne.w	80037a8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800365a:	2300      	movs	r3, #0
 800365c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f004 fd81 	bl	800816a <USB_ReadDevAllOutEpInterrupt>
 8003668:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800366a:	e099      	b.n	80037a0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800366c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 808e 	beq.w	8003794 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	4611      	mov	r1, r2
 8003682:	4618      	mov	r0, r3
 8003684:	f004 fda5 	bl	80081d2 <USB_ReadDevOutEPInterrupt>
 8003688:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00c      	beq.n	80036ae <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036a0:	461a      	mov	r2, r3
 80036a2:	2301      	movs	r3, #1
 80036a4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80036a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fea3 	bl	80043f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f003 0308 	and.w	r3, r3, #8
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00c      	beq.n	80036d2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80036b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036c4:	461a      	mov	r2, r3
 80036c6:	2308      	movs	r3, #8
 80036c8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80036ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 ff79 	bl	80045c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80036dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036e8:	461a      	mov	r2, r3
 80036ea:	2310      	movs	r3, #16
 80036ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d030      	beq.n	800375a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003700:	2b80      	cmp	r3, #128	@ 0x80
 8003702:	d109      	bne.n	8003718 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	69fa      	ldr	r2, [r7, #28]
 800370e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003712:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003716:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003718:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800371a:	4613      	mov	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	4413      	add	r3, r2
 800372a:	3304      	adds	r3, #4
 800372c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	78db      	ldrb	r3, [r3, #3]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d108      	bne.n	8003748 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2200      	movs	r2, #0
 800373a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800373c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373e:	b2db      	uxtb	r3, r3
 8003740:	4619      	mov	r1, r3
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f008 fca2 	bl	800c08c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	4413      	add	r3, r2
 8003750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003754:	461a      	mov	r2, r3
 8003756:	2302      	movs	r3, #2
 8003758:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f003 0320 	and.w	r3, r3, #32
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003770:	461a      	mov	r2, r3
 8003772:	2320      	movs	r3, #32
 8003774:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d009      	beq.n	8003794 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	4413      	add	r3, r2
 8003788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800378c:	461a      	mov	r2, r3
 800378e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003792:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003796:	3301      	adds	r3, #1
 8003798:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800379a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379c:	085b      	lsrs	r3, r3, #1
 800379e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80037a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f47f af62 	bne.w	800366c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f004 fcc9 	bl	8008144 <USB_ReadInterrupts>
 80037b2:	4603      	mov	r3, r0
 80037b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037bc:	f040 80db 	bne.w	8003976 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f004 fcea 	bl	800819e <USB_ReadDevAllInEpInterrupt>
 80037ca:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80037d0:	e0cd      	b.n	800396e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80037d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80c2 	beq.w	8003962 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	4611      	mov	r1, r2
 80037e8:	4618      	mov	r0, r3
 80037ea:	f004 fd10 	bl	800820e <USB_ReadDevInEPInterrupt>
 80037ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d057      	beq.n	80038aa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	2201      	movs	r2, #1
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800380e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	43db      	mvns	r3, r3
 8003814:	69f9      	ldr	r1, [r7, #28]
 8003816:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800381a:	4013      	ands	r3, r2
 800381c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800381e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800382a:	461a      	mov	r2, r3
 800382c:	2301      	movs	r3, #1
 800382e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	799b      	ldrb	r3, [r3, #6]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d132      	bne.n	800389e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800383c:	4613      	mov	r3, r2
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	3320      	adds	r3, #32
 8003848:	6819      	ldr	r1, [r3, #0]
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800384e:	4613      	mov	r3, r2
 8003850:	00db      	lsls	r3, r3, #3
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4403      	add	r3, r0
 8003858:	331c      	adds	r3, #28
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4419      	add	r1, r3
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003862:	4613      	mov	r3, r2
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4403      	add	r3, r0
 800386c:	3320      	adds	r3, #32
 800386e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003872:	2b00      	cmp	r3, #0
 8003874:	d113      	bne.n	800389e <HAL_PCD_IRQHandler+0x3a2>
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800387a:	4613      	mov	r3, r2
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	4413      	add	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	3324      	adds	r3, #36	@ 0x24
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d108      	bne.n	800389e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003896:	461a      	mov	r2, r3
 8003898:	2101      	movs	r1, #1
 800389a:	f004 fd17 	bl	80082cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800389e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	4619      	mov	r1, r3
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f008 fb6c 	bl	800bf82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f003 0308 	and.w	r3, r3, #8
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d008      	beq.n	80038c6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80038b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038c0:	461a      	mov	r2, r3
 80038c2:	2308      	movs	r3, #8
 80038c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80038d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038dc:	461a      	mov	r2, r3
 80038de:	2310      	movs	r3, #16
 80038e0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80038ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038f8:	461a      	mov	r2, r3
 80038fa:	2340      	movs	r3, #64	@ 0x40
 80038fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d023      	beq.n	8003950 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003908:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800390a:	6a38      	ldr	r0, [r7, #32]
 800390c:	f003 fcfe 	bl	800730c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003912:	4613      	mov	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	4413      	add	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	3310      	adds	r3, #16
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	4413      	add	r3, r2
 8003920:	3304      	adds	r3, #4
 8003922:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	78db      	ldrb	r3, [r3, #3]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d108      	bne.n	800393e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2200      	movs	r2, #0
 8003930:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003934:	b2db      	uxtb	r3, r3
 8003936:	4619      	mov	r1, r3
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f008 fbb9 	bl	800c0b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800393e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800394a:	461a      	mov	r2, r3
 800394c:	2302      	movs	r3, #2
 800394e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800395a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fcbd 	bl	80042dc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003964:	3301      	adds	r3, #1
 8003966:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800396a:	085b      	lsrs	r3, r3, #1
 800396c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800396e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003970:	2b00      	cmp	r3, #0
 8003972:	f47f af2e 	bne.w	80037d2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f004 fbe2 	bl	8008144 <USB_ReadInterrupts>
 8003980:	4603      	mov	r3, r0
 8003982:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003986:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800398a:	d122      	bne.n	80039d2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800399a:	f023 0301 	bic.w	r3, r3, #1
 800399e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d108      	bne.n	80039bc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80039b2:	2100      	movs	r1, #0
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fea3 	bl	8004700 <HAL_PCDEx_LPM_Callback>
 80039ba:	e002      	b.n	80039c2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f008 fb57 	bl	800c070 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695a      	ldr	r2, [r3, #20]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80039d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f004 fbb4 	bl	8008144 <USB_ReadInterrupts>
 80039dc:	4603      	mov	r3, r0
 80039de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039e6:	d112      	bne.n	8003a0e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d102      	bne.n	80039fe <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f008 fb13 	bl	800c024 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695a      	ldr	r2, [r3, #20]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003a0c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f004 fb96 	bl	8008144 <USB_ReadInterrupts>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a22:	f040 80b7 	bne.w	8003b94 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a34:	f023 0301 	bic.w	r3, r3, #1
 8003a38:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2110      	movs	r1, #16
 8003a40:	4618      	mov	r0, r3
 8003a42:	f003 fc63 	bl	800730c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a46:	2300      	movs	r3, #0
 8003a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a4a:	e046      	b.n	8003ada <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a58:	461a      	mov	r2, r3
 8003a5a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a5e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a70:	0151      	lsls	r1, r2, #5
 8003a72:	69fa      	ldr	r2, [r7, #28]
 8003a74:	440a      	add	r2, r1
 8003a76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003a7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a7e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a92:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003aa4:	0151      	lsls	r1, r2, #5
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	440a      	add	r2, r1
 8003aaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003aae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ab2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ac4:	0151      	lsls	r1, r2, #5
 8003ac6:	69fa      	ldr	r2, [r7, #28]
 8003ac8:	440a      	add	r2, r1
 8003aca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ace:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003ad2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	791b      	ldrb	r3, [r3, #4]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d3b2      	bcc.n	8003a4c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003af4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003af8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	7bdb      	ldrb	r3, [r3, #15]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d016      	beq.n	8003b30 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b12:	f043 030b 	orr.w	r3, r3, #11
 8003b16:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b28:	f043 030b 	orr.w	r3, r3, #11
 8003b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b2e:	e015      	b.n	8003b5c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	69fa      	ldr	r2, [r7, #28]
 8003b3a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b3e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b42:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003b46:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b56:	f043 030b 	orr.w	r3, r3, #11
 8003b5a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	69fa      	ldr	r2, [r7, #28]
 8003b66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b6a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003b6e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b7e:	461a      	mov	r2, r3
 8003b80:	f004 fba4 	bl	80082cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	695a      	ldr	r2, [r3, #20]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003b92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f004 fad3 	bl	8008144 <USB_ReadInterrupts>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ba4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ba8:	d123      	bne.n	8003bf2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f004 fb69 	bl	8008286 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f003 fc20 	bl	80073fe <USB_GetDevSpeed>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681c      	ldr	r4, [r3, #0]
 8003bca:	f001 fa09 	bl	8004fe0 <HAL_RCC_GetHCLKFreq>
 8003bce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f003 f924 	bl	8006e24 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f008 f9f8 	bl	800bfd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695a      	ldr	r2, [r3, #20]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003bf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f004 faa4 	bl	8008144 <USB_ReadInterrupts>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d10a      	bne.n	8003c1c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f008 f9d5 	bl	800bfb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695a      	ldr	r2, [r3, #20]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f002 0208 	and.w	r2, r2, #8
 8003c1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f004 fa8f 	bl	8008144 <USB_ReadInterrupts>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2c:	2b80      	cmp	r3, #128	@ 0x80
 8003c2e:	d123      	bne.n	8003c78 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c40:	e014      	b.n	8003c6c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c46:	4613      	mov	r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	440b      	add	r3, r1
 8003c50:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d105      	bne.n	8003c66 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	4619      	mov	r1, r3
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 fb0a 	bl	800427a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c68:	3301      	adds	r3, #1
 8003c6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	791b      	ldrb	r3, [r3, #4]
 8003c70:	461a      	mov	r2, r3
 8003c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d3e4      	bcc.n	8003c42 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f004 fa61 	bl	8008144 <USB_ReadInterrupts>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c8c:	d13c      	bne.n	8003d08 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c8e:	2301      	movs	r3, #1
 8003c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c92:	e02b      	b.n	8003cec <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca8:	4613      	mov	r3, r2
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	3318      	adds	r3, #24
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d115      	bne.n	8003ce6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003cba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	da12      	bge.n	8003ce6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	3317      	adds	r3, #23
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 faca 	bl	800427a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce8:	3301      	adds	r3, #1
 8003cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	791b      	ldrb	r3, [r3, #4]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d3cd      	bcc.n	8003c94 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695a      	ldr	r2, [r3, #20]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003d06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f004 fa19 	bl	8008144 <USB_ReadInterrupts>
 8003d12:	4603      	mov	r3, r0
 8003d14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d18:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d1c:	d156      	bne.n	8003dcc <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d1e:	2301      	movs	r3, #1
 8003d20:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d22:	e045      	b.n	8003db0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d34:	6879      	ldr	r1, [r7, #4]
 8003d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d38:	4613      	mov	r3, r2
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d12e      	bne.n	8003daa <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d4c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	da2b      	bge.n	8003daa <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003d5e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d121      	bne.n	8003daa <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4413      	add	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003d78:	2201      	movs	r2, #1
 8003d7a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	699b      	ldr	r3, [r3, #24]
 8003d80:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003d84:	6a3b      	ldr	r3, [r7, #32]
 8003d86:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10a      	bne.n	8003daa <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	69fa      	ldr	r2, [r7, #28]
 8003d9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003da6:	6053      	str	r3, [r2, #4]
            break;
 8003da8:	e008      	b.n	8003dbc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	3301      	adds	r3, #1
 8003dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	791b      	ldrb	r3, [r3, #4]
 8003db4:	461a      	mov	r2, r3
 8003db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d3b3      	bcc.n	8003d24 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003dca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f004 f9b7 	bl	8008144 <USB_ReadInterrupts>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003de0:	d10a      	bne.n	8003df8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f008 f976 	bl	800c0d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695a      	ldr	r2, [r3, #20]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003df6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f004 f9a1 	bl	8008144 <USB_ReadInterrupts>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d115      	bne.n	8003e38 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f008 f966 	bl	800c0f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6859      	ldr	r1, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	605a      	str	r2, [r3, #4]
 8003e34:	e000      	b.n	8003e38 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003e36:	bf00      	nop
    }
  }
}
 8003e38:	3734      	adds	r7, #52	@ 0x34
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd90      	pop	{r4, r7, pc}

08003e3e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	460b      	mov	r3, r1
 8003e48:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_PCD_SetAddress+0x1a>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e012      	b.n	8003e7e <HAL_PCD_SetAddress+0x40>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	78fa      	ldrb	r2, [r7, #3]
 8003e64:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	78fa      	ldrb	r2, [r7, #3]
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f004 f900 	bl	8008074 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	4608      	mov	r0, r1
 8003e90:	4611      	mov	r1, r2
 8003e92:	461a      	mov	r2, r3
 8003e94:	4603      	mov	r3, r0
 8003e96:	70fb      	strb	r3, [r7, #3]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	803b      	strh	r3, [r7, #0]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ea4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	da0f      	bge.n	8003ecc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eac:	78fb      	ldrb	r3, [r7, #3]
 8003eae:	f003 020f 	and.w	r2, r3, #15
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	3310      	adds	r3, #16
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	705a      	strb	r2, [r3, #1]
 8003eca:	e00f      	b.n	8003eec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	f003 020f 	and.w	r2, r3, #15
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	b2da      	uxtb	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003ef8:	883b      	ldrh	r3, [r7, #0]
 8003efa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	78ba      	ldrb	r2, [r7, #2]
 8003f06:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	785b      	ldrb	r3, [r3, #1]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f1a:	78bb      	ldrb	r3, [r7, #2]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d102      	bne.n	8003f26 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_PCD_EP_Open+0xae>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e00e      	b.n	8003f52 <HAL_PCD_EP_Open+0xcc>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68f9      	ldr	r1, [r7, #12]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f003 fa80 	bl	8007448 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003f50:	7afb      	ldrb	r3, [r7, #11]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b084      	sub	sp, #16
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	460b      	mov	r3, r1
 8003f64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	da0f      	bge.n	8003f8e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f6e:	78fb      	ldrb	r3, [r7, #3]
 8003f70:	f003 020f 	and.w	r2, r3, #15
 8003f74:	4613      	mov	r3, r2
 8003f76:	00db      	lsls	r3, r3, #3
 8003f78:	4413      	add	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	3310      	adds	r3, #16
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	4413      	add	r3, r2
 8003f82:	3304      	adds	r3, #4
 8003f84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	705a      	strb	r2, [r3, #1]
 8003f8c:	e00f      	b.n	8003fae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f8e:	78fb      	ldrb	r3, [r7, #3]
 8003f90:	f003 020f 	and.w	r2, r3, #15
 8003f94:	4613      	mov	r3, r2
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	4413      	add	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fae:	78fb      	ldrb	r3, [r7, #3]
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_PCD_EP_Close+0x6e>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e00e      	b.n	8003fe6 <HAL_PCD_EP_Close+0x8c>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68f9      	ldr	r1, [r7, #12]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f003 fabe 	bl	8007558 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b086      	sub	sp, #24
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	607a      	str	r2, [r7, #4]
 8003ff8:	603b      	str	r3, [r7, #0]
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ffe:	7afb      	ldrb	r3, [r7, #11]
 8004000:	f003 020f 	and.w	r2, r3, #15
 8004004:	4613      	mov	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4413      	add	r3, r2
 8004014:	3304      	adds	r3, #4
 8004016:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2200      	movs	r2, #0
 8004028:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2200      	movs	r2, #0
 800402e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004030:	7afb      	ldrb	r3, [r7, #11]
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	b2da      	uxtb	r2, r3
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	799b      	ldrb	r3, [r3, #6]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d102      	bne.n	800404a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	799b      	ldrb	r3, [r3, #6]
 8004052:	461a      	mov	r2, r3
 8004054:	6979      	ldr	r1, [r7, #20]
 8004056:	f003 fb5b 	bl	8007710 <USB_EPStartXfer>

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004070:	78fb      	ldrb	r3, [r7, #3]
 8004072:	f003 020f 	and.w	r2, r3, #15
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004086:	681b      	ldr	r3, [r3, #0]
}
 8004088:	4618      	mov	r0, r3
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	607a      	str	r2, [r7, #4]
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	460b      	mov	r3, r1
 80040a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040a4:	7afb      	ldrb	r3, [r7, #11]
 80040a6:	f003 020f 	and.w	r2, r3, #15
 80040aa:	4613      	mov	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4413      	add	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	3310      	adds	r3, #16
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4413      	add	r3, r2
 80040b8:	3304      	adds	r3, #4
 80040ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2200      	movs	r2, #0
 80040cc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2201      	movs	r2, #1
 80040d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040d4:	7afb      	ldrb	r3, [r7, #11]
 80040d6:	f003 030f 	and.w	r3, r3, #15
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	799b      	ldrb	r3, [r3, #6]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d102      	bne.n	80040ee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	799b      	ldrb	r3, [r3, #6]
 80040f6:	461a      	mov	r2, r3
 80040f8:	6979      	ldr	r1, [r7, #20]
 80040fa:	f003 fb09 	bl	8007710 <USB_EPStartXfer>

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004114:	78fb      	ldrb	r3, [r7, #3]
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	7912      	ldrb	r2, [r2, #4]
 800411e:	4293      	cmp	r3, r2
 8004120:	d901      	bls.n	8004126 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e04f      	b.n	80041c6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004126:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800412a:	2b00      	cmp	r3, #0
 800412c:	da0f      	bge.n	800414e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800412e:	78fb      	ldrb	r3, [r7, #3]
 8004130:	f003 020f 	and.w	r2, r3, #15
 8004134:	4613      	mov	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	4413      	add	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	3310      	adds	r3, #16
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	4413      	add	r3, r2
 8004142:	3304      	adds	r3, #4
 8004144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2201      	movs	r2, #1
 800414a:	705a      	strb	r2, [r3, #1]
 800414c:	e00d      	b.n	800416a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800414e:	78fa      	ldrb	r2, [r7, #3]
 8004150:	4613      	mov	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4413      	add	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	4413      	add	r3, r2
 8004160:	3304      	adds	r3, #4
 8004162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	b2da      	uxtb	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_PCD_EP_SetStall+0x82>
 8004186:	2302      	movs	r3, #2
 8004188:	e01d      	b.n	80041c6 <HAL_PCD_EP_SetStall+0xbe>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68f9      	ldr	r1, [r7, #12]
 8004198:	4618      	mov	r0, r3
 800419a:	f003 fe97 	bl	8007ecc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	f003 030f 	and.w	r3, r3, #15
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d109      	bne.n	80041bc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6818      	ldr	r0, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	7999      	ldrb	r1, [r3, #6]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80041b6:	461a      	mov	r2, r3
 80041b8:	f004 f888 	bl	80082cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	460b      	mov	r3, r1
 80041d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80041da:	78fb      	ldrb	r3, [r7, #3]
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	7912      	ldrb	r2, [r2, #4]
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d901      	bls.n	80041ec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e042      	b.n	8004272 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	da0f      	bge.n	8004214 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	f003 020f 	and.w	r2, r3, #15
 80041fa:	4613      	mov	r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	4413      	add	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	3310      	adds	r3, #16
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	4413      	add	r3, r2
 8004208:	3304      	adds	r3, #4
 800420a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2201      	movs	r2, #1
 8004210:	705a      	strb	r2, [r3, #1]
 8004212:	e00f      	b.n	8004234 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	f003 020f 	and.w	r2, r3, #15
 800421a:	4613      	mov	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	4413      	add	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	4413      	add	r3, r2
 800422a:	3304      	adds	r3, #4
 800422c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800423a:	78fb      	ldrb	r3, [r7, #3]
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	b2da      	uxtb	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_PCD_EP_ClrStall+0x86>
 8004250:	2302      	movs	r3, #2
 8004252:	e00e      	b.n	8004272 <HAL_PCD_EP_ClrStall+0xa4>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68f9      	ldr	r1, [r7, #12]
 8004262:	4618      	mov	r0, r3
 8004264:	f003 fea0 	bl	8007fa8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	460b      	mov	r3, r1
 8004284:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004286:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800428a:	2b00      	cmp	r3, #0
 800428c:	da0c      	bge.n	80042a8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800428e:	78fb      	ldrb	r3, [r7, #3]
 8004290:	f003 020f 	and.w	r2, r3, #15
 8004294:	4613      	mov	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	3310      	adds	r3, #16
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	4413      	add	r3, r2
 80042a2:	3304      	adds	r3, #4
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	e00c      	b.n	80042c2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	f003 020f 	and.w	r2, r3, #15
 80042ae:	4613      	mov	r3, r2
 80042b0:	00db      	lsls	r3, r3, #3
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	4413      	add	r3, r2
 80042be:	3304      	adds	r3, #4
 80042c0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68f9      	ldr	r1, [r7, #12]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f003 fcbf 	bl	8007c4c <USB_EPStopXfer>
 80042ce:	4603      	mov	r3, r0
 80042d0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80042d2:	7afb      	ldrb	r3, [r7, #11]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08a      	sub	sp, #40	@ 0x28
 80042e0:	af02      	add	r7, sp, #8
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	4613      	mov	r3, r2
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	3310      	adds	r3, #16
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	4413      	add	r3, r2
 8004300:	3304      	adds	r3, #4
 8004302:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	695a      	ldr	r2, [r3, #20]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	429a      	cmp	r2, r3
 800430e:	d901      	bls.n	8004314 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e06b      	b.n	80043ec <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	691a      	ldr	r2, [r3, #16]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	69fa      	ldr	r2, [r7, #28]
 8004326:	429a      	cmp	r2, r3
 8004328:	d902      	bls.n	8004330 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	3303      	adds	r3, #3
 8004334:	089b      	lsrs	r3, r3, #2
 8004336:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004338:	e02a      	b.n	8004390 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	691a      	ldr	r2, [r3, #16]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	69fa      	ldr	r2, [r7, #28]
 800434c:	429a      	cmp	r2, r3
 800434e:	d902      	bls.n	8004356 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	3303      	adds	r3, #3
 800435a:	089b      	lsrs	r3, r3, #2
 800435c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	68d9      	ldr	r1, [r3, #12]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	b2da      	uxtb	r2, r3
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	4603      	mov	r3, r0
 8004372:	6978      	ldr	r0, [r7, #20]
 8004374:	f003 fd14 	bl	8007da0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	441a      	add	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	695a      	ldr	r2, [r3, #20]
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	441a      	add	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d809      	bhi.n	80043ba <PCD_WriteEmptyTxFifo+0xde>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	695a      	ldr	r2, [r3, #20]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d203      	bcs.n	80043ba <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1bf      	bne.n	800433a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d811      	bhi.n	80043ea <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	f003 030f 	and.w	r3, r3, #15
 80043cc:	2201      	movs	r2, #1
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	43db      	mvns	r3, r3
 80043e0:	6939      	ldr	r1, [r7, #16]
 80043e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043e6:	4013      	ands	r3, r2
 80043e8:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3720      	adds	r7, #32
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	333c      	adds	r3, #60	@ 0x3c
 800440c:	3304      	adds	r3, #4
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	799b      	ldrb	r3, [r3, #6]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d17b      	bne.n	8004522 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f003 0308 	and.w	r3, r3, #8
 8004430:	2b00      	cmp	r3, #0
 8004432:	d015      	beq.n	8004460 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	4a61      	ldr	r2, [pc, #388]	@ (80045bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004438:	4293      	cmp	r3, r2
 800443a:	f240 80b9 	bls.w	80045b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80b3 	beq.w	80045b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004456:	461a      	mov	r2, r3
 8004458:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800445c:	6093      	str	r3, [r2, #8]
 800445e:	e0a7      	b.n	80045b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f003 0320 	and.w	r3, r3, #32
 8004466:	2b00      	cmp	r3, #0
 8004468:	d009      	beq.n	800447e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	4413      	add	r3, r2
 8004472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004476:	461a      	mov	r2, r3
 8004478:	2320      	movs	r3, #32
 800447a:	6093      	str	r3, [r2, #8]
 800447c:	e098      	b.n	80045b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004484:	2b00      	cmp	r3, #0
 8004486:	f040 8093 	bne.w	80045b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	4a4b      	ldr	r2, [pc, #300]	@ (80045bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d90f      	bls.n	80044b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044a8:	461a      	mov	r2, r3
 80044aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044ae:	6093      	str	r3, [r2, #8]
 80044b0:	e07e      	b.n	80045b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	4613      	mov	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	4413      	add	r3, r2
 80044c4:	3304      	adds	r3, #4
 80044c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a1a      	ldr	r2, [r3, #32]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	0159      	lsls	r1, r3, #5
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	440b      	add	r3, r1
 80044d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044de:	1ad2      	subs	r2, r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d114      	bne.n	8004514 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d109      	bne.n	8004506 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6818      	ldr	r0, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044fc:	461a      	mov	r2, r3
 80044fe:	2101      	movs	r1, #1
 8004500:	f003 fee4 	bl	80082cc <USB_EP0_OutStart>
 8004504:	e006      	b.n	8004514 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	441a      	add	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	4619      	mov	r1, r3
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f007 fd16 	bl	800bf4c <HAL_PCD_DataOutStageCallback>
 8004520:	e046      	b.n	80045b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	4a26      	ldr	r2, [pc, #152]	@ (80045c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d124      	bne.n	8004574 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004540:	461a      	mov	r2, r3
 8004542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004546:	6093      	str	r3, [r2, #8]
 8004548:	e032      	b.n	80045b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b00      	cmp	r3, #0
 8004552:	d008      	beq.n	8004566 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004560:	461a      	mov	r2, r3
 8004562:	2320      	movs	r3, #32
 8004564:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	b2db      	uxtb	r3, r3
 800456a:	4619      	mov	r1, r3
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f007 fced 	bl	800bf4c <HAL_PCD_DataOutStageCallback>
 8004572:	e01d      	b.n	80045b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d114      	bne.n	80045a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	4613      	mov	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	4413      	add	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	440b      	add	r3, r1
 8004588:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d108      	bne.n	80045a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800459c:	461a      	mov	r2, r3
 800459e:	2100      	movs	r1, #0
 80045a0:	f003 fe94 	bl	80082cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	4619      	mov	r1, r3
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f007 fcce 	bl	800bf4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3720      	adds	r7, #32
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	4f54300a 	.word	0x4f54300a
 80045c0:	4f54310a 	.word	0x4f54310a

080045c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	333c      	adds	r3, #60	@ 0x3c
 80045dc:	3304      	adds	r3, #4
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4a15      	ldr	r2, [pc, #84]	@ (800464c <PCD_EP_OutSetupPacket_int+0x88>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d90e      	bls.n	8004618 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004600:	2b00      	cmp	r3, #0
 8004602:	d009      	beq.n	8004618 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	015a      	lsls	r2, r3, #5
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004610:	461a      	mov	r2, r3
 8004612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004616:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f007 fc85 	bl	800bf28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	4a0a      	ldr	r2, [pc, #40]	@ (800464c <PCD_EP_OutSetupPacket_int+0x88>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d90c      	bls.n	8004640 <PCD_EP_OutSetupPacket_int+0x7c>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	799b      	ldrb	r3, [r3, #6]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d108      	bne.n	8004640 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6818      	ldr	r0, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004638:	461a      	mov	r2, r3
 800463a:	2101      	movs	r1, #1
 800463c:	f003 fe46 	bl	80082cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	4f54300a 	.word	0x4f54300a

08004650 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	70fb      	strb	r3, [r7, #3]
 800465c:	4613      	mov	r3, r2
 800465e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004666:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d107      	bne.n	800467e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800466e:	883b      	ldrh	r3, [r7, #0]
 8004670:	0419      	lsls	r1, r3, #16
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	430a      	orrs	r2, r1
 800467a:	629a      	str	r2, [r3, #40]	@ 0x28
 800467c:	e028      	b.n	80046d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004684:	0c1b      	lsrs	r3, r3, #16
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	4413      	add	r3, r2
 800468a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800468c:	2300      	movs	r3, #0
 800468e:	73fb      	strb	r3, [r7, #15]
 8004690:	e00d      	b.n	80046ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	3340      	adds	r3, #64	@ 0x40
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	0c1b      	lsrs	r3, r3, #16
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	4413      	add	r3, r2
 80046a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
 80046aa:	3301      	adds	r3, #1
 80046ac:	73fb      	strb	r3, [r7, #15]
 80046ae:	7bfa      	ldrb	r2, [r7, #15]
 80046b0:	78fb      	ldrb	r3, [r7, #3]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d3ec      	bcc.n	8004692 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80046b8:	883b      	ldrh	r3, [r7, #0]
 80046ba:	0418      	lsls	r0, r3, #16
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6819      	ldr	r1, [r3, #0]
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	4302      	orrs	r2, r0
 80046c8:	3340      	adds	r3, #64	@ 0x40
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	460b      	mov	r3, r1
 80046e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	887a      	ldrh	r2, [r7, #2]
 80046f0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	460b      	mov	r3, r1
 800470a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e267      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d075      	beq.n	8004822 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004736:	4b88      	ldr	r3, [pc, #544]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 030c 	and.w	r3, r3, #12
 800473e:	2b04      	cmp	r3, #4
 8004740:	d00c      	beq.n	800475c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004742:	4b85      	ldr	r3, [pc, #532]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800474a:	2b08      	cmp	r3, #8
 800474c:	d112      	bne.n	8004774 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800474e:	4b82      	ldr	r3, [pc, #520]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004756:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800475a:	d10b      	bne.n	8004774 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800475c:	4b7e      	ldr	r3, [pc, #504]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d05b      	beq.n	8004820 <HAL_RCC_OscConfig+0x108>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d157      	bne.n	8004820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e242      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800477c:	d106      	bne.n	800478c <HAL_RCC_OscConfig+0x74>
 800477e:	4b76      	ldr	r3, [pc, #472]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a75      	ldr	r2, [pc, #468]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 8004784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004788:	6013      	str	r3, [r2, #0]
 800478a:	e01d      	b.n	80047c8 <HAL_RCC_OscConfig+0xb0>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004794:	d10c      	bne.n	80047b0 <HAL_RCC_OscConfig+0x98>
 8004796:	4b70      	ldr	r3, [pc, #448]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a6f      	ldr	r2, [pc, #444]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 800479c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a6c      	ldr	r2, [pc, #432]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 80047a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	e00b      	b.n	80047c8 <HAL_RCC_OscConfig+0xb0>
 80047b0:	4b69      	ldr	r3, [pc, #420]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a68      	ldr	r2, [pc, #416]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 80047b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047ba:	6013      	str	r3, [r2, #0]
 80047bc:	4b66      	ldr	r3, [pc, #408]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a65      	ldr	r2, [pc, #404]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 80047c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d013      	beq.n	80047f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d0:	f7fd fcf2 	bl	80021b8 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047d8:	f7fd fcee 	bl	80021b8 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b64      	cmp	r3, #100	@ 0x64
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e207      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0f0      	beq.n	80047d8 <HAL_RCC_OscConfig+0xc0>
 80047f6:	e014      	b.n	8004822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f8:	f7fd fcde 	bl	80021b8 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004800:	f7fd fcda 	bl	80021b8 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b64      	cmp	r3, #100	@ 0x64
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e1f3      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004812:	4b51      	ldr	r3, [pc, #324]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1f0      	bne.n	8004800 <HAL_RCC_OscConfig+0xe8>
 800481e:	e000      	b.n	8004822 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d063      	beq.n	80048f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800482e:	4b4a      	ldr	r3, [pc, #296]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00b      	beq.n	8004852 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800483a:	4b47      	ldr	r3, [pc, #284]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004842:	2b08      	cmp	r3, #8
 8004844:	d11c      	bne.n	8004880 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004846:	4b44      	ldr	r3, [pc, #272]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d116      	bne.n	8004880 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004852:	4b41      	ldr	r3, [pc, #260]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <HAL_RCC_OscConfig+0x152>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d001      	beq.n	800486a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e1c7      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486a:	4b3b      	ldr	r3, [pc, #236]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	00db      	lsls	r3, r3, #3
 8004878:	4937      	ldr	r1, [pc, #220]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 800487a:	4313      	orrs	r3, r2
 800487c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800487e:	e03a      	b.n	80048f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d020      	beq.n	80048ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004888:	4b34      	ldr	r3, [pc, #208]	@ (800495c <HAL_RCC_OscConfig+0x244>)
 800488a:	2201      	movs	r2, #1
 800488c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488e:	f7fd fc93 	bl	80021b8 <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004896:	f7fd fc8f 	bl	80021b8 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e1a8      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0f0      	beq.n	8004896 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b4:	4b28      	ldr	r3, [pc, #160]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	4925      	ldr	r1, [pc, #148]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	600b      	str	r3, [r1, #0]
 80048c8:	e015      	b.n	80048f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ca:	4b24      	ldr	r3, [pc, #144]	@ (800495c <HAL_RCC_OscConfig+0x244>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d0:	f7fd fc72 	bl	80021b8 <HAL_GetTick>
 80048d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048d6:	e008      	b.n	80048ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048d8:	f7fd fc6e 	bl	80021b8 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e187      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1f0      	bne.n	80048d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d036      	beq.n	8004970 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d016      	beq.n	8004938 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800490a:	4b15      	ldr	r3, [pc, #84]	@ (8004960 <HAL_RCC_OscConfig+0x248>)
 800490c:	2201      	movs	r2, #1
 800490e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004910:	f7fd fc52 	bl	80021b8 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004918:	f7fd fc4e 	bl	80021b8 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e167      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800492a:	4b0b      	ldr	r3, [pc, #44]	@ (8004958 <HAL_RCC_OscConfig+0x240>)
 800492c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d0f0      	beq.n	8004918 <HAL_RCC_OscConfig+0x200>
 8004936:	e01b      	b.n	8004970 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004938:	4b09      	ldr	r3, [pc, #36]	@ (8004960 <HAL_RCC_OscConfig+0x248>)
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800493e:	f7fd fc3b 	bl	80021b8 <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004944:	e00e      	b.n	8004964 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004946:	f7fd fc37 	bl	80021b8 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d907      	bls.n	8004964 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e150      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
 8004958:	40023800 	.word	0x40023800
 800495c:	42470000 	.word	0x42470000
 8004960:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004964:	4b88      	ldr	r3, [pc, #544]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004966:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1ea      	bne.n	8004946 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 8097 	beq.w	8004aac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800497e:	2300      	movs	r3, #0
 8004980:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004982:	4b81      	ldr	r3, [pc, #516]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10f      	bne.n	80049ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800498e:	2300      	movs	r3, #0
 8004990:	60bb      	str	r3, [r7, #8]
 8004992:	4b7d      	ldr	r3, [pc, #500]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004996:	4a7c      	ldr	r2, [pc, #496]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800499c:	6413      	str	r3, [r2, #64]	@ 0x40
 800499e:	4b7a      	ldr	r3, [pc, #488]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 80049a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049a6:	60bb      	str	r3, [r7, #8]
 80049a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049aa:	2301      	movs	r3, #1
 80049ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ae:	4b77      	ldr	r3, [pc, #476]	@ (8004b8c <HAL_RCC_OscConfig+0x474>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d118      	bne.n	80049ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049ba:	4b74      	ldr	r3, [pc, #464]	@ (8004b8c <HAL_RCC_OscConfig+0x474>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a73      	ldr	r2, [pc, #460]	@ (8004b8c <HAL_RCC_OscConfig+0x474>)
 80049c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049c6:	f7fd fbf7 	bl	80021b8 <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049cc:	e008      	b.n	80049e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ce:	f7fd fbf3 	bl	80021b8 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e10c      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e0:	4b6a      	ldr	r3, [pc, #424]	@ (8004b8c <HAL_RCC_OscConfig+0x474>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d0f0      	beq.n	80049ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d106      	bne.n	8004a02 <HAL_RCC_OscConfig+0x2ea>
 80049f4:	4b64      	ldr	r3, [pc, #400]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 80049f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f8:	4a63      	ldr	r2, [pc, #396]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a00:	e01c      	b.n	8004a3c <HAL_RCC_OscConfig+0x324>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2b05      	cmp	r3, #5
 8004a08:	d10c      	bne.n	8004a24 <HAL_RCC_OscConfig+0x30c>
 8004a0a:	4b5f      	ldr	r3, [pc, #380]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0e:	4a5e      	ldr	r2, [pc, #376]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a10:	f043 0304 	orr.w	r3, r3, #4
 8004a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a16:	4b5c      	ldr	r3, [pc, #368]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1a:	4a5b      	ldr	r2, [pc, #364]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a1c:	f043 0301 	orr.w	r3, r3, #1
 8004a20:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a22:	e00b      	b.n	8004a3c <HAL_RCC_OscConfig+0x324>
 8004a24:	4b58      	ldr	r3, [pc, #352]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a28:	4a57      	ldr	r2, [pc, #348]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a2a:	f023 0301 	bic.w	r3, r3, #1
 8004a2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a30:	4b55      	ldr	r3, [pc, #340]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a34:	4a54      	ldr	r2, [pc, #336]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a36:	f023 0304 	bic.w	r3, r3, #4
 8004a3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d015      	beq.n	8004a70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a44:	f7fd fbb8 	bl	80021b8 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4a:	e00a      	b.n	8004a62 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a4c:	f7fd fbb4 	bl	80021b8 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e0cb      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a62:	4b49      	ldr	r3, [pc, #292]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0ee      	beq.n	8004a4c <HAL_RCC_OscConfig+0x334>
 8004a6e:	e014      	b.n	8004a9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a70:	f7fd fba2 	bl	80021b8 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a76:	e00a      	b.n	8004a8e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a78:	f7fd fb9e 	bl	80021b8 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e0b5      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a8e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1ee      	bne.n	8004a78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a9a:	7dfb      	ldrb	r3, [r7, #23]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d105      	bne.n	8004aac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa0:	4b39      	ldr	r3, [pc, #228]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa4:	4a38      	ldr	r2, [pc, #224]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004aa6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aaa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 80a1 	beq.w	8004bf8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ab6:	4b34      	ldr	r3, [pc, #208]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 030c 	and.w	r3, r3, #12
 8004abe:	2b08      	cmp	r3, #8
 8004ac0:	d05c      	beq.n	8004b7c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d141      	bne.n	8004b4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aca:	4b31      	ldr	r3, [pc, #196]	@ (8004b90 <HAL_RCC_OscConfig+0x478>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad0:	f7fd fb72 	bl	80021b8 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad8:	f7fd fb6e 	bl	80021b8 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e087      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aea:	4b27      	ldr	r3, [pc, #156]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69da      	ldr	r2, [r3, #28]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b04:	019b      	lsls	r3, r3, #6
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0c:	085b      	lsrs	r3, r3, #1
 8004b0e:	3b01      	subs	r3, #1
 8004b10:	041b      	lsls	r3, r3, #16
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b18:	061b      	lsls	r3, r3, #24
 8004b1a:	491b      	ldr	r1, [pc, #108]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b20:	4b1b      	ldr	r3, [pc, #108]	@ (8004b90 <HAL_RCC_OscConfig+0x478>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b26:	f7fd fb47 	bl	80021b8 <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2e:	f7fd fb43 	bl	80021b8 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e05c      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b40:	4b11      	ldr	r3, [pc, #68]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0f0      	beq.n	8004b2e <HAL_RCC_OscConfig+0x416>
 8004b4c:	e054      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b4e:	4b10      	ldr	r3, [pc, #64]	@ (8004b90 <HAL_RCC_OscConfig+0x478>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b54:	f7fd fb30 	bl	80021b8 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b5c:	f7fd fb2c 	bl	80021b8 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e045      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6e:	4b06      	ldr	r3, [pc, #24]	@ (8004b88 <HAL_RCC_OscConfig+0x470>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCC_OscConfig+0x444>
 8004b7a:	e03d      	b.n	8004bf8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d107      	bne.n	8004b94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e038      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	40007000 	.word	0x40007000
 8004b90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b94:	4b1b      	ldr	r3, [pc, #108]	@ (8004c04 <HAL_RCC_OscConfig+0x4ec>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d028      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d121      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d11a      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d111      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bda:	085b      	lsrs	r3, r3, #1
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d107      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e000      	b.n	8004bfa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	40023800 	.word	0x40023800

08004c08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e0cc      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c1c:	4b68      	ldr	r3, [pc, #416]	@ (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d90c      	bls.n	8004c44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2a:	4b65      	ldr	r3, [pc, #404]	@ (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c2c:	683a      	ldr	r2, [r7, #0]
 8004c2e:	b2d2      	uxtb	r2, r2
 8004c30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c32:	4b63      	ldr	r3, [pc, #396]	@ (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e0b8      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d020      	beq.n	8004c92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c5c:	4b59      	ldr	r3, [pc, #356]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	4a58      	ldr	r2, [pc, #352]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c66:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c74:	4b53      	ldr	r3, [pc, #332]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	4a52      	ldr	r2, [pc, #328]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c80:	4b50      	ldr	r3, [pc, #320]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	494d      	ldr	r1, [pc, #308]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d044      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d107      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca6:	4b47      	ldr	r3, [pc, #284]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d119      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e07f      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d003      	beq.n	8004cc6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d107      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc6:	4b3f      	ldr	r3, [pc, #252]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d109      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e06f      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd6:	4b3b      	ldr	r3, [pc, #236]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e067      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ce6:	4b37      	ldr	r3, [pc, #220]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f023 0203 	bic.w	r2, r3, #3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	4934      	ldr	r1, [pc, #208]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cf8:	f7fd fa5e 	bl	80021b8 <HAL_GetTick>
 8004cfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cfe:	e00a      	b.n	8004d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d00:	f7fd fa5a 	bl	80021b8 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e04f      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d16:	4b2b      	ldr	r3, [pc, #172]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 020c 	and.w	r2, r3, #12
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d1eb      	bne.n	8004d00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d28:	4b25      	ldr	r3, [pc, #148]	@ (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d20c      	bcs.n	8004d50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d36:	4b22      	ldr	r3, [pc, #136]	@ (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3e:	4b20      	ldr	r3, [pc, #128]	@ (8004dc0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d001      	beq.n	8004d50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e032      	b.n	8004db6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d008      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d5c:	4b19      	ldr	r3, [pc, #100]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	4916      	ldr	r1, [pc, #88]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d009      	beq.n	8004d8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d7a:	4b12      	ldr	r3, [pc, #72]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	490e      	ldr	r1, [pc, #56]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d8e:	f000 f821 	bl	8004dd4 <HAL_RCC_GetSysClockFreq>
 8004d92:	4602      	mov	r2, r0
 8004d94:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	490a      	ldr	r1, [pc, #40]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004da0:	5ccb      	ldrb	r3, [r1, r3]
 8004da2:	fa22 f303 	lsr.w	r3, r2, r3
 8004da6:	4a09      	ldr	r2, [pc, #36]	@ (8004dcc <HAL_RCC_ClockConfig+0x1c4>)
 8004da8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004daa:	4b09      	ldr	r3, [pc, #36]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fd f9be 	bl	8002130 <HAL_InitTick>

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	40023c00 	.word	0x40023c00
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	0800c5b4 	.word	0x0800c5b4
 8004dcc:	2000000c 	.word	0x2000000c
 8004dd0:	20000010 	.word	0x20000010

08004dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd8:	b094      	sub	sp, #80	@ 0x50
 8004dda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004dec:	4b79      	ldr	r3, [pc, #484]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f003 030c 	and.w	r3, r3, #12
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d00d      	beq.n	8004e14 <HAL_RCC_GetSysClockFreq+0x40>
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	f200 80e1 	bhi.w	8004fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d002      	beq.n	8004e08 <HAL_RCC_GetSysClockFreq+0x34>
 8004e02:	2b04      	cmp	r3, #4
 8004e04:	d003      	beq.n	8004e0e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e06:	e0db      	b.n	8004fc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e08:	4b73      	ldr	r3, [pc, #460]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e0c:	e0db      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e0e:	4b73      	ldr	r3, [pc, #460]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x208>)
 8004e10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e12:	e0d8      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e14:	4b6f      	ldr	r3, [pc, #444]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e1e:	4b6d      	ldr	r3, [pc, #436]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d063      	beq.n	8004ef2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e2a:	4b6a      	ldr	r3, [pc, #424]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	099b      	lsrs	r3, r3, #6
 8004e30:	2200      	movs	r2, #0
 8004e32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e3e:	2300      	movs	r3, #0
 8004e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004e46:	4622      	mov	r2, r4
 8004e48:	462b      	mov	r3, r5
 8004e4a:	f04f 0000 	mov.w	r0, #0
 8004e4e:	f04f 0100 	mov.w	r1, #0
 8004e52:	0159      	lsls	r1, r3, #5
 8004e54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e58:	0150      	lsls	r0, r2, #5
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	4621      	mov	r1, r4
 8004e60:	1a51      	subs	r1, r2, r1
 8004e62:	6139      	str	r1, [r7, #16]
 8004e64:	4629      	mov	r1, r5
 8004e66:	eb63 0301 	sbc.w	r3, r3, r1
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	f04f 0200 	mov.w	r2, #0
 8004e70:	f04f 0300 	mov.w	r3, #0
 8004e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e78:	4659      	mov	r1, fp
 8004e7a:	018b      	lsls	r3, r1, #6
 8004e7c:	4651      	mov	r1, sl
 8004e7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e82:	4651      	mov	r1, sl
 8004e84:	018a      	lsls	r2, r1, #6
 8004e86:	4651      	mov	r1, sl
 8004e88:	ebb2 0801 	subs.w	r8, r2, r1
 8004e8c:	4659      	mov	r1, fp
 8004e8e:	eb63 0901 	sbc.w	r9, r3, r1
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ea6:	4690      	mov	r8, r2
 8004ea8:	4699      	mov	r9, r3
 8004eaa:	4623      	mov	r3, r4
 8004eac:	eb18 0303 	adds.w	r3, r8, r3
 8004eb0:	60bb      	str	r3, [r7, #8]
 8004eb2:	462b      	mov	r3, r5
 8004eb4:	eb49 0303 	adc.w	r3, r9, r3
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	f04f 0200 	mov.w	r2, #0
 8004ebe:	f04f 0300 	mov.w	r3, #0
 8004ec2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	024b      	lsls	r3, r1, #9
 8004eca:	4621      	mov	r1, r4
 8004ecc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	024a      	lsls	r2, r1, #9
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eda:	2200      	movs	r2, #0
 8004edc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ede:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ee0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ee4:	f7fb f970 	bl	80001c8 <__aeabi_uldivmod>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4613      	mov	r3, r2
 8004eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ef0:	e058      	b.n	8004fa4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef2:	4b38      	ldr	r3, [pc, #224]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	099b      	lsrs	r3, r3, #6
 8004ef8:	2200      	movs	r2, #0
 8004efa:	4618      	mov	r0, r3
 8004efc:	4611      	mov	r1, r2
 8004efe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f02:	623b      	str	r3, [r7, #32]
 8004f04:	2300      	movs	r3, #0
 8004f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f0c:	4642      	mov	r2, r8
 8004f0e:	464b      	mov	r3, r9
 8004f10:	f04f 0000 	mov.w	r0, #0
 8004f14:	f04f 0100 	mov.w	r1, #0
 8004f18:	0159      	lsls	r1, r3, #5
 8004f1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f1e:	0150      	lsls	r0, r2, #5
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4641      	mov	r1, r8
 8004f26:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f44:	ebb2 040a 	subs.w	r4, r2, sl
 8004f48:	eb63 050b 	sbc.w	r5, r3, fp
 8004f4c:	f04f 0200 	mov.w	r2, #0
 8004f50:	f04f 0300 	mov.w	r3, #0
 8004f54:	00eb      	lsls	r3, r5, #3
 8004f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f5a:	00e2      	lsls	r2, r4, #3
 8004f5c:	4614      	mov	r4, r2
 8004f5e:	461d      	mov	r5, r3
 8004f60:	4643      	mov	r3, r8
 8004f62:	18e3      	adds	r3, r4, r3
 8004f64:	603b      	str	r3, [r7, #0]
 8004f66:	464b      	mov	r3, r9
 8004f68:	eb45 0303 	adc.w	r3, r5, r3
 8004f6c:	607b      	str	r3, [r7, #4]
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f7a:	4629      	mov	r1, r5
 8004f7c:	028b      	lsls	r3, r1, #10
 8004f7e:	4621      	mov	r1, r4
 8004f80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f84:	4621      	mov	r1, r4
 8004f86:	028a      	lsls	r2, r1, #10
 8004f88:	4610      	mov	r0, r2
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f8e:	2200      	movs	r2, #0
 8004f90:	61bb      	str	r3, [r7, #24]
 8004f92:	61fa      	str	r2, [r7, #28]
 8004f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f98:	f7fb f916 	bl	80001c8 <__aeabi_uldivmod>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	0c1b      	lsrs	r3, r3, #16
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	3301      	adds	r3, #1
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004fb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fbe:	e002      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fc0:	4b05      	ldr	r3, [pc, #20]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3750      	adds	r7, #80	@ 0x50
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	00f42400 	.word	0x00f42400
 8004fdc:	007a1200 	.word	0x007a1200

08004fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe4:	4b03      	ldr	r3, [pc, #12]	@ (8004ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	2000000c 	.word	0x2000000c

08004ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ffc:	f7ff fff0 	bl	8004fe0 <HAL_RCC_GetHCLKFreq>
 8005000:	4602      	mov	r2, r0
 8005002:	4b05      	ldr	r3, [pc, #20]	@ (8005018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	0a9b      	lsrs	r3, r3, #10
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	4903      	ldr	r1, [pc, #12]	@ (800501c <HAL_RCC_GetPCLK1Freq+0x24>)
 800500e:	5ccb      	ldrb	r3, [r1, r3]
 8005010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005014:	4618      	mov	r0, r3
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40023800 	.word	0x40023800
 800501c:	0800c5c4 	.word	0x0800c5c4

08005020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005024:	f7ff ffdc 	bl	8004fe0 <HAL_RCC_GetHCLKFreq>
 8005028:	4602      	mov	r2, r0
 800502a:	4b05      	ldr	r3, [pc, #20]	@ (8005040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	0b5b      	lsrs	r3, r3, #13
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	4903      	ldr	r1, [pc, #12]	@ (8005044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005036:	5ccb      	ldrb	r3, [r1, r3]
 8005038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800503c:	4618      	mov	r0, r3
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40023800 	.word	0x40023800
 8005044:	0800c5c4 	.word	0x0800c5c4

08005048 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e07b      	b.n	8005152 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505e:	2b00      	cmp	r3, #0
 8005060:	d108      	bne.n	8005074 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800506a:	d009      	beq.n	8005080 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	61da      	str	r2, [r3, #28]
 8005072:	e005      	b.n	8005080 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fc fb72 	bl	8001784 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80050c8:	431a      	orrs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050fa:	431a      	orrs	r2, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005104:	ea42 0103 	orr.w	r1, r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800510c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	0c1b      	lsrs	r3, r3, #16
 800511e:	f003 0104 	and.w	r1, r3, #4
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005126:	f003 0210 	and.w	r2, r3, #16
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69da      	ldr	r2, [r3, #28]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005140:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b082      	sub	sp, #8
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d101      	bne.n	800516c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e041      	b.n	80051f0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b00      	cmp	r3, #0
 8005176:	d106      	bne.n	8005186 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f7fc fd15 	bl	8001bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2202      	movs	r2, #2
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3304      	adds	r3, #4
 8005196:	4619      	mov	r1, r3
 8005198:	4610      	mov	r0, r2
 800519a:	f000 fb3b 	bl	8005814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e041      	b.n	800528e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7fc fc8e 	bl	8001b40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3304      	adds	r3, #4
 8005234:	4619      	mov	r1, r3
 8005236:	4610      	mov	r0, r2
 8005238:	f000 faec 	bl	8005814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d109      	bne.n	80052bc <HAL_TIM_PWM_Start+0x24>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	bf14      	ite	ne
 80052b4:	2301      	movne	r3, #1
 80052b6:	2300      	moveq	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	e022      	b.n	8005302 <HAL_TIM_PWM_Start+0x6a>
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d109      	bne.n	80052d6 <HAL_TIM_PWM_Start+0x3e>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	bf14      	ite	ne
 80052ce:	2301      	movne	r3, #1
 80052d0:	2300      	moveq	r3, #0
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	e015      	b.n	8005302 <HAL_TIM_PWM_Start+0x6a>
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d109      	bne.n	80052f0 <HAL_TIM_PWM_Start+0x58>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	bf14      	ite	ne
 80052e8:	2301      	movne	r3, #1
 80052ea:	2300      	moveq	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	e008      	b.n	8005302 <HAL_TIM_PWM_Start+0x6a>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	bf14      	ite	ne
 80052fc:	2301      	movne	r3, #1
 80052fe:	2300      	moveq	r3, #0
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005306:	2301      	movs	r3, #1
 8005308:	e07c      	b.n	8005404 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d104      	bne.n	800531a <HAL_TIM_PWM_Start+0x82>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005318:	e013      	b.n	8005342 <HAL_TIM_PWM_Start+0xaa>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b04      	cmp	r3, #4
 800531e:	d104      	bne.n	800532a <HAL_TIM_PWM_Start+0x92>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005328:	e00b      	b.n	8005342 <HAL_TIM_PWM_Start+0xaa>
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b08      	cmp	r3, #8
 800532e:	d104      	bne.n	800533a <HAL_TIM_PWM_Start+0xa2>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005338:	e003      	b.n	8005342 <HAL_TIM_PWM_Start+0xaa>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2202      	movs	r2, #2
 800533e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2201      	movs	r2, #1
 8005348:	6839      	ldr	r1, [r7, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f000 fcbe 	bl	8005ccc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a2d      	ldr	r2, [pc, #180]	@ (800540c <HAL_TIM_PWM_Start+0x174>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d004      	beq.n	8005364 <HAL_TIM_PWM_Start+0xcc>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a2c      	ldr	r2, [pc, #176]	@ (8005410 <HAL_TIM_PWM_Start+0x178>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d101      	bne.n	8005368 <HAL_TIM_PWM_Start+0xd0>
 8005364:	2301      	movs	r3, #1
 8005366:	e000      	b.n	800536a <HAL_TIM_PWM_Start+0xd2>
 8005368:	2300      	movs	r3, #0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d007      	beq.n	800537e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800537c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a22      	ldr	r2, [pc, #136]	@ (800540c <HAL_TIM_PWM_Start+0x174>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d022      	beq.n	80053ce <HAL_TIM_PWM_Start+0x136>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005390:	d01d      	beq.n	80053ce <HAL_TIM_PWM_Start+0x136>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1f      	ldr	r2, [pc, #124]	@ (8005414 <HAL_TIM_PWM_Start+0x17c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d018      	beq.n	80053ce <HAL_TIM_PWM_Start+0x136>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005418 <HAL_TIM_PWM_Start+0x180>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d013      	beq.n	80053ce <HAL_TIM_PWM_Start+0x136>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1c      	ldr	r2, [pc, #112]	@ (800541c <HAL_TIM_PWM_Start+0x184>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d00e      	beq.n	80053ce <HAL_TIM_PWM_Start+0x136>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a16      	ldr	r2, [pc, #88]	@ (8005410 <HAL_TIM_PWM_Start+0x178>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d009      	beq.n	80053ce <HAL_TIM_PWM_Start+0x136>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a18      	ldr	r2, [pc, #96]	@ (8005420 <HAL_TIM_PWM_Start+0x188>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d004      	beq.n	80053ce <HAL_TIM_PWM_Start+0x136>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a16      	ldr	r2, [pc, #88]	@ (8005424 <HAL_TIM_PWM_Start+0x18c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d111      	bne.n	80053f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b06      	cmp	r3, #6
 80053de:	d010      	beq.n	8005402 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0201 	orr.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f0:	e007      	b.n	8005402 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0201 	orr.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40010000 	.word	0x40010000
 8005410:	40010400 	.word	0x40010400
 8005414:	40000400 	.word	0x40000400
 8005418:	40000800 	.word	0x40000800
 800541c:	40000c00 	.word	0x40000c00
 8005420:	40014000 	.word	0x40014000
 8005424:	40001800 	.word	0x40001800

08005428 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e097      	b.n	800556c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d106      	bne.n	8005456 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7fc f9ff 	bl	8001854 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2202      	movs	r2, #2
 800545a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	6812      	ldr	r2, [r2, #0]
 8005468:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800546c:	f023 0307 	bic.w	r3, r3, #7
 8005470:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	3304      	adds	r3, #4
 800547a:	4619      	mov	r1, r3
 800547c:	4610      	mov	r0, r2
 800547e:	f000 f9c9 	bl	8005814 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054aa:	f023 0303 	bic.w	r3, r3, #3
 80054ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	4313      	orrs	r3, r2
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80054c8:	f023 030c 	bic.w	r3, r3, #12
 80054cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	021b      	lsls	r3, r3, #8
 80054e4:	4313      	orrs	r3, r2
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	011a      	lsls	r2, r3, #4
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	031b      	lsls	r3, r3, #12
 80054f8:	4313      	orrs	r3, r2
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005506:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800550e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	4313      	orrs	r3, r2
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3718      	adds	r7, #24
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005584:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800558c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005594:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800559c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d110      	bne.n	80055c6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d102      	bne.n	80055b0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80055aa:	7b7b      	ldrb	r3, [r7, #13]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d001      	beq.n	80055b4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e069      	b.n	8005688 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055c4:	e031      	b.n	800562a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d110      	bne.n	80055ee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055cc:	7bbb      	ldrb	r3, [r7, #14]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d102      	bne.n	80055d8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055d2:	7b3b      	ldrb	r3, [r7, #12]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d001      	beq.n	80055dc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e055      	b.n	8005688 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055ec:	e01d      	b.n	800562a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055ee:	7bfb      	ldrb	r3, [r7, #15]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d108      	bne.n	8005606 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055f4:	7bbb      	ldrb	r3, [r7, #14]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d105      	bne.n	8005606 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055fa:	7b7b      	ldrb	r3, [r7, #13]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d102      	bne.n	8005606 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005600:	7b3b      	ldrb	r3, [r7, #12]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d001      	beq.n	800560a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e03e      	b.n	8005688 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2202      	movs	r2, #2
 800560e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2202      	movs	r2, #2
 8005616:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2202      	movs	r2, #2
 800561e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2202      	movs	r2, #2
 8005626:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <HAL_TIM_Encoder_Start+0xc4>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	2b04      	cmp	r3, #4
 8005634:	d008      	beq.n	8005648 <HAL_TIM_Encoder_Start+0xd4>
 8005636:	e00f      	b.n	8005658 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2201      	movs	r2, #1
 800563e:	2100      	movs	r1, #0
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fb43 	bl	8005ccc <TIM_CCxChannelCmd>
      break;
 8005646:	e016      	b.n	8005676 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2201      	movs	r2, #1
 800564e:	2104      	movs	r1, #4
 8005650:	4618      	mov	r0, r3
 8005652:	f000 fb3b 	bl	8005ccc <TIM_CCxChannelCmd>
      break;
 8005656:	e00e      	b.n	8005676 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2201      	movs	r2, #1
 800565e:	2100      	movs	r1, #0
 8005660:	4618      	mov	r0, r3
 8005662:	f000 fb33 	bl	8005ccc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2201      	movs	r2, #1
 800566c:	2104      	movs	r1, #4
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fb2c 	bl	8005ccc <TIM_CCxChannelCmd>
      break;
 8005674:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f042 0201 	orr.w	r2, r2, #1
 8005684:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800569c:	2300      	movs	r3, #0
 800569e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d101      	bne.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056aa:	2302      	movs	r3, #2
 80056ac:	e0ae      	b.n	800580c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b0c      	cmp	r3, #12
 80056ba:	f200 809f 	bhi.w	80057fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80056be:	a201      	add	r2, pc, #4	@ (adr r2, 80056c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c4:	080056f9 	.word	0x080056f9
 80056c8:	080057fd 	.word	0x080057fd
 80056cc:	080057fd 	.word	0x080057fd
 80056d0:	080057fd 	.word	0x080057fd
 80056d4:	08005739 	.word	0x08005739
 80056d8:	080057fd 	.word	0x080057fd
 80056dc:	080057fd 	.word	0x080057fd
 80056e0:	080057fd 	.word	0x080057fd
 80056e4:	0800577b 	.word	0x0800577b
 80056e8:	080057fd 	.word	0x080057fd
 80056ec:	080057fd 	.word	0x080057fd
 80056f0:	080057fd 	.word	0x080057fd
 80056f4:	080057bb 	.word	0x080057bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68b9      	ldr	r1, [r7, #8]
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 f934 	bl	800596c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	699a      	ldr	r2, [r3, #24]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f042 0208 	orr.w	r2, r2, #8
 8005712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	699a      	ldr	r2, [r3, #24]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0204 	bic.w	r2, r2, #4
 8005722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6999      	ldr	r1, [r3, #24]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	691a      	ldr	r2, [r3, #16]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	619a      	str	r2, [r3, #24]
      break;
 8005736:	e064      	b.n	8005802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68b9      	ldr	r1, [r7, #8]
 800573e:	4618      	mov	r0, r3
 8005740:	f000 f984 	bl	8005a4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699a      	ldr	r2, [r3, #24]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699a      	ldr	r2, [r3, #24]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6999      	ldr	r1, [r3, #24]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	021a      	lsls	r2, r3, #8
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	430a      	orrs	r2, r1
 8005776:	619a      	str	r2, [r3, #24]
      break;
 8005778:	e043      	b.n	8005802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68b9      	ldr	r1, [r7, #8]
 8005780:	4618      	mov	r0, r3
 8005782:	f000 f9d9 	bl	8005b38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69da      	ldr	r2, [r3, #28]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0208 	orr.w	r2, r2, #8
 8005794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69da      	ldr	r2, [r3, #28]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0204 	bic.w	r2, r2, #4
 80057a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69d9      	ldr	r1, [r3, #28]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	691a      	ldr	r2, [r3, #16]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	61da      	str	r2, [r3, #28]
      break;
 80057b8:	e023      	b.n	8005802 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68b9      	ldr	r1, [r7, #8]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 fa2d 	bl	8005c20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69da      	ldr	r2, [r3, #28]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69da      	ldr	r2, [r3, #28]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69d9      	ldr	r1, [r3, #28]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	021a      	lsls	r2, r3, #8
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	61da      	str	r2, [r3, #28]
      break;
 80057fa:	e002      	b.n	8005802 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005800:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800580a:	7dfb      	ldrb	r3, [r7, #23]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a46      	ldr	r2, [pc, #280]	@ (8005940 <TIM_Base_SetConfig+0x12c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d013      	beq.n	8005854 <TIM_Base_SetConfig+0x40>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005832:	d00f      	beq.n	8005854 <TIM_Base_SetConfig+0x40>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a43      	ldr	r2, [pc, #268]	@ (8005944 <TIM_Base_SetConfig+0x130>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00b      	beq.n	8005854 <TIM_Base_SetConfig+0x40>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a42      	ldr	r2, [pc, #264]	@ (8005948 <TIM_Base_SetConfig+0x134>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d007      	beq.n	8005854 <TIM_Base_SetConfig+0x40>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a41      	ldr	r2, [pc, #260]	@ (800594c <TIM_Base_SetConfig+0x138>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d003      	beq.n	8005854 <TIM_Base_SetConfig+0x40>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a40      	ldr	r2, [pc, #256]	@ (8005950 <TIM_Base_SetConfig+0x13c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d108      	bne.n	8005866 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800585a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a35      	ldr	r2, [pc, #212]	@ (8005940 <TIM_Base_SetConfig+0x12c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d02b      	beq.n	80058c6 <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005874:	d027      	beq.n	80058c6 <TIM_Base_SetConfig+0xb2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a32      	ldr	r2, [pc, #200]	@ (8005944 <TIM_Base_SetConfig+0x130>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d023      	beq.n	80058c6 <TIM_Base_SetConfig+0xb2>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a31      	ldr	r2, [pc, #196]	@ (8005948 <TIM_Base_SetConfig+0x134>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d01f      	beq.n	80058c6 <TIM_Base_SetConfig+0xb2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a30      	ldr	r2, [pc, #192]	@ (800594c <TIM_Base_SetConfig+0x138>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d01b      	beq.n	80058c6 <TIM_Base_SetConfig+0xb2>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a2f      	ldr	r2, [pc, #188]	@ (8005950 <TIM_Base_SetConfig+0x13c>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d017      	beq.n	80058c6 <TIM_Base_SetConfig+0xb2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a2e      	ldr	r2, [pc, #184]	@ (8005954 <TIM_Base_SetConfig+0x140>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d013      	beq.n	80058c6 <TIM_Base_SetConfig+0xb2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005958 <TIM_Base_SetConfig+0x144>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d00f      	beq.n	80058c6 <TIM_Base_SetConfig+0xb2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a2c      	ldr	r2, [pc, #176]	@ (800595c <TIM_Base_SetConfig+0x148>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d00b      	beq.n	80058c6 <TIM_Base_SetConfig+0xb2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a2b      	ldr	r2, [pc, #172]	@ (8005960 <TIM_Base_SetConfig+0x14c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d007      	beq.n	80058c6 <TIM_Base_SetConfig+0xb2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005964 <TIM_Base_SetConfig+0x150>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d003      	beq.n	80058c6 <TIM_Base_SetConfig+0xb2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a29      	ldr	r2, [pc, #164]	@ (8005968 <TIM_Base_SetConfig+0x154>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d108      	bne.n	80058d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	689a      	ldr	r2, [r3, #8]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a10      	ldr	r2, [pc, #64]	@ (8005940 <TIM_Base_SetConfig+0x12c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d003      	beq.n	800590c <TIM_Base_SetConfig+0xf8>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a12      	ldr	r2, [pc, #72]	@ (8005950 <TIM_Base_SetConfig+0x13c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d103      	bne.n	8005914 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b01      	cmp	r3, #1
 8005924:	d105      	bne.n	8005932 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f023 0201 	bic.w	r2, r3, #1
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	611a      	str	r2, [r3, #16]
  }
}
 8005932:	bf00      	nop
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	40010000 	.word	0x40010000
 8005944:	40000400 	.word	0x40000400
 8005948:	40000800 	.word	0x40000800
 800594c:	40000c00 	.word	0x40000c00
 8005950:	40010400 	.word	0x40010400
 8005954:	40014000 	.word	0x40014000
 8005958:	40014400 	.word	0x40014400
 800595c:	40014800 	.word	0x40014800
 8005960:	40001800 	.word	0x40001800
 8005964:	40001c00 	.word	0x40001c00
 8005968:	40002000 	.word	0x40002000

0800596c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800596c:	b480      	push	{r7}
 800596e:	b087      	sub	sp, #28
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a1b      	ldr	r3, [r3, #32]
 8005980:	f023 0201 	bic.w	r2, r3, #1
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800599a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0303 	bic.w	r3, r3, #3
 80059a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f023 0302 	bic.w	r3, r3, #2
 80059b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	4313      	orrs	r3, r2
 80059be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a20      	ldr	r2, [pc, #128]	@ (8005a44 <TIM_OC1_SetConfig+0xd8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d003      	beq.n	80059d0 <TIM_OC1_SetConfig+0x64>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a1f      	ldr	r2, [pc, #124]	@ (8005a48 <TIM_OC1_SetConfig+0xdc>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d10c      	bne.n	80059ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f023 0308 	bic.w	r3, r3, #8
 80059d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	4313      	orrs	r3, r2
 80059e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f023 0304 	bic.w	r3, r3, #4
 80059e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a15      	ldr	r2, [pc, #84]	@ (8005a44 <TIM_OC1_SetConfig+0xd8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d003      	beq.n	80059fa <TIM_OC1_SetConfig+0x8e>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a14      	ldr	r2, [pc, #80]	@ (8005a48 <TIM_OC1_SetConfig+0xdc>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d111      	bne.n	8005a1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	621a      	str	r2, [r3, #32]
}
 8005a38:	bf00      	nop
 8005a3a:	371c      	adds	r7, #28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	40010000 	.word	0x40010000
 8005a48:	40010400 	.word	0x40010400

08005a4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a1b      	ldr	r3, [r3, #32]
 8005a60:	f023 0210 	bic.w	r2, r3, #16
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	021b      	lsls	r3, r3, #8
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	f023 0320 	bic.w	r3, r3, #32
 8005a96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	011b      	lsls	r3, r3, #4
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a22      	ldr	r2, [pc, #136]	@ (8005b30 <TIM_OC2_SetConfig+0xe4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d003      	beq.n	8005ab4 <TIM_OC2_SetConfig+0x68>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a21      	ldr	r2, [pc, #132]	@ (8005b34 <TIM_OC2_SetConfig+0xe8>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d10d      	bne.n	8005ad0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ace:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a17      	ldr	r2, [pc, #92]	@ (8005b30 <TIM_OC2_SetConfig+0xe4>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d003      	beq.n	8005ae0 <TIM_OC2_SetConfig+0x94>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a16      	ldr	r2, [pc, #88]	@ (8005b34 <TIM_OC2_SetConfig+0xe8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d113      	bne.n	8005b08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ae6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005aee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	699b      	ldr	r3, [r3, #24]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	693a      	ldr	r2, [r7, #16]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	621a      	str	r2, [r3, #32]
}
 8005b22:	bf00      	nop
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	40010000 	.word	0x40010000
 8005b34:	40010400 	.word	0x40010400

08005b38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f023 0303 	bic.w	r3, r3, #3
 8005b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a21      	ldr	r2, [pc, #132]	@ (8005c18 <TIM_OC3_SetConfig+0xe0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d003      	beq.n	8005b9e <TIM_OC3_SetConfig+0x66>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a20      	ldr	r2, [pc, #128]	@ (8005c1c <TIM_OC3_SetConfig+0xe4>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d10d      	bne.n	8005bba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ba4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	021b      	lsls	r3, r3, #8
 8005bac:	697a      	ldr	r2, [r7, #20]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a16      	ldr	r2, [pc, #88]	@ (8005c18 <TIM_OC3_SetConfig+0xe0>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d003      	beq.n	8005bca <TIM_OC3_SetConfig+0x92>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a15      	ldr	r2, [pc, #84]	@ (8005c1c <TIM_OC3_SetConfig+0xe4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d113      	bne.n	8005bf2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	011b      	lsls	r3, r3, #4
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	621a      	str	r2, [r3, #32]
}
 8005c0c:	bf00      	nop
 8005c0e:	371c      	adds	r7, #28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	40010000 	.word	0x40010000
 8005c1c:	40010400 	.word	0x40010400

08005c20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a1b      	ldr	r3, [r3, #32]
 8005c34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	021b      	lsls	r3, r3, #8
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	031b      	lsls	r3, r3, #12
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a12      	ldr	r2, [pc, #72]	@ (8005cc4 <TIM_OC4_SetConfig+0xa4>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d003      	beq.n	8005c88 <TIM_OC4_SetConfig+0x68>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a11      	ldr	r2, [pc, #68]	@ (8005cc8 <TIM_OC4_SetConfig+0xa8>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d109      	bne.n	8005c9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	019b      	lsls	r3, r3, #6
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	697a      	ldr	r2, [r7, #20]
 8005ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	621a      	str	r2, [r3, #32]
}
 8005cb6:	bf00      	nop
 8005cb8:	371c      	adds	r7, #28
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	40010000 	.word	0x40010000
 8005cc8:	40010400 	.word	0x40010400

08005ccc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	f003 031f 	and.w	r3, r3, #31
 8005cde:	2201      	movs	r2, #1
 8005ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6a1a      	ldr	r2, [r3, #32]
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	43db      	mvns	r3, r3
 8005cee:	401a      	ands	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6a1a      	ldr	r2, [r3, #32]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	f003 031f 	and.w	r3, r3, #31
 8005cfe:	6879      	ldr	r1, [r7, #4]
 8005d00:	fa01 f303 	lsl.w	r3, r1, r3
 8005d04:	431a      	orrs	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	621a      	str	r2, [r3, #32]
}
 8005d0a:	bf00      	nop
 8005d0c:	371c      	adds	r7, #28
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr
	...

08005d18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d101      	bne.n	8005d30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	e05a      	b.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a21      	ldr	r2, [pc, #132]	@ (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d022      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d7c:	d01d      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a1d      	ldr	r2, [pc, #116]	@ (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d018      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d013      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1a      	ldr	r2, [pc, #104]	@ (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00e      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a18      	ldr	r2, [pc, #96]	@ (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d009      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a17      	ldr	r2, [pc, #92]	@ (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d004      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a15      	ldr	r2, [pc, #84]	@ (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d10c      	bne.n	8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40010000 	.word	0x40010000
 8005df8:	40000400 	.word	0x40000400
 8005dfc:	40000800 	.word	0x40000800
 8005e00:	40000c00 	.word	0x40000c00
 8005e04:	40010400 	.word	0x40010400
 8005e08:	40014000 	.word	0x40014000
 8005e0c:	40001800 	.word	0x40001800

08005e10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e042      	b.n	8005ea8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d106      	bne.n	8005e3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7fc f81c 	bl	8001e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2224      	movs	r2, #36	@ 0x24
 8005e40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68da      	ldr	r2, [r3, #12]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fd0d 	bl	8006874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	691a      	ldr	r2, [r3, #16]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	695a      	ldr	r2, [r3, #20]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d101      	bne.n	8005ec2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	e024      	b.n	8005f0c <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2224      	movs	r2, #36	@ 0x24
 8005ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ed8:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7fc f850 	bl	8001f80 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b20      	cmp	r3, #32
 8005f2c:	d112      	bne.n	8005f54 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <HAL_UART_Receive_IT+0x26>
 8005f34:	88fb      	ldrh	r3, [r7, #6]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e00b      	b.n	8005f56 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f44:	88fb      	ldrh	r3, [r7, #6]
 8005f46:	461a      	mov	r2, r3
 8005f48:	68b9      	ldr	r1, [r7, #8]
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 faba 	bl	80064c4 <UART_Start_Receive_IT>
 8005f50:	4603      	mov	r3, r0
 8005f52:	e000      	b.n	8005f56 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005f54:	2302      	movs	r3, #2
  }
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b0ba      	sub	sp, #232	@ 0xe8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10f      	bne.n	8005fc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005faa:	f003 0320 	and.w	r3, r3, #32
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d009      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x66>
 8005fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fb6:	f003 0320 	and.w	r3, r3, #32
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d003      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fb99 	bl	80066f6 <UART_Receive_IT>
      return;
 8005fc4:	e25b      	b.n	800647e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 80de 	beq.w	800618c <HAL_UART_IRQHandler+0x22c>
 8005fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d106      	bne.n	8005fea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fe0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 80d1 	beq.w	800618c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00b      	beq.n	800600e <HAL_UART_IRQHandler+0xae>
 8005ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d005      	beq.n	800600e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006006:	f043 0201 	orr.w	r2, r3, #1
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800600e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006012:	f003 0304 	and.w	r3, r3, #4
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00b      	beq.n	8006032 <HAL_UART_IRQHandler+0xd2>
 800601a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	d005      	beq.n	8006032 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800602a:	f043 0202 	orr.w	r2, r3, #2
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00b      	beq.n	8006056 <HAL_UART_IRQHandler+0xf6>
 800603e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800604e:	f043 0204 	orr.w	r2, r3, #4
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800605a:	f003 0308 	and.w	r3, r3, #8
 800605e:	2b00      	cmp	r3, #0
 8006060:	d011      	beq.n	8006086 <HAL_UART_IRQHandler+0x126>
 8006062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006066:	f003 0320 	and.w	r3, r3, #32
 800606a:	2b00      	cmp	r3, #0
 800606c:	d105      	bne.n	800607a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800606e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	d005      	beq.n	8006086 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800607e:	f043 0208 	orr.w	r2, r3, #8
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 81f2 	beq.w	8006474 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006094:	f003 0320 	and.w	r3, r3, #32
 8006098:	2b00      	cmp	r3, #0
 800609a:	d008      	beq.n	80060ae <HAL_UART_IRQHandler+0x14e>
 800609c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060a0:	f003 0320 	and.w	r3, r3, #32
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fb24 	bl	80066f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b8:	2b40      	cmp	r3, #64	@ 0x40
 80060ba:	bf0c      	ite	eq
 80060bc:	2301      	moveq	r3, #1
 80060be:	2300      	movne	r3, #0
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d103      	bne.n	80060da <HAL_UART_IRQHandler+0x17a>
 80060d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d04f      	beq.n	800617a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 fa2c 	bl	8006538 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ea:	2b40      	cmp	r3, #64	@ 0x40
 80060ec:	d141      	bne.n	8006172 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	3314      	adds	r3, #20
 80060f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060fc:	e853 3f00 	ldrex	r3, [r3]
 8006100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006104:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006108:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800610c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3314      	adds	r3, #20
 8006116:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800611a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800611e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006122:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006126:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800612a:	e841 2300 	strex	r3, r2, [r1]
 800612e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1d9      	bne.n	80060ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800613e:	2b00      	cmp	r3, #0
 8006140:	d013      	beq.n	800616a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006146:	4a7e      	ldr	r2, [pc, #504]	@ (8006340 <HAL_UART_IRQHandler+0x3e0>)
 8006148:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614e:	4618      	mov	r0, r3
 8006150:	f7fc fc77 	bl	8002a42 <HAL_DMA_Abort_IT>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d016      	beq.n	8006188 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800615e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006164:	4610      	mov	r0, r2
 8006166:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006168:	e00e      	b.n	8006188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f994 	bl	8006498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006170:	e00a      	b.n	8006188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f990 	bl	8006498 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006178:	e006      	b.n	8006188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f98c 	bl	8006498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006186:	e175      	b.n	8006474 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006188:	bf00      	nop
    return;
 800618a:	e173      	b.n	8006474 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006190:	2b01      	cmp	r3, #1
 8006192:	f040 814f 	bne.w	8006434 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800619a:	f003 0310 	and.w	r3, r3, #16
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 8148 	beq.w	8006434 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80061a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061a8:	f003 0310 	and.w	r3, r3, #16
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	f000 8141 	beq.w	8006434 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80061b2:	2300      	movs	r3, #0
 80061b4:	60bb      	str	r3, [r7, #8]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	60bb      	str	r3, [r7, #8]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	60bb      	str	r3, [r7, #8]
 80061c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061d2:	2b40      	cmp	r3, #64	@ 0x40
 80061d4:	f040 80b6 	bne.w	8006344 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f000 8145 	beq.w	8006478 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80061f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061f6:	429a      	cmp	r2, r3
 80061f8:	f080 813e 	bcs.w	8006478 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006202:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800620e:	f000 8088 	beq.w	8006322 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	330c      	adds	r3, #12
 8006218:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006220:	e853 3f00 	ldrex	r3, [r3]
 8006224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800622c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006230:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	330c      	adds	r3, #12
 800623a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800623e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006242:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006246:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800624a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800624e:	e841 2300 	strex	r3, r2, [r1]
 8006252:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006256:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1d9      	bne.n	8006212 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3314      	adds	r3, #20
 8006264:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800626e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006270:	f023 0301 	bic.w	r3, r3, #1
 8006274:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3314      	adds	r3, #20
 800627e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006282:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006286:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006288:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800628a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800628e:	e841 2300 	strex	r3, r2, [r1]
 8006292:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006294:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1e1      	bne.n	800625e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3314      	adds	r3, #20
 80062a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80062a4:	e853 3f00 	ldrex	r3, [r3]
 80062a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80062aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80062ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3314      	adds	r3, #20
 80062ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80062be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80062c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80062c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80062c6:	e841 2300 	strex	r3, r2, [r1]
 80062ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80062cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1e3      	bne.n	800629a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2220      	movs	r2, #32
 80062d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	330c      	adds	r3, #12
 80062e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062ea:	e853 3f00 	ldrex	r3, [r3]
 80062ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80062f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062f2:	f023 0310 	bic.w	r3, r3, #16
 80062f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	330c      	adds	r3, #12
 8006300:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006304:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006306:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006308:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800630a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800630c:	e841 2300 	strex	r3, r2, [r1]
 8006310:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1e3      	bne.n	80062e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800631c:	4618      	mov	r0, r3
 800631e:	f7fc fb20 	bl	8002962 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2202      	movs	r2, #2
 8006326:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006330:	b29b      	uxth	r3, r3
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	b29b      	uxth	r3, r3
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f8b7 	bl	80064ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800633e:	e09b      	b.n	8006478 <HAL_UART_IRQHandler+0x518>
 8006340:	080065ff 	.word	0x080065ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800634c:	b29b      	uxth	r3, r3
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006358:	b29b      	uxth	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 808e 	beq.w	800647c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006360:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 8089 	beq.w	800647c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	330c      	adds	r3, #12
 8006370:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800637a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800637c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006380:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	330c      	adds	r3, #12
 800638a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800638e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006390:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006394:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800639c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e3      	bne.n	800636a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3314      	adds	r3, #20
 80063a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ac:	e853 3f00 	ldrex	r3, [r3]
 80063b0:	623b      	str	r3, [r7, #32]
   return(result);
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	f023 0301 	bic.w	r3, r3, #1
 80063b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3314      	adds	r3, #20
 80063c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80063c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80063c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e3      	bne.n	80063a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2220      	movs	r2, #32
 80063de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	330c      	adds	r3, #12
 80063ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	e853 3f00 	ldrex	r3, [r3]
 80063f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f023 0310 	bic.w	r3, r3, #16
 80063fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	330c      	adds	r3, #12
 8006408:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800640c:	61fa      	str	r2, [r7, #28]
 800640e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	69b9      	ldr	r1, [r7, #24]
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	617b      	str	r3, [r7, #20]
   return(result);
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e3      	bne.n	80063e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006426:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800642a:	4619      	mov	r1, r3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f83d 	bl	80064ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006432:	e023      	b.n	800647c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800643c:	2b00      	cmp	r3, #0
 800643e:	d009      	beq.n	8006454 <HAL_UART_IRQHandler+0x4f4>
 8006440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 f8ea 	bl	8006626 <UART_Transmit_IT>
    return;
 8006452:	e014      	b.n	800647e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00e      	beq.n	800647e <HAL_UART_IRQHandler+0x51e>
 8006460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006468:	2b00      	cmp	r3, #0
 800646a:	d008      	beq.n	800647e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f92a 	bl	80066c6 <UART_EndTransmit_IT>
    return;
 8006472:	e004      	b.n	800647e <HAL_UART_IRQHandler+0x51e>
    return;
 8006474:	bf00      	nop
 8006476:	e002      	b.n	800647e <HAL_UART_IRQHandler+0x51e>
      return;
 8006478:	bf00      	nop
 800647a:	e000      	b.n	800647e <HAL_UART_IRQHandler+0x51e>
      return;
 800647c:	bf00      	nop
  }
}
 800647e:	37e8      	adds	r7, #232	@ 0xe8
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	460b      	mov	r3, r1
 80064b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	4613      	mov	r3, r2
 80064d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	88fa      	ldrh	r2, [r7, #6]
 80064dc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	88fa      	ldrh	r2, [r7, #6]
 80064e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2222      	movs	r2, #34	@ 0x22
 80064ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d007      	beq.n	800650a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006508:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	695a      	ldr	r2, [r3, #20]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f042 0201 	orr.w	r2, r2, #1
 8006518:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68da      	ldr	r2, [r3, #12]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f042 0220 	orr.w	r2, r2, #32
 8006528:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006538:	b480      	push	{r7}
 800653a:	b095      	sub	sp, #84	@ 0x54
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	330c      	adds	r3, #12
 8006546:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800654a:	e853 3f00 	ldrex	r3, [r3]
 800654e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006552:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006556:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	330c      	adds	r3, #12
 800655e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006560:	643a      	str	r2, [r7, #64]	@ 0x40
 8006562:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006566:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006568:	e841 2300 	strex	r3, r2, [r1]
 800656c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800656e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e5      	bne.n	8006540 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3314      	adds	r3, #20
 800657a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657c:	6a3b      	ldr	r3, [r7, #32]
 800657e:	e853 3f00 	ldrex	r3, [r3]
 8006582:	61fb      	str	r3, [r7, #28]
   return(result);
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	f023 0301 	bic.w	r3, r3, #1
 800658a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3314      	adds	r3, #20
 8006592:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006594:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006596:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800659a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e5      	bne.n	8006574 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d119      	bne.n	80065e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	330c      	adds	r3, #12
 80065b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	e853 3f00 	ldrex	r3, [r3]
 80065be:	60bb      	str	r3, [r7, #8]
   return(result);
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f023 0310 	bic.w	r3, r3, #16
 80065c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	330c      	adds	r3, #12
 80065ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065d0:	61ba      	str	r2, [r7, #24]
 80065d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d4:	6979      	ldr	r1, [r7, #20]
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	e841 2300 	strex	r3, r2, [r1]
 80065dc:	613b      	str	r3, [r7, #16]
   return(result);
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e5      	bne.n	80065b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80065f2:	bf00      	nop
 80065f4:	3754      	adds	r7, #84	@ 0x54
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800660a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f7ff ff3d 	bl	8006498 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800661e:	bf00      	nop
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006626:	b480      	push	{r7}
 8006628:	b085      	sub	sp, #20
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b21      	cmp	r3, #33	@ 0x21
 8006638:	d13e      	bne.n	80066b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006642:	d114      	bne.n	800666e <UART_Transmit_IT+0x48>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d110      	bne.n	800666e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	461a      	mov	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006660:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	1c9a      	adds	r2, r3, #2
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	621a      	str	r2, [r3, #32]
 800666c:	e008      	b.n	8006680 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	1c59      	adds	r1, r3, #1
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6211      	str	r1, [r2, #32]
 8006678:	781a      	ldrb	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006684:	b29b      	uxth	r3, r3
 8006686:	3b01      	subs	r3, #1
 8006688:	b29b      	uxth	r3, r3
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	4619      	mov	r1, r3
 800668e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10f      	bne.n	80066b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68da      	ldr	r2, [r3, #12]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	e000      	b.n	80066ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066b8:	2302      	movs	r3, #2
  }
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b082      	sub	sp, #8
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68da      	ldr	r2, [r3, #12]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2220      	movs	r2, #32
 80066e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7ff fecc 	bl	8006484 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b08c      	sub	sp, #48	@ 0x30
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b22      	cmp	r3, #34	@ 0x22
 8006708:	f040 80ae 	bne.w	8006868 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006714:	d117      	bne.n	8006746 <UART_Receive_IT+0x50>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d113      	bne.n	8006746 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800671e:	2300      	movs	r3, #0
 8006720:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006726:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	b29b      	uxth	r3, r3
 8006730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006734:	b29a      	uxth	r2, r3
 8006736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006738:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800673e:	1c9a      	adds	r2, r3, #2
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	629a      	str	r2, [r3, #40]	@ 0x28
 8006744:	e026      	b.n	8006794 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800674a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800674c:	2300      	movs	r3, #0
 800674e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006758:	d007      	beq.n	800676a <UART_Receive_IT+0x74>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d10a      	bne.n	8006778 <UART_Receive_IT+0x82>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	b2da      	uxtb	r2, r3
 8006772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	e008      	b.n	800678a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	b2db      	uxtb	r3, r3
 8006780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006784:	b2da      	uxtb	r2, r3
 8006786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006788:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006798:	b29b      	uxth	r3, r3
 800679a:	3b01      	subs	r3, #1
 800679c:	b29b      	uxth	r3, r3
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	4619      	mov	r1, r3
 80067a2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d15d      	bne.n	8006864 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68da      	ldr	r2, [r3, #12]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f022 0220 	bic.w	r2, r2, #32
 80067b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	695a      	ldr	r2, [r3, #20]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0201 	bic.w	r2, r2, #1
 80067d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2220      	movs	r2, #32
 80067dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d135      	bne.n	800685a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	330c      	adds	r3, #12
 80067fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	e853 3f00 	ldrex	r3, [r3]
 8006802:	613b      	str	r3, [r7, #16]
   return(result);
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	f023 0310 	bic.w	r3, r3, #16
 800680a:	627b      	str	r3, [r7, #36]	@ 0x24
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	330c      	adds	r3, #12
 8006812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006814:	623a      	str	r2, [r7, #32]
 8006816:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006818:	69f9      	ldr	r1, [r7, #28]
 800681a:	6a3a      	ldr	r2, [r7, #32]
 800681c:	e841 2300 	strex	r3, r2, [r1]
 8006820:	61bb      	str	r3, [r7, #24]
   return(result);
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e5      	bne.n	80067f4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0310 	and.w	r3, r3, #16
 8006832:	2b10      	cmp	r3, #16
 8006834:	d10a      	bne.n	800684c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006836:	2300      	movs	r3, #0
 8006838:	60fb      	str	r3, [r7, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	60fb      	str	r3, [r7, #12]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006850:	4619      	mov	r1, r3
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7ff fe2a 	bl	80064ac <HAL_UARTEx_RxEventCallback>
 8006858:	e002      	b.n	8006860 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f7fa fe96 	bl	800158c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	e002      	b.n	800686a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	e000      	b.n	800686a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006868:	2302      	movs	r3, #2
  }
}
 800686a:	4618      	mov	r0, r3
 800686c:	3730      	adds	r7, #48	@ 0x30
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
	...

08006874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006878:	b0c0      	sub	sp, #256	@ 0x100
 800687a:	af00      	add	r7, sp, #0
 800687c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800688c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006890:	68d9      	ldr	r1, [r3, #12]
 8006892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	ea40 0301 	orr.w	r3, r0, r1
 800689c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800689e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	431a      	orrs	r2, r3
 80068ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	431a      	orrs	r2, r3
 80068b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068b8:	69db      	ldr	r3, [r3, #28]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80068c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80068cc:	f021 010c 	bic.w	r1, r1, #12
 80068d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068da:	430b      	orrs	r3, r1
 80068dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80068ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ee:	6999      	ldr	r1, [r3, #24]
 80068f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	ea40 0301 	orr.w	r3, r0, r1
 80068fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	4b8f      	ldr	r3, [pc, #572]	@ (8006b40 <UART_SetConfig+0x2cc>)
 8006904:	429a      	cmp	r2, r3
 8006906:	d005      	beq.n	8006914 <UART_SetConfig+0xa0>
 8006908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	4b8d      	ldr	r3, [pc, #564]	@ (8006b44 <UART_SetConfig+0x2d0>)
 8006910:	429a      	cmp	r2, r3
 8006912:	d104      	bne.n	800691e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006914:	f7fe fb84 	bl	8005020 <HAL_RCC_GetPCLK2Freq>
 8006918:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800691c:	e003      	b.n	8006926 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800691e:	f7fe fb6b 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 8006922:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006930:	f040 810c 	bne.w	8006b4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006938:	2200      	movs	r2, #0
 800693a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800693e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006942:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006946:	4622      	mov	r2, r4
 8006948:	462b      	mov	r3, r5
 800694a:	1891      	adds	r1, r2, r2
 800694c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800694e:	415b      	adcs	r3, r3
 8006950:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006952:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006956:	4621      	mov	r1, r4
 8006958:	eb12 0801 	adds.w	r8, r2, r1
 800695c:	4629      	mov	r1, r5
 800695e:	eb43 0901 	adc.w	r9, r3, r1
 8006962:	f04f 0200 	mov.w	r2, #0
 8006966:	f04f 0300 	mov.w	r3, #0
 800696a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800696e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006976:	4690      	mov	r8, r2
 8006978:	4699      	mov	r9, r3
 800697a:	4623      	mov	r3, r4
 800697c:	eb18 0303 	adds.w	r3, r8, r3
 8006980:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006984:	462b      	mov	r3, r5
 8006986:	eb49 0303 	adc.w	r3, r9, r3
 800698a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800698e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800699a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800699e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80069a2:	460b      	mov	r3, r1
 80069a4:	18db      	adds	r3, r3, r3
 80069a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80069a8:	4613      	mov	r3, r2
 80069aa:	eb42 0303 	adc.w	r3, r2, r3
 80069ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80069b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80069b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80069b8:	f7f9 fc06 	bl	80001c8 <__aeabi_uldivmod>
 80069bc:	4602      	mov	r2, r0
 80069be:	460b      	mov	r3, r1
 80069c0:	4b61      	ldr	r3, [pc, #388]	@ (8006b48 <UART_SetConfig+0x2d4>)
 80069c2:	fba3 2302 	umull	r2, r3, r3, r2
 80069c6:	095b      	lsrs	r3, r3, #5
 80069c8:	011c      	lsls	r4, r3, #4
 80069ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069ce:	2200      	movs	r2, #0
 80069d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80069d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80069d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80069dc:	4642      	mov	r2, r8
 80069de:	464b      	mov	r3, r9
 80069e0:	1891      	adds	r1, r2, r2
 80069e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80069e4:	415b      	adcs	r3, r3
 80069e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80069ec:	4641      	mov	r1, r8
 80069ee:	eb12 0a01 	adds.w	sl, r2, r1
 80069f2:	4649      	mov	r1, r9
 80069f4:	eb43 0b01 	adc.w	fp, r3, r1
 80069f8:	f04f 0200 	mov.w	r2, #0
 80069fc:	f04f 0300 	mov.w	r3, #0
 8006a00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a0c:	4692      	mov	sl, r2
 8006a0e:	469b      	mov	fp, r3
 8006a10:	4643      	mov	r3, r8
 8006a12:	eb1a 0303 	adds.w	r3, sl, r3
 8006a16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a1a:	464b      	mov	r3, r9
 8006a1c:	eb4b 0303 	adc.w	r3, fp, r3
 8006a20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006a34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	18db      	adds	r3, r3, r3
 8006a3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a3e:	4613      	mov	r3, r2
 8006a40:	eb42 0303 	adc.w	r3, r2, r3
 8006a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006a4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006a4e:	f7f9 fbbb 	bl	80001c8 <__aeabi_uldivmod>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4611      	mov	r1, r2
 8006a58:	4b3b      	ldr	r3, [pc, #236]	@ (8006b48 <UART_SetConfig+0x2d4>)
 8006a5a:	fba3 2301 	umull	r2, r3, r3, r1
 8006a5e:	095b      	lsrs	r3, r3, #5
 8006a60:	2264      	movs	r2, #100	@ 0x64
 8006a62:	fb02 f303 	mul.w	r3, r2, r3
 8006a66:	1acb      	subs	r3, r1, r3
 8006a68:	00db      	lsls	r3, r3, #3
 8006a6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006a6e:	4b36      	ldr	r3, [pc, #216]	@ (8006b48 <UART_SetConfig+0x2d4>)
 8006a70:	fba3 2302 	umull	r2, r3, r3, r2
 8006a74:	095b      	lsrs	r3, r3, #5
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006a7c:	441c      	add	r4, r3
 8006a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006a88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006a8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006a90:	4642      	mov	r2, r8
 8006a92:	464b      	mov	r3, r9
 8006a94:	1891      	adds	r1, r2, r2
 8006a96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006a98:	415b      	adcs	r3, r3
 8006a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006aa0:	4641      	mov	r1, r8
 8006aa2:	1851      	adds	r1, r2, r1
 8006aa4:	6339      	str	r1, [r7, #48]	@ 0x30
 8006aa6:	4649      	mov	r1, r9
 8006aa8:	414b      	adcs	r3, r1
 8006aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aac:	f04f 0200 	mov.w	r2, #0
 8006ab0:	f04f 0300 	mov.w	r3, #0
 8006ab4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006ab8:	4659      	mov	r1, fp
 8006aba:	00cb      	lsls	r3, r1, #3
 8006abc:	4651      	mov	r1, sl
 8006abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ac2:	4651      	mov	r1, sl
 8006ac4:	00ca      	lsls	r2, r1, #3
 8006ac6:	4610      	mov	r0, r2
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4603      	mov	r3, r0
 8006acc:	4642      	mov	r2, r8
 8006ace:	189b      	adds	r3, r3, r2
 8006ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ad4:	464b      	mov	r3, r9
 8006ad6:	460a      	mov	r2, r1
 8006ad8:	eb42 0303 	adc.w	r3, r2, r3
 8006adc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006aec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006af0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006af4:	460b      	mov	r3, r1
 8006af6:	18db      	adds	r3, r3, r3
 8006af8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006afa:	4613      	mov	r3, r2
 8006afc:	eb42 0303 	adc.w	r3, r2, r3
 8006b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006b0a:	f7f9 fb5d 	bl	80001c8 <__aeabi_uldivmod>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	4b0d      	ldr	r3, [pc, #52]	@ (8006b48 <UART_SetConfig+0x2d4>)
 8006b14:	fba3 1302 	umull	r1, r3, r3, r2
 8006b18:	095b      	lsrs	r3, r3, #5
 8006b1a:	2164      	movs	r1, #100	@ 0x64
 8006b1c:	fb01 f303 	mul.w	r3, r1, r3
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	00db      	lsls	r3, r3, #3
 8006b24:	3332      	adds	r3, #50	@ 0x32
 8006b26:	4a08      	ldr	r2, [pc, #32]	@ (8006b48 <UART_SetConfig+0x2d4>)
 8006b28:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2c:	095b      	lsrs	r3, r3, #5
 8006b2e:	f003 0207 	and.w	r2, r3, #7
 8006b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4422      	add	r2, r4
 8006b3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b3c:	e106      	b.n	8006d4c <UART_SetConfig+0x4d8>
 8006b3e:	bf00      	nop
 8006b40:	40011000 	.word	0x40011000
 8006b44:	40011400 	.word	0x40011400
 8006b48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b50:	2200      	movs	r2, #0
 8006b52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006b5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006b5e:	4642      	mov	r2, r8
 8006b60:	464b      	mov	r3, r9
 8006b62:	1891      	adds	r1, r2, r2
 8006b64:	6239      	str	r1, [r7, #32]
 8006b66:	415b      	adcs	r3, r3
 8006b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b6e:	4641      	mov	r1, r8
 8006b70:	1854      	adds	r4, r2, r1
 8006b72:	4649      	mov	r1, r9
 8006b74:	eb43 0501 	adc.w	r5, r3, r1
 8006b78:	f04f 0200 	mov.w	r2, #0
 8006b7c:	f04f 0300 	mov.w	r3, #0
 8006b80:	00eb      	lsls	r3, r5, #3
 8006b82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b86:	00e2      	lsls	r2, r4, #3
 8006b88:	4614      	mov	r4, r2
 8006b8a:	461d      	mov	r5, r3
 8006b8c:	4643      	mov	r3, r8
 8006b8e:	18e3      	adds	r3, r4, r3
 8006b90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006b94:	464b      	mov	r3, r9
 8006b96:	eb45 0303 	adc.w	r3, r5, r3
 8006b9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006baa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006bae:	f04f 0200 	mov.w	r2, #0
 8006bb2:	f04f 0300 	mov.w	r3, #0
 8006bb6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006bba:	4629      	mov	r1, r5
 8006bbc:	008b      	lsls	r3, r1, #2
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	008a      	lsls	r2, r1, #2
 8006bc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006bcc:	f7f9 fafc 	bl	80001c8 <__aeabi_uldivmod>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	4b60      	ldr	r3, [pc, #384]	@ (8006d58 <UART_SetConfig+0x4e4>)
 8006bd6:	fba3 2302 	umull	r2, r3, r3, r2
 8006bda:	095b      	lsrs	r3, r3, #5
 8006bdc:	011c      	lsls	r4, r3, #4
 8006bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006be8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006bec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006bf0:	4642      	mov	r2, r8
 8006bf2:	464b      	mov	r3, r9
 8006bf4:	1891      	adds	r1, r2, r2
 8006bf6:	61b9      	str	r1, [r7, #24]
 8006bf8:	415b      	adcs	r3, r3
 8006bfa:	61fb      	str	r3, [r7, #28]
 8006bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c00:	4641      	mov	r1, r8
 8006c02:	1851      	adds	r1, r2, r1
 8006c04:	6139      	str	r1, [r7, #16]
 8006c06:	4649      	mov	r1, r9
 8006c08:	414b      	adcs	r3, r1
 8006c0a:	617b      	str	r3, [r7, #20]
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	f04f 0300 	mov.w	r3, #0
 8006c14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c18:	4659      	mov	r1, fp
 8006c1a:	00cb      	lsls	r3, r1, #3
 8006c1c:	4651      	mov	r1, sl
 8006c1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c22:	4651      	mov	r1, sl
 8006c24:	00ca      	lsls	r2, r1, #3
 8006c26:	4610      	mov	r0, r2
 8006c28:	4619      	mov	r1, r3
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	4642      	mov	r2, r8
 8006c2e:	189b      	adds	r3, r3, r2
 8006c30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c34:	464b      	mov	r3, r9
 8006c36:	460a      	mov	r2, r1
 8006c38:	eb42 0303 	adc.w	r3, r2, r3
 8006c3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006c4c:	f04f 0200 	mov.w	r2, #0
 8006c50:	f04f 0300 	mov.w	r3, #0
 8006c54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006c58:	4649      	mov	r1, r9
 8006c5a:	008b      	lsls	r3, r1, #2
 8006c5c:	4641      	mov	r1, r8
 8006c5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c62:	4641      	mov	r1, r8
 8006c64:	008a      	lsls	r2, r1, #2
 8006c66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006c6a:	f7f9 faad 	bl	80001c8 <__aeabi_uldivmod>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4611      	mov	r1, r2
 8006c74:	4b38      	ldr	r3, [pc, #224]	@ (8006d58 <UART_SetConfig+0x4e4>)
 8006c76:	fba3 2301 	umull	r2, r3, r3, r1
 8006c7a:	095b      	lsrs	r3, r3, #5
 8006c7c:	2264      	movs	r2, #100	@ 0x64
 8006c7e:	fb02 f303 	mul.w	r3, r2, r3
 8006c82:	1acb      	subs	r3, r1, r3
 8006c84:	011b      	lsls	r3, r3, #4
 8006c86:	3332      	adds	r3, #50	@ 0x32
 8006c88:	4a33      	ldr	r2, [pc, #204]	@ (8006d58 <UART_SetConfig+0x4e4>)
 8006c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8e:	095b      	lsrs	r3, r3, #5
 8006c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c94:	441c      	add	r4, r3
 8006c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006c9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006ca0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006ca4:	4642      	mov	r2, r8
 8006ca6:	464b      	mov	r3, r9
 8006ca8:	1891      	adds	r1, r2, r2
 8006caa:	60b9      	str	r1, [r7, #8]
 8006cac:	415b      	adcs	r3, r3
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cb4:	4641      	mov	r1, r8
 8006cb6:	1851      	adds	r1, r2, r1
 8006cb8:	6039      	str	r1, [r7, #0]
 8006cba:	4649      	mov	r1, r9
 8006cbc:	414b      	adcs	r3, r1
 8006cbe:	607b      	str	r3, [r7, #4]
 8006cc0:	f04f 0200 	mov.w	r2, #0
 8006cc4:	f04f 0300 	mov.w	r3, #0
 8006cc8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ccc:	4659      	mov	r1, fp
 8006cce:	00cb      	lsls	r3, r1, #3
 8006cd0:	4651      	mov	r1, sl
 8006cd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cd6:	4651      	mov	r1, sl
 8006cd8:	00ca      	lsls	r2, r1, #3
 8006cda:	4610      	mov	r0, r2
 8006cdc:	4619      	mov	r1, r3
 8006cde:	4603      	mov	r3, r0
 8006ce0:	4642      	mov	r2, r8
 8006ce2:	189b      	adds	r3, r3, r2
 8006ce4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006ce6:	464b      	mov	r3, r9
 8006ce8:	460a      	mov	r2, r1
 8006cea:	eb42 0303 	adc.w	r3, r2, r3
 8006cee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cfa:	667a      	str	r2, [r7, #100]	@ 0x64
 8006cfc:	f04f 0200 	mov.w	r2, #0
 8006d00:	f04f 0300 	mov.w	r3, #0
 8006d04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006d08:	4649      	mov	r1, r9
 8006d0a:	008b      	lsls	r3, r1, #2
 8006d0c:	4641      	mov	r1, r8
 8006d0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d12:	4641      	mov	r1, r8
 8006d14:	008a      	lsls	r2, r1, #2
 8006d16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006d1a:	f7f9 fa55 	bl	80001c8 <__aeabi_uldivmod>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
 8006d22:	4b0d      	ldr	r3, [pc, #52]	@ (8006d58 <UART_SetConfig+0x4e4>)
 8006d24:	fba3 1302 	umull	r1, r3, r3, r2
 8006d28:	095b      	lsrs	r3, r3, #5
 8006d2a:	2164      	movs	r1, #100	@ 0x64
 8006d2c:	fb01 f303 	mul.w	r3, r1, r3
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	011b      	lsls	r3, r3, #4
 8006d34:	3332      	adds	r3, #50	@ 0x32
 8006d36:	4a08      	ldr	r2, [pc, #32]	@ (8006d58 <UART_SetConfig+0x4e4>)
 8006d38:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3c:	095b      	lsrs	r3, r3, #5
 8006d3e:	f003 020f 	and.w	r2, r3, #15
 8006d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4422      	add	r2, r4
 8006d4a:	609a      	str	r2, [r3, #8]
}
 8006d4c:	bf00      	nop
 8006d4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006d52:	46bd      	mov	sp, r7
 8006d54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d58:	51eb851f 	.word	0x51eb851f

08006d5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b084      	sub	sp, #16
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	f107 001c 	add.w	r0, r7, #28
 8006d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d6e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d123      	bne.n	8006dbe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006d8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d105      	bne.n	8006db2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f001 fae8 	bl	8008388 <USB_CoreReset>
 8006db8:	4603      	mov	r3, r0
 8006dba:	73fb      	strb	r3, [r7, #15]
 8006dbc:	e01b      	b.n	8006df6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f001 fadc 	bl	8008388 <USB_CoreReset>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006dd4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d106      	bne.n	8006dea <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	639a      	str	r2, [r3, #56]	@ 0x38
 8006de8:	e005      	b.n	8006df6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006df6:	7fbb      	ldrb	r3, [r7, #30]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d10b      	bne.n	8006e14 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f043 0206 	orr.w	r2, r3, #6
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f043 0220 	orr.w	r2, r3, #32
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e20:	b004      	add	sp, #16
 8006e22:	4770      	bx	lr

08006e24 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b087      	sub	sp, #28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006e32:	79fb      	ldrb	r3, [r7, #7]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d165      	bne.n	8006f04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	4a41      	ldr	r2, [pc, #260]	@ (8006f40 <USB_SetTurnaroundTime+0x11c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d906      	bls.n	8006e4e <USB_SetTurnaroundTime+0x2a>
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	4a40      	ldr	r2, [pc, #256]	@ (8006f44 <USB_SetTurnaroundTime+0x120>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d202      	bcs.n	8006e4e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006e48:	230f      	movs	r3, #15
 8006e4a:	617b      	str	r3, [r7, #20]
 8006e4c:	e062      	b.n	8006f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	4a3c      	ldr	r2, [pc, #240]	@ (8006f44 <USB_SetTurnaroundTime+0x120>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d306      	bcc.n	8006e64 <USB_SetTurnaroundTime+0x40>
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	4a3b      	ldr	r2, [pc, #236]	@ (8006f48 <USB_SetTurnaroundTime+0x124>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d202      	bcs.n	8006e64 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006e5e:	230e      	movs	r3, #14
 8006e60:	617b      	str	r3, [r7, #20]
 8006e62:	e057      	b.n	8006f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	4a38      	ldr	r2, [pc, #224]	@ (8006f48 <USB_SetTurnaroundTime+0x124>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d306      	bcc.n	8006e7a <USB_SetTurnaroundTime+0x56>
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	4a37      	ldr	r2, [pc, #220]	@ (8006f4c <USB_SetTurnaroundTime+0x128>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d202      	bcs.n	8006e7a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006e74:	230d      	movs	r3, #13
 8006e76:	617b      	str	r3, [r7, #20]
 8006e78:	e04c      	b.n	8006f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	4a33      	ldr	r2, [pc, #204]	@ (8006f4c <USB_SetTurnaroundTime+0x128>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d306      	bcc.n	8006e90 <USB_SetTurnaroundTime+0x6c>
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	4a32      	ldr	r2, [pc, #200]	@ (8006f50 <USB_SetTurnaroundTime+0x12c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d802      	bhi.n	8006e90 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006e8a:	230c      	movs	r3, #12
 8006e8c:	617b      	str	r3, [r7, #20]
 8006e8e:	e041      	b.n	8006f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	4a2f      	ldr	r2, [pc, #188]	@ (8006f50 <USB_SetTurnaroundTime+0x12c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d906      	bls.n	8006ea6 <USB_SetTurnaroundTime+0x82>
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	4a2e      	ldr	r2, [pc, #184]	@ (8006f54 <USB_SetTurnaroundTime+0x130>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d802      	bhi.n	8006ea6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006ea0:	230b      	movs	r3, #11
 8006ea2:	617b      	str	r3, [r7, #20]
 8006ea4:	e036      	b.n	8006f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	4a2a      	ldr	r2, [pc, #168]	@ (8006f54 <USB_SetTurnaroundTime+0x130>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d906      	bls.n	8006ebc <USB_SetTurnaroundTime+0x98>
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	4a29      	ldr	r2, [pc, #164]	@ (8006f58 <USB_SetTurnaroundTime+0x134>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d802      	bhi.n	8006ebc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006eb6:	230a      	movs	r3, #10
 8006eb8:	617b      	str	r3, [r7, #20]
 8006eba:	e02b      	b.n	8006f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	4a26      	ldr	r2, [pc, #152]	@ (8006f58 <USB_SetTurnaroundTime+0x134>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d906      	bls.n	8006ed2 <USB_SetTurnaroundTime+0xae>
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	4a25      	ldr	r2, [pc, #148]	@ (8006f5c <USB_SetTurnaroundTime+0x138>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d202      	bcs.n	8006ed2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006ecc:	2309      	movs	r3, #9
 8006ece:	617b      	str	r3, [r7, #20]
 8006ed0:	e020      	b.n	8006f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	4a21      	ldr	r2, [pc, #132]	@ (8006f5c <USB_SetTurnaroundTime+0x138>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d306      	bcc.n	8006ee8 <USB_SetTurnaroundTime+0xc4>
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	4a20      	ldr	r2, [pc, #128]	@ (8006f60 <USB_SetTurnaroundTime+0x13c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d802      	bhi.n	8006ee8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006ee2:	2308      	movs	r3, #8
 8006ee4:	617b      	str	r3, [r7, #20]
 8006ee6:	e015      	b.n	8006f14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	4a1d      	ldr	r2, [pc, #116]	@ (8006f60 <USB_SetTurnaroundTime+0x13c>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d906      	bls.n	8006efe <USB_SetTurnaroundTime+0xda>
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8006f64 <USB_SetTurnaroundTime+0x140>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d202      	bcs.n	8006efe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006ef8:	2307      	movs	r3, #7
 8006efa:	617b      	str	r3, [r7, #20]
 8006efc:	e00a      	b.n	8006f14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006efe:	2306      	movs	r3, #6
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	e007      	b.n	8006f14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006f04:	79fb      	ldrb	r3, [r7, #7]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d102      	bne.n	8006f10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006f0a:	2309      	movs	r3, #9
 8006f0c:	617b      	str	r3, [r7, #20]
 8006f0e:	e001      	b.n	8006f14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006f10:	2309      	movs	r3, #9
 8006f12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	68da      	ldr	r2, [r3, #12]
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	029b      	lsls	r3, r3, #10
 8006f28:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	371c      	adds	r7, #28
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	00d8acbf 	.word	0x00d8acbf
 8006f44:	00e4e1c0 	.word	0x00e4e1c0
 8006f48:	00f42400 	.word	0x00f42400
 8006f4c:	01067380 	.word	0x01067380
 8006f50:	011a499f 	.word	0x011a499f
 8006f54:	01312cff 	.word	0x01312cff
 8006f58:	014ca43f 	.word	0x014ca43f
 8006f5c:	016e3600 	.word	0x016e3600
 8006f60:	01a6ab1f 	.word	0x01a6ab1f
 8006f64:	01e84800 	.word	0x01e84800

08006f68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f043 0201 	orr.w	r2, r3, #1
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b083      	sub	sp, #12
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f023 0201 	bic.w	r2, r3, #1
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006fc8:	78fb      	ldrb	r3, [r7, #3]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d115      	bne.n	8006ffa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006fda:	200a      	movs	r0, #10
 8006fdc:	f7fb f8f8 	bl	80021d0 <HAL_Delay>
      ms += 10U;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	330a      	adds	r3, #10
 8006fe4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f001 f93f 	bl	800826a <USB_GetMode>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d01e      	beq.n	8007030 <USB_SetCurrentMode+0x84>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ff6:	d9f0      	bls.n	8006fda <USB_SetCurrentMode+0x2e>
 8006ff8:	e01a      	b.n	8007030 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ffa:	78fb      	ldrb	r3, [r7, #3]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d115      	bne.n	800702c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800700c:	200a      	movs	r0, #10
 800700e:	f7fb f8df 	bl	80021d0 <HAL_Delay>
      ms += 10U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	330a      	adds	r3, #10
 8007016:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f001 f926 	bl	800826a <USB_GetMode>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d005      	beq.n	8007030 <USB_SetCurrentMode+0x84>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2bc7      	cmp	r3, #199	@ 0xc7
 8007028:	d9f0      	bls.n	800700c <USB_SetCurrentMode+0x60>
 800702a:	e001      	b.n	8007030 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e005      	b.n	800703c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2bc8      	cmp	r3, #200	@ 0xc8
 8007034:	d101      	bne.n	800703a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e000      	b.n	800703c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3710      	adds	r7, #16
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007044:	b084      	sub	sp, #16
 8007046:	b580      	push	{r7, lr}
 8007048:	b086      	sub	sp, #24
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
 800704e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007052:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800705e:	2300      	movs	r3, #0
 8007060:	613b      	str	r3, [r7, #16]
 8007062:	e009      	b.n	8007078 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	3340      	adds	r3, #64	@ 0x40
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	4413      	add	r3, r2
 800706e:	2200      	movs	r2, #0
 8007070:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	3301      	adds	r3, #1
 8007076:	613b      	str	r3, [r7, #16]
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	2b0e      	cmp	r3, #14
 800707c:	d9f2      	bls.n	8007064 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800707e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007082:	2b00      	cmp	r3, #0
 8007084:	d11c      	bne.n	80070c0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007094:	f043 0302 	orr.w	r3, r3, #2
 8007098:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070aa:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80070be:	e00b      	b.n	80070d8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070c4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80070de:	461a      	mov	r2, r3
 80070e0:	2300      	movs	r3, #0
 80070e2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070e4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d10d      	bne.n	8007108 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80070ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d104      	bne.n	80070fe <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80070f4:	2100      	movs	r1, #0
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f968 	bl	80073cc <USB_SetDevSpeed>
 80070fc:	e008      	b.n	8007110 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80070fe:	2101      	movs	r1, #1
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f963 	bl	80073cc <USB_SetDevSpeed>
 8007106:	e003      	b.n	8007110 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007108:	2103      	movs	r1, #3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f95e 	bl	80073cc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007110:	2110      	movs	r1, #16
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f8fa 	bl	800730c <USB_FlushTxFifo>
 8007118:	4603      	mov	r3, r0
 800711a:	2b00      	cmp	r3, #0
 800711c:	d001      	beq.n	8007122 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f924 	bl	8007370 <USB_FlushRxFifo>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d001      	beq.n	8007132 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007138:	461a      	mov	r2, r3
 800713a:	2300      	movs	r3, #0
 800713c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007144:	461a      	mov	r2, r3
 8007146:	2300      	movs	r3, #0
 8007148:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007150:	461a      	mov	r2, r3
 8007152:	2300      	movs	r3, #0
 8007154:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007156:	2300      	movs	r3, #0
 8007158:	613b      	str	r3, [r7, #16]
 800715a:	e043      	b.n	80071e4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4413      	add	r3, r2
 8007164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800716e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007172:	d118      	bne.n	80071a6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10a      	bne.n	8007190 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	015a      	lsls	r2, r3, #5
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	4413      	add	r3, r2
 8007182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007186:	461a      	mov	r2, r3
 8007188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800718c:	6013      	str	r3, [r2, #0]
 800718e:	e013      	b.n	80071b8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	4413      	add	r3, r2
 8007198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800719c:	461a      	mov	r2, r3
 800719e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80071a2:	6013      	str	r3, [r2, #0]
 80071a4:	e008      	b.n	80071b8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	015a      	lsls	r2, r3, #5
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	4413      	add	r3, r2
 80071ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071b2:	461a      	mov	r2, r3
 80071b4:	2300      	movs	r3, #0
 80071b6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	015a      	lsls	r2, r3, #5
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	4413      	add	r3, r2
 80071c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071c4:	461a      	mov	r2, r3
 80071c6:	2300      	movs	r3, #0
 80071c8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	015a      	lsls	r2, r3, #5
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071d6:	461a      	mov	r2, r3
 80071d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80071dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	3301      	adds	r3, #1
 80071e2:	613b      	str	r3, [r7, #16]
 80071e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80071e8:	461a      	mov	r2, r3
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d3b5      	bcc.n	800715c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071f0:	2300      	movs	r3, #0
 80071f2:	613b      	str	r3, [r7, #16]
 80071f4:	e043      	b.n	800727e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007208:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800720c:	d118      	bne.n	8007240 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d10a      	bne.n	800722a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007220:	461a      	mov	r2, r3
 8007222:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007226:	6013      	str	r3, [r2, #0]
 8007228:	e013      	b.n	8007252 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	4413      	add	r3, r2
 8007232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007236:	461a      	mov	r2, r3
 8007238:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800723c:	6013      	str	r3, [r2, #0]
 800723e:	e008      	b.n	8007252 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4413      	add	r3, r2
 8007248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800724c:	461a      	mov	r2, r3
 800724e:	2300      	movs	r3, #0
 8007250:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	015a      	lsls	r2, r3, #5
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	4413      	add	r3, r2
 800725a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800725e:	461a      	mov	r2, r3
 8007260:	2300      	movs	r3, #0
 8007262:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007270:	461a      	mov	r2, r3
 8007272:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007276:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	3301      	adds	r3, #1
 800727c:	613b      	str	r3, [r7, #16]
 800727e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007282:	461a      	mov	r2, r3
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	4293      	cmp	r3, r2
 8007288:	d3b5      	bcc.n	80071f6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800729c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80072aa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80072ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d105      	bne.n	80072c0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	f043 0210 	orr.w	r2, r3, #16
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	699a      	ldr	r2, [r3, #24]
 80072c4:	4b10      	ldr	r3, [pc, #64]	@ (8007308 <USB_DevInit+0x2c4>)
 80072c6:	4313      	orrs	r3, r2
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80072cc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d005      	beq.n	80072e0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	f043 0208 	orr.w	r2, r3, #8
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80072e0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d107      	bne.n	80072f8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072f0:	f043 0304 	orr.w	r3, r3, #4
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007304:	b004      	add	sp, #16
 8007306:	4770      	bx	lr
 8007308:	803c3800 	.word	0x803c3800

0800730c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007316:	2300      	movs	r3, #0
 8007318:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	3301      	adds	r3, #1
 800731e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007326:	d901      	bls.n	800732c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e01b      	b.n	8007364 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	daf2      	bge.n	800731a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	019b      	lsls	r3, r3, #6
 800733c:	f043 0220 	orr.w	r2, r3, #32
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3301      	adds	r3, #1
 8007348:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007350:	d901      	bls.n	8007356 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e006      	b.n	8007364 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	f003 0320 	and.w	r3, r3, #32
 800735e:	2b20      	cmp	r3, #32
 8007360:	d0f0      	beq.n	8007344 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007378:	2300      	movs	r3, #0
 800737a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	3301      	adds	r3, #1
 8007380:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007388:	d901      	bls.n	800738e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e018      	b.n	80073c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	daf2      	bge.n	800737c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2210      	movs	r2, #16
 800739e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	3301      	adds	r3, #1
 80073a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073ac:	d901      	bls.n	80073b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e006      	b.n	80073c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	f003 0310 	and.w	r3, r3, #16
 80073ba:	2b10      	cmp	r3, #16
 80073bc:	d0f0      	beq.n	80073a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	78fb      	ldrb	r3, [r7, #3]
 80073e6:	68f9      	ldr	r1, [r7, #12]
 80073e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073ec:	4313      	orrs	r3, r2
 80073ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80073fe:	b480      	push	{r7}
 8007400:	b087      	sub	sp, #28
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f003 0306 	and.w	r3, r3, #6
 8007416:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d102      	bne.n	8007424 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800741e:	2300      	movs	r3, #0
 8007420:	75fb      	strb	r3, [r7, #23]
 8007422:	e00a      	b.n	800743a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2b02      	cmp	r3, #2
 8007428:	d002      	beq.n	8007430 <USB_GetDevSpeed+0x32>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2b06      	cmp	r3, #6
 800742e:	d102      	bne.n	8007436 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007430:	2302      	movs	r3, #2
 8007432:	75fb      	strb	r3, [r7, #23]
 8007434:	e001      	b.n	800743a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007436:	230f      	movs	r3, #15
 8007438:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800743a:	7dfb      	ldrb	r3, [r7, #23]
}
 800743c:	4618      	mov	r0, r3
 800743e:	371c      	adds	r7, #28
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007448:	b480      	push	{r7}
 800744a:	b085      	sub	sp, #20
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	785b      	ldrb	r3, [r3, #1]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d13a      	bne.n	80074da <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800746a:	69da      	ldr	r2, [r3, #28]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	f003 030f 	and.w	r3, r3, #15
 8007474:	2101      	movs	r1, #1
 8007476:	fa01 f303 	lsl.w	r3, r1, r3
 800747a:	b29b      	uxth	r3, r3
 800747c:	68f9      	ldr	r1, [r7, #12]
 800747e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007482:	4313      	orrs	r3, r2
 8007484:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	015a      	lsls	r2, r3, #5
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	4413      	add	r3, r2
 800748e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007498:	2b00      	cmp	r3, #0
 800749a:	d155      	bne.n	8007548 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	015a      	lsls	r2, r3, #5
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	791b      	ldrb	r3, [r3, #4]
 80074b6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80074b8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	059b      	lsls	r3, r3, #22
 80074be:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80074c0:	4313      	orrs	r3, r2
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	0151      	lsls	r1, r2, #5
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	440a      	add	r2, r1
 80074ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	e036      	b.n	8007548 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074e0:	69da      	ldr	r2, [r3, #28]
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	f003 030f 	and.w	r3, r3, #15
 80074ea:	2101      	movs	r1, #1
 80074ec:	fa01 f303 	lsl.w	r3, r1, r3
 80074f0:	041b      	lsls	r3, r3, #16
 80074f2:	68f9      	ldr	r1, [r7, #12]
 80074f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074f8:	4313      	orrs	r3, r2
 80074fa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	015a      	lsls	r2, r3, #5
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	4413      	add	r3, r2
 8007504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d11a      	bne.n	8007548 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	015a      	lsls	r2, r3, #5
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	4413      	add	r3, r2
 800751a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	791b      	ldrb	r3, [r3, #4]
 800752c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800752e:	430b      	orrs	r3, r1
 8007530:	4313      	orrs	r3, r2
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	0151      	lsls	r1, r2, #5
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	440a      	add	r2, r1
 800753a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800753e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007542:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007546:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
	...

08007558 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	785b      	ldrb	r3, [r3, #1]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d161      	bne.n	8007638 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	015a      	lsls	r2, r3, #5
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	4413      	add	r3, r2
 800757c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007586:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800758a:	d11f      	bne.n	80075cc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	4413      	add	r3, r2
 8007594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	0151      	lsls	r1, r2, #5
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	440a      	add	r2, r1
 80075a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80075aa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	0151      	lsls	r1, r2, #5
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	440a      	add	r2, r1
 80075c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80075ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	f003 030f 	and.w	r3, r3, #15
 80075dc:	2101      	movs	r1, #1
 80075de:	fa01 f303 	lsl.w	r3, r1, r3
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	43db      	mvns	r3, r3
 80075e6:	68f9      	ldr	r1, [r7, #12]
 80075e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80075ec:	4013      	ands	r3, r2
 80075ee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075f6:	69da      	ldr	r2, [r3, #28]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	f003 030f 	and.w	r3, r3, #15
 8007600:	2101      	movs	r1, #1
 8007602:	fa01 f303 	lsl.w	r3, r1, r3
 8007606:	b29b      	uxth	r3, r3
 8007608:	43db      	mvns	r3, r3
 800760a:	68f9      	ldr	r1, [r7, #12]
 800760c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007610:	4013      	ands	r3, r2
 8007612:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	0159      	lsls	r1, r3, #5
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	440b      	add	r3, r1
 800762a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800762e:	4619      	mov	r1, r3
 8007630:	4b35      	ldr	r3, [pc, #212]	@ (8007708 <USB_DeactivateEndpoint+0x1b0>)
 8007632:	4013      	ands	r3, r2
 8007634:	600b      	str	r3, [r1, #0]
 8007636:	e060      	b.n	80076fa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	4413      	add	r3, r2
 8007640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800764a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800764e:	d11f      	bne.n	8007690 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	0151      	lsls	r1, r2, #5
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	440a      	add	r2, r1
 8007666:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800766a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800766e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	4413      	add	r3, r2
 8007678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	0151      	lsls	r1, r2, #5
 8007682:	68fa      	ldr	r2, [r7, #12]
 8007684:	440a      	add	r2, r1
 8007686:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800768a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800768e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007696:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	f003 030f 	and.w	r3, r3, #15
 80076a0:	2101      	movs	r1, #1
 80076a2:	fa01 f303 	lsl.w	r3, r1, r3
 80076a6:	041b      	lsls	r3, r3, #16
 80076a8:	43db      	mvns	r3, r3
 80076aa:	68f9      	ldr	r1, [r7, #12]
 80076ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076b0:	4013      	ands	r3, r2
 80076b2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ba:	69da      	ldr	r2, [r3, #28]
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	f003 030f 	and.w	r3, r3, #15
 80076c4:	2101      	movs	r1, #1
 80076c6:	fa01 f303 	lsl.w	r3, r1, r3
 80076ca:	041b      	lsls	r3, r3, #16
 80076cc:	43db      	mvns	r3, r3
 80076ce:	68f9      	ldr	r1, [r7, #12]
 80076d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076d4:	4013      	ands	r3, r2
 80076d6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	0159      	lsls	r1, r3, #5
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	440b      	add	r3, r1
 80076ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076f2:	4619      	mov	r1, r3
 80076f4:	4b05      	ldr	r3, [pc, #20]	@ (800770c <USB_DeactivateEndpoint+0x1b4>)
 80076f6:	4013      	ands	r3, r2
 80076f8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3714      	adds	r7, #20
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr
 8007708:	ec337800 	.word	0xec337800
 800770c:	eff37800 	.word	0xeff37800

08007710 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b08a      	sub	sp, #40	@ 0x28
 8007714:	af02      	add	r7, sp, #8
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	4613      	mov	r3, r2
 800771c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	785b      	ldrb	r3, [r3, #1]
 800772c:	2b01      	cmp	r3, #1
 800772e:	f040 817f 	bne.w	8007a30 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d132      	bne.n	80077a0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	015a      	lsls	r2, r3, #5
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	4413      	add	r3, r2
 8007742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	0151      	lsls	r1, r2, #5
 800774c:	69fa      	ldr	r2, [r7, #28]
 800774e:	440a      	add	r2, r1
 8007750:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007754:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007758:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800775c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	015a      	lsls	r2, r3, #5
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	4413      	add	r3, r2
 8007766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	0151      	lsls	r1, r2, #5
 8007770:	69fa      	ldr	r2, [r7, #28]
 8007772:	440a      	add	r2, r1
 8007774:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007778:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800777c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	015a      	lsls	r2, r3, #5
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	4413      	add	r3, r2
 8007786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	69ba      	ldr	r2, [r7, #24]
 800778e:	0151      	lsls	r1, r2, #5
 8007790:	69fa      	ldr	r2, [r7, #28]
 8007792:	440a      	add	r2, r1
 8007794:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007798:	0cdb      	lsrs	r3, r3, #19
 800779a:	04db      	lsls	r3, r3, #19
 800779c:	6113      	str	r3, [r2, #16]
 800779e:	e097      	b.n	80078d0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	015a      	lsls	r2, r3, #5
 80077a4:	69fb      	ldr	r3, [r7, #28]
 80077a6:	4413      	add	r3, r2
 80077a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	69ba      	ldr	r2, [r7, #24]
 80077b0:	0151      	lsls	r1, r2, #5
 80077b2:	69fa      	ldr	r2, [r7, #28]
 80077b4:	440a      	add	r2, r1
 80077b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077ba:	0cdb      	lsrs	r3, r3, #19
 80077bc:	04db      	lsls	r3, r3, #19
 80077be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	0151      	lsls	r1, r2, #5
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	440a      	add	r2, r1
 80077d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80077da:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80077de:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80077e2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d11a      	bne.n	8007820 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	691a      	ldr	r2, [r3, #16]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d903      	bls.n	80077fe <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	689a      	ldr	r2, [r3, #8]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	4413      	add	r3, r2
 8007806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	0151      	lsls	r1, r2, #5
 8007810:	69fa      	ldr	r2, [r7, #28]
 8007812:	440a      	add	r2, r1
 8007814:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007818:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800781c:	6113      	str	r3, [r2, #16]
 800781e:	e044      	b.n	80078aa <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	691a      	ldr	r2, [r3, #16]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	4413      	add	r3, r2
 800782a:	1e5a      	subs	r2, r3, #1
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	689b      	ldr	r3, [r3, #8]
 8007830:	fbb2 f3f3 	udiv	r3, r2, r3
 8007834:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	015a      	lsls	r2, r3, #5
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	4413      	add	r3, r2
 800783e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007842:	691a      	ldr	r2, [r3, #16]
 8007844:	8afb      	ldrh	r3, [r7, #22]
 8007846:	04d9      	lsls	r1, r3, #19
 8007848:	4ba4      	ldr	r3, [pc, #656]	@ (8007adc <USB_EPStartXfer+0x3cc>)
 800784a:	400b      	ands	r3, r1
 800784c:	69b9      	ldr	r1, [r7, #24]
 800784e:	0148      	lsls	r0, r1, #5
 8007850:	69f9      	ldr	r1, [r7, #28]
 8007852:	4401      	add	r1, r0
 8007854:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007858:	4313      	orrs	r3, r2
 800785a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	791b      	ldrb	r3, [r3, #4]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d122      	bne.n	80078aa <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	4413      	add	r3, r2
 800786c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	69ba      	ldr	r2, [r7, #24]
 8007874:	0151      	lsls	r1, r2, #5
 8007876:	69fa      	ldr	r2, [r7, #28]
 8007878:	440a      	add	r2, r1
 800787a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800787e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007882:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	015a      	lsls	r2, r3, #5
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	4413      	add	r3, r2
 800788c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007890:	691a      	ldr	r2, [r3, #16]
 8007892:	8afb      	ldrh	r3, [r7, #22]
 8007894:	075b      	lsls	r3, r3, #29
 8007896:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800789a:	69b9      	ldr	r1, [r7, #24]
 800789c:	0148      	lsls	r0, r1, #5
 800789e:	69f9      	ldr	r1, [r7, #28]
 80078a0:	4401      	add	r1, r0
 80078a2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80078a6:	4313      	orrs	r3, r2
 80078a8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	015a      	lsls	r2, r3, #5
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078b6:	691a      	ldr	r2, [r3, #16]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078c0:	69b9      	ldr	r1, [r7, #24]
 80078c2:	0148      	lsls	r0, r1, #5
 80078c4:	69f9      	ldr	r1, [r7, #28]
 80078c6:	4401      	add	r1, r0
 80078c8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80078cc:	4313      	orrs	r3, r2
 80078ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80078d0:	79fb      	ldrb	r3, [r7, #7]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d14b      	bne.n	800796e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d009      	beq.n	80078f2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	015a      	lsls	r2, r3, #5
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078ea:	461a      	mov	r2, r3
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	69db      	ldr	r3, [r3, #28]
 80078f0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	791b      	ldrb	r3, [r3, #4]
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d128      	bne.n	800794c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007906:	2b00      	cmp	r3, #0
 8007908:	d110      	bne.n	800792c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	015a      	lsls	r2, r3, #5
 800790e:	69fb      	ldr	r3, [r7, #28]
 8007910:	4413      	add	r3, r2
 8007912:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	69ba      	ldr	r2, [r7, #24]
 800791a:	0151      	lsls	r1, r2, #5
 800791c:	69fa      	ldr	r2, [r7, #28]
 800791e:	440a      	add	r2, r1
 8007920:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007924:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007928:	6013      	str	r3, [r2, #0]
 800792a:	e00f      	b.n	800794c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	0151      	lsls	r1, r2, #5
 800793e:	69fa      	ldr	r2, [r7, #28]
 8007940:	440a      	add	r2, r1
 8007942:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800794a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	015a      	lsls	r2, r3, #5
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	4413      	add	r3, r2
 8007954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	69ba      	ldr	r2, [r7, #24]
 800795c:	0151      	lsls	r1, r2, #5
 800795e:	69fa      	ldr	r2, [r7, #28]
 8007960:	440a      	add	r2, r1
 8007962:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007966:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800796a:	6013      	str	r3, [r2, #0]
 800796c:	e166      	b.n	8007c3c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	4413      	add	r3, r2
 8007976:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	0151      	lsls	r1, r2, #5
 8007980:	69fa      	ldr	r2, [r7, #28]
 8007982:	440a      	add	r2, r1
 8007984:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007988:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800798c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	791b      	ldrb	r3, [r3, #4]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d015      	beq.n	80079c2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 814e 	beq.w	8007c3c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	f003 030f 	and.w	r3, r3, #15
 80079b0:	2101      	movs	r1, #1
 80079b2:	fa01 f303 	lsl.w	r3, r1, r3
 80079b6:	69f9      	ldr	r1, [r7, #28]
 80079b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079bc:	4313      	orrs	r3, r2
 80079be:	634b      	str	r3, [r1, #52]	@ 0x34
 80079c0:	e13c      	b.n	8007c3c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d110      	bne.n	80079f4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	0151      	lsls	r1, r2, #5
 80079e4:	69fa      	ldr	r2, [r7, #28]
 80079e6:	440a      	add	r2, r1
 80079e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80079f0:	6013      	str	r3, [r2, #0]
 80079f2:	e00f      	b.n	8007a14 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	69ba      	ldr	r2, [r7, #24]
 8007a04:	0151      	lsls	r1, r2, #5
 8007a06:	69fa      	ldr	r2, [r7, #28]
 8007a08:	440a      	add	r2, r1
 8007a0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a12:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	68d9      	ldr	r1, [r3, #12]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	781a      	ldrb	r2, [r3, #0]
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	b298      	uxth	r0, r3
 8007a22:	79fb      	ldrb	r3, [r7, #7]
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	4603      	mov	r3, r0
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f000 f9b9 	bl	8007da0 <USB_WritePacket>
 8007a2e:	e105      	b.n	8007c3c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	015a      	lsls	r2, r3, #5
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	4413      	add	r3, r2
 8007a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	0151      	lsls	r1, r2, #5
 8007a42:	69fa      	ldr	r2, [r7, #28]
 8007a44:	440a      	add	r2, r1
 8007a46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a4a:	0cdb      	lsrs	r3, r3, #19
 8007a4c:	04db      	lsls	r3, r3, #19
 8007a4e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	0151      	lsls	r1, r2, #5
 8007a62:	69fa      	ldr	r2, [r7, #28]
 8007a64:	440a      	add	r2, r1
 8007a66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a6a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007a6e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007a72:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d132      	bne.n	8007ae0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	689a      	ldr	r2, [r3, #8]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	689a      	ldr	r2, [r3, #8]
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	015a      	lsls	r2, r3, #5
 8007a96:	69fb      	ldr	r3, [r7, #28]
 8007a98:	4413      	add	r3, r2
 8007a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a9e:	691a      	ldr	r2, [r3, #16]
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	6a1b      	ldr	r3, [r3, #32]
 8007aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007aa8:	69b9      	ldr	r1, [r7, #24]
 8007aaa:	0148      	lsls	r0, r1, #5
 8007aac:	69f9      	ldr	r1, [r7, #28]
 8007aae:	4401      	add	r1, r0
 8007ab0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	015a      	lsls	r2, r3, #5
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	4413      	add	r3, r2
 8007ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	69ba      	ldr	r2, [r7, #24]
 8007ac8:	0151      	lsls	r1, r2, #5
 8007aca:	69fa      	ldr	r2, [r7, #28]
 8007acc:	440a      	add	r2, r1
 8007ace:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ad2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ad6:	6113      	str	r3, [r2, #16]
 8007ad8:	e062      	b.n	8007ba0 <USB_EPStartXfer+0x490>
 8007ada:	bf00      	nop
 8007adc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d123      	bne.n	8007b30 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	015a      	lsls	r2, r3, #5
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007af4:	691a      	ldr	r2, [r3, #16]
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007afe:	69b9      	ldr	r1, [r7, #24]
 8007b00:	0148      	lsls	r0, r1, #5
 8007b02:	69f9      	ldr	r1, [r7, #28]
 8007b04:	4401      	add	r1, r0
 8007b06:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	015a      	lsls	r2, r3, #5
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	69ba      	ldr	r2, [r7, #24]
 8007b1e:	0151      	lsls	r1, r2, #5
 8007b20:	69fa      	ldr	r2, [r7, #28]
 8007b22:	440a      	add	r2, r1
 8007b24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b2c:	6113      	str	r3, [r2, #16]
 8007b2e:	e037      	b.n	8007ba0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	691a      	ldr	r2, [r3, #16]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	4413      	add	r3, r2
 8007b3a:	1e5a      	subs	r2, r3, #1
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b44:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	8afa      	ldrh	r2, [r7, #22]
 8007b4c:	fb03 f202 	mul.w	r2, r3, r2
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	015a      	lsls	r2, r3, #5
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b60:	691a      	ldr	r2, [r3, #16]
 8007b62:	8afb      	ldrh	r3, [r7, #22]
 8007b64:	04d9      	lsls	r1, r3, #19
 8007b66:	4b38      	ldr	r3, [pc, #224]	@ (8007c48 <USB_EPStartXfer+0x538>)
 8007b68:	400b      	ands	r3, r1
 8007b6a:	69b9      	ldr	r1, [r7, #24]
 8007b6c:	0148      	lsls	r0, r1, #5
 8007b6e:	69f9      	ldr	r1, [r7, #28]
 8007b70:	4401      	add	r1, r0
 8007b72:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007b76:	4313      	orrs	r3, r2
 8007b78:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b86:	691a      	ldr	r2, [r3, #16]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	6a1b      	ldr	r3, [r3, #32]
 8007b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b90:	69b9      	ldr	r1, [r7, #24]
 8007b92:	0148      	lsls	r0, r1, #5
 8007b94:	69f9      	ldr	r1, [r7, #28]
 8007b96:	4401      	add	r1, r0
 8007b98:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007ba0:	79fb      	ldrb	r3, [r7, #7]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d10d      	bne.n	8007bc2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d009      	beq.n	8007bc2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	68d9      	ldr	r1, [r3, #12]
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	015a      	lsls	r2, r3, #5
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	4413      	add	r3, r2
 8007bba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bbe:	460a      	mov	r2, r1
 8007bc0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	791b      	ldrb	r3, [r3, #4]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d128      	bne.n	8007c1c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d110      	bne.n	8007bfc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	015a      	lsls	r2, r3, #5
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	0151      	lsls	r1, r2, #5
 8007bec:	69fa      	ldr	r2, [r7, #28]
 8007bee:	440a      	add	r2, r1
 8007bf0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bf4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007bf8:	6013      	str	r3, [r2, #0]
 8007bfa:	e00f      	b.n	8007c1c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	015a      	lsls	r2, r3, #5
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	4413      	add	r3, r2
 8007c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	69ba      	ldr	r2, [r7, #24]
 8007c0c:	0151      	lsls	r1, r2, #5
 8007c0e:	69fa      	ldr	r2, [r7, #28]
 8007c10:	440a      	add	r2, r1
 8007c12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c1a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	69ba      	ldr	r2, [r7, #24]
 8007c2c:	0151      	lsls	r1, r2, #5
 8007c2e:	69fa      	ldr	r2, [r7, #28]
 8007c30:	440a      	add	r2, r1
 8007c32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c36:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007c3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3720      	adds	r7, #32
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	1ff80000 	.word	0x1ff80000

08007c4c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b087      	sub	sp, #28
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c56:	2300      	movs	r3, #0
 8007c58:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	785b      	ldrb	r3, [r3, #1]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d14a      	bne.n	8007d00 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	015a      	lsls	r2, r3, #5
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	4413      	add	r3, r2
 8007c74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c82:	f040 8086 	bne.w	8007d92 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	7812      	ldrb	r2, [r2, #0]
 8007c9a:	0151      	lsls	r1, r2, #5
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	440a      	add	r2, r1
 8007ca0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ca4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007ca8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	683a      	ldr	r2, [r7, #0]
 8007cbc:	7812      	ldrb	r2, [r2, #0]
 8007cbe:	0151      	lsls	r1, r2, #5
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	440a      	add	r2, r1
 8007cc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ccc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d902      	bls.n	8007ce4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	75fb      	strb	r3, [r7, #23]
          break;
 8007ce2:	e056      	b.n	8007d92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cf8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cfc:	d0e7      	beq.n	8007cce <USB_EPStopXfer+0x82>
 8007cfe:	e048      	b.n	8007d92 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	015a      	lsls	r2, r3, #5
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	4413      	add	r3, r2
 8007d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d18:	d13b      	bne.n	8007d92 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	015a      	lsls	r2, r3, #5
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	4413      	add	r3, r2
 8007d24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	7812      	ldrb	r2, [r2, #0]
 8007d2e:	0151      	lsls	r1, r2, #5
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	440a      	add	r2, r1
 8007d34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d38:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007d3c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	683a      	ldr	r2, [r7, #0]
 8007d50:	7812      	ldrb	r2, [r2, #0]
 8007d52:	0151      	lsls	r1, r2, #5
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	440a      	add	r2, r1
 8007d58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3301      	adds	r3, #1
 8007d66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d902      	bls.n	8007d78 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	75fb      	strb	r3, [r7, #23]
          break;
 8007d76:	e00c      	b.n	8007d92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	015a      	lsls	r2, r3, #5
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	4413      	add	r3, r2
 8007d82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d90:	d0e7      	beq.n	8007d62 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	371c      	adds	r7, #28
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b089      	sub	sp, #36	@ 0x24
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	4611      	mov	r1, r2
 8007dac:	461a      	mov	r2, r3
 8007dae:	460b      	mov	r3, r1
 8007db0:	71fb      	strb	r3, [r7, #7]
 8007db2:	4613      	mov	r3, r2
 8007db4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007dbe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d123      	bne.n	8007e0e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007dc6:	88bb      	ldrh	r3, [r7, #4]
 8007dc8:	3303      	adds	r3, #3
 8007dca:	089b      	lsrs	r3, r3, #2
 8007dcc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007dce:	2300      	movs	r3, #0
 8007dd0:	61bb      	str	r3, [r7, #24]
 8007dd2:	e018      	b.n	8007e06 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	031a      	lsls	r2, r3, #12
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007de0:	461a      	mov	r2, r3
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	3301      	adds	r3, #1
 8007dec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	3301      	adds	r3, #1
 8007df2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	3301      	adds	r3, #1
 8007df8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	3301      	adds	r3, #1
 8007e04:	61bb      	str	r3, [r7, #24]
 8007e06:	69ba      	ldr	r2, [r7, #24]
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d3e2      	bcc.n	8007dd4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3724      	adds	r7, #36	@ 0x24
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b08b      	sub	sp, #44	@ 0x2c
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	4613      	mov	r3, r2
 8007e28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007e32:	88fb      	ldrh	r3, [r7, #6]
 8007e34:	089b      	lsrs	r3, r3, #2
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007e3a:	88fb      	ldrh	r3, [r7, #6]
 8007e3c:	f003 0303 	and.w	r3, r3, #3
 8007e40:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007e42:	2300      	movs	r3, #0
 8007e44:	623b      	str	r3, [r7, #32]
 8007e46:	e014      	b.n	8007e72 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e52:	601a      	str	r2, [r3, #0]
    pDest++;
 8007e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e56:	3301      	adds	r3, #1
 8007e58:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e62:	3301      	adds	r3, #1
 8007e64:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e68:	3301      	adds	r3, #1
 8007e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007e6c:	6a3b      	ldr	r3, [r7, #32]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	623b      	str	r3, [r7, #32]
 8007e72:	6a3a      	ldr	r2, [r7, #32]
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d3e6      	bcc.n	8007e48 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007e7a:	8bfb      	ldrh	r3, [r7, #30]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d01e      	beq.n	8007ebe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007e80:	2300      	movs	r3, #0
 8007e82:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	f107 0310 	add.w	r3, r7, #16
 8007e90:	6812      	ldr	r2, [r2, #0]
 8007e92:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	00db      	lsls	r3, r3, #3
 8007e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea4:	701a      	strb	r2, [r3, #0]
      i++;
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	623b      	str	r3, [r7, #32]
      pDest++;
 8007eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eae:	3301      	adds	r3, #1
 8007eb0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007eb2:	8bfb      	ldrh	r3, [r7, #30]
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007eb8:	8bfb      	ldrh	r3, [r7, #30]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1ea      	bne.n	8007e94 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	372c      	adds	r7, #44	@ 0x2c
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	785b      	ldrb	r3, [r3, #1]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d12c      	bne.n	8007f42 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	015a      	lsls	r2, r3, #5
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	4413      	add	r3, r2
 8007ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	db12      	blt.n	8007f20 <USB_EPSetStall+0x54>
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d00f      	beq.n	8007f20 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	0151      	lsls	r1, r2, #5
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	440a      	add	r2, r1
 8007f16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f1a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007f1e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	015a      	lsls	r2, r3, #5
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	4413      	add	r3, r2
 8007f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	0151      	lsls	r1, r2, #5
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	440a      	add	r2, r1
 8007f36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007f3e:	6013      	str	r3, [r2, #0]
 8007f40:	e02b      	b.n	8007f9a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	db12      	blt.n	8007f7a <USB_EPSetStall+0xae>
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00f      	beq.n	8007f7a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	0151      	lsls	r1, r2, #5
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	440a      	add	r2, r1
 8007f70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f74:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007f78:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	0151      	lsls	r1, r2, #5
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	440a      	add	r2, r1
 8007f90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f94:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007f98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3714      	adds	r7, #20
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b085      	sub	sp, #20
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	785b      	ldrb	r3, [r3, #1]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d128      	bne.n	8008016 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	015a      	lsls	r2, r3, #5
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	4413      	add	r3, r2
 8007fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	0151      	lsls	r1, r2, #5
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	440a      	add	r2, r1
 8007fda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fde:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007fe2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	791b      	ldrb	r3, [r3, #4]
 8007fe8:	2b03      	cmp	r3, #3
 8007fea:	d003      	beq.n	8007ff4 <USB_EPClearStall+0x4c>
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	791b      	ldrb	r3, [r3, #4]
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d138      	bne.n	8008066 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	015a      	lsls	r2, r3, #5
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	0151      	lsls	r1, r2, #5
 8008006:	68fa      	ldr	r2, [r7, #12]
 8008008:	440a      	add	r2, r1
 800800a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800800e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008012:	6013      	str	r3, [r2, #0]
 8008014:	e027      	b.n	8008066 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	4413      	add	r3, r2
 800801e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	0151      	lsls	r1, r2, #5
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	440a      	add	r2, r1
 800802c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008030:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008034:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	791b      	ldrb	r3, [r3, #4]
 800803a:	2b03      	cmp	r3, #3
 800803c:	d003      	beq.n	8008046 <USB_EPClearStall+0x9e>
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	791b      	ldrb	r3, [r3, #4]
 8008042:	2b02      	cmp	r3, #2
 8008044:	d10f      	bne.n	8008066 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	015a      	lsls	r2, r3, #5
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	4413      	add	r3, r2
 800804e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	0151      	lsls	r1, r2, #5
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	440a      	add	r2, r1
 800805c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008064:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3714      	adds	r7, #20
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	460b      	mov	r3, r1
 800807e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008092:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008096:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	78fb      	ldrb	r3, [r7, #3]
 80080a2:	011b      	lsls	r3, r3, #4
 80080a4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80080a8:	68f9      	ldr	r1, [r7, #12]
 80080aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080ae:	4313      	orrs	r3, r2
 80080b0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80080da:	f023 0303 	bic.w	r3, r3, #3
 80080de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080ee:	f023 0302 	bic.w	r3, r3, #2
 80080f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3714      	adds	r7, #20
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008102:	b480      	push	{r7}
 8008104:	b085      	sub	sp, #20
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800811c:	f023 0303 	bic.w	r3, r3, #3
 8008120:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008130:	f043 0302 	orr.w	r3, r3, #2
 8008134:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	695b      	ldr	r3, [r3, #20]
 8008150:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	4013      	ands	r3, r2
 800815a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800815c:	68fb      	ldr	r3, [r7, #12]
}
 800815e:	4618      	mov	r0, r3
 8008160:	3714      	adds	r7, #20
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800816a:	b480      	push	{r7}
 800816c:	b085      	sub	sp, #20
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800817c:	699b      	ldr	r3, [r3, #24]
 800817e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008186:	69db      	ldr	r3, [r3, #28]
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	4013      	ands	r3, r2
 800818c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	0c1b      	lsrs	r3, r3, #16
}
 8008192:	4618      	mov	r0, r3
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800819e:	b480      	push	{r7}
 80081a0:	b085      	sub	sp, #20
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081ba:	69db      	ldr	r3, [r3, #28]
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	4013      	ands	r3, r2
 80081c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	b29b      	uxth	r3, r3
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b085      	sub	sp, #20
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	460b      	mov	r3, r1
 80081dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80081e2:	78fb      	ldrb	r3, [r7, #3]
 80081e4:	015a      	lsls	r2, r3, #5
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	4013      	ands	r3, r2
 80081fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008200:	68bb      	ldr	r3, [r7, #8]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3714      	adds	r7, #20
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800820e:	b480      	push	{r7}
 8008210:	b087      	sub	sp, #28
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	460b      	mov	r3, r1
 8008218:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800822e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008230:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008232:	78fb      	ldrb	r3, [r7, #3]
 8008234:	f003 030f 	and.w	r3, r3, #15
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	fa22 f303 	lsr.w	r3, r2, r3
 800823e:	01db      	lsls	r3, r3, #7
 8008240:	b2db      	uxtb	r3, r3
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	4313      	orrs	r3, r2
 8008246:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008248:	78fb      	ldrb	r3, [r7, #3]
 800824a:	015a      	lsls	r2, r3, #5
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	4413      	add	r3, r2
 8008250:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	4013      	ands	r3, r2
 800825a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800825c:	68bb      	ldr	r3, [r7, #8]
}
 800825e:	4618      	mov	r0, r3
 8008260:	371c      	adds	r7, #28
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800826a:	b480      	push	{r7}
 800826c:	b083      	sub	sp, #12
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	f003 0301 	and.w	r3, r3, #1
}
 800827a:	4618      	mov	r0, r3
 800827c:	370c      	adds	r7, #12
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr

08008286 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008286:	b480      	push	{r7}
 8008288:	b085      	sub	sp, #20
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68fa      	ldr	r2, [r7, #12]
 800829c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082a0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80082a4:	f023 0307 	bic.w	r3, r3, #7
 80082a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b087      	sub	sp, #28
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	460b      	mov	r3, r1
 80082d6:	607a      	str	r2, [r7, #4]
 80082d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	333c      	adds	r3, #60	@ 0x3c
 80082e2:	3304      	adds	r3, #4
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	4a26      	ldr	r2, [pc, #152]	@ (8008384 <USB_EP0_OutStart+0xb8>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d90a      	bls.n	8008306 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008300:	d101      	bne.n	8008306 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008302:	2300      	movs	r3, #0
 8008304:	e037      	b.n	8008376 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800830c:	461a      	mov	r2, r3
 800830e:	2300      	movs	r3, #0
 8008310:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008320:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008324:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008334:	f043 0318 	orr.w	r3, r3, #24
 8008338:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008348:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800834c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800834e:	7afb      	ldrb	r3, [r7, #11]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d10f      	bne.n	8008374 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800835a:	461a      	mov	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	697a      	ldr	r2, [r7, #20]
 800836a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800836e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008372:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	371c      	adds	r7, #28
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	4f54300a 	.word	0x4f54300a

08008388 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008390:	2300      	movs	r3, #0
 8008392:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	3301      	adds	r3, #1
 8008398:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083a0:	d901      	bls.n	80083a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e01b      	b.n	80083de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	691b      	ldr	r3, [r3, #16]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	daf2      	bge.n	8008394 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80083ae:	2300      	movs	r3, #0
 80083b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	f043 0201 	orr.w	r2, r3, #1
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	3301      	adds	r3, #1
 80083c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80083ca:	d901      	bls.n	80083d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80083cc:	2303      	movs	r3, #3
 80083ce:	e006      	b.n	80083de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d0f0      	beq.n	80083be <USB_CoreReset+0x36>

  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3714      	adds	r7, #20
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
	...

080083ec <Motor_setup_LF>:
char* IN_RF;
char* IN_RB;
char* IN_EXTRA1;
char* IN_EXTRA2;

void Motor_setup_LF(TIM_HandleTypeDef *_TIM_14_CH1 ,TIM_HandleTypeDef *_TIM_5  ,char* _IN_LF){
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	607a      	str	r2, [r7, #4]
	//Motor_setup_LF(PWM_TIM ,Encoder_TIM   ,IN_LF);

	LF_PWM = _TIM_14_CH1;
 80083f8:	4a0f      	ldr	r2, [pc, #60]	@ (8008438 <Motor_setup_LF+0x4c>)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6013      	str	r3, [r2, #0]
	EN_LF      = _TIM_5;
 80083fe:	4a0f      	ldr	r2, [pc, #60]	@ (800843c <Motor_setup_LF+0x50>)
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(LF_PWM, TIM_CHANNEL_1);       //PWM
 8008404:	4b0c      	ldr	r3, [pc, #48]	@ (8008438 <Motor_setup_LF+0x4c>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2100      	movs	r1, #0
 800840a:	4618      	mov	r0, r3
 800840c:	f7fc ff44 	bl	8005298 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_LF , TIM_CHANNEL_ALL);     //Encoder
 8008410:	4b0a      	ldr	r3, [pc, #40]	@ (800843c <Motor_setup_LF+0x50>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	213c      	movs	r1, #60	@ 0x3c
 8008416:	4618      	mov	r0, r3
 8008418:	f7fd f8ac 	bl	8005574 <HAL_TIM_Encoder_Start>

	IN_LF = _IN_LF;
 800841c:	4a08      	ldr	r2, [pc, #32]	@ (8008440 <Motor_setup_LF+0x54>)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6013      	str	r3, [r2, #0]

	DutyCycle_LF_MAX = (LF_PWM->Init.Period);
 8008422:	4b05      	ldr	r3, [pc, #20]	@ (8008438 <Motor_setup_LF+0x4c>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	b21a      	sxth	r2, r3
 800842a:	4b06      	ldr	r3, [pc, #24]	@ (8008444 <Motor_setup_LF+0x58>)
 800842c:	801a      	strh	r2, [r3, #0]

}
 800842e:	bf00      	nop
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	20000664 	.word	0x20000664
 800843c:	2000064c 	.word	0x2000064c
 8008440:	20000688 	.word	0x20000688
 8008444:	2000067c 	.word	0x2000067c

08008448 <Motor_setup_LB>:

void Motor_setup_LB(TIM_HandleTypeDef *_TIM_12_CH1 ,TIM_HandleTypeDef *_TIM_1  ,char* _IN_LB){
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
    //Motor_setup_LB(PWM_TIM ,Encoder_TIM  ,IN1_LB ,IN2_LB);

	LB_PWM = _TIM_12_CH1;
 8008454:	4a0f      	ldr	r2, [pc, #60]	@ (8008494 <Motor_setup_LB+0x4c>)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6013      	str	r3, [r2, #0]
	EN_LB      = _TIM_1;
 800845a:	4a0f      	ldr	r2, [pc, #60]	@ (8008498 <Motor_setup_LB+0x50>)
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(LB_PWM, TIM_CHANNEL_1);       //PWM
 8008460:	4b0c      	ldr	r3, [pc, #48]	@ (8008494 <Motor_setup_LB+0x4c>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2100      	movs	r1, #0
 8008466:	4618      	mov	r0, r3
 8008468:	f7fc ff16 	bl	8005298 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_LB , TIM_CHANNEL_ALL);     //Encoder
 800846c:	4b0a      	ldr	r3, [pc, #40]	@ (8008498 <Motor_setup_LB+0x50>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	213c      	movs	r1, #60	@ 0x3c
 8008472:	4618      	mov	r0, r3
 8008474:	f7fd f87e 	bl	8005574 <HAL_TIM_Encoder_Start>

	IN_LB = _IN_LB;
 8008478:	4a08      	ldr	r2, [pc, #32]	@ (800849c <Motor_setup_LB+0x54>)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6013      	str	r3, [r2, #0]

	DutyCycle_LB_MAX = (LB_PWM->Init.Period);
 800847e:	4b05      	ldr	r3, [pc, #20]	@ (8008494 <Motor_setup_LB+0x4c>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68db      	ldr	r3, [r3, #12]
 8008484:	b21a      	sxth	r2, r3
 8008486:	4b06      	ldr	r3, [pc, #24]	@ (80084a0 <Motor_setup_LB+0x58>)
 8008488:	801a      	strh	r2, [r3, #0]

}
 800848a:	bf00      	nop
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	20000668 	.word	0x20000668
 8008498:	20000650 	.word	0x20000650
 800849c:	2000068c 	.word	0x2000068c
 80084a0:	2000067e 	.word	0x2000067e

080084a4 <Motor_setup_RF>:

void Motor_setup_RF(TIM_HandleTypeDef *_TIM_11_CH1  ,TIM_HandleTypeDef *_TIM_8  ,char* _IN_RF){
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b084      	sub	sp, #16
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
    //Motor_setup_RF(PWM_TIM ,Encoder_TIM   ,IN1_RF ,IN2_RF);

	RF_PWM = _TIM_11_CH1;
 80084b0:	4a0f      	ldr	r2, [pc, #60]	@ (80084f0 <Motor_setup_RF+0x4c>)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6013      	str	r3, [r2, #0]
	EN_RF  = _TIM_8;
 80084b6:	4a0f      	ldr	r2, [pc, #60]	@ (80084f4 <Motor_setup_RF+0x50>)
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(RF_PWM, TIM_CHANNEL_1);           //PWM
 80084bc:	4b0c      	ldr	r3, [pc, #48]	@ (80084f0 <Motor_setup_RF+0x4c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2100      	movs	r1, #0
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fc fee8 	bl	8005298 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_RF , TIM_CHANNEL_ALL);     //Encoder
 80084c8:	4b0a      	ldr	r3, [pc, #40]	@ (80084f4 <Motor_setup_RF+0x50>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	213c      	movs	r1, #60	@ 0x3c
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7fd f850 	bl	8005574 <HAL_TIM_Encoder_Start>

	IN_RF = _IN_RF;
 80084d4:	4a08      	ldr	r2, [pc, #32]	@ (80084f8 <Motor_setup_RF+0x54>)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6013      	str	r3, [r2, #0]

	DutyCycle_RF_MAX = (RF_PWM->Init.Period);
 80084da:	4b05      	ldr	r3, [pc, #20]	@ (80084f0 <Motor_setup_RF+0x4c>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	b21a      	sxth	r2, r3
 80084e2:	4b06      	ldr	r3, [pc, #24]	@ (80084fc <Motor_setup_RF+0x58>)
 80084e4:	801a      	strh	r2, [r3, #0]

}
 80084e6:	bf00      	nop
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	2000066c 	.word	0x2000066c
 80084f4:	20000654 	.word	0x20000654
 80084f8:	20000690 	.word	0x20000690
 80084fc:	20000680 	.word	0x20000680

08008500 <Motor_setup_RB>:

void Motor_setup_RB(TIM_HandleTypeDef *_TIM_12_CH2   ,TIM_HandleTypeDef *_TIM_4 ,char* _IN_RB){
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	60f8      	str	r0, [r7, #12]
 8008508:	60b9      	str	r1, [r7, #8]
 800850a:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	RB_PWM = _TIM_12_CH2;
 800850c:	4a0f      	ldr	r2, [pc, #60]	@ (800854c <Motor_setup_RB+0x4c>)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6013      	str	r3, [r2, #0]
	EN_RB  = _TIM_4;
 8008512:	4a0f      	ldr	r2, [pc, #60]	@ (8008550 <Motor_setup_RB+0x50>)
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(RB_PWM, TIM_CHANNEL_2);            //PWM
 8008518:	4b0c      	ldr	r3, [pc, #48]	@ (800854c <Motor_setup_RB+0x4c>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2104      	movs	r1, #4
 800851e:	4618      	mov	r0, r3
 8008520:	f7fc feba 	bl	8005298 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_RB , TIM_CHANNEL_ALL);      //Encoder
 8008524:	4b0a      	ldr	r3, [pc, #40]	@ (8008550 <Motor_setup_RB+0x50>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	213c      	movs	r1, #60	@ 0x3c
 800852a:	4618      	mov	r0, r3
 800852c:	f7fd f822 	bl	8005574 <HAL_TIM_Encoder_Start>

	IN_RB = _IN_RB;
 8008530:	4a08      	ldr	r2, [pc, #32]	@ (8008554 <Motor_setup_RB+0x54>)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6013      	str	r3, [r2, #0]

	DutyCycle_RB_MAX = (RB_PWM->Init.Period);
 8008536:	4b05      	ldr	r3, [pc, #20]	@ (800854c <Motor_setup_RB+0x4c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	b21a      	sxth	r2, r3
 800853e:	4b06      	ldr	r3, [pc, #24]	@ (8008558 <Motor_setup_RB+0x58>)
 8008540:	801a      	strh	r2, [r3, #0]

}
 8008542:	bf00      	nop
 8008544:	3710      	adds	r7, #16
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	20000670 	.word	0x20000670
 8008550:	20000658 	.word	0x20000658
 8008554:	20000694 	.word	0x20000694
 8008558:	20000682 	.word	0x20000682

0800855c <Motor_setup_EXTRA1>:

void Motor_setup_EXTRA1(TIM_HandleTypeDef *_TIM_9_CH1  ,TIM_HandleTypeDef *_TIM_3  ,char* _IN_EXTRA1){
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	EXTRA1_PWM = _TIM_9_CH1;
 8008568:	4a0f      	ldr	r2, [pc, #60]	@ (80085a8 <Motor_setup_EXTRA1+0x4c>)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6013      	str	r3, [r2, #0]
	EN_X  = _TIM_3;
 800856e:	4a0f      	ldr	r2, [pc, #60]	@ (80085ac <Motor_setup_EXTRA1+0x50>)
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(EXTRA1_PWM, TIM_CHANNEL_1);            //PWM
 8008574:	4b0c      	ldr	r3, [pc, #48]	@ (80085a8 <Motor_setup_EXTRA1+0x4c>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2100      	movs	r1, #0
 800857a:	4618      	mov	r0, r3
 800857c:	f7fc fe8c 	bl	8005298 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_X , TIM_CHANNEL_ALL);      //Encoder
 8008580:	4b0a      	ldr	r3, [pc, #40]	@ (80085ac <Motor_setup_EXTRA1+0x50>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	213c      	movs	r1, #60	@ 0x3c
 8008586:	4618      	mov	r0, r3
 8008588:	f7fc fff4 	bl	8005574 <HAL_TIM_Encoder_Start>

	IN_EXTRA1 = _IN_EXTRA1;
 800858c:	4a08      	ldr	r2, [pc, #32]	@ (80085b0 <Motor_setup_EXTRA1+0x54>)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6013      	str	r3, [r2, #0]

	DutyCycle_EXTRA1_MAX = (EXTRA1_PWM->Init.Period);
 8008592:	4b05      	ldr	r3, [pc, #20]	@ (80085a8 <Motor_setup_EXTRA1+0x4c>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	b21a      	sxth	r2, r3
 800859a:	4b06      	ldr	r3, [pc, #24]	@ (80085b4 <Motor_setup_EXTRA1+0x58>)
 800859c:	801a      	strh	r2, [r3, #0]

}
 800859e:	bf00      	nop
 80085a0:	3710      	adds	r7, #16
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	20000674 	.word	0x20000674
 80085ac:	2000065c 	.word	0x2000065c
 80085b0:	20000698 	.word	0x20000698
 80085b4:	20000684 	.word	0x20000684

080085b8 <Motor_setup_EXTRA2>:

void Motor_setup_EXTRA2(TIM_HandleTypeDef *_TIM_10_CH1  ,TIM_HandleTypeDef *_TIM_2 ,char* _IN_EXTRA2){
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	EXTRA2_PWM = _TIM_10_CH1;
 80085c4:	4a0f      	ldr	r2, [pc, #60]	@ (8008604 <Motor_setup_EXTRA2+0x4c>)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6013      	str	r3, [r2, #0]
	EN_Y  = _TIM_2;
 80085ca:	4a0f      	ldr	r2, [pc, #60]	@ (8008608 <Motor_setup_EXTRA2+0x50>)
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(EXTRA2_PWM, TIM_CHANNEL_1);            //PWM
 80085d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008604 <Motor_setup_EXTRA2+0x4c>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2100      	movs	r1, #0
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fc fe5e 	bl	8005298 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_Y , TIM_CHANNEL_ALL);      //Encoder
 80085dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008608 <Motor_setup_EXTRA2+0x50>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	213c      	movs	r1, #60	@ 0x3c
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fc ffc6 	bl	8005574 <HAL_TIM_Encoder_Start>

	IN_EXTRA2 = _IN_EXTRA2;
 80085e8:	4a08      	ldr	r2, [pc, #32]	@ (800860c <Motor_setup_EXTRA2+0x54>)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6013      	str	r3, [r2, #0]

	DutyCycle_EXTRA2_MAX = (EXTRA2_PWM->Init.Period);
 80085ee:	4b05      	ldr	r3, [pc, #20]	@ (8008604 <Motor_setup_EXTRA2+0x4c>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	b21a      	sxth	r2, r3
 80085f6:	4b06      	ldr	r3, [pc, #24]	@ (8008610 <Motor_setup_EXTRA2+0x58>)
 80085f8:	801a      	strh	r2, [r3, #0]

}
 80085fa:	bf00      	nop
 80085fc:	3710      	adds	r7, #16
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	20000678 	.word	0x20000678
 8008608:	20000660 	.word	0x20000660
 800860c:	2000069c 	.word	0x2000069c
 8008610:	20000686 	.word	0x20000686

08008614 <getCount>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////PID///////////////////////////////////////////////////////////////

int16_t getCount(TIM_HandleTypeDef *TIM){
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
	int16_t count = ((int16_t)(TIM->Instance->CNT));
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008622:	81fb      	strh	r3, [r7, #14]

	return count;
 8008624:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8008628:	4618      	mov	r0, r3
 800862a:	3714      	adds	r7, #20
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <Setup_CPR>:

float _RPM[6] = {0 ,0 ,0 ,0 ,0 ,0}; //Speed   //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

uint16_t CPR = 68;

void Setup_CPR(uint16_t _CPR){
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	4603      	mov	r3, r0
 800863c:	80fb      	strh	r3, [r7, #6]
	CPR = _CPR;
 800863e:	4a04      	ldr	r2, [pc, #16]	@ (8008650 <Setup_CPR+0x1c>)
 8008640:	88fb      	ldrh	r3, [r7, #6]
 8008642:	8013      	strh	r3, [r2, #0]
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	20000018 	.word	0x20000018

08008654 <Setup_Gear_Ratio>:

uint16_t Gear_Ratio = 48;

void Setup_Gear_Ratio(uint16_t _Gear_Ratio){
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	4603      	mov	r3, r0
 800865c:	80fb      	strh	r3, [r7, #6]
	Gear_Ratio = _Gear_Ratio;
 800865e:	4a04      	ldr	r2, [pc, #16]	@ (8008670 <Setup_Gear_Ratio+0x1c>)
 8008660:	88fb      	ldrh	r3, [r7, #6]
 8008662:	8013      	strh	r3, [r2, #0]
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	2000001a 	.word	0x2000001a

08008674 <Setup_frequency_Motor>:

void Setup_frequency_Motor(uint16_t freq){
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	4603      	mov	r3, r0
 800867c:	80fb      	strh	r3, [r7, #6]
	_freq = freq;
 800867e:	4a04      	ldr	r2, [pc, #16]	@ (8008690 <Setup_frequency_Motor+0x1c>)
 8008680:	88fb      	ldrh	r3, [r7, #6]
 8008682:	8013      	strh	r3, [r2, #0]
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	20000016 	.word	0x20000016

08008694 <getRad_s_to_RPM>:
	float Rad_s = RPM * 0.10472f;

	return Rad_s;
}

float getRad_s_to_RPM(float Rad_s){
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	ed87 0a01 	vstr	s0, [r7, #4]
	float RPM__ = Rad_s * 9.549297f;
 800869e:	edd7 7a01 	vldr	s15, [r7, #4]
 80086a2:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80086c4 <getRad_s_to_RPM+0x30>
 80086a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80086aa:	edc7 7a03 	vstr	s15, [r7, #12]

	return RPM__;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	ee07 3a90 	vmov	s15, r3
}
 80086b4:	eeb0 0a67 	vmov.f32	s0, s15
 80086b8:	3714      	adds	r7, #20
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	4118c9ec 	.word	0x4118c9ec

080086c8 <getRPM_TIM_Wheel>:

float getRPM_TIM_Wheel(TIM_HandleTypeDef *TIM ,uint8_t _Wheel){
 80086c8:	b590      	push	{r4, r7, lr}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	460b      	mov	r3, r1
 80086d2:	70fb      	strb	r3, [r7, #3]
	Present_Count[_Wheel] = (int16_t)getCount(TIM);
 80086d4:	78fc      	ldrb	r4, [r7, #3]
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7ff ff9c 	bl	8008614 <getCount>
 80086dc:	4603      	mov	r3, r0
 80086de:	461a      	mov	r2, r3
 80086e0:	4b29      	ldr	r3, [pc, #164]	@ (8008788 <getRPM_TIM_Wheel+0xc0>)
 80086e2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	// V = count/t = count*freq
	_RPM[_Wheel] = (float)((int16_t)(Present_Count[_Wheel] - Past_Count[_Wheel]) * _freq);
 80086e6:	78fb      	ldrb	r3, [r7, #3]
 80086e8:	4a27      	ldr	r2, [pc, #156]	@ (8008788 <getRPM_TIM_Wheel+0xc0>)
 80086ea:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	78fb      	ldrb	r3, [r7, #3]
 80086f2:	4926      	ldr	r1, [pc, #152]	@ (800878c <getRPM_TIM_Wheel+0xc4>)
 80086f4:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	1ad3      	subs	r3, r2, r3
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	b21b      	sxth	r3, r3
 8008700:	461a      	mov	r2, r3
 8008702:	4b23      	ldr	r3, [pc, #140]	@ (8008790 <getRPM_TIM_Wheel+0xc8>)
 8008704:	881b      	ldrh	r3, [r3, #0]
 8008706:	fb03 f202 	mul.w	r2, r3, r2
 800870a:	78fb      	ldrb	r3, [r7, #3]
 800870c:	ee07 2a90 	vmov	s15, r2
 8008710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008714:	4a1f      	ldr	r2, [pc, #124]	@ (8008794 <getRPM_TIM_Wheel+0xcc>)
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4413      	add	r3, r2
 800871a:	edc3 7a00 	vstr	s15, [r3]
	_RPM[_Wheel] = (float)(((_RPM[_Wheel]* 60.0f)/CPR )/Gear_Ratio);
 800871e:	78fb      	ldrb	r3, [r7, #3]
 8008720:	4a1c      	ldr	r2, [pc, #112]	@ (8008794 <getRPM_TIM_Wheel+0xcc>)
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	edd3 7a00 	vldr	s15, [r3]
 800872a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8008798 <getRPM_TIM_Wheel+0xd0>
 800872e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008732:	4b1a      	ldr	r3, [pc, #104]	@ (800879c <getRPM_TIM_Wheel+0xd4>)
 8008734:	881b      	ldrh	r3, [r3, #0]
 8008736:	ee07 3a90 	vmov	s15, r3
 800873a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800873e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008742:	4b17      	ldr	r3, [pc, #92]	@ (80087a0 <getRPM_TIM_Wheel+0xd8>)
 8008744:	881b      	ldrh	r3, [r3, #0]
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800874e:	78fb      	ldrb	r3, [r7, #3]
 8008750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008754:	4a0f      	ldr	r2, [pc, #60]	@ (8008794 <getRPM_TIM_Wheel+0xcc>)
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4413      	add	r3, r2
 800875a:	edc3 7a00 	vstr	s15, [r3]

	Past_Count[_Wheel] = Present_Count[_Wheel];
 800875e:	78fa      	ldrb	r2, [r7, #3]
 8008760:	78fb      	ldrb	r3, [r7, #3]
 8008762:	4909      	ldr	r1, [pc, #36]	@ (8008788 <getRPM_TIM_Wheel+0xc0>)
 8008764:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8008768:	4a08      	ldr	r2, [pc, #32]	@ (800878c <getRPM_TIM_Wheel+0xc4>)
 800876a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return _RPM[_Wheel];
 800876e:	78fb      	ldrb	r3, [r7, #3]
 8008770:	4a08      	ldr	r2, [pc, #32]	@ (8008794 <getRPM_TIM_Wheel+0xcc>)
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	ee07 3a90 	vmov	s15, r3
}
 800877c:	eeb0 0a67 	vmov.f32	s0, s15
 8008780:	370c      	adds	r7, #12
 8008782:	46bd      	mov	sp, r7
 8008784:	bd90      	pop	{r4, r7, pc}
 8008786:	bf00      	nop
 8008788:	200006a0 	.word	0x200006a0
 800878c:	200006ac 	.word	0x200006ac
 8008790:	20000016 	.word	0x20000016
 8008794:	200006b8 	.word	0x200006b8
 8008798:	42700000 	.word	0x42700000
 800879c:	20000018 	.word	0x20000018
 80087a0:	2000001a 	.word	0x2000001a

080087a4 <Setup_PID_LF>:

float min_speed[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2
float max_speed[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2


void Setup_PID_LF(float Kp_LF ,float Ki_LF ,float Kd_LF ,float min_speed_LF ,float max_speed_LF){
 80087a4:	b480      	push	{r7}
 80087a6:	b087      	sub	sp, #28
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	ed87 0a05 	vstr	s0, [r7, #20]
 80087ae:	edc7 0a04 	vstr	s1, [r7, #16]
 80087b2:	ed87 1a03 	vstr	s2, [r7, #12]
 80087b6:	edc7 1a02 	vstr	s3, [r7, #8]
 80087ba:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[0] = Kp_LF;
 80087be:	4a0a      	ldr	r2, [pc, #40]	@ (80087e8 <Setup_PID_LF+0x44>)
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	6013      	str	r3, [r2, #0]
	Ki_Wheel[0] = Ki_LF;
 80087c4:	4a09      	ldr	r2, [pc, #36]	@ (80087ec <Setup_PID_LF+0x48>)
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	6013      	str	r3, [r2, #0]
	Kd_Wheel[0] = Kd_LF;
 80087ca:	4a09      	ldr	r2, [pc, #36]	@ (80087f0 <Setup_PID_LF+0x4c>)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6013      	str	r3, [r2, #0]

	min_speed[0] = min_speed_LF;
 80087d0:	4a08      	ldr	r2, [pc, #32]	@ (80087f4 <Setup_PID_LF+0x50>)
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	6013      	str	r3, [r2, #0]
	max_speed[0] = max_speed_LF;
 80087d6:	4a08      	ldr	r2, [pc, #32]	@ (80087f8 <Setup_PID_LF+0x54>)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6013      	str	r3, [r2, #0]
}
 80087dc:	bf00      	nop
 80087de:	371c      	adds	r7, #28
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	200006d0 	.word	0x200006d0
 80087ec:	200006e8 	.word	0x200006e8
 80087f0:	20000700 	.word	0x20000700
 80087f4:	20000718 	.word	0x20000718
 80087f8:	20000730 	.word	0x20000730

080087fc <Setup_PID_LB>:

void Setup_PID_LB(float Kp_LB ,float Ki_LB ,float Kd_LB ,float min_speed_LB ,float max_speed_LB){
 80087fc:	b480      	push	{r7}
 80087fe:	b087      	sub	sp, #28
 8008800:	af00      	add	r7, sp, #0
 8008802:	ed87 0a05 	vstr	s0, [r7, #20]
 8008806:	edc7 0a04 	vstr	s1, [r7, #16]
 800880a:	ed87 1a03 	vstr	s2, [r7, #12]
 800880e:	edc7 1a02 	vstr	s3, [r7, #8]
 8008812:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[1] = Kp_LB;
 8008816:	4a0a      	ldr	r2, [pc, #40]	@ (8008840 <Setup_PID_LB+0x44>)
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	6053      	str	r3, [r2, #4]
	Ki_Wheel[1] = Ki_LB;
 800881c:	4a09      	ldr	r2, [pc, #36]	@ (8008844 <Setup_PID_LB+0x48>)
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	6053      	str	r3, [r2, #4]
	Kd_Wheel[1] = Kd_LB;
 8008822:	4a09      	ldr	r2, [pc, #36]	@ (8008848 <Setup_PID_LB+0x4c>)
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6053      	str	r3, [r2, #4]

	min_speed[1] = min_speed_LB;
 8008828:	4a08      	ldr	r2, [pc, #32]	@ (800884c <Setup_PID_LB+0x50>)
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	6053      	str	r3, [r2, #4]
	max_speed[1] = max_speed_LB;
 800882e:	4a08      	ldr	r2, [pc, #32]	@ (8008850 <Setup_PID_LB+0x54>)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6053      	str	r3, [r2, #4]
}
 8008834:	bf00      	nop
 8008836:	371c      	adds	r7, #28
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr
 8008840:	200006d0 	.word	0x200006d0
 8008844:	200006e8 	.word	0x200006e8
 8008848:	20000700 	.word	0x20000700
 800884c:	20000718 	.word	0x20000718
 8008850:	20000730 	.word	0x20000730

08008854 <Setup_PID_RF>:

void Setup_PID_RF(float Kp_RF ,float Ki_RF ,float Kd_RF ,float min_speed_RF ,float max_speed_RF){
 8008854:	b480      	push	{r7}
 8008856:	b087      	sub	sp, #28
 8008858:	af00      	add	r7, sp, #0
 800885a:	ed87 0a05 	vstr	s0, [r7, #20]
 800885e:	edc7 0a04 	vstr	s1, [r7, #16]
 8008862:	ed87 1a03 	vstr	s2, [r7, #12]
 8008866:	edc7 1a02 	vstr	s3, [r7, #8]
 800886a:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[2] = Kp_RF;
 800886e:	4a0a      	ldr	r2, [pc, #40]	@ (8008898 <Setup_PID_RF+0x44>)
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	6093      	str	r3, [r2, #8]
	Ki_Wheel[2] = Ki_RF;
 8008874:	4a09      	ldr	r2, [pc, #36]	@ (800889c <Setup_PID_RF+0x48>)
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	6093      	str	r3, [r2, #8]
	Kd_Wheel[2] = Kd_RF;
 800887a:	4a09      	ldr	r2, [pc, #36]	@ (80088a0 <Setup_PID_RF+0x4c>)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6093      	str	r3, [r2, #8]

	min_speed[2] = min_speed_RF;
 8008880:	4a08      	ldr	r2, [pc, #32]	@ (80088a4 <Setup_PID_RF+0x50>)
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	6093      	str	r3, [r2, #8]
	max_speed[2] = max_speed_RF;
 8008886:	4a08      	ldr	r2, [pc, #32]	@ (80088a8 <Setup_PID_RF+0x54>)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6093      	str	r3, [r2, #8]
}
 800888c:	bf00      	nop
 800888e:	371c      	adds	r7, #28
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	200006d0 	.word	0x200006d0
 800889c:	200006e8 	.word	0x200006e8
 80088a0:	20000700 	.word	0x20000700
 80088a4:	20000718 	.word	0x20000718
 80088a8:	20000730 	.word	0x20000730

080088ac <Setup_PID_RB>:

void Setup_PID_RB(float Kp_RB ,float Ki_RB ,float Kd_RB ,float min_speed_RB ,float max_speed_RB){
 80088ac:	b480      	push	{r7}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	ed87 0a05 	vstr	s0, [r7, #20]
 80088b6:	edc7 0a04 	vstr	s1, [r7, #16]
 80088ba:	ed87 1a03 	vstr	s2, [r7, #12]
 80088be:	edc7 1a02 	vstr	s3, [r7, #8]
 80088c2:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[3] = Kp_RB;
 80088c6:	4a0a      	ldr	r2, [pc, #40]	@ (80088f0 <Setup_PID_RB+0x44>)
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	60d3      	str	r3, [r2, #12]
	Ki_Wheel[3] = Ki_RB;
 80088cc:	4a09      	ldr	r2, [pc, #36]	@ (80088f4 <Setup_PID_RB+0x48>)
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	60d3      	str	r3, [r2, #12]
	Kd_Wheel[3] = Kd_RB;
 80088d2:	4a09      	ldr	r2, [pc, #36]	@ (80088f8 <Setup_PID_RB+0x4c>)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	60d3      	str	r3, [r2, #12]

	min_speed[3] = min_speed_RB;
 80088d8:	4a08      	ldr	r2, [pc, #32]	@ (80088fc <Setup_PID_RB+0x50>)
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	60d3      	str	r3, [r2, #12]
	max_speed[3] = max_speed_RB;
 80088de:	4a08      	ldr	r2, [pc, #32]	@ (8008900 <Setup_PID_RB+0x54>)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	60d3      	str	r3, [r2, #12]
}
 80088e4:	bf00      	nop
 80088e6:	371c      	adds	r7, #28
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	200006d0 	.word	0x200006d0
 80088f4:	200006e8 	.word	0x200006e8
 80088f8:	20000700 	.word	0x20000700
 80088fc:	20000718 	.word	0x20000718
 8008900:	20000730 	.word	0x20000730

08008904 <PID_Speed>:

float Past_Error[6]   = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float Output_PID[6]    = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float PID_Speed(float _Setpoint ,int16_t RPM ,uint8_t _Wheel){
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	ed87 0a01 	vstr	s0, [r7, #4]
 800890e:	4603      	mov	r3, r0
 8008910:	460a      	mov	r2, r1
 8008912:	807b      	strh	r3, [r7, #2]
 8008914:	4613      	mov	r3, r2
 8008916:	707b      	strb	r3, [r7, #1]
//	  case 4 : getRPM_TIM_Wheel(EN_X ,EXTRA1 ); break;
//	  case 5 : getRPM_TIM_Wheel(EN_Y ,EXTRA2 ); break;
//	}

//	Error_Speed[_Wheel] = _Setpoint-_RPM[_Wheel];
	Error_Speed[_Wheel] = _Setpoint-RPM;
 8008918:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800891c:	ee07 3a90 	vmov	s15, r3
 8008920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008924:	787b      	ldrb	r3, [r7, #1]
 8008926:	ed97 7a01 	vldr	s14, [r7, #4]
 800892a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800892e:	4a41      	ldr	r2, [pc, #260]	@ (8008a34 <PID_Speed+0x130>)
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	edc3 7a00 	vstr	s15, [r3]

	Proportional[_Wheel] = Error_Speed[_Wheel];
 8008938:	787a      	ldrb	r2, [r7, #1]
 800893a:	787b      	ldrb	r3, [r7, #1]
 800893c:	493d      	ldr	r1, [pc, #244]	@ (8008a34 <PID_Speed+0x130>)
 800893e:	0092      	lsls	r2, r2, #2
 8008940:	440a      	add	r2, r1
 8008942:	6812      	ldr	r2, [r2, #0]
 8008944:	493c      	ldr	r1, [pc, #240]	@ (8008a38 <PID_Speed+0x134>)
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	440b      	add	r3, r1
 800894a:	601a      	str	r2, [r3, #0]
	Integnator[_Wheel]   += Error_Speed[_Wheel];
 800894c:	787b      	ldrb	r3, [r7, #1]
 800894e:	4a3b      	ldr	r2, [pc, #236]	@ (8008a3c <PID_Speed+0x138>)
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	4413      	add	r3, r2
 8008954:	ed93 7a00 	vldr	s14, [r3]
 8008958:	787b      	ldrb	r3, [r7, #1]
 800895a:	4a36      	ldr	r2, [pc, #216]	@ (8008a34 <PID_Speed+0x130>)
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	4413      	add	r3, r2
 8008960:	edd3 7a00 	vldr	s15, [r3]
 8008964:	787b      	ldrb	r3, [r7, #1]
 8008966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800896a:	4a34      	ldr	r2, [pc, #208]	@ (8008a3c <PID_Speed+0x138>)
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	4413      	add	r3, r2
 8008970:	edc3 7a00 	vstr	s15, [r3]
	Derivative[_Wheel]   = Error_Speed[_Wheel] - Past_Error[_Wheel];
 8008974:	787b      	ldrb	r3, [r7, #1]
 8008976:	4a2f      	ldr	r2, [pc, #188]	@ (8008a34 <PID_Speed+0x130>)
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	ed93 7a00 	vldr	s14, [r3]
 8008980:	787b      	ldrb	r3, [r7, #1]
 8008982:	4a2f      	ldr	r2, [pc, #188]	@ (8008a40 <PID_Speed+0x13c>)
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4413      	add	r3, r2
 8008988:	edd3 7a00 	vldr	s15, [r3]
 800898c:	787b      	ldrb	r3, [r7, #1]
 800898e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008992:	4a2c      	ldr	r2, [pc, #176]	@ (8008a44 <PID_Speed+0x140>)
 8008994:	009b      	lsls	r3, r3, #2
 8008996:	4413      	add	r3, r2
 8008998:	edc3 7a00 	vstr	s15, [r3]

	Past_Error[_Wheel] = Error_Speed[_Wheel];
 800899c:	787a      	ldrb	r2, [r7, #1]
 800899e:	787b      	ldrb	r3, [r7, #1]
 80089a0:	4924      	ldr	r1, [pc, #144]	@ (8008a34 <PID_Speed+0x130>)
 80089a2:	0092      	lsls	r2, r2, #2
 80089a4:	440a      	add	r2, r1
 80089a6:	6812      	ldr	r2, [r2, #0]
 80089a8:	4925      	ldr	r1, [pc, #148]	@ (8008a40 <PID_Speed+0x13c>)
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	440b      	add	r3, r1
 80089ae:	601a      	str	r2, [r3, #0]

	Output_PID[_Wheel]  = (float)((Proportional[_Wheel]*Kp_Wheel[_Wheel]) + (Integnator[_Wheel]*Ki_Wheel[_Wheel]) + (Derivative[_Wheel]*Kd_Wheel[_Wheel]));
 80089b0:	787b      	ldrb	r3, [r7, #1]
 80089b2:	4a21      	ldr	r2, [pc, #132]	@ (8008a38 <PID_Speed+0x134>)
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	ed93 7a00 	vldr	s14, [r3]
 80089bc:	787b      	ldrb	r3, [r7, #1]
 80089be:	4a22      	ldr	r2, [pc, #136]	@ (8008a48 <PID_Speed+0x144>)
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	edd3 7a00 	vldr	s15, [r3]
 80089c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80089cc:	787b      	ldrb	r3, [r7, #1]
 80089ce:	4a1b      	ldr	r2, [pc, #108]	@ (8008a3c <PID_Speed+0x138>)
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	4413      	add	r3, r2
 80089d4:	edd3 6a00 	vldr	s13, [r3]
 80089d8:	787b      	ldrb	r3, [r7, #1]
 80089da:	4a1c      	ldr	r2, [pc, #112]	@ (8008a4c <PID_Speed+0x148>)
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	edd3 7a00 	vldr	s15, [r3]
 80089e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80089e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80089ec:	787b      	ldrb	r3, [r7, #1]
 80089ee:	4a15      	ldr	r2, [pc, #84]	@ (8008a44 <PID_Speed+0x140>)
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4413      	add	r3, r2
 80089f4:	edd3 6a00 	vldr	s13, [r3]
 80089f8:	787b      	ldrb	r3, [r7, #1]
 80089fa:	4a15      	ldr	r2, [pc, #84]	@ (8008a50 <PID_Speed+0x14c>)
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	edd3 7a00 	vldr	s15, [r3]
 8008a04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a08:	787b      	ldrb	r3, [r7, #1]
 8008a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a0e:	4a11      	ldr	r2, [pc, #68]	@ (8008a54 <PID_Speed+0x150>)
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	4413      	add	r3, r2
 8008a14:	edc3 7a00 	vstr	s15, [r3]


	return Output_PID[_Wheel];
 8008a18:	787b      	ldrb	r3, [r7, #1]
 8008a1a:	4a0e      	ldr	r2, [pc, #56]	@ (8008a54 <PID_Speed+0x150>)
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	ee07 3a90 	vmov	s15, r3
}
 8008a26:	eeb0 0a67 	vmov.f32	s0, s15
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr
 8008a34:	20000748 	.word	0x20000748
 8008a38:	20000760 	.word	0x20000760
 8008a3c:	20000778 	.word	0x20000778
 8008a40:	200007a8 	.word	0x200007a8
 8008a44:	20000790 	.word	0x20000790
 8008a48:	200006d0 	.word	0x200006d0
 8008a4c:	200006e8 	.word	0x200006e8
 8008a50:	20000700 	.word	0x20000700
 8008a54:	200007c0 	.word	0x200007c0

08008a58 <Motor_DutyCycle_LF>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////Motor////////////////////////////////////////////////////////////////////
void Motor_DutyCycle_LF(int16_t DutyCycle_LF){
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	4603      	mov	r3, r0
 8008a60:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_LF > DutyCycle_LF_MAX) {
 8008a62:	4b26      	ldr	r3, [pc, #152]	@ (8008afc <Motor_DutyCycle_LF+0xa4>)
 8008a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a68:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	dd03      	ble.n	8008a78 <Motor_DutyCycle_LF+0x20>
	    DutyCycle_LF = DutyCycle_LF_MAX;
 8008a70:	4b22      	ldr	r3, [pc, #136]	@ (8008afc <Motor_DutyCycle_LF+0xa4>)
 8008a72:	881b      	ldrh	r3, [r3, #0]
 8008a74:	80fb      	strh	r3, [r7, #6]
 8008a76:	e00e      	b.n	8008a96 <Motor_DutyCycle_LF+0x3e>
	} else if (DutyCycle_LF < -DutyCycle_LF_MAX) {
 8008a78:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008a7c:	4b1f      	ldr	r3, [pc, #124]	@ (8008afc <Motor_DutyCycle_LF+0xa4>)
 8008a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a82:	425b      	negs	r3, r3
 8008a84:	429a      	cmp	r2, r3
 8008a86:	da06      	bge.n	8008a96 <Motor_DutyCycle_LF+0x3e>
		DutyCycle_LF = -DutyCycle_LF_MAX;
 8008a88:	4b1c      	ldr	r3, [pc, #112]	@ (8008afc <Motor_DutyCycle_LF+0xa4>)
 8008a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	425b      	negs	r3, r3
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	80fb      	strh	r3, [r7, #6]
	}

	LF_PWM->Instance->CCR1 = (DutyCycle_LF > 0) ? (int16_t)DutyCycle_LF : (DutyCycle_LF_MAX + (int16_t)DutyCycle_LF);
 8008a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	dd02      	ble.n	8008aa4 <Motor_DutyCycle_LF+0x4c>
 8008a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008aa2:	e006      	b.n	8008ab2 <Motor_DutyCycle_LF+0x5a>
 8008aa4:	4b15      	ldr	r3, [pc, #84]	@ (8008afc <Motor_DutyCycle_LF+0xa4>)
 8008aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	4a13      	ldr	r2, [pc, #76]	@ (8008b00 <Motor_DutyCycle_LF+0xa8>)
 8008ab4:	6812      	ldr	r2, [r2, #0]
 8008ab6:	6812      	ldr	r2, [r2, #0]
 8008ab8:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_LF , (DutyCycle_LF < 0) ? 1 : 0);
 8008aba:	4b12      	ldr	r3, [pc, #72]	@ (8008b04 <Motor_DutyCycle_LF+0xac>)
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ac2:	13db      	asrs	r3, r3, #15
 8008ac4:	b21b      	sxth	r3, r3
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	f003 0301 	and.w	r3, r3, #1
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	4619      	mov	r1, r3
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	f000 fba1 	bl	8009218 <digitalWrite>

	if(DutyCycle_LF == 0){
 8008ad6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10a      	bne.n	8008af4 <Motor_DutyCycle_LF+0x9c>
	   LF_PWM->Instance->CCR1 = 0;
 8008ade:	4b08      	ldr	r3, [pc, #32]	@ (8008b00 <Motor_DutyCycle_LF+0xa8>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_LF ,0);
 8008ae8:	4b06      	ldr	r3, [pc, #24]	@ (8008b04 <Motor_DutyCycle_LF+0xac>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2100      	movs	r1, #0
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 fb92 	bl	8009218 <digitalWrite>
	}
}
 8008af4:	bf00      	nop
 8008af6:	3708      	adds	r7, #8
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	2000067c 	.word	0x2000067c
 8008b00:	20000664 	.word	0x20000664
 8008b04:	20000688 	.word	0x20000688

08008b08 <Motor_DutyCycle_LB>:

void Motor_DutyCycle_LB(int16_t DutyCycle_LB){
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	4603      	mov	r3, r0
 8008b10:	80fb      	strh	r3, [r7, #6]
	DutyCycle_LB = -DutyCycle_LB;
 8008b12:	88fb      	ldrh	r3, [r7, #6]
 8008b14:	425b      	negs	r3, r3
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_LB > DutyCycle_LB_MAX) {
 8008b1a:	4b26      	ldr	r3, [pc, #152]	@ (8008bb4 <Motor_DutyCycle_LB+0xac>)
 8008b1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b20:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	dd03      	ble.n	8008b30 <Motor_DutyCycle_LB+0x28>
		DutyCycle_LB = DutyCycle_LB_MAX;
 8008b28:	4b22      	ldr	r3, [pc, #136]	@ (8008bb4 <Motor_DutyCycle_LB+0xac>)
 8008b2a:	881b      	ldrh	r3, [r3, #0]
 8008b2c:	80fb      	strh	r3, [r7, #6]
 8008b2e:	e00e      	b.n	8008b4e <Motor_DutyCycle_LB+0x46>
	} else if (DutyCycle_LB < -DutyCycle_LB_MAX) {
 8008b30:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008b34:	4b1f      	ldr	r3, [pc, #124]	@ (8008bb4 <Motor_DutyCycle_LB+0xac>)
 8008b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b3a:	425b      	negs	r3, r3
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	da06      	bge.n	8008b4e <Motor_DutyCycle_LB+0x46>
		DutyCycle_LB = -DutyCycle_LB_MAX;
 8008b40:	4b1c      	ldr	r3, [pc, #112]	@ (8008bb4 <Motor_DutyCycle_LB+0xac>)
 8008b42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	425b      	negs	r3, r3
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	80fb      	strh	r3, [r7, #6]
	}

	LB_PWM->Instance->CCR1 = (DutyCycle_LB > 0) ? (int16_t)DutyCycle_LB : (DutyCycle_LB_MAX + (int16_t)DutyCycle_LB);
 8008b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	dd02      	ble.n	8008b5c <Motor_DutyCycle_LB+0x54>
 8008b56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b5a:	e006      	b.n	8008b6a <Motor_DutyCycle_LB+0x62>
 8008b5c:	4b15      	ldr	r3, [pc, #84]	@ (8008bb4 <Motor_DutyCycle_LB+0xac>)
 8008b5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b62:	461a      	mov	r2, r3
 8008b64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b68:	4413      	add	r3, r2
 8008b6a:	4a13      	ldr	r2, [pc, #76]	@ (8008bb8 <Motor_DutyCycle_LB+0xb0>)
 8008b6c:	6812      	ldr	r2, [r2, #0]
 8008b6e:	6812      	ldr	r2, [r2, #0]
 8008b70:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_LB , (DutyCycle_LB < 0) ? 1 : 0);
 8008b72:	4b12      	ldr	r3, [pc, #72]	@ (8008bbc <Motor_DutyCycle_LB+0xb4>)
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b7a:	13db      	asrs	r3, r3, #15
 8008b7c:	b21b      	sxth	r3, r3
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	f003 0301 	and.w	r3, r3, #1
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	4619      	mov	r1, r3
 8008b88:	4610      	mov	r0, r2
 8008b8a:	f000 fb45 	bl	8009218 <digitalWrite>

	if(DutyCycle_LB == 0){
 8008b8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10a      	bne.n	8008bac <Motor_DutyCycle_LB+0xa4>
	   LB_PWM->Instance->CCR1 = 0;
 8008b96:	4b08      	ldr	r3, [pc, #32]	@ (8008bb8 <Motor_DutyCycle_LB+0xb0>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_LB ,0);
 8008ba0:	4b06      	ldr	r3, [pc, #24]	@ (8008bbc <Motor_DutyCycle_LB+0xb4>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 fb36 	bl	8009218 <digitalWrite>
	}
}
 8008bac:	bf00      	nop
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	2000067e 	.word	0x2000067e
 8008bb8:	20000668 	.word	0x20000668
 8008bbc:	2000068c 	.word	0x2000068c

08008bc0 <Motor_DutyCycle_RF>:

void Motor_DutyCycle_RF(int16_t DutyCycle_RF){
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	80fb      	strh	r3, [r7, #6]
	DutyCycle_RF = -DutyCycle_RF;
 8008bca:	88fb      	ldrh	r3, [r7, #6]
 8008bcc:	425b      	negs	r3, r3
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_RF > DutyCycle_RF_MAX) {
 8008bd2:	4b26      	ldr	r3, [pc, #152]	@ (8008c6c <Motor_DutyCycle_RF+0xac>)
 8008bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bd8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	dd03      	ble.n	8008be8 <Motor_DutyCycle_RF+0x28>
		DutyCycle_RF = DutyCycle_RF_MAX;
 8008be0:	4b22      	ldr	r3, [pc, #136]	@ (8008c6c <Motor_DutyCycle_RF+0xac>)
 8008be2:	881b      	ldrh	r3, [r3, #0]
 8008be4:	80fb      	strh	r3, [r7, #6]
 8008be6:	e00e      	b.n	8008c06 <Motor_DutyCycle_RF+0x46>
	} else if (DutyCycle_RF < -DutyCycle_RF_MAX) {
 8008be8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008bec:	4b1f      	ldr	r3, [pc, #124]	@ (8008c6c <Motor_DutyCycle_RF+0xac>)
 8008bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bf2:	425b      	negs	r3, r3
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	da06      	bge.n	8008c06 <Motor_DutyCycle_RF+0x46>
		DutyCycle_RF = -DutyCycle_RF_MAX;
 8008bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8008c6c <Motor_DutyCycle_RF+0xac>)
 8008bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	425b      	negs	r3, r3
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	80fb      	strh	r3, [r7, #6]
	}

	RF_PWM->Instance->CCR1 = (DutyCycle_RF > 0) ? (int16_t)DutyCycle_RF : (DutyCycle_RF_MAX + (int16_t)DutyCycle_RF);
 8008c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	dd02      	ble.n	8008c14 <Motor_DutyCycle_RF+0x54>
 8008c0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c12:	e006      	b.n	8008c22 <Motor_DutyCycle_RF+0x62>
 8008c14:	4b15      	ldr	r3, [pc, #84]	@ (8008c6c <Motor_DutyCycle_RF+0xac>)
 8008c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c20:	4413      	add	r3, r2
 8008c22:	4a13      	ldr	r2, [pc, #76]	@ (8008c70 <Motor_DutyCycle_RF+0xb0>)
 8008c24:	6812      	ldr	r2, [r2, #0]
 8008c26:	6812      	ldr	r2, [r2, #0]
 8008c28:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_RF , (DutyCycle_RF < 0) ? 1 : 0);
 8008c2a:	4b12      	ldr	r3, [pc, #72]	@ (8008c74 <Motor_DutyCycle_RF+0xb4>)
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c32:	13db      	asrs	r3, r3, #15
 8008c34:	b21b      	sxth	r3, r3
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	4619      	mov	r1, r3
 8008c40:	4610      	mov	r0, r2
 8008c42:	f000 fae9 	bl	8009218 <digitalWrite>

	if(DutyCycle_RF == 0){
 8008c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10a      	bne.n	8008c64 <Motor_DutyCycle_RF+0xa4>
	   RF_PWM->Instance->CCR1 = 0;
 8008c4e:	4b08      	ldr	r3, [pc, #32]	@ (8008c70 <Motor_DutyCycle_RF+0xb0>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	2200      	movs	r2, #0
 8008c56:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_RF ,0);
 8008c58:	4b06      	ldr	r3, [pc, #24]	@ (8008c74 <Motor_DutyCycle_RF+0xb4>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 fada 	bl	8009218 <digitalWrite>
	}
}
 8008c64:	bf00      	nop
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	20000680 	.word	0x20000680
 8008c70:	2000066c 	.word	0x2000066c
 8008c74:	20000690 	.word	0x20000690

08008c78 <Motor_DutyCycle_RB>:

void Motor_DutyCycle_RB(int16_t DutyCycle_RB){
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	4603      	mov	r3, r0
 8008c80:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_RB > DutyCycle_RB_MAX) {
 8008c82:	4b26      	ldr	r3, [pc, #152]	@ (8008d1c <Motor_DutyCycle_RB+0xa4>)
 8008c84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c88:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	dd03      	ble.n	8008c98 <Motor_DutyCycle_RB+0x20>
		DutyCycle_RB = DutyCycle_RB_MAX;
 8008c90:	4b22      	ldr	r3, [pc, #136]	@ (8008d1c <Motor_DutyCycle_RB+0xa4>)
 8008c92:	881b      	ldrh	r3, [r3, #0]
 8008c94:	80fb      	strh	r3, [r7, #6]
 8008c96:	e00e      	b.n	8008cb6 <Motor_DutyCycle_RB+0x3e>
	} else if (DutyCycle_RB < -DutyCycle_RB_MAX) {
 8008c98:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8008d1c <Motor_DutyCycle_RB+0xa4>)
 8008c9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ca2:	425b      	negs	r3, r3
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	da06      	bge.n	8008cb6 <Motor_DutyCycle_RB+0x3e>
	    DutyCycle_RB = -DutyCycle_RB_MAX;
 8008ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8008d1c <Motor_DutyCycle_RB+0xa4>)
 8008caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	425b      	negs	r3, r3
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	80fb      	strh	r3, [r7, #6]
	}

	RB_PWM->Instance->CCR2 = (DutyCycle_RB > 0) ? (int16_t)DutyCycle_RB : (DutyCycle_RB_MAX + (int16_t)DutyCycle_RB);
 8008cb6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	dd02      	ble.n	8008cc4 <Motor_DutyCycle_RB+0x4c>
 8008cbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cc2:	e006      	b.n	8008cd2 <Motor_DutyCycle_RB+0x5a>
 8008cc4:	4b15      	ldr	r3, [pc, #84]	@ (8008d1c <Motor_DutyCycle_RB+0xa4>)
 8008cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cca:	461a      	mov	r2, r3
 8008ccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	4a13      	ldr	r2, [pc, #76]	@ (8008d20 <Motor_DutyCycle_RB+0xa8>)
 8008cd4:	6812      	ldr	r2, [r2, #0]
 8008cd6:	6812      	ldr	r2, [r2, #0]
 8008cd8:	6393      	str	r3, [r2, #56]	@ 0x38

	digitalWrite(IN_RB , (DutyCycle_RB < 0) ? 1 : 0);
 8008cda:	4b12      	ldr	r3, [pc, #72]	@ (8008d24 <Motor_DutyCycle_RB+0xac>)
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ce2:	13db      	asrs	r3, r3, #15
 8008ce4:	b21b      	sxth	r3, r3
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	f003 0301 	and.w	r3, r3, #1
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	4619      	mov	r1, r3
 8008cf0:	4610      	mov	r0, r2
 8008cf2:	f000 fa91 	bl	8009218 <digitalWrite>

	if(DutyCycle_RB == 0){
 8008cf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d10a      	bne.n	8008d14 <Motor_DutyCycle_RB+0x9c>
	    RB_PWM->Instance->CCR2 = 0;
 8008cfe:	4b08      	ldr	r3, [pc, #32]	@ (8008d20 <Motor_DutyCycle_RB+0xa8>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2200      	movs	r2, #0
 8008d06:	639a      	str	r2, [r3, #56]	@ 0x38
		digitalWrite(IN_RB ,0);
 8008d08:	4b06      	ldr	r3, [pc, #24]	@ (8008d24 <Motor_DutyCycle_RB+0xac>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 fa82 	bl	8009218 <digitalWrite>
	}
}
 8008d14:	bf00      	nop
 8008d16:	3708      	adds	r7, #8
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	20000682 	.word	0x20000682
 8008d20:	20000670 	.word	0x20000670
 8008d24:	20000694 	.word	0x20000694

08008d28 <Motor_DutyCycle_EXTRA1>:

void Motor_DutyCycle_EXTRA1(int16_t DutyCycle_EXTRA1){
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	4603      	mov	r3, r0
 8008d30:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_EXTRA1 > DutyCycle_EXTRA1_MAX) {
 8008d32:	4b26      	ldr	r3, [pc, #152]	@ (8008dcc <Motor_DutyCycle_EXTRA1+0xa4>)
 8008d34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d38:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	dd03      	ble.n	8008d48 <Motor_DutyCycle_EXTRA1+0x20>
		DutyCycle_EXTRA1 = DutyCycle_EXTRA1_MAX;
 8008d40:	4b22      	ldr	r3, [pc, #136]	@ (8008dcc <Motor_DutyCycle_EXTRA1+0xa4>)
 8008d42:	881b      	ldrh	r3, [r3, #0]
 8008d44:	80fb      	strh	r3, [r7, #6]
 8008d46:	e00e      	b.n	8008d66 <Motor_DutyCycle_EXTRA1+0x3e>
	} else if (DutyCycle_EXTRA1 < -DutyCycle_EXTRA1_MAX) {
 8008d48:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008d4c:	4b1f      	ldr	r3, [pc, #124]	@ (8008dcc <Motor_DutyCycle_EXTRA1+0xa4>)
 8008d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d52:	425b      	negs	r3, r3
 8008d54:	429a      	cmp	r2, r3
 8008d56:	da06      	bge.n	8008d66 <Motor_DutyCycle_EXTRA1+0x3e>
		DutyCycle_EXTRA1 = -DutyCycle_EXTRA1_MAX;
 8008d58:	4b1c      	ldr	r3, [pc, #112]	@ (8008dcc <Motor_DutyCycle_EXTRA1+0xa4>)
 8008d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	425b      	negs	r3, r3
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	80fb      	strh	r3, [r7, #6]
	}

	EXTRA1_PWM->Instance->CCR1 = (DutyCycle_EXTRA1 > 0) ? (int16_t)DutyCycle_EXTRA1 : (DutyCycle_EXTRA1_MAX + (int16_t)DutyCycle_EXTRA1);
 8008d66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	dd02      	ble.n	8008d74 <Motor_DutyCycle_EXTRA1+0x4c>
 8008d6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d72:	e006      	b.n	8008d82 <Motor_DutyCycle_EXTRA1+0x5a>
 8008d74:	4b15      	ldr	r3, [pc, #84]	@ (8008dcc <Motor_DutyCycle_EXTRA1+0xa4>)
 8008d76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d80:	4413      	add	r3, r2
 8008d82:	4a13      	ldr	r2, [pc, #76]	@ (8008dd0 <Motor_DutyCycle_EXTRA1+0xa8>)
 8008d84:	6812      	ldr	r2, [r2, #0]
 8008d86:	6812      	ldr	r2, [r2, #0]
 8008d88:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_EXTRA1 , (DutyCycle_EXTRA1 < 0) ? 1 : 0);
 8008d8a:	4b12      	ldr	r3, [pc, #72]	@ (8008dd4 <Motor_DutyCycle_EXTRA1+0xac>)
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d92:	13db      	asrs	r3, r3, #15
 8008d94:	b21b      	sxth	r3, r3
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	f003 0301 	and.w	r3, r3, #1
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	4619      	mov	r1, r3
 8008da0:	4610      	mov	r0, r2
 8008da2:	f000 fa39 	bl	8009218 <digitalWrite>

	if(DutyCycle_EXTRA1 == 0){
 8008da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10a      	bne.n	8008dc4 <Motor_DutyCycle_EXTRA1+0x9c>
		EXTRA1_PWM->Instance->CCR1 = 0;
 8008dae:	4b08      	ldr	r3, [pc, #32]	@ (8008dd0 <Motor_DutyCycle_EXTRA1+0xa8>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2200      	movs	r2, #0
 8008db6:	635a      	str	r2, [r3, #52]	@ 0x34
	    digitalWrite(IN_EXTRA1 ,0);
 8008db8:	4b06      	ldr	r3, [pc, #24]	@ (8008dd4 <Motor_DutyCycle_EXTRA1+0xac>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 fa2a 	bl	8009218 <digitalWrite>
	}
}
 8008dc4:	bf00      	nop
 8008dc6:	3708      	adds	r7, #8
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	20000684 	.word	0x20000684
 8008dd0:	20000674 	.word	0x20000674
 8008dd4:	20000698 	.word	0x20000698

08008dd8 <Motor_DutyCycle_EXTRA2>:

void Motor_DutyCycle_EXTRA2(int16_t DutyCycle_EXTRA2){
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	4603      	mov	r3, r0
 8008de0:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_EXTRA2 > DutyCycle_EXTRA2_MAX) {
 8008de2:	4b26      	ldr	r3, [pc, #152]	@ (8008e7c <Motor_DutyCycle_EXTRA2+0xa4>)
 8008de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008de8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	dd03      	ble.n	8008df8 <Motor_DutyCycle_EXTRA2+0x20>
		DutyCycle_EXTRA2 = DutyCycle_EXTRA2_MAX;
 8008df0:	4b22      	ldr	r3, [pc, #136]	@ (8008e7c <Motor_DutyCycle_EXTRA2+0xa4>)
 8008df2:	881b      	ldrh	r3, [r3, #0]
 8008df4:	80fb      	strh	r3, [r7, #6]
 8008df6:	e00e      	b.n	8008e16 <Motor_DutyCycle_EXTRA2+0x3e>
	} else if (DutyCycle_EXTRA2 < -DutyCycle_EXTRA2_MAX) {
 8008df8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8008e7c <Motor_DutyCycle_EXTRA2+0xa4>)
 8008dfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e02:	425b      	negs	r3, r3
 8008e04:	429a      	cmp	r2, r3
 8008e06:	da06      	bge.n	8008e16 <Motor_DutyCycle_EXTRA2+0x3e>
		DutyCycle_EXTRA2 = -DutyCycle_EXTRA2_MAX;
 8008e08:	4b1c      	ldr	r3, [pc, #112]	@ (8008e7c <Motor_DutyCycle_EXTRA2+0xa4>)
 8008e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	425b      	negs	r3, r3
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	80fb      	strh	r3, [r7, #6]
	}

	EXTRA2_PWM->Instance->CCR1 = (DutyCycle_EXTRA2 > 0) ? (int16_t)DutyCycle_EXTRA2 : (DutyCycle_EXTRA2_MAX + (int16_t)DutyCycle_EXTRA2);
 8008e16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	dd02      	ble.n	8008e24 <Motor_DutyCycle_EXTRA2+0x4c>
 8008e1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e22:	e006      	b.n	8008e32 <Motor_DutyCycle_EXTRA2+0x5a>
 8008e24:	4b15      	ldr	r3, [pc, #84]	@ (8008e7c <Motor_DutyCycle_EXTRA2+0xa4>)
 8008e26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e30:	4413      	add	r3, r2
 8008e32:	4a13      	ldr	r2, [pc, #76]	@ (8008e80 <Motor_DutyCycle_EXTRA2+0xa8>)
 8008e34:	6812      	ldr	r2, [r2, #0]
 8008e36:	6812      	ldr	r2, [r2, #0]
 8008e38:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_EXTRA2 , (DutyCycle_EXTRA2 < 0) ? 1 : 0);
 8008e3a:	4b12      	ldr	r3, [pc, #72]	@ (8008e84 <Motor_DutyCycle_EXTRA2+0xac>)
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e42:	13db      	asrs	r3, r3, #15
 8008e44:	b21b      	sxth	r3, r3
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	f003 0301 	and.w	r3, r3, #1
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	4619      	mov	r1, r3
 8008e50:	4610      	mov	r0, r2
 8008e52:	f000 f9e1 	bl	8009218 <digitalWrite>

	if(DutyCycle_EXTRA2 == 0){
 8008e56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10a      	bne.n	8008e74 <Motor_DutyCycle_EXTRA2+0x9c>
	     EXTRA2_PWM->Instance->CCR1 = 0;
 8008e5e:	4b08      	ldr	r3, [pc, #32]	@ (8008e80 <Motor_DutyCycle_EXTRA2+0xa8>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2200      	movs	r2, #0
 8008e66:	635a      	str	r2, [r3, #52]	@ 0x34
		 digitalWrite(IN_EXTRA2 ,0);
 8008e68:	4b06      	ldr	r3, [pc, #24]	@ (8008e84 <Motor_DutyCycle_EXTRA2+0xac>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 f9d2 	bl	8009218 <digitalWrite>
	}
}
 8008e74:	bf00      	nop
 8008e76:	3708      	adds	r7, #8
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}
 8008e7c:	20000686 	.word	0x20000686
 8008e80:	20000678 	.word	0x20000678
 8008e84:	2000069c 	.word	0x2000069c

08008e88 <Motor_Speed_LF>:

int16_t Duty_Cycle[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float Motor_Speed_LF(int16_t RPM_INPUT ,float RPM_LF){
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	4603      	mov	r3, r0
 8008e90:	ed87 0a00 	vstr	s0, [r7]
 8008e94:	80fb      	strh	r3, [r7, #6]
	if (RPM_LF > max_speed[0]) {
 8008e96:	4b30      	ldr	r3, [pc, #192]	@ (8008f58 <Motor_Speed_LF+0xd0>)
 8008e98:	edd3 7a00 	vldr	s15, [r3]
 8008e9c:	ed97 7a00 	vldr	s14, [r7]
 8008ea0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea8:	dd03      	ble.n	8008eb2 <Motor_Speed_LF+0x2a>
	   RPM_LF = max_speed[0];
 8008eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8008f58 <Motor_Speed_LF+0xd0>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	603b      	str	r3, [r7, #0]
 8008eb0:	e012      	b.n	8008ed8 <Motor_Speed_LF+0x50>
	} else if (RPM_LF < -max_speed[0]) {
 8008eb2:	4b29      	ldr	r3, [pc, #164]	@ (8008f58 <Motor_Speed_LF+0xd0>)
 8008eb4:	edd3 7a00 	vldr	s15, [r3]
 8008eb8:	eef1 7a67 	vneg.f32	s15, s15
 8008ebc:	ed97 7a00 	vldr	s14, [r7]
 8008ec0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ec8:	d506      	bpl.n	8008ed8 <Motor_Speed_LF+0x50>
	   RPM_LF = -max_speed[0];
 8008eca:	4b23      	ldr	r3, [pc, #140]	@ (8008f58 <Motor_Speed_LF+0xd0>)
 8008ecc:	edd3 7a00 	vldr	s15, [r3]
 8008ed0:	eef1 7a67 	vneg.f32	s15, s15
 8008ed4:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_LF , 0);
 8008ed8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008edc:	ee07 3a90 	vmov	s15, r3
 8008ee0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008ee4:	edd7 7a00 	vldr	s15, [r7]
 8008ee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008eec:	ee17 3a90 	vmov	r3, s15
 8008ef0:	b21b      	sxth	r3, r3
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	eeb0 0a47 	vmov.f32	s0, s14
 8008efa:	f7ff fd03 	bl	8008904 <PID_Speed>

	Duty_Cycle[0] = (int16_t)((Output_PID[0] / ((float)(max_speed[0] - min_speed[0]))) * DutyCycle_LF_MAX);
 8008efe:	4b17      	ldr	r3, [pc, #92]	@ (8008f5c <Motor_Speed_LF+0xd4>)
 8008f00:	edd3 6a00 	vldr	s13, [r3]
 8008f04:	4b14      	ldr	r3, [pc, #80]	@ (8008f58 <Motor_Speed_LF+0xd0>)
 8008f06:	ed93 7a00 	vldr	s14, [r3]
 8008f0a:	4b15      	ldr	r3, [pc, #84]	@ (8008f60 <Motor_Speed_LF+0xd8>)
 8008f0c:	edd3 7a00 	vldr	s15, [r3]
 8008f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f18:	4b12      	ldr	r3, [pc, #72]	@ (8008f64 <Motor_Speed_LF+0xdc>)
 8008f1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f1e:	ee07 3a90 	vmov	s15, r3
 8008f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f2e:	ee17 3a90 	vmov	r3, s15
 8008f32:	b21a      	sxth	r2, r3
 8008f34:	4b0c      	ldr	r3, [pc, #48]	@ (8008f68 <Motor_Speed_LF+0xe0>)
 8008f36:	801a      	strh	r2, [r3, #0]

	Motor_DutyCycle_LF(Duty_Cycle[0]);
 8008f38:	4b0b      	ldr	r3, [pc, #44]	@ (8008f68 <Motor_Speed_LF+0xe0>)
 8008f3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7ff fd8a 	bl	8008a58 <Motor_DutyCycle_LF>

//	return _RPM[0];
	return Output_PID[0];
 8008f44:	4b05      	ldr	r3, [pc, #20]	@ (8008f5c <Motor_Speed_LF+0xd4>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	ee07 3a90 	vmov	s15, r3
}
 8008f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8008f50:	3708      	adds	r7, #8
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
 8008f56:	bf00      	nop
 8008f58:	20000730 	.word	0x20000730
 8008f5c:	200007c0 	.word	0x200007c0
 8008f60:	20000718 	.word	0x20000718
 8008f64:	2000067c 	.word	0x2000067c
 8008f68:	200007d8 	.word	0x200007d8

08008f6c <Motor_Speed_LB>:

float Motor_Speed_LB(int16_t RPM_INPUT ,float RPM_LB){
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	4603      	mov	r3, r0
 8008f74:	ed87 0a00 	vstr	s0, [r7]
 8008f78:	80fb      	strh	r3, [r7, #6]
	if (RPM_LB > max_speed[1]) {
 8008f7a:	4b30      	ldr	r3, [pc, #192]	@ (800903c <Motor_Speed_LB+0xd0>)
 8008f7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008f80:	ed97 7a00 	vldr	s14, [r7]
 8008f84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f8c:	dd03      	ble.n	8008f96 <Motor_Speed_LB+0x2a>
	   RPM_LB = max_speed[1];
 8008f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800903c <Motor_Speed_LB+0xd0>)
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	603b      	str	r3, [r7, #0]
 8008f94:	e012      	b.n	8008fbc <Motor_Speed_LB+0x50>
	} else if (RPM_LB < -max_speed[1]) {
 8008f96:	4b29      	ldr	r3, [pc, #164]	@ (800903c <Motor_Speed_LB+0xd0>)
 8008f98:	edd3 7a01 	vldr	s15, [r3, #4]
 8008f9c:	eef1 7a67 	vneg.f32	s15, s15
 8008fa0:	ed97 7a00 	vldr	s14, [r7]
 8008fa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fac:	d506      	bpl.n	8008fbc <Motor_Speed_LB+0x50>
	   RPM_LB = -max_speed[1];
 8008fae:	4b23      	ldr	r3, [pc, #140]	@ (800903c <Motor_Speed_LB+0xd0>)
 8008fb0:	edd3 7a01 	vldr	s15, [r3, #4]
 8008fb4:	eef1 7a67 	vneg.f32	s15, s15
 8008fb8:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_LB ,1);
 8008fbc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008fc0:	ee07 3a90 	vmov	s15, r3
 8008fc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008fc8:	edd7 7a00 	vldr	s15, [r7]
 8008fcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008fd0:	ee17 3a90 	vmov	r3, s15
 8008fd4:	b21b      	sxth	r3, r3
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	4618      	mov	r0, r3
 8008fda:	eeb0 0a47 	vmov.f32	s0, s14
 8008fde:	f7ff fc91 	bl	8008904 <PID_Speed>

	Duty_Cycle[1] = (int16_t)((Output_PID[1]/((float)(max_speed[1] - min_speed[1]))) * DutyCycle_LB_MAX);
 8008fe2:	4b17      	ldr	r3, [pc, #92]	@ (8009040 <Motor_Speed_LB+0xd4>)
 8008fe4:	edd3 6a01 	vldr	s13, [r3, #4]
 8008fe8:	4b14      	ldr	r3, [pc, #80]	@ (800903c <Motor_Speed_LB+0xd0>)
 8008fea:	ed93 7a01 	vldr	s14, [r3, #4]
 8008fee:	4b15      	ldr	r3, [pc, #84]	@ (8009044 <Motor_Speed_LB+0xd8>)
 8008ff0:	edd3 7a01 	vldr	s15, [r3, #4]
 8008ff4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ff8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ffc:	4b12      	ldr	r3, [pc, #72]	@ (8009048 <Motor_Speed_LB+0xdc>)
 8008ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009002:	ee07 3a90 	vmov	s15, r3
 8009006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800900a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800900e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009012:	ee17 3a90 	vmov	r3, s15
 8009016:	b21a      	sxth	r2, r3
 8009018:	4b0c      	ldr	r3, [pc, #48]	@ (800904c <Motor_Speed_LB+0xe0>)
 800901a:	805a      	strh	r2, [r3, #2]

	Motor_DutyCycle_LB(Duty_Cycle[1]);
 800901c:	4b0b      	ldr	r3, [pc, #44]	@ (800904c <Motor_Speed_LB+0xe0>)
 800901e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009022:	4618      	mov	r0, r3
 8009024:	f7ff fd70 	bl	8008b08 <Motor_DutyCycle_LB>

//	return _RPM[1];
	return Output_PID[1];
 8009028:	4b05      	ldr	r3, [pc, #20]	@ (8009040 <Motor_Speed_LB+0xd4>)
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	ee07 3a90 	vmov	s15, r3
}
 8009030:	eeb0 0a67 	vmov.f32	s0, s15
 8009034:	3708      	adds	r7, #8
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	20000730 	.word	0x20000730
 8009040:	200007c0 	.word	0x200007c0
 8009044:	20000718 	.word	0x20000718
 8009048:	2000067e 	.word	0x2000067e
 800904c:	200007d8 	.word	0x200007d8

08009050 <Motor_Speed_RF>:

float Motor_Speed_RF(int16_t RPM_INPUT ,float RPM_RF){
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	4603      	mov	r3, r0
 8009058:	ed87 0a00 	vstr	s0, [r7]
 800905c:	80fb      	strh	r3, [r7, #6]
	if (RPM_RF > max_speed[2]) {
 800905e:	4b30      	ldr	r3, [pc, #192]	@ (8009120 <Motor_Speed_RF+0xd0>)
 8009060:	edd3 7a02 	vldr	s15, [r3, #8]
 8009064:	ed97 7a00 	vldr	s14, [r7]
 8009068:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800906c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009070:	dd03      	ble.n	800907a <Motor_Speed_RF+0x2a>
	   RPM_RF = max_speed[2];
 8009072:	4b2b      	ldr	r3, [pc, #172]	@ (8009120 <Motor_Speed_RF+0xd0>)
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	603b      	str	r3, [r7, #0]
 8009078:	e012      	b.n	80090a0 <Motor_Speed_RF+0x50>
	} else if (RPM_RF < -max_speed[2]) {
 800907a:	4b29      	ldr	r3, [pc, #164]	@ (8009120 <Motor_Speed_RF+0xd0>)
 800907c:	edd3 7a02 	vldr	s15, [r3, #8]
 8009080:	eef1 7a67 	vneg.f32	s15, s15
 8009084:	ed97 7a00 	vldr	s14, [r7]
 8009088:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800908c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009090:	d506      	bpl.n	80090a0 <Motor_Speed_RF+0x50>
	   RPM_RF = -max_speed[2];
 8009092:	4b23      	ldr	r3, [pc, #140]	@ (8009120 <Motor_Speed_RF+0xd0>)
 8009094:	edd3 7a02 	vldr	s15, [r3, #8]
 8009098:	eef1 7a67 	vneg.f32	s15, s15
 800909c:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_RF ,2);
 80090a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80090a4:	ee07 3a90 	vmov	s15, r3
 80090a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80090ac:	edd7 7a00 	vldr	s15, [r7]
 80090b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090b4:	ee17 3a90 	vmov	r3, s15
 80090b8:	b21b      	sxth	r3, r3
 80090ba:	2102      	movs	r1, #2
 80090bc:	4618      	mov	r0, r3
 80090be:	eeb0 0a47 	vmov.f32	s0, s14
 80090c2:	f7ff fc1f 	bl	8008904 <PID_Speed>

	Duty_Cycle[2] = (int16_t)((Output_PID[2]/((float)(max_speed[2] - min_speed[2]))) * DutyCycle_RF_MAX);
 80090c6:	4b17      	ldr	r3, [pc, #92]	@ (8009124 <Motor_Speed_RF+0xd4>)
 80090c8:	edd3 6a02 	vldr	s13, [r3, #8]
 80090cc:	4b14      	ldr	r3, [pc, #80]	@ (8009120 <Motor_Speed_RF+0xd0>)
 80090ce:	ed93 7a02 	vldr	s14, [r3, #8]
 80090d2:	4b15      	ldr	r3, [pc, #84]	@ (8009128 <Motor_Speed_RF+0xd8>)
 80090d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80090d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090e0:	4b12      	ldr	r3, [pc, #72]	@ (800912c <Motor_Speed_RF+0xdc>)
 80090e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090e6:	ee07 3a90 	vmov	s15, r3
 80090ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090f6:	ee17 3a90 	vmov	r3, s15
 80090fa:	b21a      	sxth	r2, r3
 80090fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009130 <Motor_Speed_RF+0xe0>)
 80090fe:	809a      	strh	r2, [r3, #4]

	Motor_DutyCycle_RF(Duty_Cycle[2]);
 8009100:	4b0b      	ldr	r3, [pc, #44]	@ (8009130 <Motor_Speed_RF+0xe0>)
 8009102:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff fd5a 	bl	8008bc0 <Motor_DutyCycle_RF>

//	return _RPM[2];
	return Output_PID[2];
 800910c:	4b05      	ldr	r3, [pc, #20]	@ (8009124 <Motor_Speed_RF+0xd4>)
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	ee07 3a90 	vmov	s15, r3
}
 8009114:	eeb0 0a67 	vmov.f32	s0, s15
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	20000730 	.word	0x20000730
 8009124:	200007c0 	.word	0x200007c0
 8009128:	20000718 	.word	0x20000718
 800912c:	20000680 	.word	0x20000680
 8009130:	200007d8 	.word	0x200007d8

08009134 <Motor_Speed_RB>:

float Motor_Speed_RB(int16_t RPM_INPUT ,float RPM_RB){
 8009134:	b580      	push	{r7, lr}
 8009136:	b082      	sub	sp, #8
 8009138:	af00      	add	r7, sp, #0
 800913a:	4603      	mov	r3, r0
 800913c:	ed87 0a00 	vstr	s0, [r7]
 8009140:	80fb      	strh	r3, [r7, #6]
	if (RPM_RB > max_speed[3]) {
 8009142:	4b30      	ldr	r3, [pc, #192]	@ (8009204 <Motor_Speed_RB+0xd0>)
 8009144:	edd3 7a03 	vldr	s15, [r3, #12]
 8009148:	ed97 7a00 	vldr	s14, [r7]
 800914c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009154:	dd03      	ble.n	800915e <Motor_Speed_RB+0x2a>
		RPM_RB = max_speed[3];
 8009156:	4b2b      	ldr	r3, [pc, #172]	@ (8009204 <Motor_Speed_RB+0xd0>)
 8009158:	68db      	ldr	r3, [r3, #12]
 800915a:	603b      	str	r3, [r7, #0]
 800915c:	e012      	b.n	8009184 <Motor_Speed_RB+0x50>
	} else if (RPM_RB < -max_speed[3]) {
 800915e:	4b29      	ldr	r3, [pc, #164]	@ (8009204 <Motor_Speed_RB+0xd0>)
 8009160:	edd3 7a03 	vldr	s15, [r3, #12]
 8009164:	eef1 7a67 	vneg.f32	s15, s15
 8009168:	ed97 7a00 	vldr	s14, [r7]
 800916c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009174:	d506      	bpl.n	8009184 <Motor_Speed_RB+0x50>
		RPM_RB = -max_speed[3];
 8009176:	4b23      	ldr	r3, [pc, #140]	@ (8009204 <Motor_Speed_RB+0xd0>)
 8009178:	edd3 7a03 	vldr	s15, [r3, #12]
 800917c:	eef1 7a67 	vneg.f32	s15, s15
 8009180:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_RB ,3);
 8009184:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009188:	ee07 3a90 	vmov	s15, r3
 800918c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009190:	edd7 7a00 	vldr	s15, [r7]
 8009194:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009198:	ee17 3a90 	vmov	r3, s15
 800919c:	b21b      	sxth	r3, r3
 800919e:	2103      	movs	r1, #3
 80091a0:	4618      	mov	r0, r3
 80091a2:	eeb0 0a47 	vmov.f32	s0, s14
 80091a6:	f7ff fbad 	bl	8008904 <PID_Speed>

	Duty_Cycle[3] = (int16_t)((Output_PID[3]/((float)(max_speed[3] - min_speed[3]))) * DutyCycle_RB_MAX);
 80091aa:	4b17      	ldr	r3, [pc, #92]	@ (8009208 <Motor_Speed_RB+0xd4>)
 80091ac:	edd3 6a03 	vldr	s13, [r3, #12]
 80091b0:	4b14      	ldr	r3, [pc, #80]	@ (8009204 <Motor_Speed_RB+0xd0>)
 80091b2:	ed93 7a03 	vldr	s14, [r3, #12]
 80091b6:	4b15      	ldr	r3, [pc, #84]	@ (800920c <Motor_Speed_RB+0xd8>)
 80091b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80091bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091c4:	4b12      	ldr	r3, [pc, #72]	@ (8009210 <Motor_Speed_RB+0xdc>)
 80091c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091ca:	ee07 3a90 	vmov	s15, r3
 80091ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80091da:	ee17 3a90 	vmov	r3, s15
 80091de:	b21a      	sxth	r2, r3
 80091e0:	4b0c      	ldr	r3, [pc, #48]	@ (8009214 <Motor_Speed_RB+0xe0>)
 80091e2:	80da      	strh	r2, [r3, #6]

	Motor_DutyCycle_RB(Duty_Cycle[3]);
 80091e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009214 <Motor_Speed_RB+0xe0>)
 80091e6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7ff fd44 	bl	8008c78 <Motor_DutyCycle_RB>

//	return _RPM[3];
	return Output_PID[3];
 80091f0:	4b05      	ldr	r3, [pc, #20]	@ (8009208 <Motor_Speed_RB+0xd4>)
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	ee07 3a90 	vmov	s15, r3
}
 80091f8:	eeb0 0a67 	vmov.f32	s0, s15
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	20000730 	.word	0x20000730
 8009208:	200007c0 	.word	0x200007c0
 800920c:	20000718 	.word	0x20000718
 8009210:	20000682 	.word	0x20000682
 8009214:	200007d8 	.word	0x200007d8

08009218 <digitalWrite>:

//	return _RPM[5];
	return Output_PID[5];
}

void digitalWrite(char* _PIN , uint8_t vlue){
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	460b      	mov	r3, r1
 8009222:	70fb      	strb	r3, [r7, #3]
	uint8_t PIN = (_PIN[2] - '0') * 10 + (_PIN[3] - '0');
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	3302      	adds	r3, #2
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	3b30      	subs	r3, #48	@ 0x30
 800922c:	b2db      	uxtb	r3, r3
 800922e:	461a      	mov	r2, r3
 8009230:	0092      	lsls	r2, r2, #2
 8009232:	4413      	add	r3, r2
 8009234:	005b      	lsls	r3, r3, #1
 8009236:	b2da      	uxtb	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	3303      	adds	r3, #3
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	4413      	add	r3, r2
 8009240:	b2db      	uxtb	r3, r3
 8009242:	3b30      	subs	r3, #48	@ 0x30
 8009244:	73fb      	strb	r3, [r7, #15]

	if (_PIN[1] == 'A') {
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	3301      	adds	r3, #1
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	2b41      	cmp	r3, #65	@ 0x41
 800924e:	f040 809f 	bne.w	8009390 <digitalWrite+0x178>
	        switch (PIN) {
 8009252:	7bfb      	ldrb	r3, [r7, #15]
 8009254:	2b0f      	cmp	r3, #15
 8009256:	f200 833f 	bhi.w	80098d8 <digitalWrite+0x6c0>
 800925a:	a201      	add	r2, pc, #4	@ (adr r2, 8009260 <digitalWrite+0x48>)
 800925c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009260:	080092a1 	.word	0x080092a1
 8009264:	080092af 	.word	0x080092af
 8009268:	080092bd 	.word	0x080092bd
 800926c:	080092cb 	.word	0x080092cb
 8009270:	080092d9 	.word	0x080092d9
 8009274:	080092e7 	.word	0x080092e7
 8009278:	080092f5 	.word	0x080092f5
 800927c:	08009303 	.word	0x08009303
 8009280:	08009311 	.word	0x08009311
 8009284:	08009321 	.word	0x08009321
 8009288:	08009331 	.word	0x08009331
 800928c:	08009341 	.word	0x08009341
 8009290:	08009351 	.word	0x08009351
 8009294:	08009361 	.word	0x08009361
 8009298:	08009371 	.word	0x08009371
 800929c:	08009381 	.word	0x08009381
	            case 0: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, vlue); break;
 80092a0:	78fb      	ldrb	r3, [r7, #3]
 80092a2:	461a      	mov	r2, r3
 80092a4:	2101      	movs	r1, #1
 80092a6:	48bd      	ldr	r0, [pc, #756]	@ (800959c <digitalWrite+0x384>)
 80092a8:	f7f9 fe86 	bl	8002fb8 <HAL_GPIO_WritePin>
 80092ac:	e314      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, vlue); break;
 80092ae:	78fb      	ldrb	r3, [r7, #3]
 80092b0:	461a      	mov	r2, r3
 80092b2:	2102      	movs	r1, #2
 80092b4:	48b9      	ldr	r0, [pc, #740]	@ (800959c <digitalWrite+0x384>)
 80092b6:	f7f9 fe7f 	bl	8002fb8 <HAL_GPIO_WritePin>
 80092ba:	e30d      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, vlue); break;
 80092bc:	78fb      	ldrb	r3, [r7, #3]
 80092be:	461a      	mov	r2, r3
 80092c0:	2104      	movs	r1, #4
 80092c2:	48b6      	ldr	r0, [pc, #728]	@ (800959c <digitalWrite+0x384>)
 80092c4:	f7f9 fe78 	bl	8002fb8 <HAL_GPIO_WritePin>
 80092c8:	e306      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, vlue); break;
 80092ca:	78fb      	ldrb	r3, [r7, #3]
 80092cc:	461a      	mov	r2, r3
 80092ce:	2108      	movs	r1, #8
 80092d0:	48b2      	ldr	r0, [pc, #712]	@ (800959c <digitalWrite+0x384>)
 80092d2:	f7f9 fe71 	bl	8002fb8 <HAL_GPIO_WritePin>
 80092d6:	e2ff      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, vlue); break;
 80092d8:	78fb      	ldrb	r3, [r7, #3]
 80092da:	461a      	mov	r2, r3
 80092dc:	2110      	movs	r1, #16
 80092de:	48af      	ldr	r0, [pc, #700]	@ (800959c <digitalWrite+0x384>)
 80092e0:	f7f9 fe6a 	bl	8002fb8 <HAL_GPIO_WritePin>
 80092e4:	e2f8      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, vlue); break;
 80092e6:	78fb      	ldrb	r3, [r7, #3]
 80092e8:	461a      	mov	r2, r3
 80092ea:	2120      	movs	r1, #32
 80092ec:	48ab      	ldr	r0, [pc, #684]	@ (800959c <digitalWrite+0x384>)
 80092ee:	f7f9 fe63 	bl	8002fb8 <HAL_GPIO_WritePin>
 80092f2:	e2f1      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, vlue); break;
 80092f4:	78fb      	ldrb	r3, [r7, #3]
 80092f6:	461a      	mov	r2, r3
 80092f8:	2140      	movs	r1, #64	@ 0x40
 80092fa:	48a8      	ldr	r0, [pc, #672]	@ (800959c <digitalWrite+0x384>)
 80092fc:	f7f9 fe5c 	bl	8002fb8 <HAL_GPIO_WritePin>
 8009300:	e2ea      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, vlue); break;
 8009302:	78fb      	ldrb	r3, [r7, #3]
 8009304:	461a      	mov	r2, r3
 8009306:	2180      	movs	r1, #128	@ 0x80
 8009308:	48a4      	ldr	r0, [pc, #656]	@ (800959c <digitalWrite+0x384>)
 800930a:	f7f9 fe55 	bl	8002fb8 <HAL_GPIO_WritePin>
 800930e:	e2e3      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, vlue); break;
 8009310:	78fb      	ldrb	r3, [r7, #3]
 8009312:	461a      	mov	r2, r3
 8009314:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009318:	48a0      	ldr	r0, [pc, #640]	@ (800959c <digitalWrite+0x384>)
 800931a:	f7f9 fe4d 	bl	8002fb8 <HAL_GPIO_WritePin>
 800931e:	e2db      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, vlue); break;
 8009320:	78fb      	ldrb	r3, [r7, #3]
 8009322:	461a      	mov	r2, r3
 8009324:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009328:	489c      	ldr	r0, [pc, #624]	@ (800959c <digitalWrite+0x384>)
 800932a:	f7f9 fe45 	bl	8002fb8 <HAL_GPIO_WritePin>
 800932e:	e2d3      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, vlue); break;
 8009330:	78fb      	ldrb	r3, [r7, #3]
 8009332:	461a      	mov	r2, r3
 8009334:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009338:	4898      	ldr	r0, [pc, #608]	@ (800959c <digitalWrite+0x384>)
 800933a:	f7f9 fe3d 	bl	8002fb8 <HAL_GPIO_WritePin>
 800933e:	e2cb      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, vlue); break;
 8009340:	78fb      	ldrb	r3, [r7, #3]
 8009342:	461a      	mov	r2, r3
 8009344:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009348:	4894      	ldr	r0, [pc, #592]	@ (800959c <digitalWrite+0x384>)
 800934a:	f7f9 fe35 	bl	8002fb8 <HAL_GPIO_WritePin>
 800934e:	e2c3      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, vlue); break;
 8009350:	78fb      	ldrb	r3, [r7, #3]
 8009352:	461a      	mov	r2, r3
 8009354:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009358:	4890      	ldr	r0, [pc, #576]	@ (800959c <digitalWrite+0x384>)
 800935a:	f7f9 fe2d 	bl	8002fb8 <HAL_GPIO_WritePin>
 800935e:	e2bb      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, vlue); break;
 8009360:	78fb      	ldrb	r3, [r7, #3]
 8009362:	461a      	mov	r2, r3
 8009364:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009368:	488c      	ldr	r0, [pc, #560]	@ (800959c <digitalWrite+0x384>)
 800936a:	f7f9 fe25 	bl	8002fb8 <HAL_GPIO_WritePin>
 800936e:	e2b3      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, vlue); break;
 8009370:	78fb      	ldrb	r3, [r7, #3]
 8009372:	461a      	mov	r2, r3
 8009374:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009378:	4888      	ldr	r0, [pc, #544]	@ (800959c <digitalWrite+0x384>)
 800937a:	f7f9 fe1d 	bl	8002fb8 <HAL_GPIO_WritePin>
 800937e:	e2ab      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, vlue); break;
 8009380:	78fb      	ldrb	r3, [r7, #3]
 8009382:	461a      	mov	r2, r3
 8009384:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009388:	4884      	ldr	r0, [pc, #528]	@ (800959c <digitalWrite+0x384>)
 800938a:	f7f9 fe15 	bl	8002fb8 <HAL_GPIO_WritePin>
 800938e:	e2a3      	b.n	80098d8 <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'B') {
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	3301      	adds	r3, #1
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	2b42      	cmp	r3, #66	@ 0x42
 8009398:	f040 80a0 	bne.w	80094dc <digitalWrite+0x2c4>
	        switch (PIN) {
 800939c:	7bfb      	ldrb	r3, [r7, #15]
 800939e:	2b0f      	cmp	r3, #15
 80093a0:	f200 829a 	bhi.w	80098d8 <digitalWrite+0x6c0>
 80093a4:	a201      	add	r2, pc, #4	@ (adr r2, 80093ac <digitalWrite+0x194>)
 80093a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093aa:	bf00      	nop
 80093ac:	080093ed 	.word	0x080093ed
 80093b0:	080093fb 	.word	0x080093fb
 80093b4:	08009409 	.word	0x08009409
 80093b8:	08009417 	.word	0x08009417
 80093bc:	08009425 	.word	0x08009425
 80093c0:	08009433 	.word	0x08009433
 80093c4:	08009441 	.word	0x08009441
 80093c8:	0800944f 	.word	0x0800944f
 80093cc:	0800945d 	.word	0x0800945d
 80093d0:	0800946d 	.word	0x0800946d
 80093d4:	0800947d 	.word	0x0800947d
 80093d8:	0800948d 	.word	0x0800948d
 80093dc:	0800949d 	.word	0x0800949d
 80093e0:	080094ad 	.word	0x080094ad
 80093e4:	080094bd 	.word	0x080094bd
 80093e8:	080094cd 	.word	0x080094cd
	            case 0: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, vlue); break;
 80093ec:	78fb      	ldrb	r3, [r7, #3]
 80093ee:	461a      	mov	r2, r3
 80093f0:	2101      	movs	r1, #1
 80093f2:	486b      	ldr	r0, [pc, #428]	@ (80095a0 <digitalWrite+0x388>)
 80093f4:	f7f9 fde0 	bl	8002fb8 <HAL_GPIO_WritePin>
 80093f8:	e26e      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, vlue); break;
 80093fa:	78fb      	ldrb	r3, [r7, #3]
 80093fc:	461a      	mov	r2, r3
 80093fe:	2102      	movs	r1, #2
 8009400:	4867      	ldr	r0, [pc, #412]	@ (80095a0 <digitalWrite+0x388>)
 8009402:	f7f9 fdd9 	bl	8002fb8 <HAL_GPIO_WritePin>
 8009406:	e267      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, vlue); break;
 8009408:	78fb      	ldrb	r3, [r7, #3]
 800940a:	461a      	mov	r2, r3
 800940c:	2104      	movs	r1, #4
 800940e:	4864      	ldr	r0, [pc, #400]	@ (80095a0 <digitalWrite+0x388>)
 8009410:	f7f9 fdd2 	bl	8002fb8 <HAL_GPIO_WritePin>
 8009414:	e260      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, vlue); break;
 8009416:	78fb      	ldrb	r3, [r7, #3]
 8009418:	461a      	mov	r2, r3
 800941a:	2108      	movs	r1, #8
 800941c:	4860      	ldr	r0, [pc, #384]	@ (80095a0 <digitalWrite+0x388>)
 800941e:	f7f9 fdcb 	bl	8002fb8 <HAL_GPIO_WritePin>
 8009422:	e259      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, vlue); break;
 8009424:	78fb      	ldrb	r3, [r7, #3]
 8009426:	461a      	mov	r2, r3
 8009428:	2110      	movs	r1, #16
 800942a:	485d      	ldr	r0, [pc, #372]	@ (80095a0 <digitalWrite+0x388>)
 800942c:	f7f9 fdc4 	bl	8002fb8 <HAL_GPIO_WritePin>
 8009430:	e252      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, vlue); break;
 8009432:	78fb      	ldrb	r3, [r7, #3]
 8009434:	461a      	mov	r2, r3
 8009436:	2120      	movs	r1, #32
 8009438:	4859      	ldr	r0, [pc, #356]	@ (80095a0 <digitalWrite+0x388>)
 800943a:	f7f9 fdbd 	bl	8002fb8 <HAL_GPIO_WritePin>
 800943e:	e24b      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, vlue); break;
 8009440:	78fb      	ldrb	r3, [r7, #3]
 8009442:	461a      	mov	r2, r3
 8009444:	2140      	movs	r1, #64	@ 0x40
 8009446:	4856      	ldr	r0, [pc, #344]	@ (80095a0 <digitalWrite+0x388>)
 8009448:	f7f9 fdb6 	bl	8002fb8 <HAL_GPIO_WritePin>
 800944c:	e244      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, vlue); break;
 800944e:	78fb      	ldrb	r3, [r7, #3]
 8009450:	461a      	mov	r2, r3
 8009452:	2180      	movs	r1, #128	@ 0x80
 8009454:	4852      	ldr	r0, [pc, #328]	@ (80095a0 <digitalWrite+0x388>)
 8009456:	f7f9 fdaf 	bl	8002fb8 <HAL_GPIO_WritePin>
 800945a:	e23d      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, vlue); break;
 800945c:	78fb      	ldrb	r3, [r7, #3]
 800945e:	461a      	mov	r2, r3
 8009460:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009464:	484e      	ldr	r0, [pc, #312]	@ (80095a0 <digitalWrite+0x388>)
 8009466:	f7f9 fda7 	bl	8002fb8 <HAL_GPIO_WritePin>
 800946a:	e235      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, vlue); break;
 800946c:	78fb      	ldrb	r3, [r7, #3]
 800946e:	461a      	mov	r2, r3
 8009470:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009474:	484a      	ldr	r0, [pc, #296]	@ (80095a0 <digitalWrite+0x388>)
 8009476:	f7f9 fd9f 	bl	8002fb8 <HAL_GPIO_WritePin>
 800947a:	e22d      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, vlue); break;
 800947c:	78fb      	ldrb	r3, [r7, #3]
 800947e:	461a      	mov	r2, r3
 8009480:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009484:	4846      	ldr	r0, [pc, #280]	@ (80095a0 <digitalWrite+0x388>)
 8009486:	f7f9 fd97 	bl	8002fb8 <HAL_GPIO_WritePin>
 800948a:	e225      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, vlue); break;
 800948c:	78fb      	ldrb	r3, [r7, #3]
 800948e:	461a      	mov	r2, r3
 8009490:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009494:	4842      	ldr	r0, [pc, #264]	@ (80095a0 <digitalWrite+0x388>)
 8009496:	f7f9 fd8f 	bl	8002fb8 <HAL_GPIO_WritePin>
 800949a:	e21d      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, vlue); break;
 800949c:	78fb      	ldrb	r3, [r7, #3]
 800949e:	461a      	mov	r2, r3
 80094a0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80094a4:	483e      	ldr	r0, [pc, #248]	@ (80095a0 <digitalWrite+0x388>)
 80094a6:	f7f9 fd87 	bl	8002fb8 <HAL_GPIO_WritePin>
 80094aa:	e215      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, vlue); break;
 80094ac:	78fb      	ldrb	r3, [r7, #3]
 80094ae:	461a      	mov	r2, r3
 80094b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80094b4:	483a      	ldr	r0, [pc, #232]	@ (80095a0 <digitalWrite+0x388>)
 80094b6:	f7f9 fd7f 	bl	8002fb8 <HAL_GPIO_WritePin>
 80094ba:	e20d      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, vlue); break;
 80094bc:	78fb      	ldrb	r3, [r7, #3]
 80094be:	461a      	mov	r2, r3
 80094c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80094c4:	4836      	ldr	r0, [pc, #216]	@ (80095a0 <digitalWrite+0x388>)
 80094c6:	f7f9 fd77 	bl	8002fb8 <HAL_GPIO_WritePin>
 80094ca:	e205      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, vlue); break;
 80094cc:	78fb      	ldrb	r3, [r7, #3]
 80094ce:	461a      	mov	r2, r3
 80094d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80094d4:	4832      	ldr	r0, [pc, #200]	@ (80095a0 <digitalWrite+0x388>)
 80094d6:	f7f9 fd6f 	bl	8002fb8 <HAL_GPIO_WritePin>
 80094da:	e1fd      	b.n	80098d8 <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'C') {
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	3301      	adds	r3, #1
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	2b43      	cmp	r3, #67	@ 0x43
 80094e4:	f040 80a7 	bne.w	8009636 <digitalWrite+0x41e>
	        switch (PIN) {
 80094e8:	7bfb      	ldrb	r3, [r7, #15]
 80094ea:	2b0f      	cmp	r3, #15
 80094ec:	f200 81f4 	bhi.w	80098d8 <digitalWrite+0x6c0>
 80094f0:	a201      	add	r2, pc, #4	@ (adr r2, 80094f8 <digitalWrite+0x2e0>)
 80094f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f6:	bf00      	nop
 80094f8:	08009539 	.word	0x08009539
 80094fc:	08009547 	.word	0x08009547
 8009500:	08009555 	.word	0x08009555
 8009504:	08009563 	.word	0x08009563
 8009508:	08009571 	.word	0x08009571
 800950c:	0800957f 	.word	0x0800957f
 8009510:	0800958d 	.word	0x0800958d
 8009514:	080095a9 	.word	0x080095a9
 8009518:	080095b7 	.word	0x080095b7
 800951c:	080095c7 	.word	0x080095c7
 8009520:	080095d7 	.word	0x080095d7
 8009524:	080095e7 	.word	0x080095e7
 8009528:	080095f7 	.word	0x080095f7
 800952c:	08009607 	.word	0x08009607
 8009530:	08009617 	.word	0x08009617
 8009534:	08009627 	.word	0x08009627
	            case 0: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, vlue); break;
 8009538:	78fb      	ldrb	r3, [r7, #3]
 800953a:	461a      	mov	r2, r3
 800953c:	2101      	movs	r1, #1
 800953e:	4819      	ldr	r0, [pc, #100]	@ (80095a4 <digitalWrite+0x38c>)
 8009540:	f7f9 fd3a 	bl	8002fb8 <HAL_GPIO_WritePin>
 8009544:	e1c8      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, vlue); break;
 8009546:	78fb      	ldrb	r3, [r7, #3]
 8009548:	461a      	mov	r2, r3
 800954a:	2102      	movs	r1, #2
 800954c:	4815      	ldr	r0, [pc, #84]	@ (80095a4 <digitalWrite+0x38c>)
 800954e:	f7f9 fd33 	bl	8002fb8 <HAL_GPIO_WritePin>
 8009552:	e1c1      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, vlue); break;
 8009554:	78fb      	ldrb	r3, [r7, #3]
 8009556:	461a      	mov	r2, r3
 8009558:	2104      	movs	r1, #4
 800955a:	4812      	ldr	r0, [pc, #72]	@ (80095a4 <digitalWrite+0x38c>)
 800955c:	f7f9 fd2c 	bl	8002fb8 <HAL_GPIO_WritePin>
 8009560:	e1ba      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, vlue); break;
 8009562:	78fb      	ldrb	r3, [r7, #3]
 8009564:	461a      	mov	r2, r3
 8009566:	2108      	movs	r1, #8
 8009568:	480e      	ldr	r0, [pc, #56]	@ (80095a4 <digitalWrite+0x38c>)
 800956a:	f7f9 fd25 	bl	8002fb8 <HAL_GPIO_WritePin>
 800956e:	e1b3      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, vlue); break;
 8009570:	78fb      	ldrb	r3, [r7, #3]
 8009572:	461a      	mov	r2, r3
 8009574:	2110      	movs	r1, #16
 8009576:	480b      	ldr	r0, [pc, #44]	@ (80095a4 <digitalWrite+0x38c>)
 8009578:	f7f9 fd1e 	bl	8002fb8 <HAL_GPIO_WritePin>
 800957c:	e1ac      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, vlue); break;
 800957e:	78fb      	ldrb	r3, [r7, #3]
 8009580:	461a      	mov	r2, r3
 8009582:	2120      	movs	r1, #32
 8009584:	4807      	ldr	r0, [pc, #28]	@ (80095a4 <digitalWrite+0x38c>)
 8009586:	f7f9 fd17 	bl	8002fb8 <HAL_GPIO_WritePin>
 800958a:	e1a5      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, vlue); break;
 800958c:	78fb      	ldrb	r3, [r7, #3]
 800958e:	461a      	mov	r2, r3
 8009590:	2140      	movs	r1, #64	@ 0x40
 8009592:	4804      	ldr	r0, [pc, #16]	@ (80095a4 <digitalWrite+0x38c>)
 8009594:	f7f9 fd10 	bl	8002fb8 <HAL_GPIO_WritePin>
 8009598:	e19e      	b.n	80098d8 <digitalWrite+0x6c0>
 800959a:	bf00      	nop
 800959c:	40020000 	.word	0x40020000
 80095a0:	40020400 	.word	0x40020400
 80095a4:	40020800 	.word	0x40020800
	            case 7: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, vlue); break;
 80095a8:	78fb      	ldrb	r3, [r7, #3]
 80095aa:	461a      	mov	r2, r3
 80095ac:	2180      	movs	r1, #128	@ 0x80
 80095ae:	48bb      	ldr	r0, [pc, #748]	@ (800989c <digitalWrite+0x684>)
 80095b0:	f7f9 fd02 	bl	8002fb8 <HAL_GPIO_WritePin>
 80095b4:	e190      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, vlue); break;
 80095b6:	78fb      	ldrb	r3, [r7, #3]
 80095b8:	461a      	mov	r2, r3
 80095ba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80095be:	48b7      	ldr	r0, [pc, #732]	@ (800989c <digitalWrite+0x684>)
 80095c0:	f7f9 fcfa 	bl	8002fb8 <HAL_GPIO_WritePin>
 80095c4:	e188      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, vlue); break;
 80095c6:	78fb      	ldrb	r3, [r7, #3]
 80095c8:	461a      	mov	r2, r3
 80095ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80095ce:	48b3      	ldr	r0, [pc, #716]	@ (800989c <digitalWrite+0x684>)
 80095d0:	f7f9 fcf2 	bl	8002fb8 <HAL_GPIO_WritePin>
 80095d4:	e180      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, vlue); break;
 80095d6:	78fb      	ldrb	r3, [r7, #3]
 80095d8:	461a      	mov	r2, r3
 80095da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80095de:	48af      	ldr	r0, [pc, #700]	@ (800989c <digitalWrite+0x684>)
 80095e0:	f7f9 fcea 	bl	8002fb8 <HAL_GPIO_WritePin>
 80095e4:	e178      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, vlue); break;
 80095e6:	78fb      	ldrb	r3, [r7, #3]
 80095e8:	461a      	mov	r2, r3
 80095ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80095ee:	48ab      	ldr	r0, [pc, #684]	@ (800989c <digitalWrite+0x684>)
 80095f0:	f7f9 fce2 	bl	8002fb8 <HAL_GPIO_WritePin>
 80095f4:	e170      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, vlue); break;
 80095f6:	78fb      	ldrb	r3, [r7, #3]
 80095f8:	461a      	mov	r2, r3
 80095fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80095fe:	48a7      	ldr	r0, [pc, #668]	@ (800989c <digitalWrite+0x684>)
 8009600:	f7f9 fcda 	bl	8002fb8 <HAL_GPIO_WritePin>
 8009604:	e168      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, vlue); break;
 8009606:	78fb      	ldrb	r3, [r7, #3]
 8009608:	461a      	mov	r2, r3
 800960a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800960e:	48a3      	ldr	r0, [pc, #652]	@ (800989c <digitalWrite+0x684>)
 8009610:	f7f9 fcd2 	bl	8002fb8 <HAL_GPIO_WritePin>
 8009614:	e160      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, vlue); break;
 8009616:	78fb      	ldrb	r3, [r7, #3]
 8009618:	461a      	mov	r2, r3
 800961a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800961e:	489f      	ldr	r0, [pc, #636]	@ (800989c <digitalWrite+0x684>)
 8009620:	f7f9 fcca 	bl	8002fb8 <HAL_GPIO_WritePin>
 8009624:	e158      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, vlue); break;
 8009626:	78fb      	ldrb	r3, [r7, #3]
 8009628:	461a      	mov	r2, r3
 800962a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800962e:	489b      	ldr	r0, [pc, #620]	@ (800989c <digitalWrite+0x684>)
 8009630:	f7f9 fcc2 	bl	8002fb8 <HAL_GPIO_WritePin>
 8009634:	e150      	b.n	80098d8 <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'D') {
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	3301      	adds	r3, #1
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	2b44      	cmp	r3, #68	@ 0x44
 800963e:	f040 809f 	bne.w	8009780 <digitalWrite+0x568>
	        switch (PIN) {
 8009642:	7bfb      	ldrb	r3, [r7, #15]
 8009644:	2b0f      	cmp	r3, #15
 8009646:	f200 8147 	bhi.w	80098d8 <digitalWrite+0x6c0>
 800964a:	a201      	add	r2, pc, #4	@ (adr r2, 8009650 <digitalWrite+0x438>)
 800964c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009650:	08009691 	.word	0x08009691
 8009654:	0800969f 	.word	0x0800969f
 8009658:	080096ad 	.word	0x080096ad
 800965c:	080096bb 	.word	0x080096bb
 8009660:	080096c9 	.word	0x080096c9
 8009664:	080096d7 	.word	0x080096d7
 8009668:	080096e5 	.word	0x080096e5
 800966c:	080096f3 	.word	0x080096f3
 8009670:	08009701 	.word	0x08009701
 8009674:	08009711 	.word	0x08009711
 8009678:	08009721 	.word	0x08009721
 800967c:	08009731 	.word	0x08009731
 8009680:	08009741 	.word	0x08009741
 8009684:	08009751 	.word	0x08009751
 8009688:	08009761 	.word	0x08009761
 800968c:	08009771 	.word	0x08009771
	            case 0: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, vlue); break;
 8009690:	78fb      	ldrb	r3, [r7, #3]
 8009692:	461a      	mov	r2, r3
 8009694:	2101      	movs	r1, #1
 8009696:	4882      	ldr	r0, [pc, #520]	@ (80098a0 <digitalWrite+0x688>)
 8009698:	f7f9 fc8e 	bl	8002fb8 <HAL_GPIO_WritePin>
 800969c:	e11c      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, vlue); break;
 800969e:	78fb      	ldrb	r3, [r7, #3]
 80096a0:	461a      	mov	r2, r3
 80096a2:	2102      	movs	r1, #2
 80096a4:	487e      	ldr	r0, [pc, #504]	@ (80098a0 <digitalWrite+0x688>)
 80096a6:	f7f9 fc87 	bl	8002fb8 <HAL_GPIO_WritePin>
 80096aa:	e115      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, vlue); break;
 80096ac:	78fb      	ldrb	r3, [r7, #3]
 80096ae:	461a      	mov	r2, r3
 80096b0:	2104      	movs	r1, #4
 80096b2:	487b      	ldr	r0, [pc, #492]	@ (80098a0 <digitalWrite+0x688>)
 80096b4:	f7f9 fc80 	bl	8002fb8 <HAL_GPIO_WritePin>
 80096b8:	e10e      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, vlue); break;
 80096ba:	78fb      	ldrb	r3, [r7, #3]
 80096bc:	461a      	mov	r2, r3
 80096be:	2108      	movs	r1, #8
 80096c0:	4877      	ldr	r0, [pc, #476]	@ (80098a0 <digitalWrite+0x688>)
 80096c2:	f7f9 fc79 	bl	8002fb8 <HAL_GPIO_WritePin>
 80096c6:	e107      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, vlue); break;
 80096c8:	78fb      	ldrb	r3, [r7, #3]
 80096ca:	461a      	mov	r2, r3
 80096cc:	2110      	movs	r1, #16
 80096ce:	4874      	ldr	r0, [pc, #464]	@ (80098a0 <digitalWrite+0x688>)
 80096d0:	f7f9 fc72 	bl	8002fb8 <HAL_GPIO_WritePin>
 80096d4:	e100      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, vlue); break;
 80096d6:	78fb      	ldrb	r3, [r7, #3]
 80096d8:	461a      	mov	r2, r3
 80096da:	2120      	movs	r1, #32
 80096dc:	4870      	ldr	r0, [pc, #448]	@ (80098a0 <digitalWrite+0x688>)
 80096de:	f7f9 fc6b 	bl	8002fb8 <HAL_GPIO_WritePin>
 80096e2:	e0f9      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, vlue); break;
 80096e4:	78fb      	ldrb	r3, [r7, #3]
 80096e6:	461a      	mov	r2, r3
 80096e8:	2140      	movs	r1, #64	@ 0x40
 80096ea:	486d      	ldr	r0, [pc, #436]	@ (80098a0 <digitalWrite+0x688>)
 80096ec:	f7f9 fc64 	bl	8002fb8 <HAL_GPIO_WritePin>
 80096f0:	e0f2      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, vlue); break;
 80096f2:	78fb      	ldrb	r3, [r7, #3]
 80096f4:	461a      	mov	r2, r3
 80096f6:	2180      	movs	r1, #128	@ 0x80
 80096f8:	4869      	ldr	r0, [pc, #420]	@ (80098a0 <digitalWrite+0x688>)
 80096fa:	f7f9 fc5d 	bl	8002fb8 <HAL_GPIO_WritePin>
 80096fe:	e0eb      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, vlue); break;
 8009700:	78fb      	ldrb	r3, [r7, #3]
 8009702:	461a      	mov	r2, r3
 8009704:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009708:	4865      	ldr	r0, [pc, #404]	@ (80098a0 <digitalWrite+0x688>)
 800970a:	f7f9 fc55 	bl	8002fb8 <HAL_GPIO_WritePin>
 800970e:	e0e3      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, vlue); break;
 8009710:	78fb      	ldrb	r3, [r7, #3]
 8009712:	461a      	mov	r2, r3
 8009714:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009718:	4861      	ldr	r0, [pc, #388]	@ (80098a0 <digitalWrite+0x688>)
 800971a:	f7f9 fc4d 	bl	8002fb8 <HAL_GPIO_WritePin>
 800971e:	e0db      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, vlue); break;
 8009720:	78fb      	ldrb	r3, [r7, #3]
 8009722:	461a      	mov	r2, r3
 8009724:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009728:	485d      	ldr	r0, [pc, #372]	@ (80098a0 <digitalWrite+0x688>)
 800972a:	f7f9 fc45 	bl	8002fb8 <HAL_GPIO_WritePin>
 800972e:	e0d3      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, vlue); break;
 8009730:	78fb      	ldrb	r3, [r7, #3]
 8009732:	461a      	mov	r2, r3
 8009734:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009738:	4859      	ldr	r0, [pc, #356]	@ (80098a0 <digitalWrite+0x688>)
 800973a:	f7f9 fc3d 	bl	8002fb8 <HAL_GPIO_WritePin>
 800973e:	e0cb      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, vlue); break;
 8009740:	78fb      	ldrb	r3, [r7, #3]
 8009742:	461a      	mov	r2, r3
 8009744:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009748:	4855      	ldr	r0, [pc, #340]	@ (80098a0 <digitalWrite+0x688>)
 800974a:	f7f9 fc35 	bl	8002fb8 <HAL_GPIO_WritePin>
 800974e:	e0c3      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, vlue); break;
 8009750:	78fb      	ldrb	r3, [r7, #3]
 8009752:	461a      	mov	r2, r3
 8009754:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009758:	4851      	ldr	r0, [pc, #324]	@ (80098a0 <digitalWrite+0x688>)
 800975a:	f7f9 fc2d 	bl	8002fb8 <HAL_GPIO_WritePin>
 800975e:	e0bb      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, vlue); break;
 8009760:	78fb      	ldrb	r3, [r7, #3]
 8009762:	461a      	mov	r2, r3
 8009764:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009768:	484d      	ldr	r0, [pc, #308]	@ (80098a0 <digitalWrite+0x688>)
 800976a:	f7f9 fc25 	bl	8002fb8 <HAL_GPIO_WritePin>
 800976e:	e0b3      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, vlue); break;
 8009770:	78fb      	ldrb	r3, [r7, #3]
 8009772:	461a      	mov	r2, r3
 8009774:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009778:	4849      	ldr	r0, [pc, #292]	@ (80098a0 <digitalWrite+0x688>)
 800977a:	f7f9 fc1d 	bl	8002fb8 <HAL_GPIO_WritePin>
 800977e:	e0ab      	b.n	80098d8 <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'E') {
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	3301      	adds	r3, #1
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	2b45      	cmp	r3, #69	@ 0x45
 8009788:	f040 80a6 	bne.w	80098d8 <digitalWrite+0x6c0>
	        switch (PIN) {
 800978c:	7bfb      	ldrb	r3, [r7, #15]
 800978e:	2b0f      	cmp	r3, #15
 8009790:	f200 80a2 	bhi.w	80098d8 <digitalWrite+0x6c0>
 8009794:	a201      	add	r2, pc, #4	@ (adr r2, 800979c <digitalWrite+0x584>)
 8009796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800979a:	bf00      	nop
 800979c:	080097dd 	.word	0x080097dd
 80097a0:	080097eb 	.word	0x080097eb
 80097a4:	080097f9 	.word	0x080097f9
 80097a8:	08009807 	.word	0x08009807
 80097ac:	08009815 	.word	0x08009815
 80097b0:	08009823 	.word	0x08009823
 80097b4:	08009831 	.word	0x08009831
 80097b8:	0800983f 	.word	0x0800983f
 80097bc:	0800984d 	.word	0x0800984d
 80097c0:	0800985d 	.word	0x0800985d
 80097c4:	0800986d 	.word	0x0800986d
 80097c8:	0800987d 	.word	0x0800987d
 80097cc:	0800988d 	.word	0x0800988d
 80097d0:	080098a9 	.word	0x080098a9
 80097d4:	080098b9 	.word	0x080098b9
 80097d8:	080098c9 	.word	0x080098c9
	            case 0: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, vlue); break;
 80097dc:	78fb      	ldrb	r3, [r7, #3]
 80097de:	461a      	mov	r2, r3
 80097e0:	2101      	movs	r1, #1
 80097e2:	4830      	ldr	r0, [pc, #192]	@ (80098a4 <digitalWrite+0x68c>)
 80097e4:	f7f9 fbe8 	bl	8002fb8 <HAL_GPIO_WritePin>
 80097e8:	e076      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, vlue); break;
 80097ea:	78fb      	ldrb	r3, [r7, #3]
 80097ec:	461a      	mov	r2, r3
 80097ee:	2102      	movs	r1, #2
 80097f0:	482c      	ldr	r0, [pc, #176]	@ (80098a4 <digitalWrite+0x68c>)
 80097f2:	f7f9 fbe1 	bl	8002fb8 <HAL_GPIO_WritePin>
 80097f6:	e06f      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, vlue); break;
 80097f8:	78fb      	ldrb	r3, [r7, #3]
 80097fa:	461a      	mov	r2, r3
 80097fc:	2104      	movs	r1, #4
 80097fe:	4829      	ldr	r0, [pc, #164]	@ (80098a4 <digitalWrite+0x68c>)
 8009800:	f7f9 fbda 	bl	8002fb8 <HAL_GPIO_WritePin>
 8009804:	e068      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, vlue); break;
 8009806:	78fb      	ldrb	r3, [r7, #3]
 8009808:	461a      	mov	r2, r3
 800980a:	2108      	movs	r1, #8
 800980c:	4825      	ldr	r0, [pc, #148]	@ (80098a4 <digitalWrite+0x68c>)
 800980e:	f7f9 fbd3 	bl	8002fb8 <HAL_GPIO_WritePin>
 8009812:	e061      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, vlue); break;
 8009814:	78fb      	ldrb	r3, [r7, #3]
 8009816:	461a      	mov	r2, r3
 8009818:	2110      	movs	r1, #16
 800981a:	4822      	ldr	r0, [pc, #136]	@ (80098a4 <digitalWrite+0x68c>)
 800981c:	f7f9 fbcc 	bl	8002fb8 <HAL_GPIO_WritePin>
 8009820:	e05a      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, vlue); break;
 8009822:	78fb      	ldrb	r3, [r7, #3]
 8009824:	461a      	mov	r2, r3
 8009826:	2120      	movs	r1, #32
 8009828:	481e      	ldr	r0, [pc, #120]	@ (80098a4 <digitalWrite+0x68c>)
 800982a:	f7f9 fbc5 	bl	8002fb8 <HAL_GPIO_WritePin>
 800982e:	e053      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, vlue); break;
 8009830:	78fb      	ldrb	r3, [r7, #3]
 8009832:	461a      	mov	r2, r3
 8009834:	2140      	movs	r1, #64	@ 0x40
 8009836:	481b      	ldr	r0, [pc, #108]	@ (80098a4 <digitalWrite+0x68c>)
 8009838:	f7f9 fbbe 	bl	8002fb8 <HAL_GPIO_WritePin>
 800983c:	e04c      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, vlue); break;
 800983e:	78fb      	ldrb	r3, [r7, #3]
 8009840:	461a      	mov	r2, r3
 8009842:	2180      	movs	r1, #128	@ 0x80
 8009844:	4817      	ldr	r0, [pc, #92]	@ (80098a4 <digitalWrite+0x68c>)
 8009846:	f7f9 fbb7 	bl	8002fb8 <HAL_GPIO_WritePin>
 800984a:	e045      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, vlue); break;
 800984c:	78fb      	ldrb	r3, [r7, #3]
 800984e:	461a      	mov	r2, r3
 8009850:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009854:	4813      	ldr	r0, [pc, #76]	@ (80098a4 <digitalWrite+0x68c>)
 8009856:	f7f9 fbaf 	bl	8002fb8 <HAL_GPIO_WritePin>
 800985a:	e03d      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, vlue); break;
 800985c:	78fb      	ldrb	r3, [r7, #3]
 800985e:	461a      	mov	r2, r3
 8009860:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009864:	480f      	ldr	r0, [pc, #60]	@ (80098a4 <digitalWrite+0x68c>)
 8009866:	f7f9 fba7 	bl	8002fb8 <HAL_GPIO_WritePin>
 800986a:	e035      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, vlue); break;
 800986c:	78fb      	ldrb	r3, [r7, #3]
 800986e:	461a      	mov	r2, r3
 8009870:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009874:	480b      	ldr	r0, [pc, #44]	@ (80098a4 <digitalWrite+0x68c>)
 8009876:	f7f9 fb9f 	bl	8002fb8 <HAL_GPIO_WritePin>
 800987a:	e02d      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, vlue); break;
 800987c:	78fb      	ldrb	r3, [r7, #3]
 800987e:	461a      	mov	r2, r3
 8009880:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009884:	4807      	ldr	r0, [pc, #28]	@ (80098a4 <digitalWrite+0x68c>)
 8009886:	f7f9 fb97 	bl	8002fb8 <HAL_GPIO_WritePin>
 800988a:	e025      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, vlue); break;
 800988c:	78fb      	ldrb	r3, [r7, #3]
 800988e:	461a      	mov	r2, r3
 8009890:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009894:	4803      	ldr	r0, [pc, #12]	@ (80098a4 <digitalWrite+0x68c>)
 8009896:	f7f9 fb8f 	bl	8002fb8 <HAL_GPIO_WritePin>
 800989a:	e01d      	b.n	80098d8 <digitalWrite+0x6c0>
 800989c:	40020800 	.word	0x40020800
 80098a0:	40020c00 	.word	0x40020c00
 80098a4:	40021000 	.word	0x40021000
	            case 13: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, vlue); break;
 80098a8:	78fb      	ldrb	r3, [r7, #3]
 80098aa:	461a      	mov	r2, r3
 80098ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80098b0:	480b      	ldr	r0, [pc, #44]	@ (80098e0 <digitalWrite+0x6c8>)
 80098b2:	f7f9 fb81 	bl	8002fb8 <HAL_GPIO_WritePin>
 80098b6:	e00f      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, vlue); break;
 80098b8:	78fb      	ldrb	r3, [r7, #3]
 80098ba:	461a      	mov	r2, r3
 80098bc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80098c0:	4807      	ldr	r0, [pc, #28]	@ (80098e0 <digitalWrite+0x6c8>)
 80098c2:	f7f9 fb79 	bl	8002fb8 <HAL_GPIO_WritePin>
 80098c6:	e007      	b.n	80098d8 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, vlue); break;
 80098c8:	78fb      	ldrb	r3, [r7, #3]
 80098ca:	461a      	mov	r2, r3
 80098cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80098d0:	4803      	ldr	r0, [pc, #12]	@ (80098e0 <digitalWrite+0x6c8>)
 80098d2:	f7f9 fb71 	bl	8002fb8 <HAL_GPIO_WritePin>
 80098d6:	bf00      	nop
	        }
	    }
}
 80098d8:	bf00      	nop
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	40021000 	.word	0x40021000

080098e4 <Setup_Forward_Kinematic>:

float _Lx;
float _Ly;
float _Radius_wheel;

void Setup_Forward_Kinematic(float Lx ,float Ly ,float Radius_wheel){
 80098e4:	b480      	push	{r7}
 80098e6:	b085      	sub	sp, #20
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80098ee:	edc7 0a02 	vstr	s1, [r7, #8]
 80098f2:	ed87 1a01 	vstr	s2, [r7, #4]
	_Lx = Lx;
 80098f6:	4a07      	ldr	r2, [pc, #28]	@ (8009914 <Setup_Forward_Kinematic+0x30>)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6013      	str	r3, [r2, #0]
	_Ly = Ly;
 80098fc:	4a06      	ldr	r2, [pc, #24]	@ (8009918 <Setup_Forward_Kinematic+0x34>)
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	6013      	str	r3, [r2, #0]
	_Radius_wheel = Radius_wheel;
 8009902:	4a06      	ldr	r2, [pc, #24]	@ (800991c <Setup_Forward_Kinematic+0x38>)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6013      	str	r3, [r2, #0]
}
 8009908:	bf00      	nop
 800990a:	3714      	adds	r7, #20
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr
 8009914:	200007e4 	.word	0x200007e4
 8009918:	200007e8 	.word	0x200007e8
 800991c:	200007ec 	.word	0x200007ec

08009920 <Setup_frequency_Forward_Kinematic>:

float _Pos_X = 0.0f;
float _Pos_Y = 0.0f;
float _Pos_Z = 0.0f;

void Setup_frequency_Forward_Kinematic(uint8_t freq){
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	4603      	mov	r3, r0
 8009928:	71fb      	strb	r3, [r7, #7]
	__freq = freq;
 800992a:	4a04      	ldr	r2, [pc, #16]	@ (800993c <Setup_frequency_Forward_Kinematic+0x1c>)
 800992c:	79fb      	ldrb	r3, [r7, #7]
 800992e:	7013      	strb	r3, [r2, #0]
}
 8009930:	bf00      	nop
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr
 800993c:	2000001c 	.word	0x2000001c

08009940 <Setup_Inverse_Kinematic>:

float Lx_;
float Ly_;
float Radius_wheel_;

void Setup_Inverse_Kinematic(float Lx ,float Ly ,float Radius_wheel){
 8009940:	b480      	push	{r7}
 8009942:	b085      	sub	sp, #20
 8009944:	af00      	add	r7, sp, #0
 8009946:	ed87 0a03 	vstr	s0, [r7, #12]
 800994a:	edc7 0a02 	vstr	s1, [r7, #8]
 800994e:	ed87 1a01 	vstr	s2, [r7, #4]
	Lx_ = Lx;
 8009952:	4a07      	ldr	r2, [pc, #28]	@ (8009970 <Setup_Inverse_Kinematic+0x30>)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6013      	str	r3, [r2, #0]
	Ly_ = Ly;
 8009958:	4a06      	ldr	r2, [pc, #24]	@ (8009974 <Setup_Inverse_Kinematic+0x34>)
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	6013      	str	r3, [r2, #0]
	Radius_wheel_ = Radius_wheel;
 800995e:	4a06      	ldr	r2, [pc, #24]	@ (8009978 <Setup_Inverse_Kinematic+0x38>)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6013      	str	r3, [r2, #0]
}
 8009964:	bf00      	nop
 8009966:	3714      	adds	r7, #20
 8009968:	46bd      	mov	sp, r7
 800996a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996e:	4770      	bx	lr
 8009970:	200007f0 	.word	0x200007f0
 8009974:	200007f4 	.word	0x200007f4
 8009978:	200007f8 	.word	0x200007f8

0800997c <Inverse_Kinematic>:
float w_LF = 0.0f;
float w_LB = 0.0f;
float w_RF = 0.0f;
float w_RB = 0.0f;

void Inverse_Kinematic(float Vx ,float Vy ,float wz){
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	ed87 0a03 	vstr	s0, [r7, #12]
 8009986:	edc7 0a02 	vstr	s1, [r7, #8]
 800998a:	ed87 1a01 	vstr	s2, [r7, #4]
	w_LF = (Vx - Vy - (Lx_ +Ly_)*wz)/Radius_wheel_;
 800998e:	ed97 7a03 	vldr	s14, [r7, #12]
 8009992:	edd7 7a02 	vldr	s15, [r7, #8]
 8009996:	ee37 7a67 	vsub.f32	s14, s14, s15
 800999a:	4b3a      	ldr	r3, [pc, #232]	@ (8009a84 <Inverse_Kinematic+0x108>)
 800999c:	edd3 6a00 	vldr	s13, [r3]
 80099a0:	4b39      	ldr	r3, [pc, #228]	@ (8009a88 <Inverse_Kinematic+0x10c>)
 80099a2:	edd3 7a00 	vldr	s15, [r3]
 80099a6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80099aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80099ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80099b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80099b6:	4b35      	ldr	r3, [pc, #212]	@ (8009a8c <Inverse_Kinematic+0x110>)
 80099b8:	ed93 7a00 	vldr	s14, [r3]
 80099bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099c0:	4b33      	ldr	r3, [pc, #204]	@ (8009a90 <Inverse_Kinematic+0x114>)
 80099c2:	edc3 7a00 	vstr	s15, [r3]
	w_RF = -(Vx + Vy + (Lx_ +Ly_)*wz)/Radius_wheel_;
 80099c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80099ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80099ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80099d2:	4b2c      	ldr	r3, [pc, #176]	@ (8009a84 <Inverse_Kinematic+0x108>)
 80099d4:	edd3 6a00 	vldr	s13, [r3]
 80099d8:	4b2b      	ldr	r3, [pc, #172]	@ (8009a88 <Inverse_Kinematic+0x10c>)
 80099da:	edd3 7a00 	vldr	s15, [r3]
 80099de:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80099e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80099e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80099ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099ee:	eef1 6a67 	vneg.f32	s13, s15
 80099f2:	4b26      	ldr	r3, [pc, #152]	@ (8009a8c <Inverse_Kinematic+0x110>)
 80099f4:	ed93 7a00 	vldr	s14, [r3]
 80099f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099fc:	4b25      	ldr	r3, [pc, #148]	@ (8009a94 <Inverse_Kinematic+0x118>)
 80099fe:	edc3 7a00 	vstr	s15, [r3]
	w_LB = (Vx + Vy - (Lx_ +Ly_)*wz)/Radius_wheel_;
 8009a02:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a06:	edd7 7a02 	vldr	s15, [r7, #8]
 8009a0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8009a84 <Inverse_Kinematic+0x108>)
 8009a10:	edd3 6a00 	vldr	s13, [r3]
 8009a14:	4b1c      	ldr	r3, [pc, #112]	@ (8009a88 <Inverse_Kinematic+0x10c>)
 8009a16:	edd3 7a00 	vldr	s15, [r3]
 8009a1a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009a1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009a22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a26:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009a2a:	4b18      	ldr	r3, [pc, #96]	@ (8009a8c <Inverse_Kinematic+0x110>)
 8009a2c:	ed93 7a00 	vldr	s14, [r3]
 8009a30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a34:	4b18      	ldr	r3, [pc, #96]	@ (8009a98 <Inverse_Kinematic+0x11c>)
 8009a36:	edc3 7a00 	vstr	s15, [r3]
	w_RB = -(Vx - Vy + (Lx_ +Ly_)*wz)/Radius_wheel_;
 8009a3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009a42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009a46:	4b0f      	ldr	r3, [pc, #60]	@ (8009a84 <Inverse_Kinematic+0x108>)
 8009a48:	edd3 6a00 	vldr	s13, [r3]
 8009a4c:	4b0e      	ldr	r3, [pc, #56]	@ (8009a88 <Inverse_Kinematic+0x10c>)
 8009a4e:	edd3 7a00 	vldr	s15, [r3]
 8009a52:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8009a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a62:	eef1 6a67 	vneg.f32	s13, s15
 8009a66:	4b09      	ldr	r3, [pc, #36]	@ (8009a8c <Inverse_Kinematic+0x110>)
 8009a68:	ed93 7a00 	vldr	s14, [r3]
 8009a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a70:	4b0a      	ldr	r3, [pc, #40]	@ (8009a9c <Inverse_Kinematic+0x120>)
 8009a72:	edc3 7a00 	vstr	s15, [r3]
}
 8009a76:	bf00      	nop
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	200007f0 	.word	0x200007f0
 8009a88:	200007f4 	.word	0x200007f4
 8009a8c:	200007f8 	.word	0x200007f8
 8009a90:	200007fc 	.word	0x200007fc
 8009a94:	20000804 	.word	0x20000804
 8009a98:	20000800 	.word	0x20000800
 8009a9c:	20000808 	.word	0x20000808

08009aa0 <get_w_LF>:

float get_w_LF(){
 8009aa0:	b480      	push	{r7}
 8009aa2:	af00      	add	r7, sp, #0
	return w_LF;
 8009aa4:	4b04      	ldr	r3, [pc, #16]	@ (8009ab8 <get_w_LF+0x18>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	ee07 3a90 	vmov	s15, r3
}
 8009aac:	eeb0 0a67 	vmov.f32	s0, s15
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr
 8009ab8:	200007fc 	.word	0x200007fc

08009abc <get_w_LB>:

float get_w_LB(){
 8009abc:	b480      	push	{r7}
 8009abe:	af00      	add	r7, sp, #0
	return w_LB;
 8009ac0:	4b04      	ldr	r3, [pc, #16]	@ (8009ad4 <get_w_LB+0x18>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	ee07 3a90 	vmov	s15, r3
}
 8009ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr
 8009ad4:	20000800 	.word	0x20000800

08009ad8 <get_w_RF>:

float get_w_RF(){
 8009ad8:	b480      	push	{r7}
 8009ada:	af00      	add	r7, sp, #0
	return w_RF;
 8009adc:	4b04      	ldr	r3, [pc, #16]	@ (8009af0 <get_w_RF+0x18>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	ee07 3a90 	vmov	s15, r3
}
 8009ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr
 8009af0:	20000804 	.word	0x20000804

08009af4 <get_w_RB>:

float get_w_RB(){
 8009af4:	b480      	push	{r7}
 8009af6:	af00      	add	r7, sp, #0
	return w_RB;
 8009af8:	4b04      	ldr	r3, [pc, #16]	@ (8009b0c <get_w_RB+0x18>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	ee07 3a90 	vmov	s15, r3
}
 8009b00:	eeb0 0a67 	vmov.f32	s0, s15
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr
 8009b0c:	20000808 	.word	0x20000808

08009b10 <map>:

float map(float value, float fromLow, float fromHigh, float toLow, float toHigh) {
 8009b10:	b480      	push	{r7}
 8009b12:	b087      	sub	sp, #28
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	ed87 0a05 	vstr	s0, [r7, #20]
 8009b1a:	edc7 0a04 	vstr	s1, [r7, #16]
 8009b1e:	ed87 1a03 	vstr	s2, [r7, #12]
 8009b22:	edc7 1a02 	vstr	s3, [r7, #8]
 8009b26:	ed87 2a01 	vstr	s4, [r7, #4]
    return toLow + (toHigh - toLow) * ((value - fromLow) / (fromHigh - fromLow));
 8009b2a:	ed97 7a01 	vldr	s14, [r7, #4]
 8009b2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009b32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b36:	edd7 6a05 	vldr	s13, [r7, #20]
 8009b3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8009b3e:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8009b42:	edd7 6a03 	vldr	s13, [r7, #12]
 8009b46:	edd7 7a04 	vldr	s15, [r7, #16]
 8009b4a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009b4e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8009b52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009b56:	edd7 7a02 	vldr	s15, [r7, #8]
 8009b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8009b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8009b62:	371c      	adds	r7, #28
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	460b      	mov	r3, r1
 8009b76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009b78:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009b7c:	f002 fc50 	bl	800c420 <USBD_static_malloc>
 8009b80:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d109      	bne.n	8009b9c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	32b0      	adds	r2, #176	@ 0xb0
 8009b92:	2100      	movs	r1, #0
 8009b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009b98:	2302      	movs	r3, #2
 8009b9a:	e0d4      	b.n	8009d46 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009b9c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f002 fc80 	bl	800c4a8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	32b0      	adds	r2, #176	@ 0xb0
 8009bb2:	68f9      	ldr	r1, [r7, #12]
 8009bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	32b0      	adds	r2, #176	@ 0xb0
 8009bc2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	7c1b      	ldrb	r3, [r3, #16]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d138      	bne.n	8009c46 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009bd4:	4b5e      	ldr	r3, [pc, #376]	@ (8009d50 <USBD_CDC_Init+0x1e4>)
 8009bd6:	7819      	ldrb	r1, [r3, #0]
 8009bd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009bdc:	2202      	movs	r2, #2
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f002 fafb 	bl	800c1da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009be4:	4b5a      	ldr	r3, [pc, #360]	@ (8009d50 <USBD_CDC_Init+0x1e4>)
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	f003 020f 	and.w	r2, r3, #15
 8009bec:	6879      	ldr	r1, [r7, #4]
 8009bee:	4613      	mov	r3, r2
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	4413      	add	r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	440b      	add	r3, r1
 8009bf8:	3324      	adds	r3, #36	@ 0x24
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009bfe:	4b55      	ldr	r3, [pc, #340]	@ (8009d54 <USBD_CDC_Init+0x1e8>)
 8009c00:	7819      	ldrb	r1, [r3, #0]
 8009c02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009c06:	2202      	movs	r2, #2
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f002 fae6 	bl	800c1da <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c0e:	4b51      	ldr	r3, [pc, #324]	@ (8009d54 <USBD_CDC_Init+0x1e8>)
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	f003 020f 	and.w	r2, r3, #15
 8009c16:	6879      	ldr	r1, [r7, #4]
 8009c18:	4613      	mov	r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	4413      	add	r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	440b      	add	r3, r1
 8009c22:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009c26:	2201      	movs	r2, #1
 8009c28:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009c2a:	4b4b      	ldr	r3, [pc, #300]	@ (8009d58 <USBD_CDC_Init+0x1ec>)
 8009c2c:	781b      	ldrb	r3, [r3, #0]
 8009c2e:	f003 020f 	and.w	r2, r3, #15
 8009c32:	6879      	ldr	r1, [r7, #4]
 8009c34:	4613      	mov	r3, r2
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	4413      	add	r3, r2
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	440b      	add	r3, r1
 8009c3e:	3326      	adds	r3, #38	@ 0x26
 8009c40:	2210      	movs	r2, #16
 8009c42:	801a      	strh	r2, [r3, #0]
 8009c44:	e035      	b.n	8009cb2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c46:	4b42      	ldr	r3, [pc, #264]	@ (8009d50 <USBD_CDC_Init+0x1e4>)
 8009c48:	7819      	ldrb	r1, [r3, #0]
 8009c4a:	2340      	movs	r3, #64	@ 0x40
 8009c4c:	2202      	movs	r2, #2
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f002 fac3 	bl	800c1da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c54:	4b3e      	ldr	r3, [pc, #248]	@ (8009d50 <USBD_CDC_Init+0x1e4>)
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	f003 020f 	and.w	r2, r3, #15
 8009c5c:	6879      	ldr	r1, [r7, #4]
 8009c5e:	4613      	mov	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	4413      	add	r3, r2
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	440b      	add	r3, r1
 8009c68:	3324      	adds	r3, #36	@ 0x24
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c6e:	4b39      	ldr	r3, [pc, #228]	@ (8009d54 <USBD_CDC_Init+0x1e8>)
 8009c70:	7819      	ldrb	r1, [r3, #0]
 8009c72:	2340      	movs	r3, #64	@ 0x40
 8009c74:	2202      	movs	r2, #2
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f002 faaf 	bl	800c1da <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c7c:	4b35      	ldr	r3, [pc, #212]	@ (8009d54 <USBD_CDC_Init+0x1e8>)
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	f003 020f 	and.w	r2, r3, #15
 8009c84:	6879      	ldr	r1, [r7, #4]
 8009c86:	4613      	mov	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	440b      	add	r3, r1
 8009c90:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009c94:	2201      	movs	r2, #1
 8009c96:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009c98:	4b2f      	ldr	r3, [pc, #188]	@ (8009d58 <USBD_CDC_Init+0x1ec>)
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	f003 020f 	and.w	r2, r3, #15
 8009ca0:	6879      	ldr	r1, [r7, #4]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	4413      	add	r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	440b      	add	r3, r1
 8009cac:	3326      	adds	r3, #38	@ 0x26
 8009cae:	2210      	movs	r2, #16
 8009cb0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009cb2:	4b29      	ldr	r3, [pc, #164]	@ (8009d58 <USBD_CDC_Init+0x1ec>)
 8009cb4:	7819      	ldrb	r1, [r3, #0]
 8009cb6:	2308      	movs	r3, #8
 8009cb8:	2203      	movs	r2, #3
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f002 fa8d 	bl	800c1da <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009cc0:	4b25      	ldr	r3, [pc, #148]	@ (8009d58 <USBD_CDC_Init+0x1ec>)
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	f003 020f 	and.w	r2, r3, #15
 8009cc8:	6879      	ldr	r1, [r7, #4]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	440b      	add	r3, r1
 8009cd4:	3324      	adds	r3, #36	@ 0x24
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	33b0      	adds	r3, #176	@ 0xb0
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	4413      	add	r3, r2
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d101      	bne.n	8009d14 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009d10:	2302      	movs	r3, #2
 8009d12:	e018      	b.n	8009d46 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	7c1b      	ldrb	r3, [r3, #16]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10a      	bne.n	8009d32 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8009d54 <USBD_CDC_Init+0x1e8>)
 8009d1e:	7819      	ldrb	r1, [r3, #0]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f002 fb44 	bl	800c3b8 <USBD_LL_PrepareReceive>
 8009d30:	e008      	b.n	8009d44 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d32:	4b08      	ldr	r3, [pc, #32]	@ (8009d54 <USBD_CDC_Init+0x1e8>)
 8009d34:	7819      	ldrb	r1, [r3, #0]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009d3c:	2340      	movs	r3, #64	@ 0x40
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f002 fb3a 	bl	800c3b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	200000a7 	.word	0x200000a7
 8009d54:	200000a8 	.word	0x200000a8
 8009d58:	200000a9 	.word	0x200000a9

08009d5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	460b      	mov	r3, r1
 8009d66:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009d68:	4b3a      	ldr	r3, [pc, #232]	@ (8009e54 <USBD_CDC_DeInit+0xf8>)
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f002 fa59 	bl	800c226 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009d74:	4b37      	ldr	r3, [pc, #220]	@ (8009e54 <USBD_CDC_DeInit+0xf8>)
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	f003 020f 	and.w	r2, r3, #15
 8009d7c:	6879      	ldr	r1, [r7, #4]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	4413      	add	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	440b      	add	r3, r1
 8009d88:	3324      	adds	r3, #36	@ 0x24
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009d8e:	4b32      	ldr	r3, [pc, #200]	@ (8009e58 <USBD_CDC_DeInit+0xfc>)
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	4619      	mov	r1, r3
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f002 fa46 	bl	800c226 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8009e58 <USBD_CDC_DeInit+0xfc>)
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	f003 020f 	and.w	r2, r3, #15
 8009da2:	6879      	ldr	r1, [r7, #4]
 8009da4:	4613      	mov	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	440b      	add	r3, r1
 8009dae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009db2:	2200      	movs	r2, #0
 8009db4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009db6:	4b29      	ldr	r3, [pc, #164]	@ (8009e5c <USBD_CDC_DeInit+0x100>)
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	4619      	mov	r1, r3
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f002 fa32 	bl	800c226 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009dc2:	4b26      	ldr	r3, [pc, #152]	@ (8009e5c <USBD_CDC_DeInit+0x100>)
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	f003 020f 	and.w	r2, r3, #15
 8009dca:	6879      	ldr	r1, [r7, #4]
 8009dcc:	4613      	mov	r3, r2
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4413      	add	r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	440b      	add	r3, r1
 8009dd6:	3324      	adds	r3, #36	@ 0x24
 8009dd8:	2200      	movs	r2, #0
 8009dda:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8009e5c <USBD_CDC_DeInit+0x100>)
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	f003 020f 	and.w	r2, r3, #15
 8009de4:	6879      	ldr	r1, [r7, #4]
 8009de6:	4613      	mov	r3, r2
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	4413      	add	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	440b      	add	r3, r1
 8009df0:	3326      	adds	r3, #38	@ 0x26
 8009df2:	2200      	movs	r2, #0
 8009df4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	32b0      	adds	r2, #176	@ 0xb0
 8009e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d01f      	beq.n	8009e48 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	33b0      	adds	r3, #176	@ 0xb0
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4413      	add	r3, r2
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	32b0      	adds	r2, #176	@ 0xb0
 8009e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f002 fb06 	bl	800c43c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	32b0      	adds	r2, #176	@ 0xb0
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	200000a7 	.word	0x200000a7
 8009e58:	200000a8 	.word	0x200000a8
 8009e5c:	200000a9 	.word	0x200000a9

08009e60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	32b0      	adds	r2, #176	@ 0xb0
 8009e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d101      	bne.n	8009e90 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009e8c:	2303      	movs	r3, #3
 8009e8e:	e0bf      	b.n	800a010 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d050      	beq.n	8009f3e <USBD_CDC_Setup+0xde>
 8009e9c:	2b20      	cmp	r3, #32
 8009e9e:	f040 80af 	bne.w	800a000 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	88db      	ldrh	r3, [r3, #6]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d03a      	beq.n	8009f20 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	b25b      	sxtb	r3, r3
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	da1b      	bge.n	8009eec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	33b0      	adds	r3, #176	@ 0xb0
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4413      	add	r3, r2
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	683a      	ldr	r2, [r7, #0]
 8009ec8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009eca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ecc:	683a      	ldr	r2, [r7, #0]
 8009ece:	88d2      	ldrh	r2, [r2, #6]
 8009ed0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	88db      	ldrh	r3, [r3, #6]
 8009ed6:	2b07      	cmp	r3, #7
 8009ed8:	bf28      	it	cs
 8009eda:	2307      	movcs	r3, #7
 8009edc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	89fa      	ldrh	r2, [r7, #14]
 8009ee2:	4619      	mov	r1, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f001 fd53 	bl	800b990 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009eea:	e090      	b.n	800a00e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	785a      	ldrb	r2, [r3, #1]
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	88db      	ldrh	r3, [r3, #6]
 8009efa:	2b3f      	cmp	r3, #63	@ 0x3f
 8009efc:	d803      	bhi.n	8009f06 <USBD_CDC_Setup+0xa6>
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	88db      	ldrh	r3, [r3, #6]
 8009f02:	b2da      	uxtb	r2, r3
 8009f04:	e000      	b.n	8009f08 <USBD_CDC_Setup+0xa8>
 8009f06:	2240      	movs	r2, #64	@ 0x40
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009f0e:	6939      	ldr	r1, [r7, #16]
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009f16:	461a      	mov	r2, r3
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f001 fd65 	bl	800b9e8 <USBD_CtlPrepareRx>
      break;
 8009f1e:	e076      	b.n	800a00e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	33b0      	adds	r3, #176	@ 0xb0
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4413      	add	r3, r2
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	689b      	ldr	r3, [r3, #8]
 8009f32:	683a      	ldr	r2, [r7, #0]
 8009f34:	7850      	ldrb	r0, [r2, #1]
 8009f36:	2200      	movs	r2, #0
 8009f38:	6839      	ldr	r1, [r7, #0]
 8009f3a:	4798      	blx	r3
      break;
 8009f3c:	e067      	b.n	800a00e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	785b      	ldrb	r3, [r3, #1]
 8009f42:	2b0b      	cmp	r3, #11
 8009f44:	d851      	bhi.n	8009fea <USBD_CDC_Setup+0x18a>
 8009f46:	a201      	add	r2, pc, #4	@ (adr r2, 8009f4c <USBD_CDC_Setup+0xec>)
 8009f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4c:	08009f7d 	.word	0x08009f7d
 8009f50:	08009ff9 	.word	0x08009ff9
 8009f54:	08009feb 	.word	0x08009feb
 8009f58:	08009feb 	.word	0x08009feb
 8009f5c:	08009feb 	.word	0x08009feb
 8009f60:	08009feb 	.word	0x08009feb
 8009f64:	08009feb 	.word	0x08009feb
 8009f68:	08009feb 	.word	0x08009feb
 8009f6c:	08009feb 	.word	0x08009feb
 8009f70:	08009feb 	.word	0x08009feb
 8009f74:	08009fa7 	.word	0x08009fa7
 8009f78:	08009fd1 	.word	0x08009fd1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	2b03      	cmp	r3, #3
 8009f86:	d107      	bne.n	8009f98 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009f88:	f107 030a 	add.w	r3, r7, #10
 8009f8c:	2202      	movs	r2, #2
 8009f8e:	4619      	mov	r1, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f001 fcfd 	bl	800b990 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f96:	e032      	b.n	8009ffe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009f98:	6839      	ldr	r1, [r7, #0]
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f001 fc7b 	bl	800b896 <USBD_CtlError>
            ret = USBD_FAIL;
 8009fa0:	2303      	movs	r3, #3
 8009fa2:	75fb      	strb	r3, [r7, #23]
          break;
 8009fa4:	e02b      	b.n	8009ffe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	2b03      	cmp	r3, #3
 8009fb0:	d107      	bne.n	8009fc2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009fb2:	f107 030d 	add.w	r3, r7, #13
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	4619      	mov	r1, r3
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f001 fce8 	bl	800b990 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009fc0:	e01d      	b.n	8009ffe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009fc2:	6839      	ldr	r1, [r7, #0]
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f001 fc66 	bl	800b896 <USBD_CtlError>
            ret = USBD_FAIL;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	75fb      	strb	r3, [r7, #23]
          break;
 8009fce:	e016      	b.n	8009ffe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	2b03      	cmp	r3, #3
 8009fda:	d00f      	beq.n	8009ffc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009fdc:	6839      	ldr	r1, [r7, #0]
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f001 fc59 	bl	800b896 <USBD_CtlError>
            ret = USBD_FAIL;
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009fe8:	e008      	b.n	8009ffc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009fea:	6839      	ldr	r1, [r7, #0]
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f001 fc52 	bl	800b896 <USBD_CtlError>
          ret = USBD_FAIL;
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	75fb      	strb	r3, [r7, #23]
          break;
 8009ff6:	e002      	b.n	8009ffe <USBD_CDC_Setup+0x19e>
          break;
 8009ff8:	bf00      	nop
 8009ffa:	e008      	b.n	800a00e <USBD_CDC_Setup+0x1ae>
          break;
 8009ffc:	bf00      	nop
      }
      break;
 8009ffe:	e006      	b.n	800a00e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a000:	6839      	ldr	r1, [r7, #0]
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f001 fc47 	bl	800b896 <USBD_CtlError>
      ret = USBD_FAIL;
 800a008:	2303      	movs	r3, #3
 800a00a:	75fb      	strb	r3, [r7, #23]
      break;
 800a00c:	bf00      	nop
  }

  return (uint8_t)ret;
 800a00e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a010:	4618      	mov	r0, r3
 800a012:	3718      	adds	r7, #24
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	460b      	mov	r3, r1
 800a022:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a02a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	32b0      	adds	r2, #176	@ 0xb0
 800a036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d101      	bne.n	800a042 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a03e:	2303      	movs	r3, #3
 800a040:	e065      	b.n	800a10e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	32b0      	adds	r2, #176	@ 0xb0
 800a04c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a050:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a052:	78fb      	ldrb	r3, [r7, #3]
 800a054:	f003 020f 	and.w	r2, r3, #15
 800a058:	6879      	ldr	r1, [r7, #4]
 800a05a:	4613      	mov	r3, r2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	4413      	add	r3, r2
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	440b      	add	r3, r1
 800a064:	3318      	adds	r3, #24
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d02f      	beq.n	800a0cc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a06c:	78fb      	ldrb	r3, [r7, #3]
 800a06e:	f003 020f 	and.w	r2, r3, #15
 800a072:	6879      	ldr	r1, [r7, #4]
 800a074:	4613      	mov	r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	4413      	add	r3, r2
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	440b      	add	r3, r1
 800a07e:	3318      	adds	r3, #24
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	78fb      	ldrb	r3, [r7, #3]
 800a084:	f003 010f 	and.w	r1, r3, #15
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	460b      	mov	r3, r1
 800a08c:	00db      	lsls	r3, r3, #3
 800a08e:	440b      	add	r3, r1
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	4403      	add	r3, r0
 800a094:	331c      	adds	r3, #28
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	fbb2 f1f3 	udiv	r1, r2, r3
 800a09c:	fb01 f303 	mul.w	r3, r1, r3
 800a0a0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d112      	bne.n	800a0cc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a0a6:	78fb      	ldrb	r3, [r7, #3]
 800a0a8:	f003 020f 	and.w	r2, r3, #15
 800a0ac:	6879      	ldr	r1, [r7, #4]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	4413      	add	r3, r2
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	440b      	add	r3, r1
 800a0b8:	3318      	adds	r3, #24
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a0be:	78f9      	ldrb	r1, [r7, #3]
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f002 f956 	bl	800c376 <USBD_LL_Transmit>
 800a0ca:	e01f      	b.n	800a10c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0da:	687a      	ldr	r2, [r7, #4]
 800a0dc:	33b0      	adds	r3, #176	@ 0xb0
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4413      	add	r3, r2
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d010      	beq.n	800a10c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	33b0      	adds	r3, #176	@ 0xb0
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	4413      	add	r3, r2
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	68ba      	ldr	r2, [r7, #8]
 800a0fe:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a108:	78fa      	ldrb	r2, [r7, #3]
 800a10a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b084      	sub	sp, #16
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
 800a11e:	460b      	mov	r3, r1
 800a120:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	32b0      	adds	r2, #176	@ 0xb0
 800a12c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a130:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	32b0      	adds	r2, #176	@ 0xb0
 800a13c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d101      	bne.n	800a148 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a144:	2303      	movs	r3, #3
 800a146:	e01a      	b.n	800a17e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a148:	78fb      	ldrb	r3, [r7, #3]
 800a14a:	4619      	mov	r1, r3
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f002 f954 	bl	800c3fa <USBD_LL_GetRxDataSize>
 800a152:	4602      	mov	r2, r0
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	33b0      	adds	r3, #176	@ 0xb0
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	4413      	add	r3, r2
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a178:	4611      	mov	r1, r2
 800a17a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b084      	sub	sp, #16
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	32b0      	adds	r2, #176	@ 0xb0
 800a198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a19c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e024      	b.n	800a1f2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	33b0      	adds	r3, #176	@ 0xb0
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	4413      	add	r3, r2
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d019      	beq.n	800a1f0 <USBD_CDC_EP0_RxReady+0x6a>
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a1c2:	2bff      	cmp	r3, #255	@ 0xff
 800a1c4:	d014      	beq.n	800a1f0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	33b0      	adds	r3, #176	@ 0xb0
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	4413      	add	r3, r2
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	689b      	ldr	r3, [r3, #8]
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a1de:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a1e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	22ff      	movs	r2, #255	@ 0xff
 800a1ec:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3710      	adds	r7, #16
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
	...

0800a1fc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b086      	sub	sp, #24
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a204:	2182      	movs	r1, #130	@ 0x82
 800a206:	4818      	ldr	r0, [pc, #96]	@ (800a268 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a208:	f000 fd0f 	bl	800ac2a <USBD_GetEpDesc>
 800a20c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a20e:	2101      	movs	r1, #1
 800a210:	4815      	ldr	r0, [pc, #84]	@ (800a268 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a212:	f000 fd0a 	bl	800ac2a <USBD_GetEpDesc>
 800a216:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a218:	2181      	movs	r1, #129	@ 0x81
 800a21a:	4813      	ldr	r0, [pc, #76]	@ (800a268 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a21c:	f000 fd05 	bl	800ac2a <USBD_GetEpDesc>
 800a220:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d002      	beq.n	800a22e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	2210      	movs	r2, #16
 800a22c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d006      	beq.n	800a242 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	2200      	movs	r2, #0
 800a238:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a23c:	711a      	strb	r2, [r3, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d006      	beq.n	800a256 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a250:	711a      	strb	r2, [r3, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2243      	movs	r2, #67	@ 0x43
 800a25a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a25c:	4b02      	ldr	r3, [pc, #8]	@ (800a268 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3718      	adds	r7, #24
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
 800a266:	bf00      	nop
 800a268:	20000064 	.word	0x20000064

0800a26c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b086      	sub	sp, #24
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a274:	2182      	movs	r1, #130	@ 0x82
 800a276:	4818      	ldr	r0, [pc, #96]	@ (800a2d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a278:	f000 fcd7 	bl	800ac2a <USBD_GetEpDesc>
 800a27c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a27e:	2101      	movs	r1, #1
 800a280:	4815      	ldr	r0, [pc, #84]	@ (800a2d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a282:	f000 fcd2 	bl	800ac2a <USBD_GetEpDesc>
 800a286:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a288:	2181      	movs	r1, #129	@ 0x81
 800a28a:	4813      	ldr	r0, [pc, #76]	@ (800a2d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a28c:	f000 fccd 	bl	800ac2a <USBD_GetEpDesc>
 800a290:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d002      	beq.n	800a29e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	2210      	movs	r2, #16
 800a29c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d006      	beq.n	800a2b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	711a      	strb	r2, [r3, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f042 0202 	orr.w	r2, r2, #2
 800a2b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d006      	beq.n	800a2c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	711a      	strb	r2, [r3, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f042 0202 	orr.w	r2, r2, #2
 800a2c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2243      	movs	r2, #67	@ 0x43
 800a2ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a2cc:	4b02      	ldr	r3, [pc, #8]	@ (800a2d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3718      	adds	r7, #24
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	20000064 	.word	0x20000064

0800a2dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b086      	sub	sp, #24
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a2e4:	2182      	movs	r1, #130	@ 0x82
 800a2e6:	4818      	ldr	r0, [pc, #96]	@ (800a348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2e8:	f000 fc9f 	bl	800ac2a <USBD_GetEpDesc>
 800a2ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a2ee:	2101      	movs	r1, #1
 800a2f0:	4815      	ldr	r0, [pc, #84]	@ (800a348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2f2:	f000 fc9a 	bl	800ac2a <USBD_GetEpDesc>
 800a2f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a2f8:	2181      	movs	r1, #129	@ 0x81
 800a2fa:	4813      	ldr	r0, [pc, #76]	@ (800a348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a2fc:	f000 fc95 	bl	800ac2a <USBD_GetEpDesc>
 800a300:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d002      	beq.n	800a30e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	2210      	movs	r2, #16
 800a30c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d006      	beq.n	800a322 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	2200      	movs	r2, #0
 800a318:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a31c:	711a      	strb	r2, [r3, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d006      	beq.n	800a336 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a330:	711a      	strb	r2, [r3, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2243      	movs	r2, #67	@ 0x43
 800a33a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a33c:	4b02      	ldr	r3, [pc, #8]	@ (800a348 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3718      	adds	r7, #24
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	20000064 	.word	0x20000064

0800a34c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b083      	sub	sp, #12
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	220a      	movs	r2, #10
 800a358:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a35a:	4b03      	ldr	r3, [pc, #12]	@ (800a368 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	20000020 	.word	0x20000020

0800a36c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d101      	bne.n	800a380 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a37c:	2303      	movs	r3, #3
 800a37e:	e009      	b.n	800a394 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	33b0      	adds	r3, #176	@ 0xb0
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	4413      	add	r3, r2
 800a38e:	683a      	ldr	r2, [r7, #0]
 800a390:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b087      	sub	sp, #28
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	60b9      	str	r1, [r7, #8]
 800a3aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	32b0      	adds	r2, #176	@ 0xb0
 800a3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3ba:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	e008      	b.n	800a3d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	68ba      	ldr	r2, [r7, #8]
 800a3ca:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	371c      	adds	r7, #28
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	32b0      	adds	r2, #176	@ 0xb0
 800a3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d101      	bne.n	800a408 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a404:	2303      	movs	r3, #3
 800a406:	e004      	b.n	800a412 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	683a      	ldr	r2, [r7, #0]
 800a40c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3714      	adds	r7, #20
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
	...

0800a420 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	32b0      	adds	r2, #176	@ 0xb0
 800a432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a436:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	32b0      	adds	r2, #176	@ 0xb0
 800a442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d101      	bne.n	800a44e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a44a:	2303      	movs	r3, #3
 800a44c:	e018      	b.n	800a480 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	7c1b      	ldrb	r3, [r3, #16]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d10a      	bne.n	800a46c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a456:	4b0c      	ldr	r3, [pc, #48]	@ (800a488 <USBD_CDC_ReceivePacket+0x68>)
 800a458:	7819      	ldrb	r1, [r3, #0]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a460:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f001 ffa7 	bl	800c3b8 <USBD_LL_PrepareReceive>
 800a46a:	e008      	b.n	800a47e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a46c:	4b06      	ldr	r3, [pc, #24]	@ (800a488 <USBD_CDC_ReceivePacket+0x68>)
 800a46e:	7819      	ldrb	r1, [r3, #0]
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a476:	2340      	movs	r3, #64	@ 0x40
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f001 ff9d 	bl	800c3b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a47e:	2300      	movs	r3, #0
}
 800a480:	4618      	mov	r0, r3
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}
 800a488:	200000a8 	.word	0x200000a8

0800a48c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	4613      	mov	r3, r2
 800a498:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d101      	bne.n	800a4a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a4a0:	2303      	movs	r3, #3
 800a4a2:	e01f      	b.n	800a4e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d003      	beq.n	800a4ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	68ba      	ldr	r2, [r7, #8]
 800a4c6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	79fa      	ldrb	r2, [r7, #7]
 800a4d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a4d8:	68f8      	ldr	r0, [r7, #12]
 800a4da:	f001 fe17 	bl	800c10c <USBD_LL_Init>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a4e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3718      	adds	r7, #24
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d101      	bne.n	800a504 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a500:	2303      	movs	r3, #3
 800a502:	e025      	b.n	800a550 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	32ae      	adds	r2, #174	@ 0xae
 800a516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a51a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00f      	beq.n	800a540 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	32ae      	adds	r2, #174	@ 0xae
 800a52a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a52e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a530:	f107 020e 	add.w	r2, r7, #14
 800a534:	4610      	mov	r0, r2
 800a536:	4798      	blx	r3
 800a538:	4602      	mov	r2, r0
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a546:	1c5a      	adds	r2, r3, #1
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a54e:	2300      	movs	r3, #0
}
 800a550:	4618      	mov	r0, r3
 800a552:	3710      	adds	r7, #16
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f001 fe1f 	bl	800c1a4 <USBD_LL_Start>
 800a566:	4603      	mov	r3, r0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a578:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	370c      	adds	r7, #12
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr

0800a586 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a586:	b580      	push	{r7, lr}
 800a588:	b084      	sub	sp, #16
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
 800a58e:	460b      	mov	r3, r1
 800a590:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d009      	beq.n	800a5b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	78fa      	ldrb	r2, [r7, #3]
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	4798      	blx	r3
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b084      	sub	sp, #16
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	78fa      	ldrb	r2, [r7, #3]
 800a5d8:	4611      	mov	r1, r2
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	4798      	blx	r3
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d001      	beq.n	800a5e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a5e4:	2303      	movs	r3, #3
 800a5e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b084      	sub	sp, #16
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a602:	6839      	ldr	r1, [r7, #0]
 800a604:	4618      	mov	r0, r3
 800a606:	f001 f90c 	bl	800b822 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a618:	461a      	mov	r2, r3
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a626:	f003 031f 	and.w	r3, r3, #31
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d01a      	beq.n	800a664 <USBD_LL_SetupStage+0x72>
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d822      	bhi.n	800a678 <USBD_LL_SetupStage+0x86>
 800a632:	2b00      	cmp	r3, #0
 800a634:	d002      	beq.n	800a63c <USBD_LL_SetupStage+0x4a>
 800a636:	2b01      	cmp	r3, #1
 800a638:	d00a      	beq.n	800a650 <USBD_LL_SetupStage+0x5e>
 800a63a:	e01d      	b.n	800a678 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a642:	4619      	mov	r1, r3
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 fb63 	bl	800ad10 <USBD_StdDevReq>
 800a64a:	4603      	mov	r3, r0
 800a64c:	73fb      	strb	r3, [r7, #15]
      break;
 800a64e:	e020      	b.n	800a692 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a656:	4619      	mov	r1, r3
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 fbcb 	bl	800adf4 <USBD_StdItfReq>
 800a65e:	4603      	mov	r3, r0
 800a660:	73fb      	strb	r3, [r7, #15]
      break;
 800a662:	e016      	b.n	800a692 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a66a:	4619      	mov	r1, r3
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 fc2d 	bl	800aecc <USBD_StdEPReq>
 800a672:	4603      	mov	r3, r0
 800a674:	73fb      	strb	r3, [r7, #15]
      break;
 800a676:	e00c      	b.n	800a692 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a67e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a682:	b2db      	uxtb	r3, r3
 800a684:	4619      	mov	r1, r3
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f001 fdec 	bl	800c264 <USBD_LL_StallEP>
 800a68c:	4603      	mov	r3, r0
 800a68e:	73fb      	strb	r3, [r7, #15]
      break;
 800a690:	bf00      	nop
  }

  return ret;
 800a692:	7bfb      	ldrb	r3, [r7, #15]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b086      	sub	sp, #24
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	607a      	str	r2, [r7, #4]
 800a6a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a6ae:	7afb      	ldrb	r3, [r7, #11]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d16e      	bne.n	800a792 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a6ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a6c2:	2b03      	cmp	r3, #3
 800a6c4:	f040 8098 	bne.w	800a7f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	689a      	ldr	r2, [r3, #8]
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d913      	bls.n	800a6fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a6d4:	693b      	ldr	r3, [r7, #16]
 800a6d6:	689a      	ldr	r2, [r3, #8]
 800a6d8:	693b      	ldr	r3, [r7, #16]
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	1ad2      	subs	r2, r2, r3
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	68da      	ldr	r2, [r3, #12]
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	bf28      	it	cs
 800a6ee:	4613      	movcs	r3, r2
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	6879      	ldr	r1, [r7, #4]
 800a6f4:	68f8      	ldr	r0, [r7, #12]
 800a6f6:	f001 f994 	bl	800ba22 <USBD_CtlContinueRx>
 800a6fa:	e07d      	b.n	800a7f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a702:	f003 031f 	and.w	r3, r3, #31
 800a706:	2b02      	cmp	r3, #2
 800a708:	d014      	beq.n	800a734 <USBD_LL_DataOutStage+0x98>
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d81d      	bhi.n	800a74a <USBD_LL_DataOutStage+0xae>
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d002      	beq.n	800a718 <USBD_LL_DataOutStage+0x7c>
 800a712:	2b01      	cmp	r3, #1
 800a714:	d003      	beq.n	800a71e <USBD_LL_DataOutStage+0x82>
 800a716:	e018      	b.n	800a74a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a718:	2300      	movs	r3, #0
 800a71a:	75bb      	strb	r3, [r7, #22]
            break;
 800a71c:	e018      	b.n	800a750 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a724:	b2db      	uxtb	r3, r3
 800a726:	4619      	mov	r1, r3
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f000 fa64 	bl	800abf6 <USBD_CoreFindIF>
 800a72e:	4603      	mov	r3, r0
 800a730:	75bb      	strb	r3, [r7, #22]
            break;
 800a732:	e00d      	b.n	800a750 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a73a:	b2db      	uxtb	r3, r3
 800a73c:	4619      	mov	r1, r3
 800a73e:	68f8      	ldr	r0, [r7, #12]
 800a740:	f000 fa66 	bl	800ac10 <USBD_CoreFindEP>
 800a744:	4603      	mov	r3, r0
 800a746:	75bb      	strb	r3, [r7, #22]
            break;
 800a748:	e002      	b.n	800a750 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a74a:	2300      	movs	r3, #0
 800a74c:	75bb      	strb	r3, [r7, #22]
            break;
 800a74e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a750:	7dbb      	ldrb	r3, [r7, #22]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d119      	bne.n	800a78a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	2b03      	cmp	r3, #3
 800a760:	d113      	bne.n	800a78a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a762:	7dba      	ldrb	r2, [r7, #22]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	32ae      	adds	r2, #174	@ 0xae
 800a768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00b      	beq.n	800a78a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a772:	7dba      	ldrb	r2, [r7, #22]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a77a:	7dba      	ldrb	r2, [r7, #22]
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	32ae      	adds	r2, #174	@ 0xae
 800a780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a784:	691b      	ldr	r3, [r3, #16]
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a78a:	68f8      	ldr	r0, [r7, #12]
 800a78c:	f001 f95a 	bl	800ba44 <USBD_CtlSendStatus>
 800a790:	e032      	b.n	800a7f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a792:	7afb      	ldrb	r3, [r7, #11]
 800a794:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	4619      	mov	r1, r3
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f000 fa37 	bl	800ac10 <USBD_CoreFindEP>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7a6:	7dbb      	ldrb	r3, [r7, #22]
 800a7a8:	2bff      	cmp	r3, #255	@ 0xff
 800a7aa:	d025      	beq.n	800a7f8 <USBD_LL_DataOutStage+0x15c>
 800a7ac:	7dbb      	ldrb	r3, [r7, #22]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d122      	bne.n	800a7f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	2b03      	cmp	r3, #3
 800a7bc:	d117      	bne.n	800a7ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a7be:	7dba      	ldrb	r2, [r7, #22]
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	32ae      	adds	r2, #174	@ 0xae
 800a7c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c8:	699b      	ldr	r3, [r3, #24]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00f      	beq.n	800a7ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a7ce:	7dba      	ldrb	r2, [r7, #22]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a7d6:	7dba      	ldrb	r2, [r7, #22]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	32ae      	adds	r2, #174	@ 0xae
 800a7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7e0:	699b      	ldr	r3, [r3, #24]
 800a7e2:	7afa      	ldrb	r2, [r7, #11]
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	68f8      	ldr	r0, [r7, #12]
 800a7e8:	4798      	blx	r3
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a7ee:	7dfb      	ldrb	r3, [r7, #23]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d001      	beq.n	800a7f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a7f4:	7dfb      	ldrb	r3, [r7, #23]
 800a7f6:	e000      	b.n	800a7fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3718      	adds	r7, #24
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b086      	sub	sp, #24
 800a806:	af00      	add	r7, sp, #0
 800a808:	60f8      	str	r0, [r7, #12]
 800a80a:	460b      	mov	r3, r1
 800a80c:	607a      	str	r2, [r7, #4]
 800a80e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a810:	7afb      	ldrb	r3, [r7, #11]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d16f      	bne.n	800a8f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	3314      	adds	r3, #20
 800a81a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a822:	2b02      	cmp	r3, #2
 800a824:	d15a      	bne.n	800a8dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	689a      	ldr	r2, [r3, #8]
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d914      	bls.n	800a85c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	689a      	ldr	r2, [r3, #8]
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	68db      	ldr	r3, [r3, #12]
 800a83a:	1ad2      	subs	r2, r2, r3
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	461a      	mov	r2, r3
 800a846:	6879      	ldr	r1, [r7, #4]
 800a848:	68f8      	ldr	r0, [r7, #12]
 800a84a:	f001 f8bc 	bl	800b9c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a84e:	2300      	movs	r3, #0
 800a850:	2200      	movs	r2, #0
 800a852:	2100      	movs	r1, #0
 800a854:	68f8      	ldr	r0, [r7, #12]
 800a856:	f001 fdaf 	bl	800c3b8 <USBD_LL_PrepareReceive>
 800a85a:	e03f      	b.n	800a8dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	68da      	ldr	r2, [r3, #12]
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	689b      	ldr	r3, [r3, #8]
 800a864:	429a      	cmp	r2, r3
 800a866:	d11c      	bne.n	800a8a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	685a      	ldr	r2, [r3, #4]
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a870:	429a      	cmp	r2, r3
 800a872:	d316      	bcc.n	800a8a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	685a      	ldr	r2, [r3, #4]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a87e:	429a      	cmp	r2, r3
 800a880:	d20f      	bcs.n	800a8a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a882:	2200      	movs	r2, #0
 800a884:	2100      	movs	r1, #0
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	f001 f89d 	bl	800b9c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2200      	movs	r2, #0
 800a890:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a894:	2300      	movs	r3, #0
 800a896:	2200      	movs	r2, #0
 800a898:	2100      	movs	r1, #0
 800a89a:	68f8      	ldr	r0, [r7, #12]
 800a89c:	f001 fd8c 	bl	800c3b8 <USBD_LL_PrepareReceive>
 800a8a0:	e01c      	b.n	800a8dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	2b03      	cmp	r3, #3
 800a8ac:	d10f      	bne.n	800a8ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d009      	beq.n	800a8ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8c8:	68db      	ldr	r3, [r3, #12]
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8ce:	2180      	movs	r1, #128	@ 0x80
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f001 fcc7 	bl	800c264 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f001 f8c7 	bl	800ba6a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d03a      	beq.n	800a95c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	f7ff fe42 	bl	800a570 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a8f4:	e032      	b.n	800a95c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a8f6:	7afb      	ldrb	r3, [r7, #11]
 800a8f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	4619      	mov	r1, r3
 800a900:	68f8      	ldr	r0, [r7, #12]
 800a902:	f000 f985 	bl	800ac10 <USBD_CoreFindEP>
 800a906:	4603      	mov	r3, r0
 800a908:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a90a:	7dfb      	ldrb	r3, [r7, #23]
 800a90c:	2bff      	cmp	r3, #255	@ 0xff
 800a90e:	d025      	beq.n	800a95c <USBD_LL_DataInStage+0x15a>
 800a910:	7dfb      	ldrb	r3, [r7, #23]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d122      	bne.n	800a95c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a91c:	b2db      	uxtb	r3, r3
 800a91e:	2b03      	cmp	r3, #3
 800a920:	d11c      	bne.n	800a95c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a922:	7dfa      	ldrb	r2, [r7, #23]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	32ae      	adds	r2, #174	@ 0xae
 800a928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a92c:	695b      	ldr	r3, [r3, #20]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d014      	beq.n	800a95c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a932:	7dfa      	ldrb	r2, [r7, #23]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a93a:	7dfa      	ldrb	r2, [r7, #23]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	32ae      	adds	r2, #174	@ 0xae
 800a940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a944:	695b      	ldr	r3, [r3, #20]
 800a946:	7afa      	ldrb	r2, [r7, #11]
 800a948:	4611      	mov	r1, r2
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	4798      	blx	r3
 800a94e:	4603      	mov	r3, r0
 800a950:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a952:	7dbb      	ldrb	r3, [r7, #22]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d001      	beq.n	800a95c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a958:	7dbb      	ldrb	r3, [r7, #22]
 800a95a:	e000      	b.n	800a95e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a95c:	2300      	movs	r3, #0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3718      	adds	r7, #24
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b084      	sub	sp, #16
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a96e:	2300      	movs	r3, #0
 800a970:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2201      	movs	r2, #1
 800a976:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d014      	beq.n	800a9cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00e      	beq.n	800a9cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	6852      	ldr	r2, [r2, #4]
 800a9ba:	b2d2      	uxtb	r2, r2
 800a9bc:	4611      	mov	r1, r2
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	4798      	blx	r3
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d001      	beq.n	800a9cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a9c8:	2303      	movs	r3, #3
 800a9ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9cc:	2340      	movs	r3, #64	@ 0x40
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f001 fc01 	bl	800c1da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2201      	movs	r2, #1
 800a9dc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2240      	movs	r2, #64	@ 0x40
 800a9e4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9e8:	2340      	movs	r3, #64	@ 0x40
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	2180      	movs	r1, #128	@ 0x80
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f001 fbf3 	bl	800c1da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2240      	movs	r2, #64	@ 0x40
 800a9fe:	621a      	str	r2, [r3, #32]

  return ret;
 800aa00:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3710      	adds	r7, #16
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aa0a:	b480      	push	{r7}
 800aa0c:	b083      	sub	sp, #12
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
 800aa12:	460b      	mov	r3, r1
 800aa14:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	78fa      	ldrb	r2, [r7, #3]
 800aa1a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	370c      	adds	r7, #12
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr

0800aa2a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aa2a:	b480      	push	{r7}
 800aa2c:	b083      	sub	sp, #12
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	2b04      	cmp	r3, #4
 800aa3c:	d006      	beq.n	800aa4c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa44:	b2da      	uxtb	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2204      	movs	r2, #4
 800aa50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	370c      	adds	r7, #12
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr

0800aa62 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa62:	b480      	push	{r7}
 800aa64:	b083      	sub	sp, #12
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	2b04      	cmp	r3, #4
 800aa74:	d106      	bne.n	800aa84 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800aa7c:	b2da      	uxtb	r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	370c      	adds	r7, #12
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr

0800aa92 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b082      	sub	sp, #8
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	d110      	bne.n	800aac8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00b      	beq.n	800aac8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aab6:	69db      	ldr	r3, [r3, #28]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d005      	beq.n	800aac8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aac2:	69db      	ldr	r3, [r3, #28]
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}

0800aad2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aad2:	b580      	push	{r7, lr}
 800aad4:	b082      	sub	sp, #8
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	460b      	mov	r3, r1
 800aadc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	32ae      	adds	r2, #174	@ 0xae
 800aae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d101      	bne.n	800aaf4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800aaf0:	2303      	movs	r3, #3
 800aaf2:	e01c      	b.n	800ab2e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	2b03      	cmp	r3, #3
 800aafe:	d115      	bne.n	800ab2c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	32ae      	adds	r2, #174	@ 0xae
 800ab0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab0e:	6a1b      	ldr	r3, [r3, #32]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00b      	beq.n	800ab2c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	32ae      	adds	r2, #174	@ 0xae
 800ab1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab22:	6a1b      	ldr	r3, [r3, #32]
 800ab24:	78fa      	ldrb	r2, [r7, #3]
 800ab26:	4611      	mov	r1, r2
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab2c:	2300      	movs	r3, #0
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3708      	adds	r7, #8
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b082      	sub	sp, #8
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
 800ab3e:	460b      	mov	r3, r1
 800ab40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	32ae      	adds	r2, #174	@ 0xae
 800ab4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d101      	bne.n	800ab58 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab54:	2303      	movs	r3, #3
 800ab56:	e01c      	b.n	800ab92 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	2b03      	cmp	r3, #3
 800ab62:	d115      	bne.n	800ab90 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	32ae      	adds	r2, #174	@ 0xae
 800ab6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d00b      	beq.n	800ab90 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	32ae      	adds	r2, #174	@ 0xae
 800ab82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab88:	78fa      	ldrb	r2, [r7, #3]
 800ab8a:	4611      	mov	r1, r2
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab90:	2300      	movs	r3, #0
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b083      	sub	sp, #12
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aba2:	2300      	movs	r3, #0
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	370c      	adds	r7, #12
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800abb8:	2300      	movs	r3, #0
 800abba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00e      	beq.n	800abec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	6852      	ldr	r2, [r2, #4]
 800abda:	b2d2      	uxtb	r2, r2
 800abdc:	4611      	mov	r1, r2
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	4798      	blx	r3
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d001      	beq.n	800abec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800abe8:	2303      	movs	r3, #3
 800abea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800abec:	7bfb      	ldrb	r3, [r7, #15]
}
 800abee:	4618      	mov	r0, r3
 800abf0:	3710      	adds	r7, #16
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800abf6:	b480      	push	{r7}
 800abf8:	b083      	sub	sp, #12
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
 800abfe:	460b      	mov	r3, r1
 800ac00:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac02:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	370c      	adds	r7, #12
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	460b      	mov	r3, r1
 800ac1a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac1c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	370c      	adds	r7, #12
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr

0800ac2a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ac2a:	b580      	push	{r7, lr}
 800ac2c:	b086      	sub	sp, #24
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	460b      	mov	r3, r1
 800ac34:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	885b      	ldrh	r3, [r3, #2]
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	7812      	ldrb	r2, [r2, #0]
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d91f      	bls.n	800ac90 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ac56:	e013      	b.n	800ac80 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ac58:	f107 030a 	add.w	r3, r7, #10
 800ac5c:	4619      	mov	r1, r3
 800ac5e:	6978      	ldr	r0, [r7, #20]
 800ac60:	f000 f81b 	bl	800ac9a <USBD_GetNextDesc>
 800ac64:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	785b      	ldrb	r3, [r3, #1]
 800ac6a:	2b05      	cmp	r3, #5
 800ac6c:	d108      	bne.n	800ac80 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	789b      	ldrb	r3, [r3, #2]
 800ac76:	78fa      	ldrb	r2, [r7, #3]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d008      	beq.n	800ac8e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	885b      	ldrh	r3, [r3, #2]
 800ac84:	b29a      	uxth	r2, r3
 800ac86:	897b      	ldrh	r3, [r7, #10]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d8e5      	bhi.n	800ac58 <USBD_GetEpDesc+0x2e>
 800ac8c:	e000      	b.n	800ac90 <USBD_GetEpDesc+0x66>
          break;
 800ac8e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ac90:	693b      	ldr	r3, [r7, #16]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3718      	adds	r7, #24
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ac9a:	b480      	push	{r7}
 800ac9c:	b085      	sub	sp, #20
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
 800aca2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	881b      	ldrh	r3, [r3, #0]
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	7812      	ldrb	r2, [r2, #0]
 800acb0:	4413      	add	r3, r2
 800acb2:	b29a      	uxth	r2, r3
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	781b      	ldrb	r3, [r3, #0]
 800acbc:	461a      	mov	r2, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4413      	add	r3, r2
 800acc2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800acc4:	68fb      	ldr	r3, [r7, #12]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3714      	adds	r7, #20
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr

0800acd2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800acd2:	b480      	push	{r7}
 800acd4:	b087      	sub	sp, #28
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	3301      	adds	r3, #1
 800ace8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800acf0:	8a3b      	ldrh	r3, [r7, #16]
 800acf2:	021b      	lsls	r3, r3, #8
 800acf4:	b21a      	sxth	r2, r3
 800acf6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800acfa:	4313      	orrs	r3, r2
 800acfc:	b21b      	sxth	r3, r3
 800acfe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ad00:	89fb      	ldrh	r3, [r7, #14]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	371c      	adds	r7, #28
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
	...

0800ad10 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad26:	2b40      	cmp	r3, #64	@ 0x40
 800ad28:	d005      	beq.n	800ad36 <USBD_StdDevReq+0x26>
 800ad2a:	2b40      	cmp	r3, #64	@ 0x40
 800ad2c:	d857      	bhi.n	800adde <USBD_StdDevReq+0xce>
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d00f      	beq.n	800ad52 <USBD_StdDevReq+0x42>
 800ad32:	2b20      	cmp	r3, #32
 800ad34:	d153      	bne.n	800adde <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	32ae      	adds	r2, #174	@ 0xae
 800ad40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	6839      	ldr	r1, [r7, #0]
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	4798      	blx	r3
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	73fb      	strb	r3, [r7, #15]
      break;
 800ad50:	e04a      	b.n	800ade8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	785b      	ldrb	r3, [r3, #1]
 800ad56:	2b09      	cmp	r3, #9
 800ad58:	d83b      	bhi.n	800add2 <USBD_StdDevReq+0xc2>
 800ad5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad60 <USBD_StdDevReq+0x50>)
 800ad5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad60:	0800adb5 	.word	0x0800adb5
 800ad64:	0800adc9 	.word	0x0800adc9
 800ad68:	0800add3 	.word	0x0800add3
 800ad6c:	0800adbf 	.word	0x0800adbf
 800ad70:	0800add3 	.word	0x0800add3
 800ad74:	0800ad93 	.word	0x0800ad93
 800ad78:	0800ad89 	.word	0x0800ad89
 800ad7c:	0800add3 	.word	0x0800add3
 800ad80:	0800adab 	.word	0x0800adab
 800ad84:	0800ad9d 	.word	0x0800ad9d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad88:	6839      	ldr	r1, [r7, #0]
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 fa3c 	bl	800b208 <USBD_GetDescriptor>
          break;
 800ad90:	e024      	b.n	800addc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad92:	6839      	ldr	r1, [r7, #0]
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f000 fba1 	bl	800b4dc <USBD_SetAddress>
          break;
 800ad9a:	e01f      	b.n	800addc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ad9c:	6839      	ldr	r1, [r7, #0]
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 fbe0 	bl	800b564 <USBD_SetConfig>
 800ada4:	4603      	mov	r3, r0
 800ada6:	73fb      	strb	r3, [r7, #15]
          break;
 800ada8:	e018      	b.n	800addc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800adaa:	6839      	ldr	r1, [r7, #0]
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 fc83 	bl	800b6b8 <USBD_GetConfig>
          break;
 800adb2:	e013      	b.n	800addc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800adb4:	6839      	ldr	r1, [r7, #0]
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 fcb4 	bl	800b724 <USBD_GetStatus>
          break;
 800adbc:	e00e      	b.n	800addc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800adbe:	6839      	ldr	r1, [r7, #0]
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f000 fce3 	bl	800b78c <USBD_SetFeature>
          break;
 800adc6:	e009      	b.n	800addc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800adc8:	6839      	ldr	r1, [r7, #0]
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 fd07 	bl	800b7de <USBD_ClrFeature>
          break;
 800add0:	e004      	b.n	800addc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 fd5e 	bl	800b896 <USBD_CtlError>
          break;
 800adda:	bf00      	nop
      }
      break;
 800addc:	e004      	b.n	800ade8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800adde:	6839      	ldr	r1, [r7, #0]
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fd58 	bl	800b896 <USBD_CtlError>
      break;
 800ade6:	bf00      	nop
  }

  return ret;
 800ade8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adea:	4618      	mov	r0, r3
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop

0800adf4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adfe:	2300      	movs	r3, #0
 800ae00:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae0a:	2b40      	cmp	r3, #64	@ 0x40
 800ae0c:	d005      	beq.n	800ae1a <USBD_StdItfReq+0x26>
 800ae0e:	2b40      	cmp	r3, #64	@ 0x40
 800ae10:	d852      	bhi.n	800aeb8 <USBD_StdItfReq+0xc4>
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d001      	beq.n	800ae1a <USBD_StdItfReq+0x26>
 800ae16:	2b20      	cmp	r3, #32
 800ae18:	d14e      	bne.n	800aeb8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	3b01      	subs	r3, #1
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	d840      	bhi.n	800aeaa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	889b      	ldrh	r3, [r3, #4]
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d836      	bhi.n	800aea0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	889b      	ldrh	r3, [r3, #4]
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	4619      	mov	r1, r3
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f7ff fedb 	bl	800abf6 <USBD_CoreFindIF>
 800ae40:	4603      	mov	r3, r0
 800ae42:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae44:	7bbb      	ldrb	r3, [r7, #14]
 800ae46:	2bff      	cmp	r3, #255	@ 0xff
 800ae48:	d01d      	beq.n	800ae86 <USBD_StdItfReq+0x92>
 800ae4a:	7bbb      	ldrb	r3, [r7, #14]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d11a      	bne.n	800ae86 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ae50:	7bba      	ldrb	r2, [r7, #14]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	32ae      	adds	r2, #174	@ 0xae
 800ae56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d00f      	beq.n	800ae80 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ae60:	7bba      	ldrb	r2, [r7, #14]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae68:	7bba      	ldrb	r2, [r7, #14]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	32ae      	adds	r2, #174	@ 0xae
 800ae6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	6839      	ldr	r1, [r7, #0]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	4798      	blx	r3
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae7e:	e004      	b.n	800ae8a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ae80:	2303      	movs	r3, #3
 800ae82:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ae84:	e001      	b.n	800ae8a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ae86:	2303      	movs	r3, #3
 800ae88:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ae8a:	683b      	ldr	r3, [r7, #0]
 800ae8c:	88db      	ldrh	r3, [r3, #6]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d110      	bne.n	800aeb4 <USBD_StdItfReq+0xc0>
 800ae92:	7bfb      	ldrb	r3, [r7, #15]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d10d      	bne.n	800aeb4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 fdd3 	bl	800ba44 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae9e:	e009      	b.n	800aeb4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800aea0:	6839      	ldr	r1, [r7, #0]
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f000 fcf7 	bl	800b896 <USBD_CtlError>
          break;
 800aea8:	e004      	b.n	800aeb4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800aeaa:	6839      	ldr	r1, [r7, #0]
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 fcf2 	bl	800b896 <USBD_CtlError>
          break;
 800aeb2:	e000      	b.n	800aeb6 <USBD_StdItfReq+0xc2>
          break;
 800aeb4:	bf00      	nop
      }
      break;
 800aeb6:	e004      	b.n	800aec2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aeb8:	6839      	ldr	r1, [r7, #0]
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 fceb 	bl	800b896 <USBD_CtlError>
      break;
 800aec0:	bf00      	nop
  }

  return ret;
 800aec2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	889b      	ldrh	r3, [r3, #4]
 800aede:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aee8:	2b40      	cmp	r3, #64	@ 0x40
 800aeea:	d007      	beq.n	800aefc <USBD_StdEPReq+0x30>
 800aeec:	2b40      	cmp	r3, #64	@ 0x40
 800aeee:	f200 817f 	bhi.w	800b1f0 <USBD_StdEPReq+0x324>
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d02a      	beq.n	800af4c <USBD_StdEPReq+0x80>
 800aef6:	2b20      	cmp	r3, #32
 800aef8:	f040 817a 	bne.w	800b1f0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800aefc:	7bbb      	ldrb	r3, [r7, #14]
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7ff fe85 	bl	800ac10 <USBD_CoreFindEP>
 800af06:	4603      	mov	r3, r0
 800af08:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af0a:	7b7b      	ldrb	r3, [r7, #13]
 800af0c:	2bff      	cmp	r3, #255	@ 0xff
 800af0e:	f000 8174 	beq.w	800b1fa <USBD_StdEPReq+0x32e>
 800af12:	7b7b      	ldrb	r3, [r7, #13]
 800af14:	2b00      	cmp	r3, #0
 800af16:	f040 8170 	bne.w	800b1fa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800af1a:	7b7a      	ldrb	r2, [r7, #13]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800af22:	7b7a      	ldrb	r2, [r7, #13]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	32ae      	adds	r2, #174	@ 0xae
 800af28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f000 8163 	beq.w	800b1fa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800af34:	7b7a      	ldrb	r2, [r7, #13]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	32ae      	adds	r2, #174	@ 0xae
 800af3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	6839      	ldr	r1, [r7, #0]
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	4798      	blx	r3
 800af46:	4603      	mov	r3, r0
 800af48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800af4a:	e156      	b.n	800b1fa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	785b      	ldrb	r3, [r3, #1]
 800af50:	2b03      	cmp	r3, #3
 800af52:	d008      	beq.n	800af66 <USBD_StdEPReq+0x9a>
 800af54:	2b03      	cmp	r3, #3
 800af56:	f300 8145 	bgt.w	800b1e4 <USBD_StdEPReq+0x318>
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	f000 809b 	beq.w	800b096 <USBD_StdEPReq+0x1ca>
 800af60:	2b01      	cmp	r3, #1
 800af62:	d03c      	beq.n	800afde <USBD_StdEPReq+0x112>
 800af64:	e13e      	b.n	800b1e4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	2b02      	cmp	r3, #2
 800af70:	d002      	beq.n	800af78 <USBD_StdEPReq+0xac>
 800af72:	2b03      	cmp	r3, #3
 800af74:	d016      	beq.n	800afa4 <USBD_StdEPReq+0xd8>
 800af76:	e02c      	b.n	800afd2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af78:	7bbb      	ldrb	r3, [r7, #14]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00d      	beq.n	800af9a <USBD_StdEPReq+0xce>
 800af7e:	7bbb      	ldrb	r3, [r7, #14]
 800af80:	2b80      	cmp	r3, #128	@ 0x80
 800af82:	d00a      	beq.n	800af9a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af84:	7bbb      	ldrb	r3, [r7, #14]
 800af86:	4619      	mov	r1, r3
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f001 f96b 	bl	800c264 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af8e:	2180      	movs	r1, #128	@ 0x80
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f001 f967 	bl	800c264 <USBD_LL_StallEP>
 800af96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af98:	e020      	b.n	800afdc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800af9a:	6839      	ldr	r1, [r7, #0]
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 fc7a 	bl	800b896 <USBD_CtlError>
              break;
 800afa2:	e01b      	b.n	800afdc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	885b      	ldrh	r3, [r3, #2]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d10e      	bne.n	800afca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800afac:	7bbb      	ldrb	r3, [r7, #14]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00b      	beq.n	800afca <USBD_StdEPReq+0xfe>
 800afb2:	7bbb      	ldrb	r3, [r7, #14]
 800afb4:	2b80      	cmp	r3, #128	@ 0x80
 800afb6:	d008      	beq.n	800afca <USBD_StdEPReq+0xfe>
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	88db      	ldrh	r3, [r3, #6]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d104      	bne.n	800afca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800afc0:	7bbb      	ldrb	r3, [r7, #14]
 800afc2:	4619      	mov	r1, r3
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f001 f94d 	bl	800c264 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f000 fd3a 	bl	800ba44 <USBD_CtlSendStatus>

              break;
 800afd0:	e004      	b.n	800afdc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800afd2:	6839      	ldr	r1, [r7, #0]
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 fc5e 	bl	800b896 <USBD_CtlError>
              break;
 800afda:	bf00      	nop
          }
          break;
 800afdc:	e107      	b.n	800b1ee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	d002      	beq.n	800aff0 <USBD_StdEPReq+0x124>
 800afea:	2b03      	cmp	r3, #3
 800afec:	d016      	beq.n	800b01c <USBD_StdEPReq+0x150>
 800afee:	e04b      	b.n	800b088 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aff0:	7bbb      	ldrb	r3, [r7, #14]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d00d      	beq.n	800b012 <USBD_StdEPReq+0x146>
 800aff6:	7bbb      	ldrb	r3, [r7, #14]
 800aff8:	2b80      	cmp	r3, #128	@ 0x80
 800affa:	d00a      	beq.n	800b012 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800affc:	7bbb      	ldrb	r3, [r7, #14]
 800affe:	4619      	mov	r1, r3
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f001 f92f 	bl	800c264 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b006:	2180      	movs	r1, #128	@ 0x80
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f001 f92b 	bl	800c264 <USBD_LL_StallEP>
 800b00e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b010:	e040      	b.n	800b094 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b012:	6839      	ldr	r1, [r7, #0]
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 fc3e 	bl	800b896 <USBD_CtlError>
              break;
 800b01a:	e03b      	b.n	800b094 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	885b      	ldrh	r3, [r3, #2]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d136      	bne.n	800b092 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b024:	7bbb      	ldrb	r3, [r7, #14]
 800b026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d004      	beq.n	800b038 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b02e:	7bbb      	ldrb	r3, [r7, #14]
 800b030:	4619      	mov	r1, r3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f001 f935 	bl	800c2a2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 fd03 	bl	800ba44 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b03e:	7bbb      	ldrb	r3, [r7, #14]
 800b040:	4619      	mov	r1, r3
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f7ff fde4 	bl	800ac10 <USBD_CoreFindEP>
 800b048:	4603      	mov	r3, r0
 800b04a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b04c:	7b7b      	ldrb	r3, [r7, #13]
 800b04e:	2bff      	cmp	r3, #255	@ 0xff
 800b050:	d01f      	beq.n	800b092 <USBD_StdEPReq+0x1c6>
 800b052:	7b7b      	ldrb	r3, [r7, #13]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d11c      	bne.n	800b092 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b058:	7b7a      	ldrb	r2, [r7, #13]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b060:	7b7a      	ldrb	r2, [r7, #13]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	32ae      	adds	r2, #174	@ 0xae
 800b066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d010      	beq.n	800b092 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b070:	7b7a      	ldrb	r2, [r7, #13]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	32ae      	adds	r2, #174	@ 0xae
 800b076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b07a:	689b      	ldr	r3, [r3, #8]
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	4798      	blx	r3
 800b082:	4603      	mov	r3, r0
 800b084:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b086:	e004      	b.n	800b092 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b088:	6839      	ldr	r1, [r7, #0]
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 fc03 	bl	800b896 <USBD_CtlError>
              break;
 800b090:	e000      	b.n	800b094 <USBD_StdEPReq+0x1c8>
              break;
 800b092:	bf00      	nop
          }
          break;
 800b094:	e0ab      	b.n	800b1ee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d002      	beq.n	800b0a8 <USBD_StdEPReq+0x1dc>
 800b0a2:	2b03      	cmp	r3, #3
 800b0a4:	d032      	beq.n	800b10c <USBD_StdEPReq+0x240>
 800b0a6:	e097      	b.n	800b1d8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0a8:	7bbb      	ldrb	r3, [r7, #14]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d007      	beq.n	800b0be <USBD_StdEPReq+0x1f2>
 800b0ae:	7bbb      	ldrb	r3, [r7, #14]
 800b0b0:	2b80      	cmp	r3, #128	@ 0x80
 800b0b2:	d004      	beq.n	800b0be <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b0b4:	6839      	ldr	r1, [r7, #0]
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 fbed 	bl	800b896 <USBD_CtlError>
                break;
 800b0bc:	e091      	b.n	800b1e2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	da0b      	bge.n	800b0de <USBD_StdEPReq+0x212>
 800b0c6:	7bbb      	ldrb	r3, [r7, #14]
 800b0c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0cc:	4613      	mov	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	4413      	add	r3, r2
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	3310      	adds	r3, #16
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	4413      	add	r3, r2
 800b0da:	3304      	adds	r3, #4
 800b0dc:	e00b      	b.n	800b0f6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b0de:	7bbb      	ldrb	r3, [r7, #14]
 800b0e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	4413      	add	r3, r2
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	3304      	adds	r3, #4
 800b0f6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	2202      	movs	r2, #2
 800b102:	4619      	mov	r1, r3
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 fc43 	bl	800b990 <USBD_CtlSendData>
              break;
 800b10a:	e06a      	b.n	800b1e2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b10c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b110:	2b00      	cmp	r3, #0
 800b112:	da11      	bge.n	800b138 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b114:	7bbb      	ldrb	r3, [r7, #14]
 800b116:	f003 020f 	and.w	r2, r3, #15
 800b11a:	6879      	ldr	r1, [r7, #4]
 800b11c:	4613      	mov	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4413      	add	r3, r2
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	440b      	add	r3, r1
 800b126:	3324      	adds	r3, #36	@ 0x24
 800b128:	881b      	ldrh	r3, [r3, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d117      	bne.n	800b15e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b12e:	6839      	ldr	r1, [r7, #0]
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 fbb0 	bl	800b896 <USBD_CtlError>
                  break;
 800b136:	e054      	b.n	800b1e2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b138:	7bbb      	ldrb	r3, [r7, #14]
 800b13a:	f003 020f 	and.w	r2, r3, #15
 800b13e:	6879      	ldr	r1, [r7, #4]
 800b140:	4613      	mov	r3, r2
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	4413      	add	r3, r2
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	440b      	add	r3, r1
 800b14a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b14e:	881b      	ldrh	r3, [r3, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d104      	bne.n	800b15e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b154:	6839      	ldr	r1, [r7, #0]
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 fb9d 	bl	800b896 <USBD_CtlError>
                  break;
 800b15c:	e041      	b.n	800b1e2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b15e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b162:	2b00      	cmp	r3, #0
 800b164:	da0b      	bge.n	800b17e <USBD_StdEPReq+0x2b2>
 800b166:	7bbb      	ldrb	r3, [r7, #14]
 800b168:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b16c:	4613      	mov	r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	4413      	add	r3, r2
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	3310      	adds	r3, #16
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	4413      	add	r3, r2
 800b17a:	3304      	adds	r3, #4
 800b17c:	e00b      	b.n	800b196 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b17e:	7bbb      	ldrb	r3, [r7, #14]
 800b180:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b184:	4613      	mov	r3, r2
 800b186:	009b      	lsls	r3, r3, #2
 800b188:	4413      	add	r3, r2
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	4413      	add	r3, r2
 800b194:	3304      	adds	r3, #4
 800b196:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b198:	7bbb      	ldrb	r3, [r7, #14]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d002      	beq.n	800b1a4 <USBD_StdEPReq+0x2d8>
 800b19e:	7bbb      	ldrb	r3, [r7, #14]
 800b1a0:	2b80      	cmp	r3, #128	@ 0x80
 800b1a2:	d103      	bne.n	800b1ac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	601a      	str	r2, [r3, #0]
 800b1aa:	e00e      	b.n	800b1ca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b1ac:	7bbb      	ldrb	r3, [r7, #14]
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f001 f895 	bl	800c2e0 <USBD_LL_IsStallEP>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d003      	beq.n	800b1c4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	601a      	str	r2, [r3, #0]
 800b1c2:	e002      	b.n	800b1ca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	2202      	movs	r2, #2
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 fbdd 	bl	800b990 <USBD_CtlSendData>
              break;
 800b1d6:	e004      	b.n	800b1e2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b1d8:	6839      	ldr	r1, [r7, #0]
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 fb5b 	bl	800b896 <USBD_CtlError>
              break;
 800b1e0:	bf00      	nop
          }
          break;
 800b1e2:	e004      	b.n	800b1ee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b1e4:	6839      	ldr	r1, [r7, #0]
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 fb55 	bl	800b896 <USBD_CtlError>
          break;
 800b1ec:	bf00      	nop
      }
      break;
 800b1ee:	e005      	b.n	800b1fc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b1f0:	6839      	ldr	r1, [r7, #0]
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 fb4f 	bl	800b896 <USBD_CtlError>
      break;
 800b1f8:	e000      	b.n	800b1fc <USBD_StdEPReq+0x330>
      break;
 800b1fa:	bf00      	nop
  }

  return ret;
 800b1fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
	...

0800b208 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b212:	2300      	movs	r3, #0
 800b214:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b216:	2300      	movs	r3, #0
 800b218:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b21a:	2300      	movs	r3, #0
 800b21c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	885b      	ldrh	r3, [r3, #2]
 800b222:	0a1b      	lsrs	r3, r3, #8
 800b224:	b29b      	uxth	r3, r3
 800b226:	3b01      	subs	r3, #1
 800b228:	2b06      	cmp	r3, #6
 800b22a:	f200 8128 	bhi.w	800b47e <USBD_GetDescriptor+0x276>
 800b22e:	a201      	add	r2, pc, #4	@ (adr r2, 800b234 <USBD_GetDescriptor+0x2c>)
 800b230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b234:	0800b251 	.word	0x0800b251
 800b238:	0800b269 	.word	0x0800b269
 800b23c:	0800b2a9 	.word	0x0800b2a9
 800b240:	0800b47f 	.word	0x0800b47f
 800b244:	0800b47f 	.word	0x0800b47f
 800b248:	0800b41f 	.word	0x0800b41f
 800b24c:	0800b44b 	.word	0x0800b44b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	7c12      	ldrb	r2, [r2, #16]
 800b25c:	f107 0108 	add.w	r1, r7, #8
 800b260:	4610      	mov	r0, r2
 800b262:	4798      	blx	r3
 800b264:	60f8      	str	r0, [r7, #12]
      break;
 800b266:	e112      	b.n	800b48e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	7c1b      	ldrb	r3, [r3, #16]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d10d      	bne.n	800b28c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b278:	f107 0208 	add.w	r2, r7, #8
 800b27c:	4610      	mov	r0, r2
 800b27e:	4798      	blx	r3
 800b280:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	3301      	adds	r3, #1
 800b286:	2202      	movs	r2, #2
 800b288:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b28a:	e100      	b.n	800b48e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b294:	f107 0208 	add.w	r2, r7, #8
 800b298:	4610      	mov	r0, r2
 800b29a:	4798      	blx	r3
 800b29c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	2202      	movs	r2, #2
 800b2a4:	701a      	strb	r2, [r3, #0]
      break;
 800b2a6:	e0f2      	b.n	800b48e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	885b      	ldrh	r3, [r3, #2]
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	2b05      	cmp	r3, #5
 800b2b0:	f200 80ac 	bhi.w	800b40c <USBD_GetDescriptor+0x204>
 800b2b4:	a201      	add	r2, pc, #4	@ (adr r2, 800b2bc <USBD_GetDescriptor+0xb4>)
 800b2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ba:	bf00      	nop
 800b2bc:	0800b2d5 	.word	0x0800b2d5
 800b2c0:	0800b309 	.word	0x0800b309
 800b2c4:	0800b33d 	.word	0x0800b33d
 800b2c8:	0800b371 	.word	0x0800b371
 800b2cc:	0800b3a5 	.word	0x0800b3a5
 800b2d0:	0800b3d9 	.word	0x0800b3d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00b      	beq.n	800b2f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	7c12      	ldrb	r2, [r2, #16]
 800b2ec:	f107 0108 	add.w	r1, r7, #8
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	4798      	blx	r3
 800b2f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2f6:	e091      	b.n	800b41c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b2f8:	6839      	ldr	r1, [r7, #0]
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 facb 	bl	800b896 <USBD_CtlError>
            err++;
 800b300:	7afb      	ldrb	r3, [r7, #11]
 800b302:	3301      	adds	r3, #1
 800b304:	72fb      	strb	r3, [r7, #11]
          break;
 800b306:	e089      	b.n	800b41c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d00b      	beq.n	800b32c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	687a      	ldr	r2, [r7, #4]
 800b31e:	7c12      	ldrb	r2, [r2, #16]
 800b320:	f107 0108 	add.w	r1, r7, #8
 800b324:	4610      	mov	r0, r2
 800b326:	4798      	blx	r3
 800b328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b32a:	e077      	b.n	800b41c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b32c:	6839      	ldr	r1, [r7, #0]
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 fab1 	bl	800b896 <USBD_CtlError>
            err++;
 800b334:	7afb      	ldrb	r3, [r7, #11]
 800b336:	3301      	adds	r3, #1
 800b338:	72fb      	strb	r3, [r7, #11]
          break;
 800b33a:	e06f      	b.n	800b41c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b342:	68db      	ldr	r3, [r3, #12]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d00b      	beq.n	800b360 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	7c12      	ldrb	r2, [r2, #16]
 800b354:	f107 0108 	add.w	r1, r7, #8
 800b358:	4610      	mov	r0, r2
 800b35a:	4798      	blx	r3
 800b35c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b35e:	e05d      	b.n	800b41c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b360:	6839      	ldr	r1, [r7, #0]
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 fa97 	bl	800b896 <USBD_CtlError>
            err++;
 800b368:	7afb      	ldrb	r3, [r7, #11]
 800b36a:	3301      	adds	r3, #1
 800b36c:	72fb      	strb	r3, [r7, #11]
          break;
 800b36e:	e055      	b.n	800b41c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d00b      	beq.n	800b394 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b382:	691b      	ldr	r3, [r3, #16]
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	7c12      	ldrb	r2, [r2, #16]
 800b388:	f107 0108 	add.w	r1, r7, #8
 800b38c:	4610      	mov	r0, r2
 800b38e:	4798      	blx	r3
 800b390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b392:	e043      	b.n	800b41c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b394:	6839      	ldr	r1, [r7, #0]
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f000 fa7d 	bl	800b896 <USBD_CtlError>
            err++;
 800b39c:	7afb      	ldrb	r3, [r7, #11]
 800b39e:	3301      	adds	r3, #1
 800b3a0:	72fb      	strb	r3, [r7, #11]
          break;
 800b3a2:	e03b      	b.n	800b41c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3aa:	695b      	ldr	r3, [r3, #20]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d00b      	beq.n	800b3c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3b6:	695b      	ldr	r3, [r3, #20]
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	7c12      	ldrb	r2, [r2, #16]
 800b3bc:	f107 0108 	add.w	r1, r7, #8
 800b3c0:	4610      	mov	r0, r2
 800b3c2:	4798      	blx	r3
 800b3c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3c6:	e029      	b.n	800b41c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3c8:	6839      	ldr	r1, [r7, #0]
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 fa63 	bl	800b896 <USBD_CtlError>
            err++;
 800b3d0:	7afb      	ldrb	r3, [r7, #11]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	72fb      	strb	r3, [r7, #11]
          break;
 800b3d6:	e021      	b.n	800b41c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3de:	699b      	ldr	r3, [r3, #24]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d00b      	beq.n	800b3fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3ea:	699b      	ldr	r3, [r3, #24]
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	7c12      	ldrb	r2, [r2, #16]
 800b3f0:	f107 0108 	add.w	r1, r7, #8
 800b3f4:	4610      	mov	r0, r2
 800b3f6:	4798      	blx	r3
 800b3f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3fa:	e00f      	b.n	800b41c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b3fc:	6839      	ldr	r1, [r7, #0]
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 fa49 	bl	800b896 <USBD_CtlError>
            err++;
 800b404:	7afb      	ldrb	r3, [r7, #11]
 800b406:	3301      	adds	r3, #1
 800b408:	72fb      	strb	r3, [r7, #11]
          break;
 800b40a:	e007      	b.n	800b41c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b40c:	6839      	ldr	r1, [r7, #0]
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 fa41 	bl	800b896 <USBD_CtlError>
          err++;
 800b414:	7afb      	ldrb	r3, [r7, #11]
 800b416:	3301      	adds	r3, #1
 800b418:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b41a:	bf00      	nop
      }
      break;
 800b41c:	e037      	b.n	800b48e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	7c1b      	ldrb	r3, [r3, #16]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d109      	bne.n	800b43a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b42c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b42e:	f107 0208 	add.w	r2, r7, #8
 800b432:	4610      	mov	r0, r2
 800b434:	4798      	blx	r3
 800b436:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b438:	e029      	b.n	800b48e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b43a:	6839      	ldr	r1, [r7, #0]
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f000 fa2a 	bl	800b896 <USBD_CtlError>
        err++;
 800b442:	7afb      	ldrb	r3, [r7, #11]
 800b444:	3301      	adds	r3, #1
 800b446:	72fb      	strb	r3, [r7, #11]
      break;
 800b448:	e021      	b.n	800b48e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	7c1b      	ldrb	r3, [r3, #16]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d10d      	bne.n	800b46e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b45a:	f107 0208 	add.w	r2, r7, #8
 800b45e:	4610      	mov	r0, r2
 800b460:	4798      	blx	r3
 800b462:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	3301      	adds	r3, #1
 800b468:	2207      	movs	r2, #7
 800b46a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b46c:	e00f      	b.n	800b48e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b46e:	6839      	ldr	r1, [r7, #0]
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 fa10 	bl	800b896 <USBD_CtlError>
        err++;
 800b476:	7afb      	ldrb	r3, [r7, #11]
 800b478:	3301      	adds	r3, #1
 800b47a:	72fb      	strb	r3, [r7, #11]
      break;
 800b47c:	e007      	b.n	800b48e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b47e:	6839      	ldr	r1, [r7, #0]
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 fa08 	bl	800b896 <USBD_CtlError>
      err++;
 800b486:	7afb      	ldrb	r3, [r7, #11]
 800b488:	3301      	adds	r3, #1
 800b48a:	72fb      	strb	r3, [r7, #11]
      break;
 800b48c:	bf00      	nop
  }

  if (err != 0U)
 800b48e:	7afb      	ldrb	r3, [r7, #11]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d11e      	bne.n	800b4d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	88db      	ldrh	r3, [r3, #6]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d016      	beq.n	800b4ca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b49c:	893b      	ldrh	r3, [r7, #8]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d00e      	beq.n	800b4c0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	88da      	ldrh	r2, [r3, #6]
 800b4a6:	893b      	ldrh	r3, [r7, #8]
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	bf28      	it	cs
 800b4ac:	4613      	movcs	r3, r2
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b4b2:	893b      	ldrh	r3, [r7, #8]
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	68f9      	ldr	r1, [r7, #12]
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 fa69 	bl	800b990 <USBD_CtlSendData>
 800b4be:	e009      	b.n	800b4d4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b4c0:	6839      	ldr	r1, [r7, #0]
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f9e7 	bl	800b896 <USBD_CtlError>
 800b4c8:	e004      	b.n	800b4d4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 faba 	bl	800ba44 <USBD_CtlSendStatus>
 800b4d0:	e000      	b.n	800b4d4 <USBD_GetDescriptor+0x2cc>
    return;
 800b4d2:	bf00      	nop
  }
}
 800b4d4:	3710      	adds	r7, #16
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop

0800b4dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	889b      	ldrh	r3, [r3, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d131      	bne.n	800b552 <USBD_SetAddress+0x76>
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	88db      	ldrh	r3, [r3, #6]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d12d      	bne.n	800b552 <USBD_SetAddress+0x76>
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	885b      	ldrh	r3, [r3, #2]
 800b4fa:	2b7f      	cmp	r3, #127	@ 0x7f
 800b4fc:	d829      	bhi.n	800b552 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	885b      	ldrh	r3, [r3, #2]
 800b502:	b2db      	uxtb	r3, r3
 800b504:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b508:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b510:	b2db      	uxtb	r3, r3
 800b512:	2b03      	cmp	r3, #3
 800b514:	d104      	bne.n	800b520 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b516:	6839      	ldr	r1, [r7, #0]
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 f9bc 	bl	800b896 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b51e:	e01d      	b.n	800b55c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	7bfa      	ldrb	r2, [r7, #15]
 800b524:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b528:	7bfb      	ldrb	r3, [r7, #15]
 800b52a:	4619      	mov	r1, r3
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 ff03 	bl	800c338 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 fa86 	bl	800ba44 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b538:	7bfb      	ldrb	r3, [r7, #15]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d004      	beq.n	800b548 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2202      	movs	r2, #2
 800b542:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b546:	e009      	b.n	800b55c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2201      	movs	r2, #1
 800b54c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b550:	e004      	b.n	800b55c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b552:	6839      	ldr	r1, [r7, #0]
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 f99e 	bl	800b896 <USBD_CtlError>
  }
}
 800b55a:	bf00      	nop
 800b55c:	bf00      	nop
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b56e:	2300      	movs	r3, #0
 800b570:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	885b      	ldrh	r3, [r3, #2]
 800b576:	b2da      	uxtb	r2, r3
 800b578:	4b4e      	ldr	r3, [pc, #312]	@ (800b6b4 <USBD_SetConfig+0x150>)
 800b57a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b57c:	4b4d      	ldr	r3, [pc, #308]	@ (800b6b4 <USBD_SetConfig+0x150>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	2b01      	cmp	r3, #1
 800b582:	d905      	bls.n	800b590 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b584:	6839      	ldr	r1, [r7, #0]
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 f985 	bl	800b896 <USBD_CtlError>
    return USBD_FAIL;
 800b58c:	2303      	movs	r3, #3
 800b58e:	e08c      	b.n	800b6aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b596:	b2db      	uxtb	r3, r3
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d002      	beq.n	800b5a2 <USBD_SetConfig+0x3e>
 800b59c:	2b03      	cmp	r3, #3
 800b59e:	d029      	beq.n	800b5f4 <USBD_SetConfig+0x90>
 800b5a0:	e075      	b.n	800b68e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b5a2:	4b44      	ldr	r3, [pc, #272]	@ (800b6b4 <USBD_SetConfig+0x150>)
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d020      	beq.n	800b5ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b5aa:	4b42      	ldr	r3, [pc, #264]	@ (800b6b4 <USBD_SetConfig+0x150>)
 800b5ac:	781b      	ldrb	r3, [r3, #0]
 800b5ae:	461a      	mov	r2, r3
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b5b4:	4b3f      	ldr	r3, [pc, #252]	@ (800b6b4 <USBD_SetConfig+0x150>)
 800b5b6:	781b      	ldrb	r3, [r3, #0]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f7fe ffe3 	bl	800a586 <USBD_SetClassConfig>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b5c4:	7bfb      	ldrb	r3, [r7, #15]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d008      	beq.n	800b5dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b5ca:	6839      	ldr	r1, [r7, #0]
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 f962 	bl	800b896 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2202      	movs	r2, #2
 800b5d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b5da:	e065      	b.n	800b6a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 fa31 	bl	800ba44 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2203      	movs	r2, #3
 800b5e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b5ea:	e05d      	b.n	800b6a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 fa29 	bl	800ba44 <USBD_CtlSendStatus>
      break;
 800b5f2:	e059      	b.n	800b6a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b5f4:	4b2f      	ldr	r3, [pc, #188]	@ (800b6b4 <USBD_SetConfig+0x150>)
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d112      	bne.n	800b622 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2202      	movs	r2, #2
 800b600:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b604:	4b2b      	ldr	r3, [pc, #172]	@ (800b6b4 <USBD_SetConfig+0x150>)
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	461a      	mov	r2, r3
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b60e:	4b29      	ldr	r3, [pc, #164]	@ (800b6b4 <USBD_SetConfig+0x150>)
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	4619      	mov	r1, r3
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7fe ffd2 	bl	800a5be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 fa12 	bl	800ba44 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b620:	e042      	b.n	800b6a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b622:	4b24      	ldr	r3, [pc, #144]	@ (800b6b4 <USBD_SetConfig+0x150>)
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	461a      	mov	r2, r3
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d02a      	beq.n	800b686 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	b2db      	uxtb	r3, r3
 800b636:	4619      	mov	r1, r3
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f7fe ffc0 	bl	800a5be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b63e:	4b1d      	ldr	r3, [pc, #116]	@ (800b6b4 <USBD_SetConfig+0x150>)
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	461a      	mov	r2, r3
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b648:	4b1a      	ldr	r3, [pc, #104]	@ (800b6b4 <USBD_SetConfig+0x150>)
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	4619      	mov	r1, r3
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f7fe ff99 	bl	800a586 <USBD_SetClassConfig>
 800b654:	4603      	mov	r3, r0
 800b656:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b658:	7bfb      	ldrb	r3, [r7, #15]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d00f      	beq.n	800b67e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b65e:	6839      	ldr	r1, [r7, #0]
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 f918 	bl	800b896 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	4619      	mov	r1, r3
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f7fe ffa5 	bl	800a5be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2202      	movs	r2, #2
 800b678:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b67c:	e014      	b.n	800b6a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b67e:	6878      	ldr	r0, [r7, #4]
 800b680:	f000 f9e0 	bl	800ba44 <USBD_CtlSendStatus>
      break;
 800b684:	e010      	b.n	800b6a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 f9dc 	bl	800ba44 <USBD_CtlSendStatus>
      break;
 800b68c:	e00c      	b.n	800b6a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b68e:	6839      	ldr	r1, [r7, #0]
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f000 f900 	bl	800b896 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b696:	4b07      	ldr	r3, [pc, #28]	@ (800b6b4 <USBD_SetConfig+0x150>)
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	4619      	mov	r1, r3
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f7fe ff8e 	bl	800a5be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b6a2:	2303      	movs	r3, #3
 800b6a4:	73fb      	strb	r3, [r7, #15]
      break;
 800b6a6:	bf00      	nop
  }

  return ret;
 800b6a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	20000839 	.word	0x20000839

0800b6b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	88db      	ldrh	r3, [r3, #6]
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d004      	beq.n	800b6d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b6ca:	6839      	ldr	r1, [r7, #0]
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 f8e2 	bl	800b896 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b6d2:	e023      	b.n	800b71c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6da:	b2db      	uxtb	r3, r3
 800b6dc:	2b02      	cmp	r3, #2
 800b6de:	dc02      	bgt.n	800b6e6 <USBD_GetConfig+0x2e>
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	dc03      	bgt.n	800b6ec <USBD_GetConfig+0x34>
 800b6e4:	e015      	b.n	800b712 <USBD_GetConfig+0x5a>
 800b6e6:	2b03      	cmp	r3, #3
 800b6e8:	d00b      	beq.n	800b702 <USBD_GetConfig+0x4a>
 800b6ea:	e012      	b.n	800b712 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	3308      	adds	r3, #8
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 f948 	bl	800b990 <USBD_CtlSendData>
        break;
 800b700:	e00c      	b.n	800b71c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	3304      	adds	r3, #4
 800b706:	2201      	movs	r2, #1
 800b708:	4619      	mov	r1, r3
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 f940 	bl	800b990 <USBD_CtlSendData>
        break;
 800b710:	e004      	b.n	800b71c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b712:	6839      	ldr	r1, [r7, #0]
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 f8be 	bl	800b896 <USBD_CtlError>
        break;
 800b71a:	bf00      	nop
}
 800b71c:	bf00      	nop
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}

0800b724 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b082      	sub	sp, #8
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b734:	b2db      	uxtb	r3, r3
 800b736:	3b01      	subs	r3, #1
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d81e      	bhi.n	800b77a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	88db      	ldrh	r3, [r3, #6]
 800b740:	2b02      	cmp	r3, #2
 800b742:	d004      	beq.n	800b74e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b744:	6839      	ldr	r1, [r7, #0]
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f8a5 	bl	800b896 <USBD_CtlError>
        break;
 800b74c:	e01a      	b.n	800b784 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2201      	movs	r2, #1
 800b752:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d005      	beq.n	800b76a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	f043 0202 	orr.w	r2, r3, #2
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	330c      	adds	r3, #12
 800b76e:	2202      	movs	r2, #2
 800b770:	4619      	mov	r1, r3
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f000 f90c 	bl	800b990 <USBD_CtlSendData>
      break;
 800b778:	e004      	b.n	800b784 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b77a:	6839      	ldr	r1, [r7, #0]
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 f88a 	bl	800b896 <USBD_CtlError>
      break;
 800b782:	bf00      	nop
  }
}
 800b784:	bf00      	nop
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}

0800b78c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b082      	sub	sp, #8
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	885b      	ldrh	r3, [r3, #2]
 800b79a:	2b01      	cmp	r3, #1
 800b79c:	d107      	bne.n	800b7ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b7a6:	6878      	ldr	r0, [r7, #4]
 800b7a8:	f000 f94c 	bl	800ba44 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b7ac:	e013      	b.n	800b7d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	885b      	ldrh	r3, [r3, #2]
 800b7b2:	2b02      	cmp	r3, #2
 800b7b4:	d10b      	bne.n	800b7ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	889b      	ldrh	r3, [r3, #4]
 800b7ba:	0a1b      	lsrs	r3, r3, #8
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	b2da      	uxtb	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 f93c 	bl	800ba44 <USBD_CtlSendStatus>
}
 800b7cc:	e003      	b.n	800b7d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b7ce:	6839      	ldr	r1, [r7, #0]
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 f860 	bl	800b896 <USBD_CtlError>
}
 800b7d6:	bf00      	nop
 800b7d8:	3708      	adds	r7, #8
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}

0800b7de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7de:	b580      	push	{r7, lr}
 800b7e0:	b082      	sub	sp, #8
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
 800b7e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	3b01      	subs	r3, #1
 800b7f2:	2b02      	cmp	r3, #2
 800b7f4:	d80b      	bhi.n	800b80e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	885b      	ldrh	r3, [r3, #2]
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d10c      	bne.n	800b818 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 f91c 	bl	800ba44 <USBD_CtlSendStatus>
      }
      break;
 800b80c:	e004      	b.n	800b818 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b80e:	6839      	ldr	r1, [r7, #0]
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 f840 	bl	800b896 <USBD_CtlError>
      break;
 800b816:	e000      	b.n	800b81a <USBD_ClrFeature+0x3c>
      break;
 800b818:	bf00      	nop
  }
}
 800b81a:	bf00      	nop
 800b81c:	3708      	adds	r7, #8
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b084      	sub	sp, #16
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
 800b82a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	781a      	ldrb	r2, [r3, #0]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	3301      	adds	r3, #1
 800b83c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	781a      	ldrb	r2, [r3, #0]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	3301      	adds	r3, #1
 800b84a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	f7ff fa40 	bl	800acd2 <SWAPBYTE>
 800b852:	4603      	mov	r3, r0
 800b854:	461a      	mov	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	3301      	adds	r3, #1
 800b85e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	3301      	adds	r3, #1
 800b864:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b866:	68f8      	ldr	r0, [r7, #12]
 800b868:	f7ff fa33 	bl	800acd2 <SWAPBYTE>
 800b86c:	4603      	mov	r3, r0
 800b86e:	461a      	mov	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	3301      	adds	r3, #1
 800b878:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	3301      	adds	r3, #1
 800b87e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b880:	68f8      	ldr	r0, [r7, #12]
 800b882:	f7ff fa26 	bl	800acd2 <SWAPBYTE>
 800b886:	4603      	mov	r3, r0
 800b888:	461a      	mov	r2, r3
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	80da      	strh	r2, [r3, #6]
}
 800b88e:	bf00      	nop
 800b890:	3710      	adds	r7, #16
 800b892:	46bd      	mov	sp, r7
 800b894:	bd80      	pop	{r7, pc}

0800b896 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b082      	sub	sp, #8
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	6078      	str	r0, [r7, #4]
 800b89e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b8a0:	2180      	movs	r1, #128	@ 0x80
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f000 fcde 	bl	800c264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f000 fcda 	bl	800c264 <USBD_LL_StallEP>
}
 800b8b0:	bf00      	nop
 800b8b2:	3708      	adds	r7, #8
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b086      	sub	sp, #24
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d042      	beq.n	800b954 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b8d2:	6938      	ldr	r0, [r7, #16]
 800b8d4:	f000 f842 	bl	800b95c <USBD_GetLen>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	3301      	adds	r3, #1
 800b8dc:	005b      	lsls	r3, r3, #1
 800b8de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b8e2:	d808      	bhi.n	800b8f6 <USBD_GetString+0x3e>
 800b8e4:	6938      	ldr	r0, [r7, #16]
 800b8e6:	f000 f839 	bl	800b95c <USBD_GetLen>
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	005b      	lsls	r3, r3, #1
 800b8f2:	b29a      	uxth	r2, r3
 800b8f4:	e001      	b.n	800b8fa <USBD_GetString+0x42>
 800b8f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b8fe:	7dfb      	ldrb	r3, [r7, #23]
 800b900:	68ba      	ldr	r2, [r7, #8]
 800b902:	4413      	add	r3, r2
 800b904:	687a      	ldr	r2, [r7, #4]
 800b906:	7812      	ldrb	r2, [r2, #0]
 800b908:	701a      	strb	r2, [r3, #0]
  idx++;
 800b90a:	7dfb      	ldrb	r3, [r7, #23]
 800b90c:	3301      	adds	r3, #1
 800b90e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b910:	7dfb      	ldrb	r3, [r7, #23]
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	4413      	add	r3, r2
 800b916:	2203      	movs	r2, #3
 800b918:	701a      	strb	r2, [r3, #0]
  idx++;
 800b91a:	7dfb      	ldrb	r3, [r7, #23]
 800b91c:	3301      	adds	r3, #1
 800b91e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b920:	e013      	b.n	800b94a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b922:	7dfb      	ldrb	r3, [r7, #23]
 800b924:	68ba      	ldr	r2, [r7, #8]
 800b926:	4413      	add	r3, r2
 800b928:	693a      	ldr	r2, [r7, #16]
 800b92a:	7812      	ldrb	r2, [r2, #0]
 800b92c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	3301      	adds	r3, #1
 800b932:	613b      	str	r3, [r7, #16]
    idx++;
 800b934:	7dfb      	ldrb	r3, [r7, #23]
 800b936:	3301      	adds	r3, #1
 800b938:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b93a:	7dfb      	ldrb	r3, [r7, #23]
 800b93c:	68ba      	ldr	r2, [r7, #8]
 800b93e:	4413      	add	r3, r2
 800b940:	2200      	movs	r2, #0
 800b942:	701a      	strb	r2, [r3, #0]
    idx++;
 800b944:	7dfb      	ldrb	r3, [r7, #23]
 800b946:	3301      	adds	r3, #1
 800b948:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	781b      	ldrb	r3, [r3, #0]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1e7      	bne.n	800b922 <USBD_GetString+0x6a>
 800b952:	e000      	b.n	800b956 <USBD_GetString+0x9e>
    return;
 800b954:	bf00      	nop
  }
}
 800b956:	3718      	adds	r7, #24
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}

0800b95c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b085      	sub	sp, #20
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b964:	2300      	movs	r3, #0
 800b966:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b96c:	e005      	b.n	800b97a <USBD_GetLen+0x1e>
  {
    len++;
 800b96e:	7bfb      	ldrb	r3, [r7, #15]
 800b970:	3301      	adds	r3, #1
 800b972:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	3301      	adds	r3, #1
 800b978:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d1f5      	bne.n	800b96e <USBD_GetLen+0x12>
  }

  return len;
 800b982:	7bfb      	ldrb	r3, [r7, #15]
}
 800b984:	4618      	mov	r0, r3
 800b986:	3714      	adds	r7, #20
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2202      	movs	r2, #2
 800b9a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	68ba      	ldr	r2, [r7, #8]
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	68f8      	ldr	r0, [r7, #12]
 800b9b8:	f000 fcdd 	bl	800c376 <USBD_LL_Transmit>

  return USBD_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3710      	adds	r7, #16
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}

0800b9c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b9c6:	b580      	push	{r7, lr}
 800b9c8:	b084      	sub	sp, #16
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	60f8      	str	r0, [r7, #12]
 800b9ce:	60b9      	str	r1, [r7, #8]
 800b9d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	2100      	movs	r1, #0
 800b9d8:	68f8      	ldr	r0, [r7, #12]
 800b9da:	f000 fccc 	bl	800c376 <USBD_LL_Transmit>

  return USBD_OK;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3710      	adds	r7, #16
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	60b9      	str	r1, [r7, #8]
 800b9f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2203      	movs	r2, #3
 800b9f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	68ba      	ldr	r2, [r7, #8]
 800ba10:	2100      	movs	r1, #0
 800ba12:	68f8      	ldr	r0, [r7, #12]
 800ba14:	f000 fcd0 	bl	800c3b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b084      	sub	sp, #16
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	60f8      	str	r0, [r7, #12]
 800ba2a:	60b9      	str	r1, [r7, #8]
 800ba2c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	68ba      	ldr	r2, [r7, #8]
 800ba32:	2100      	movs	r1, #0
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f000 fcbf 	bl	800c3b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba3a:	2300      	movs	r3, #0
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3710      	adds	r7, #16
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2204      	movs	r2, #4
 800ba50:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ba54:	2300      	movs	r3, #0
 800ba56:	2200      	movs	r2, #0
 800ba58:	2100      	movs	r1, #0
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 fc8b 	bl	800c376 <USBD_LL_Transmit>

  return USBD_OK;
 800ba60:	2300      	movs	r3, #0
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3708      	adds	r7, #8
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b082      	sub	sp, #8
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2205      	movs	r2, #5
 800ba76:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	2100      	movs	r1, #0
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 fc99 	bl	800c3b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba86:	2300      	movs	r3, #0
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3708      	adds	r7, #8
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ba94:	2200      	movs	r2, #0
 800ba96:	4912      	ldr	r1, [pc, #72]	@ (800bae0 <MX_USB_DEVICE_Init+0x50>)
 800ba98:	4812      	ldr	r0, [pc, #72]	@ (800bae4 <MX_USB_DEVICE_Init+0x54>)
 800ba9a:	f7fe fcf7 	bl	800a48c <USBD_Init>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d001      	beq.n	800baa8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800baa4:	f7f5 fd98 	bl	80015d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800baa8:	490f      	ldr	r1, [pc, #60]	@ (800bae8 <MX_USB_DEVICE_Init+0x58>)
 800baaa:	480e      	ldr	r0, [pc, #56]	@ (800bae4 <MX_USB_DEVICE_Init+0x54>)
 800baac:	f7fe fd1e 	bl	800a4ec <USBD_RegisterClass>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d001      	beq.n	800baba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bab6:	f7f5 fd8f 	bl	80015d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800baba:	490c      	ldr	r1, [pc, #48]	@ (800baec <MX_USB_DEVICE_Init+0x5c>)
 800babc:	4809      	ldr	r0, [pc, #36]	@ (800bae4 <MX_USB_DEVICE_Init+0x54>)
 800babe:	f7fe fc55 	bl	800a36c <USBD_CDC_RegisterInterface>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d001      	beq.n	800bacc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bac8:	f7f5 fd86 	bl	80015d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bacc:	4805      	ldr	r0, [pc, #20]	@ (800bae4 <MX_USB_DEVICE_Init+0x54>)
 800bace:	f7fe fd43 	bl	800a558 <USBD_Start>
 800bad2:	4603      	mov	r3, r0
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d001      	beq.n	800badc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bad8:	f7f5 fd7e 	bl	80015d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800badc:	bf00      	nop
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	200000c0 	.word	0x200000c0
 800bae4:	2000083c 	.word	0x2000083c
 800bae8:	2000002c 	.word	0x2000002c
 800baec:	200000ac 	.word	0x200000ac

0800baf0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800baf4:	2200      	movs	r2, #0
 800baf6:	4905      	ldr	r1, [pc, #20]	@ (800bb0c <CDC_Init_FS+0x1c>)
 800baf8:	4805      	ldr	r0, [pc, #20]	@ (800bb10 <CDC_Init_FS+0x20>)
 800bafa:	f7fe fc51 	bl	800a3a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bafe:	4905      	ldr	r1, [pc, #20]	@ (800bb14 <CDC_Init_FS+0x24>)
 800bb00:	4803      	ldr	r0, [pc, #12]	@ (800bb10 <CDC_Init_FS+0x20>)
 800bb02:	f7fe fc6f 	bl	800a3e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bb06:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	2000131c 	.word	0x2000131c
 800bb10:	2000083c 	.word	0x2000083c
 800bb14:	20000b1c 	.word	0x20000b1c

0800bb18 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bb1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	4603      	mov	r3, r0
 800bb30:	6039      	str	r1, [r7, #0]
 800bb32:	71fb      	strb	r3, [r7, #7]
 800bb34:	4613      	mov	r3, r2
 800bb36:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bb38:	79fb      	ldrb	r3, [r7, #7]
 800bb3a:	2b23      	cmp	r3, #35	@ 0x23
 800bb3c:	d84a      	bhi.n	800bbd4 <CDC_Control_FS+0xac>
 800bb3e:	a201      	add	r2, pc, #4	@ (adr r2, 800bb44 <CDC_Control_FS+0x1c>)
 800bb40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb44:	0800bbd5 	.word	0x0800bbd5
 800bb48:	0800bbd5 	.word	0x0800bbd5
 800bb4c:	0800bbd5 	.word	0x0800bbd5
 800bb50:	0800bbd5 	.word	0x0800bbd5
 800bb54:	0800bbd5 	.word	0x0800bbd5
 800bb58:	0800bbd5 	.word	0x0800bbd5
 800bb5c:	0800bbd5 	.word	0x0800bbd5
 800bb60:	0800bbd5 	.word	0x0800bbd5
 800bb64:	0800bbd5 	.word	0x0800bbd5
 800bb68:	0800bbd5 	.word	0x0800bbd5
 800bb6c:	0800bbd5 	.word	0x0800bbd5
 800bb70:	0800bbd5 	.word	0x0800bbd5
 800bb74:	0800bbd5 	.word	0x0800bbd5
 800bb78:	0800bbd5 	.word	0x0800bbd5
 800bb7c:	0800bbd5 	.word	0x0800bbd5
 800bb80:	0800bbd5 	.word	0x0800bbd5
 800bb84:	0800bbd5 	.word	0x0800bbd5
 800bb88:	0800bbd5 	.word	0x0800bbd5
 800bb8c:	0800bbd5 	.word	0x0800bbd5
 800bb90:	0800bbd5 	.word	0x0800bbd5
 800bb94:	0800bbd5 	.word	0x0800bbd5
 800bb98:	0800bbd5 	.word	0x0800bbd5
 800bb9c:	0800bbd5 	.word	0x0800bbd5
 800bba0:	0800bbd5 	.word	0x0800bbd5
 800bba4:	0800bbd5 	.word	0x0800bbd5
 800bba8:	0800bbd5 	.word	0x0800bbd5
 800bbac:	0800bbd5 	.word	0x0800bbd5
 800bbb0:	0800bbd5 	.word	0x0800bbd5
 800bbb4:	0800bbd5 	.word	0x0800bbd5
 800bbb8:	0800bbd5 	.word	0x0800bbd5
 800bbbc:	0800bbd5 	.word	0x0800bbd5
 800bbc0:	0800bbd5 	.word	0x0800bbd5
 800bbc4:	0800bbd5 	.word	0x0800bbd5
 800bbc8:	0800bbd5 	.word	0x0800bbd5
 800bbcc:	0800bbd5 	.word	0x0800bbd5
 800bbd0:	0800bbd5 	.word	0x0800bbd5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bbd4:	bf00      	nop
  }

  return (USBD_OK);
 800bbd6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	370c      	adds	r7, #12
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bbee:	6879      	ldr	r1, [r7, #4]
 800bbf0:	480e      	ldr	r0, [pc, #56]	@ (800bc2c <CDC_Receive_FS+0x48>)
 800bbf2:	f7fe fbf7 	bl	800a3e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bbf6:	480d      	ldr	r0, [pc, #52]	@ (800bc2c <CDC_Receive_FS+0x48>)
 800bbf8:	f7fe fc12 	bl	800a420 <USBD_CDC_ReceivePacket>

  //https://controllerstech.com/send-and-receive-data-to-pc-without-uart-stm32-usb-com/

  uint8_t len = (uint8_t) *Len;
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	73fb      	strb	r3, [r7, #15]

    if(len == ROS_COMM_RX_SIZE){
 800bc02:	7bfb      	ldrb	r3, [r7, #15]
 800bc04:	2b0d      	cmp	r3, #13
 800bc06:	d105      	bne.n	800bc14 <CDC_Receive_FS+0x30>
	  memcpy((uint8_t *)&rbc_Packet_t, Buf, len);  // copy the data to the buffer
 800bc08:	7bfb      	ldrb	r3, [r7, #15]
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	6879      	ldr	r1, [r7, #4]
 800bc0e:	4808      	ldr	r0, [pc, #32]	@ (800bc30 <CDC_Receive_FS+0x4c>)
 800bc10:	f000 fc76 	bl	800c500 <memcpy>
    }

    rx_flag = 1;
 800bc14:	4b07      	ldr	r3, [pc, #28]	@ (800bc34 <CDC_Receive_FS+0x50>)
 800bc16:	2201      	movs	r2, #1
 800bc18:	701a      	strb	r2, [r3, #0]
    tx_flag = 0;
 800bc1a:	4b07      	ldr	r3, [pc, #28]	@ (800bc38 <CDC_Receive_FS+0x54>)
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800bc20:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	2000083c 	.word	0x2000083c
 800bc30:	2000080c 	.word	0x2000080c
 800bc34:	20000b18 	.word	0x20000b18
 800bc38:	200000aa 	.word	0x200000aa

0800bc3c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b087      	sub	sp, #28
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	4613      	mov	r3, r2
 800bc48:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bc4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	371c      	adds	r7, #28
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
	...

0800bc60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	4603      	mov	r3, r0
 800bc68:	6039      	str	r1, [r7, #0]
 800bc6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	2212      	movs	r2, #18
 800bc70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bc72:	4b03      	ldr	r3, [pc, #12]	@ (800bc80 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr
 800bc80:	200000dc 	.word	0x200000dc

0800bc84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	6039      	str	r1, [r7, #0]
 800bc8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	2204      	movs	r2, #4
 800bc94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bc96:	4b03      	ldr	r3, [pc, #12]	@ (800bca4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr
 800bca4:	200000f0 	.word	0x200000f0

0800bca8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	4603      	mov	r3, r0
 800bcb0:	6039      	str	r1, [r7, #0]
 800bcb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bcb4:	79fb      	ldrb	r3, [r7, #7]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d105      	bne.n	800bcc6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcba:	683a      	ldr	r2, [r7, #0]
 800bcbc:	4907      	ldr	r1, [pc, #28]	@ (800bcdc <USBD_FS_ProductStrDescriptor+0x34>)
 800bcbe:	4808      	ldr	r0, [pc, #32]	@ (800bce0 <USBD_FS_ProductStrDescriptor+0x38>)
 800bcc0:	f7ff fdfa 	bl	800b8b8 <USBD_GetString>
 800bcc4:	e004      	b.n	800bcd0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bcc6:	683a      	ldr	r2, [r7, #0]
 800bcc8:	4904      	ldr	r1, [pc, #16]	@ (800bcdc <USBD_FS_ProductStrDescriptor+0x34>)
 800bcca:	4805      	ldr	r0, [pc, #20]	@ (800bce0 <USBD_FS_ProductStrDescriptor+0x38>)
 800bccc:	f7ff fdf4 	bl	800b8b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bcd0:	4b02      	ldr	r3, [pc, #8]	@ (800bcdc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3708      	adds	r7, #8
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	20001b1c 	.word	0x20001b1c
 800bce0:	0800c56c 	.word	0x0800c56c

0800bce4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	4603      	mov	r3, r0
 800bcec:	6039      	str	r1, [r7, #0]
 800bcee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bcf0:	683a      	ldr	r2, [r7, #0]
 800bcf2:	4904      	ldr	r1, [pc, #16]	@ (800bd04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bcf4:	4804      	ldr	r0, [pc, #16]	@ (800bd08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bcf6:	f7ff fddf 	bl	800b8b8 <USBD_GetString>
  return USBD_StrDesc;
 800bcfa:	4b02      	ldr	r3, [pc, #8]	@ (800bd04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	20001b1c 	.word	0x20001b1c
 800bd08:	0800c584 	.word	0x0800c584

0800bd0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	4603      	mov	r3, r0
 800bd14:	6039      	str	r1, [r7, #0]
 800bd16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	221a      	movs	r2, #26
 800bd1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bd1e:	f000 f843 	bl	800bda8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bd22:	4b02      	ldr	r3, [pc, #8]	@ (800bd2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3708      	adds	r7, #8
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	200000f4 	.word	0x200000f4

0800bd30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	4603      	mov	r3, r0
 800bd38:	6039      	str	r1, [r7, #0]
 800bd3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd3c:	79fb      	ldrb	r3, [r7, #7]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d105      	bne.n	800bd4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd42:	683a      	ldr	r2, [r7, #0]
 800bd44:	4907      	ldr	r1, [pc, #28]	@ (800bd64 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd46:	4808      	ldr	r0, [pc, #32]	@ (800bd68 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd48:	f7ff fdb6 	bl	800b8b8 <USBD_GetString>
 800bd4c:	e004      	b.n	800bd58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bd4e:	683a      	ldr	r2, [r7, #0]
 800bd50:	4904      	ldr	r1, [pc, #16]	@ (800bd64 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bd52:	4805      	ldr	r0, [pc, #20]	@ (800bd68 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bd54:	f7ff fdb0 	bl	800b8b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd58:	4b02      	ldr	r3, [pc, #8]	@ (800bd64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	20001b1c 	.word	0x20001b1c
 800bd68:	0800c598 	.word	0x0800c598

0800bd6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	4603      	mov	r3, r0
 800bd74:	6039      	str	r1, [r7, #0]
 800bd76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bd78:	79fb      	ldrb	r3, [r7, #7]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d105      	bne.n	800bd8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd7e:	683a      	ldr	r2, [r7, #0]
 800bd80:	4907      	ldr	r1, [pc, #28]	@ (800bda0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd82:	4808      	ldr	r0, [pc, #32]	@ (800bda4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd84:	f7ff fd98 	bl	800b8b8 <USBD_GetString>
 800bd88:	e004      	b.n	800bd94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bd8a:	683a      	ldr	r2, [r7, #0]
 800bd8c:	4904      	ldr	r1, [pc, #16]	@ (800bda0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bd8e:	4805      	ldr	r0, [pc, #20]	@ (800bda4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bd90:	f7ff fd92 	bl	800b8b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd94:	4b02      	ldr	r3, [pc, #8]	@ (800bda0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3708      	adds	r7, #8
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
 800bd9e:	bf00      	nop
 800bda0:	20001b1c 	.word	0x20001b1c
 800bda4:	0800c5a4 	.word	0x0800c5a4

0800bda8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bdae:	4b0f      	ldr	r3, [pc, #60]	@ (800bdec <Get_SerialNum+0x44>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bdb4:	4b0e      	ldr	r3, [pc, #56]	@ (800bdf0 <Get_SerialNum+0x48>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bdba:	4b0e      	ldr	r3, [pc, #56]	@ (800bdf4 <Get_SerialNum+0x4c>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4413      	add	r3, r2
 800bdc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d009      	beq.n	800bde2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bdce:	2208      	movs	r2, #8
 800bdd0:	4909      	ldr	r1, [pc, #36]	@ (800bdf8 <Get_SerialNum+0x50>)
 800bdd2:	68f8      	ldr	r0, [r7, #12]
 800bdd4:	f000 f814 	bl	800be00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bdd8:	2204      	movs	r2, #4
 800bdda:	4908      	ldr	r1, [pc, #32]	@ (800bdfc <Get_SerialNum+0x54>)
 800bddc:	68b8      	ldr	r0, [r7, #8]
 800bdde:	f000 f80f 	bl	800be00 <IntToUnicode>
  }
}
 800bde2:	bf00      	nop
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	1fff7a10 	.word	0x1fff7a10
 800bdf0:	1fff7a14 	.word	0x1fff7a14
 800bdf4:	1fff7a18 	.word	0x1fff7a18
 800bdf8:	200000f6 	.word	0x200000f6
 800bdfc:	20000106 	.word	0x20000106

0800be00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be00:	b480      	push	{r7}
 800be02:	b087      	sub	sp, #28
 800be04:	af00      	add	r7, sp, #0
 800be06:	60f8      	str	r0, [r7, #12]
 800be08:	60b9      	str	r1, [r7, #8]
 800be0a:	4613      	mov	r3, r2
 800be0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be0e:	2300      	movs	r3, #0
 800be10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be12:	2300      	movs	r3, #0
 800be14:	75fb      	strb	r3, [r7, #23]
 800be16:	e027      	b.n	800be68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	0f1b      	lsrs	r3, r3, #28
 800be1c:	2b09      	cmp	r3, #9
 800be1e:	d80b      	bhi.n	800be38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	0f1b      	lsrs	r3, r3, #28
 800be24:	b2da      	uxtb	r2, r3
 800be26:	7dfb      	ldrb	r3, [r7, #23]
 800be28:	005b      	lsls	r3, r3, #1
 800be2a:	4619      	mov	r1, r3
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	440b      	add	r3, r1
 800be30:	3230      	adds	r2, #48	@ 0x30
 800be32:	b2d2      	uxtb	r2, r2
 800be34:	701a      	strb	r2, [r3, #0]
 800be36:	e00a      	b.n	800be4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	0f1b      	lsrs	r3, r3, #28
 800be3c:	b2da      	uxtb	r2, r3
 800be3e:	7dfb      	ldrb	r3, [r7, #23]
 800be40:	005b      	lsls	r3, r3, #1
 800be42:	4619      	mov	r1, r3
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	440b      	add	r3, r1
 800be48:	3237      	adds	r2, #55	@ 0x37
 800be4a:	b2d2      	uxtb	r2, r2
 800be4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	011b      	lsls	r3, r3, #4
 800be52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800be54:	7dfb      	ldrb	r3, [r7, #23]
 800be56:	005b      	lsls	r3, r3, #1
 800be58:	3301      	adds	r3, #1
 800be5a:	68ba      	ldr	r2, [r7, #8]
 800be5c:	4413      	add	r3, r2
 800be5e:	2200      	movs	r2, #0
 800be60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800be62:	7dfb      	ldrb	r3, [r7, #23]
 800be64:	3301      	adds	r3, #1
 800be66:	75fb      	strb	r3, [r7, #23]
 800be68:	7dfa      	ldrb	r2, [r7, #23]
 800be6a:	79fb      	ldrb	r3, [r7, #7]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d3d3      	bcc.n	800be18 <IntToUnicode+0x18>
  }
}
 800be70:	bf00      	nop
 800be72:	bf00      	nop
 800be74:	371c      	adds	r7, #28
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr
	...

0800be80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b08a      	sub	sp, #40	@ 0x28
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be88:	f107 0314 	add.w	r3, r7, #20
 800be8c:	2200      	movs	r2, #0
 800be8e:	601a      	str	r2, [r3, #0]
 800be90:	605a      	str	r2, [r3, #4]
 800be92:	609a      	str	r2, [r3, #8]
 800be94:	60da      	str	r2, [r3, #12]
 800be96:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bea0:	d13a      	bne.n	800bf18 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bea2:	2300      	movs	r3, #0
 800bea4:	613b      	str	r3, [r7, #16]
 800bea6:	4b1e      	ldr	r3, [pc, #120]	@ (800bf20 <HAL_PCD_MspInit+0xa0>)
 800bea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beaa:	4a1d      	ldr	r2, [pc, #116]	@ (800bf20 <HAL_PCD_MspInit+0xa0>)
 800beac:	f043 0301 	orr.w	r3, r3, #1
 800beb0:	6313      	str	r3, [r2, #48]	@ 0x30
 800beb2:	4b1b      	ldr	r3, [pc, #108]	@ (800bf20 <HAL_PCD_MspInit+0xa0>)
 800beb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800beb6:	f003 0301 	and.w	r3, r3, #1
 800beba:	613b      	str	r3, [r7, #16]
 800bebc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bebe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800bec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bec4:	2302      	movs	r3, #2
 800bec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bec8:	2300      	movs	r3, #0
 800beca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800becc:	2303      	movs	r3, #3
 800bece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bed0:	230a      	movs	r3, #10
 800bed2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bed4:	f107 0314 	add.w	r3, r7, #20
 800bed8:	4619      	mov	r1, r3
 800beda:	4812      	ldr	r0, [pc, #72]	@ (800bf24 <HAL_PCD_MspInit+0xa4>)
 800bedc:	f7f6 fdd4 	bl	8002a88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bee0:	4b0f      	ldr	r3, [pc, #60]	@ (800bf20 <HAL_PCD_MspInit+0xa0>)
 800bee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bee4:	4a0e      	ldr	r2, [pc, #56]	@ (800bf20 <HAL_PCD_MspInit+0xa0>)
 800bee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800beea:	6353      	str	r3, [r2, #52]	@ 0x34
 800beec:	2300      	movs	r3, #0
 800beee:	60fb      	str	r3, [r7, #12]
 800bef0:	4b0b      	ldr	r3, [pc, #44]	@ (800bf20 <HAL_PCD_MspInit+0xa0>)
 800bef2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bef4:	4a0a      	ldr	r2, [pc, #40]	@ (800bf20 <HAL_PCD_MspInit+0xa0>)
 800bef6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800befa:	6453      	str	r3, [r2, #68]	@ 0x44
 800befc:	4b08      	ldr	r3, [pc, #32]	@ (800bf20 <HAL_PCD_MspInit+0xa0>)
 800befe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf04:	60fb      	str	r3, [r7, #12]
 800bf06:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bf08:	2200      	movs	r2, #0
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	2043      	movs	r0, #67	@ 0x43
 800bf0e:	f7f6 fce4 	bl	80028da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bf12:	2043      	movs	r0, #67	@ 0x43
 800bf14:	f7f6 fcfd 	bl	8002912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bf18:	bf00      	nop
 800bf1a:	3728      	adds	r7, #40	@ 0x28
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	40023800 	.word	0x40023800
 800bf24:	40020000 	.word	0x40020000

0800bf28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	4610      	mov	r0, r2
 800bf40:	f7fe fb57 	bl	800a5f2 <USBD_LL_SetupStage>
}
 800bf44:	bf00      	nop
 800bf46:	3708      	adds	r7, #8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	460b      	mov	r3, r1
 800bf56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bf5e:	78fa      	ldrb	r2, [r7, #3]
 800bf60:	6879      	ldr	r1, [r7, #4]
 800bf62:	4613      	mov	r3, r2
 800bf64:	00db      	lsls	r3, r3, #3
 800bf66:	4413      	add	r3, r2
 800bf68:	009b      	lsls	r3, r3, #2
 800bf6a:	440b      	add	r3, r1
 800bf6c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bf70:	681a      	ldr	r2, [r3, #0]
 800bf72:	78fb      	ldrb	r3, [r7, #3]
 800bf74:	4619      	mov	r1, r3
 800bf76:	f7fe fb91 	bl	800a69c <USBD_LL_DataOutStage>
}
 800bf7a:	bf00      	nop
 800bf7c:	3708      	adds	r7, #8
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b082      	sub	sp, #8
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
 800bf8a:	460b      	mov	r3, r1
 800bf8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bf94:	78fa      	ldrb	r2, [r7, #3]
 800bf96:	6879      	ldr	r1, [r7, #4]
 800bf98:	4613      	mov	r3, r2
 800bf9a:	00db      	lsls	r3, r3, #3
 800bf9c:	4413      	add	r3, r2
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	440b      	add	r3, r1
 800bfa2:	3320      	adds	r3, #32
 800bfa4:	681a      	ldr	r2, [r3, #0]
 800bfa6:	78fb      	ldrb	r3, [r7, #3]
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	f7fe fc2a 	bl	800a802 <USBD_LL_DataInStage>
}
 800bfae:	bf00      	nop
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}

0800bfb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b082      	sub	sp, #8
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7fe fd64 	bl	800aa92 <USBD_LL_SOF>
}
 800bfca:	bf00      	nop
 800bfcc:	3708      	adds	r7, #8
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}

0800bfd2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b084      	sub	sp, #16
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bfda:	2301      	movs	r3, #1
 800bfdc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	79db      	ldrb	r3, [r3, #7]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d102      	bne.n	800bfec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	73fb      	strb	r3, [r7, #15]
 800bfea:	e008      	b.n	800bffe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	79db      	ldrb	r3, [r3, #7]
 800bff0:	2b02      	cmp	r3, #2
 800bff2:	d102      	bne.n	800bffa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bff4:	2301      	movs	r3, #1
 800bff6:	73fb      	strb	r3, [r7, #15]
 800bff8:	e001      	b.n	800bffe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bffa:	f7f5 faed 	bl	80015d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c004:	7bfa      	ldrb	r2, [r7, #15]
 800c006:	4611      	mov	r1, r2
 800c008:	4618      	mov	r0, r3
 800c00a:	f7fe fcfe 	bl	800aa0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c014:	4618      	mov	r0, r3
 800c016:	f7fe fca6 	bl	800a966 <USBD_LL_Reset>
}
 800c01a:	bf00      	nop
 800c01c:	3710      	adds	r7, #16
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
	...

0800c024 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c032:	4618      	mov	r0, r3
 800c034:	f7fe fcf9 	bl	800aa2a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	6812      	ldr	r2, [r2, #0]
 800c046:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c04a:	f043 0301 	orr.w	r3, r3, #1
 800c04e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	7adb      	ldrb	r3, [r3, #11]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d005      	beq.n	800c064 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c058:	4b04      	ldr	r3, [pc, #16]	@ (800c06c <HAL_PCD_SuspendCallback+0x48>)
 800c05a:	691b      	ldr	r3, [r3, #16]
 800c05c:	4a03      	ldr	r2, [pc, #12]	@ (800c06c <HAL_PCD_SuspendCallback+0x48>)
 800c05e:	f043 0306 	orr.w	r3, r3, #6
 800c062:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c064:	bf00      	nop
 800c066:	3708      	adds	r7, #8
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}
 800c06c:	e000ed00 	.word	0xe000ed00

0800c070 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b082      	sub	sp, #8
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c07e:	4618      	mov	r0, r3
 800c080:	f7fe fcef 	bl	800aa62 <USBD_LL_Resume>
}
 800c084:	bf00      	nop
 800c086:	3708      	adds	r7, #8
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b082      	sub	sp, #8
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	460b      	mov	r3, r1
 800c096:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c09e:	78fa      	ldrb	r2, [r7, #3]
 800c0a0:	4611      	mov	r1, r2
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7fe fd47 	bl	800ab36 <USBD_LL_IsoOUTIncomplete>
}
 800c0a8:	bf00      	nop
 800c0aa:	3708      	adds	r7, #8
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0c2:	78fa      	ldrb	r2, [r7, #3]
 800c0c4:	4611      	mov	r1, r2
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7fe fd03 	bl	800aad2 <USBD_LL_IsoINIncomplete>
}
 800c0cc:	bf00      	nop
 800c0ce:	3708      	adds	r7, #8
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7fe fd59 	bl	800ab9a <USBD_LL_DevConnected>
}
 800c0e8:	bf00      	nop
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7fe fd56 	bl	800abb0 <USBD_LL_DevDisconnected>
}
 800c104:	bf00      	nop
 800c106:	3708      	adds	r7, #8
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}

0800c10c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b082      	sub	sp, #8
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d13c      	bne.n	800c196 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c11c:	4a20      	ldr	r2, [pc, #128]	@ (800c1a0 <USBD_LL_Init+0x94>)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	4a1e      	ldr	r2, [pc, #120]	@ (800c1a0 <USBD_LL_Init+0x94>)
 800c128:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c12c:	4b1c      	ldr	r3, [pc, #112]	@ (800c1a0 <USBD_LL_Init+0x94>)
 800c12e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c132:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c134:	4b1a      	ldr	r3, [pc, #104]	@ (800c1a0 <USBD_LL_Init+0x94>)
 800c136:	2204      	movs	r2, #4
 800c138:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c13a:	4b19      	ldr	r3, [pc, #100]	@ (800c1a0 <USBD_LL_Init+0x94>)
 800c13c:	2202      	movs	r2, #2
 800c13e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c140:	4b17      	ldr	r3, [pc, #92]	@ (800c1a0 <USBD_LL_Init+0x94>)
 800c142:	2200      	movs	r2, #0
 800c144:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c146:	4b16      	ldr	r3, [pc, #88]	@ (800c1a0 <USBD_LL_Init+0x94>)
 800c148:	2202      	movs	r2, #2
 800c14a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c14c:	4b14      	ldr	r3, [pc, #80]	@ (800c1a0 <USBD_LL_Init+0x94>)
 800c14e:	2200      	movs	r2, #0
 800c150:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c152:	4b13      	ldr	r3, [pc, #76]	@ (800c1a0 <USBD_LL_Init+0x94>)
 800c154:	2200      	movs	r2, #0
 800c156:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c158:	4b11      	ldr	r3, [pc, #68]	@ (800c1a0 <USBD_LL_Init+0x94>)
 800c15a:	2200      	movs	r2, #0
 800c15c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c15e:	4b10      	ldr	r3, [pc, #64]	@ (800c1a0 <USBD_LL_Init+0x94>)
 800c160:	2200      	movs	r2, #0
 800c162:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c164:	4b0e      	ldr	r3, [pc, #56]	@ (800c1a0 <USBD_LL_Init+0x94>)
 800c166:	2200      	movs	r2, #0
 800c168:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c16a:	480d      	ldr	r0, [pc, #52]	@ (800c1a0 <USBD_LL_Init+0x94>)
 800c16c:	f7f7 f882 	bl	8003274 <HAL_PCD_Init>
 800c170:	4603      	mov	r3, r0
 800c172:	2b00      	cmp	r3, #0
 800c174:	d001      	beq.n	800c17a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c176:	f7f5 fa2f 	bl	80015d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c17a:	2180      	movs	r1, #128	@ 0x80
 800c17c:	4808      	ldr	r0, [pc, #32]	@ (800c1a0 <USBD_LL_Init+0x94>)
 800c17e:	f7f8 faae 	bl	80046de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c182:	2240      	movs	r2, #64	@ 0x40
 800c184:	2100      	movs	r1, #0
 800c186:	4806      	ldr	r0, [pc, #24]	@ (800c1a0 <USBD_LL_Init+0x94>)
 800c188:	f7f8 fa62 	bl	8004650 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c18c:	2280      	movs	r2, #128	@ 0x80
 800c18e:	2101      	movs	r1, #1
 800c190:	4803      	ldr	r0, [pc, #12]	@ (800c1a0 <USBD_LL_Init+0x94>)
 800c192:	f7f8 fa5d 	bl	8004650 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c196:	2300      	movs	r3, #0
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	20001d1c 	.word	0x20001d1c

0800c1a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7f7 f969 	bl	8003492 <HAL_PCD_Start>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1c4:	7bfb      	ldrb	r3, [r7, #15]
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f000 f942 	bl	800c450 <USBD_Get_USB_Status>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}

0800c1da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b084      	sub	sp, #16
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
 800c1e2:	4608      	mov	r0, r1
 800c1e4:	4611      	mov	r1, r2
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	70fb      	strb	r3, [r7, #3]
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	70bb      	strb	r3, [r7, #2]
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c202:	78bb      	ldrb	r3, [r7, #2]
 800c204:	883a      	ldrh	r2, [r7, #0]
 800c206:	78f9      	ldrb	r1, [r7, #3]
 800c208:	f7f7 fe3d 	bl	8003e86 <HAL_PCD_EP_Open>
 800c20c:	4603      	mov	r3, r0
 800c20e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c210:	7bfb      	ldrb	r3, [r7, #15]
 800c212:	4618      	mov	r0, r3
 800c214:	f000 f91c 	bl	800c450 <USBD_Get_USB_Status>
 800c218:	4603      	mov	r3, r0
 800c21a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c21c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3710      	adds	r7, #16
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b084      	sub	sp, #16
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
 800c22e:	460b      	mov	r3, r1
 800c230:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c232:	2300      	movs	r3, #0
 800c234:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c236:	2300      	movs	r3, #0
 800c238:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c240:	78fa      	ldrb	r2, [r7, #3]
 800c242:	4611      	mov	r1, r2
 800c244:	4618      	mov	r0, r3
 800c246:	f7f7 fe88 	bl	8003f5a <HAL_PCD_EP_Close>
 800c24a:	4603      	mov	r3, r0
 800c24c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c24e:	7bfb      	ldrb	r3, [r7, #15]
 800c250:	4618      	mov	r0, r3
 800c252:	f000 f8fd 	bl	800c450 <USBD_Get_USB_Status>
 800c256:	4603      	mov	r3, r0
 800c258:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c25a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3710      	adds	r7, #16
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	460b      	mov	r3, r1
 800c26e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c270:	2300      	movs	r3, #0
 800c272:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c274:	2300      	movs	r3, #0
 800c276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c27e:	78fa      	ldrb	r2, [r7, #3]
 800c280:	4611      	mov	r1, r2
 800c282:	4618      	mov	r0, r3
 800c284:	f7f7 ff40 	bl	8004108 <HAL_PCD_EP_SetStall>
 800c288:	4603      	mov	r3, r0
 800c28a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c28c:	7bfb      	ldrb	r3, [r7, #15]
 800c28e:	4618      	mov	r0, r3
 800c290:	f000 f8de 	bl	800c450 <USBD_Get_USB_Status>
 800c294:	4603      	mov	r3, r0
 800c296:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c298:	7bbb      	ldrb	r3, [r7, #14]
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3710      	adds	r7, #16
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}

0800c2a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2a2:	b580      	push	{r7, lr}
 800c2a4:	b084      	sub	sp, #16
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
 800c2aa:	460b      	mov	r3, r1
 800c2ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c2bc:	78fa      	ldrb	r2, [r7, #3]
 800c2be:	4611      	mov	r1, r2
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7f7 ff84 	bl	80041ce <HAL_PCD_EP_ClrStall>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2ca:	7bfb      	ldrb	r3, [r7, #15]
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f000 f8bf 	bl	800c450 <USBD_Get_USB_Status>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3710      	adds	r7, #16
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b085      	sub	sp, #20
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c2f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c2f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	da0b      	bge.n	800c314 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c2fc:	78fb      	ldrb	r3, [r7, #3]
 800c2fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c302:	68f9      	ldr	r1, [r7, #12]
 800c304:	4613      	mov	r3, r2
 800c306:	00db      	lsls	r3, r3, #3
 800c308:	4413      	add	r3, r2
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	440b      	add	r3, r1
 800c30e:	3316      	adds	r3, #22
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	e00b      	b.n	800c32c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c314:	78fb      	ldrb	r3, [r7, #3]
 800c316:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c31a:	68f9      	ldr	r1, [r7, #12]
 800c31c:	4613      	mov	r3, r2
 800c31e:	00db      	lsls	r3, r3, #3
 800c320:	4413      	add	r3, r2
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	440b      	add	r3, r1
 800c326:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c32a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3714      	adds	r7, #20
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b084      	sub	sp, #16
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
 800c340:	460b      	mov	r3, r1
 800c342:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c344:	2300      	movs	r3, #0
 800c346:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c348:	2300      	movs	r3, #0
 800c34a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c352:	78fa      	ldrb	r2, [r7, #3]
 800c354:	4611      	mov	r1, r2
 800c356:	4618      	mov	r0, r3
 800c358:	f7f7 fd71 	bl	8003e3e <HAL_PCD_SetAddress>
 800c35c:	4603      	mov	r3, r0
 800c35e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c360:	7bfb      	ldrb	r3, [r7, #15]
 800c362:	4618      	mov	r0, r3
 800c364:	f000 f874 	bl	800c450 <USBD_Get_USB_Status>
 800c368:	4603      	mov	r3, r0
 800c36a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c36c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c36e:	4618      	mov	r0, r3
 800c370:	3710      	adds	r7, #16
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}

0800c376 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c376:	b580      	push	{r7, lr}
 800c378:	b086      	sub	sp, #24
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	60f8      	str	r0, [r7, #12]
 800c37e:	607a      	str	r2, [r7, #4]
 800c380:	603b      	str	r3, [r7, #0]
 800c382:	460b      	mov	r3, r1
 800c384:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c386:	2300      	movs	r3, #0
 800c388:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c38a:	2300      	movs	r3, #0
 800c38c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c394:	7af9      	ldrb	r1, [r7, #11]
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	f7f7 fe7b 	bl	8004094 <HAL_PCD_EP_Transmit>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3a2:	7dfb      	ldrb	r3, [r7, #23]
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f000 f853 	bl	800c450 <USBD_Get_USB_Status>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3ae:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3718      	adds	r7, #24
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b086      	sub	sp, #24
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	607a      	str	r2, [r7, #4]
 800c3c2:	603b      	str	r3, [r7, #0]
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c3d6:	7af9      	ldrb	r1, [r7, #11]
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	f7f7 fe07 	bl	8003fee <HAL_PCD_EP_Receive>
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3e4:	7dfb      	ldrb	r3, [r7, #23]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f000 f832 	bl	800c450 <USBD_Get_USB_Status>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c3f0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3718      	adds	r7, #24
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}

0800c3fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3fa:	b580      	push	{r7, lr}
 800c3fc:	b082      	sub	sp, #8
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
 800c402:	460b      	mov	r3, r1
 800c404:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c40c:	78fa      	ldrb	r2, [r7, #3]
 800c40e:	4611      	mov	r1, r2
 800c410:	4618      	mov	r0, r3
 800c412:	f7f7 fe27 	bl	8004064 <HAL_PCD_EP_GetRxCount>
 800c416:	4603      	mov	r3, r0
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3708      	adds	r7, #8
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c420:	b480      	push	{r7}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c428:	4b03      	ldr	r3, [pc, #12]	@ (800c438 <USBD_static_malloc+0x18>)
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	370c      	adds	r7, #12
 800c42e:	46bd      	mov	sp, r7
 800c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c434:	4770      	bx	lr
 800c436:	bf00      	nop
 800c438:	20002200 	.word	0x20002200

0800c43c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]

}
 800c444:	bf00      	nop
 800c446:	370c      	adds	r7, #12
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr

0800c450 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c450:	b480      	push	{r7}
 800c452:	b085      	sub	sp, #20
 800c454:	af00      	add	r7, sp, #0
 800c456:	4603      	mov	r3, r0
 800c458:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c45a:	2300      	movs	r3, #0
 800c45c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c45e:	79fb      	ldrb	r3, [r7, #7]
 800c460:	2b03      	cmp	r3, #3
 800c462:	d817      	bhi.n	800c494 <USBD_Get_USB_Status+0x44>
 800c464:	a201      	add	r2, pc, #4	@ (adr r2, 800c46c <USBD_Get_USB_Status+0x1c>)
 800c466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c46a:	bf00      	nop
 800c46c:	0800c47d 	.word	0x0800c47d
 800c470:	0800c483 	.word	0x0800c483
 800c474:	0800c489 	.word	0x0800c489
 800c478:	0800c48f 	.word	0x0800c48f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c47c:	2300      	movs	r3, #0
 800c47e:	73fb      	strb	r3, [r7, #15]
    break;
 800c480:	e00b      	b.n	800c49a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c482:	2303      	movs	r3, #3
 800c484:	73fb      	strb	r3, [r7, #15]
    break;
 800c486:	e008      	b.n	800c49a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c488:	2301      	movs	r3, #1
 800c48a:	73fb      	strb	r3, [r7, #15]
    break;
 800c48c:	e005      	b.n	800c49a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c48e:	2303      	movs	r3, #3
 800c490:	73fb      	strb	r3, [r7, #15]
    break;
 800c492:	e002      	b.n	800c49a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c494:	2303      	movs	r3, #3
 800c496:	73fb      	strb	r3, [r7, #15]
    break;
 800c498:	bf00      	nop
  }
  return usb_status;
 800c49a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3714      	adds	r7, #20
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <memset>:
 800c4a8:	4402      	add	r2, r0
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d100      	bne.n	800c4b2 <memset+0xa>
 800c4b0:	4770      	bx	lr
 800c4b2:	f803 1b01 	strb.w	r1, [r3], #1
 800c4b6:	e7f9      	b.n	800c4ac <memset+0x4>

0800c4b8 <__libc_init_array>:
 800c4b8:	b570      	push	{r4, r5, r6, lr}
 800c4ba:	4d0d      	ldr	r5, [pc, #52]	@ (800c4f0 <__libc_init_array+0x38>)
 800c4bc:	4c0d      	ldr	r4, [pc, #52]	@ (800c4f4 <__libc_init_array+0x3c>)
 800c4be:	1b64      	subs	r4, r4, r5
 800c4c0:	10a4      	asrs	r4, r4, #2
 800c4c2:	2600      	movs	r6, #0
 800c4c4:	42a6      	cmp	r6, r4
 800c4c6:	d109      	bne.n	800c4dc <__libc_init_array+0x24>
 800c4c8:	4d0b      	ldr	r5, [pc, #44]	@ (800c4f8 <__libc_init_array+0x40>)
 800c4ca:	4c0c      	ldr	r4, [pc, #48]	@ (800c4fc <__libc_init_array+0x44>)
 800c4cc:	f000 f826 	bl	800c51c <_init>
 800c4d0:	1b64      	subs	r4, r4, r5
 800c4d2:	10a4      	asrs	r4, r4, #2
 800c4d4:	2600      	movs	r6, #0
 800c4d6:	42a6      	cmp	r6, r4
 800c4d8:	d105      	bne.n	800c4e6 <__libc_init_array+0x2e>
 800c4da:	bd70      	pop	{r4, r5, r6, pc}
 800c4dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4e0:	4798      	blx	r3
 800c4e2:	3601      	adds	r6, #1
 800c4e4:	e7ee      	b.n	800c4c4 <__libc_init_array+0xc>
 800c4e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4ea:	4798      	blx	r3
 800c4ec:	3601      	adds	r6, #1
 800c4ee:	e7f2      	b.n	800c4d6 <__libc_init_array+0x1e>
 800c4f0:	0800c5d4 	.word	0x0800c5d4
 800c4f4:	0800c5d4 	.word	0x0800c5d4
 800c4f8:	0800c5d4 	.word	0x0800c5d4
 800c4fc:	0800c5d8 	.word	0x0800c5d8

0800c500 <memcpy>:
 800c500:	440a      	add	r2, r1
 800c502:	4291      	cmp	r1, r2
 800c504:	f100 33ff 	add.w	r3, r0, #4294967295
 800c508:	d100      	bne.n	800c50c <memcpy+0xc>
 800c50a:	4770      	bx	lr
 800c50c:	b510      	push	{r4, lr}
 800c50e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c512:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c516:	4291      	cmp	r1, r2
 800c518:	d1f9      	bne.n	800c50e <memcpy+0xe>
 800c51a:	bd10      	pop	{r4, pc}

0800c51c <_init>:
 800c51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c51e:	bf00      	nop
 800c520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c522:	bc08      	pop	{r3}
 800c524:	469e      	mov	lr, r3
 800c526:	4770      	bx	lr

0800c528 <_fini>:
 800c528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c52a:	bf00      	nop
 800c52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c52e:	bc08      	pop	{r3}
 800c530:	469e      	mov	lr, r3
 800c532:	4770      	bx	lr
