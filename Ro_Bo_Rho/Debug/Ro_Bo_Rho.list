
Ro_Bo_Rho.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4b4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800c63c  0800c63c  0000d63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6e4  0800c6e4  0000e110  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6e4  0800c6e4  0000d6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6ec  0800c6ec  0000e110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6ec  0800c6ec  0000d6ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c6f0  0800c6f0  0000d6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  0800c6f4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e110  2**0
                  CONTENTS
 10 .bss          00002320  20000110  20000110  0000e110  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002430  20002430  0000e110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e110  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ea42  00000000  00000000  0000e140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004557  00000000  00000000  0002cb82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ba8  00000000  00000000  000310e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001595  00000000  00000000  00032c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027492  00000000  00000000  0003421d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002453e  00000000  00000000  0005b6af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e15f0  00000000  00000000  0007fbed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001611dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000075f8  00000000  00000000  00161220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00168818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000110 	.word	0x20000110
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c624 	.word	0x0800c624

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000114 	.word	0x20000114
 80001c4:	0800c624 	.word	0x0800c624

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f001 fe9a 	bl	80021f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 fadc 	bl	8000a7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f001 f826 	bl	8001514 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004c8:	f000 fc50 	bl	8000d6c <MX_TIM2_Init>
  MX_TIM4_Init();
 80004cc:	f000 fcf6 	bl	8000ebc <MX_TIM4_Init>
  MX_ADC1_Init();
 80004d0:	f000 fb3e 	bl	8000b50 <MX_ADC1_Init>
  MX_SPI2_Init();
 80004d4:	f000 fbbc 	bl	8000c50 <MX_SPI2_Init>
  MX_TIM1_Init();
 80004d8:	f000 fbf0 	bl	8000cbc <MX_TIM1_Init>
  MX_TIM8_Init();
 80004dc:	f000 fd96 	bl	800100c <MX_TIM8_Init>
  MX_TIM9_Init();
 80004e0:	f000 fdec 	bl	80010bc <MX_TIM9_Init>
  MX_TIM10_Init();
 80004e4:	f000 fe3a 	bl	800115c <MX_TIM10_Init>
  MX_TIM11_Init();
 80004e8:	f000 fe86 	bl	80011f8 <MX_TIM11_Init>
  MX_TIM12_Init();
 80004ec:	f000 fed2 	bl	8001294 <MX_TIM12_Init>
  MX_TIM13_Init();
 80004f0:	f000 ff20 	bl	8001334 <MX_TIM13_Init>
  MX_TIM14_Init();
 80004f4:	f000 ff6c 	bl	80013d0 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 80004f8:	f000 ffe2 	bl	80014c0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80004fc:	f00b fb4c 	bl	800bb98 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8000500:	f000 ffb4 	bl	800146c <MX_UART4_Init>
  MX_I2C2_Init();
 8000504:	f000 fb76 	bl	8000bf4 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000508:	f000 fc84 	bl	8000e14 <MX_TIM3_Init>
  MX_TIM5_Init();
 800050c:	f000 fd2a 	bl	8000f64 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
   Motor_setup_LF(&htim14   ,&htim5    ,"PC05");
 8000510:	4a47      	ldr	r2, [pc, #284]	@ (8000630 <main+0x178>)
 8000512:	4948      	ldr	r1, [pc, #288]	@ (8000634 <main+0x17c>)
 8000514:	4848      	ldr	r0, [pc, #288]	@ (8000638 <main+0x180>)
 8000516:	f007 ffed 	bl	80084f4 <Motor_setup_LF>
   Motor_setup_LB(&htim12   ,&htim1    ,"PE12");
 800051a:	4a48      	ldr	r2, [pc, #288]	@ (800063c <main+0x184>)
 800051c:	4948      	ldr	r1, [pc, #288]	@ (8000640 <main+0x188>)
 800051e:	4849      	ldr	r0, [pc, #292]	@ (8000644 <main+0x18c>)
 8000520:	f008 f816 	bl	8008550 <Motor_setup_LB>
   Motor_setup_RF(&htim11   ,&htim8    ,"PE01");
 8000524:	4a48      	ldr	r2, [pc, #288]	@ (8000648 <main+0x190>)
 8000526:	4949      	ldr	r1, [pc, #292]	@ (800064c <main+0x194>)
 8000528:	4849      	ldr	r0, [pc, #292]	@ (8000650 <main+0x198>)
 800052a:	f008 f83f 	bl	80085ac <Motor_setup_RF>
   Motor_setup_RB(&htim12   ,&htim4    ,"PD09");
 800052e:	4a49      	ldr	r2, [pc, #292]	@ (8000654 <main+0x19c>)
 8000530:	4949      	ldr	r1, [pc, #292]	@ (8000658 <main+0x1a0>)
 8000532:	4844      	ldr	r0, [pc, #272]	@ (8000644 <main+0x18c>)
 8000534:	f008 f868 	bl	8008608 <Motor_setup_RB>
   Motor_setup_EXTRA1(&htim9,&htim3    ,"PC13");
 8000538:	4a48      	ldr	r2, [pc, #288]	@ (800065c <main+0x1a4>)
 800053a:	4949      	ldr	r1, [pc, #292]	@ (8000660 <main+0x1a8>)
 800053c:	4849      	ldr	r0, [pc, #292]	@ (8000664 <main+0x1ac>)
 800053e:	f008 f891 	bl	8008664 <Motor_setup_EXTRA1>
   Motor_setup_EXTRA2(&htim10,&htim2   ,"PE00");
 8000542:	4a49      	ldr	r2, [pc, #292]	@ (8000668 <main+0x1b0>)
 8000544:	4949      	ldr	r1, [pc, #292]	@ (800066c <main+0x1b4>)
 8000546:	484a      	ldr	r0, [pc, #296]	@ (8000670 <main+0x1b8>)
 8000548:	f008 f8ba 	bl	80086c0 <Motor_setup_EXTRA2>

   Setup_Gear_Ratio(27);
 800054c:	201b      	movs	r0, #27
 800054e:	f008 f905 	bl	800875c <Setup_Gear_Ratio>
   Setup_CPR(68);
 8000552:	2044      	movs	r0, #68	@ 0x44
 8000554:	f008 f8f2 	bl	800873c <Setup_CPR>
   Setup_frequency_Motor(100);
 8000558:	2064      	movs	r0, #100	@ 0x64
 800055a:	f008 f90f 	bl	800877c <Setup_frequency_Motor>

   Setup_PID_LF(1.0 ,0.0 ,0.1 ,0 ,280);
 800055e:	ed9f 2a45 	vldr	s4, [pc, #276]	@ 8000674 <main+0x1bc>
 8000562:	eddf 1a45 	vldr	s3, [pc, #276]	@ 8000678 <main+0x1c0>
 8000566:	ed9f 1a45 	vldr	s2, [pc, #276]	@ 800067c <main+0x1c4>
 800056a:	eddf 0a43 	vldr	s1, [pc, #268]	@ 8000678 <main+0x1c0>
 800056e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000572:	f008 f99b 	bl	80088ac <Setup_PID_LF>
   Setup_PID_LB(1.0 ,0.0 ,0.1 ,0 ,280);
 8000576:	ed9f 2a3f 	vldr	s4, [pc, #252]	@ 8000674 <main+0x1bc>
 800057a:	eddf 1a3f 	vldr	s3, [pc, #252]	@ 8000678 <main+0x1c0>
 800057e:	ed9f 1a3f 	vldr	s2, [pc, #252]	@ 800067c <main+0x1c4>
 8000582:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 8000678 <main+0x1c0>
 8000586:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800058a:	f008 f9bb 	bl	8008904 <Setup_PID_LB>
   Setup_PID_RF(1.0 ,0.0 ,0.1 ,0 ,280);
 800058e:	ed9f 2a39 	vldr	s4, [pc, #228]	@ 8000674 <main+0x1bc>
 8000592:	eddf 1a39 	vldr	s3, [pc, #228]	@ 8000678 <main+0x1c0>
 8000596:	ed9f 1a39 	vldr	s2, [pc, #228]	@ 800067c <main+0x1c4>
 800059a:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8000678 <main+0x1c0>
 800059e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80005a2:	f008 f9db 	bl	800895c <Setup_PID_RF>
   Setup_PID_RB(1.0 ,0.0 ,0.1 ,0 ,280);
 80005a6:	ed9f 2a33 	vldr	s4, [pc, #204]	@ 8000674 <main+0x1bc>
 80005aa:	eddf 1a33 	vldr	s3, [pc, #204]	@ 8000678 <main+0x1c0>
 80005ae:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 800067c <main+0x1c4>
 80005b2:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8000678 <main+0x1c0>
 80005b6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80005ba:	f008 f9fb 	bl	80089b4 <Setup_PID_RB>
//   Setup_PID_EXTRA1(0.5 ,0.1 ,0 ,0 ,280);
//   Setup_PID_EXTRA2(0.5 ,0.1 ,0 ,0 ,280);

   Setup_frequency_Forward_Kinematic(100);
 80005be:	2064      	movs	r0, #100	@ 0x64
 80005c0:	f009 fa32 	bl	8009a28 <Setup_frequency_Forward_Kinematic>
   Setup_Forward_Kinematic(0.23f ,0.23f ,0.06f);
 80005c4:	ed9f 1a2e 	vldr	s2, [pc, #184]	@ 8000680 <main+0x1c8>
 80005c8:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 8000684 <main+0x1cc>
 80005cc:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8000684 <main+0x1cc>
 80005d0:	f009 fa0c 	bl	80099ec <Setup_Forward_Kinematic>

   Setup_Inverse_Kinematic(0.23f ,0.23f ,0.06f);
 80005d4:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 8000680 <main+0x1c8>
 80005d8:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8000684 <main+0x1cc>
 80005dc:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8000684 <main+0x1cc>
 80005e0:	f009 fa32 	bl	8009a48 <Setup_Inverse_Kinematic>

   //UAST2 esp_s3_zero to STM32
   HAL_UART_Receive_IT(&huart2, (uint8_t *)&Str_PS2, sizeof(Str_PS2));
 80005e4:	2212      	movs	r2, #18
 80005e6:	4928      	ldr	r1, [pc, #160]	@ (8000688 <main+0x1d0>)
 80005e8:	4828      	ldr	r0, [pc, #160]	@ (800068c <main+0x1d4>)
 80005ea:	f005 fd17 	bl	800601c <HAL_UART_Receive_IT>
    /* USER CODE BEGIN 3 */

//	  CDC_Transmit_FS((uint8_t*)RPM ,6);
//	  HAL_Delay(1000);

	  if ((uwTick - PastTime) > 10){
 80005ee:	4b28      	ldr	r3, [pc, #160]	@ (8000690 <main+0x1d8>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a28      	ldr	r2, [pc, #160]	@ (8000694 <main+0x1dc>)
 80005f4:	6812      	ldr	r2, [r2, #0]
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	2b0a      	cmp	r3, #10
 80005fa:	d9f8      	bls.n	80005ee <main+0x136>
		  PastTime = uwTick;
 80005fc:	4b24      	ldr	r3, [pc, #144]	@ (8000690 <main+0x1d8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	461a      	mov	r2, r3
 8000602:	4b24      	ldr	r3, [pc, #144]	@ (8000694 <main+0x1dc>)
 8000604:	601a      	str	r2, [r3, #0]

	      if (((uwTick - last_uart_data_time) < UART_TIMEOUT_MS) && (Str_PS2.seting[1] == 1)){
 8000606:	4b22      	ldr	r3, [pc, #136]	@ (8000690 <main+0x1d8>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b23      	ldr	r3, [pc, #140]	@ (8000698 <main+0x1e0>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000614:	d244      	bcs.n	80006a0 <main+0x1e8>
 8000616:	4b1c      	ldr	r3, [pc, #112]	@ (8000688 <main+0x1d0>)
 8000618:	7b5b      	ldrb	r3, [r3, #13]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d140      	bne.n	80006a0 <main+0x1e8>
	          digitalWrite("PE07", 1);
 800061e:	2101      	movs	r1, #1
 8000620:	481e      	ldr	r0, [pc, #120]	@ (800069c <main+0x1e4>)
 8000622:	f008 fe7d 	bl	8009320 <digitalWrite>
	   	      Str_PS2.seting[1] = 0;
 8000626:	4b18      	ldr	r3, [pc, #96]	@ (8000688 <main+0x1d0>)
 8000628:	2200      	movs	r2, #0
 800062a:	735a      	strb	r2, [r3, #13]
 800062c:	e07e      	b.n	800072c <main+0x274>
 800062e:	bf00      	nop
 8000630:	0800c63c 	.word	0x0800c63c
 8000634:	20000340 	.word	0x20000340
 8000638:	20000538 	.word	0x20000538
 800063c:	0800c644 	.word	0x0800c644
 8000640:	20000220 	.word	0x20000220
 8000644:	200004a8 	.word	0x200004a8
 8000648:	0800c64c 	.word	0x0800c64c
 800064c:	20000388 	.word	0x20000388
 8000650:	20000460 	.word	0x20000460
 8000654:	0800c654 	.word	0x0800c654
 8000658:	200002f8 	.word	0x200002f8
 800065c:	0800c65c 	.word	0x0800c65c
 8000660:	200002b0 	.word	0x200002b0
 8000664:	200003d0 	.word	0x200003d0
 8000668:	0800c664 	.word	0x0800c664
 800066c:	20000268 	.word	0x20000268
 8000670:	20000418 	.word	0x20000418
 8000674:	438c0000 	.word	0x438c0000
 8000678:	00000000 	.word	0x00000000
 800067c:	3dcccccd 	.word	0x3dcccccd
 8000680:	3d75c28f 	.word	0x3d75c28f
 8000684:	3e6b851f 	.word	0x3e6b851f
 8000688:	20000640 	.word	0x20000640
 800068c:	200005c8 	.word	0x200005c8
 8000690:	20000658 	.word	0x20000658
 8000694:	20000624 	.word	0x20000624
 8000698:	2000061c 	.word	0x2000061c
 800069c:	0800c66c 	.word	0x0800c66c
	     }else{
	   	 // ถ้า UART ไม่มีข้อมูลเกินเวลาที่กำหนด และยังไม่รีเซ็ต
	   	 if (!uart_resetting && ((uwTick - last_uart_data_time) > UART_TIMEOUT_MS)){
 80006a0:	4bc8      	ldr	r3, [pc, #800]	@ (80009c4 <main+0x50c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d12f      	bne.n	8000708 <main+0x250>
 80006a8:	4bc7      	ldr	r3, [pc, #796]	@ (80009c8 <main+0x510>)
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	4bc7      	ldr	r3, [pc, #796]	@ (80009cc <main+0x514>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	1ad3      	subs	r3, r2, r3
 80006b2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80006b6:	d927      	bls.n	8000708 <main+0x250>
	   	    uart_resetting = 1;  // ตั้ง flag เพื่อป้องกัน reset ซ้ำซ้อน
 80006b8:	4bc2      	ldr	r3, [pc, #776]	@ (80009c4 <main+0x50c>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	701a      	strb	r2, [r3, #0]

	   	    HAL_UART_DeInit(&huart2);     // ปิด UART
 80006be:	48c4      	ldr	r0, [pc, #784]	@ (80009d0 <main+0x518>)
 80006c0:	f005 fc7a 	bl	8005fb8 <HAL_UART_DeInit>
	   	    HAL_Delay(10);                // หน่วงนิดนึง
 80006c4:	200a      	movs	r0, #10
 80006c6:	f001 fe07 	bl	80022d8 <HAL_Delay>
	   	    MX_USART2_UART_Init();        // เรียกฟังก์ชัน init ใหม่ (สร้างจาก STM32CubeMX)
 80006ca:	f000 fef9 	bl	80014c0 <MX_USART2_UART_Init>

	   	    HAL_UART_Receive_IT(&huart2, (uint8_t *)&Str_PS2, sizeof(Str_PS2));
 80006ce:	2212      	movs	r2, #18
 80006d0:	49c0      	ldr	r1, [pc, #768]	@ (80009d4 <main+0x51c>)
 80006d2:	48bf      	ldr	r0, [pc, #764]	@ (80009d0 <main+0x518>)
 80006d4:	f005 fca2 	bl	800601c <HAL_UART_Receive_IT>

	   	    memset(Str_PS2.move, 0, 4);
 80006d8:	2204      	movs	r2, #4
 80006da:	2100      	movs	r1, #0
 80006dc:	48bd      	ldr	r0, [pc, #756]	@ (80009d4 <main+0x51c>)
 80006de:	f00b ff67 	bl	800c5b0 <memset>
	   	 	memset(Str_PS2.attack, 0, 8);
 80006e2:	2208      	movs	r2, #8
 80006e4:	2100      	movs	r1, #0
 80006e6:	48bc      	ldr	r0, [pc, #752]	@ (80009d8 <main+0x520>)
 80006e8:	f00b ff62 	bl	800c5b0 <memset>
	   	 	memset(Str_PS2.seting, 0, 2);
 80006ec:	2202      	movs	r2, #2
 80006ee:	2100      	movs	r1, #0
 80006f0:	48ba      	ldr	r0, [pc, #744]	@ (80009dc <main+0x524>)
 80006f2:	f00b ff5d 	bl	800c5b0 <memset>
	   	 	memset(Str_PS2.stickValues, 128, 4);
 80006f6:	2204      	movs	r2, #4
 80006f8:	2180      	movs	r1, #128	@ 0x80
 80006fa:	48b9      	ldr	r0, [pc, #740]	@ (80009e0 <main+0x528>)
 80006fc:	f00b ff58 	bl	800c5b0 <memset>

	   	    digitalWrite("PE07", 0);
 8000700:	2100      	movs	r1, #0
 8000702:	48b8      	ldr	r0, [pc, #736]	@ (80009e4 <main+0x52c>)
 8000704:	f008 fe0c 	bl	8009320 <digitalWrite>
	      }
	   	      // หยุดมอเตอร์เพื่อความปลอดภัย
	   	      Motor_DutyCycle_LF(0);
 8000708:	2000      	movs	r0, #0
 800070a:	f008 fa29 	bl	8008b60 <Motor_DutyCycle_LF>
	   	      Motor_DutyCycle_LB(0);
 800070e:	2000      	movs	r0, #0
 8000710:	f008 fa7e 	bl	8008c10 <Motor_DutyCycle_LB>
	   	      Motor_DutyCycle_RF(0);
 8000714:	2000      	movs	r0, #0
 8000716:	f008 fad7 	bl	8008cc8 <Motor_DutyCycle_RF>
	   	      Motor_DutyCycle_RB(0);
 800071a:	2000      	movs	r0, #0
 800071c:	f008 fb30 	bl	8008d80 <Motor_DutyCycle_RB>
	   	      Motor_DutyCycle_EXTRA1(0);
 8000720:	2000      	movs	r0, #0
 8000722:	f008 fb85 	bl	8008e30 <Motor_DutyCycle_EXTRA1>
	   	      Motor_DutyCycle_EXTRA2(0);
 8000726:	2000      	movs	r0, #0
 8000728:	f008 fbda 	bl	8008ee0 <Motor_DutyCycle_EXTRA2>
	   }

	      Vx = map(Str_PS2.stickValues[1], 0.0f, 255.0f, 2.0f, -2.0f);
 800072c:	4ba9      	ldr	r3, [pc, #676]	@ (80009d4 <main+0x51c>)
 800072e:	7bdb      	ldrb	r3, [r3, #15]
 8000730:	ee07 3a90 	vmov	s15, r3
 8000734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000738:	eeb8 2a00 	vmov.f32	s4, #128	@ 0xc0000000 -2.0
 800073c:	eef0 1a00 	vmov.f32	s3, #0	@ 0x40000000  2.0
 8000740:	ed9f 1aa9 	vldr	s2, [pc, #676]	@ 80009e8 <main+0x530>
 8000744:	eddf 0aa9 	vldr	s1, [pc, #676]	@ 80009ec <main+0x534>
 8000748:	eeb0 0a67 	vmov.f32	s0, s15
 800074c:	f009 fa64 	bl	8009c18 <map>
 8000750:	eef0 7a40 	vmov.f32	s15, s0
 8000754:	4ba6      	ldr	r3, [pc, #664]	@ (80009f0 <main+0x538>)
 8000756:	edc3 7a00 	vstr	s15, [r3]
	      Vy = map(Str_PS2.stickValues[0], 0.0f, 255.0f, 2.0f, -2.0f);
 800075a:	4b9e      	ldr	r3, [pc, #632]	@ (80009d4 <main+0x51c>)
 800075c:	7b9b      	ldrb	r3, [r3, #14]
 800075e:	ee07 3a90 	vmov	s15, r3
 8000762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000766:	eeb8 2a00 	vmov.f32	s4, #128	@ 0xc0000000 -2.0
 800076a:	eef0 1a00 	vmov.f32	s3, #0	@ 0x40000000  2.0
 800076e:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 80009e8 <main+0x530>
 8000772:	eddf 0a9e 	vldr	s1, [pc, #632]	@ 80009ec <main+0x534>
 8000776:	eeb0 0a67 	vmov.f32	s0, s15
 800077a:	f009 fa4d 	bl	8009c18 <map>
 800077e:	eef0 7a40 	vmov.f32	s15, s0
 8000782:	4b9c      	ldr	r3, [pc, #624]	@ (80009f4 <main+0x53c>)
 8000784:	edc3 7a00 	vstr	s15, [r3]
	      Vz = map(Str_PS2.stickValues[3], 0.0f, 255.0f, 4.0f, -4.0f);
 8000788:	4b92      	ldr	r3, [pc, #584]	@ (80009d4 <main+0x51c>)
 800078a:	7c5b      	ldrb	r3, [r3, #17]
 800078c:	ee07 3a90 	vmov	s15, r3
 8000790:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000794:	eeb9 2a00 	vmov.f32	s4, #144	@ 0xc0800000 -4.0
 8000798:	eef1 1a00 	vmov.f32	s3, #16	@ 0x40800000  4.0
 800079c:	ed9f 1a92 	vldr	s2, [pc, #584]	@ 80009e8 <main+0x530>
 80007a0:	eddf 0a92 	vldr	s1, [pc, #584]	@ 80009ec <main+0x534>
 80007a4:	eeb0 0a67 	vmov.f32	s0, s15
 80007a8:	f009 fa36 	bl	8009c18 <map>
 80007ac:	eef0 7a40 	vmov.f32	s15, s0
 80007b0:	4b91      	ldr	r3, [pc, #580]	@ (80009f8 <main+0x540>)
 80007b2:	edc3 7a00 	vstr	s15, [r3]
	      		  //	    count[2] = getCount(&htim8);
	      		  //	    count[3] = getCount(&htim4);
	      		  //	    count[4] = getCount(&htim2);
	      		  //	    count[5] = getCount(&htim3);

	      	RPM[0] = getRPM_TIM_Wheel(&htim5 ,LF);
 80007b6:	2100      	movs	r1, #0
 80007b8:	4890      	ldr	r0, [pc, #576]	@ (80009fc <main+0x544>)
 80007ba:	f008 f809 	bl	80087d0 <getRPM_TIM_Wheel>
 80007be:	eef0 7a40 	vmov.f32	s15, s0
 80007c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007c6:	ee17 3a90 	vmov	r3, s15
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	4b8c      	ldr	r3, [pc, #560]	@ (8000a00 <main+0x548>)
 80007ce:	801a      	strh	r2, [r3, #0]
	      	RPM[1] = -getRPM_TIM_Wheel(&htim1 ,LB);
 80007d0:	2101      	movs	r1, #1
 80007d2:	488c      	ldr	r0, [pc, #560]	@ (8000a04 <main+0x54c>)
 80007d4:	f007 fffc 	bl	80087d0 <getRPM_TIM_Wheel>
 80007d8:	eef0 7a40 	vmov.f32	s15, s0
 80007dc:	eef1 7a67 	vneg.f32	s15, s15
 80007e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007e4:	ee17 3a90 	vmov	r3, s15
 80007e8:	b21a      	sxth	r2, r3
 80007ea:	4b85      	ldr	r3, [pc, #532]	@ (8000a00 <main+0x548>)
 80007ec:	805a      	strh	r2, [r3, #2]
	      	RPM[2] = getRPM_TIM_Wheel(&htim8 ,RF);
 80007ee:	2102      	movs	r1, #2
 80007f0:	4885      	ldr	r0, [pc, #532]	@ (8000a08 <main+0x550>)
 80007f2:	f007 ffed 	bl	80087d0 <getRPM_TIM_Wheel>
 80007f6:	eef0 7a40 	vmov.f32	s15, s0
 80007fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007fe:	ee17 3a90 	vmov	r3, s15
 8000802:	b21a      	sxth	r2, r3
 8000804:	4b7e      	ldr	r3, [pc, #504]	@ (8000a00 <main+0x548>)
 8000806:	809a      	strh	r2, [r3, #4]
	      	RPM[3] = getRPM_TIM_Wheel(&htim4 ,RB);
 8000808:	2103      	movs	r1, #3
 800080a:	4880      	ldr	r0, [pc, #512]	@ (8000a0c <main+0x554>)
 800080c:	f007 ffe0 	bl	80087d0 <getRPM_TIM_Wheel>
 8000810:	eef0 7a40 	vmov.f32	s15, s0
 8000814:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000818:	ee17 3a90 	vmov	r3, s15
 800081c:	b21a      	sxth	r2, r3
 800081e:	4b78      	ldr	r3, [pc, #480]	@ (8000a00 <main+0x548>)
 8000820:	80da      	strh	r2, [r3, #6]
	      		  //	    RPM[5] = getRPM_TIM_Wheel(&htim2 ,EXTRA2);

	      		  //		Odometry_Forward_Kinematic(getRPM_to_Rad_s(RPM[0]), getRPM_to_Rad_s(RPM[1]), getRPM_to_Rad_s(RPM[2]), getRPM_to_Rad_s(RPM[3]));
	      		  //		x = get_Vz();

	      	Inverse_Kinematic(Vx ,Vy ,Vz);
 8000822:	4b73      	ldr	r3, [pc, #460]	@ (80009f0 <main+0x538>)
 8000824:	edd3 7a00 	vldr	s15, [r3]
 8000828:	4b72      	ldr	r3, [pc, #456]	@ (80009f4 <main+0x53c>)
 800082a:	ed93 7a00 	vldr	s14, [r3]
 800082e:	4b72      	ldr	r3, [pc, #456]	@ (80009f8 <main+0x540>)
 8000830:	edd3 6a00 	vldr	s13, [r3]
 8000834:	eeb0 1a66 	vmov.f32	s2, s13
 8000838:	eef0 0a47 	vmov.f32	s1, s14
 800083c:	eeb0 0a67 	vmov.f32	s0, s15
 8000840:	f009 f920 	bl	8009a84 <Inverse_Kinematic>

	      	PID[0] = Motor_Speed_LF(getRad_s_to_RPM(get_w_LF()) ,RPM[0]);
 8000844:	f009 f9b0 	bl	8009ba8 <get_w_LF>
 8000848:	eef0 7a40 	vmov.f32	s15, s0
 800084c:	eeb0 0a67 	vmov.f32	s0, s15
 8000850:	f007 ffa4 	bl	800879c <getRad_s_to_RPM>
 8000854:	eef0 7a40 	vmov.f32	s15, s0
 8000858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800085c:	ee17 3a90 	vmov	r3, s15
 8000860:	b21b      	sxth	r3, r3
 8000862:	4a67      	ldr	r2, [pc, #412]	@ (8000a00 <main+0x548>)
 8000864:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000868:	ee07 2a90 	vmov	s15, r2
 800086c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000870:	eeb0 0a67 	vmov.f32	s0, s15
 8000874:	4618      	mov	r0, r3
 8000876:	f008 fb8b 	bl	8008f90 <Motor_Speed_LF>
 800087a:	eef0 7a40 	vmov.f32	s15, s0
 800087e:	4b64      	ldr	r3, [pc, #400]	@ (8000a10 <main+0x558>)
 8000880:	edc3 7a00 	vstr	s15, [r3]
	      	PID[1] = Motor_Speed_LB(getRad_s_to_RPM(get_w_LB()) ,RPM[1]);
 8000884:	f009 f99e 	bl	8009bc4 <get_w_LB>
 8000888:	eef0 7a40 	vmov.f32	s15, s0
 800088c:	eeb0 0a67 	vmov.f32	s0, s15
 8000890:	f007 ff84 	bl	800879c <getRad_s_to_RPM>
 8000894:	eef0 7a40 	vmov.f32	s15, s0
 8000898:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800089c:	ee17 3a90 	vmov	r3, s15
 80008a0:	b21b      	sxth	r3, r3
 80008a2:	4a57      	ldr	r2, [pc, #348]	@ (8000a00 <main+0x548>)
 80008a4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80008a8:	ee07 2a90 	vmov	s15, r2
 80008ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008b0:	eeb0 0a67 	vmov.f32	s0, s15
 80008b4:	4618      	mov	r0, r3
 80008b6:	f008 fbdd 	bl	8009074 <Motor_Speed_LB>
 80008ba:	eef0 7a40 	vmov.f32	s15, s0
 80008be:	4b54      	ldr	r3, [pc, #336]	@ (8000a10 <main+0x558>)
 80008c0:	edc3 7a01 	vstr	s15, [r3, #4]
	      	PID[2] = Motor_Speed_RF(getRad_s_to_RPM(get_w_RF()) ,RPM[2]);
 80008c4:	f009 f98c 	bl	8009be0 <get_w_RF>
 80008c8:	eef0 7a40 	vmov.f32	s15, s0
 80008cc:	eeb0 0a67 	vmov.f32	s0, s15
 80008d0:	f007 ff64 	bl	800879c <getRad_s_to_RPM>
 80008d4:	eef0 7a40 	vmov.f32	s15, s0
 80008d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008dc:	ee17 3a90 	vmov	r3, s15
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	4a47      	ldr	r2, [pc, #284]	@ (8000a00 <main+0x548>)
 80008e4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80008e8:	ee07 2a90 	vmov	s15, r2
 80008ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008f0:	eeb0 0a67 	vmov.f32	s0, s15
 80008f4:	4618      	mov	r0, r3
 80008f6:	f008 fc2f 	bl	8009158 <Motor_Speed_RF>
 80008fa:	eef0 7a40 	vmov.f32	s15, s0
 80008fe:	4b44      	ldr	r3, [pc, #272]	@ (8000a10 <main+0x558>)
 8000900:	edc3 7a02 	vstr	s15, [r3, #8]
	      	PID[3] = Motor_Speed_RB(getRad_s_to_RPM(get_w_RB()) ,RPM[3]);
 8000904:	f009 f97a 	bl	8009bfc <get_w_RB>
 8000908:	eef0 7a40 	vmov.f32	s15, s0
 800090c:	eeb0 0a67 	vmov.f32	s0, s15
 8000910:	f007 ff44 	bl	800879c <getRad_s_to_RPM>
 8000914:	eef0 7a40 	vmov.f32	s15, s0
 8000918:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800091c:	ee17 3a90 	vmov	r3, s15
 8000920:	b21b      	sxth	r3, r3
 8000922:	4a37      	ldr	r2, [pc, #220]	@ (8000a00 <main+0x548>)
 8000924:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000928:	ee07 2a90 	vmov	s15, r2
 800092c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000930:	eeb0 0a67 	vmov.f32	s0, s15
 8000934:	4618      	mov	r0, r3
 8000936:	f008 fc81 	bl	800923c <Motor_Speed_RB>
 800093a:	eef0 7a40 	vmov.f32	s15, s0
 800093e:	4b34      	ldr	r3, [pc, #208]	@ (8000a10 <main+0x558>)
 8000940:	edc3 7a03 	vstr	s15, [r3, #12]
	      	//	    PID[1] = Motor_Speed_LB(-180 ,RPM[1]);
	      	//	    PID[2] = Motor_Speed_RF(-180 ,RPM[2]);
	      	//	    PID[3] = Motor_Speed_RB(-180 ,RPM[3]);


	      	if ((Str_PS2.attack[2] == 1) && (lastButtonState_load_Ball == 0)) {
 8000944:	4b23      	ldr	r3, [pc, #140]	@ (80009d4 <main+0x51c>)
 8000946:	799b      	ldrb	r3, [r3, #6]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d113      	bne.n	8000974 <main+0x4bc>
 800094c:	4b31      	ldr	r3, [pc, #196]	@ (8000a14 <main+0x55c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d10f      	bne.n	8000974 <main+0x4bc>
	      	   status_load_Ball = !status_load_Ball;
 8000954:	4b30      	ldr	r3, [pc, #192]	@ (8000a18 <main+0x560>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	bf0c      	ite	eq
 800095c:	2301      	moveq	r3, #1
 800095e:	2300      	movne	r3, #0
 8000960:	b2db      	uxtb	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	4b2c      	ldr	r3, [pc, #176]	@ (8000a18 <main+0x560>)
 8000966:	701a      	strb	r2, [r3, #0]
	      	   digitalWrite("PE10", status_load_Ball);
 8000968:	4b2b      	ldr	r3, [pc, #172]	@ (8000a18 <main+0x560>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	482b      	ldr	r0, [pc, #172]	@ (8000a1c <main+0x564>)
 8000970:	f008 fcd6 	bl	8009320 <digitalWrite>
	      	}
	      	lastButtonState_load_Ball = Str_PS2.attack[2];
 8000974:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <main+0x51c>)
 8000976:	799a      	ldrb	r2, [r3, #6]
 8000978:	4b26      	ldr	r3, [pc, #152]	@ (8000a14 <main+0x55c>)
 800097a:	701a      	strb	r2, [r3, #0]

	      	if ((Str_PS2.attack[1] == 1) && (lastButtonState_re_Ball == 0)) {
 800097c:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <main+0x51c>)
 800097e:	795b      	ldrb	r3, [r3, #5]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d113      	bne.n	80009ac <main+0x4f4>
 8000984:	4b26      	ldr	r3, [pc, #152]	@ (8000a20 <main+0x568>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d10f      	bne.n	80009ac <main+0x4f4>
	      		status_re_Ball = !status_re_Ball;
 800098c:	4b25      	ldr	r3, [pc, #148]	@ (8000a24 <main+0x56c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	bf0c      	ite	eq
 8000994:	2301      	moveq	r3, #1
 8000996:	2300      	movne	r3, #0
 8000998:	b2db      	uxtb	r3, r3
 800099a:	461a      	mov	r2, r3
 800099c:	4b21      	ldr	r3, [pc, #132]	@ (8000a24 <main+0x56c>)
 800099e:	701a      	strb	r2, [r3, #0]
	      		digitalWrite("PE08", status_re_Ball);
 80009a0:	4b20      	ldr	r3, [pc, #128]	@ (8000a24 <main+0x56c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	4820      	ldr	r0, [pc, #128]	@ (8000a28 <main+0x570>)
 80009a8:	f008 fcba 	bl	8009320 <digitalWrite>
	      	}
	      	lastButtonState_re_Ball = Str_PS2.attack[1];
 80009ac:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <main+0x51c>)
 80009ae:	795a      	ldrb	r2, [r3, #5]
 80009b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a20 <main+0x568>)
 80009b2:	701a      	strb	r2, [r3, #0]


	      	if(Str_PS2.attack[5] == 1){
 80009b4:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <main+0x51c>)
 80009b6:	7a5b      	ldrb	r3, [r3, #9]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d13a      	bne.n	8000a32 <main+0x57a>
	      		Motor_DutyCycle_EXTRA1(-2000);
 80009bc:	481b      	ldr	r0, [pc, #108]	@ (8000a2c <main+0x574>)
 80009be:	f008 fa37 	bl	8008e30 <Motor_DutyCycle_EXTRA1>
 80009c2:	e035      	b.n	8000a30 <main+0x578>
 80009c4:	20000620 	.word	0x20000620
 80009c8:	20000658 	.word	0x20000658
 80009cc:	2000061c 	.word	0x2000061c
 80009d0:	200005c8 	.word	0x200005c8
 80009d4:	20000640 	.word	0x20000640
 80009d8:	20000644 	.word	0x20000644
 80009dc:	2000064c 	.word	0x2000064c
 80009e0:	2000064e 	.word	0x2000064e
 80009e4:	0800c66c 	.word	0x0800c66c
 80009e8:	437f0000 	.word	0x437f0000
 80009ec:	00000000 	.word	0x00000000
 80009f0:	20000610 	.word	0x20000610
 80009f4:	20000614 	.word	0x20000614
 80009f8:	20000618 	.word	0x20000618
 80009fc:	20000340 	.word	0x20000340
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000220 	.word	0x20000220
 8000a08:	20000388 	.word	0x20000388
 8000a0c:	200002f8 	.word	0x200002f8
 8000a10:	20000628 	.word	0x20000628
 8000a14:	20000654 	.word	0x20000654
 8000a18:	20000652 	.word	0x20000652
 8000a1c:	0800c674 	.word	0x0800c674
 8000a20:	20000655 	.word	0x20000655
 8000a24:	20000653 	.word	0x20000653
 8000a28:	0800c67c 	.word	0x0800c67c
 8000a2c:	fffff830 	.word	0xfffff830
 8000a30:	e00b      	b.n	8000a4a <main+0x592>
	      	}else if(Str_PS2.attack[7] == 1){
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <main+0x5bc>)
 8000a34:	7adb      	ldrb	r3, [r3, #11]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d104      	bne.n	8000a44 <main+0x58c>
	      		Motor_DutyCycle_EXTRA1(2000);
 8000a3a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a3e:	f008 f9f7 	bl	8008e30 <Motor_DutyCycle_EXTRA1>
 8000a42:	e002      	b.n	8000a4a <main+0x592>
	      	}else{
	      		Motor_DutyCycle_EXTRA1(0);
 8000a44:	2000      	movs	r0, #0
 8000a46:	f008 f9f3 	bl	8008e30 <Motor_DutyCycle_EXTRA1>
	      	}


	      	if(Str_PS2.attack[3] == 1){
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <main+0x5bc>)
 8000a4c:	79db      	ldrb	r3, [r3, #7]
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d104      	bne.n	8000a5c <main+0x5a4>
	      		Motor_DutyCycle_EXTRA2(4000);
 8000a52:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000a56:	f008 fa43 	bl	8008ee0 <Motor_DutyCycle_EXTRA2>
 8000a5a:	e5c8      	b.n	80005ee <main+0x136>
	      	}else if(Str_PS2.attack[0] == 1){
 8000a5c:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <main+0x5bc>)
 8000a5e:	791b      	ldrb	r3, [r3, #4]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d103      	bne.n	8000a6c <main+0x5b4>
	      		Motor_DutyCycle_EXTRA2(-4000);
 8000a64:	4804      	ldr	r0, [pc, #16]	@ (8000a78 <main+0x5c0>)
 8000a66:	f008 fa3b 	bl	8008ee0 <Motor_DutyCycle_EXTRA2>
 8000a6a:	e5c0      	b.n	80005ee <main+0x136>
	      	}else{
	      		Motor_DutyCycle_EXTRA2(0);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f008 fa37 	bl	8008ee0 <Motor_DutyCycle_EXTRA2>
	  if ((uwTick - PastTime) > 10){
 8000a72:	e5bc      	b.n	80005ee <main+0x136>
 8000a74:	20000640 	.word	0x20000640
 8000a78:	fffff060 	.word	0xfffff060

08000a7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b094      	sub	sp, #80	@ 0x50
 8000a80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a82:	f107 0320 	add.w	r3, r7, #32
 8000a86:	2230      	movs	r2, #48	@ 0x30
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f00b fd90 	bl	800c5b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	4b28      	ldr	r3, [pc, #160]	@ (8000b48 <SystemClock_Config+0xcc>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa8:	4a27      	ldr	r2, [pc, #156]	@ (8000b48 <SystemClock_Config+0xcc>)
 8000aaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab0:	4b25      	ldr	r3, [pc, #148]	@ (8000b48 <SystemClock_Config+0xcc>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000abc:	2300      	movs	r3, #0
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	4b22      	ldr	r3, [pc, #136]	@ (8000b4c <SystemClock_Config+0xd0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a21      	ldr	r2, [pc, #132]	@ (8000b4c <SystemClock_Config+0xd0>)
 8000ac6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <SystemClock_Config+0xd0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000adc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 7;
 8000aec:	2307      	movs	r3, #7
 8000aee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000af0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000af4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000af6:	2304      	movs	r3, #4
 8000af8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000afa:	2308      	movs	r3, #8
 8000afc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afe:	f107 0320 	add.w	r3, r7, #32
 8000b02:	4618      	mov	r0, r3
 8000b04:	f003 fe8c 	bl	8004820 <HAL_RCC_OscConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b0e:	f000 fde7 	bl	80016e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b12:	230f      	movs	r3, #15
 8000b14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b16:	2302      	movs	r3, #2
 8000b18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b1e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b2a:	f107 030c 	add.w	r3, r7, #12
 8000b2e:	2103      	movs	r1, #3
 8000b30:	4618      	mov	r0, r3
 8000b32:	f004 f8ed 	bl	8004d10 <HAL_RCC_ClockConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b3c:	f000 fdd0 	bl	80016e0 <Error_Handler>
  }
}
 8000b40:	bf00      	nop
 8000b42:	3750      	adds	r7, #80	@ 0x50
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40007000 	.word	0x40007000

08000b50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b56:	463b      	mov	r3, r7
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b62:	4b21      	ldr	r3, [pc, #132]	@ (8000be8 <MX_ADC1_Init+0x98>)
 8000b64:	4a21      	ldr	r2, [pc, #132]	@ (8000bec <MX_ADC1_Init+0x9c>)
 8000b66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b68:	4b1f      	ldr	r3, [pc, #124]	@ (8000be8 <MX_ADC1_Init+0x98>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000be8 <MX_ADC1_Init+0x98>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b74:	4b1c      	ldr	r3, [pc, #112]	@ (8000be8 <MX_ADC1_Init+0x98>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <MX_ADC1_Init+0x98>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b80:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <MX_ADC1_Init+0x98>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b88:	4b17      	ldr	r3, [pc, #92]	@ (8000be8 <MX_ADC1_Init+0x98>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b8e:	4b16      	ldr	r3, [pc, #88]	@ (8000be8 <MX_ADC1_Init+0x98>)
 8000b90:	4a17      	ldr	r2, [pc, #92]	@ (8000bf0 <MX_ADC1_Init+0xa0>)
 8000b92:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b94:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <MX_ADC1_Init+0x98>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b9a:	4b13      	ldr	r3, [pc, #76]	@ (8000be8 <MX_ADC1_Init+0x98>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <MX_ADC1_Init+0x98>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <MX_ADC1_Init+0x98>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bae:	480e      	ldr	r0, [pc, #56]	@ (8000be8 <MX_ADC1_Init+0x98>)
 8000bb0:	f001 fbb6 	bl	8002320 <HAL_ADC_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bba:	f000 fd91 	bl	80016e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bca:	463b      	mov	r3, r7
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4806      	ldr	r0, [pc, #24]	@ (8000be8 <MX_ADC1_Init+0x98>)
 8000bd0:	f001 fbea 	bl	80023a8 <HAL_ADC_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000bda:	f000 fd81 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000012c 	.word	0x2000012c
 8000bec:	40012000 	.word	0x40012000
 8000bf0:	0f000001 	.word	0x0f000001

08000bf4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <MX_I2C2_Init+0x50>)
 8000bfa:	4a13      	ldr	r2, [pc, #76]	@ (8000c48 <MX_I2C2_Init+0x54>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	@ (8000c44 <MX_I2C2_Init+0x50>)
 8000c00:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <MX_I2C2_Init+0x58>)
 8000c02:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <MX_I2C2_Init+0x50>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <MX_I2C2_Init+0x50>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <MX_I2C2_Init+0x50>)
 8000c12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c16:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c18:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <MX_I2C2_Init+0x50>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	@ (8000c44 <MX_I2C2_Init+0x50>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c24:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <MX_I2C2_Init+0x50>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c2a:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <MX_I2C2_Init+0x50>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c30:	4804      	ldr	r0, [pc, #16]	@ (8000c44 <MX_I2C2_Init+0x50>)
 8000c32:	f002 fa5f 	bl	80030f4 <HAL_I2C_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c3c:	f000 fd50 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000174 	.word	0x20000174
 8000c48:	40005800 	.word	0x40005800
 8000c4c:	00061a80 	.word	0x00061a80

08000c50 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c54:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <MX_SPI2_Init+0x64>)
 8000c56:	4a18      	ldr	r2, [pc, #96]	@ (8000cb8 <MX_SPI2_Init+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c5a:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <MX_SPI2_Init+0x64>)
 8000c5c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c62:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <MX_SPI2_Init+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <MX_SPI2_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <MX_SPI2_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <MX_SPI2_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <MX_SPI2_Init+0x64>)
 8000c7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c80:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <MX_SPI2_Init+0x64>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <MX_SPI2_Init+0x64>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <MX_SPI2_Init+0x64>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c94:	4b07      	ldr	r3, [pc, #28]	@ (8000cb4 <MX_SPI2_Init+0x64>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <MX_SPI2_Init+0x64>)
 8000c9c:	220a      	movs	r2, #10
 8000c9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	@ (8000cb4 <MX_SPI2_Init+0x64>)
 8000ca2:	f004 fa55 	bl	8005150 <HAL_SPI_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000cac:	f000 fd18 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200001c8 	.word	0x200001c8
 8000cb8:	40003800 	.word	0x40003800

08000cbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08c      	sub	sp, #48	@ 0x30
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	2224      	movs	r2, #36	@ 0x24
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f00b fc70 	bl	800c5b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cd8:	4b22      	ldr	r3, [pc, #136]	@ (8000d64 <MX_TIM1_Init+0xa8>)
 8000cda:	4a23      	ldr	r2, [pc, #140]	@ (8000d68 <MX_TIM1_Init+0xac>)
 8000cdc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000cde:	4b21      	ldr	r3, [pc, #132]	@ (8000d64 <MX_TIM1_Init+0xa8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d64 <MX_TIM1_Init+0xa8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cea:	4b1e      	ldr	r3, [pc, #120]	@ (8000d64 <MX_TIM1_Init+0xa8>)
 8000cec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cf0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <MX_TIM1_Init+0xa8>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d64 <MX_TIM1_Init+0xa8>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfe:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <MX_TIM1_Init+0xa8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d04:	2303      	movs	r3, #3
 8000d06:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480d      	ldr	r0, [pc, #52]	@ (8000d64 <MX_TIM1_Init+0xa8>)
 8000d30:	f004 fbfe 	bl	8005530 <HAL_TIM_Encoder_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000d3a:	f000 fcd1 	bl	80016e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4806      	ldr	r0, [pc, #24]	@ (8000d64 <MX_TIM1_Init+0xa8>)
 8000d4c:	f005 f868 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000d56:	f000 fcc3 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	3730      	adds	r7, #48	@ 0x30
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000220 	.word	0x20000220
 8000d68:	40010000 	.word	0x40010000

08000d6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08c      	sub	sp, #48	@ 0x30
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d72:	f107 030c 	add.w	r3, r7, #12
 8000d76:	2224      	movs	r2, #36	@ 0x24
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f00b fc18 	bl	800c5b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d80:	1d3b      	adds	r3, r7, #4
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d88:	4b21      	ldr	r3, [pc, #132]	@ (8000e10 <MX_TIM2_Init+0xa4>)
 8000d8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d90:	4b1f      	ldr	r3, [pc, #124]	@ (8000e10 <MX_TIM2_Init+0xa4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d96:	4b1e      	ldr	r3, [pc, #120]	@ (8000e10 <MX_TIM2_Init+0xa4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e10 <MX_TIM2_Init+0xa4>)
 8000d9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000da2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <MX_TIM2_Init+0xa4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000daa:	4b19      	ldr	r3, [pc, #100]	@ (8000e10 <MX_TIM2_Init+0xa4>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000db0:	2303      	movs	r3, #3
 8000db2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000db4:	2300      	movs	r3, #0
 8000db6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000db8:	2301      	movs	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480d      	ldr	r0, [pc, #52]	@ (8000e10 <MX_TIM2_Init+0xa4>)
 8000ddc:	f004 fba8 	bl	8005530 <HAL_TIM_Encoder_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000de6:	f000 fc7b 	bl	80016e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	4619      	mov	r1, r3
 8000df6:	4806      	ldr	r0, [pc, #24]	@ (8000e10 <MX_TIM2_Init+0xa4>)
 8000df8:	f005 f812 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000e02:	f000 fc6d 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	3730      	adds	r7, #48	@ 0x30
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000268 	.word	0x20000268

08000e14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08c      	sub	sp, #48	@ 0x30
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	2224      	movs	r2, #36	@ 0x24
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f00b fbc4 	bl	800c5b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e30:	4b20      	ldr	r3, [pc, #128]	@ (8000eb4 <MX_TIM3_Init+0xa0>)
 8000e32:	4a21      	ldr	r2, [pc, #132]	@ (8000eb8 <MX_TIM3_Init+0xa4>)
 8000e34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e36:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb4 <MX_TIM3_Init+0xa0>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb4 <MX_TIM3_Init+0xa0>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e42:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <MX_TIM3_Init+0xa0>)
 8000e44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb4 <MX_TIM3_Init+0xa0>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e50:	4b18      	ldr	r3, [pc, #96]	@ (8000eb4 <MX_TIM3_Init+0xa0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e56:	2303      	movs	r3, #3
 8000e58:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	4619      	mov	r1, r3
 8000e80:	480c      	ldr	r0, [pc, #48]	@ (8000eb4 <MX_TIM3_Init+0xa0>)
 8000e82:	f004 fb55 	bl	8005530 <HAL_TIM_Encoder_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000e8c:	f000 fc28 	bl	80016e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <MX_TIM3_Init+0xa0>)
 8000e9e:	f004 ffbf 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000ea8:	f000 fc1a 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	3730      	adds	r7, #48	@ 0x30
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200002b0 	.word	0x200002b0
 8000eb8:	40000400 	.word	0x40000400

08000ebc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08c      	sub	sp, #48	@ 0x30
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	2224      	movs	r2, #36	@ 0x24
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f00b fb70 	bl	800c5b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ed8:	4b20      	ldr	r3, [pc, #128]	@ (8000f5c <MX_TIM4_Init+0xa0>)
 8000eda:	4a21      	ldr	r2, [pc, #132]	@ (8000f60 <MX_TIM4_Init+0xa4>)
 8000edc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ede:	4b1f      	ldr	r3, [pc, #124]	@ (8000f5c <MX_TIM4_Init+0xa0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f5c <MX_TIM4_Init+0xa0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	@ (8000f5c <MX_TIM4_Init+0xa0>)
 8000eec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ef0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f5c <MX_TIM4_Init+0xa0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <MX_TIM4_Init+0xa0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000efe:	2303      	movs	r3, #3
 8000f00:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f06:	2301      	movs	r3, #1
 8000f08:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f16:	2301      	movs	r3, #1
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	4619      	mov	r1, r3
 8000f28:	480c      	ldr	r0, [pc, #48]	@ (8000f5c <MX_TIM4_Init+0xa0>)
 8000f2a:	f004 fb01 	bl	8005530 <HAL_TIM_Encoder_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000f34:	f000 fbd4 	bl	80016e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	@ (8000f5c <MX_TIM4_Init+0xa0>)
 8000f46:	f004 ff6b 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000f50:	f000 fbc6 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	3730      	adds	r7, #48	@ 0x30
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200002f8 	.word	0x200002f8
 8000f60:	40000800 	.word	0x40000800

08000f64 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08c      	sub	sp, #48	@ 0x30
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	2224      	movs	r2, #36	@ 0x24
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f00b fb1c 	bl	800c5b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f80:	4b20      	ldr	r3, [pc, #128]	@ (8001004 <MX_TIM5_Init+0xa0>)
 8000f82:	4a21      	ldr	r2, [pc, #132]	@ (8001008 <MX_TIM5_Init+0xa4>)
 8000f84:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f86:	4b1f      	ldr	r3, [pc, #124]	@ (8001004 <MX_TIM5_Init+0xa0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001004 <MX_TIM5_Init+0xa0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000f92:	4b1c      	ldr	r3, [pc, #112]	@ (8001004 <MX_TIM5_Init+0xa0>)
 8000f94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f98:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001004 <MX_TIM5_Init+0xa0>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa0:	4b18      	ldr	r3, [pc, #96]	@ (8001004 <MX_TIM5_Init+0xa0>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480c      	ldr	r0, [pc, #48]	@ (8001004 <MX_TIM5_Init+0xa0>)
 8000fd2:	f004 faad 	bl	8005530 <HAL_TIM_Encoder_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000fdc:	f000 fb80 	bl	80016e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fe8:	1d3b      	adds	r3, r7, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	4805      	ldr	r0, [pc, #20]	@ (8001004 <MX_TIM5_Init+0xa0>)
 8000fee:	f004 ff17 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000ff8:	f000 fb72 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000ffc:	bf00      	nop
 8000ffe:	3730      	adds	r7, #48	@ 0x30
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000340 	.word	0x20000340
 8001008:	40000c00 	.word	0x40000c00

0800100c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	@ 0x30
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	2224      	movs	r2, #36	@ 0x24
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f00b fac8 	bl	800c5b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001028:	4b22      	ldr	r3, [pc, #136]	@ (80010b4 <MX_TIM8_Init+0xa8>)
 800102a:	4a23      	ldr	r2, [pc, #140]	@ (80010b8 <MX_TIM8_Init+0xac>)
 800102c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800102e:	4b21      	ldr	r3, [pc, #132]	@ (80010b4 <MX_TIM8_Init+0xa8>)
 8001030:	2200      	movs	r2, #0
 8001032:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001034:	4b1f      	ldr	r3, [pc, #124]	@ (80010b4 <MX_TIM8_Init+0xa8>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800103a:	4b1e      	ldr	r3, [pc, #120]	@ (80010b4 <MX_TIM8_Init+0xa8>)
 800103c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001040:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001042:	4b1c      	ldr	r3, [pc, #112]	@ (80010b4 <MX_TIM8_Init+0xa8>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001048:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <MX_TIM8_Init+0xa8>)
 800104a:	2200      	movs	r2, #0
 800104c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104e:	4b19      	ldr	r3, [pc, #100]	@ (80010b4 <MX_TIM8_Init+0xa8>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001054:	2303      	movs	r3, #3
 8001056:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001058:	2300      	movs	r3, #0
 800105a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800105c:	2301      	movs	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001060:	2300      	movs	r3, #0
 8001062:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800106c:	2301      	movs	r3, #1
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	4619      	mov	r1, r3
 800107e:	480d      	ldr	r0, [pc, #52]	@ (80010b4 <MX_TIM8_Init+0xa8>)
 8001080:	f004 fa56 	bl	8005530 <HAL_TIM_Encoder_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800108a:	f000 fb29 	bl	80016e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	@ (80010b4 <MX_TIM8_Init+0xa8>)
 800109c:	f004 fec0 	bl	8005e20 <HAL_TIMEx_MasterConfigSynchronization>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80010a6:	f000 fb1b 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	3730      	adds	r7, #48	@ 0x30
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000388 	.word	0x20000388
 80010b8:	40010400 	.word	0x40010400

080010bc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
 80010d0:	615a      	str	r2, [r3, #20]
 80010d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80010d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001154 <MX_TIM9_Init+0x98>)
 80010d6:	4a20      	ldr	r2, [pc, #128]	@ (8001158 <MX_TIM9_Init+0x9c>)
 80010d8:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 2-1;
 80010da:	4b1e      	ldr	r3, [pc, #120]	@ (8001154 <MX_TIM9_Init+0x98>)
 80010dc:	2201      	movs	r2, #1
 80010de:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001154 <MX_TIM9_Init+0x98>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4096-1;
 80010e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001154 <MX_TIM9_Init+0x98>)
 80010e8:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80010ec:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ee:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <MX_TIM9_Init+0x98>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f4:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <MX_TIM9_Init+0x98>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80010fa:	4816      	ldr	r0, [pc, #88]	@ (8001154 <MX_TIM9_Init+0x98>)
 80010fc:	f004 f900 	bl	8005300 <HAL_TIM_PWM_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001106:	f000 faeb 	bl	80016e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800110a:	2360      	movs	r3, #96	@ 0x60
 800110c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2200      	movs	r2, #0
 800111e:	4619      	mov	r1, r3
 8001120:	480c      	ldr	r0, [pc, #48]	@ (8001154 <MX_TIM9_Init+0x98>)
 8001122:	f004 fb39 	bl	8005798 <HAL_TIM_PWM_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 800112c:	f000 fad8 	bl	80016e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2204      	movs	r2, #4
 8001134:	4619      	mov	r1, r3
 8001136:	4807      	ldr	r0, [pc, #28]	@ (8001154 <MX_TIM9_Init+0x98>)
 8001138:	f004 fb2e 	bl	8005798 <HAL_TIM_PWM_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001142:	f000 facd 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001146:	4803      	ldr	r0, [pc, #12]	@ (8001154 <MX_TIM9_Init+0x98>)
 8001148:	f000 fe1a 	bl	8001d80 <HAL_TIM_MspPostInit>

}
 800114c:	bf00      	nop
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200003d0 	.word	0x200003d0
 8001158:	40014000 	.word	0x40014000

0800115c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
 8001170:	615a      	str	r2, [r3, #20]
 8001172:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001174:	4b1e      	ldr	r3, [pc, #120]	@ (80011f0 <MX_TIM10_Init+0x94>)
 8001176:	4a1f      	ldr	r2, [pc, #124]	@ (80011f4 <MX_TIM10_Init+0x98>)
 8001178:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 2-1;
 800117a:	4b1d      	ldr	r3, [pc, #116]	@ (80011f0 <MX_TIM10_Init+0x94>)
 800117c:	2201      	movs	r2, #1
 800117e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001180:	4b1b      	ldr	r3, [pc, #108]	@ (80011f0 <MX_TIM10_Init+0x94>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4096-1;
 8001186:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <MX_TIM10_Init+0x94>)
 8001188:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800118c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118e:	4b18      	ldr	r3, [pc, #96]	@ (80011f0 <MX_TIM10_Init+0x94>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001194:	4b16      	ldr	r3, [pc, #88]	@ (80011f0 <MX_TIM10_Init+0x94>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800119a:	4815      	ldr	r0, [pc, #84]	@ (80011f0 <MX_TIM10_Init+0x94>)
 800119c:	f004 f861 	bl	8005262 <HAL_TIM_Base_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80011a6:	f000 fa9b 	bl	80016e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80011aa:	4811      	ldr	r0, [pc, #68]	@ (80011f0 <MX_TIM10_Init+0x94>)
 80011ac:	f004 f8a8 	bl	8005300 <HAL_TIM_PWM_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80011b6:	f000 fa93 	bl	80016e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ba:	2360      	movs	r3, #96	@ 0x60
 80011bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	2200      	movs	r2, #0
 80011ce:	4619      	mov	r1, r3
 80011d0:	4807      	ldr	r0, [pc, #28]	@ (80011f0 <MX_TIM10_Init+0x94>)
 80011d2:	f004 fae1 	bl	8005798 <HAL_TIM_PWM_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80011dc:	f000 fa80 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80011e0:	4803      	ldr	r0, [pc, #12]	@ (80011f0 <MX_TIM10_Init+0x94>)
 80011e2:	f000 fdcd 	bl	8001d80 <HAL_TIM_MspPostInit>

}
 80011e6:	bf00      	nop
 80011e8:	3720      	adds	r7, #32
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000418 	.word	0x20000418
 80011f4:	40014400 	.word	0x40014400

080011f8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
 800120c:	615a      	str	r2, [r3, #20]
 800120e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001210:	4b1e      	ldr	r3, [pc, #120]	@ (800128c <MX_TIM11_Init+0x94>)
 8001212:	4a1f      	ldr	r2, [pc, #124]	@ (8001290 <MX_TIM11_Init+0x98>)
 8001214:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2-1;
 8001216:	4b1d      	ldr	r3, [pc, #116]	@ (800128c <MX_TIM11_Init+0x94>)
 8001218:	2201      	movs	r2, #1
 800121a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121c:	4b1b      	ldr	r3, [pc, #108]	@ (800128c <MX_TIM11_Init+0x94>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 4096-1;
 8001222:	4b1a      	ldr	r3, [pc, #104]	@ (800128c <MX_TIM11_Init+0x94>)
 8001224:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001228:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122a:	4b18      	ldr	r3, [pc, #96]	@ (800128c <MX_TIM11_Init+0x94>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001230:	4b16      	ldr	r3, [pc, #88]	@ (800128c <MX_TIM11_Init+0x94>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001236:	4815      	ldr	r0, [pc, #84]	@ (800128c <MX_TIM11_Init+0x94>)
 8001238:	f004 f813 	bl	8005262 <HAL_TIM_Base_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001242:	f000 fa4d 	bl	80016e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001246:	4811      	ldr	r0, [pc, #68]	@ (800128c <MX_TIM11_Init+0x94>)
 8001248:	f004 f85a 	bl	8005300 <HAL_TIM_PWM_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001252:	f000 fa45 	bl	80016e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001256:	2360      	movs	r3, #96	@ 0x60
 8001258:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2200      	movs	r2, #0
 800126a:	4619      	mov	r1, r3
 800126c:	4807      	ldr	r0, [pc, #28]	@ (800128c <MX_TIM11_Init+0x94>)
 800126e:	f004 fa93 	bl	8005798 <HAL_TIM_PWM_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001278:	f000 fa32 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800127c:	4803      	ldr	r0, [pc, #12]	@ (800128c <MX_TIM11_Init+0x94>)
 800127e:	f000 fd7f 	bl	8001d80 <HAL_TIM_MspPostInit>

}
 8001282:	bf00      	nop
 8001284:	3720      	adds	r7, #32
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000460 	.word	0x20000460
 8001290:	40014800 	.word	0x40014800

08001294 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
 80012a8:	615a      	str	r2, [r3, #20]
 80012aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80012ac:	4b1f      	ldr	r3, [pc, #124]	@ (800132c <MX_TIM12_Init+0x98>)
 80012ae:	4a20      	ldr	r2, [pc, #128]	@ (8001330 <MX_TIM12_Init+0x9c>)
 80012b0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 2-1;
 80012b2:	4b1e      	ldr	r3, [pc, #120]	@ (800132c <MX_TIM12_Init+0x98>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b8:	4b1c      	ldr	r3, [pc, #112]	@ (800132c <MX_TIM12_Init+0x98>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4096-1;
 80012be:	4b1b      	ldr	r3, [pc, #108]	@ (800132c <MX_TIM12_Init+0x98>)
 80012c0:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80012c4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c6:	4b19      	ldr	r3, [pc, #100]	@ (800132c <MX_TIM12_Init+0x98>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012cc:	4b17      	ldr	r3, [pc, #92]	@ (800132c <MX_TIM12_Init+0x98>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80012d2:	4816      	ldr	r0, [pc, #88]	@ (800132c <MX_TIM12_Init+0x98>)
 80012d4:	f004 f814 	bl	8005300 <HAL_TIM_PWM_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80012de:	f000 f9ff 	bl	80016e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e2:	2360      	movs	r3, #96	@ 0x60
 80012e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2200      	movs	r2, #0
 80012f6:	4619      	mov	r1, r3
 80012f8:	480c      	ldr	r0, [pc, #48]	@ (800132c <MX_TIM12_Init+0x98>)
 80012fa:	f004 fa4d 	bl	8005798 <HAL_TIM_PWM_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001304:	f000 f9ec 	bl	80016e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2204      	movs	r2, #4
 800130c:	4619      	mov	r1, r3
 800130e:	4807      	ldr	r0, [pc, #28]	@ (800132c <MX_TIM12_Init+0x98>)
 8001310:	f004 fa42 	bl	8005798 <HAL_TIM_PWM_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800131a:	f000 f9e1 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800131e:	4803      	ldr	r0, [pc, #12]	@ (800132c <MX_TIM12_Init+0x98>)
 8001320:	f000 fd2e 	bl	8001d80 <HAL_TIM_MspPostInit>

}
 8001324:	bf00      	nop
 8001326:	3720      	adds	r7, #32
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200004a8 	.word	0x200004a8
 8001330:	40001800 	.word	0x40001800

08001334 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
 8001348:	615a      	str	r2, [r3, #20]
 800134a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800134c:	4b1e      	ldr	r3, [pc, #120]	@ (80013c8 <MX_TIM13_Init+0x94>)
 800134e:	4a1f      	ldr	r2, [pc, #124]	@ (80013cc <MX_TIM13_Init+0x98>)
 8001350:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2-1;
 8001352:	4b1d      	ldr	r3, [pc, #116]	@ (80013c8 <MX_TIM13_Init+0x94>)
 8001354:	2201      	movs	r2, #1
 8001356:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001358:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <MX_TIM13_Init+0x94>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 4096-1;
 800135e:	4b1a      	ldr	r3, [pc, #104]	@ (80013c8 <MX_TIM13_Init+0x94>)
 8001360:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001364:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001366:	4b18      	ldr	r3, [pc, #96]	@ (80013c8 <MX_TIM13_Init+0x94>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136c:	4b16      	ldr	r3, [pc, #88]	@ (80013c8 <MX_TIM13_Init+0x94>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001372:	4815      	ldr	r0, [pc, #84]	@ (80013c8 <MX_TIM13_Init+0x94>)
 8001374:	f003 ff75 	bl	8005262 <HAL_TIM_Base_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800137e:	f000 f9af 	bl	80016e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001382:	4811      	ldr	r0, [pc, #68]	@ (80013c8 <MX_TIM13_Init+0x94>)
 8001384:	f003 ffbc 	bl	8005300 <HAL_TIM_PWM_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800138e:	f000 f9a7 	bl	80016e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001392:	2360      	movs	r3, #96	@ 0x60
 8001394:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2200      	movs	r2, #0
 80013a6:	4619      	mov	r1, r3
 80013a8:	4807      	ldr	r0, [pc, #28]	@ (80013c8 <MX_TIM13_Init+0x94>)
 80013aa:	f004 f9f5 	bl	8005798 <HAL_TIM_PWM_ConfigChannel>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80013b4:	f000 f994 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80013b8:	4803      	ldr	r0, [pc, #12]	@ (80013c8 <MX_TIM13_Init+0x94>)
 80013ba:	f000 fce1 	bl	8001d80 <HAL_TIM_MspPostInit>

}
 80013be:	bf00      	nop
 80013c0:	3720      	adds	r7, #32
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200004f0 	.word	0x200004f0
 80013cc:	40001c00 	.word	0x40001c00

080013d0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b088      	sub	sp, #32
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
 80013e4:	615a      	str	r2, [r3, #20]
 80013e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80013e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001464 <MX_TIM14_Init+0x94>)
 80013ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001468 <MX_TIM14_Init+0x98>)
 80013ec:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 2-1;
 80013ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001464 <MX_TIM14_Init+0x94>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <MX_TIM14_Init+0x94>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4096-1;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <MX_TIM14_Init+0x94>)
 80013fc:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001400:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001402:	4b18      	ldr	r3, [pc, #96]	@ (8001464 <MX_TIM14_Init+0x94>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001408:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <MX_TIM14_Init+0x94>)
 800140a:	2200      	movs	r2, #0
 800140c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800140e:	4815      	ldr	r0, [pc, #84]	@ (8001464 <MX_TIM14_Init+0x94>)
 8001410:	f003 ff27 	bl	8005262 <HAL_TIM_Base_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 800141a:	f000 f961 	bl	80016e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800141e:	4811      	ldr	r0, [pc, #68]	@ (8001464 <MX_TIM14_Init+0x94>)
 8001420:	f003 ff6e 	bl	8005300 <HAL_TIM_PWM_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 800142a:	f000 f959 	bl	80016e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142e:	2360      	movs	r3, #96	@ 0x60
 8001430:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2200      	movs	r2, #0
 8001442:	4619      	mov	r1, r3
 8001444:	4807      	ldr	r0, [pc, #28]	@ (8001464 <MX_TIM14_Init+0x94>)
 8001446:	f004 f9a7 	bl	8005798 <HAL_TIM_PWM_ConfigChannel>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001450:	f000 f946 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001454:	4803      	ldr	r0, [pc, #12]	@ (8001464 <MX_TIM14_Init+0x94>)
 8001456:	f000 fc93 	bl	8001d80 <HAL_TIM_MspPostInit>

}
 800145a:	bf00      	nop
 800145c:	3720      	adds	r7, #32
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000538 	.word	0x20000538
 8001468:	40002000 	.word	0x40002000

0800146c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001470:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <MX_UART4_Init+0x4c>)
 8001472:	4a12      	ldr	r2, [pc, #72]	@ (80014bc <MX_UART4_Init+0x50>)
 8001474:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001476:	4b10      	ldr	r3, [pc, #64]	@ (80014b8 <MX_UART4_Init+0x4c>)
 8001478:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800147c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <MX_UART4_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <MX_UART4_Init+0x4c>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800148a:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <MX_UART4_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001490:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <MX_UART4_Init+0x4c>)
 8001492:	220c      	movs	r2, #12
 8001494:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001496:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <MX_UART4_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <MX_UART4_Init+0x4c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80014a2:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <MX_UART4_Init+0x4c>)
 80014a4:	f004 fd38 	bl	8005f18 <HAL_UART_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80014ae:	f000 f917 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000580 	.word	0x20000580
 80014bc:	40004c00 	.word	0x40004c00

080014c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c4:	4b11      	ldr	r3, [pc, #68]	@ (800150c <MX_USART2_UART_Init+0x4c>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	@ (8001510 <MX_USART2_UART_Init+0x50>)
 80014c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ca:	4b10      	ldr	r3, [pc, #64]	@ (800150c <MX_USART2_UART_Init+0x4c>)
 80014cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	@ (800150c <MX_USART2_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	@ (800150c <MX_USART2_UART_Init+0x4c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014de:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <MX_USART2_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 80014e4:	4b09      	ldr	r3, [pc, #36]	@ (800150c <MX_USART2_UART_Init+0x4c>)
 80014e6:	2204      	movs	r2, #4
 80014e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	4b08      	ldr	r3, [pc, #32]	@ (800150c <MX_USART2_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <MX_USART2_UART_Init+0x4c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014f6:	4805      	ldr	r0, [pc, #20]	@ (800150c <MX_USART2_UART_Init+0x4c>)
 80014f8:	f004 fd0e 	bl	8005f18 <HAL_UART_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001502:	f000 f8ed 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200005c8 	.word	0x200005c8
 8001510:	40004400 	.word	0x40004400

08001514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08c      	sub	sp, #48	@ 0x30
 8001518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	f107 031c 	add.w	r3, r7, #28
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
 8001528:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
 800152e:	4b54      	ldr	r3, [pc, #336]	@ (8001680 <MX_GPIO_Init+0x16c>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	4a53      	ldr	r2, [pc, #332]	@ (8001680 <MX_GPIO_Init+0x16c>)
 8001534:	f043 0310 	orr.w	r3, r3, #16
 8001538:	6313      	str	r3, [r2, #48]	@ 0x30
 800153a:	4b51      	ldr	r3, [pc, #324]	@ (8001680 <MX_GPIO_Init+0x16c>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	61bb      	str	r3, [r7, #24]
 8001544:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	4b4d      	ldr	r3, [pc, #308]	@ (8001680 <MX_GPIO_Init+0x16c>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	4a4c      	ldr	r2, [pc, #304]	@ (8001680 <MX_GPIO_Init+0x16c>)
 8001550:	f043 0304 	orr.w	r3, r3, #4
 8001554:	6313      	str	r3, [r2, #48]	@ 0x30
 8001556:	4b4a      	ldr	r3, [pc, #296]	@ (8001680 <MX_GPIO_Init+0x16c>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	4b46      	ldr	r3, [pc, #280]	@ (8001680 <MX_GPIO_Init+0x16c>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	4a45      	ldr	r2, [pc, #276]	@ (8001680 <MX_GPIO_Init+0x16c>)
 800156c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001570:	6313      	str	r3, [r2, #48]	@ 0x30
 8001572:	4b43      	ldr	r3, [pc, #268]	@ (8001680 <MX_GPIO_Init+0x16c>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	4b3f      	ldr	r3, [pc, #252]	@ (8001680 <MX_GPIO_Init+0x16c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	4a3e      	ldr	r2, [pc, #248]	@ (8001680 <MX_GPIO_Init+0x16c>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	@ 0x30
 800158e:	4b3c      	ldr	r3, [pc, #240]	@ (8001680 <MX_GPIO_Init+0x16c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	4b38      	ldr	r3, [pc, #224]	@ (8001680 <MX_GPIO_Init+0x16c>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015a2:	4a37      	ldr	r2, [pc, #220]	@ (8001680 <MX_GPIO_Init+0x16c>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015aa:	4b35      	ldr	r3, [pc, #212]	@ (8001680 <MX_GPIO_Init+0x16c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
 80015ba:	4b31      	ldr	r3, [pc, #196]	@ (8001680 <MX_GPIO_Init+0x16c>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015be:	4a30      	ldr	r2, [pc, #192]	@ (8001680 <MX_GPIO_Init+0x16c>)
 80015c0:	f043 0308 	orr.w	r3, r3, #8
 80015c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001680 <MX_GPIO_Init+0x16c>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CE_1_Pin|CE_2_Pin|GPIO_PIN_7|GPIO_PIN_8
 80015d2:	2200      	movs	r2, #0
 80015d4:	f24b 518f 	movw	r1, #46479	@ 0xb58f
 80015d8:	482a      	ldr	r0, [pc, #168]	@ (8001684 <MX_GPIO_Init+0x170>)
 80015da:	f001 fd71 	bl	80030c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|LB_DIGI_R_Pin|GPIO_PIN_13|GPIO_PIN_15
                          |EXTRA2_DIGI_R_Pin|RF_DIGI_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EXTRA1_DIGI_R_Pin|LF_DIGI_R_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	f242 0120 	movw	r1, #8224	@ 0x2020
 80015e4:	4828      	ldr	r0, [pc, #160]	@ (8001688 <MX_GPIO_Init+0x174>)
 80015e6:	f001 fd6b 	bl	80030c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2101      	movs	r1, #1
 80015ee:	4827      	ldr	r0, [pc, #156]	@ (800168c <MX_GPIO_Init+0x178>)
 80015f0:	f001 fd66 	bl	80030c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RB_DIGI_R_GPIO_Port, RB_DIGI_R_Pin, GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015fa:	4825      	ldr	r0, [pc, #148]	@ (8001690 <MX_GPIO_Init+0x17c>)
 80015fc:	f001 fd60 	bl	80030c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_1_Pin CE_2_Pin PE7 PE8
                           PE10 LB_DIGI_R_Pin PE13 PE15
                           EXTRA2_DIGI_R_Pin RF_DIGI_R_Pin */
  GPIO_InitStruct.Pin = CE_1_Pin|CE_2_Pin|GPIO_PIN_7|GPIO_PIN_8
 8001600:	f24b 538f 	movw	r3, #46479	@ 0xb58f
 8001604:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|LB_DIGI_R_Pin|GPIO_PIN_13|GPIO_PIN_15
                          |EXTRA2_DIGI_R_Pin|RF_DIGI_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	4619      	mov	r1, r3
 8001618:	481a      	ldr	r0, [pc, #104]	@ (8001684 <MX_GPIO_Init+0x170>)
 800161a:	f001 fab9 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTRA1_DIGI_R_Pin LF_DIGI_R_Pin */
  GPIO_InitStruct.Pin = EXTRA1_DIGI_R_Pin|LF_DIGI_R_Pin;
 800161e:	f242 0320 	movw	r3, #8224	@ 0x2020
 8001622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001624:	2301      	movs	r3, #1
 8001626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162c:	2300      	movs	r3, #0
 800162e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	4619      	mov	r1, r3
 8001636:	4814      	ldr	r0, [pc, #80]	@ (8001688 <MX_GPIO_Init+0x174>)
 8001638:	f001 faaa 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800163c:	2301      	movs	r3, #1
 800163e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	480e      	ldr	r0, [pc, #56]	@ (800168c <MX_GPIO_Init+0x178>)
 8001654:	f001 fa9c 	bl	8002b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : RB_DIGI_R_Pin */
  GPIO_InitStruct.Pin = RB_DIGI_R_Pin;
 8001658:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800165c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RB_DIGI_R_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	4619      	mov	r1, r3
 8001670:	4807      	ldr	r0, [pc, #28]	@ (8001690 <MX_GPIO_Init+0x17c>)
 8001672:	f001 fa8d 	bl	8002b90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001676:	bf00      	nop
 8001678:	3730      	adds	r7, #48	@ 0x30
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800
 8001684:	40021000 	.word	0x40021000
 8001688:	40020800 	.word	0x40020800
 800168c:	40020400 	.word	0x40020400
 8001690:	40020c00 	.word	0x40020c00

08001694 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	 if (huart->Instance == USART2){
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a09      	ldr	r2, [pc, #36]	@ (80016c8 <HAL_UART_RxCpltCallback+0x34>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d10b      	bne.n	80016be <HAL_UART_RxCpltCallback+0x2a>
	    last_uart_data_time = uwTick;
 80016a6:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <HAL_UART_RxCpltCallback+0x38>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a09      	ldr	r2, [pc, #36]	@ (80016d0 <HAL_UART_RxCpltCallback+0x3c>)
 80016ac:	6013      	str	r3, [r2, #0]
	    uart_resetting = 0;  // กลับสู่สถานะปกติเมื่อมีข้อมูลเข้า
 80016ae:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <HAL_UART_RxCpltCallback+0x40>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
	    HAL_UART_Receive_IT(&huart2, (uint8_t *)&Str_PS2, sizeof(Str_PS2));
 80016b4:	2212      	movs	r2, #18
 80016b6:	4908      	ldr	r1, [pc, #32]	@ (80016d8 <HAL_UART_RxCpltCallback+0x44>)
 80016b8:	4808      	ldr	r0, [pc, #32]	@ (80016dc <HAL_UART_RxCpltCallback+0x48>)
 80016ba:	f004 fcaf 	bl	800601c <HAL_UART_Receive_IT>
	 }
//	Vx = map(Joy[1], 0.0f, 255.0f, -128.0f, 127.0f);
//	Vy = map(Joy[0], 0.0f, 255.0f, -128.0f, 127.0f);
//	Vz = map(Joy[3], 0.0f, 255.0f, -128.0f, 127.0f);
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40004400 	.word	0x40004400
 80016cc:	20000658 	.word	0x20000658
 80016d0:	2000061c 	.word	0x2000061c
 80016d4:	20000620 	.word	0x20000620
 80016d8:	20000640 	.word	0x20000640
 80016dc:	200005c8 	.word	0x200005c8

080016e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e4:	b672      	cpsid	i
}
 80016e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <Error_Handler+0x8>

080016ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <HAL_MspInit+0x4c>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fa:	4a0f      	ldr	r2, [pc, #60]	@ (8001738 <HAL_MspInit+0x4c>)
 80016fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001700:	6453      	str	r3, [r2, #68]	@ 0x44
 8001702:	4b0d      	ldr	r3, [pc, #52]	@ (8001738 <HAL_MspInit+0x4c>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <HAL_MspInit+0x4c>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	4a08      	ldr	r2, [pc, #32]	@ (8001738 <HAL_MspInit+0x4c>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800171c:	6413      	str	r3, [r2, #64]	@ 0x40
 800171e:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <HAL_MspInit+0x4c>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800

0800173c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	@ 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a24      	ldr	r2, [pc, #144]	@ (80017ec <HAL_ADC_MspInit+0xb0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d141      	bne.n	80017e2 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	4b23      	ldr	r3, [pc, #140]	@ (80017f0 <HAL_ADC_MspInit+0xb4>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001766:	4a22      	ldr	r2, [pc, #136]	@ (80017f0 <HAL_ADC_MspInit+0xb4>)
 8001768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800176c:	6453      	str	r3, [r2, #68]	@ 0x44
 800176e:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <HAL_ADC_MspInit+0xb4>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b1c      	ldr	r3, [pc, #112]	@ (80017f0 <HAL_ADC_MspInit+0xb4>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001782:	4a1b      	ldr	r2, [pc, #108]	@ (80017f0 <HAL_ADC_MspInit+0xb4>)
 8001784:	f043 0304 	orr.w	r3, r3, #4
 8001788:	6313      	str	r3, [r2, #48]	@ 0x30
 800178a:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <HAL_ADC_MspInit+0xb4>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <HAL_ADC_MspInit+0xb4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	4a14      	ldr	r2, [pc, #80]	@ (80017f0 <HAL_ADC_MspInit+0xb4>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a6:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_ADC_MspInit+0xb4>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017b2:	2303      	movs	r3, #3
 80017b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b6:	2303      	movs	r3, #3
 80017b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	480b      	ldr	r0, [pc, #44]	@ (80017f4 <HAL_ADC_MspInit+0xb8>)
 80017c6:	f001 f9e3 	bl	8002b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80017ca:	2330      	movs	r3, #48	@ 0x30
 80017cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ce:	2303      	movs	r3, #3
 80017d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	4806      	ldr	r0, [pc, #24]	@ (80017f8 <HAL_ADC_MspInit+0xbc>)
 80017de:	f001 f9d7 	bl	8002b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017e2:	bf00      	nop
 80017e4:	3728      	adds	r7, #40	@ 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40012000 	.word	0x40012000
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020800 	.word	0x40020800
 80017f8:	40020000 	.word	0x40020000

080017fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	@ 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a19      	ldr	r2, [pc, #100]	@ (8001880 <HAL_I2C_MspInit+0x84>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d12c      	bne.n	8001878 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b18      	ldr	r3, [pc, #96]	@ (8001884 <HAL_I2C_MspInit+0x88>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	4a17      	ldr	r2, [pc, #92]	@ (8001884 <HAL_I2C_MspInit+0x88>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	6313      	str	r3, [r2, #48]	@ 0x30
 800182e:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <HAL_I2C_MspInit+0x88>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800183a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800183e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001840:	2312      	movs	r3, #18
 8001842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800184c:	2304      	movs	r3, #4
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4619      	mov	r1, r3
 8001856:	480c      	ldr	r0, [pc, #48]	@ (8001888 <HAL_I2C_MspInit+0x8c>)
 8001858:	f001 f99a 	bl	8002b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <HAL_I2C_MspInit+0x88>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001864:	4a07      	ldr	r2, [pc, #28]	@ (8001884 <HAL_I2C_MspInit+0x88>)
 8001866:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800186a:	6413      	str	r3, [r2, #64]	@ 0x40
 800186c:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <HAL_I2C_MspInit+0x88>)
 800186e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001870:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001878:	bf00      	nop
 800187a:	3728      	adds	r7, #40	@ 0x28
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40005800 	.word	0x40005800
 8001884:	40023800 	.word	0x40023800
 8001888:	40020400 	.word	0x40020400

0800188c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	@ 0x28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a28      	ldr	r2, [pc, #160]	@ (800194c <HAL_SPI_MspInit+0xc0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d14a      	bne.n	8001944 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	4b27      	ldr	r3, [pc, #156]	@ (8001950 <HAL_SPI_MspInit+0xc4>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	4a26      	ldr	r2, [pc, #152]	@ (8001950 <HAL_SPI_MspInit+0xc4>)
 80018b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018be:	4b24      	ldr	r3, [pc, #144]	@ (8001950 <HAL_SPI_MspInit+0xc4>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <HAL_SPI_MspInit+0xc4>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001950 <HAL_SPI_MspInit+0xc4>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018da:	4b1d      	ldr	r3, [pc, #116]	@ (8001950 <HAL_SPI_MspInit+0xc4>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <HAL_SPI_MspInit+0xc4>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	4a18      	ldr	r2, [pc, #96]	@ (8001950 <HAL_SPI_MspInit+0xc4>)
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f6:	4b16      	ldr	r3, [pc, #88]	@ (8001950 <HAL_SPI_MspInit+0xc4>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001902:	230c      	movs	r3, #12
 8001904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001906:	2302      	movs	r3, #2
 8001908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190e:	2303      	movs	r3, #3
 8001910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001912:	2305      	movs	r3, #5
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	4619      	mov	r1, r3
 800191c:	480d      	ldr	r0, [pc, #52]	@ (8001954 <HAL_SPI_MspInit+0xc8>)
 800191e:	f001 f937 	bl	8002b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001922:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001934:	2305      	movs	r3, #5
 8001936:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	4806      	ldr	r0, [pc, #24]	@ (8001958 <HAL_SPI_MspInit+0xcc>)
 8001940:	f001 f926 	bl	8002b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001944:	bf00      	nop
 8001946:	3728      	adds	r7, #40	@ 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40003800 	.word	0x40003800
 8001950:	40023800 	.word	0x40023800
 8001954:	40020800 	.word	0x40020800
 8001958:	40020400 	.word	0x40020400

0800195c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b094      	sub	sp, #80	@ 0x50
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a8c      	ldr	r2, [pc, #560]	@ (8001bac <HAL_TIM_Encoder_MspInit+0x250>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d12d      	bne.n	80019da <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001982:	4b8b      	ldr	r3, [pc, #556]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	4a8a      	ldr	r2, [pc, #552]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6453      	str	r3, [r2, #68]	@ 0x44
 800198e:	4b88      	ldr	r3, [pc, #544]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	637b      	str	r3, [r7, #52]	@ 0x34
 800199e:	4b84      	ldr	r3, [pc, #528]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	4a83      	ldr	r2, [pc, #524]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 80019a4:	f043 0310 	orr.w	r3, r3, #16
 80019a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019aa:	4b81      	ldr	r3, [pc, #516]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ae:	f003 0310 	and.w	r3, r3, #16
 80019b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80019b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80019b6:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80019ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019c0:	2302      	movs	r3, #2
 80019c2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c4:	2303      	movs	r3, #3
 80019c6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019c8:	2301      	movs	r3, #1
 80019ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019cc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80019d0:	4619      	mov	r1, r3
 80019d2:	4878      	ldr	r0, [pc, #480]	@ (8001bb4 <HAL_TIM_Encoder_MspInit+0x258>)
 80019d4:	f001 f8dc 	bl	8002b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80019d8:	e12b      	b.n	8001c32 <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM2)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019e2:	d14b      	bne.n	8001a7c <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019e4:	2300      	movs	r3, #0
 80019e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80019e8:	4b71      	ldr	r3, [pc, #452]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 80019ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ec:	4a70      	ldr	r2, [pc, #448]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 80019ee:	f043 0301 	orr.w	r3, r3, #1
 80019f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019f4:	4b6e      	ldr	r3, [pc, #440]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 80019f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80019fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a00:	2300      	movs	r3, #0
 8001a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a04:	4b6a      	ldr	r3, [pc, #424]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a08:	4a69      	ldr	r2, [pc, #420]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a10:	4b67      	ldr	r3, [pc, #412]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a20:	4b63      	ldr	r3, [pc, #396]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a24:	4a62      	ldr	r2, [pc, #392]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a26:	f043 0302 	orr.w	r3, r3, #2
 8001a2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2c:	4b60      	ldr	r3, [pc, #384]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = EN_X_A_Pin;
 8001a38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(EN_X_A_GPIO_Port, &GPIO_InitStruct);
 8001a4e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001a52:	4619      	mov	r1, r3
 8001a54:	4858      	ldr	r0, [pc, #352]	@ (8001bb8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001a56:	f001 f89b 	bl	8002b90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EN_X_B_Pin;
 8001a5a:	2308      	movs	r3, #8
 8001a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2300      	movs	r3, #0
 8001a68:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(EN_X_B_GPIO_Port, &GPIO_InitStruct);
 8001a6e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001a72:	4619      	mov	r1, r3
 8001a74:	4851      	ldr	r0, [pc, #324]	@ (8001bbc <HAL_TIM_Encoder_MspInit+0x260>)
 8001a76:	f001 f88b 	bl	8002b90 <HAL_GPIO_Init>
}
 8001a7a:	e0da      	b.n	8001c32 <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM3)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a4f      	ldr	r2, [pc, #316]	@ (8001bc0 <HAL_TIM_Encoder_MspInit+0x264>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d12c      	bne.n	8001ae0 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a8a:	4b49      	ldr	r3, [pc, #292]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	4a48      	ldr	r2, [pc, #288]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a96:	4b46      	ldr	r3, [pc, #280]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	623b      	str	r3, [r7, #32]
 8001aa6:	4b42      	ldr	r3, [pc, #264]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	4a41      	ldr	r2, [pc, #260]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	623b      	str	r3, [r7, #32]
 8001abc:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = EN_Y_A_Pin|EN_Y_B_Pin;
 8001abe:	2330      	movs	r3, #48	@ 0x30
 8001ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4838      	ldr	r0, [pc, #224]	@ (8001bbc <HAL_TIM_Encoder_MspInit+0x260>)
 8001ada:	f001 f859 	bl	8002b90 <HAL_GPIO_Init>
}
 8001ade:	e0a8      	b.n	8001c32 <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM4)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a37      	ldr	r2, [pc, #220]	@ (8001bc4 <HAL_TIM_Encoder_MspInit+0x268>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d12d      	bne.n	8001b46 <HAL_TIM_Encoder_MspInit+0x1ea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	4b30      	ldr	r3, [pc, #192]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af2:	4a2f      	ldr	r2, [pc, #188]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001af4:	f043 0304 	orr.w	r3, r3, #4
 8001af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001afa:	4b2d      	ldr	r3, [pc, #180]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	4b29      	ldr	r3, [pc, #164]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	4a28      	ldr	r2, [pc, #160]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001b10:	f043 0308 	orr.w	r3, r3, #8
 8001b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b16:	4b26      	ldr	r3, [pc, #152]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	61bb      	str	r3, [r7, #24]
 8001b20:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001b22:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b30:	2303      	movs	r3, #3
 8001b32:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b34:	2302      	movs	r3, #2
 8001b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b38:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4822      	ldr	r0, [pc, #136]	@ (8001bc8 <HAL_TIM_Encoder_MspInit+0x26c>)
 8001b40:	f001 f826 	bl	8002b90 <HAL_GPIO_Init>
}
 8001b44:	e075      	b.n	8001c32 <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM5)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a20      	ldr	r2, [pc, #128]	@ (8001bcc <HAL_TIM_Encoder_MspInit+0x270>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d13f      	bne.n	8001bd0 <HAL_TIM_Encoder_MspInit+0x274>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	4b16      	ldr	r3, [pc, #88]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b58:	4a15      	ldr	r2, [pc, #84]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001b5a:	f043 0308 	orr.w	r3, r3, #8
 8001b5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b60:	4b13      	ldr	r3, [pc, #76]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b74:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb0 <HAL_TIM_Encoder_MspInit+0x254>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b90:	2302      	movs	r3, #2
 8001b92:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b94:	2303      	movs	r3, #3
 8001b96:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4805      	ldr	r0, [pc, #20]	@ (8001bb8 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001ba4:	f000 fff4 	bl	8002b90 <HAL_GPIO_Init>
}
 8001ba8:	e043      	b.n	8001c32 <HAL_TIM_Encoder_MspInit+0x2d6>
 8001baa:	bf00      	nop
 8001bac:	40010000 	.word	0x40010000
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	40000400 	.word	0x40000400
 8001bc4:	40000800 	.word	0x40000800
 8001bc8:	40020c00 	.word	0x40020c00
 8001bcc:	40000c00 	.word	0x40000c00
  else if(htim_encoder->Instance==TIM8)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a19      	ldr	r2, [pc, #100]	@ (8001c3c <HAL_TIM_Encoder_MspInit+0x2e0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d12b      	bne.n	8001c32 <HAL_TIM_Encoder_MspInit+0x2d6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	4b18      	ldr	r3, [pc, #96]	@ (8001c40 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be2:	4a17      	ldr	r2, [pc, #92]	@ (8001c40 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bea:	4b15      	ldr	r3, [pc, #84]	@ (8001c40 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	4a10      	ldr	r2, [pc, #64]	@ (8001c40 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c06:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c12:	23c0      	movs	r3, #192	@ 0xc0
 8001c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c16:	2302      	movs	r3, #2
 8001c18:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c22:	2303      	movs	r3, #3
 8001c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c26:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4805      	ldr	r0, [pc, #20]	@ (8001c44 <HAL_TIM_Encoder_MspInit+0x2e8>)
 8001c2e:	f000 ffaf 	bl	8002b90 <HAL_GPIO_Init>
}
 8001c32:	bf00      	nop
 8001c34:	3750      	adds	r7, #80	@ 0x50
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40010400 	.word	0x40010400
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020800 	.word	0x40020800

08001c48 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a15      	ldr	r2, [pc, #84]	@ (8001cac <HAL_TIM_PWM_MspInit+0x64>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d10e      	bne.n	8001c78 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b14      	ldr	r3, [pc, #80]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0x68>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c62:	4a13      	ldr	r2, [pc, #76]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0x68>)
 8001c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c6a:	4b11      	ldr	r3, [pc, #68]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0x68>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001c76:	e012      	b.n	8001c9e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb4 <HAL_TIM_PWM_MspInit+0x6c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d10d      	bne.n	8001c9e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0x68>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	4a09      	ldr	r2, [pc, #36]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0x68>)
 8001c8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c92:	4b07      	ldr	r3, [pc, #28]	@ (8001cb0 <HAL_TIM_PWM_MspInit+0x68>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
}
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40014000 	.word	0x40014000
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40001800 	.word	0x40001800

08001cb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a29      	ldr	r2, [pc, #164]	@ (8001d6c <HAL_TIM_Base_MspInit+0xb4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d10e      	bne.n	8001ce8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	617b      	str	r3, [r7, #20]
 8001cce:	4b28      	ldr	r3, [pc, #160]	@ (8001d70 <HAL_TIM_Base_MspInit+0xb8>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd2:	4a27      	ldr	r2, [pc, #156]	@ (8001d70 <HAL_TIM_Base_MspInit+0xb8>)
 8001cd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cda:	4b25      	ldr	r3, [pc, #148]	@ (8001d70 <HAL_TIM_Base_MspInit+0xb8>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001ce6:	e03a      	b.n	8001d5e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a21      	ldr	r2, [pc, #132]	@ (8001d74 <HAL_TIM_Base_MspInit+0xbc>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d10e      	bne.n	8001d10 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d70 <HAL_TIM_Base_MspInit+0xb8>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	4a1d      	ldr	r2, [pc, #116]	@ (8001d70 <HAL_TIM_Base_MspInit+0xb8>)
 8001cfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d02:	4b1b      	ldr	r3, [pc, #108]	@ (8001d70 <HAL_TIM_Base_MspInit+0xb8>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]
}
 8001d0e:	e026      	b.n	8001d5e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM13)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a18      	ldr	r2, [pc, #96]	@ (8001d78 <HAL_TIM_Base_MspInit+0xc0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d10e      	bne.n	8001d38 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b14      	ldr	r3, [pc, #80]	@ (8001d70 <HAL_TIM_Base_MspInit+0xb8>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	4a13      	ldr	r2, [pc, #76]	@ (8001d70 <HAL_TIM_Base_MspInit+0xb8>)
 8001d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2a:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <HAL_TIM_Base_MspInit+0xb8>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
}
 8001d36:	e012      	b.n	8001d5e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM14)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0f      	ldr	r2, [pc, #60]	@ (8001d7c <HAL_TIM_Base_MspInit+0xc4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10d      	bne.n	8001d5e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60bb      	str	r3, [r7, #8]
 8001d46:	4b0a      	ldr	r3, [pc, #40]	@ (8001d70 <HAL_TIM_Base_MspInit+0xb8>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4a:	4a09      	ldr	r2, [pc, #36]	@ (8001d70 <HAL_TIM_Base_MspInit+0xb8>)
 8001d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d52:	4b07      	ldr	r3, [pc, #28]	@ (8001d70 <HAL_TIM_Base_MspInit+0xb8>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
}
 8001d5e:	bf00      	nop
 8001d60:	371c      	adds	r7, #28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40014400 	.word	0x40014400
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40014800 	.word	0x40014800
 8001d78:	40001c00 	.word	0x40001c00
 8001d7c:	40002000 	.word	0x40002000

08001d80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08e      	sub	sp, #56	@ 0x38
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a6d      	ldr	r2, [pc, #436]	@ (8001f54 <HAL_TIM_MspPostInit+0x1d4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d11e      	bne.n	8001de0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
 8001da6:	4b6c      	ldr	r3, [pc, #432]	@ (8001f58 <HAL_TIM_MspPostInit+0x1d8>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	4a6b      	ldr	r2, [pc, #428]	@ (8001f58 <HAL_TIM_MspPostInit+0x1d8>)
 8001dac:	f043 0310 	orr.w	r3, r3, #16
 8001db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db2:	4b69      	ldr	r3, [pc, #420]	@ (8001f58 <HAL_TIM_MspPostInit+0x1d8>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	623b      	str	r3, [r7, #32]
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = EXTRA1_PWM_L_Pin|SERVO_1_Pin;
 8001dbe:	2360      	movs	r3, #96	@ 0x60
 8001dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4860      	ldr	r0, [pc, #384]	@ (8001f5c <HAL_TIM_MspPostInit+0x1dc>)
 8001dda:	f000 fed9 	bl	8002b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001dde:	e0b5      	b.n	8001f4c <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM10)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a5e      	ldr	r2, [pc, #376]	@ (8001f60 <HAL_TIM_MspPostInit+0x1e0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d11f      	bne.n	8001e2a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	4b5a      	ldr	r3, [pc, #360]	@ (8001f58 <HAL_TIM_MspPostInit+0x1d8>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	4a59      	ldr	r2, [pc, #356]	@ (8001f58 <HAL_TIM_MspPostInit+0x1d8>)
 8001df4:	f043 0302 	orr.w	r3, r3, #2
 8001df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfa:	4b57      	ldr	r3, [pc, #348]	@ (8001f58 <HAL_TIM_MspPostInit+0x1d8>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	61fb      	str	r3, [r7, #28]
 8001e04:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = EXTRA2_PWM_L_Pin;
 8001e06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(EXTRA2_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e20:	4619      	mov	r1, r3
 8001e22:	4850      	ldr	r0, [pc, #320]	@ (8001f64 <HAL_TIM_MspPostInit+0x1e4>)
 8001e24:	f000 feb4 	bl	8002b90 <HAL_GPIO_Init>
}
 8001e28:	e090      	b.n	8001f4c <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM11)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a4e      	ldr	r2, [pc, #312]	@ (8001f68 <HAL_TIM_MspPostInit+0x1e8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d11f      	bne.n	8001e74 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e34:	2300      	movs	r3, #0
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	4b47      	ldr	r3, [pc, #284]	@ (8001f58 <HAL_TIM_MspPostInit+0x1d8>)
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3c:	4a46      	ldr	r2, [pc, #280]	@ (8001f58 <HAL_TIM_MspPostInit+0x1d8>)
 8001e3e:	f043 0302 	orr.w	r3, r3, #2
 8001e42:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e44:	4b44      	ldr	r3, [pc, #272]	@ (8001f58 <HAL_TIM_MspPostInit+0x1d8>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	61bb      	str	r3, [r7, #24]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RF_PWM_L_Pin;
 8001e50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001e62:	2303      	movs	r3, #3
 8001e64:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RF_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001e66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	483d      	ldr	r0, [pc, #244]	@ (8001f64 <HAL_TIM_MspPostInit+0x1e4>)
 8001e6e:	f000 fe8f 	bl	8002b90 <HAL_GPIO_Init>
}
 8001e72:	e06b      	b.n	8001f4c <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM12)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a3c      	ldr	r2, [pc, #240]	@ (8001f6c <HAL_TIM_MspPostInit+0x1ec>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d11f      	bne.n	8001ebe <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	4b35      	ldr	r3, [pc, #212]	@ (8001f58 <HAL_TIM_MspPostInit+0x1d8>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	4a34      	ldr	r2, [pc, #208]	@ (8001f58 <HAL_TIM_MspPostInit+0x1d8>)
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8e:	4b32      	ldr	r3, [pc, #200]	@ (8001f58 <HAL_TIM_MspPostInit+0x1d8>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LB_PWM_L_Pin|RB_PWM_L_Pin;
 8001e9a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001e9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001eac:	2309      	movs	r3, #9
 8001eae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	482b      	ldr	r0, [pc, #172]	@ (8001f64 <HAL_TIM_MspPostInit+0x1e4>)
 8001eb8:	f000 fe6a 	bl	8002b90 <HAL_GPIO_Init>
}
 8001ebc:	e046      	b.n	8001f4c <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM13)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a2b      	ldr	r2, [pc, #172]	@ (8001f70 <HAL_TIM_MspPostInit+0x1f0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d11e      	bne.n	8001f06 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	4b22      	ldr	r3, [pc, #136]	@ (8001f58 <HAL_TIM_MspPostInit+0x1d8>)
 8001ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed0:	4a21      	ldr	r2, [pc, #132]	@ (8001f58 <HAL_TIM_MspPostInit+0x1d8>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8001f58 <HAL_TIM_MspPostInit+0x1d8>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO_2_Pin;
 8001ee4:	2340      	movs	r3, #64	@ 0x40
 8001ee6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001ef4:	2309      	movs	r3, #9
 8001ef6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SERVO_2_GPIO_Port, &GPIO_InitStruct);
 8001ef8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001efc:	4619      	mov	r1, r3
 8001efe:	481d      	ldr	r0, [pc, #116]	@ (8001f74 <HAL_TIM_MspPostInit+0x1f4>)
 8001f00:	f000 fe46 	bl	8002b90 <HAL_GPIO_Init>
}
 8001f04:	e022      	b.n	8001f4c <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM14)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8001f78 <HAL_TIM_MspPostInit+0x1f8>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d11d      	bne.n	8001f4c <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f10:	2300      	movs	r3, #0
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <HAL_TIM_MspPostInit+0x1d8>)
 8001f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f18:	4a0f      	ldr	r2, [pc, #60]	@ (8001f58 <HAL_TIM_MspPostInit+0x1d8>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f20:	4b0d      	ldr	r3, [pc, #52]	@ (8001f58 <HAL_TIM_MspPostInit+0x1d8>)
 8001f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	60fb      	str	r3, [r7, #12]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LF_PWM_L_Pin;
 8001f2c:	2380      	movs	r3, #128	@ 0x80
 8001f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001f3c:	2309      	movs	r3, #9
 8001f3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LF_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f44:	4619      	mov	r1, r3
 8001f46:	480b      	ldr	r0, [pc, #44]	@ (8001f74 <HAL_TIM_MspPostInit+0x1f4>)
 8001f48:	f000 fe22 	bl	8002b90 <HAL_GPIO_Init>
}
 8001f4c:	bf00      	nop
 8001f4e:	3738      	adds	r7, #56	@ 0x38
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40014000 	.word	0x40014000
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40014400 	.word	0x40014400
 8001f64:	40020400 	.word	0x40020400
 8001f68:	40014800 	.word	0x40014800
 8001f6c:	40001800 	.word	0x40001800
 8001f70:	40001c00 	.word	0x40001c00
 8001f74:	40020000 	.word	0x40020000
 8001f78:	40002000 	.word	0x40002000

08001f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08c      	sub	sp, #48	@ 0x30
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 031c 	add.w	r3, r7, #28
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a36      	ldr	r2, [pc, #216]	@ (8002074 <HAL_UART_MspInit+0xf8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d12d      	bne.n	8001ffa <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61bb      	str	r3, [r7, #24]
 8001fa2:	4b35      	ldr	r3, [pc, #212]	@ (8002078 <HAL_UART_MspInit+0xfc>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	4a34      	ldr	r2, [pc, #208]	@ (8002078 <HAL_UART_MspInit+0xfc>)
 8001fa8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fae:	4b32      	ldr	r3, [pc, #200]	@ (8002078 <HAL_UART_MspInit+0xfc>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fb6:	61bb      	str	r3, [r7, #24]
 8001fb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8002078 <HAL_UART_MspInit+0xfc>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	4a2d      	ldr	r2, [pc, #180]	@ (8002078 <HAL_UART_MspInit+0xfc>)
 8001fc4:	f043 0304 	orr.w	r3, r3, #4
 8001fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fca:	4b2b      	ldr	r3, [pc, #172]	@ (8002078 <HAL_UART_MspInit+0xfc>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fd6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001fe8:	2308      	movs	r3, #8
 8001fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fec:	f107 031c 	add.w	r3, r7, #28
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4822      	ldr	r0, [pc, #136]	@ (800207c <HAL_UART_MspInit+0x100>)
 8001ff4:	f000 fdcc 	bl	8002b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ff8:	e038      	b.n	800206c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a20      	ldr	r2, [pc, #128]	@ (8002080 <HAL_UART_MspInit+0x104>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d133      	bne.n	800206c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002004:	2300      	movs	r3, #0
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	4b1b      	ldr	r3, [pc, #108]	@ (8002078 <HAL_UART_MspInit+0xfc>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	4a1a      	ldr	r2, [pc, #104]	@ (8002078 <HAL_UART_MspInit+0xfc>)
 800200e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002012:	6413      	str	r3, [r2, #64]	@ 0x40
 8002014:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <HAL_UART_MspInit+0xfc>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	4b14      	ldr	r3, [pc, #80]	@ (8002078 <HAL_UART_MspInit+0xfc>)
 8002026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002028:	4a13      	ldr	r2, [pc, #76]	@ (8002078 <HAL_UART_MspInit+0xfc>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002030:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <HAL_UART_MspInit+0xfc>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800203c:	230c      	movs	r3, #12
 800203e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800204c:	2307      	movs	r3, #7
 800204e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	480b      	ldr	r0, [pc, #44]	@ (8002084 <HAL_UART_MspInit+0x108>)
 8002058:	f000 fd9a 	bl	8002b90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800205c:	2200      	movs	r2, #0
 800205e:	2100      	movs	r1, #0
 8002060:	2026      	movs	r0, #38	@ 0x26
 8002062:	f000 fcbe 	bl	80029e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002066:	2026      	movs	r0, #38	@ 0x26
 8002068:	f000 fcd7 	bl	8002a1a <HAL_NVIC_EnableIRQ>
}
 800206c:	bf00      	nop
 800206e:	3730      	adds	r7, #48	@ 0x30
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40004c00 	.word	0x40004c00
 8002078:	40023800 	.word	0x40023800
 800207c:	40020800 	.word	0x40020800
 8002080:	40004400 	.word	0x40004400
 8002084:	40020000 	.word	0x40020000

08002088 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a12      	ldr	r2, [pc, #72]	@ (80020e0 <HAL_UART_MspDeInit+0x58>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d10b      	bne.n	80020b2 <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 800209a:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <HAL_UART_MspDeInit+0x5c>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	4a11      	ldr	r2, [pc, #68]	@ (80020e4 <HAL_UART_MspDeInit+0x5c>)
 80020a0:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80020a4:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 80020a6:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 80020aa:	480f      	ldr	r0, [pc, #60]	@ (80020e8 <HAL_UART_MspDeInit+0x60>)
 80020ac:	f000 ff0c 	bl	8002ec8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80020b0:	e011      	b.n	80020d6 <HAL_UART_MspDeInit+0x4e>
  else if(huart->Instance==USART2)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a0d      	ldr	r2, [pc, #52]	@ (80020ec <HAL_UART_MspDeInit+0x64>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d10c      	bne.n	80020d6 <HAL_UART_MspDeInit+0x4e>
    __HAL_RCC_USART2_CLK_DISABLE();
 80020bc:	4b09      	ldr	r3, [pc, #36]	@ (80020e4 <HAL_UART_MspDeInit+0x5c>)
 80020be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c0:	4a08      	ldr	r2, [pc, #32]	@ (80020e4 <HAL_UART_MspDeInit+0x5c>)
 80020c2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80020c6:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80020c8:	210c      	movs	r1, #12
 80020ca:	4809      	ldr	r0, [pc, #36]	@ (80020f0 <HAL_UART_MspDeInit+0x68>)
 80020cc:	f000 fefc 	bl	8002ec8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80020d0:	2026      	movs	r0, #38	@ 0x26
 80020d2:	f000 fcb0 	bl	8002a36 <HAL_NVIC_DisableIRQ>
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40004c00 	.word	0x40004c00
 80020e4:	40023800 	.word	0x40023800
 80020e8:	40020800 	.word	0x40020800
 80020ec:	40004400 	.word	0x40004400
 80020f0:	40020000 	.word	0x40020000

080020f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020f8:	bf00      	nop
 80020fa:	e7fd      	b.n	80020f8 <NMI_Handler+0x4>

080020fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002100:	bf00      	nop
 8002102:	e7fd      	b.n	8002100 <HardFault_Handler+0x4>

08002104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002108:	bf00      	nop
 800210a:	e7fd      	b.n	8002108 <MemManage_Handler+0x4>

0800210c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <BusFault_Handler+0x4>

08002114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <UsageFault_Handler+0x4>

0800211c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800214a:	f000 f8a5 	bl	8002298 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002158:	4802      	ldr	r0, [pc, #8]	@ (8002164 <USART2_IRQHandler+0x10>)
 800215a:	f003 ff85 	bl	8006068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	200005c8 	.word	0x200005c8

08002168 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800216c:	4802      	ldr	r0, [pc, #8]	@ (8002178 <OTG_FS_IRQHandler+0x10>)
 800216e:	f001 fa49 	bl	8003604 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20001d2c 	.word	0x20001d2c

0800217c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002180:	4b06      	ldr	r3, [pc, #24]	@ (800219c <SystemInit+0x20>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002186:	4a05      	ldr	r2, [pc, #20]	@ (800219c <SystemInit+0x20>)
 8002188:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800218c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <Reset_Handler>:
 80021a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021d8 <LoopFillZerobss+0xe>
 80021a4:	f7ff ffea 	bl	800217c <SystemInit>
 80021a8:	480c      	ldr	r0, [pc, #48]	@ (80021dc <LoopFillZerobss+0x12>)
 80021aa:	490d      	ldr	r1, [pc, #52]	@ (80021e0 <LoopFillZerobss+0x16>)
 80021ac:	4a0d      	ldr	r2, [pc, #52]	@ (80021e4 <LoopFillZerobss+0x1a>)
 80021ae:	2300      	movs	r3, #0
 80021b0:	e002      	b.n	80021b8 <LoopCopyDataInit>

080021b2 <CopyDataInit>:
 80021b2:	58d4      	ldr	r4, [r2, r3]
 80021b4:	50c4      	str	r4, [r0, r3]
 80021b6:	3304      	adds	r3, #4

080021b8 <LoopCopyDataInit>:
 80021b8:	18c4      	adds	r4, r0, r3
 80021ba:	428c      	cmp	r4, r1
 80021bc:	d3f9      	bcc.n	80021b2 <CopyDataInit>
 80021be:	4a0a      	ldr	r2, [pc, #40]	@ (80021e8 <LoopFillZerobss+0x1e>)
 80021c0:	4c0a      	ldr	r4, [pc, #40]	@ (80021ec <LoopFillZerobss+0x22>)
 80021c2:	2300      	movs	r3, #0
 80021c4:	e001      	b.n	80021ca <LoopFillZerobss>

080021c6 <FillZerobss>:
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	3204      	adds	r2, #4

080021ca <LoopFillZerobss>:
 80021ca:	42a2      	cmp	r2, r4
 80021cc:	d3fb      	bcc.n	80021c6 <FillZerobss>
 80021ce:	f00a f9f7 	bl	800c5c0 <__libc_init_array>
 80021d2:	f7fe f971 	bl	80004b8 <main>
 80021d6:	4770      	bx	lr
 80021d8:	20020000 	.word	0x20020000
 80021dc:	20000000 	.word	0x20000000
 80021e0:	20000110 	.word	0x20000110
 80021e4:	0800c6f4 	.word	0x0800c6f4
 80021e8:	20000110 	.word	0x20000110
 80021ec:	20002430 	.word	0x20002430

080021f0 <ADC_IRQHandler>:
 80021f0:	e7fe      	b.n	80021f0 <ADC_IRQHandler>
	...

080021f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002234 <HAL_Init+0x40>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002234 <HAL_Init+0x40>)
 80021fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002202:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002204:	4b0b      	ldr	r3, [pc, #44]	@ (8002234 <HAL_Init+0x40>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0a      	ldr	r2, [pc, #40]	@ (8002234 <HAL_Init+0x40>)
 800220a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800220e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002210:	4b08      	ldr	r3, [pc, #32]	@ (8002234 <HAL_Init+0x40>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a07      	ldr	r2, [pc, #28]	@ (8002234 <HAL_Init+0x40>)
 8002216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800221a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800221c:	2003      	movs	r0, #3
 800221e:	f000 fbd5 	bl	80029cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002222:	200f      	movs	r0, #15
 8002224:	f000 f808 	bl	8002238 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002228:	f7ff fa60 	bl	80016ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023c00 	.word	0x40023c00

08002238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002240:	4b12      	ldr	r3, [pc, #72]	@ (800228c <HAL_InitTick+0x54>)
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	4b12      	ldr	r3, [pc, #72]	@ (8002290 <HAL_InitTick+0x58>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	4619      	mov	r1, r3
 800224a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800224e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002252:	fbb2 f3f3 	udiv	r3, r2, r3
 8002256:	4618      	mov	r0, r3
 8002258:	f000 fbfb 	bl	8002a52 <HAL_SYSTICK_Config>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e00e      	b.n	8002284 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b0f      	cmp	r3, #15
 800226a:	d80a      	bhi.n	8002282 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800226c:	2200      	movs	r2, #0
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	f04f 30ff 	mov.w	r0, #4294967295
 8002274:	f000 fbb5 	bl	80029e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002278:	4a06      	ldr	r2, [pc, #24]	@ (8002294 <HAL_InitTick+0x5c>)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
 8002280:	e000      	b.n	8002284 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
}
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	2000000c 	.word	0x2000000c
 8002290:	20000014 	.word	0x20000014
 8002294:	20000010 	.word	0x20000010

08002298 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800229c:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <HAL_IncTick+0x20>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	461a      	mov	r2, r3
 80022a2:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_IncTick+0x24>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4413      	add	r3, r2
 80022a8:	4a04      	ldr	r2, [pc, #16]	@ (80022bc <HAL_IncTick+0x24>)
 80022aa:	6013      	str	r3, [r2, #0]
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000014 	.word	0x20000014
 80022bc:	20000658 	.word	0x20000658

080022c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return uwTick;
 80022c4:	4b03      	ldr	r3, [pc, #12]	@ (80022d4 <HAL_GetTick+0x14>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000658 	.word	0x20000658

080022d8 <HAL_Delay>:
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)

{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022e0:	f7ff ffee 	bl	80022c0 <HAL_GetTick>
 80022e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f0:	d005      	beq.n	80022fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022f2:	4b0a      	ldr	r3, [pc, #40]	@ (800231c <HAL_Delay+0x44>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4413      	add	r3, r2
 80022fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022fe:	bf00      	nop
 8002300:	f7ff ffde 	bl	80022c0 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	429a      	cmp	r2, r3
 800230e:	d8f7      	bhi.n	8002300 <HAL_Delay+0x28>
  {
  }
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000014 	.word	0x20000014

08002320 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e033      	b.n	800239e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d109      	bne.n	8002352 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff f9fc 	bl	800173c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	2b00      	cmp	r3, #0
 800235c:	d118      	bne.n	8002390 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002362:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002366:	f023 0302 	bic.w	r3, r3, #2
 800236a:	f043 0202 	orr.w	r2, r3, #2
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f93a 	bl	80025ec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002382:	f023 0303 	bic.w	r3, r3, #3
 8002386:	f043 0201 	orr.w	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	641a      	str	r2, [r3, #64]	@ 0x40
 800238e:	e001      	b.n	8002394 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d101      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x1c>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e105      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x228>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b09      	cmp	r3, #9
 80023d2:	d925      	bls.n	8002420 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68d9      	ldr	r1, [r3, #12]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	b29b      	uxth	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	4613      	mov	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4413      	add	r3, r2
 80023e8:	3b1e      	subs	r3, #30
 80023ea:	2207      	movs	r2, #7
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43da      	mvns	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	400a      	ands	r2, r1
 80023f8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68d9      	ldr	r1, [r3, #12]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	b29b      	uxth	r3, r3
 800240a:	4618      	mov	r0, r3
 800240c:	4603      	mov	r3, r0
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4403      	add	r3, r0
 8002412:	3b1e      	subs	r3, #30
 8002414:	409a      	lsls	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	e022      	b.n	8002466 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6919      	ldr	r1, [r3, #16]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	b29b      	uxth	r3, r3
 800242c:	461a      	mov	r2, r3
 800242e:	4613      	mov	r3, r2
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4413      	add	r3, r2
 8002434:	2207      	movs	r2, #7
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	43da      	mvns	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	400a      	ands	r2, r1
 8002442:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6919      	ldr	r1, [r3, #16]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	b29b      	uxth	r3, r3
 8002454:	4618      	mov	r0, r3
 8002456:	4603      	mov	r3, r0
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	4403      	add	r3, r0
 800245c:	409a      	lsls	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b06      	cmp	r3, #6
 800246c:	d824      	bhi.n	80024b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	3b05      	subs	r3, #5
 8002480:	221f      	movs	r2, #31
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43da      	mvns	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	400a      	ands	r2, r1
 800248e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	4618      	mov	r0, r3
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	3b05      	subs	r3, #5
 80024aa:	fa00 f203 	lsl.w	r2, r0, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80024b6:	e04c      	b.n	8002552 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b0c      	cmp	r3, #12
 80024be:	d824      	bhi.n	800250a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	3b23      	subs	r3, #35	@ 0x23
 80024d2:	221f      	movs	r2, #31
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43da      	mvns	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	400a      	ands	r2, r1
 80024e0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	4618      	mov	r0, r3
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4413      	add	r3, r2
 80024fa:	3b23      	subs	r3, #35	@ 0x23
 80024fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	631a      	str	r2, [r3, #48]	@ 0x30
 8002508:	e023      	b.n	8002552 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	3b41      	subs	r3, #65	@ 0x41
 800251c:	221f      	movs	r2, #31
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43da      	mvns	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	400a      	ands	r2, r1
 800252a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	4618      	mov	r0, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	3b41      	subs	r3, #65	@ 0x41
 8002546:	fa00 f203 	lsl.w	r2, r0, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002552:	4b22      	ldr	r3, [pc, #136]	@ (80025dc <HAL_ADC_ConfigChannel+0x234>)
 8002554:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a21      	ldr	r2, [pc, #132]	@ (80025e0 <HAL_ADC_ConfigChannel+0x238>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d109      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x1cc>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b12      	cmp	r3, #18
 8002566:	d105      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a19      	ldr	r2, [pc, #100]	@ (80025e0 <HAL_ADC_ConfigChannel+0x238>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d123      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x21e>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b10      	cmp	r3, #16
 8002584:	d003      	beq.n	800258e <HAL_ADC_ConfigChannel+0x1e6>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b11      	cmp	r3, #17
 800258c:	d11b      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2b10      	cmp	r3, #16
 80025a0:	d111      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025a2:	4b10      	ldr	r3, [pc, #64]	@ (80025e4 <HAL_ADC_ConfigChannel+0x23c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a10      	ldr	r2, [pc, #64]	@ (80025e8 <HAL_ADC_ConfigChannel+0x240>)
 80025a8:	fba2 2303 	umull	r2, r3, r2, r3
 80025ac:	0c9a      	lsrs	r2, r3, #18
 80025ae:	4613      	mov	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025b8:	e002      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	3b01      	subs	r3, #1
 80025be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f9      	bne.n	80025ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3714      	adds	r7, #20
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	40012300 	.word	0x40012300
 80025e0:	40012000 	.word	0x40012000
 80025e4:	2000000c 	.word	0x2000000c
 80025e8:	431bde83 	.word	0x431bde83

080025ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025f4:	4b79      	ldr	r3, [pc, #484]	@ (80027dc <ADC_Init+0x1f0>)
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	431a      	orrs	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002620:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6859      	ldr	r1, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	021a      	lsls	r2, r3, #8
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	685a      	ldr	r2, [r3, #4]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002644:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6859      	ldr	r1, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002666:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6899      	ldr	r1, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267e:	4a58      	ldr	r2, [pc, #352]	@ (80027e0 <ADC_Init+0x1f4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d022      	beq.n	80026ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002692:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6899      	ldr	r1, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6899      	ldr	r1, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	e00f      	b.n	80026ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80026e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0202 	bic.w	r2, r2, #2
 80026f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6899      	ldr	r1, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	7e1b      	ldrb	r3, [r3, #24]
 8002704:	005a      	lsls	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d01b      	beq.n	8002750 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002726:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002736:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6859      	ldr	r1, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002742:	3b01      	subs	r3, #1
 8002744:	035a      	lsls	r2, r3, #13
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	e007      	b.n	8002760 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800275e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800276e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	3b01      	subs	r3, #1
 800277c:	051a      	lsls	r2, r3, #20
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002794:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6899      	ldr	r1, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027a2:	025a      	lsls	r2, r3, #9
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6899      	ldr	r1, [r3, #8]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	029a      	lsls	r2, r3, #10
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	609a      	str	r2, [r3, #8]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	40012300 	.word	0x40012300
 80027e0:	0f000001 	.word	0x0f000001

080027e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002828 <__NVIC_SetPriorityGrouping+0x44>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002800:	4013      	ands	r3, r2
 8002802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800280c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002816:	4a04      	ldr	r2, [pc, #16]	@ (8002828 <__NVIC_SetPriorityGrouping+0x44>)
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	60d3      	str	r3, [r2, #12]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002830:	4b04      	ldr	r3, [pc, #16]	@ (8002844 <__NVIC_GetPriorityGrouping+0x18>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	0a1b      	lsrs	r3, r3, #8
 8002836:	f003 0307 	and.w	r3, r3, #7
}
 800283a:	4618      	mov	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002856:	2b00      	cmp	r3, #0
 8002858:	db0b      	blt.n	8002872 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	f003 021f 	and.w	r2, r3, #31
 8002860:	4907      	ldr	r1, [pc, #28]	@ (8002880 <__NVIC_EnableIRQ+0x38>)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	2001      	movs	r0, #1
 800286a:	fa00 f202 	lsl.w	r2, r0, r2
 800286e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000e100 	.word	0xe000e100

08002884 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002892:	2b00      	cmp	r3, #0
 8002894:	db12      	blt.n	80028bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	f003 021f 	and.w	r2, r3, #31
 800289c:	490a      	ldr	r1, [pc, #40]	@ (80028c8 <__NVIC_DisableIRQ+0x44>)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2001      	movs	r0, #1
 80028a6:	fa00 f202 	lsl.w	r2, r0, r2
 80028aa:	3320      	adds	r3, #32
 80028ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80028b0:	f3bf 8f4f 	dsb	sy
}
 80028b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80028b6:	f3bf 8f6f 	isb	sy
}
 80028ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	e000e100 	.word	0xe000e100

080028cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	6039      	str	r1, [r7, #0]
 80028d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	db0a      	blt.n	80028f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	490c      	ldr	r1, [pc, #48]	@ (8002918 <__NVIC_SetPriority+0x4c>)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	0112      	lsls	r2, r2, #4
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	440b      	add	r3, r1
 80028f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028f4:	e00a      	b.n	800290c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4908      	ldr	r1, [pc, #32]	@ (800291c <__NVIC_SetPriority+0x50>)
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	3b04      	subs	r3, #4
 8002904:	0112      	lsls	r2, r2, #4
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	440b      	add	r3, r1
 800290a:	761a      	strb	r2, [r3, #24]
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000e100 	.word	0xe000e100
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002920:	b480      	push	{r7}
 8002922:	b089      	sub	sp, #36	@ 0x24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f1c3 0307 	rsb	r3, r3, #7
 800293a:	2b04      	cmp	r3, #4
 800293c:	bf28      	it	cs
 800293e:	2304      	movcs	r3, #4
 8002940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3304      	adds	r3, #4
 8002946:	2b06      	cmp	r3, #6
 8002948:	d902      	bls.n	8002950 <NVIC_EncodePriority+0x30>
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3b03      	subs	r3, #3
 800294e:	e000      	b.n	8002952 <NVIC_EncodePriority+0x32>
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	f04f 32ff 	mov.w	r2, #4294967295
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43da      	mvns	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	401a      	ands	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002968:	f04f 31ff 	mov.w	r1, #4294967295
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	43d9      	mvns	r1, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002978:	4313      	orrs	r3, r2
         );
}
 800297a:	4618      	mov	r0, r3
 800297c:	3724      	adds	r7, #36	@ 0x24
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3b01      	subs	r3, #1
 8002994:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002998:	d301      	bcc.n	800299e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800299a:	2301      	movs	r3, #1
 800299c:	e00f      	b.n	80029be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800299e:	4a0a      	ldr	r2, [pc, #40]	@ (80029c8 <SysTick_Config+0x40>)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029a6:	210f      	movs	r1, #15
 80029a8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ac:	f7ff ff8e 	bl	80028cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b0:	4b05      	ldr	r3, [pc, #20]	@ (80029c8 <SysTick_Config+0x40>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029b6:	4b04      	ldr	r3, [pc, #16]	@ (80029c8 <SysTick_Config+0x40>)
 80029b8:	2207      	movs	r2, #7
 80029ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	e000e010 	.word	0xe000e010

080029cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff ff05 	bl	80027e4 <__NVIC_SetPriorityGrouping>
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b086      	sub	sp, #24
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4603      	mov	r3, r0
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029f4:	f7ff ff1a 	bl	800282c <__NVIC_GetPriorityGrouping>
 80029f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	6978      	ldr	r0, [r7, #20]
 8002a00:	f7ff ff8e 	bl	8002920 <NVIC_EncodePriority>
 8002a04:	4602      	mov	r2, r0
 8002a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff5d 	bl	80028cc <__NVIC_SetPriority>
}
 8002a12:	bf00      	nop
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	4603      	mov	r3, r0
 8002a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff ff0d 	bl	8002848 <__NVIC_EnableIRQ>
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ff1d 	bl	8002884 <__NVIC_DisableIRQ>
}
 8002a4a:	bf00      	nop
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff ff94 	bl	8002988 <SysTick_Config>
 8002a60:	4603      	mov	r3, r0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a76:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a78:	f7ff fc22 	bl	80022c0 <HAL_GetTick>
 8002a7c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d008      	beq.n	8002a9c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2280      	movs	r2, #128	@ 0x80
 8002a8e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e052      	b.n	8002b42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0216 	bic.w	r2, r2, #22
 8002aaa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002aba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d103      	bne.n	8002acc <HAL_DMA_Abort+0x62>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d007      	beq.n	8002adc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0208 	bic.w	r2, r2, #8
 8002ada:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0201 	bic.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aec:	e013      	b.n	8002b16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aee:	f7ff fbe7 	bl	80022c0 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	2b05      	cmp	r3, #5
 8002afa:	d90c      	bls.n	8002b16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2220      	movs	r2, #32
 8002b00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2203      	movs	r2, #3
 8002b06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e015      	b.n	8002b42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1e4      	bne.n	8002aee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b28:	223f      	movs	r2, #63	@ 0x3f
 8002b2a:	409a      	lsls	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d004      	beq.n	8002b68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2280      	movs	r2, #128	@ 0x80
 8002b62:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e00c      	b.n	8002b82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2205      	movs	r2, #5
 8002b6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b089      	sub	sp, #36	@ 0x24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
 8002baa:	e16b      	b.n	8002e84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bac:	2201      	movs	r2, #1
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	f040 815a 	bne.w	8002e7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d005      	beq.n	8002be2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d130      	bne.n	8002c44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	2203      	movs	r2, #3
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c18:	2201      	movs	r2, #1
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	4013      	ands	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	091b      	lsrs	r3, r3, #4
 8002c2e:	f003 0201 	and.w	r2, r3, #1
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d017      	beq.n	8002c80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	2203      	movs	r2, #3
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	689a      	ldr	r2, [r3, #8]
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d123      	bne.n	8002cd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	08da      	lsrs	r2, r3, #3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3208      	adds	r2, #8
 8002c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	220f      	movs	r2, #15
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	08da      	lsrs	r2, r3, #3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3208      	adds	r2, #8
 8002cce:	69b9      	ldr	r1, [r7, #24]
 8002cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	2203      	movs	r2, #3
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 0203 	and.w	r2, r3, #3
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80b4 	beq.w	8002e7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	4b60      	ldr	r3, [pc, #384]	@ (8002e9c <HAL_GPIO_Init+0x30c>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1e:	4a5f      	ldr	r2, [pc, #380]	@ (8002e9c <HAL_GPIO_Init+0x30c>)
 8002d20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d26:	4b5d      	ldr	r3, [pc, #372]	@ (8002e9c <HAL_GPIO_Init+0x30c>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d32:	4a5b      	ldr	r2, [pc, #364]	@ (8002ea0 <HAL_GPIO_Init+0x310>)
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	089b      	lsrs	r3, r3, #2
 8002d38:	3302      	adds	r3, #2
 8002d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	220f      	movs	r2, #15
 8002d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a52      	ldr	r2, [pc, #328]	@ (8002ea4 <HAL_GPIO_Init+0x314>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d02b      	beq.n	8002db6 <HAL_GPIO_Init+0x226>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a51      	ldr	r2, [pc, #324]	@ (8002ea8 <HAL_GPIO_Init+0x318>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d025      	beq.n	8002db2 <HAL_GPIO_Init+0x222>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a50      	ldr	r2, [pc, #320]	@ (8002eac <HAL_GPIO_Init+0x31c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d01f      	beq.n	8002dae <HAL_GPIO_Init+0x21e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4f      	ldr	r2, [pc, #316]	@ (8002eb0 <HAL_GPIO_Init+0x320>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d019      	beq.n	8002daa <HAL_GPIO_Init+0x21a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4e      	ldr	r2, [pc, #312]	@ (8002eb4 <HAL_GPIO_Init+0x324>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d013      	beq.n	8002da6 <HAL_GPIO_Init+0x216>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4d      	ldr	r2, [pc, #308]	@ (8002eb8 <HAL_GPIO_Init+0x328>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00d      	beq.n	8002da2 <HAL_GPIO_Init+0x212>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4c      	ldr	r2, [pc, #304]	@ (8002ebc <HAL_GPIO_Init+0x32c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d007      	beq.n	8002d9e <HAL_GPIO_Init+0x20e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4b      	ldr	r2, [pc, #300]	@ (8002ec0 <HAL_GPIO_Init+0x330>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d101      	bne.n	8002d9a <HAL_GPIO_Init+0x20a>
 8002d96:	2307      	movs	r3, #7
 8002d98:	e00e      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	e00c      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002d9e:	2306      	movs	r3, #6
 8002da0:	e00a      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002da2:	2305      	movs	r3, #5
 8002da4:	e008      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002da6:	2304      	movs	r3, #4
 8002da8:	e006      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002daa:	2303      	movs	r3, #3
 8002dac:	e004      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002dae:	2302      	movs	r3, #2
 8002db0:	e002      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <HAL_GPIO_Init+0x228>
 8002db6:	2300      	movs	r3, #0
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	f002 0203 	and.w	r2, r2, #3
 8002dbe:	0092      	lsls	r2, r2, #2
 8002dc0:	4093      	lsls	r3, r2
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dc8:	4935      	ldr	r1, [pc, #212]	@ (8002ea0 <HAL_GPIO_Init+0x310>)
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	089b      	lsrs	r3, r3, #2
 8002dce:	3302      	adds	r3, #2
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec4 <HAL_GPIO_Init+0x334>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dfa:	4a32      	ldr	r2, [pc, #200]	@ (8002ec4 <HAL_GPIO_Init+0x334>)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e00:	4b30      	ldr	r3, [pc, #192]	@ (8002ec4 <HAL_GPIO_Init+0x334>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e24:	4a27      	ldr	r2, [pc, #156]	@ (8002ec4 <HAL_GPIO_Init+0x334>)
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e2a:	4b26      	ldr	r3, [pc, #152]	@ (8002ec4 <HAL_GPIO_Init+0x334>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e4e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec4 <HAL_GPIO_Init+0x334>)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e54:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec4 <HAL_GPIO_Init+0x334>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e78:	4a12      	ldr	r2, [pc, #72]	@ (8002ec4 <HAL_GPIO_Init+0x334>)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3301      	adds	r3, #1
 8002e82:	61fb      	str	r3, [r7, #28]
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	2b0f      	cmp	r3, #15
 8002e88:	f67f ae90 	bls.w	8002bac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	bf00      	nop
 8002e90:	3724      	adds	r7, #36	@ 0x24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40013800 	.word	0x40013800
 8002ea4:	40020000 	.word	0x40020000
 8002ea8:	40020400 	.word	0x40020400
 8002eac:	40020800 	.word	0x40020800
 8002eb0:	40020c00 	.word	0x40020c00
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40021400 	.word	0x40021400
 8002ebc:	40021800 	.word	0x40021800
 8002ec0:	40021c00 	.word	0x40021c00
 8002ec4:	40013c00 	.word	0x40013c00

08002ec8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b087      	sub	sp, #28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	e0cd      	b.n	8003080 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	f040 80bd 	bne.w	800307a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002f00:	4a65      	ldr	r2, [pc, #404]	@ (8003098 <HAL_GPIO_DeInit+0x1d0>)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	089b      	lsrs	r3, r3, #2
 8002f06:	3302      	adds	r3, #2
 8002f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f0c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	220f      	movs	r2, #15
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a5d      	ldr	r2, [pc, #372]	@ (800309c <HAL_GPIO_DeInit+0x1d4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d02b      	beq.n	8002f82 <HAL_GPIO_DeInit+0xba>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a5c      	ldr	r2, [pc, #368]	@ (80030a0 <HAL_GPIO_DeInit+0x1d8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d025      	beq.n	8002f7e <HAL_GPIO_DeInit+0xb6>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a5b      	ldr	r2, [pc, #364]	@ (80030a4 <HAL_GPIO_DeInit+0x1dc>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d01f      	beq.n	8002f7a <HAL_GPIO_DeInit+0xb2>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a5a      	ldr	r2, [pc, #360]	@ (80030a8 <HAL_GPIO_DeInit+0x1e0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d019      	beq.n	8002f76 <HAL_GPIO_DeInit+0xae>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a59      	ldr	r2, [pc, #356]	@ (80030ac <HAL_GPIO_DeInit+0x1e4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <HAL_GPIO_DeInit+0xaa>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a58      	ldr	r2, [pc, #352]	@ (80030b0 <HAL_GPIO_DeInit+0x1e8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00d      	beq.n	8002f6e <HAL_GPIO_DeInit+0xa6>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a57      	ldr	r2, [pc, #348]	@ (80030b4 <HAL_GPIO_DeInit+0x1ec>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d007      	beq.n	8002f6a <HAL_GPIO_DeInit+0xa2>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a56      	ldr	r2, [pc, #344]	@ (80030b8 <HAL_GPIO_DeInit+0x1f0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d101      	bne.n	8002f66 <HAL_GPIO_DeInit+0x9e>
 8002f62:	2307      	movs	r3, #7
 8002f64:	e00e      	b.n	8002f84 <HAL_GPIO_DeInit+0xbc>
 8002f66:	2308      	movs	r3, #8
 8002f68:	e00c      	b.n	8002f84 <HAL_GPIO_DeInit+0xbc>
 8002f6a:	2306      	movs	r3, #6
 8002f6c:	e00a      	b.n	8002f84 <HAL_GPIO_DeInit+0xbc>
 8002f6e:	2305      	movs	r3, #5
 8002f70:	e008      	b.n	8002f84 <HAL_GPIO_DeInit+0xbc>
 8002f72:	2304      	movs	r3, #4
 8002f74:	e006      	b.n	8002f84 <HAL_GPIO_DeInit+0xbc>
 8002f76:	2303      	movs	r3, #3
 8002f78:	e004      	b.n	8002f84 <HAL_GPIO_DeInit+0xbc>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e002      	b.n	8002f84 <HAL_GPIO_DeInit+0xbc>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <HAL_GPIO_DeInit+0xbc>
 8002f82:	2300      	movs	r3, #0
 8002f84:	697a      	ldr	r2, [r7, #20]
 8002f86:	f002 0203 	and.w	r2, r2, #3
 8002f8a:	0092      	lsls	r2, r2, #2
 8002f8c:	4093      	lsls	r3, r2
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d132      	bne.n	8002ffa <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002f94:	4b49      	ldr	r3, [pc, #292]	@ (80030bc <HAL_GPIO_DeInit+0x1f4>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	4947      	ldr	r1, [pc, #284]	@ (80030bc <HAL_GPIO_DeInit+0x1f4>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002fa2:	4b46      	ldr	r3, [pc, #280]	@ (80030bc <HAL_GPIO_DeInit+0x1f4>)
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	4944      	ldr	r1, [pc, #272]	@ (80030bc <HAL_GPIO_DeInit+0x1f4>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002fb0:	4b42      	ldr	r3, [pc, #264]	@ (80030bc <HAL_GPIO_DeInit+0x1f4>)
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	4940      	ldr	r1, [pc, #256]	@ (80030bc <HAL_GPIO_DeInit+0x1f4>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80030bc <HAL_GPIO_DeInit+0x1f4>)
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	493d      	ldr	r1, [pc, #244]	@ (80030bc <HAL_GPIO_DeInit+0x1f4>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	220f      	movs	r2, #15
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002fdc:	4a2e      	ldr	r2, [pc, #184]	@ (8003098 <HAL_GPIO_DeInit+0x1d0>)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	089b      	lsrs	r3, r3, #2
 8002fe2:	3302      	adds	r3, #2
 8002fe4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	43da      	mvns	r2, r3
 8002fec:	482a      	ldr	r0, [pc, #168]	@ (8003098 <HAL_GPIO_DeInit+0x1d0>)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	089b      	lsrs	r3, r3, #2
 8002ff2:	400a      	ands	r2, r1
 8002ff4:	3302      	adds	r3, #2
 8002ff6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	2103      	movs	r1, #3
 8003004:	fa01 f303 	lsl.w	r3, r1, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	401a      	ands	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	08da      	lsrs	r2, r3, #3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3208      	adds	r2, #8
 8003018:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	220f      	movs	r2, #15
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	08d2      	lsrs	r2, r2, #3
 8003030:	4019      	ands	r1, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	3208      	adds	r2, #8
 8003036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	2103      	movs	r1, #3
 8003044:	fa01 f303 	lsl.w	r3, r1, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	401a      	ands	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	2101      	movs	r1, #1
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	fa01 f303 	lsl.w	r3, r1, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	401a      	ands	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	2103      	movs	r1, #3
 800306e:	fa01 f303 	lsl.w	r3, r1, r3
 8003072:	43db      	mvns	r3, r3
 8003074:	401a      	ands	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	3301      	adds	r3, #1
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	2b0f      	cmp	r3, #15
 8003084:	f67f af2e 	bls.w	8002ee4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	371c      	adds	r7, #28
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40013800 	.word	0x40013800
 800309c:	40020000 	.word	0x40020000
 80030a0:	40020400 	.word	0x40020400
 80030a4:	40020800 	.word	0x40020800
 80030a8:	40020c00 	.word	0x40020c00
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40021400 	.word	0x40021400
 80030b4:	40021800 	.word	0x40021800
 80030b8:	40021c00 	.word	0x40021c00
 80030bc:	40013c00 	.word	0x40013c00

080030c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	460b      	mov	r3, r1
 80030ca:	807b      	strh	r3, [r7, #2]
 80030cc:	4613      	mov	r3, r2
 80030ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030d0:	787b      	ldrb	r3, [r7, #1]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030d6:	887a      	ldrh	r2, [r7, #2]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030dc:	e003      	b.n	80030e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030de:	887b      	ldrh	r3, [r7, #2]
 80030e0:	041a      	lsls	r2, r3, #16
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	619a      	str	r2, [r3, #24]
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
	...

080030f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e12b      	b.n	800335e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fe fb6e 	bl	80017fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2224      	movs	r2, #36	@ 0x24
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0201 	bic.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003146:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003156:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003158:	f001 ffd2 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 800315c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	4a81      	ldr	r2, [pc, #516]	@ (8003368 <HAL_I2C_Init+0x274>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d807      	bhi.n	8003178 <HAL_I2C_Init+0x84>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4a80      	ldr	r2, [pc, #512]	@ (800336c <HAL_I2C_Init+0x278>)
 800316c:	4293      	cmp	r3, r2
 800316e:	bf94      	ite	ls
 8003170:	2301      	movls	r3, #1
 8003172:	2300      	movhi	r3, #0
 8003174:	b2db      	uxtb	r3, r3
 8003176:	e006      	b.n	8003186 <HAL_I2C_Init+0x92>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	4a7d      	ldr	r2, [pc, #500]	@ (8003370 <HAL_I2C_Init+0x27c>)
 800317c:	4293      	cmp	r3, r2
 800317e:	bf94      	ite	ls
 8003180:	2301      	movls	r3, #1
 8003182:	2300      	movhi	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e0e7      	b.n	800335e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4a78      	ldr	r2, [pc, #480]	@ (8003374 <HAL_I2C_Init+0x280>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	0c9b      	lsrs	r3, r3, #18
 8003198:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4a6a      	ldr	r2, [pc, #424]	@ (8003368 <HAL_I2C_Init+0x274>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d802      	bhi.n	80031c8 <HAL_I2C_Init+0xd4>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	3301      	adds	r3, #1
 80031c6:	e009      	b.n	80031dc <HAL_I2C_Init+0xe8>
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80031ce:	fb02 f303 	mul.w	r3, r2, r3
 80031d2:	4a69      	ldr	r2, [pc, #420]	@ (8003378 <HAL_I2C_Init+0x284>)
 80031d4:	fba2 2303 	umull	r2, r3, r2, r3
 80031d8:	099b      	lsrs	r3, r3, #6
 80031da:	3301      	adds	r3, #1
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6812      	ldr	r2, [r2, #0]
 80031e0:	430b      	orrs	r3, r1
 80031e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80031ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	495c      	ldr	r1, [pc, #368]	@ (8003368 <HAL_I2C_Init+0x274>)
 80031f8:	428b      	cmp	r3, r1
 80031fa:	d819      	bhi.n	8003230 <HAL_I2C_Init+0x13c>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1e59      	subs	r1, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	fbb1 f3f3 	udiv	r3, r1, r3
 800320a:	1c59      	adds	r1, r3, #1
 800320c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003210:	400b      	ands	r3, r1
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <HAL_I2C_Init+0x138>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	1e59      	subs	r1, r3, #1
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	fbb1 f3f3 	udiv	r3, r1, r3
 8003224:	3301      	adds	r3, #1
 8003226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322a:	e051      	b.n	80032d0 <HAL_I2C_Init+0x1dc>
 800322c:	2304      	movs	r3, #4
 800322e:	e04f      	b.n	80032d0 <HAL_I2C_Init+0x1dc>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d111      	bne.n	800325c <HAL_I2C_Init+0x168>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	1e58      	subs	r0, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6859      	ldr	r1, [r3, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	440b      	add	r3, r1
 8003246:	fbb0 f3f3 	udiv	r3, r0, r3
 800324a:	3301      	adds	r3, #1
 800324c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	e012      	b.n	8003282 <HAL_I2C_Init+0x18e>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	1e58      	subs	r0, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6859      	ldr	r1, [r3, #4]
 8003264:	460b      	mov	r3, r1
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	0099      	lsls	r1, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003272:	3301      	adds	r3, #1
 8003274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003278:	2b00      	cmp	r3, #0
 800327a:	bf0c      	ite	eq
 800327c:	2301      	moveq	r3, #1
 800327e:	2300      	movne	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Init+0x196>
 8003286:	2301      	movs	r3, #1
 8003288:	e022      	b.n	80032d0 <HAL_I2C_Init+0x1dc>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10e      	bne.n	80032b0 <HAL_I2C_Init+0x1bc>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1e58      	subs	r0, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6859      	ldr	r1, [r3, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	440b      	add	r3, r1
 80032a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a4:	3301      	adds	r3, #1
 80032a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032ae:	e00f      	b.n	80032d0 <HAL_I2C_Init+0x1dc>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	1e58      	subs	r0, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6859      	ldr	r1, [r3, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	0099      	lsls	r1, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032c6:	3301      	adds	r3, #1
 80032c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	6809      	ldr	r1, [r1, #0]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69da      	ldr	r2, [r3, #28]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80032fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	6911      	ldr	r1, [r2, #16]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	68d2      	ldr	r2, [r2, #12]
 800330a:	4311      	orrs	r1, r2
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	430b      	orrs	r3, r1
 8003312:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	000186a0 	.word	0x000186a0
 800336c:	001e847f 	.word	0x001e847f
 8003370:	003d08ff 	.word	0x003d08ff
 8003374:	431bde83 	.word	0x431bde83
 8003378:	10624dd3 	.word	0x10624dd3

0800337c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af02      	add	r7, sp, #8
 8003382:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e101      	b.n	8003592 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	d106      	bne.n	80033ae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f008 fded 	bl	800bf88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2203      	movs	r2, #3
 80033b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033bc:	d102      	bne.n	80033c4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f003 fe62 	bl	8007092 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	7c1a      	ldrb	r2, [r3, #16]
 80033d6:	f88d 2000 	strb.w	r2, [sp]
 80033da:	3304      	adds	r3, #4
 80033dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033de:	f003 fd41 	bl	8006e64 <USB_CoreInit>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0ce      	b.n	8003592 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2100      	movs	r1, #0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f003 fe5a 	bl	80070b4 <USB_SetCurrentMode>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d005      	beq.n	8003412 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2202      	movs	r2, #2
 800340a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e0bf      	b.n	8003592 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003412:	2300      	movs	r3, #0
 8003414:	73fb      	strb	r3, [r7, #15]
 8003416:	e04a      	b.n	80034ae <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003418:	7bfa      	ldrb	r2, [r7, #15]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	3315      	adds	r3, #21
 8003428:	2201      	movs	r2, #1
 800342a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800342c:	7bfa      	ldrb	r2, [r7, #15]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	3314      	adds	r3, #20
 800343c:	7bfa      	ldrb	r2, [r7, #15]
 800343e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003440:	7bfa      	ldrb	r2, [r7, #15]
 8003442:	7bfb      	ldrb	r3, [r7, #15]
 8003444:	b298      	uxth	r0, r3
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	332e      	adds	r3, #46	@ 0x2e
 8003454:	4602      	mov	r2, r0
 8003456:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003458:	7bfa      	ldrb	r2, [r7, #15]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	3318      	adds	r3, #24
 8003468:	2200      	movs	r2, #0
 800346a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800346c:	7bfa      	ldrb	r2, [r7, #15]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	4613      	mov	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4413      	add	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	331c      	adds	r3, #28
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003480:	7bfa      	ldrb	r2, [r7, #15]
 8003482:	6879      	ldr	r1, [r7, #4]
 8003484:	4613      	mov	r3, r2
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	440b      	add	r3, r1
 800348e:	3320      	adds	r3, #32
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003494:	7bfa      	ldrb	r2, [r7, #15]
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	3324      	adds	r3, #36	@ 0x24
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	3301      	adds	r3, #1
 80034ac:	73fb      	strb	r3, [r7, #15]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	791b      	ldrb	r3, [r3, #4]
 80034b2:	7bfa      	ldrb	r2, [r7, #15]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d3af      	bcc.n	8003418 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]
 80034bc:	e044      	b.n	8003548 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034be:	7bfa      	ldrb	r2, [r7, #15]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80034d0:	2200      	movs	r2, #0
 80034d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034d4:	7bfa      	ldrb	r2, [r7, #15]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80034e6:	7bfa      	ldrb	r2, [r7, #15]
 80034e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034ea:	7bfa      	ldrb	r2, [r7, #15]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003500:	7bfa      	ldrb	r2, [r7, #15]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	4413      	add	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800353e:	2200      	movs	r2, #0
 8003540:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003542:	7bfb      	ldrb	r3, [r7, #15]
 8003544:	3301      	adds	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	791b      	ldrb	r3, [r3, #4]
 800354c:	7bfa      	ldrb	r2, [r7, #15]
 800354e:	429a      	cmp	r2, r3
 8003550:	d3b5      	bcc.n	80034be <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	7c1a      	ldrb	r2, [r3, #16]
 800355a:	f88d 2000 	strb.w	r2, [sp]
 800355e:	3304      	adds	r3, #4
 8003560:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003562:	f003 fdf3 	bl	800714c <USB_DevInit>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e00c      	b.n	8003592 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f004 fe3d 	bl	800820a <USB_DevDisconnect>

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_PCD_Start+0x1c>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e022      	b.n	80035fc <HAL_PCD_Start+0x62>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d105      	bne.n	80035de <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f003 fd44 	bl	8007070 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f004 fdeb 	bl	80081c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b08d      	sub	sp, #52	@ 0x34
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f004 fea9 	bl	8008372 <USB_GetMode>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	f040 848c 	bne.w	8003f40 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f004 fe0d 	bl	800824c <USB_ReadInterrupts>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 8482 	beq.w	8003f3e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	0a1b      	lsrs	r3, r3, #8
 8003644:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f004 fdfa 	bl	800824c <USB_ReadInterrupts>
 8003658:	4603      	mov	r3, r0
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b02      	cmp	r3, #2
 8003660:	d107      	bne.n	8003672 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695a      	ldr	r2, [r3, #20]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f002 0202 	and.w	r2, r2, #2
 8003670:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f004 fde8 	bl	800824c <USB_ReadInterrupts>
 800367c:	4603      	mov	r3, r0
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	2b10      	cmp	r3, #16
 8003684:	d161      	bne.n	800374a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699a      	ldr	r2, [r3, #24]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 0210 	bic.w	r2, r2, #16
 8003694:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f003 020f 	and.w	r2, r3, #15
 80036a2:	4613      	mov	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	4413      	add	r3, r2
 80036b2:	3304      	adds	r3, #4
 80036b4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	0c5b      	lsrs	r3, r3, #17
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d124      	bne.n	800370c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d035      	beq.n	800373a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	091b      	lsrs	r3, r3, #4
 80036d6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036dc:	b29b      	uxth	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	6a38      	ldr	r0, [r7, #32]
 80036e2:	f004 fc1f 	bl	8007f24 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	091b      	lsrs	r3, r3, #4
 80036ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036f2:	441a      	add	r2, r3
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	695a      	ldr	r2, [r3, #20]
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	091b      	lsrs	r3, r3, #4
 8003700:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003704:	441a      	add	r2, r3
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	615a      	str	r2, [r3, #20]
 800370a:	e016      	b.n	800373a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	0c5b      	lsrs	r3, r3, #17
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	2b06      	cmp	r3, #6
 8003716:	d110      	bne.n	800373a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800371e:	2208      	movs	r2, #8
 8003720:	4619      	mov	r1, r3
 8003722:	6a38      	ldr	r0, [r7, #32]
 8003724:	f004 fbfe 	bl	8007f24 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	695a      	ldr	r2, [r3, #20]
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	091b      	lsrs	r3, r3, #4
 8003730:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003734:	441a      	add	r2, r3
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699a      	ldr	r2, [r3, #24]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0210 	orr.w	r2, r2, #16
 8003748:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f004 fd7c 	bl	800824c <USB_ReadInterrupts>
 8003754:	4603      	mov	r3, r0
 8003756:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800375a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800375e:	f040 80a7 	bne.w	80038b0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f004 fd81 	bl	8008272 <USB_ReadDevAllOutEpInterrupt>
 8003770:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003772:	e099      	b.n	80038a8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	f000 808e 	beq.w	800389c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	4611      	mov	r1, r2
 800378a:	4618      	mov	r0, r3
 800378c:	f004 fda5 	bl	80082da <USB_ReadDevOutEPInterrupt>
 8003790:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00c      	beq.n	80037b6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800379c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037a8:	461a      	mov	r2, r3
 80037aa:	2301      	movs	r3, #1
 80037ac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80037ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fea3 	bl	80044fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f003 0308 	and.w	r3, r3, #8
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00c      	beq.n	80037da <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80037c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037cc:	461a      	mov	r2, r3
 80037ce:	2308      	movs	r3, #8
 80037d0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80037d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 ff79 	bl	80046cc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f003 0310 	and.w	r3, r3, #16
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80037e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037f0:	461a      	mov	r2, r3
 80037f2:	2310      	movs	r3, #16
 80037f4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d030      	beq.n	8003862 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003808:	2b80      	cmp	r3, #128	@ 0x80
 800380a:	d109      	bne.n	8003820 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	69fa      	ldr	r2, [r7, #28]
 8003816:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800381a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800381e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003820:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	4413      	add	r3, r2
 8003832:	3304      	adds	r3, #4
 8003834:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	78db      	ldrb	r3, [r3, #3]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d108      	bne.n	8003850 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2200      	movs	r2, #0
 8003842:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003846:	b2db      	uxtb	r3, r3
 8003848:	4619      	mov	r1, r3
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f008 fca2 	bl	800c194 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800385c:	461a      	mov	r2, r3
 800385e:	2302      	movs	r3, #2
 8003860:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	4413      	add	r3, r2
 8003874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003878:	461a      	mov	r2, r3
 800387a:	2320      	movs	r3, #32
 800387c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d009      	beq.n	800389c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	4413      	add	r3, r2
 8003890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003894:	461a      	mov	r2, r3
 8003896:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800389a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800389c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800389e:	3301      	adds	r3, #1
 80038a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80038a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a4:	085b      	lsrs	r3, r3, #1
 80038a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80038a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f47f af62 	bne.w	8003774 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f004 fcc9 	bl	800824c <USB_ReadInterrupts>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038c4:	f040 80db 	bne.w	8003a7e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f004 fcea 	bl	80082a6 <USB_ReadDevAllInEpInterrupt>
 80038d2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80038d8:	e0cd      	b.n	8003a76 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80038da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80c2 	beq.w	8003a6a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	4611      	mov	r1, r2
 80038f0:	4618      	mov	r0, r3
 80038f2:	f004 fd10 	bl	8008316 <USB_ReadDevInEPInterrupt>
 80038f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d057      	beq.n	80039b2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003904:	f003 030f 	and.w	r3, r3, #15
 8003908:	2201      	movs	r2, #1
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003916:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	43db      	mvns	r3, r3
 800391c:	69f9      	ldr	r1, [r7, #28]
 800391e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003922:	4013      	ands	r3, r2
 8003924:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003932:	461a      	mov	r2, r3
 8003934:	2301      	movs	r3, #1
 8003936:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	799b      	ldrb	r3, [r3, #6]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d132      	bne.n	80039a6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003944:	4613      	mov	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	3320      	adds	r3, #32
 8003950:	6819      	ldr	r1, [r3, #0]
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003956:	4613      	mov	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4413      	add	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4403      	add	r3, r0
 8003960:	331c      	adds	r3, #28
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4419      	add	r1, r3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800396a:	4613      	mov	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4403      	add	r3, r0
 8003974:	3320      	adds	r3, #32
 8003976:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397a:	2b00      	cmp	r3, #0
 800397c:	d113      	bne.n	80039a6 <HAL_PCD_IRQHandler+0x3a2>
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003982:	4613      	mov	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	4413      	add	r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	3324      	adds	r3, #36	@ 0x24
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d108      	bne.n	80039a6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6818      	ldr	r0, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800399e:	461a      	mov	r2, r3
 80039a0:	2101      	movs	r1, #1
 80039a2:	f004 fd17 	bl	80083d4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	4619      	mov	r1, r3
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f008 fb6c 	bl	800c08a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d008      	beq.n	80039ce <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039c8:	461a      	mov	r2, r3
 80039ca:	2308      	movs	r3, #8
 80039cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80039d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039e4:	461a      	mov	r2, r3
 80039e6:	2310      	movs	r3, #16
 80039e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80039f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a00:	461a      	mov	r2, r3
 8003a02:	2340      	movs	r3, #64	@ 0x40
 8003a04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d023      	beq.n	8003a58 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003a10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a12:	6a38      	ldr	r0, [r7, #32]
 8003a14:	f003 fcfe 	bl	8007414 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003a18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	3310      	adds	r3, #16
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	4413      	add	r3, r2
 8003a28:	3304      	adds	r3, #4
 8003a2a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	78db      	ldrb	r3, [r3, #3]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d108      	bne.n	8003a46 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2200      	movs	r2, #0
 8003a38:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	4619      	mov	r1, r3
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f008 fbb9 	bl	800c1b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a52:	461a      	mov	r2, r3
 8003a54:	2302      	movs	r3, #2
 8003a56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 fcbd 	bl	80043e4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a72:	085b      	lsrs	r3, r3, #1
 8003a74:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	f47f af2e 	bne.w	80038da <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f004 fbe2 	bl	800824c <USB_ReadInterrupts>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a92:	d122      	bne.n	8003ada <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	69fa      	ldr	r2, [r7, #28]
 8003a9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003aa2:	f023 0301 	bic.w	r3, r3, #1
 8003aa6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d108      	bne.n	8003ac4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003aba:	2100      	movs	r1, #0
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 fea3 	bl	8004808 <HAL_PCDEx_LPM_Callback>
 8003ac2:	e002      	b.n	8003aca <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f008 fb57 	bl	800c178 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695a      	ldr	r2, [r3, #20]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003ad8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f004 fbb4 	bl	800824c <USB_ReadInterrupts>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003aea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aee:	d112      	bne.n	8003b16 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d102      	bne.n	8003b06 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f008 fb13 	bl	800c12c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695a      	ldr	r2, [r3, #20]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003b14:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f004 fb96 	bl	800824c <USB_ReadInterrupts>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b2a:	f040 80b7 	bne.w	8003c9c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	69fa      	ldr	r2, [r7, #28]
 8003b38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2110      	movs	r1, #16
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f003 fc63 	bl	8007414 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b4e:	2300      	movs	r3, #0
 8003b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b52:	e046      	b.n	8003be2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b60:	461a      	mov	r2, r3
 8003b62:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b66:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b78:	0151      	lsls	r1, r2, #5
 8003b7a:	69fa      	ldr	r2, [r7, #28]
 8003b7c:	440a      	add	r2, r1
 8003b7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b86:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b94:	461a      	mov	r2, r3
 8003b96:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b9a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bac:	0151      	lsls	r1, r2, #5
 8003bae:	69fa      	ldr	r2, [r7, #28]
 8003bb0:	440a      	add	r2, r1
 8003bb2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bb6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003bba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bcc:	0151      	lsls	r1, r2, #5
 8003bce:	69fa      	ldr	r2, [r7, #28]
 8003bd0:	440a      	add	r2, r1
 8003bd2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bd6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003bda:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bde:	3301      	adds	r3, #1
 8003be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	791b      	ldrb	r3, [r3, #4]
 8003be6:	461a      	mov	r2, r3
 8003be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d3b2      	bcc.n	8003b54 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	69fa      	ldr	r2, [r7, #28]
 8003bf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bfc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003c00:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	7bdb      	ldrb	r3, [r3, #15]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d016      	beq.n	8003c38 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c1a:	f043 030b 	orr.w	r3, r3, #11
 8003c1e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2a:	69fa      	ldr	r2, [r7, #28]
 8003c2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c30:	f043 030b 	orr.w	r3, r3, #11
 8003c34:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c36:	e015      	b.n	8003c64 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c3e:	695b      	ldr	r3, [r3, #20]
 8003c40:	69fa      	ldr	r2, [r7, #28]
 8003c42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c46:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c4a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003c4e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c5e:	f043 030b 	orr.w	r3, r3, #11
 8003c62:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	69fa      	ldr	r2, [r7, #28]
 8003c6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c72:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003c76:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6818      	ldr	r0, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c86:	461a      	mov	r2, r3
 8003c88:	f004 fba4 	bl	80083d4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003c9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f004 fad3 	bl	800824c <USB_ReadInterrupts>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cb0:	d123      	bne.n	8003cfa <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f004 fb69 	bl	800838e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f003 fc20 	bl	8007506 <USB_GetDevSpeed>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	461a      	mov	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681c      	ldr	r4, [r3, #0]
 8003cd2:	f001 fa09 	bl	80050e8 <HAL_RCC_GetHCLKFreq>
 8003cd6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4620      	mov	r0, r4
 8003ce0:	f003 f924 	bl	8006f2c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f008 f9f8 	bl	800c0da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695a      	ldr	r2, [r3, #20]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003cf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f004 faa4 	bl	800824c <USB_ReadInterrupts>
 8003d04:	4603      	mov	r3, r0
 8003d06:	f003 0308 	and.w	r3, r3, #8
 8003d0a:	2b08      	cmp	r3, #8
 8003d0c:	d10a      	bne.n	8003d24 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f008 f9d5 	bl	800c0be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	695a      	ldr	r2, [r3, #20]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f002 0208 	and.w	r2, r2, #8
 8003d22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f004 fa8f 	bl	800824c <USB_ReadInterrupts>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d34:	2b80      	cmp	r3, #128	@ 0x80
 8003d36:	d123      	bne.n	8003d80 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d44:	2301      	movs	r3, #1
 8003d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d48:	e014      	b.n	8003d74 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d4e:	4613      	mov	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d105      	bne.n	8003d6e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	4619      	mov	r1, r3
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fb0a 	bl	8004382 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d70:	3301      	adds	r3, #1
 8003d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	791b      	ldrb	r3, [r3, #4]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d3e4      	bcc.n	8003d4a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f004 fa61 	bl	800824c <USB_ReadInterrupts>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d94:	d13c      	bne.n	8003e10 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d96:	2301      	movs	r3, #1
 8003d98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d9a:	e02b      	b.n	8003df4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003db0:	4613      	mov	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4413      	add	r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	440b      	add	r3, r1
 8003dba:	3318      	adds	r3, #24
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d115      	bne.n	8003dee <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003dc2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	da12      	bge.n	8003dee <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dcc:	4613      	mov	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	3317      	adds	r3, #23
 8003dd8:	2201      	movs	r2, #1
 8003dda:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	4619      	mov	r1, r3
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 faca 	bl	8004382 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df0:	3301      	adds	r3, #1
 8003df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	791b      	ldrb	r3, [r3, #4]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d3cd      	bcc.n	8003d9c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695a      	ldr	r2, [r3, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f004 fa19 	bl	800824c <USB_ReadInterrupts>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e24:	d156      	bne.n	8003ed4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e26:	2301      	movs	r3, #1
 8003e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e2a:	e045      	b.n	8003eb8 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e3c:	6879      	ldr	r1, [r7, #4]
 8003e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d12e      	bne.n	8003eb2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e54:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	da2b      	bge.n	8003eb2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003e66:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d121      	bne.n	8003eb2 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e72:	4613      	mov	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003e80:	2201      	movs	r2, #1
 8003e82:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10a      	bne.n	8003eb2 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	69fa      	ldr	r2, [r7, #28]
 8003ea6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003eaa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003eae:	6053      	str	r3, [r2, #4]
            break;
 8003eb0:	e008      	b.n	8003ec4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	791b      	ldrb	r3, [r3, #4]
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d3b3      	bcc.n	8003e2c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003ed2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f004 f9b7 	bl	800824c <USB_ReadInterrupts>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee8:	d10a      	bne.n	8003f00 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f008 f976 	bl	800c1dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003efe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f004 f9a1 	bl	800824c <USB_ReadInterrupts>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d115      	bne.n	8003f40 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d002      	beq.n	8003f2c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f008 f966 	bl	800c1f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6859      	ldr	r1, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	605a      	str	r2, [r3, #4]
 8003f3c:	e000      	b.n	8003f40 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003f3e:	bf00      	nop
    }
  }
}
 8003f40:	3734      	adds	r7, #52	@ 0x34
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd90      	pop	{r4, r7, pc}

08003f46 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f46:	b580      	push	{r7, lr}
 8003f48:	b082      	sub	sp, #8
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d101      	bne.n	8003f60 <HAL_PCD_SetAddress+0x1a>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e012      	b.n	8003f86 <HAL_PCD_SetAddress+0x40>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	78fa      	ldrb	r2, [r7, #3]
 8003f6c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	78fa      	ldrb	r2, [r7, #3]
 8003f74:	4611      	mov	r1, r2
 8003f76:	4618      	mov	r0, r3
 8003f78:	f004 f900 	bl	800817c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b084      	sub	sp, #16
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	4608      	mov	r0, r1
 8003f98:	4611      	mov	r1, r2
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	70fb      	strb	r3, [r7, #3]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	803b      	strh	r3, [r7, #0]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	da0f      	bge.n	8003fd4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fb4:	78fb      	ldrb	r3, [r7, #3]
 8003fb6:	f003 020f 	and.w	r2, r3, #15
 8003fba:	4613      	mov	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	3310      	adds	r3, #16
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	3304      	adds	r3, #4
 8003fca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	705a      	strb	r2, [r3, #1]
 8003fd2:	e00f      	b.n	8003ff4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	f003 020f 	and.w	r2, r3, #15
 8003fda:	4613      	mov	r3, r2
 8003fdc:	00db      	lsls	r3, r3, #3
 8003fde:	4413      	add	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	4413      	add	r3, r2
 8003fea:	3304      	adds	r3, #4
 8003fec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004000:	883b      	ldrh	r3, [r7, #0]
 8004002:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	78ba      	ldrb	r2, [r7, #2]
 800400e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	785b      	ldrb	r3, [r3, #1]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d004      	beq.n	8004022 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004022:	78bb      	ldrb	r3, [r7, #2]
 8004024:	2b02      	cmp	r3, #2
 8004026:	d102      	bne.n	800402e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2200      	movs	r2, #0
 800402c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_PCD_EP_Open+0xae>
 8004038:	2302      	movs	r3, #2
 800403a:	e00e      	b.n	800405a <HAL_PCD_EP_Open+0xcc>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68f9      	ldr	r1, [r7, #12]
 800404a:	4618      	mov	r0, r3
 800404c:	f003 fa80 	bl	8007550 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004058:	7afb      	ldrb	r3, [r7, #11]
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	460b      	mov	r3, r1
 800406c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800406e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004072:	2b00      	cmp	r3, #0
 8004074:	da0f      	bge.n	8004096 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	f003 020f 	and.w	r2, r3, #15
 800407c:	4613      	mov	r3, r2
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	4413      	add	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	3310      	adds	r3, #16
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4413      	add	r3, r2
 800408a:	3304      	adds	r3, #4
 800408c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2201      	movs	r2, #1
 8004092:	705a      	strb	r2, [r3, #1]
 8004094:	e00f      	b.n	80040b6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004096:	78fb      	ldrb	r3, [r7, #3]
 8004098:	f003 020f 	and.w	r2, r3, #15
 800409c:	4613      	mov	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	4413      	add	r3, r2
 80040ac:	3304      	adds	r3, #4
 80040ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	f003 030f 	and.w	r3, r3, #15
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_PCD_EP_Close+0x6e>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e00e      	b.n	80040ee <HAL_PCD_EP_Close+0x8c>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68f9      	ldr	r1, [r7, #12]
 80040de:	4618      	mov	r0, r3
 80040e0:	f003 fabe 	bl	8007660 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b086      	sub	sp, #24
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
 8004102:	460b      	mov	r3, r1
 8004104:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004106:	7afb      	ldrb	r3, [r7, #11]
 8004108:	f003 020f 	and.w	r2, r3, #15
 800410c:	4613      	mov	r3, r2
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	3304      	adds	r3, #4
 800411e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2200      	movs	r2, #0
 8004130:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2200      	movs	r2, #0
 8004136:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004138:	7afb      	ldrb	r3, [r7, #11]
 800413a:	f003 030f 	and.w	r3, r3, #15
 800413e:	b2da      	uxtb	r2, r3
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	799b      	ldrb	r3, [r3, #6]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d102      	bne.n	8004152 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	799b      	ldrb	r3, [r3, #6]
 800415a:	461a      	mov	r2, r3
 800415c:	6979      	ldr	r1, [r7, #20]
 800415e:	f003 fb5b 	bl	8007818 <USB_EPStartXfer>

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	f003 020f 	and.w	r2, r3, #15
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	4413      	add	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	440b      	add	r3, r1
 800418a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800418e:	681b      	ldr	r3, [r3, #0]
}
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	603b      	str	r3, [r7, #0]
 80041a8:	460b      	mov	r3, r1
 80041aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041ac:	7afb      	ldrb	r3, [r7, #11]
 80041ae:	f003 020f 	and.w	r2, r3, #15
 80041b2:	4613      	mov	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	3310      	adds	r3, #16
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4413      	add	r3, r2
 80041c0:	3304      	adds	r3, #4
 80041c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	2200      	movs	r2, #0
 80041d4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2201      	movs	r2, #1
 80041da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041dc:	7afb      	ldrb	r3, [r7, #11]
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	799b      	ldrb	r3, [r3, #6]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d102      	bne.n	80041f6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6818      	ldr	r0, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	799b      	ldrb	r3, [r3, #6]
 80041fe:	461a      	mov	r2, r3
 8004200:	6979      	ldr	r1, [r7, #20]
 8004202:	f003 fb09 	bl	8007818 <USB_EPStartXfer>

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800421c:	78fb      	ldrb	r3, [r7, #3]
 800421e:	f003 030f 	and.w	r3, r3, #15
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	7912      	ldrb	r2, [r2, #4]
 8004226:	4293      	cmp	r3, r2
 8004228:	d901      	bls.n	800422e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e04f      	b.n	80042ce <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800422e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004232:	2b00      	cmp	r3, #0
 8004234:	da0f      	bge.n	8004256 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	f003 020f 	and.w	r2, r3, #15
 800423c:	4613      	mov	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	3310      	adds	r3, #16
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	4413      	add	r3, r2
 800424a:	3304      	adds	r3, #4
 800424c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	705a      	strb	r2, [r3, #1]
 8004254:	e00d      	b.n	8004272 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004256:	78fa      	ldrb	r2, [r7, #3]
 8004258:	4613      	mov	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	4413      	add	r3, r2
 8004268:	3304      	adds	r3, #4
 800426a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	b2da      	uxtb	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <HAL_PCD_EP_SetStall+0x82>
 800428e:	2302      	movs	r3, #2
 8004290:	e01d      	b.n	80042ce <HAL_PCD_EP_SetStall+0xbe>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68f9      	ldr	r1, [r7, #12]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f003 fe97 	bl	8007fd4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042a6:	78fb      	ldrb	r3, [r7, #3]
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d109      	bne.n	80042c4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6818      	ldr	r0, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	7999      	ldrb	r1, [r3, #6]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80042be:	461a      	mov	r2, r3
 80042c0:	f004 f888 	bl	80083d4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	460b      	mov	r3, r1
 80042e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	7912      	ldrb	r2, [r2, #4]
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d901      	bls.n	80042f4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e042      	b.n	800437a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	da0f      	bge.n	800431c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042fc:	78fb      	ldrb	r3, [r7, #3]
 80042fe:	f003 020f 	and.w	r2, r3, #15
 8004302:	4613      	mov	r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	3310      	adds	r3, #16
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	4413      	add	r3, r2
 8004310:	3304      	adds	r3, #4
 8004312:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2201      	movs	r2, #1
 8004318:	705a      	strb	r2, [r3, #1]
 800431a:	e00f      	b.n	800433c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	f003 020f 	and.w	r2, r3, #15
 8004322:	4613      	mov	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	4413      	add	r3, r2
 8004332:	3304      	adds	r3, #4
 8004334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	b2da      	uxtb	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_PCD_EP_ClrStall+0x86>
 8004358:	2302      	movs	r3, #2
 800435a:	e00e      	b.n	800437a <HAL_PCD_EP_ClrStall+0xa4>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68f9      	ldr	r1, [r7, #12]
 800436a:	4618      	mov	r0, r3
 800436c:	f003 fea0 	bl	80080b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b084      	sub	sp, #16
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
 800438a:	460b      	mov	r3, r1
 800438c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800438e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004392:	2b00      	cmp	r3, #0
 8004394:	da0c      	bge.n	80043b0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004396:	78fb      	ldrb	r3, [r7, #3]
 8004398:	f003 020f 	and.w	r2, r3, #15
 800439c:	4613      	mov	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	3310      	adds	r3, #16
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	4413      	add	r3, r2
 80043aa:	3304      	adds	r3, #4
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	e00c      	b.n	80043ca <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043b0:	78fb      	ldrb	r3, [r7, #3]
 80043b2:	f003 020f 	and.w	r2, r3, #15
 80043b6:	4613      	mov	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	4413      	add	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	4413      	add	r3, r2
 80043c6:	3304      	adds	r3, #4
 80043c8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68f9      	ldr	r1, [r7, #12]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f003 fcbf 	bl	8007d54 <USB_EPStopXfer>
 80043d6:	4603      	mov	r3, r0
 80043d8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80043da:	7afb      	ldrb	r3, [r7, #11]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	@ 0x28
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	4613      	mov	r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	3310      	adds	r3, #16
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	4413      	add	r3, r2
 8004408:	3304      	adds	r3, #4
 800440a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	695a      	ldr	r2, [r3, #20]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	429a      	cmp	r2, r3
 8004416:	d901      	bls.n	800441c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e06b      	b.n	80044f4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	691a      	ldr	r2, [r3, #16]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	69fa      	ldr	r2, [r7, #28]
 800442e:	429a      	cmp	r2, r3
 8004430:	d902      	bls.n	8004438 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	3303      	adds	r3, #3
 800443c:	089b      	lsrs	r3, r3, #2
 800443e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004440:	e02a      	b.n	8004498 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	429a      	cmp	r2, r3
 8004456:	d902      	bls.n	800445e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	3303      	adds	r3, #3
 8004462:	089b      	lsrs	r3, r3, #2
 8004464:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	68d9      	ldr	r1, [r3, #12]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	b2da      	uxtb	r2, r3
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	4603      	mov	r3, r0
 800447a:	6978      	ldr	r0, [r7, #20]
 800447c:	f003 fd14 	bl	8007ea8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	441a      	add	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	695a      	ldr	r2, [r3, #20]
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	441a      	add	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d809      	bhi.n	80044c2 <PCD_WriteEmptyTxFifo+0xde>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	695a      	ldr	r2, [r3, #20]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d203      	bcs.n	80044c2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1bf      	bne.n	8004442 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d811      	bhi.n	80044f2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	2201      	movs	r2, #1
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	43db      	mvns	r3, r3
 80044e8:	6939      	ldr	r1, [r7, #16]
 80044ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044ee:	4013      	ands	r3, r2
 80044f0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3720      	adds	r7, #32
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	333c      	adds	r3, #60	@ 0x3c
 8004514:	3304      	adds	r3, #4
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	799b      	ldrb	r3, [r3, #6]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d17b      	bne.n	800462a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b00      	cmp	r3, #0
 800453a:	d015      	beq.n	8004568 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	4a61      	ldr	r2, [pc, #388]	@ (80046c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	f240 80b9 	bls.w	80046b8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 80b3 	beq.w	80046b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800455e:	461a      	mov	r2, r3
 8004560:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004564:	6093      	str	r3, [r2, #8]
 8004566:	e0a7      	b.n	80046b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	f003 0320 	and.w	r3, r3, #32
 800456e:	2b00      	cmp	r3, #0
 8004570:	d009      	beq.n	8004586 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800457e:	461a      	mov	r2, r3
 8004580:	2320      	movs	r3, #32
 8004582:	6093      	str	r3, [r2, #8]
 8004584:	e098      	b.n	80046b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800458c:	2b00      	cmp	r3, #0
 800458e:	f040 8093 	bne.w	80046b8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	4a4b      	ldr	r2, [pc, #300]	@ (80046c4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d90f      	bls.n	80045ba <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045b0:	461a      	mov	r2, r3
 80045b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045b6:	6093      	str	r3, [r2, #8]
 80045b8:	e07e      	b.n	80046b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	4613      	mov	r3, r2
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	4413      	add	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	4413      	add	r3, r2
 80045cc:	3304      	adds	r3, #4
 80045ce:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a1a      	ldr	r2, [r3, #32]
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	0159      	lsls	r1, r3, #5
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	440b      	add	r3, r1
 80045dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e6:	1ad2      	subs	r2, r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d114      	bne.n	800461c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d109      	bne.n	800460e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6818      	ldr	r0, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004604:	461a      	mov	r2, r3
 8004606:	2101      	movs	r1, #1
 8004608:	f003 fee4 	bl	80083d4 <USB_EP0_OutStart>
 800460c:	e006      	b.n	800461c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	441a      	add	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	b2db      	uxtb	r3, r3
 8004620:	4619      	mov	r1, r3
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f007 fd16 	bl	800c054 <HAL_PCD_DataOutStageCallback>
 8004628:	e046      	b.n	80046b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	4a26      	ldr	r2, [pc, #152]	@ (80046c8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d124      	bne.n	800467c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004648:	461a      	mov	r2, r3
 800464a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800464e:	6093      	str	r3, [r2, #8]
 8004650:	e032      	b.n	80046b8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d008      	beq.n	800466e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004668:	461a      	mov	r2, r3
 800466a:	2320      	movs	r3, #32
 800466c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	4619      	mov	r1, r3
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f007 fced 	bl	800c054 <HAL_PCD_DataOutStageCallback>
 800467a:	e01d      	b.n	80046b8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d114      	bne.n	80046ac <PCD_EP_OutXfrComplete_int+0x1b0>
 8004682:	6879      	ldr	r1, [r7, #4]
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	4613      	mov	r3, r2
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	4413      	add	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d108      	bne.n	80046ac <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046a4:	461a      	mov	r2, r3
 80046a6:	2100      	movs	r1, #0
 80046a8:	f003 fe94 	bl	80083d4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	4619      	mov	r1, r3
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f007 fcce 	bl	800c054 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3720      	adds	r7, #32
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	4f54300a 	.word	0x4f54300a
 80046c8:	4f54310a 	.word	0x4f54310a

080046cc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	333c      	adds	r3, #60	@ 0x3c
 80046e4:	3304      	adds	r3, #4
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	015a      	lsls	r2, r3, #5
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	4413      	add	r3, r2
 80046f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4a15      	ldr	r2, [pc, #84]	@ (8004754 <PCD_EP_OutSetupPacket_int+0x88>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d90e      	bls.n	8004720 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004708:	2b00      	cmp	r3, #0
 800470a:	d009      	beq.n	8004720 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004718:	461a      	mov	r2, r3
 800471a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800471e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f007 fc85 	bl	800c030 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4a0a      	ldr	r2, [pc, #40]	@ (8004754 <PCD_EP_OutSetupPacket_int+0x88>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d90c      	bls.n	8004748 <PCD_EP_OutSetupPacket_int+0x7c>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	799b      	ldrb	r3, [r3, #6]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d108      	bne.n	8004748 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004740:	461a      	mov	r2, r3
 8004742:	2101      	movs	r1, #1
 8004744:	f003 fe46 	bl	80083d4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	4f54300a 	.word	0x4f54300a

08004758 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	70fb      	strb	r3, [r7, #3]
 8004764:	4613      	mov	r3, r2
 8004766:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004770:	78fb      	ldrb	r3, [r7, #3]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d107      	bne.n	8004786 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004776:	883b      	ldrh	r3, [r7, #0]
 8004778:	0419      	lsls	r1, r3, #16
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	430a      	orrs	r2, r1
 8004782:	629a      	str	r2, [r3, #40]	@ 0x28
 8004784:	e028      	b.n	80047d8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478c:	0c1b      	lsrs	r3, r3, #16
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	4413      	add	r3, r2
 8004792:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004794:	2300      	movs	r3, #0
 8004796:	73fb      	strb	r3, [r7, #15]
 8004798:	e00d      	b.n	80047b6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	7bfb      	ldrb	r3, [r7, #15]
 80047a0:	3340      	adds	r3, #64	@ 0x40
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	0c1b      	lsrs	r3, r3, #16
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	4413      	add	r3, r2
 80047ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
 80047b2:	3301      	adds	r3, #1
 80047b4:	73fb      	strb	r3, [r7, #15]
 80047b6:	7bfa      	ldrb	r2, [r7, #15]
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	429a      	cmp	r2, r3
 80047be:	d3ec      	bcc.n	800479a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80047c0:	883b      	ldrh	r3, [r7, #0]
 80047c2:	0418      	lsls	r0, r3, #16
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6819      	ldr	r1, [r3, #0]
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	3b01      	subs	r3, #1
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	4302      	orrs	r2, r0
 80047d0:	3340      	adds	r3, #64	@ 0x40
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	440b      	add	r3, r1
 80047d6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	460b      	mov	r3, r1
 80047f0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	887a      	ldrh	r2, [r7, #2]
 80047f8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	460b      	mov	r3, r1
 8004812:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e267      	b.n	8004d02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d075      	beq.n	800492a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800483e:	4b88      	ldr	r3, [pc, #544]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
 8004846:	2b04      	cmp	r3, #4
 8004848:	d00c      	beq.n	8004864 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800484a:	4b85      	ldr	r3, [pc, #532]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004852:	2b08      	cmp	r3, #8
 8004854:	d112      	bne.n	800487c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004856:	4b82      	ldr	r3, [pc, #520]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800485e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004862:	d10b      	bne.n	800487c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004864:	4b7e      	ldr	r3, [pc, #504]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d05b      	beq.n	8004928 <HAL_RCC_OscConfig+0x108>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d157      	bne.n	8004928 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e242      	b.n	8004d02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004884:	d106      	bne.n	8004894 <HAL_RCC_OscConfig+0x74>
 8004886:	4b76      	ldr	r3, [pc, #472]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a75      	ldr	r2, [pc, #468]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 800488c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	e01d      	b.n	80048d0 <HAL_RCC_OscConfig+0xb0>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800489c:	d10c      	bne.n	80048b8 <HAL_RCC_OscConfig+0x98>
 800489e:	4b70      	ldr	r3, [pc, #448]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a6f      	ldr	r2, [pc, #444]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 80048a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	4b6d      	ldr	r3, [pc, #436]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a6c      	ldr	r2, [pc, #432]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 80048b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	e00b      	b.n	80048d0 <HAL_RCC_OscConfig+0xb0>
 80048b8:	4b69      	ldr	r3, [pc, #420]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a68      	ldr	r2, [pc, #416]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 80048be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	4b66      	ldr	r3, [pc, #408]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a65      	ldr	r2, [pc, #404]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 80048ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d013      	beq.n	8004900 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d8:	f7fd fcf2 	bl	80022c0 <HAL_GetTick>
 80048dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048e0:	f7fd fcee 	bl	80022c0 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b64      	cmp	r3, #100	@ 0x64
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e207      	b.n	8004d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f2:	4b5b      	ldr	r3, [pc, #364]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d0f0      	beq.n	80048e0 <HAL_RCC_OscConfig+0xc0>
 80048fe:	e014      	b.n	800492a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004900:	f7fd fcde 	bl	80022c0 <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004908:	f7fd fcda 	bl	80022c0 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b64      	cmp	r3, #100	@ 0x64
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e1f3      	b.n	8004d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800491a:	4b51      	ldr	r3, [pc, #324]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1f0      	bne.n	8004908 <HAL_RCC_OscConfig+0xe8>
 8004926:	e000      	b.n	800492a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d063      	beq.n	80049fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004936:	4b4a      	ldr	r3, [pc, #296]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 030c 	and.w	r3, r3, #12
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00b      	beq.n	800495a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004942:	4b47      	ldr	r3, [pc, #284]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800494a:	2b08      	cmp	r3, #8
 800494c:	d11c      	bne.n	8004988 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800494e:	4b44      	ldr	r3, [pc, #272]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d116      	bne.n	8004988 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800495a:	4b41      	ldr	r3, [pc, #260]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	2b00      	cmp	r3, #0
 8004964:	d005      	beq.n	8004972 <HAL_RCC_OscConfig+0x152>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d001      	beq.n	8004972 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e1c7      	b.n	8004d02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004972:	4b3b      	ldr	r3, [pc, #236]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	4937      	ldr	r1, [pc, #220]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 8004982:	4313      	orrs	r3, r2
 8004984:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004986:	e03a      	b.n	80049fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d020      	beq.n	80049d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004990:	4b34      	ldr	r3, [pc, #208]	@ (8004a64 <HAL_RCC_OscConfig+0x244>)
 8004992:	2201      	movs	r2, #1
 8004994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004996:	f7fd fc93 	bl	80022c0 <HAL_GetTick>
 800499a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800499c:	e008      	b.n	80049b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800499e:	f7fd fc8f 	bl	80022c0 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e1a8      	b.n	8004d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d0f0      	beq.n	800499e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049bc:	4b28      	ldr	r3, [pc, #160]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	4925      	ldr	r1, [pc, #148]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	600b      	str	r3, [r1, #0]
 80049d0:	e015      	b.n	80049fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049d2:	4b24      	ldr	r3, [pc, #144]	@ (8004a64 <HAL_RCC_OscConfig+0x244>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d8:	f7fd fc72 	bl	80022c0 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049e0:	f7fd fc6e 	bl	80022c0 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e187      	b.n	8004d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0302 	and.w	r3, r3, #2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1f0      	bne.n	80049e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0308 	and.w	r3, r3, #8
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d036      	beq.n	8004a78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d016      	beq.n	8004a40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a12:	4b15      	ldr	r3, [pc, #84]	@ (8004a68 <HAL_RCC_OscConfig+0x248>)
 8004a14:	2201      	movs	r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a18:	f7fd fc52 	bl	80022c0 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a20:	f7fd fc4e 	bl	80022c0 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e167      	b.n	8004d02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a32:	4b0b      	ldr	r3, [pc, #44]	@ (8004a60 <HAL_RCC_OscConfig+0x240>)
 8004a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0f0      	beq.n	8004a20 <HAL_RCC_OscConfig+0x200>
 8004a3e:	e01b      	b.n	8004a78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a40:	4b09      	ldr	r3, [pc, #36]	@ (8004a68 <HAL_RCC_OscConfig+0x248>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a46:	f7fd fc3b 	bl	80022c0 <HAL_GetTick>
 8004a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a4c:	e00e      	b.n	8004a6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a4e:	f7fd fc37 	bl	80022c0 <HAL_GetTick>
 8004a52:	4602      	mov	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d907      	bls.n	8004a6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e150      	b.n	8004d02 <HAL_RCC_OscConfig+0x4e2>
 8004a60:	40023800 	.word	0x40023800
 8004a64:	42470000 	.word	0x42470000
 8004a68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a6c:	4b88      	ldr	r3, [pc, #544]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004a6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1ea      	bne.n	8004a4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f000 8097 	beq.w	8004bb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a86:	2300      	movs	r3, #0
 8004a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a8a:	4b81      	ldr	r3, [pc, #516]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10f      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a96:	2300      	movs	r3, #0
 8004a98:	60bb      	str	r3, [r7, #8]
 8004a9a:	4b7d      	ldr	r3, [pc, #500]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9e:	4a7c      	ldr	r2, [pc, #496]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004aa6:	4b7a      	ldr	r3, [pc, #488]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aae:	60bb      	str	r3, [r7, #8]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab6:	4b77      	ldr	r3, [pc, #476]	@ (8004c94 <HAL_RCC_OscConfig+0x474>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d118      	bne.n	8004af4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ac2:	4b74      	ldr	r3, [pc, #464]	@ (8004c94 <HAL_RCC_OscConfig+0x474>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a73      	ldr	r2, [pc, #460]	@ (8004c94 <HAL_RCC_OscConfig+0x474>)
 8004ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ace:	f7fd fbf7 	bl	80022c0 <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ad6:	f7fd fbf3 	bl	80022c0 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e10c      	b.n	8004d02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ae8:	4b6a      	ldr	r3, [pc, #424]	@ (8004c94 <HAL_RCC_OscConfig+0x474>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d106      	bne.n	8004b0a <HAL_RCC_OscConfig+0x2ea>
 8004afc:	4b64      	ldr	r3, [pc, #400]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b00:	4a63      	ldr	r2, [pc, #396]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004b02:	f043 0301 	orr.w	r3, r3, #1
 8004b06:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b08:	e01c      	b.n	8004b44 <HAL_RCC_OscConfig+0x324>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b05      	cmp	r3, #5
 8004b10:	d10c      	bne.n	8004b2c <HAL_RCC_OscConfig+0x30c>
 8004b12:	4b5f      	ldr	r3, [pc, #380]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b16:	4a5e      	ldr	r2, [pc, #376]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004b18:	f043 0304 	orr.w	r3, r3, #4
 8004b1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b1e:	4b5c      	ldr	r3, [pc, #368]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b22:	4a5b      	ldr	r2, [pc, #364]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004b24:	f043 0301 	orr.w	r3, r3, #1
 8004b28:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b2a:	e00b      	b.n	8004b44 <HAL_RCC_OscConfig+0x324>
 8004b2c:	4b58      	ldr	r3, [pc, #352]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b30:	4a57      	ldr	r2, [pc, #348]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004b32:	f023 0301 	bic.w	r3, r3, #1
 8004b36:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b38:	4b55      	ldr	r3, [pc, #340]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3c:	4a54      	ldr	r2, [pc, #336]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004b3e:	f023 0304 	bic.w	r3, r3, #4
 8004b42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d015      	beq.n	8004b78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b4c:	f7fd fbb8 	bl	80022c0 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b52:	e00a      	b.n	8004b6a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b54:	f7fd fbb4 	bl	80022c0 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e0cb      	b.n	8004d02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b6a:	4b49      	ldr	r3, [pc, #292]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0ee      	beq.n	8004b54 <HAL_RCC_OscConfig+0x334>
 8004b76:	e014      	b.n	8004ba2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b78:	f7fd fba2 	bl	80022c0 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b7e:	e00a      	b.n	8004b96 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b80:	f7fd fb9e 	bl	80022c0 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e0b5      	b.n	8004d02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b96:	4b3e      	ldr	r3, [pc, #248]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1ee      	bne.n	8004b80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ba2:	7dfb      	ldrb	r3, [r7, #23]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d105      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ba8:	4b39      	ldr	r3, [pc, #228]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bac:	4a38      	ldr	r2, [pc, #224]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004bae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bb2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 80a1 	beq.w	8004d00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bbe:	4b34      	ldr	r3, [pc, #208]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 030c 	and.w	r3, r3, #12
 8004bc6:	2b08      	cmp	r3, #8
 8004bc8:	d05c      	beq.n	8004c84 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d141      	bne.n	8004c56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd2:	4b31      	ldr	r3, [pc, #196]	@ (8004c98 <HAL_RCC_OscConfig+0x478>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd8:	f7fd fb72 	bl	80022c0 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be0:	f7fd fb6e 	bl	80022c0 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e087      	b.n	8004d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf2:	4b27      	ldr	r3, [pc, #156]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f0      	bne.n	8004be0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69da      	ldr	r2, [r3, #28]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0c:	019b      	lsls	r3, r3, #6
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c14:	085b      	lsrs	r3, r3, #1
 8004c16:	3b01      	subs	r3, #1
 8004c18:	041b      	lsls	r3, r3, #16
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c20:	061b      	lsls	r3, r3, #24
 8004c22:	491b      	ldr	r1, [pc, #108]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c28:	4b1b      	ldr	r3, [pc, #108]	@ (8004c98 <HAL_RCC_OscConfig+0x478>)
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c2e:	f7fd fb47 	bl	80022c0 <HAL_GetTick>
 8004c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c36:	f7fd fb43 	bl	80022c0 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e05c      	b.n	8004d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c48:	4b11      	ldr	r3, [pc, #68]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0f0      	beq.n	8004c36 <HAL_RCC_OscConfig+0x416>
 8004c54:	e054      	b.n	8004d00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c56:	4b10      	ldr	r3, [pc, #64]	@ (8004c98 <HAL_RCC_OscConfig+0x478>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5c:	f7fd fb30 	bl	80022c0 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c64:	f7fd fb2c 	bl	80022c0 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e045      	b.n	8004d02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c76:	4b06      	ldr	r3, [pc, #24]	@ (8004c90 <HAL_RCC_OscConfig+0x470>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1f0      	bne.n	8004c64 <HAL_RCC_OscConfig+0x444>
 8004c82:	e03d      	b.n	8004d00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d107      	bne.n	8004c9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e038      	b.n	8004d02 <HAL_RCC_OscConfig+0x4e2>
 8004c90:	40023800 	.word	0x40023800
 8004c94:	40007000 	.word	0x40007000
 8004c98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8004d0c <HAL_RCC_OscConfig+0x4ec>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d028      	beq.n	8004cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d121      	bne.n	8004cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d11a      	bne.n	8004cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ccc:	4013      	ands	r3, r2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004cd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d111      	bne.n	8004cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ce2:	085b      	lsrs	r3, r3, #1
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d107      	bne.n	8004cfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d001      	beq.n	8004d00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40023800 	.word	0x40023800

08004d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e0cc      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d24:	4b68      	ldr	r3, [pc, #416]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d90c      	bls.n	8004d4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d32:	4b65      	ldr	r3, [pc, #404]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3a:	4b63      	ldr	r3, [pc, #396]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d001      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e0b8      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d020      	beq.n	8004d9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d64:	4b59      	ldr	r3, [pc, #356]	@ (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	4a58      	ldr	r2, [pc, #352]	@ (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d005      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d7c:	4b53      	ldr	r3, [pc, #332]	@ (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	4a52      	ldr	r2, [pc, #328]	@ (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d88:	4b50      	ldr	r3, [pc, #320]	@ (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	494d      	ldr	r1, [pc, #308]	@ (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0301 	and.w	r3, r3, #1
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d044      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d107      	bne.n	8004dbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dae:	4b47      	ldr	r3, [pc, #284]	@ (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d119      	bne.n	8004dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e07f      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d003      	beq.n	8004dce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d107      	bne.n	8004dde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dce:	4b3f      	ldr	r3, [pc, #252]	@ (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d109      	bne.n	8004dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e06f      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dde:	4b3b      	ldr	r3, [pc, #236]	@ (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e067      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dee:	4b37      	ldr	r3, [pc, #220]	@ (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f023 0203 	bic.w	r2, r3, #3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	4934      	ldr	r1, [pc, #208]	@ (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e00:	f7fd fa5e 	bl	80022c0 <HAL_GetTick>
 8004e04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e06:	e00a      	b.n	8004e1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e08:	f7fd fa5a 	bl	80022c0 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e04f      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 020c 	and.w	r2, r3, #12
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d1eb      	bne.n	8004e08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e30:	4b25      	ldr	r3, [pc, #148]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0307 	and.w	r3, r3, #7
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d20c      	bcs.n	8004e58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e3e:	4b22      	ldr	r3, [pc, #136]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e46:	4b20      	ldr	r3, [pc, #128]	@ (8004ec8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0307 	and.w	r3, r3, #7
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d001      	beq.n	8004e58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e032      	b.n	8004ebe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d008      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e64:	4b19      	ldr	r3, [pc, #100]	@ (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	4916      	ldr	r1, [pc, #88]	@ (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d009      	beq.n	8004e96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e82:	4b12      	ldr	r3, [pc, #72]	@ (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	490e      	ldr	r1, [pc, #56]	@ (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e96:	f000 f821 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ecc <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	091b      	lsrs	r3, r3, #4
 8004ea2:	f003 030f 	and.w	r3, r3, #15
 8004ea6:	490a      	ldr	r1, [pc, #40]	@ (8004ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8004ea8:	5ccb      	ldrb	r3, [r1, r3]
 8004eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8004eae:	4a09      	ldr	r2, [pc, #36]	@ (8004ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004eb2:	4b09      	ldr	r3, [pc, #36]	@ (8004ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fd f9be 	bl	8002238 <HAL_InitTick>

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40023c00 	.word	0x40023c00
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	0800c6cc 	.word	0x0800c6cc
 8004ed4:	2000000c 	.word	0x2000000c
 8004ed8:	20000010 	.word	0x20000010

08004edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ee0:	b094      	sub	sp, #80	@ 0x50
 8004ee2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ef4:	4b79      	ldr	r3, [pc, #484]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 030c 	and.w	r3, r3, #12
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d00d      	beq.n	8004f1c <HAL_RCC_GetSysClockFreq+0x40>
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	f200 80e1 	bhi.w	80050c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <HAL_RCC_GetSysClockFreq+0x34>
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d003      	beq.n	8004f16 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f0e:	e0db      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f10:	4b73      	ldr	r3, [pc, #460]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f14:	e0db      	b.n	80050ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f16:	4b73      	ldr	r3, [pc, #460]	@ (80050e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f1a:	e0d8      	b.n	80050ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f1c:	4b6f      	ldr	r3, [pc, #444]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f24:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f26:	4b6d      	ldr	r3, [pc, #436]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d063      	beq.n	8004ffa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f32:	4b6a      	ldr	r3, [pc, #424]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	099b      	lsrs	r3, r3, #6
 8004f38:	2200      	movs	r2, #0
 8004f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f44:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f46:	2300      	movs	r3, #0
 8004f48:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004f4e:	4622      	mov	r2, r4
 8004f50:	462b      	mov	r3, r5
 8004f52:	f04f 0000 	mov.w	r0, #0
 8004f56:	f04f 0100 	mov.w	r1, #0
 8004f5a:	0159      	lsls	r1, r3, #5
 8004f5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f60:	0150      	lsls	r0, r2, #5
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4621      	mov	r1, r4
 8004f68:	1a51      	subs	r1, r2, r1
 8004f6a:	6139      	str	r1, [r7, #16]
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	eb63 0301 	sbc.w	r3, r3, r1
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	f04f 0300 	mov.w	r3, #0
 8004f7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f80:	4659      	mov	r1, fp
 8004f82:	018b      	lsls	r3, r1, #6
 8004f84:	4651      	mov	r1, sl
 8004f86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f8a:	4651      	mov	r1, sl
 8004f8c:	018a      	lsls	r2, r1, #6
 8004f8e:	4651      	mov	r1, sl
 8004f90:	ebb2 0801 	subs.w	r8, r2, r1
 8004f94:	4659      	mov	r1, fp
 8004f96:	eb63 0901 	sbc.w	r9, r3, r1
 8004f9a:	f04f 0200 	mov.w	r2, #0
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004faa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fae:	4690      	mov	r8, r2
 8004fb0:	4699      	mov	r9, r3
 8004fb2:	4623      	mov	r3, r4
 8004fb4:	eb18 0303 	adds.w	r3, r8, r3
 8004fb8:	60bb      	str	r3, [r7, #8]
 8004fba:	462b      	mov	r3, r5
 8004fbc:	eb49 0303 	adc.w	r3, r9, r3
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	f04f 0300 	mov.w	r3, #0
 8004fca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fce:	4629      	mov	r1, r5
 8004fd0:	024b      	lsls	r3, r1, #9
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fd8:	4621      	mov	r1, r4
 8004fda:	024a      	lsls	r2, r1, #9
 8004fdc:	4610      	mov	r0, r2
 8004fde:	4619      	mov	r1, r3
 8004fe0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fe6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fe8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004fec:	f7fb f8ec 	bl	80001c8 <__aeabi_uldivmod>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ff8:	e058      	b.n	80050ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ffa:	4b38      	ldr	r3, [pc, #224]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	099b      	lsrs	r3, r3, #6
 8005000:	2200      	movs	r2, #0
 8005002:	4618      	mov	r0, r3
 8005004:	4611      	mov	r1, r2
 8005006:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800500a:	623b      	str	r3, [r7, #32]
 800500c:	2300      	movs	r3, #0
 800500e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005010:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005014:	4642      	mov	r2, r8
 8005016:	464b      	mov	r3, r9
 8005018:	f04f 0000 	mov.w	r0, #0
 800501c:	f04f 0100 	mov.w	r1, #0
 8005020:	0159      	lsls	r1, r3, #5
 8005022:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005026:	0150      	lsls	r0, r2, #5
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	4641      	mov	r1, r8
 800502e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005032:	4649      	mov	r1, r9
 8005034:	eb63 0b01 	sbc.w	fp, r3, r1
 8005038:	f04f 0200 	mov.w	r2, #0
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005044:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005048:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800504c:	ebb2 040a 	subs.w	r4, r2, sl
 8005050:	eb63 050b 	sbc.w	r5, r3, fp
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	00eb      	lsls	r3, r5, #3
 800505e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005062:	00e2      	lsls	r2, r4, #3
 8005064:	4614      	mov	r4, r2
 8005066:	461d      	mov	r5, r3
 8005068:	4643      	mov	r3, r8
 800506a:	18e3      	adds	r3, r4, r3
 800506c:	603b      	str	r3, [r7, #0]
 800506e:	464b      	mov	r3, r9
 8005070:	eb45 0303 	adc.w	r3, r5, r3
 8005074:	607b      	str	r3, [r7, #4]
 8005076:	f04f 0200 	mov.w	r2, #0
 800507a:	f04f 0300 	mov.w	r3, #0
 800507e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005082:	4629      	mov	r1, r5
 8005084:	028b      	lsls	r3, r1, #10
 8005086:	4621      	mov	r1, r4
 8005088:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800508c:	4621      	mov	r1, r4
 800508e:	028a      	lsls	r2, r1, #10
 8005090:	4610      	mov	r0, r2
 8005092:	4619      	mov	r1, r3
 8005094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005096:	2200      	movs	r2, #0
 8005098:	61bb      	str	r3, [r7, #24]
 800509a:	61fa      	str	r2, [r7, #28]
 800509c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050a0:	f7fb f892 	bl	80001c8 <__aeabi_uldivmod>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4613      	mov	r3, r2
 80050aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80050ac:	4b0b      	ldr	r3, [pc, #44]	@ (80050dc <HAL_RCC_GetSysClockFreq+0x200>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	0c1b      	lsrs	r3, r3, #16
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	3301      	adds	r3, #1
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80050bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050c6:	e002      	b.n	80050ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050c8:	4b05      	ldr	r3, [pc, #20]	@ (80050e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80050ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3750      	adds	r7, #80	@ 0x50
 80050d4:	46bd      	mov	sp, r7
 80050d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050da:	bf00      	nop
 80050dc:	40023800 	.word	0x40023800
 80050e0:	00f42400 	.word	0x00f42400
 80050e4:	007a1200 	.word	0x007a1200

080050e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050ec:	4b03      	ldr	r3, [pc, #12]	@ (80050fc <HAL_RCC_GetHCLKFreq+0x14>)
 80050ee:	681b      	ldr	r3, [r3, #0]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	2000000c 	.word	0x2000000c

08005100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005104:	f7ff fff0 	bl	80050e8 <HAL_RCC_GetHCLKFreq>
 8005108:	4602      	mov	r2, r0
 800510a:	4b05      	ldr	r3, [pc, #20]	@ (8005120 <HAL_RCC_GetPCLK1Freq+0x20>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	0a9b      	lsrs	r3, r3, #10
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	4903      	ldr	r1, [pc, #12]	@ (8005124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005116:	5ccb      	ldrb	r3, [r1, r3]
 8005118:	fa22 f303 	lsr.w	r3, r2, r3
}
 800511c:	4618      	mov	r0, r3
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40023800 	.word	0x40023800
 8005124:	0800c6dc 	.word	0x0800c6dc

08005128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800512c:	f7ff ffdc 	bl	80050e8 <HAL_RCC_GetHCLKFreq>
 8005130:	4602      	mov	r2, r0
 8005132:	4b05      	ldr	r3, [pc, #20]	@ (8005148 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	0b5b      	lsrs	r3, r3, #13
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	4903      	ldr	r1, [pc, #12]	@ (800514c <HAL_RCC_GetPCLK2Freq+0x24>)
 800513e:	5ccb      	ldrb	r3, [r1, r3]
 8005140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005144:	4618      	mov	r0, r3
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40023800 	.word	0x40023800
 800514c:	0800c6dc 	.word	0x0800c6dc

08005150 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e07b      	b.n	800525a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005166:	2b00      	cmp	r3, #0
 8005168:	d108      	bne.n	800517c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005172:	d009      	beq.n	8005188 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	61da      	str	r2, [r3, #28]
 800517a:	e005      	b.n	8005188 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b00      	cmp	r3, #0
 8005198:	d106      	bne.n	80051a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f7fc fb72 	bl	800188c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005202:	431a      	orrs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800520c:	ea42 0103 	orr.w	r1, r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005214:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	0c1b      	lsrs	r3, r3, #16
 8005226:	f003 0104 	and.w	r1, r3, #4
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522e:	f003 0210 	and.w	r2, r3, #16
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	430a      	orrs	r2, r1
 8005238:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69da      	ldr	r2, [r3, #28]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005248:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b082      	sub	sp, #8
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e041      	b.n	80052f8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800527a:	b2db      	uxtb	r3, r3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d106      	bne.n	800528e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7fc fd15 	bl	8001cb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2202      	movs	r2, #2
 8005292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	3304      	adds	r3, #4
 800529e:	4619      	mov	r1, r3
 80052a0:	4610      	mov	r0, r2
 80052a2:	f000 fb3b 	bl	800591c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2201      	movs	r2, #1
 80052ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e041      	b.n	8005396 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d106      	bne.n	800532c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7fc fc8e 	bl	8001c48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3304      	adds	r3, #4
 800533c:	4619      	mov	r1, r3
 800533e:	4610      	mov	r0, r2
 8005340:	f000 faec 	bl	800591c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d109      	bne.n	80053c4 <HAL_TIM_PWM_Start+0x24>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	bf14      	ite	ne
 80053bc:	2301      	movne	r3, #1
 80053be:	2300      	moveq	r3, #0
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	e022      	b.n	800540a <HAL_TIM_PWM_Start+0x6a>
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d109      	bne.n	80053de <HAL_TIM_PWM_Start+0x3e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	bf14      	ite	ne
 80053d6:	2301      	movne	r3, #1
 80053d8:	2300      	moveq	r3, #0
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	e015      	b.n	800540a <HAL_TIM_PWM_Start+0x6a>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d109      	bne.n	80053f8 <HAL_TIM_PWM_Start+0x58>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	bf14      	ite	ne
 80053f0:	2301      	movne	r3, #1
 80053f2:	2300      	moveq	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	e008      	b.n	800540a <HAL_TIM_PWM_Start+0x6a>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b01      	cmp	r3, #1
 8005402:	bf14      	ite	ne
 8005404:	2301      	movne	r3, #1
 8005406:	2300      	moveq	r3, #0
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e07c      	b.n	800550c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d104      	bne.n	8005422 <HAL_TIM_PWM_Start+0x82>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005420:	e013      	b.n	800544a <HAL_TIM_PWM_Start+0xaa>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b04      	cmp	r3, #4
 8005426:	d104      	bne.n	8005432 <HAL_TIM_PWM_Start+0x92>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005430:	e00b      	b.n	800544a <HAL_TIM_PWM_Start+0xaa>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b08      	cmp	r3, #8
 8005436:	d104      	bne.n	8005442 <HAL_TIM_PWM_Start+0xa2>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005440:	e003      	b.n	800544a <HAL_TIM_PWM_Start+0xaa>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2202      	movs	r2, #2
 8005446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2201      	movs	r2, #1
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fcbe 	bl	8005dd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a2d      	ldr	r2, [pc, #180]	@ (8005514 <HAL_TIM_PWM_Start+0x174>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d004      	beq.n	800546c <HAL_TIM_PWM_Start+0xcc>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a2c      	ldr	r2, [pc, #176]	@ (8005518 <HAL_TIM_PWM_Start+0x178>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d101      	bne.n	8005470 <HAL_TIM_PWM_Start+0xd0>
 800546c:	2301      	movs	r3, #1
 800546e:	e000      	b.n	8005472 <HAL_TIM_PWM_Start+0xd2>
 8005470:	2300      	movs	r3, #0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d007      	beq.n	8005486 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005484:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a22      	ldr	r2, [pc, #136]	@ (8005514 <HAL_TIM_PWM_Start+0x174>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d022      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x136>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005498:	d01d      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x136>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a1f      	ldr	r2, [pc, #124]	@ (800551c <HAL_TIM_PWM_Start+0x17c>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d018      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x136>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005520 <HAL_TIM_PWM_Start+0x180>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d013      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x136>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a1c      	ldr	r2, [pc, #112]	@ (8005524 <HAL_TIM_PWM_Start+0x184>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00e      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x136>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a16      	ldr	r2, [pc, #88]	@ (8005518 <HAL_TIM_PWM_Start+0x178>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d009      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x136>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a18      	ldr	r2, [pc, #96]	@ (8005528 <HAL_TIM_PWM_Start+0x188>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d004      	beq.n	80054d6 <HAL_TIM_PWM_Start+0x136>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a16      	ldr	r2, [pc, #88]	@ (800552c <HAL_TIM_PWM_Start+0x18c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d111      	bne.n	80054fa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f003 0307 	and.w	r3, r3, #7
 80054e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2b06      	cmp	r3, #6
 80054e6:	d010      	beq.n	800550a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 0201 	orr.w	r2, r2, #1
 80054f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f8:	e007      	b.n	800550a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0201 	orr.w	r2, r2, #1
 8005508:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40010000 	.word	0x40010000
 8005518:	40010400 	.word	0x40010400
 800551c:	40000400 	.word	0x40000400
 8005520:	40000800 	.word	0x40000800
 8005524:	40000c00 	.word	0x40000c00
 8005528:	40014000 	.word	0x40014000
 800552c:	40001800 	.word	0x40001800

08005530 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e097      	b.n	8005674 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800554a:	b2db      	uxtb	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d106      	bne.n	800555e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7fc f9ff 	bl	800195c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2202      	movs	r2, #2
 8005562:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	6812      	ldr	r2, [r2, #0]
 8005570:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005574:	f023 0307 	bic.w	r3, r3, #7
 8005578:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3304      	adds	r3, #4
 8005582:	4619      	mov	r1, r3
 8005584:	4610      	mov	r0, r2
 8005586:	f000 f9c9 	bl	800591c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055b2:	f023 0303 	bic.w	r3, r3, #3
 80055b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	021b      	lsls	r3, r3, #8
 80055c2:	4313      	orrs	r3, r2
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80055d0:	f023 030c 	bic.w	r3, r3, #12
 80055d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	021b      	lsls	r3, r3, #8
 80055ec:	4313      	orrs	r3, r2
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	691b      	ldr	r3, [r3, #16]
 80055f8:	011a      	lsls	r2, r3, #4
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	031b      	lsls	r3, r3, #12
 8005600:	4313      	orrs	r3, r2
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4313      	orrs	r3, r2
 8005606:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800560e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005616:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	4313      	orrs	r3, r2
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	693a      	ldr	r2, [r7, #16]
 8005638:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800568c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005694:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800569c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80056a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d110      	bne.n	80056ce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d102      	bne.n	80056b8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80056b2:	7b7b      	ldrb	r3, [r7, #13]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d001      	beq.n	80056bc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e069      	b.n	8005790 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056cc:	e031      	b.n	8005732 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d110      	bne.n	80056f6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056d4:	7bbb      	ldrb	r3, [r7, #14]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d102      	bne.n	80056e0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056da:	7b3b      	ldrb	r3, [r7, #12]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d001      	beq.n	80056e4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e055      	b.n	8005790 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056f4:	e01d      	b.n	8005732 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d108      	bne.n	800570e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056fc:	7bbb      	ldrb	r3, [r7, #14]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d105      	bne.n	800570e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005702:	7b7b      	ldrb	r3, [r7, #13]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d102      	bne.n	800570e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005708:	7b3b      	ldrb	r3, [r7, #12]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d001      	beq.n	8005712 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e03e      	b.n	8005790 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2202      	movs	r2, #2
 8005716:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2202      	movs	r2, #2
 800571e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2202      	movs	r2, #2
 800572e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <HAL_TIM_Encoder_Start+0xc4>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2b04      	cmp	r3, #4
 800573c:	d008      	beq.n	8005750 <HAL_TIM_Encoder_Start+0xd4>
 800573e:	e00f      	b.n	8005760 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2201      	movs	r2, #1
 8005746:	2100      	movs	r1, #0
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fb43 	bl	8005dd4 <TIM_CCxChannelCmd>
      break;
 800574e:	e016      	b.n	800577e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2201      	movs	r2, #1
 8005756:	2104      	movs	r1, #4
 8005758:	4618      	mov	r0, r3
 800575a:	f000 fb3b 	bl	8005dd4 <TIM_CCxChannelCmd>
      break;
 800575e:	e00e      	b.n	800577e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2201      	movs	r2, #1
 8005766:	2100      	movs	r1, #0
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fb33 	bl	8005dd4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2201      	movs	r2, #1
 8005774:	2104      	movs	r1, #4
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fb2c 	bl	8005dd4 <TIM_CCxChannelCmd>
      break;
 800577c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f042 0201 	orr.w	r2, r2, #1
 800578c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a4:	2300      	movs	r3, #0
 80057a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d101      	bne.n	80057b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057b2:	2302      	movs	r3, #2
 80057b4:	e0ae      	b.n	8005914 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b0c      	cmp	r3, #12
 80057c2:	f200 809f 	bhi.w	8005904 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057c6:	a201      	add	r2, pc, #4	@ (adr r2, 80057cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057cc:	08005801 	.word	0x08005801
 80057d0:	08005905 	.word	0x08005905
 80057d4:	08005905 	.word	0x08005905
 80057d8:	08005905 	.word	0x08005905
 80057dc:	08005841 	.word	0x08005841
 80057e0:	08005905 	.word	0x08005905
 80057e4:	08005905 	.word	0x08005905
 80057e8:	08005905 	.word	0x08005905
 80057ec:	08005883 	.word	0x08005883
 80057f0:	08005905 	.word	0x08005905
 80057f4:	08005905 	.word	0x08005905
 80057f8:	08005905 	.word	0x08005905
 80057fc:	080058c3 	.word	0x080058c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68b9      	ldr	r1, [r7, #8]
 8005806:	4618      	mov	r0, r3
 8005808:	f000 f934 	bl	8005a74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f042 0208 	orr.w	r2, r2, #8
 800581a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f022 0204 	bic.w	r2, r2, #4
 800582a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6999      	ldr	r1, [r3, #24]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	691a      	ldr	r2, [r3, #16]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	619a      	str	r2, [r3, #24]
      break;
 800583e:	e064      	b.n	800590a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68b9      	ldr	r1, [r7, #8]
 8005846:	4618      	mov	r0, r3
 8005848:	f000 f984 	bl	8005b54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	699a      	ldr	r2, [r3, #24]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800585a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	699a      	ldr	r2, [r3, #24]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800586a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6999      	ldr	r1, [r3, #24]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	021a      	lsls	r2, r3, #8
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	619a      	str	r2, [r3, #24]
      break;
 8005880:	e043      	b.n	800590a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68b9      	ldr	r1, [r7, #8]
 8005888:	4618      	mov	r0, r3
 800588a:	f000 f9d9 	bl	8005c40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69da      	ldr	r2, [r3, #28]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f042 0208 	orr.w	r2, r2, #8
 800589c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	69da      	ldr	r2, [r3, #28]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0204 	bic.w	r2, r2, #4
 80058ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69d9      	ldr	r1, [r3, #28]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	691a      	ldr	r2, [r3, #16]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	61da      	str	r2, [r3, #28]
      break;
 80058c0:	e023      	b.n	800590a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 fa2d 	bl	8005d28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69da      	ldr	r2, [r3, #28]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	69da      	ldr	r2, [r3, #28]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	69d9      	ldr	r1, [r3, #28]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	021a      	lsls	r2, r3, #8
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	61da      	str	r2, [r3, #28]
      break;
 8005902:	e002      	b.n	800590a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	75fb      	strb	r3, [r7, #23]
      break;
 8005908:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005912:	7dfb      	ldrb	r3, [r7, #23]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a46      	ldr	r2, [pc, #280]	@ (8005a48 <TIM_Base_SetConfig+0x12c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d013      	beq.n	800595c <TIM_Base_SetConfig+0x40>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800593a:	d00f      	beq.n	800595c <TIM_Base_SetConfig+0x40>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a43      	ldr	r2, [pc, #268]	@ (8005a4c <TIM_Base_SetConfig+0x130>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00b      	beq.n	800595c <TIM_Base_SetConfig+0x40>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a42      	ldr	r2, [pc, #264]	@ (8005a50 <TIM_Base_SetConfig+0x134>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d007      	beq.n	800595c <TIM_Base_SetConfig+0x40>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a41      	ldr	r2, [pc, #260]	@ (8005a54 <TIM_Base_SetConfig+0x138>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d003      	beq.n	800595c <TIM_Base_SetConfig+0x40>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a40      	ldr	r2, [pc, #256]	@ (8005a58 <TIM_Base_SetConfig+0x13c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d108      	bne.n	800596e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005962:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	4313      	orrs	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a35      	ldr	r2, [pc, #212]	@ (8005a48 <TIM_Base_SetConfig+0x12c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d02b      	beq.n	80059ce <TIM_Base_SetConfig+0xb2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800597c:	d027      	beq.n	80059ce <TIM_Base_SetConfig+0xb2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a32      	ldr	r2, [pc, #200]	@ (8005a4c <TIM_Base_SetConfig+0x130>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d023      	beq.n	80059ce <TIM_Base_SetConfig+0xb2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a31      	ldr	r2, [pc, #196]	@ (8005a50 <TIM_Base_SetConfig+0x134>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d01f      	beq.n	80059ce <TIM_Base_SetConfig+0xb2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a30      	ldr	r2, [pc, #192]	@ (8005a54 <TIM_Base_SetConfig+0x138>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d01b      	beq.n	80059ce <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2f      	ldr	r2, [pc, #188]	@ (8005a58 <TIM_Base_SetConfig+0x13c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d017      	beq.n	80059ce <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a2e      	ldr	r2, [pc, #184]	@ (8005a5c <TIM_Base_SetConfig+0x140>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d013      	beq.n	80059ce <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a2d      	ldr	r2, [pc, #180]	@ (8005a60 <TIM_Base_SetConfig+0x144>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00f      	beq.n	80059ce <TIM_Base_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a2c      	ldr	r2, [pc, #176]	@ (8005a64 <TIM_Base_SetConfig+0x148>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d00b      	beq.n	80059ce <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a2b      	ldr	r2, [pc, #172]	@ (8005a68 <TIM_Base_SetConfig+0x14c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d007      	beq.n	80059ce <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a2a      	ldr	r2, [pc, #168]	@ (8005a6c <TIM_Base_SetConfig+0x150>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d003      	beq.n	80059ce <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a29      	ldr	r2, [pc, #164]	@ (8005a70 <TIM_Base_SetConfig+0x154>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d108      	bne.n	80059e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a10      	ldr	r2, [pc, #64]	@ (8005a48 <TIM_Base_SetConfig+0x12c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d003      	beq.n	8005a14 <TIM_Base_SetConfig+0xf8>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a12      	ldr	r2, [pc, #72]	@ (8005a58 <TIM_Base_SetConfig+0x13c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d103      	bne.n	8005a1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	691a      	ldr	r2, [r3, #16]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d105      	bne.n	8005a3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f023 0201 	bic.w	r2, r3, #1
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	611a      	str	r2, [r3, #16]
  }
}
 8005a3a:	bf00      	nop
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40010000 	.word	0x40010000
 8005a4c:	40000400 	.word	0x40000400
 8005a50:	40000800 	.word	0x40000800
 8005a54:	40000c00 	.word	0x40000c00
 8005a58:	40010400 	.word	0x40010400
 8005a5c:	40014000 	.word	0x40014000
 8005a60:	40014400 	.word	0x40014400
 8005a64:	40014800 	.word	0x40014800
 8005a68:	40001800 	.word	0x40001800
 8005a6c:	40001c00 	.word	0x40001c00
 8005a70:	40002000 	.word	0x40002000

08005a74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a1b      	ldr	r3, [r3, #32]
 8005a88:	f023 0201 	bic.w	r2, r3, #1
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0303 	bic.w	r3, r3, #3
 8005aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f023 0302 	bic.w	r3, r3, #2
 8005abc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a20      	ldr	r2, [pc, #128]	@ (8005b4c <TIM_OC1_SetConfig+0xd8>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d003      	beq.n	8005ad8 <TIM_OC1_SetConfig+0x64>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8005b50 <TIM_OC1_SetConfig+0xdc>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d10c      	bne.n	8005af2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f023 0308 	bic.w	r3, r3, #8
 8005ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f023 0304 	bic.w	r3, r3, #4
 8005af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a15      	ldr	r2, [pc, #84]	@ (8005b4c <TIM_OC1_SetConfig+0xd8>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d003      	beq.n	8005b02 <TIM_OC1_SetConfig+0x8e>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a14      	ldr	r2, [pc, #80]	@ (8005b50 <TIM_OC1_SetConfig+0xdc>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d111      	bne.n	8005b26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	621a      	str	r2, [r3, #32]
}
 8005b40:	bf00      	nop
 8005b42:	371c      	adds	r7, #28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	40010000 	.word	0x40010000
 8005b50:	40010400 	.word	0x40010400

08005b54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	f023 0210 	bic.w	r2, r3, #16
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	021b      	lsls	r3, r3, #8
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f023 0320 	bic.w	r3, r3, #32
 8005b9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a22      	ldr	r2, [pc, #136]	@ (8005c38 <TIM_OC2_SetConfig+0xe4>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d003      	beq.n	8005bbc <TIM_OC2_SetConfig+0x68>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a21      	ldr	r2, [pc, #132]	@ (8005c3c <TIM_OC2_SetConfig+0xe8>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d10d      	bne.n	8005bd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	011b      	lsls	r3, r3, #4
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a17      	ldr	r2, [pc, #92]	@ (8005c38 <TIM_OC2_SetConfig+0xe4>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d003      	beq.n	8005be8 <TIM_OC2_SetConfig+0x94>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a16      	ldr	r2, [pc, #88]	@ (8005c3c <TIM_OC2_SetConfig+0xe8>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d113      	bne.n	8005c10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005bee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bf6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	695b      	ldr	r3, [r3, #20]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	685a      	ldr	r2, [r3, #4]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	621a      	str	r2, [r3, #32]
}
 8005c2a:	bf00      	nop
 8005c2c:	371c      	adds	r7, #28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	40010000 	.word	0x40010000
 8005c3c:	40010400 	.word	0x40010400

08005c40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 0303 	bic.w	r3, r3, #3
 8005c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	021b      	lsls	r3, r3, #8
 8005c90:	697a      	ldr	r2, [r7, #20]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a21      	ldr	r2, [pc, #132]	@ (8005d20 <TIM_OC3_SetConfig+0xe0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d003      	beq.n	8005ca6 <TIM_OC3_SetConfig+0x66>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a20      	ldr	r2, [pc, #128]	@ (8005d24 <TIM_OC3_SetConfig+0xe4>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d10d      	bne.n	8005cc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	021b      	lsls	r3, r3, #8
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a16      	ldr	r2, [pc, #88]	@ (8005d20 <TIM_OC3_SetConfig+0xe0>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d003      	beq.n	8005cd2 <TIM_OC3_SetConfig+0x92>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a15      	ldr	r2, [pc, #84]	@ (8005d24 <TIM_OC3_SetConfig+0xe4>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d113      	bne.n	8005cfa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	011b      	lsls	r3, r3, #4
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	621a      	str	r2, [r3, #32]
}
 8005d14:	bf00      	nop
 8005d16:	371c      	adds	r7, #28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	40010000 	.word	0x40010000
 8005d24:	40010400 	.word	0x40010400

08005d28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	021b      	lsls	r3, r3, #8
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	031b      	lsls	r3, r3, #12
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a12      	ldr	r2, [pc, #72]	@ (8005dcc <TIM_OC4_SetConfig+0xa4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d003      	beq.n	8005d90 <TIM_OC4_SetConfig+0x68>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a11      	ldr	r2, [pc, #68]	@ (8005dd0 <TIM_OC4_SetConfig+0xa8>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d109      	bne.n	8005da4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	019b      	lsls	r3, r3, #6
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	621a      	str	r2, [r3, #32]
}
 8005dbe:	bf00      	nop
 8005dc0:	371c      	adds	r7, #28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	40010000 	.word	0x40010000
 8005dd0:	40010400 	.word	0x40010400

08005dd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2201      	movs	r2, #1
 8005de8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6a1a      	ldr	r2, [r3, #32]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	43db      	mvns	r3, r3
 8005df6:	401a      	ands	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a1a      	ldr	r2, [r3, #32]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	621a      	str	r2, [r3, #32]
}
 8005e12:	bf00      	nop
 8005e14:	371c      	adds	r7, #28
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
	...

08005e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b085      	sub	sp, #20
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e05a      	b.n	8005eee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2202      	movs	r2, #2
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a21      	ldr	r2, [pc, #132]	@ (8005efc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d022      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e84:	d01d      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a1d      	ldr	r2, [pc, #116]	@ (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d018      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a1b      	ldr	r2, [pc, #108]	@ (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d013      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00e      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a18      	ldr	r2, [pc, #96]	@ (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d009      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a17      	ldr	r2, [pc, #92]	@ (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d004      	beq.n	8005ec2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a15      	ldr	r2, [pc, #84]	@ (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d10c      	bne.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ec8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40010000 	.word	0x40010000
 8005f00:	40000400 	.word	0x40000400
 8005f04:	40000800 	.word	0x40000800
 8005f08:	40000c00 	.word	0x40000c00
 8005f0c:	40010400 	.word	0x40010400
 8005f10:	40014000 	.word	0x40014000
 8005f14:	40001800 	.word	0x40001800

08005f18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e042      	b.n	8005fb0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d106      	bne.n	8005f44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f7fc f81c 	bl	8001f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2224      	movs	r2, #36	@ 0x24
 8005f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68da      	ldr	r2, [r3, #12]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fd0d 	bl	800697c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	691a      	ldr	r2, [r3, #16]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	695a      	ldr	r2, [r3, #20]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68da      	ldr	r2, [r3, #12]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2220      	movs	r2, #32
 8005f9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e024      	b.n	8006014 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2224      	movs	r2, #36	@ 0x24
 8005fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68da      	ldr	r2, [r3, #12]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005fe0:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fc f850 	bl	8002088 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	4613      	mov	r3, r2
 8006028:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b20      	cmp	r3, #32
 8006034:	d112      	bne.n	800605c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d002      	beq.n	8006042 <HAL_UART_Receive_IT+0x26>
 800603c:	88fb      	ldrh	r3, [r7, #6]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e00b      	b.n	800605e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800604c:	88fb      	ldrh	r3, [r7, #6]
 800604e:	461a      	mov	r2, r3
 8006050:	68b9      	ldr	r1, [r7, #8]
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 faba 	bl	80065cc <UART_Start_Receive_IT>
 8006058:	4603      	mov	r3, r0
 800605a:	e000      	b.n	800605e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800605c:	2302      	movs	r3, #2
  }
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
	...

08006068 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b0ba      	sub	sp, #232	@ 0xe8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800608e:	2300      	movs	r3, #0
 8006090:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006094:	2300      	movs	r3, #0
 8006096:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800609a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80060a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10f      	bne.n	80060ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060b2:	f003 0320 	and.w	r3, r3, #32
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d009      	beq.n	80060ce <HAL_UART_IRQHandler+0x66>
 80060ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060be:	f003 0320 	and.w	r3, r3, #32
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fb99 	bl	80067fe <UART_Receive_IT>
      return;
 80060cc:	e25b      	b.n	8006586 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80060ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 80de 	beq.w	8006294 <HAL_UART_IRQHandler+0x22c>
 80060d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d106      	bne.n	80060f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 80d1 	beq.w	8006294 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00b      	beq.n	8006116 <HAL_UART_IRQHandler+0xae>
 80060fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006106:	2b00      	cmp	r3, #0
 8006108:	d005      	beq.n	8006116 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800610e:	f043 0201 	orr.w	r2, r3, #1
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800611a:	f003 0304 	and.w	r3, r3, #4
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00b      	beq.n	800613a <HAL_UART_IRQHandler+0xd2>
 8006122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	d005      	beq.n	800613a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006132:	f043 0202 	orr.w	r2, r3, #2
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800613a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00b      	beq.n	800615e <HAL_UART_IRQHandler+0xf6>
 8006146:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d005      	beq.n	800615e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006156:	f043 0204 	orr.w	r2, r3, #4
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800615e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006162:	f003 0308 	and.w	r3, r3, #8
 8006166:	2b00      	cmp	r3, #0
 8006168:	d011      	beq.n	800618e <HAL_UART_IRQHandler+0x126>
 800616a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b00      	cmp	r3, #0
 8006174:	d105      	bne.n	8006182 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006176:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d005      	beq.n	800618e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006186:	f043 0208 	orr.w	r2, r3, #8
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 81f2 	beq.w	800657c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800619c:	f003 0320 	and.w	r3, r3, #32
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d008      	beq.n	80061b6 <HAL_UART_IRQHandler+0x14e>
 80061a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061a8:	f003 0320 	and.w	r3, r3, #32
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fb24 	bl	80067fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c0:	2b40      	cmp	r3, #64	@ 0x40
 80061c2:	bf0c      	ite	eq
 80061c4:	2301      	moveq	r3, #1
 80061c6:	2300      	movne	r3, #0
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d2:	f003 0308 	and.w	r3, r3, #8
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d103      	bne.n	80061e2 <HAL_UART_IRQHandler+0x17a>
 80061da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d04f      	beq.n	8006282 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fa2c 	bl	8006640 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	695b      	ldr	r3, [r3, #20]
 80061ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061f2:	2b40      	cmp	r3, #64	@ 0x40
 80061f4:	d141      	bne.n	800627a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3314      	adds	r3, #20
 80061fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006204:	e853 3f00 	ldrex	r3, [r3]
 8006208:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800620c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006210:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006214:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3314      	adds	r3, #20
 800621e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006222:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006226:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800622e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800623a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1d9      	bne.n	80061f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006246:	2b00      	cmp	r3, #0
 8006248:	d013      	beq.n	8006272 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800624e:	4a7e      	ldr	r2, [pc, #504]	@ (8006448 <HAL_UART_IRQHandler+0x3e0>)
 8006250:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006256:	4618      	mov	r0, r3
 8006258:	f7fc fc77 	bl	8002b4a <HAL_DMA_Abort_IT>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d016      	beq.n	8006290 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800626c:	4610      	mov	r0, r2
 800626e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006270:	e00e      	b.n	8006290 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f994 	bl	80065a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006278:	e00a      	b.n	8006290 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f990 	bl	80065a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006280:	e006      	b.n	8006290 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f98c 	bl	80065a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800628e:	e175      	b.n	800657c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006290:	bf00      	nop
    return;
 8006292:	e173      	b.n	800657c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006298:	2b01      	cmp	r3, #1
 800629a:	f040 814f 	bne.w	800653c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800629e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062a2:	f003 0310 	and.w	r3, r3, #16
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 8148 	beq.w	800653c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80062ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062b0:	f003 0310 	and.w	r3, r3, #16
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 8141 	beq.w	800653c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062ba:	2300      	movs	r3, #0
 80062bc:	60bb      	str	r3, [r7, #8]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	60bb      	str	r3, [r7, #8]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	60bb      	str	r3, [r7, #8]
 80062ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695b      	ldr	r3, [r3, #20]
 80062d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062da:	2b40      	cmp	r3, #64	@ 0x40
 80062dc:	f040 80b6 	bne.w	800644c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 8145 	beq.w	8006580 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80062fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062fe:	429a      	cmp	r2, r3
 8006300:	f080 813e 	bcs.w	8006580 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800630a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006316:	f000 8088 	beq.w	800642a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	330c      	adds	r3, #12
 8006320:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006328:	e853 3f00 	ldrex	r3, [r3]
 800632c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006330:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006338:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	330c      	adds	r3, #12
 8006342:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006346:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800634a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006352:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800635e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1d9      	bne.n	800631a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3314      	adds	r3, #20
 800636c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006370:	e853 3f00 	ldrex	r3, [r3]
 8006374:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006376:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006378:	f023 0301 	bic.w	r3, r3, #1
 800637c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3314      	adds	r3, #20
 8006386:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800638a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800638e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006392:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800639c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e1      	bne.n	8006366 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3314      	adds	r3, #20
 80063a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063ac:	e853 3f00 	ldrex	r3, [r3]
 80063b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80063b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3314      	adds	r3, #20
 80063c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80063c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80063c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80063cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80063d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e3      	bne.n	80063a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2220      	movs	r2, #32
 80063de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	330c      	adds	r3, #12
 80063ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063f2:	e853 3f00 	ldrex	r3, [r3]
 80063f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80063f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063fa:	f023 0310 	bic.w	r3, r3, #16
 80063fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	330c      	adds	r3, #12
 8006408:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800640c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800640e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006410:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006412:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006414:	e841 2300 	strex	r3, r2, [r1]
 8006418:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800641a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1e3      	bne.n	80063e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006424:	4618      	mov	r0, r3
 8006426:	f7fc fb20 	bl	8002a6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2202      	movs	r2, #2
 800642e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006438:	b29b      	uxth	r3, r3
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	b29b      	uxth	r3, r3
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f8b7 	bl	80065b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006446:	e09b      	b.n	8006580 <HAL_UART_IRQHandler+0x518>
 8006448:	08006707 	.word	0x08006707
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006454:	b29b      	uxth	r3, r3
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006460:	b29b      	uxth	r3, r3
 8006462:	2b00      	cmp	r3, #0
 8006464:	f000 808e 	beq.w	8006584 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006468:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 8089 	beq.w	8006584 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	330c      	adds	r3, #12
 8006478:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006488:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	330c      	adds	r3, #12
 8006492:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006496:	647a      	str	r2, [r7, #68]	@ 0x44
 8006498:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800649c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80064a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1e3      	bne.n	8006472 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3314      	adds	r3, #20
 80064b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b4:	e853 3f00 	ldrex	r3, [r3]
 80064b8:	623b      	str	r3, [r7, #32]
   return(result);
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	f023 0301 	bic.w	r3, r3, #1
 80064c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3314      	adds	r3, #20
 80064ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80064ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80064d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80064d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064d6:	e841 2300 	strex	r3, r2, [r1]
 80064da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1e3      	bne.n	80064aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	330c      	adds	r3, #12
 80064f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	e853 3f00 	ldrex	r3, [r3]
 80064fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 0310 	bic.w	r3, r3, #16
 8006506:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	330c      	adds	r3, #12
 8006510:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006514:	61fa      	str	r2, [r7, #28]
 8006516:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006518:	69b9      	ldr	r1, [r7, #24]
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	e841 2300 	strex	r3, r2, [r1]
 8006520:	617b      	str	r3, [r7, #20]
   return(result);
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1e3      	bne.n	80064f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2202      	movs	r2, #2
 800652c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800652e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 f83d 	bl	80065b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800653a:	e023      	b.n	8006584 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800653c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006544:	2b00      	cmp	r3, #0
 8006546:	d009      	beq.n	800655c <HAL_UART_IRQHandler+0x4f4>
 8006548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800654c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f8ea 	bl	800672e <UART_Transmit_IT>
    return;
 800655a:	e014      	b.n	8006586 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800655c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00e      	beq.n	8006586 <HAL_UART_IRQHandler+0x51e>
 8006568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800656c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006570:	2b00      	cmp	r3, #0
 8006572:	d008      	beq.n	8006586 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f92a 	bl	80067ce <UART_EndTransmit_IT>
    return;
 800657a:	e004      	b.n	8006586 <HAL_UART_IRQHandler+0x51e>
    return;
 800657c:	bf00      	nop
 800657e:	e002      	b.n	8006586 <HAL_UART_IRQHandler+0x51e>
      return;
 8006580:	bf00      	nop
 8006582:	e000      	b.n	8006586 <HAL_UART_IRQHandler+0x51e>
      return;
 8006584:	bf00      	nop
  }
}
 8006586:	37e8      	adds	r7, #232	@ 0xe8
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	460b      	mov	r3, r1
 80065be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b085      	sub	sp, #20
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	4613      	mov	r3, r2
 80065d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	88fa      	ldrh	r2, [r7, #6]
 80065e4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	88fa      	ldrh	r2, [r7, #6]
 80065ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2222      	movs	r2, #34	@ 0x22
 80065f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d007      	beq.n	8006612 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68da      	ldr	r2, [r3, #12]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006610:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	695a      	ldr	r2, [r3, #20]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f042 0201 	orr.w	r2, r2, #1
 8006620:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68da      	ldr	r2, [r3, #12]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0220 	orr.w	r2, r2, #32
 8006630:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006640:	b480      	push	{r7}
 8006642:	b095      	sub	sp, #84	@ 0x54
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	330c      	adds	r3, #12
 800664e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006650:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006652:	e853 3f00 	ldrex	r3, [r3]
 8006656:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800665e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	330c      	adds	r3, #12
 8006666:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006668:	643a      	str	r2, [r7, #64]	@ 0x40
 800666a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800666e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006670:	e841 2300 	strex	r3, r2, [r1]
 8006674:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e5      	bne.n	8006648 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	3314      	adds	r3, #20
 8006682:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	e853 3f00 	ldrex	r3, [r3]
 800668a:	61fb      	str	r3, [r7, #28]
   return(result);
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	f023 0301 	bic.w	r3, r3, #1
 8006692:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3314      	adds	r3, #20
 800669a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800669c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800669e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066a4:	e841 2300 	strex	r3, r2, [r1]
 80066a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e5      	bne.n	800667c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d119      	bne.n	80066ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	330c      	adds	r3, #12
 80066be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	e853 3f00 	ldrex	r3, [r3]
 80066c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f023 0310 	bic.w	r3, r3, #16
 80066ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	330c      	adds	r3, #12
 80066d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066d8:	61ba      	str	r2, [r7, #24]
 80066da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066dc:	6979      	ldr	r1, [r7, #20]
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	e841 2300 	strex	r3, r2, [r1]
 80066e4:	613b      	str	r3, [r7, #16]
   return(result);
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1e5      	bne.n	80066b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2220      	movs	r2, #32
 80066f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80066fa:	bf00      	nop
 80066fc:	3754      	adds	r7, #84	@ 0x54
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006712:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f7ff ff3d 	bl	80065a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006726:	bf00      	nop
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800672e:	b480      	push	{r7}
 8006730:	b085      	sub	sp, #20
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b21      	cmp	r3, #33	@ 0x21
 8006740:	d13e      	bne.n	80067c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800674a:	d114      	bne.n	8006776 <UART_Transmit_IT+0x48>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d110      	bne.n	8006776 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006768:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	1c9a      	adds	r2, r3, #2
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	621a      	str	r2, [r3, #32]
 8006774:	e008      	b.n	8006788 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	1c59      	adds	r1, r3, #1
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6211      	str	r1, [r2, #32]
 8006780:	781a      	ldrb	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800678c:	b29b      	uxth	r3, r3
 800678e:	3b01      	subs	r3, #1
 8006790:	b29b      	uxth	r3, r3
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	4619      	mov	r1, r3
 8006796:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10f      	bne.n	80067bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68da      	ldr	r2, [r3, #12]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80067aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067bc:	2300      	movs	r3, #0
 80067be:	e000      	b.n	80067c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067c0:	2302      	movs	r3, #2
  }
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr

080067ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b082      	sub	sp, #8
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68da      	ldr	r2, [r3, #12]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2220      	movs	r2, #32
 80067ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f7ff fecc 	bl	800658c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b08c      	sub	sp, #48	@ 0x30
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b22      	cmp	r3, #34	@ 0x22
 8006810:	f040 80ae 	bne.w	8006970 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800681c:	d117      	bne.n	800684e <UART_Receive_IT+0x50>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d113      	bne.n	800684e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006826:	2300      	movs	r3, #0
 8006828:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800682e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	b29b      	uxth	r3, r3
 8006838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800683c:	b29a      	uxth	r2, r3
 800683e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006840:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006846:	1c9a      	adds	r2, r3, #2
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	629a      	str	r2, [r3, #40]	@ 0x28
 800684c:	e026      	b.n	800689c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006852:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006854:	2300      	movs	r3, #0
 8006856:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006860:	d007      	beq.n	8006872 <UART_Receive_IT+0x74>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10a      	bne.n	8006880 <UART_Receive_IT+0x82>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d106      	bne.n	8006880 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	b2da      	uxtb	r2, r3
 800687a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	e008      	b.n	8006892 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	b2db      	uxtb	r3, r3
 8006888:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800688c:	b2da      	uxtb	r2, r3
 800688e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006890:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006896:	1c5a      	adds	r2, r3, #1
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	3b01      	subs	r3, #1
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	4619      	mov	r1, r3
 80068aa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d15d      	bne.n	800696c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f022 0220 	bic.w	r2, r2, #32
 80068be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80068ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	695a      	ldr	r2, [r3, #20]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f022 0201 	bic.w	r2, r2, #1
 80068de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d135      	bne.n	8006962 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	330c      	adds	r3, #12
 8006902:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	e853 3f00 	ldrex	r3, [r3]
 800690a:	613b      	str	r3, [r7, #16]
   return(result);
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f023 0310 	bic.w	r3, r3, #16
 8006912:	627b      	str	r3, [r7, #36]	@ 0x24
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	330c      	adds	r3, #12
 800691a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800691c:	623a      	str	r2, [r7, #32]
 800691e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006920:	69f9      	ldr	r1, [r7, #28]
 8006922:	6a3a      	ldr	r2, [r7, #32]
 8006924:	e841 2300 	strex	r3, r2, [r1]
 8006928:	61bb      	str	r3, [r7, #24]
   return(result);
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d1e5      	bne.n	80068fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0310 	and.w	r3, r3, #16
 800693a:	2b10      	cmp	r3, #16
 800693c:	d10a      	bne.n	8006954 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800693e:	2300      	movs	r3, #0
 8006940:	60fb      	str	r3, [r7, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	60fb      	str	r3, [r7, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7ff fe2a 	bl	80065b4 <HAL_UARTEx_RxEventCallback>
 8006960:	e002      	b.n	8006968 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f7fa fe96 	bl	8001694 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006968:	2300      	movs	r3, #0
 800696a:	e002      	b.n	8006972 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800696c:	2300      	movs	r3, #0
 800696e:	e000      	b.n	8006972 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006970:	2302      	movs	r3, #2
  }
}
 8006972:	4618      	mov	r0, r3
 8006974:	3730      	adds	r7, #48	@ 0x30
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
	...

0800697c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800697c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006980:	b0c0      	sub	sp, #256	@ 0x100
 8006982:	af00      	add	r7, sp, #0
 8006984:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006998:	68d9      	ldr	r1, [r3, #12]
 800699a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	ea40 0301 	orr.w	r3, r0, r1
 80069a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069aa:	689a      	ldr	r2, [r3, #8]
 80069ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	431a      	orrs	r2, r3
 80069b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	431a      	orrs	r2, r3
 80069bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80069d4:	f021 010c 	bic.w	r1, r1, #12
 80069d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80069e2:	430b      	orrs	r3, r1
 80069e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80069f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f6:	6999      	ldr	r1, [r3, #24]
 80069f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	ea40 0301 	orr.w	r3, r0, r1
 8006a02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	4b8f      	ldr	r3, [pc, #572]	@ (8006c48 <UART_SetConfig+0x2cc>)
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d005      	beq.n	8006a1c <UART_SetConfig+0xa0>
 8006a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	4b8d      	ldr	r3, [pc, #564]	@ (8006c4c <UART_SetConfig+0x2d0>)
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d104      	bne.n	8006a26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a1c:	f7fe fb84 	bl	8005128 <HAL_RCC_GetPCLK2Freq>
 8006a20:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006a24:	e003      	b.n	8006a2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a26:	f7fe fb6b 	bl	8005100 <HAL_RCC_GetPCLK1Freq>
 8006a2a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a38:	f040 810c 	bne.w	8006c54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a40:	2200      	movs	r2, #0
 8006a42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a46:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a4e:	4622      	mov	r2, r4
 8006a50:	462b      	mov	r3, r5
 8006a52:	1891      	adds	r1, r2, r2
 8006a54:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006a56:	415b      	adcs	r3, r3
 8006a58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a5e:	4621      	mov	r1, r4
 8006a60:	eb12 0801 	adds.w	r8, r2, r1
 8006a64:	4629      	mov	r1, r5
 8006a66:	eb43 0901 	adc.w	r9, r3, r1
 8006a6a:	f04f 0200 	mov.w	r2, #0
 8006a6e:	f04f 0300 	mov.w	r3, #0
 8006a72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a7e:	4690      	mov	r8, r2
 8006a80:	4699      	mov	r9, r3
 8006a82:	4623      	mov	r3, r4
 8006a84:	eb18 0303 	adds.w	r3, r8, r3
 8006a88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a8c:	462b      	mov	r3, r5
 8006a8e:	eb49 0303 	adc.w	r3, r9, r3
 8006a92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006aa2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006aa6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006aaa:	460b      	mov	r3, r1
 8006aac:	18db      	adds	r3, r3, r3
 8006aae:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	eb42 0303 	adc.w	r3, r2, r3
 8006ab6:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ab8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006abc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006ac0:	f7f9 fb82 	bl	80001c8 <__aeabi_uldivmod>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	4b61      	ldr	r3, [pc, #388]	@ (8006c50 <UART_SetConfig+0x2d4>)
 8006aca:	fba3 2302 	umull	r2, r3, r3, r2
 8006ace:	095b      	lsrs	r3, r3, #5
 8006ad0:	011c      	lsls	r4, r3, #4
 8006ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006adc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006ae0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006ae4:	4642      	mov	r2, r8
 8006ae6:	464b      	mov	r3, r9
 8006ae8:	1891      	adds	r1, r2, r2
 8006aea:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006aec:	415b      	adcs	r3, r3
 8006aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006af0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006af4:	4641      	mov	r1, r8
 8006af6:	eb12 0a01 	adds.w	sl, r2, r1
 8006afa:	4649      	mov	r1, r9
 8006afc:	eb43 0b01 	adc.w	fp, r3, r1
 8006b00:	f04f 0200 	mov.w	r2, #0
 8006b04:	f04f 0300 	mov.w	r3, #0
 8006b08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b14:	4692      	mov	sl, r2
 8006b16:	469b      	mov	fp, r3
 8006b18:	4643      	mov	r3, r8
 8006b1a:	eb1a 0303 	adds.w	r3, sl, r3
 8006b1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b22:	464b      	mov	r3, r9
 8006b24:	eb4b 0303 	adc.w	r3, fp, r3
 8006b28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006b3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b40:	460b      	mov	r3, r1
 8006b42:	18db      	adds	r3, r3, r3
 8006b44:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b46:	4613      	mov	r3, r2
 8006b48:	eb42 0303 	adc.w	r3, r2, r3
 8006b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006b56:	f7f9 fb37 	bl	80001c8 <__aeabi_uldivmod>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4611      	mov	r1, r2
 8006b60:	4b3b      	ldr	r3, [pc, #236]	@ (8006c50 <UART_SetConfig+0x2d4>)
 8006b62:	fba3 2301 	umull	r2, r3, r3, r1
 8006b66:	095b      	lsrs	r3, r3, #5
 8006b68:	2264      	movs	r2, #100	@ 0x64
 8006b6a:	fb02 f303 	mul.w	r3, r2, r3
 8006b6e:	1acb      	subs	r3, r1, r3
 8006b70:	00db      	lsls	r3, r3, #3
 8006b72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006b76:	4b36      	ldr	r3, [pc, #216]	@ (8006c50 <UART_SetConfig+0x2d4>)
 8006b78:	fba3 2302 	umull	r2, r3, r3, r2
 8006b7c:	095b      	lsrs	r3, r3, #5
 8006b7e:	005b      	lsls	r3, r3, #1
 8006b80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006b84:	441c      	add	r4, r3
 8006b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b90:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006b94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006b98:	4642      	mov	r2, r8
 8006b9a:	464b      	mov	r3, r9
 8006b9c:	1891      	adds	r1, r2, r2
 8006b9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006ba0:	415b      	adcs	r3, r3
 8006ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ba4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006ba8:	4641      	mov	r1, r8
 8006baa:	1851      	adds	r1, r2, r1
 8006bac:	6339      	str	r1, [r7, #48]	@ 0x30
 8006bae:	4649      	mov	r1, r9
 8006bb0:	414b      	adcs	r3, r1
 8006bb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bb4:	f04f 0200 	mov.w	r2, #0
 8006bb8:	f04f 0300 	mov.w	r3, #0
 8006bbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006bc0:	4659      	mov	r1, fp
 8006bc2:	00cb      	lsls	r3, r1, #3
 8006bc4:	4651      	mov	r1, sl
 8006bc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bca:	4651      	mov	r1, sl
 8006bcc:	00ca      	lsls	r2, r1, #3
 8006bce:	4610      	mov	r0, r2
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	4642      	mov	r2, r8
 8006bd6:	189b      	adds	r3, r3, r2
 8006bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006bdc:	464b      	mov	r3, r9
 8006bde:	460a      	mov	r2, r1
 8006be0:	eb42 0303 	adc.w	r3, r2, r3
 8006be4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006bf4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006bf8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	18db      	adds	r3, r3, r3
 8006c00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c02:	4613      	mov	r3, r2
 8006c04:	eb42 0303 	adc.w	r3, r2, r3
 8006c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006c12:	f7f9 fad9 	bl	80001c8 <__aeabi_uldivmod>
 8006c16:	4602      	mov	r2, r0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c50 <UART_SetConfig+0x2d4>)
 8006c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c20:	095b      	lsrs	r3, r3, #5
 8006c22:	2164      	movs	r1, #100	@ 0x64
 8006c24:	fb01 f303 	mul.w	r3, r1, r3
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	3332      	adds	r3, #50	@ 0x32
 8006c2e:	4a08      	ldr	r2, [pc, #32]	@ (8006c50 <UART_SetConfig+0x2d4>)
 8006c30:	fba2 2303 	umull	r2, r3, r2, r3
 8006c34:	095b      	lsrs	r3, r3, #5
 8006c36:	f003 0207 	and.w	r2, r3, #7
 8006c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4422      	add	r2, r4
 8006c42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c44:	e106      	b.n	8006e54 <UART_SetConfig+0x4d8>
 8006c46:	bf00      	nop
 8006c48:	40011000 	.word	0x40011000
 8006c4c:	40011400 	.word	0x40011400
 8006c50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c5e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006c62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006c66:	4642      	mov	r2, r8
 8006c68:	464b      	mov	r3, r9
 8006c6a:	1891      	adds	r1, r2, r2
 8006c6c:	6239      	str	r1, [r7, #32]
 8006c6e:	415b      	adcs	r3, r3
 8006c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c76:	4641      	mov	r1, r8
 8006c78:	1854      	adds	r4, r2, r1
 8006c7a:	4649      	mov	r1, r9
 8006c7c:	eb43 0501 	adc.w	r5, r3, r1
 8006c80:	f04f 0200 	mov.w	r2, #0
 8006c84:	f04f 0300 	mov.w	r3, #0
 8006c88:	00eb      	lsls	r3, r5, #3
 8006c8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c8e:	00e2      	lsls	r2, r4, #3
 8006c90:	4614      	mov	r4, r2
 8006c92:	461d      	mov	r5, r3
 8006c94:	4643      	mov	r3, r8
 8006c96:	18e3      	adds	r3, r4, r3
 8006c98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c9c:	464b      	mov	r3, r9
 8006c9e:	eb45 0303 	adc.w	r3, r5, r3
 8006ca2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006cb2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006cb6:	f04f 0200 	mov.w	r2, #0
 8006cba:	f04f 0300 	mov.w	r3, #0
 8006cbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006cc2:	4629      	mov	r1, r5
 8006cc4:	008b      	lsls	r3, r1, #2
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ccc:	4621      	mov	r1, r4
 8006cce:	008a      	lsls	r2, r1, #2
 8006cd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006cd4:	f7f9 fa78 	bl	80001c8 <__aeabi_uldivmod>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	460b      	mov	r3, r1
 8006cdc:	4b60      	ldr	r3, [pc, #384]	@ (8006e60 <UART_SetConfig+0x4e4>)
 8006cde:	fba3 2302 	umull	r2, r3, r3, r2
 8006ce2:	095b      	lsrs	r3, r3, #5
 8006ce4:	011c      	lsls	r4, r3, #4
 8006ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cea:	2200      	movs	r2, #0
 8006cec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006cf0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006cf4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006cf8:	4642      	mov	r2, r8
 8006cfa:	464b      	mov	r3, r9
 8006cfc:	1891      	adds	r1, r2, r2
 8006cfe:	61b9      	str	r1, [r7, #24]
 8006d00:	415b      	adcs	r3, r3
 8006d02:	61fb      	str	r3, [r7, #28]
 8006d04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d08:	4641      	mov	r1, r8
 8006d0a:	1851      	adds	r1, r2, r1
 8006d0c:	6139      	str	r1, [r7, #16]
 8006d0e:	4649      	mov	r1, r9
 8006d10:	414b      	adcs	r3, r1
 8006d12:	617b      	str	r3, [r7, #20]
 8006d14:	f04f 0200 	mov.w	r2, #0
 8006d18:	f04f 0300 	mov.w	r3, #0
 8006d1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d20:	4659      	mov	r1, fp
 8006d22:	00cb      	lsls	r3, r1, #3
 8006d24:	4651      	mov	r1, sl
 8006d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d2a:	4651      	mov	r1, sl
 8006d2c:	00ca      	lsls	r2, r1, #3
 8006d2e:	4610      	mov	r0, r2
 8006d30:	4619      	mov	r1, r3
 8006d32:	4603      	mov	r3, r0
 8006d34:	4642      	mov	r2, r8
 8006d36:	189b      	adds	r3, r3, r2
 8006d38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d3c:	464b      	mov	r3, r9
 8006d3e:	460a      	mov	r2, r1
 8006d40:	eb42 0303 	adc.w	r3, r2, r3
 8006d44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d52:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006d54:	f04f 0200 	mov.w	r2, #0
 8006d58:	f04f 0300 	mov.w	r3, #0
 8006d5c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006d60:	4649      	mov	r1, r9
 8006d62:	008b      	lsls	r3, r1, #2
 8006d64:	4641      	mov	r1, r8
 8006d66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d6a:	4641      	mov	r1, r8
 8006d6c:	008a      	lsls	r2, r1, #2
 8006d6e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006d72:	f7f9 fa29 	bl	80001c8 <__aeabi_uldivmod>
 8006d76:	4602      	mov	r2, r0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	4b38      	ldr	r3, [pc, #224]	@ (8006e60 <UART_SetConfig+0x4e4>)
 8006d7e:	fba3 2301 	umull	r2, r3, r3, r1
 8006d82:	095b      	lsrs	r3, r3, #5
 8006d84:	2264      	movs	r2, #100	@ 0x64
 8006d86:	fb02 f303 	mul.w	r3, r2, r3
 8006d8a:	1acb      	subs	r3, r1, r3
 8006d8c:	011b      	lsls	r3, r3, #4
 8006d8e:	3332      	adds	r3, #50	@ 0x32
 8006d90:	4a33      	ldr	r2, [pc, #204]	@ (8006e60 <UART_SetConfig+0x4e4>)
 8006d92:	fba2 2303 	umull	r2, r3, r2, r3
 8006d96:	095b      	lsrs	r3, r3, #5
 8006d98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d9c:	441c      	add	r4, r3
 8006d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006da2:	2200      	movs	r2, #0
 8006da4:	673b      	str	r3, [r7, #112]	@ 0x70
 8006da6:	677a      	str	r2, [r7, #116]	@ 0x74
 8006da8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006dac:	4642      	mov	r2, r8
 8006dae:	464b      	mov	r3, r9
 8006db0:	1891      	adds	r1, r2, r2
 8006db2:	60b9      	str	r1, [r7, #8]
 8006db4:	415b      	adcs	r3, r3
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dbc:	4641      	mov	r1, r8
 8006dbe:	1851      	adds	r1, r2, r1
 8006dc0:	6039      	str	r1, [r7, #0]
 8006dc2:	4649      	mov	r1, r9
 8006dc4:	414b      	adcs	r3, r1
 8006dc6:	607b      	str	r3, [r7, #4]
 8006dc8:	f04f 0200 	mov.w	r2, #0
 8006dcc:	f04f 0300 	mov.w	r3, #0
 8006dd0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006dd4:	4659      	mov	r1, fp
 8006dd6:	00cb      	lsls	r3, r1, #3
 8006dd8:	4651      	mov	r1, sl
 8006dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dde:	4651      	mov	r1, sl
 8006de0:	00ca      	lsls	r2, r1, #3
 8006de2:	4610      	mov	r0, r2
 8006de4:	4619      	mov	r1, r3
 8006de6:	4603      	mov	r3, r0
 8006de8:	4642      	mov	r2, r8
 8006dea:	189b      	adds	r3, r3, r2
 8006dec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006dee:	464b      	mov	r3, r9
 8006df0:	460a      	mov	r2, r1
 8006df2:	eb42 0303 	adc.w	r3, r2, r3
 8006df6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e02:	667a      	str	r2, [r7, #100]	@ 0x64
 8006e04:	f04f 0200 	mov.w	r2, #0
 8006e08:	f04f 0300 	mov.w	r3, #0
 8006e0c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006e10:	4649      	mov	r1, r9
 8006e12:	008b      	lsls	r3, r1, #2
 8006e14:	4641      	mov	r1, r8
 8006e16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e1a:	4641      	mov	r1, r8
 8006e1c:	008a      	lsls	r2, r1, #2
 8006e1e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006e22:	f7f9 f9d1 	bl	80001c8 <__aeabi_uldivmod>
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e60 <UART_SetConfig+0x4e4>)
 8006e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e30:	095b      	lsrs	r3, r3, #5
 8006e32:	2164      	movs	r1, #100	@ 0x64
 8006e34:	fb01 f303 	mul.w	r3, r1, r3
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	3332      	adds	r3, #50	@ 0x32
 8006e3e:	4a08      	ldr	r2, [pc, #32]	@ (8006e60 <UART_SetConfig+0x4e4>)
 8006e40:	fba2 2303 	umull	r2, r3, r2, r3
 8006e44:	095b      	lsrs	r3, r3, #5
 8006e46:	f003 020f 	and.w	r2, r3, #15
 8006e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4422      	add	r2, r4
 8006e52:	609a      	str	r2, [r3, #8]
}
 8006e54:	bf00      	nop
 8006e56:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e60:	51eb851f 	.word	0x51eb851f

08006e64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e64:	b084      	sub	sp, #16
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b084      	sub	sp, #16
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	f107 001c 	add.w	r0, r7, #28
 8006e72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e76:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d123      	bne.n	8006ec6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e82:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006e92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ea6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d105      	bne.n	8006eba <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f001 fae8 	bl	8008490 <USB_CoreReset>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	73fb      	strb	r3, [r7, #15]
 8006ec4:	e01b      	b.n	8006efe <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 fadc 	bl	8008490 <USB_CoreReset>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006edc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d106      	bne.n	8006ef2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	639a      	str	r2, [r3, #56]	@ 0x38
 8006ef0:	e005      	b.n	8006efe <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006efe:	7fbb      	ldrb	r3, [r7, #30]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d10b      	bne.n	8006f1c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f043 0206 	orr.w	r2, r3, #6
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f043 0220 	orr.w	r2, r3, #32
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f28:	b004      	add	sp, #16
 8006f2a:	4770      	bx	lr

08006f2c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	4613      	mov	r3, r2
 8006f38:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f3a:	79fb      	ldrb	r3, [r7, #7]
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d165      	bne.n	800700c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	4a41      	ldr	r2, [pc, #260]	@ (8007048 <USB_SetTurnaroundTime+0x11c>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d906      	bls.n	8006f56 <USB_SetTurnaroundTime+0x2a>
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	4a40      	ldr	r2, [pc, #256]	@ (800704c <USB_SetTurnaroundTime+0x120>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d202      	bcs.n	8006f56 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f50:	230f      	movs	r3, #15
 8006f52:	617b      	str	r3, [r7, #20]
 8006f54:	e062      	b.n	800701c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	4a3c      	ldr	r2, [pc, #240]	@ (800704c <USB_SetTurnaroundTime+0x120>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d306      	bcc.n	8006f6c <USB_SetTurnaroundTime+0x40>
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	4a3b      	ldr	r2, [pc, #236]	@ (8007050 <USB_SetTurnaroundTime+0x124>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d202      	bcs.n	8006f6c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f66:	230e      	movs	r3, #14
 8006f68:	617b      	str	r3, [r7, #20]
 8006f6a:	e057      	b.n	800701c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	4a38      	ldr	r2, [pc, #224]	@ (8007050 <USB_SetTurnaroundTime+0x124>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d306      	bcc.n	8006f82 <USB_SetTurnaroundTime+0x56>
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	4a37      	ldr	r2, [pc, #220]	@ (8007054 <USB_SetTurnaroundTime+0x128>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d202      	bcs.n	8006f82 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f7c:	230d      	movs	r3, #13
 8006f7e:	617b      	str	r3, [r7, #20]
 8006f80:	e04c      	b.n	800701c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	4a33      	ldr	r2, [pc, #204]	@ (8007054 <USB_SetTurnaroundTime+0x128>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d306      	bcc.n	8006f98 <USB_SetTurnaroundTime+0x6c>
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	4a32      	ldr	r2, [pc, #200]	@ (8007058 <USB_SetTurnaroundTime+0x12c>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d802      	bhi.n	8006f98 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006f92:	230c      	movs	r3, #12
 8006f94:	617b      	str	r3, [r7, #20]
 8006f96:	e041      	b.n	800701c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	4a2f      	ldr	r2, [pc, #188]	@ (8007058 <USB_SetTurnaroundTime+0x12c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d906      	bls.n	8006fae <USB_SetTurnaroundTime+0x82>
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	4a2e      	ldr	r2, [pc, #184]	@ (800705c <USB_SetTurnaroundTime+0x130>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d802      	bhi.n	8006fae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006fa8:	230b      	movs	r3, #11
 8006faa:	617b      	str	r3, [r7, #20]
 8006fac:	e036      	b.n	800701c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	4a2a      	ldr	r2, [pc, #168]	@ (800705c <USB_SetTurnaroundTime+0x130>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d906      	bls.n	8006fc4 <USB_SetTurnaroundTime+0x98>
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	4a29      	ldr	r2, [pc, #164]	@ (8007060 <USB_SetTurnaroundTime+0x134>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d802      	bhi.n	8006fc4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006fbe:	230a      	movs	r3, #10
 8006fc0:	617b      	str	r3, [r7, #20]
 8006fc2:	e02b      	b.n	800701c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	4a26      	ldr	r2, [pc, #152]	@ (8007060 <USB_SetTurnaroundTime+0x134>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d906      	bls.n	8006fda <USB_SetTurnaroundTime+0xae>
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	4a25      	ldr	r2, [pc, #148]	@ (8007064 <USB_SetTurnaroundTime+0x138>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d202      	bcs.n	8006fda <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006fd4:	2309      	movs	r3, #9
 8006fd6:	617b      	str	r3, [r7, #20]
 8006fd8:	e020      	b.n	800701c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	4a21      	ldr	r2, [pc, #132]	@ (8007064 <USB_SetTurnaroundTime+0x138>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d306      	bcc.n	8006ff0 <USB_SetTurnaroundTime+0xc4>
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	4a20      	ldr	r2, [pc, #128]	@ (8007068 <USB_SetTurnaroundTime+0x13c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d802      	bhi.n	8006ff0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006fea:	2308      	movs	r3, #8
 8006fec:	617b      	str	r3, [r7, #20]
 8006fee:	e015      	b.n	800701c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	4a1d      	ldr	r2, [pc, #116]	@ (8007068 <USB_SetTurnaroundTime+0x13c>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d906      	bls.n	8007006 <USB_SetTurnaroundTime+0xda>
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800706c <USB_SetTurnaroundTime+0x140>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d202      	bcs.n	8007006 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007000:	2307      	movs	r3, #7
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	e00a      	b.n	800701c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007006:	2306      	movs	r3, #6
 8007008:	617b      	str	r3, [r7, #20]
 800700a:	e007      	b.n	800701c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800700c:	79fb      	ldrb	r3, [r7, #7]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d102      	bne.n	8007018 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007012:	2309      	movs	r3, #9
 8007014:	617b      	str	r3, [r7, #20]
 8007016:	e001      	b.n	800701c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007018:	2309      	movs	r3, #9
 800701a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	68da      	ldr	r2, [r3, #12]
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	029b      	lsls	r3, r3, #10
 8007030:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007034:	431a      	orrs	r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	371c      	adds	r7, #28
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	00d8acbf 	.word	0x00d8acbf
 800704c:	00e4e1c0 	.word	0x00e4e1c0
 8007050:	00f42400 	.word	0x00f42400
 8007054:	01067380 	.word	0x01067380
 8007058:	011a499f 	.word	0x011a499f
 800705c:	01312cff 	.word	0x01312cff
 8007060:	014ca43f 	.word	0x014ca43f
 8007064:	016e3600 	.word	0x016e3600
 8007068:	01a6ab1f 	.word	0x01a6ab1f
 800706c:	01e84800 	.word	0x01e84800

08007070 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f043 0201 	orr.w	r2, r3, #1
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007092:	b480      	push	{r7}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f023 0201 	bic.w	r2, r3, #1
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	460b      	mov	r3, r1
 80070be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070d0:	78fb      	ldrb	r3, [r7, #3]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d115      	bne.n	8007102 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80070e2:	200a      	movs	r0, #10
 80070e4:	f7fb f8f8 	bl	80022d8 <HAL_Delay>
      ms += 10U;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	330a      	adds	r3, #10
 80070ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f001 f93f 	bl	8008372 <USB_GetMode>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d01e      	beq.n	8007138 <USB_SetCurrentMode+0x84>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80070fe:	d9f0      	bls.n	80070e2 <USB_SetCurrentMode+0x2e>
 8007100:	e01a      	b.n	8007138 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007102:	78fb      	ldrb	r3, [r7, #3]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d115      	bne.n	8007134 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007114:	200a      	movs	r0, #10
 8007116:	f7fb f8df 	bl	80022d8 <HAL_Delay>
      ms += 10U;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	330a      	adds	r3, #10
 800711e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f001 f926 	bl	8008372 <USB_GetMode>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d005      	beq.n	8007138 <USB_SetCurrentMode+0x84>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007130:	d9f0      	bls.n	8007114 <USB_SetCurrentMode+0x60>
 8007132:	e001      	b.n	8007138 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	e005      	b.n	8007144 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2bc8      	cmp	r3, #200	@ 0xc8
 800713c:	d101      	bne.n	8007142 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e000      	b.n	8007144 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800714c:	b084      	sub	sp, #16
 800714e:	b580      	push	{r7, lr}
 8007150:	b086      	sub	sp, #24
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800715a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800715e:	2300      	movs	r3, #0
 8007160:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007166:	2300      	movs	r3, #0
 8007168:	613b      	str	r3, [r7, #16]
 800716a:	e009      	b.n	8007180 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	3340      	adds	r3, #64	@ 0x40
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	2200      	movs	r2, #0
 8007178:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	3301      	adds	r3, #1
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	2b0e      	cmp	r3, #14
 8007184:	d9f2      	bls.n	800716c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007186:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800718a:	2b00      	cmp	r3, #0
 800718c:	d11c      	bne.n	80071c8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800719c:	f043 0302 	orr.w	r3, r3, #2
 80071a0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071be:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80071c6:	e00b      	b.n	80071e0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071cc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80071e6:	461a      	mov	r2, r3
 80071e8:	2300      	movs	r3, #0
 80071ea:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071ec:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d10d      	bne.n	8007210 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80071f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d104      	bne.n	8007206 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80071fc:	2100      	movs	r1, #0
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f968 	bl	80074d4 <USB_SetDevSpeed>
 8007204:	e008      	b.n	8007218 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007206:	2101      	movs	r1, #1
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f963 	bl	80074d4 <USB_SetDevSpeed>
 800720e:	e003      	b.n	8007218 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007210:	2103      	movs	r1, #3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f95e 	bl	80074d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007218:	2110      	movs	r1, #16
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f8fa 	bl	8007414 <USB_FlushTxFifo>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d001      	beq.n	800722a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f924 	bl	8007478 <USB_FlushRxFifo>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007240:	461a      	mov	r2, r3
 8007242:	2300      	movs	r3, #0
 8007244:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800724c:	461a      	mov	r2, r3
 800724e:	2300      	movs	r3, #0
 8007250:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007258:	461a      	mov	r2, r3
 800725a:	2300      	movs	r3, #0
 800725c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800725e:	2300      	movs	r3, #0
 8007260:	613b      	str	r3, [r7, #16]
 8007262:	e043      	b.n	80072ec <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	015a      	lsls	r2, r3, #5
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4413      	add	r3, r2
 800726c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007276:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800727a:	d118      	bne.n	80072ae <USB_DevInit+0x162>
    {
      if (i == 0U)
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10a      	bne.n	8007298 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	4413      	add	r3, r2
 800728a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800728e:	461a      	mov	r2, r3
 8007290:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007294:	6013      	str	r3, [r2, #0]
 8007296:	e013      	b.n	80072c0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072a4:	461a      	mov	r2, r3
 80072a6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80072aa:	6013      	str	r3, [r2, #0]
 80072ac:	e008      	b.n	80072c0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	015a      	lsls	r2, r3, #5
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	4413      	add	r3, r2
 80072b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ba:	461a      	mov	r2, r3
 80072bc:	2300      	movs	r3, #0
 80072be:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072cc:	461a      	mov	r2, r3
 80072ce:	2300      	movs	r3, #0
 80072d0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072de:	461a      	mov	r2, r3
 80072e0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80072e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	3301      	adds	r3, #1
 80072ea:	613b      	str	r3, [r7, #16]
 80072ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80072f0:	461a      	mov	r2, r3
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d3b5      	bcc.n	8007264 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072f8:	2300      	movs	r3, #0
 80072fa:	613b      	str	r3, [r7, #16]
 80072fc:	e043      	b.n	8007386 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	4413      	add	r3, r2
 8007306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007310:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007314:	d118      	bne.n	8007348 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d10a      	bne.n	8007332 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007328:	461a      	mov	r2, r3
 800732a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800732e:	6013      	str	r3, [r2, #0]
 8007330:	e013      	b.n	800735a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	4413      	add	r3, r2
 800733a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800733e:	461a      	mov	r2, r3
 8007340:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007344:	6013      	str	r3, [r2, #0]
 8007346:	e008      	b.n	800735a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	015a      	lsls	r2, r3, #5
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	4413      	add	r3, r2
 8007350:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007354:	461a      	mov	r2, r3
 8007356:	2300      	movs	r3, #0
 8007358:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	015a      	lsls	r2, r3, #5
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	4413      	add	r3, r2
 8007362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007366:	461a      	mov	r2, r3
 8007368:	2300      	movs	r3, #0
 800736a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007378:	461a      	mov	r2, r3
 800737a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800737e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	3301      	adds	r3, #1
 8007384:	613b      	str	r3, [r7, #16]
 8007386:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800738a:	461a      	mov	r2, r3
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	4293      	cmp	r3, r2
 8007390:	d3b5      	bcc.n	80072fe <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073a4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80073b2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d105      	bne.n	80073c8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	f043 0210 	orr.w	r2, r3, #16
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	699a      	ldr	r2, [r3, #24]
 80073cc:	4b10      	ldr	r3, [pc, #64]	@ (8007410 <USB_DevInit+0x2c4>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80073d4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d005      	beq.n	80073e8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	f043 0208 	orr.w	r2, r3, #8
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80073e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d107      	bne.n	8007400 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073f8:	f043 0304 	orr.w	r3, r3, #4
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007400:	7dfb      	ldrb	r3, [r7, #23]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3718      	adds	r7, #24
 8007406:	46bd      	mov	sp, r7
 8007408:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800740c:	b004      	add	sp, #16
 800740e:	4770      	bx	lr
 8007410:	803c3800 	.word	0x803c3800

08007414 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800741e:	2300      	movs	r3, #0
 8007420:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3301      	adds	r3, #1
 8007426:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800742e:	d901      	bls.n	8007434 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e01b      	b.n	800746c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	daf2      	bge.n	8007422 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800743c:	2300      	movs	r3, #0
 800743e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	019b      	lsls	r3, r3, #6
 8007444:	f043 0220 	orr.w	r2, r3, #32
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	3301      	adds	r3, #1
 8007450:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007458:	d901      	bls.n	800745e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e006      	b.n	800746c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	f003 0320 	and.w	r3, r3, #32
 8007466:	2b20      	cmp	r3, #32
 8007468:	d0f0      	beq.n	800744c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	3301      	adds	r3, #1
 8007488:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007490:	d901      	bls.n	8007496 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e018      	b.n	80074c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	daf2      	bge.n	8007484 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2210      	movs	r2, #16
 80074a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	3301      	adds	r3, #1
 80074ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074b4:	d901      	bls.n	80074ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e006      	b.n	80074c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	f003 0310 	and.w	r3, r3, #16
 80074c2:	2b10      	cmp	r3, #16
 80074c4:	d0f0      	beq.n	80074a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80074c6:	2300      	movs	r3, #0
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	460b      	mov	r3, r1
 80074de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	78fb      	ldrb	r3, [r7, #3]
 80074ee:	68f9      	ldr	r1, [r7, #12]
 80074f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80074f4:	4313      	orrs	r3, r2
 80074f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007506:	b480      	push	{r7}
 8007508:	b087      	sub	sp, #28
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f003 0306 	and.w	r3, r3, #6
 800751e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d102      	bne.n	800752c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007526:	2300      	movs	r3, #0
 8007528:	75fb      	strb	r3, [r7, #23]
 800752a:	e00a      	b.n	8007542 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2b02      	cmp	r3, #2
 8007530:	d002      	beq.n	8007538 <USB_GetDevSpeed+0x32>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2b06      	cmp	r3, #6
 8007536:	d102      	bne.n	800753e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007538:	2302      	movs	r3, #2
 800753a:	75fb      	strb	r3, [r7, #23]
 800753c:	e001      	b.n	8007542 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800753e:	230f      	movs	r3, #15
 8007540:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007542:	7dfb      	ldrb	r3, [r7, #23]
}
 8007544:	4618      	mov	r0, r3
 8007546:	371c      	adds	r7, #28
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	785b      	ldrb	r3, [r3, #1]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d13a      	bne.n	80075e2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007572:	69da      	ldr	r2, [r3, #28]
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	f003 030f 	and.w	r3, r3, #15
 800757c:	2101      	movs	r1, #1
 800757e:	fa01 f303 	lsl.w	r3, r1, r3
 8007582:	b29b      	uxth	r3, r3
 8007584:	68f9      	ldr	r1, [r7, #12]
 8007586:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800758a:	4313      	orrs	r3, r2
 800758c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d155      	bne.n	8007650 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	015a      	lsls	r2, r3, #5
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	791b      	ldrb	r3, [r3, #4]
 80075be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	059b      	lsls	r3, r3, #22
 80075c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075c8:	4313      	orrs	r3, r2
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	0151      	lsls	r1, r2, #5
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	440a      	add	r2, r1
 80075d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075de:	6013      	str	r3, [r2, #0]
 80075e0:	e036      	b.n	8007650 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075e8:	69da      	ldr	r2, [r3, #28]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	f003 030f 	and.w	r3, r3, #15
 80075f2:	2101      	movs	r1, #1
 80075f4:	fa01 f303 	lsl.w	r3, r1, r3
 80075f8:	041b      	lsls	r3, r3, #16
 80075fa:	68f9      	ldr	r1, [r7, #12]
 80075fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007600:	4313      	orrs	r3, r2
 8007602:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	015a      	lsls	r2, r3, #5
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	4413      	add	r3, r2
 800760c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d11a      	bne.n	8007650 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	791b      	ldrb	r3, [r3, #4]
 8007634:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007636:	430b      	orrs	r3, r1
 8007638:	4313      	orrs	r3, r2
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	0151      	lsls	r1, r2, #5
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	440a      	add	r2, r1
 8007642:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800764a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800764e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
	...

08007660 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	785b      	ldrb	r3, [r3, #1]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d161      	bne.n	8007740 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4413      	add	r3, r2
 8007684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800768e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007692:	d11f      	bne.n	80076d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	015a      	lsls	r2, r3, #5
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	4413      	add	r3, r2
 800769c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	0151      	lsls	r1, r2, #5
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	440a      	add	r2, r1
 80076aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076ae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80076b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	015a      	lsls	r2, r3, #5
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	4413      	add	r3, r2
 80076bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	0151      	lsls	r1, r2, #5
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	440a      	add	r2, r1
 80076ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076ce:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80076d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	f003 030f 	and.w	r3, r3, #15
 80076e4:	2101      	movs	r1, #1
 80076e6:	fa01 f303 	lsl.w	r3, r1, r3
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	43db      	mvns	r3, r3
 80076ee:	68f9      	ldr	r1, [r7, #12]
 80076f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076f4:	4013      	ands	r3, r2
 80076f6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076fe:	69da      	ldr	r2, [r3, #28]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	f003 030f 	and.w	r3, r3, #15
 8007708:	2101      	movs	r1, #1
 800770a:	fa01 f303 	lsl.w	r3, r1, r3
 800770e:	b29b      	uxth	r3, r3
 8007710:	43db      	mvns	r3, r3
 8007712:	68f9      	ldr	r1, [r7, #12]
 8007714:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007718:	4013      	ands	r3, r2
 800771a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	015a      	lsls	r2, r3, #5
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	4413      	add	r3, r2
 8007724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	0159      	lsls	r1, r3, #5
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	440b      	add	r3, r1
 8007732:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007736:	4619      	mov	r1, r3
 8007738:	4b35      	ldr	r3, [pc, #212]	@ (8007810 <USB_DeactivateEndpoint+0x1b0>)
 800773a:	4013      	ands	r3, r2
 800773c:	600b      	str	r3, [r1, #0]
 800773e:	e060      	b.n	8007802 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007752:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007756:	d11f      	bne.n	8007798 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	015a      	lsls	r2, r3, #5
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4413      	add	r3, r2
 8007760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	0151      	lsls	r1, r2, #5
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	440a      	add	r2, r1
 800776e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007772:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007776:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	015a      	lsls	r2, r3, #5
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4413      	add	r3, r2
 8007780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	0151      	lsls	r1, r2, #5
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	440a      	add	r2, r1
 800778e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007792:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007796:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800779e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	f003 030f 	and.w	r3, r3, #15
 80077a8:	2101      	movs	r1, #1
 80077aa:	fa01 f303 	lsl.w	r3, r1, r3
 80077ae:	041b      	lsls	r3, r3, #16
 80077b0:	43db      	mvns	r3, r3
 80077b2:	68f9      	ldr	r1, [r7, #12]
 80077b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077b8:	4013      	ands	r3, r2
 80077ba:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077c2:	69da      	ldr	r2, [r3, #28]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	f003 030f 	and.w	r3, r3, #15
 80077cc:	2101      	movs	r1, #1
 80077ce:	fa01 f303 	lsl.w	r3, r1, r3
 80077d2:	041b      	lsls	r3, r3, #16
 80077d4:	43db      	mvns	r3, r3
 80077d6:	68f9      	ldr	r1, [r7, #12]
 80077d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80077dc:	4013      	ands	r3, r2
 80077de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	0159      	lsls	r1, r3, #5
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	440b      	add	r3, r1
 80077f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077fa:	4619      	mov	r1, r3
 80077fc:	4b05      	ldr	r3, [pc, #20]	@ (8007814 <USB_DeactivateEndpoint+0x1b4>)
 80077fe:	4013      	ands	r3, r2
 8007800:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	ec337800 	.word	0xec337800
 8007814:	eff37800 	.word	0xeff37800

08007818 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b08a      	sub	sp, #40	@ 0x28
 800781c:	af02      	add	r7, sp, #8
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	4613      	mov	r3, r2
 8007824:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	785b      	ldrb	r3, [r3, #1]
 8007834:	2b01      	cmp	r3, #1
 8007836:	f040 817f 	bne.w	8007b38 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d132      	bne.n	80078a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	015a      	lsls	r2, r3, #5
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	4413      	add	r3, r2
 800784a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	69ba      	ldr	r2, [r7, #24]
 8007852:	0151      	lsls	r1, r2, #5
 8007854:	69fa      	ldr	r2, [r7, #28]
 8007856:	440a      	add	r2, r1
 8007858:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800785c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007860:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007864:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	015a      	lsls	r2, r3, #5
 800786a:	69fb      	ldr	r3, [r7, #28]
 800786c:	4413      	add	r3, r2
 800786e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	0151      	lsls	r1, r2, #5
 8007878:	69fa      	ldr	r2, [r7, #28]
 800787a:	440a      	add	r2, r1
 800787c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007880:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007884:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	4413      	add	r3, r2
 800788e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	0151      	lsls	r1, r2, #5
 8007898:	69fa      	ldr	r2, [r7, #28]
 800789a:	440a      	add	r2, r1
 800789c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078a0:	0cdb      	lsrs	r3, r3, #19
 80078a2:	04db      	lsls	r3, r3, #19
 80078a4:	6113      	str	r3, [r2, #16]
 80078a6:	e097      	b.n	80079d8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	69ba      	ldr	r2, [r7, #24]
 80078b8:	0151      	lsls	r1, r2, #5
 80078ba:	69fa      	ldr	r2, [r7, #28]
 80078bc:	440a      	add	r2, r1
 80078be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078c2:	0cdb      	lsrs	r3, r3, #19
 80078c4:	04db      	lsls	r3, r3, #19
 80078c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	015a      	lsls	r2, r3, #5
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	4413      	add	r3, r2
 80078d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	69ba      	ldr	r2, [r7, #24]
 80078d8:	0151      	lsls	r1, r2, #5
 80078da:	69fa      	ldr	r2, [r7, #28]
 80078dc:	440a      	add	r2, r1
 80078de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80078e2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80078e6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80078ea:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d11a      	bne.n	8007928 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	691a      	ldr	r2, [r3, #16]
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d903      	bls.n	8007906 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	689a      	ldr	r2, [r3, #8]
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	4413      	add	r3, r2
 800790e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	69ba      	ldr	r2, [r7, #24]
 8007916:	0151      	lsls	r1, r2, #5
 8007918:	69fa      	ldr	r2, [r7, #28]
 800791a:	440a      	add	r2, r1
 800791c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007920:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007924:	6113      	str	r3, [r2, #16]
 8007926:	e044      	b.n	80079b2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	691a      	ldr	r2, [r3, #16]
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	4413      	add	r3, r2
 8007932:	1e5a      	subs	r2, r3, #1
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	fbb2 f3f3 	udiv	r3, r2, r3
 800793c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	4413      	add	r3, r2
 8007946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800794a:	691a      	ldr	r2, [r3, #16]
 800794c:	8afb      	ldrh	r3, [r7, #22]
 800794e:	04d9      	lsls	r1, r3, #19
 8007950:	4ba4      	ldr	r3, [pc, #656]	@ (8007be4 <USB_EPStartXfer+0x3cc>)
 8007952:	400b      	ands	r3, r1
 8007954:	69b9      	ldr	r1, [r7, #24]
 8007956:	0148      	lsls	r0, r1, #5
 8007958:	69f9      	ldr	r1, [r7, #28]
 800795a:	4401      	add	r1, r0
 800795c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007960:	4313      	orrs	r3, r2
 8007962:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	791b      	ldrb	r3, [r3, #4]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d122      	bne.n	80079b2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	4413      	add	r3, r2
 8007974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	69ba      	ldr	r2, [r7, #24]
 800797c:	0151      	lsls	r1, r2, #5
 800797e:	69fa      	ldr	r2, [r7, #28]
 8007980:	440a      	add	r2, r1
 8007982:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007986:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800798a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007998:	691a      	ldr	r2, [r3, #16]
 800799a:	8afb      	ldrh	r3, [r7, #22]
 800799c:	075b      	lsls	r3, r3, #29
 800799e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80079a2:	69b9      	ldr	r1, [r7, #24]
 80079a4:	0148      	lsls	r0, r1, #5
 80079a6:	69f9      	ldr	r1, [r7, #28]
 80079a8:	4401      	add	r1, r0
 80079aa:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80079ae:	4313      	orrs	r3, r2
 80079b0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	015a      	lsls	r2, r3, #5
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	4413      	add	r3, r2
 80079ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079be:	691a      	ldr	r2, [r3, #16]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079c8:	69b9      	ldr	r1, [r7, #24]
 80079ca:	0148      	lsls	r0, r1, #5
 80079cc:	69f9      	ldr	r1, [r7, #28]
 80079ce:	4401      	add	r1, r0
 80079d0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80079d4:	4313      	orrs	r3, r2
 80079d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80079d8:	79fb      	ldrb	r3, [r7, #7]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d14b      	bne.n	8007a76 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d009      	beq.n	80079fa <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	015a      	lsls	r2, r3, #5
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	4413      	add	r3, r2
 80079ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079f2:	461a      	mov	r2, r3
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	791b      	ldrb	r3, [r3, #4]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d128      	bne.n	8007a54 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d110      	bne.n	8007a34 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	0151      	lsls	r1, r2, #5
 8007a24:	69fa      	ldr	r2, [r7, #28]
 8007a26:	440a      	add	r2, r1
 8007a28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a2c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007a30:	6013      	str	r3, [r2, #0]
 8007a32:	e00f      	b.n	8007a54 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	69ba      	ldr	r2, [r7, #24]
 8007a44:	0151      	lsls	r1, r2, #5
 8007a46:	69fa      	ldr	r2, [r7, #28]
 8007a48:	440a      	add	r2, r1
 8007a4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a52:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	0151      	lsls	r1, r2, #5
 8007a66:	69fa      	ldr	r2, [r7, #28]
 8007a68:	440a      	add	r2, r1
 8007a6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a6e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007a72:	6013      	str	r3, [r2, #0]
 8007a74:	e166      	b.n	8007d44 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	015a      	lsls	r2, r3, #5
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	69ba      	ldr	r2, [r7, #24]
 8007a86:	0151      	lsls	r1, r2, #5
 8007a88:	69fa      	ldr	r2, [r7, #28]
 8007a8a:	440a      	add	r2, r1
 8007a8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007a90:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007a94:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	791b      	ldrb	r3, [r3, #4]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d015      	beq.n	8007aca <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 814e 	beq.w	8007d44 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	f003 030f 	and.w	r3, r3, #15
 8007ab8:	2101      	movs	r1, #1
 8007aba:	fa01 f303 	lsl.w	r3, r1, r3
 8007abe:	69f9      	ldr	r1, [r7, #28]
 8007ac0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	634b      	str	r3, [r1, #52]	@ 0x34
 8007ac8:	e13c      	b.n	8007d44 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d110      	bne.n	8007afc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	015a      	lsls	r2, r3, #5
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	69ba      	ldr	r2, [r7, #24]
 8007aea:	0151      	lsls	r1, r2, #5
 8007aec:	69fa      	ldr	r2, [r7, #28]
 8007aee:	440a      	add	r2, r1
 8007af0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007af4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007af8:	6013      	str	r3, [r2, #0]
 8007afa:	e00f      	b.n	8007b1c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	015a      	lsls	r2, r3, #5
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	4413      	add	r3, r2
 8007b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	0151      	lsls	r1, r2, #5
 8007b0e:	69fa      	ldr	r2, [r7, #28]
 8007b10:	440a      	add	r2, r1
 8007b12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b1a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	68d9      	ldr	r1, [r3, #12]
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	781a      	ldrb	r2, [r3, #0]
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	b298      	uxth	r0, r3
 8007b2a:	79fb      	ldrb	r3, [r7, #7]
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	4603      	mov	r3, r0
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f000 f9b9 	bl	8007ea8 <USB_WritePacket>
 8007b36:	e105      	b.n	8007d44 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	015a      	lsls	r2, r3, #5
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	69ba      	ldr	r2, [r7, #24]
 8007b48:	0151      	lsls	r1, r2, #5
 8007b4a:	69fa      	ldr	r2, [r7, #28]
 8007b4c:	440a      	add	r2, r1
 8007b4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b52:	0cdb      	lsrs	r3, r3, #19
 8007b54:	04db      	lsls	r3, r3, #19
 8007b56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	015a      	lsls	r2, r3, #5
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	4413      	add	r3, r2
 8007b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	69ba      	ldr	r2, [r7, #24]
 8007b68:	0151      	lsls	r1, r2, #5
 8007b6a:	69fa      	ldr	r2, [r7, #28]
 8007b6c:	440a      	add	r2, r1
 8007b6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007b72:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007b76:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007b7a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d132      	bne.n	8007be8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d003      	beq.n	8007b92 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	689a      	ldr	r2, [r3, #8]
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	689a      	ldr	r2, [r3, #8]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	015a      	lsls	r2, r3, #5
 8007b9e:	69fb      	ldr	r3, [r7, #28]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ba6:	691a      	ldr	r2, [r3, #16]
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	6a1b      	ldr	r3, [r3, #32]
 8007bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bb0:	69b9      	ldr	r1, [r7, #24]
 8007bb2:	0148      	lsls	r0, r1, #5
 8007bb4:	69f9      	ldr	r1, [r7, #28]
 8007bb6:	4401      	add	r1, r0
 8007bb8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	015a      	lsls	r2, r3, #5
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	0151      	lsls	r1, r2, #5
 8007bd2:	69fa      	ldr	r2, [r7, #28]
 8007bd4:	440a      	add	r2, r1
 8007bd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007bda:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007bde:	6113      	str	r3, [r2, #16]
 8007be0:	e062      	b.n	8007ca8 <USB_EPStartXfer+0x490>
 8007be2:	bf00      	nop
 8007be4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d123      	bne.n	8007c38 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007bf0:	69bb      	ldr	r3, [r7, #24]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bfc:	691a      	ldr	r2, [r3, #16]
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c06:	69b9      	ldr	r1, [r7, #24]
 8007c08:	0148      	lsls	r0, r1, #5
 8007c0a:	69f9      	ldr	r1, [r7, #28]
 8007c0c:	4401      	add	r1, r0
 8007c0e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007c12:	4313      	orrs	r3, r2
 8007c14:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	015a      	lsls	r2, r3, #5
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	0151      	lsls	r1, r2, #5
 8007c28:	69fa      	ldr	r2, [r7, #28]
 8007c2a:	440a      	add	r2, r1
 8007c2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c30:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c34:	6113      	str	r3, [r2, #16]
 8007c36:	e037      	b.n	8007ca8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	691a      	ldr	r2, [r3, #16]
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	4413      	add	r3, r2
 8007c42:	1e5a      	subs	r2, r3, #1
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c4c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	8afa      	ldrh	r2, [r7, #22]
 8007c54:	fb03 f202 	mul.w	r2, r3, r2
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	015a      	lsls	r2, r3, #5
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	4413      	add	r3, r2
 8007c64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c68:	691a      	ldr	r2, [r3, #16]
 8007c6a:	8afb      	ldrh	r3, [r7, #22]
 8007c6c:	04d9      	lsls	r1, r3, #19
 8007c6e:	4b38      	ldr	r3, [pc, #224]	@ (8007d50 <USB_EPStartXfer+0x538>)
 8007c70:	400b      	ands	r3, r1
 8007c72:	69b9      	ldr	r1, [r7, #24]
 8007c74:	0148      	lsls	r0, r1, #5
 8007c76:	69f9      	ldr	r1, [r7, #28]
 8007c78:	4401      	add	r1, r0
 8007c7a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c8e:	691a      	ldr	r2, [r3, #16]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	6a1b      	ldr	r3, [r3, #32]
 8007c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c98:	69b9      	ldr	r1, [r7, #24]
 8007c9a:	0148      	lsls	r0, r1, #5
 8007c9c:	69f9      	ldr	r1, [r7, #28]
 8007c9e:	4401      	add	r1, r0
 8007ca0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007ca8:	79fb      	ldrb	r3, [r7, #7]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d10d      	bne.n	8007cca <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d009      	beq.n	8007cca <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	68d9      	ldr	r1, [r3, #12]
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	015a      	lsls	r2, r3, #5
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cc6:	460a      	mov	r2, r1
 8007cc8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	791b      	ldrb	r3, [r3, #4]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d128      	bne.n	8007d24 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d110      	bne.n	8007d04 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	015a      	lsls	r2, r3, #5
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	4413      	add	r3, r2
 8007cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	0151      	lsls	r1, r2, #5
 8007cf4:	69fa      	ldr	r2, [r7, #28]
 8007cf6:	440a      	add	r2, r1
 8007cf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cfc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d00:	6013      	str	r3, [r2, #0]
 8007d02:	e00f      	b.n	8007d24 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	69ba      	ldr	r2, [r7, #24]
 8007d14:	0151      	lsls	r1, r2, #5
 8007d16:	69fa      	ldr	r2, [r7, #28]
 8007d18:	440a      	add	r2, r1
 8007d1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d22:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	69fb      	ldr	r3, [r7, #28]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	0151      	lsls	r1, r2, #5
 8007d36:	69fa      	ldr	r2, [r7, #28]
 8007d38:	440a      	add	r2, r1
 8007d3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d3e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007d42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3720      	adds	r7, #32
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	1ff80000 	.word	0x1ff80000

08007d54 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b087      	sub	sp, #28
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d62:	2300      	movs	r3, #0
 8007d64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	785b      	ldrb	r3, [r3, #1]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d14a      	bne.n	8007e08 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d8a:	f040 8086 	bne.w	8007e9a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	7812      	ldrb	r2, [r2, #0]
 8007da2:	0151      	lsls	r1, r2, #5
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	440a      	add	r2, r1
 8007da8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007db0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	683a      	ldr	r2, [r7, #0]
 8007dc4:	7812      	ldrb	r2, [r2, #0]
 8007dc6:	0151      	lsls	r1, r2, #5
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	440a      	add	r2, r1
 8007dcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007dd0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007dd4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d902      	bls.n	8007dec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	75fb      	strb	r3, [r7, #23]
          break;
 8007dea:	e056      	b.n	8007e9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e04:	d0e7      	beq.n	8007dd6 <USB_EPStopXfer+0x82>
 8007e06:	e048      	b.n	8007e9a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	015a      	lsls	r2, r3, #5
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	4413      	add	r3, r2
 8007e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e20:	d13b      	bne.n	8007e9a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	015a      	lsls	r2, r3, #5
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	4413      	add	r3, r2
 8007e2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	7812      	ldrb	r2, [r2, #0]
 8007e36:	0151      	lsls	r1, r2, #5
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	440a      	add	r2, r1
 8007e3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e40:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007e44:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	683a      	ldr	r2, [r7, #0]
 8007e58:	7812      	ldrb	r2, [r2, #0]
 8007e5a:	0151      	lsls	r1, r2, #5
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	440a      	add	r2, r1
 8007e60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d902      	bls.n	8007e80 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	75fb      	strb	r3, [r7, #23]
          break;
 8007e7e:	e00c      	b.n	8007e9a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	015a      	lsls	r2, r3, #5
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e98:	d0e7      	beq.n	8007e6a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	371c      	adds	r7, #28
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b089      	sub	sp, #36	@ 0x24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	4611      	mov	r1, r2
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	71fb      	strb	r3, [r7, #7]
 8007eba:	4613      	mov	r3, r2
 8007ebc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007ec6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d123      	bne.n	8007f16 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007ece:	88bb      	ldrh	r3, [r7, #4]
 8007ed0:	3303      	adds	r3, #3
 8007ed2:	089b      	lsrs	r3, r3, #2
 8007ed4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	61bb      	str	r3, [r7, #24]
 8007eda:	e018      	b.n	8007f0e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007edc:	79fb      	ldrb	r3, [r7, #7]
 8007ede:	031a      	lsls	r2, r3, #12
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ee8:	461a      	mov	r2, r3
 8007eea:	69fb      	ldr	r3, [r7, #28]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	3301      	adds	r3, #1
 8007f00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	3301      	adds	r3, #1
 8007f06:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	61bb      	str	r3, [r7, #24]
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d3e2      	bcc.n	8007edc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3724      	adds	r7, #36	@ 0x24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b08b      	sub	sp, #44	@ 0x2c
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	4613      	mov	r3, r2
 8007f30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007f3a:	88fb      	ldrh	r3, [r7, #6]
 8007f3c:	089b      	lsrs	r3, r3, #2
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007f42:	88fb      	ldrh	r3, [r7, #6]
 8007f44:	f003 0303 	and.w	r3, r3, #3
 8007f48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	623b      	str	r3, [r7, #32]
 8007f4e:	e014      	b.n	8007f7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5e:	3301      	adds	r3, #1
 8007f60:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f64:	3301      	adds	r3, #1
 8007f66:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f70:	3301      	adds	r3, #1
 8007f72:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	3301      	adds	r3, #1
 8007f78:	623b      	str	r3, [r7, #32]
 8007f7a:	6a3a      	ldr	r2, [r7, #32]
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d3e6      	bcc.n	8007f50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f82:	8bfb      	ldrh	r3, [r7, #30]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d01e      	beq.n	8007fc6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007f92:	461a      	mov	r2, r3
 8007f94:	f107 0310 	add.w	r3, r7, #16
 8007f98:	6812      	ldr	r2, [r2, #0]
 8007f9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	6a3b      	ldr	r3, [r7, #32]
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fac:	701a      	strb	r2, [r3, #0]
      i++;
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	623b      	str	r3, [r7, #32]
      pDest++;
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007fba:	8bfb      	ldrh	r3, [r7, #30]
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007fc0:	8bfb      	ldrh	r3, [r7, #30]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1ea      	bne.n	8007f9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	372c      	adds	r7, #44	@ 0x2c
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	785b      	ldrb	r3, [r3, #1]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d12c      	bne.n	800804a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	015a      	lsls	r2, r3, #5
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	db12      	blt.n	8008028 <USB_EPSetStall+0x54>
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00f      	beq.n	8008028 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	4413      	add	r3, r2
 8008010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	0151      	lsls	r1, r2, #5
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	440a      	add	r2, r1
 800801e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008022:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008026:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	015a      	lsls	r2, r3, #5
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	4413      	add	r3, r2
 8008030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	0151      	lsls	r1, r2, #5
 800803a:	68fa      	ldr	r2, [r7, #12]
 800803c:	440a      	add	r2, r1
 800803e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008042:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008046:	6013      	str	r3, [r2, #0]
 8008048:	e02b      	b.n	80080a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	015a      	lsls	r2, r3, #5
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	4413      	add	r3, r2
 8008052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	db12      	blt.n	8008082 <USB_EPSetStall+0xae>
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00f      	beq.n	8008082 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	015a      	lsls	r2, r3, #5
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	4413      	add	r3, r2
 800806a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	0151      	lsls	r1, r2, #5
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	440a      	add	r2, r1
 8008078:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800807c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008080:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	015a      	lsls	r2, r3, #5
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	4413      	add	r3, r2
 800808a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	0151      	lsls	r1, r2, #5
 8008094:	68fa      	ldr	r2, [r7, #12]
 8008096:	440a      	add	r2, r1
 8008098:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800809c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80080a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	785b      	ldrb	r3, [r3, #1]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d128      	bne.n	800811e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	015a      	lsls	r2, r3, #5
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4413      	add	r3, r2
 80080d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	0151      	lsls	r1, r2, #5
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	440a      	add	r2, r1
 80080e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80080ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	791b      	ldrb	r3, [r3, #4]
 80080f0:	2b03      	cmp	r3, #3
 80080f2:	d003      	beq.n	80080fc <USB_EPClearStall+0x4c>
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	791b      	ldrb	r3, [r3, #4]
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d138      	bne.n	800816e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	015a      	lsls	r2, r3, #5
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	4413      	add	r3, r2
 8008104:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	0151      	lsls	r1, r2, #5
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	440a      	add	r2, r1
 8008112:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008116:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800811a:	6013      	str	r3, [r2, #0]
 800811c:	e027      	b.n	800816e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	015a      	lsls	r2, r3, #5
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	4413      	add	r3, r2
 8008126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	0151      	lsls	r1, r2, #5
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	440a      	add	r2, r1
 8008134:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008138:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800813c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	791b      	ldrb	r3, [r3, #4]
 8008142:	2b03      	cmp	r3, #3
 8008144:	d003      	beq.n	800814e <USB_EPClearStall+0x9e>
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	791b      	ldrb	r3, [r3, #4]
 800814a:	2b02      	cmp	r3, #2
 800814c:	d10f      	bne.n	800816e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	0151      	lsls	r1, r2, #5
 8008160:	68fa      	ldr	r2, [r7, #12]
 8008162:	440a      	add	r2, r1
 8008164:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800816c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3714      	adds	r7, #20
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	460b      	mov	r3, r1
 8008186:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800819a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800819e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	78fb      	ldrb	r3, [r7, #3]
 80081aa:	011b      	lsls	r3, r3, #4
 80081ac:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80081b0:	68f9      	ldr	r1, [r7, #12]
 80081b2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081b6:	4313      	orrs	r3, r2
 80081b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3714      	adds	r7, #20
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80081e2:	f023 0303 	bic.w	r3, r3, #3
 80081e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081f6:	f023 0302 	bic.w	r3, r3, #2
 80081fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800820a:	b480      	push	{r7}
 800820c:	b085      	sub	sp, #20
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008224:	f023 0303 	bic.w	r3, r3, #3
 8008228:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008238:	f043 0302 	orr.w	r3, r3, #2
 800823c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800823e:	2300      	movs	r3, #0
}
 8008240:	4618      	mov	r0, r3
 8008242:	3714      	adds	r7, #20
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	695b      	ldr	r3, [r3, #20]
 8008258:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	4013      	ands	r3, r2
 8008262:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008264:	68fb      	ldr	r3, [r7, #12]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008272:	b480      	push	{r7}
 8008274:	b085      	sub	sp, #20
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800828e:	69db      	ldr	r3, [r3, #28]
 8008290:	68ba      	ldr	r2, [r7, #8]
 8008292:	4013      	ands	r3, r2
 8008294:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	0c1b      	lsrs	r3, r3, #16
}
 800829a:	4618      	mov	r0, r3
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b085      	sub	sp, #20
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082c2:	69db      	ldr	r3, [r3, #28]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	4013      	ands	r3, r2
 80082c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	b29b      	uxth	r3, r3
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80082da:	b480      	push	{r7}
 80082dc:	b085      	sub	sp, #20
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	460b      	mov	r3, r1
 80082e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80082ea:	78fb      	ldrb	r3, [r7, #3]
 80082ec:	015a      	lsls	r2, r3, #5
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	4413      	add	r3, r2
 80082f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	4013      	ands	r3, r2
 8008306:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008308:	68bb      	ldr	r3, [r7, #8]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3714      	adds	r7, #20
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr

08008316 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008316:	b480      	push	{r7}
 8008318:	b087      	sub	sp, #28
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	460b      	mov	r3, r1
 8008320:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800832c:	691b      	ldr	r3, [r3, #16]
 800832e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008338:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800833a:	78fb      	ldrb	r3, [r7, #3]
 800833c:	f003 030f 	and.w	r3, r3, #15
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	fa22 f303 	lsr.w	r3, r2, r3
 8008346:	01db      	lsls	r3, r3, #7
 8008348:	b2db      	uxtb	r3, r3
 800834a:	693a      	ldr	r2, [r7, #16]
 800834c:	4313      	orrs	r3, r2
 800834e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008350:	78fb      	ldrb	r3, [r7, #3]
 8008352:	015a      	lsls	r2, r3, #5
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	4413      	add	r3, r2
 8008358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	693a      	ldr	r2, [r7, #16]
 8008360:	4013      	ands	r3, r2
 8008362:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008364:	68bb      	ldr	r3, [r7, #8]
}
 8008366:	4618      	mov	r0, r3
 8008368:	371c      	adds	r7, #28
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr

08008372 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008372:	b480      	push	{r7}
 8008374:	b083      	sub	sp, #12
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	f003 0301 	and.w	r3, r3, #1
}
 8008382:	4618      	mov	r0, r3
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800838e:	b480      	push	{r7}
 8008390:	b085      	sub	sp, #20
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083a8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80083ac:	f023 0307 	bic.w	r3, r3, #7
 80083b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80083c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3714      	adds	r7, #20
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b087      	sub	sp, #28
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	460b      	mov	r3, r1
 80083de:	607a      	str	r2, [r7, #4]
 80083e0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	333c      	adds	r3, #60	@ 0x3c
 80083ea:	3304      	adds	r3, #4
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	4a26      	ldr	r2, [pc, #152]	@ (800848c <USB_EP0_OutStart+0xb8>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d90a      	bls.n	800840e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008404:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008408:	d101      	bne.n	800840e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	e037      	b.n	800847e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008414:	461a      	mov	r2, r3
 8008416:	2300      	movs	r3, #0
 8008418:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008428:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800842c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800843c:	f043 0318 	orr.w	r3, r3, #24
 8008440:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008450:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008454:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008456:	7afb      	ldrb	r3, [r7, #11]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d10f      	bne.n	800847c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008462:	461a      	mov	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008476:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800847a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	371c      	adds	r7, #28
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	4f54300a 	.word	0x4f54300a

08008490 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008498:	2300      	movs	r3, #0
 800849a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	3301      	adds	r3, #1
 80084a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084a8:	d901      	bls.n	80084ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80084aa:	2303      	movs	r3, #3
 80084ac:	e01b      	b.n	80084e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	daf2      	bge.n	800849c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80084b6:	2300      	movs	r3, #0
 80084b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	691b      	ldr	r3, [r3, #16]
 80084be:	f043 0201 	orr.w	r2, r3, #1
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	3301      	adds	r3, #1
 80084ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084d2:	d901      	bls.n	80084d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80084d4:	2303      	movs	r3, #3
 80084d6:	e006      	b.n	80084e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	f003 0301 	and.w	r3, r3, #1
 80084e0:	2b01      	cmp	r3, #1
 80084e2:	d0f0      	beq.n	80084c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3714      	adds	r7, #20
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
	...

080084f4 <Motor_setup_LF>:
char* IN_RF;
char* IN_RB;
char* IN_EXTRA1;
char* IN_EXTRA2;

void Motor_setup_LF(TIM_HandleTypeDef *_TIM_14_CH1 ,TIM_HandleTypeDef *_TIM_5  ,char* _IN_LF){
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
	//Motor_setup_LF(PWM_TIM ,Encoder_TIM   ,IN_LF);

	LF_PWM = _TIM_14_CH1;
 8008500:	4a0f      	ldr	r2, [pc, #60]	@ (8008540 <Motor_setup_LF+0x4c>)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6013      	str	r3, [r2, #0]
	EN_LF      = _TIM_5;
 8008506:	4a0f      	ldr	r2, [pc, #60]	@ (8008544 <Motor_setup_LF+0x50>)
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(LF_PWM, TIM_CHANNEL_1);       //PWM
 800850c:	4b0c      	ldr	r3, [pc, #48]	@ (8008540 <Motor_setup_LF+0x4c>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2100      	movs	r1, #0
 8008512:	4618      	mov	r0, r3
 8008514:	f7fc ff44 	bl	80053a0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_LF , TIM_CHANNEL_ALL);     //Encoder
 8008518:	4b0a      	ldr	r3, [pc, #40]	@ (8008544 <Motor_setup_LF+0x50>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	213c      	movs	r1, #60	@ 0x3c
 800851e:	4618      	mov	r0, r3
 8008520:	f7fd f8ac 	bl	800567c <HAL_TIM_Encoder_Start>

	IN_LF = _IN_LF;
 8008524:	4a08      	ldr	r2, [pc, #32]	@ (8008548 <Motor_setup_LF+0x54>)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6013      	str	r3, [r2, #0]

	DutyCycle_LF_MAX = (LF_PWM->Init.Period);
 800852a:	4b05      	ldr	r3, [pc, #20]	@ (8008540 <Motor_setup_LF+0x4c>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	b21a      	sxth	r2, r3
 8008532:	4b06      	ldr	r3, [pc, #24]	@ (800854c <Motor_setup_LF+0x58>)
 8008534:	801a      	strh	r2, [r3, #0]

}
 8008536:	bf00      	nop
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	20000674 	.word	0x20000674
 8008544:	2000065c 	.word	0x2000065c
 8008548:	20000698 	.word	0x20000698
 800854c:	2000068c 	.word	0x2000068c

08008550 <Motor_setup_LB>:

void Motor_setup_LB(TIM_HandleTypeDef *_TIM_12_CH1 ,TIM_HandleTypeDef *_TIM_1  ,char* _IN_LB){
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
    //Motor_setup_LB(PWM_TIM ,Encoder_TIM  ,IN1_LB ,IN2_LB);

	LB_PWM = _TIM_12_CH1;
 800855c:	4a0f      	ldr	r2, [pc, #60]	@ (800859c <Motor_setup_LB+0x4c>)
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6013      	str	r3, [r2, #0]
	EN_LB      = _TIM_1;
 8008562:	4a0f      	ldr	r2, [pc, #60]	@ (80085a0 <Motor_setup_LB+0x50>)
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(LB_PWM, TIM_CHANNEL_1);       //PWM
 8008568:	4b0c      	ldr	r3, [pc, #48]	@ (800859c <Motor_setup_LB+0x4c>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2100      	movs	r1, #0
 800856e:	4618      	mov	r0, r3
 8008570:	f7fc ff16 	bl	80053a0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_LB , TIM_CHANNEL_ALL);     //Encoder
 8008574:	4b0a      	ldr	r3, [pc, #40]	@ (80085a0 <Motor_setup_LB+0x50>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	213c      	movs	r1, #60	@ 0x3c
 800857a:	4618      	mov	r0, r3
 800857c:	f7fd f87e 	bl	800567c <HAL_TIM_Encoder_Start>

	IN_LB = _IN_LB;
 8008580:	4a08      	ldr	r2, [pc, #32]	@ (80085a4 <Motor_setup_LB+0x54>)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6013      	str	r3, [r2, #0]

	DutyCycle_LB_MAX = (LB_PWM->Init.Period);
 8008586:	4b05      	ldr	r3, [pc, #20]	@ (800859c <Motor_setup_LB+0x4c>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	b21a      	sxth	r2, r3
 800858e:	4b06      	ldr	r3, [pc, #24]	@ (80085a8 <Motor_setup_LB+0x58>)
 8008590:	801a      	strh	r2, [r3, #0]

}
 8008592:	bf00      	nop
 8008594:	3710      	adds	r7, #16
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	20000678 	.word	0x20000678
 80085a0:	20000660 	.word	0x20000660
 80085a4:	2000069c 	.word	0x2000069c
 80085a8:	2000068e 	.word	0x2000068e

080085ac <Motor_setup_RF>:

void Motor_setup_RF(TIM_HandleTypeDef *_TIM_11_CH1  ,TIM_HandleTypeDef *_TIM_8  ,char* _IN_RF){
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	60b9      	str	r1, [r7, #8]
 80085b6:	607a      	str	r2, [r7, #4]
    //Motor_setup_RF(PWM_TIM ,Encoder_TIM   ,IN1_RF ,IN2_RF);

	RF_PWM = _TIM_11_CH1;
 80085b8:	4a0f      	ldr	r2, [pc, #60]	@ (80085f8 <Motor_setup_RF+0x4c>)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6013      	str	r3, [r2, #0]
	EN_RF  = _TIM_8;
 80085be:	4a0f      	ldr	r2, [pc, #60]	@ (80085fc <Motor_setup_RF+0x50>)
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(RF_PWM, TIM_CHANNEL_1);           //PWM
 80085c4:	4b0c      	ldr	r3, [pc, #48]	@ (80085f8 <Motor_setup_RF+0x4c>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2100      	movs	r1, #0
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fc fee8 	bl	80053a0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_RF , TIM_CHANNEL_ALL);     //Encoder
 80085d0:	4b0a      	ldr	r3, [pc, #40]	@ (80085fc <Motor_setup_RF+0x50>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	213c      	movs	r1, #60	@ 0x3c
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fd f850 	bl	800567c <HAL_TIM_Encoder_Start>

	IN_RF = _IN_RF;
 80085dc:	4a08      	ldr	r2, [pc, #32]	@ (8008600 <Motor_setup_RF+0x54>)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6013      	str	r3, [r2, #0]

	DutyCycle_RF_MAX = (RF_PWM->Init.Period);
 80085e2:	4b05      	ldr	r3, [pc, #20]	@ (80085f8 <Motor_setup_RF+0x4c>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	b21a      	sxth	r2, r3
 80085ea:	4b06      	ldr	r3, [pc, #24]	@ (8008604 <Motor_setup_RF+0x58>)
 80085ec:	801a      	strh	r2, [r3, #0]

}
 80085ee:	bf00      	nop
 80085f0:	3710      	adds	r7, #16
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	2000067c 	.word	0x2000067c
 80085fc:	20000664 	.word	0x20000664
 8008600:	200006a0 	.word	0x200006a0
 8008604:	20000690 	.word	0x20000690

08008608 <Motor_setup_RB>:

void Motor_setup_RB(TIM_HandleTypeDef *_TIM_12_CH2   ,TIM_HandleTypeDef *_TIM_4 ,char* _IN_RB){
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	RB_PWM = _TIM_12_CH2;
 8008614:	4a0f      	ldr	r2, [pc, #60]	@ (8008654 <Motor_setup_RB+0x4c>)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6013      	str	r3, [r2, #0]
	EN_RB  = _TIM_4;
 800861a:	4a0f      	ldr	r2, [pc, #60]	@ (8008658 <Motor_setup_RB+0x50>)
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(RB_PWM, TIM_CHANNEL_2);            //PWM
 8008620:	4b0c      	ldr	r3, [pc, #48]	@ (8008654 <Motor_setup_RB+0x4c>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2104      	movs	r1, #4
 8008626:	4618      	mov	r0, r3
 8008628:	f7fc feba 	bl	80053a0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_RB , TIM_CHANNEL_ALL);      //Encoder
 800862c:	4b0a      	ldr	r3, [pc, #40]	@ (8008658 <Motor_setup_RB+0x50>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	213c      	movs	r1, #60	@ 0x3c
 8008632:	4618      	mov	r0, r3
 8008634:	f7fd f822 	bl	800567c <HAL_TIM_Encoder_Start>

	IN_RB = _IN_RB;
 8008638:	4a08      	ldr	r2, [pc, #32]	@ (800865c <Motor_setup_RB+0x54>)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6013      	str	r3, [r2, #0]

	DutyCycle_RB_MAX = (RB_PWM->Init.Period);
 800863e:	4b05      	ldr	r3, [pc, #20]	@ (8008654 <Motor_setup_RB+0x4c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	b21a      	sxth	r2, r3
 8008646:	4b06      	ldr	r3, [pc, #24]	@ (8008660 <Motor_setup_RB+0x58>)
 8008648:	801a      	strh	r2, [r3, #0]

}
 800864a:	bf00      	nop
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	20000680 	.word	0x20000680
 8008658:	20000668 	.word	0x20000668
 800865c:	200006a4 	.word	0x200006a4
 8008660:	20000692 	.word	0x20000692

08008664 <Motor_setup_EXTRA1>:

void Motor_setup_EXTRA1(TIM_HandleTypeDef *_TIM_9_CH1  ,TIM_HandleTypeDef *_TIM_3  ,char* _IN_EXTRA1){
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	EXTRA1_PWM = _TIM_9_CH1;
 8008670:	4a0f      	ldr	r2, [pc, #60]	@ (80086b0 <Motor_setup_EXTRA1+0x4c>)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6013      	str	r3, [r2, #0]
	EN_X  = _TIM_3;
 8008676:	4a0f      	ldr	r2, [pc, #60]	@ (80086b4 <Motor_setup_EXTRA1+0x50>)
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(EXTRA1_PWM, TIM_CHANNEL_1);            //PWM
 800867c:	4b0c      	ldr	r3, [pc, #48]	@ (80086b0 <Motor_setup_EXTRA1+0x4c>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2100      	movs	r1, #0
 8008682:	4618      	mov	r0, r3
 8008684:	f7fc fe8c 	bl	80053a0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_X , TIM_CHANNEL_ALL);      //Encoder
 8008688:	4b0a      	ldr	r3, [pc, #40]	@ (80086b4 <Motor_setup_EXTRA1+0x50>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	213c      	movs	r1, #60	@ 0x3c
 800868e:	4618      	mov	r0, r3
 8008690:	f7fc fff4 	bl	800567c <HAL_TIM_Encoder_Start>

	IN_EXTRA1 = _IN_EXTRA1;
 8008694:	4a08      	ldr	r2, [pc, #32]	@ (80086b8 <Motor_setup_EXTRA1+0x54>)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6013      	str	r3, [r2, #0]

	DutyCycle_EXTRA1_MAX = (EXTRA1_PWM->Init.Period);
 800869a:	4b05      	ldr	r3, [pc, #20]	@ (80086b0 <Motor_setup_EXTRA1+0x4c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	b21a      	sxth	r2, r3
 80086a2:	4b06      	ldr	r3, [pc, #24]	@ (80086bc <Motor_setup_EXTRA1+0x58>)
 80086a4:	801a      	strh	r2, [r3, #0]

}
 80086a6:	bf00      	nop
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	20000684 	.word	0x20000684
 80086b4:	2000066c 	.word	0x2000066c
 80086b8:	200006a8 	.word	0x200006a8
 80086bc:	20000694 	.word	0x20000694

080086c0 <Motor_setup_EXTRA2>:

void Motor_setup_EXTRA2(TIM_HandleTypeDef *_TIM_10_CH1  ,TIM_HandleTypeDef *_TIM_2 ,char* _IN_EXTRA2){
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	EXTRA2_PWM = _TIM_10_CH1;
 80086cc:	4a0f      	ldr	r2, [pc, #60]	@ (800870c <Motor_setup_EXTRA2+0x4c>)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6013      	str	r3, [r2, #0]
	EN_Y  = _TIM_2;
 80086d2:	4a0f      	ldr	r2, [pc, #60]	@ (8008710 <Motor_setup_EXTRA2+0x50>)
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(EXTRA2_PWM, TIM_CHANNEL_1);            //PWM
 80086d8:	4b0c      	ldr	r3, [pc, #48]	@ (800870c <Motor_setup_EXTRA2+0x4c>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2100      	movs	r1, #0
 80086de:	4618      	mov	r0, r3
 80086e0:	f7fc fe5e 	bl	80053a0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_Y , TIM_CHANNEL_ALL);      //Encoder
 80086e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008710 <Motor_setup_EXTRA2+0x50>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	213c      	movs	r1, #60	@ 0x3c
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fc ffc6 	bl	800567c <HAL_TIM_Encoder_Start>

	IN_EXTRA2 = _IN_EXTRA2;
 80086f0:	4a08      	ldr	r2, [pc, #32]	@ (8008714 <Motor_setup_EXTRA2+0x54>)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6013      	str	r3, [r2, #0]

	DutyCycle_EXTRA2_MAX = (EXTRA2_PWM->Init.Period);
 80086f6:	4b05      	ldr	r3, [pc, #20]	@ (800870c <Motor_setup_EXTRA2+0x4c>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68db      	ldr	r3, [r3, #12]
 80086fc:	b21a      	sxth	r2, r3
 80086fe:	4b06      	ldr	r3, [pc, #24]	@ (8008718 <Motor_setup_EXTRA2+0x58>)
 8008700:	801a      	strh	r2, [r3, #0]

}
 8008702:	bf00      	nop
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	20000688 	.word	0x20000688
 8008710:	20000670 	.word	0x20000670
 8008714:	200006ac 	.word	0x200006ac
 8008718:	20000696 	.word	0x20000696

0800871c <getCount>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////PID///////////////////////////////////////////////////////////////

int16_t getCount(TIM_HandleTypeDef *TIM){
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
	int16_t count = ((int16_t)(TIM->Instance->CNT));
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800872a:	81fb      	strh	r3, [r7, #14]

	return count;
 800872c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3714      	adds	r7, #20
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <Setup_CPR>:

float _RPM[6] = {0 ,0 ,0 ,0 ,0 ,0}; //Speed   //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

uint16_t CPR = 68;

void Setup_CPR(uint16_t _CPR){
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	4603      	mov	r3, r0
 8008744:	80fb      	strh	r3, [r7, #6]
	CPR = _CPR;
 8008746:	4a04      	ldr	r2, [pc, #16]	@ (8008758 <Setup_CPR+0x1c>)
 8008748:	88fb      	ldrh	r3, [r7, #6]
 800874a:	8013      	strh	r3, [r2, #0]
}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	20000018 	.word	0x20000018

0800875c <Setup_Gear_Ratio>:

uint16_t Gear_Ratio = 48;

void Setup_Gear_Ratio(uint16_t _Gear_Ratio){
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	4603      	mov	r3, r0
 8008764:	80fb      	strh	r3, [r7, #6]
	Gear_Ratio = _Gear_Ratio;
 8008766:	4a04      	ldr	r2, [pc, #16]	@ (8008778 <Setup_Gear_Ratio+0x1c>)
 8008768:	88fb      	ldrh	r3, [r7, #6]
 800876a:	8013      	strh	r3, [r2, #0]
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr
 8008778:	2000001a 	.word	0x2000001a

0800877c <Setup_frequency_Motor>:

void Setup_frequency_Motor(uint16_t freq){
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	80fb      	strh	r3, [r7, #6]
	_freq = freq;
 8008786:	4a04      	ldr	r2, [pc, #16]	@ (8008798 <Setup_frequency_Motor+0x1c>)
 8008788:	88fb      	ldrh	r3, [r7, #6]
 800878a:	8013      	strh	r3, [r2, #0]
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr
 8008798:	20000016 	.word	0x20000016

0800879c <getRad_s_to_RPM>:
	float Rad_s = RPM * 0.10472f;

	return Rad_s;
}

float getRad_s_to_RPM(float Rad_s){
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	ed87 0a01 	vstr	s0, [r7, #4]
	float RPM__ = Rad_s * 9.549297f;
 80087a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80087aa:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80087cc <getRad_s_to_RPM+0x30>
 80087ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80087b2:	edc7 7a03 	vstr	s15, [r7, #12]

	return RPM__;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	ee07 3a90 	vmov	s15, r3
}
 80087bc:	eeb0 0a67 	vmov.f32	s0, s15
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop
 80087cc:	4118c9ec 	.word	0x4118c9ec

080087d0 <getRPM_TIM_Wheel>:

float getRPM_TIM_Wheel(TIM_HandleTypeDef *TIM ,uint8_t _Wheel){
 80087d0:	b590      	push	{r4, r7, lr}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	70fb      	strb	r3, [r7, #3]
	Present_Count[_Wheel] = (int16_t)getCount(TIM);
 80087dc:	78fc      	ldrb	r4, [r7, #3]
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f7ff ff9c 	bl	800871c <getCount>
 80087e4:	4603      	mov	r3, r0
 80087e6:	461a      	mov	r2, r3
 80087e8:	4b29      	ldr	r3, [pc, #164]	@ (8008890 <getRPM_TIM_Wheel+0xc0>)
 80087ea:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	// V = count/t = count*freq
	_RPM[_Wheel] = (float)((int16_t)(Present_Count[_Wheel] - Past_Count[_Wheel]) * _freq);
 80087ee:	78fb      	ldrb	r3, [r7, #3]
 80087f0:	4a27      	ldr	r2, [pc, #156]	@ (8008890 <getRPM_TIM_Wheel+0xc0>)
 80087f2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	78fb      	ldrb	r3, [r7, #3]
 80087fa:	4926      	ldr	r1, [pc, #152]	@ (8008894 <getRPM_TIM_Wheel+0xc4>)
 80087fc:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8008800:	b29b      	uxth	r3, r3
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	b29b      	uxth	r3, r3
 8008806:	b21b      	sxth	r3, r3
 8008808:	461a      	mov	r2, r3
 800880a:	4b23      	ldr	r3, [pc, #140]	@ (8008898 <getRPM_TIM_Wheel+0xc8>)
 800880c:	881b      	ldrh	r3, [r3, #0]
 800880e:	fb03 f202 	mul.w	r2, r3, r2
 8008812:	78fb      	ldrb	r3, [r7, #3]
 8008814:	ee07 2a90 	vmov	s15, r2
 8008818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800881c:	4a1f      	ldr	r2, [pc, #124]	@ (800889c <getRPM_TIM_Wheel+0xcc>)
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4413      	add	r3, r2
 8008822:	edc3 7a00 	vstr	s15, [r3]
	_RPM[_Wheel] = (float)(((_RPM[_Wheel]* 60.0f)/CPR )/Gear_Ratio);
 8008826:	78fb      	ldrb	r3, [r7, #3]
 8008828:	4a1c      	ldr	r2, [pc, #112]	@ (800889c <getRPM_TIM_Wheel+0xcc>)
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4413      	add	r3, r2
 800882e:	edd3 7a00 	vldr	s15, [r3]
 8008832:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80088a0 <getRPM_TIM_Wheel+0xd0>
 8008836:	ee27 7a87 	vmul.f32	s14, s15, s14
 800883a:	4b1a      	ldr	r3, [pc, #104]	@ (80088a4 <getRPM_TIM_Wheel+0xd4>)
 800883c:	881b      	ldrh	r3, [r3, #0]
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008846:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800884a:	4b17      	ldr	r3, [pc, #92]	@ (80088a8 <getRPM_TIM_Wheel+0xd8>)
 800884c:	881b      	ldrh	r3, [r3, #0]
 800884e:	ee07 3a90 	vmov	s15, r3
 8008852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008856:	78fb      	ldrb	r3, [r7, #3]
 8008858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800885c:	4a0f      	ldr	r2, [pc, #60]	@ (800889c <getRPM_TIM_Wheel+0xcc>)
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	edc3 7a00 	vstr	s15, [r3]

	Past_Count[_Wheel] = Present_Count[_Wheel];
 8008866:	78fa      	ldrb	r2, [r7, #3]
 8008868:	78fb      	ldrb	r3, [r7, #3]
 800886a:	4909      	ldr	r1, [pc, #36]	@ (8008890 <getRPM_TIM_Wheel+0xc0>)
 800886c:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8008870:	4a08      	ldr	r2, [pc, #32]	@ (8008894 <getRPM_TIM_Wheel+0xc4>)
 8008872:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return _RPM[_Wheel];
 8008876:	78fb      	ldrb	r3, [r7, #3]
 8008878:	4a08      	ldr	r2, [pc, #32]	@ (800889c <getRPM_TIM_Wheel+0xcc>)
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4413      	add	r3, r2
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	ee07 3a90 	vmov	s15, r3
}
 8008884:	eeb0 0a67 	vmov.f32	s0, s15
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	bd90      	pop	{r4, r7, pc}
 800888e:	bf00      	nop
 8008890:	200006b0 	.word	0x200006b0
 8008894:	200006bc 	.word	0x200006bc
 8008898:	20000016 	.word	0x20000016
 800889c:	200006c8 	.word	0x200006c8
 80088a0:	42700000 	.word	0x42700000
 80088a4:	20000018 	.word	0x20000018
 80088a8:	2000001a 	.word	0x2000001a

080088ac <Setup_PID_LF>:

float min_speed[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2
float max_speed[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2


void Setup_PID_LF(float Kp_LF ,float Ki_LF ,float Kd_LF ,float min_speed_LF ,float max_speed_LF){
 80088ac:	b480      	push	{r7}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	ed87 0a05 	vstr	s0, [r7, #20]
 80088b6:	edc7 0a04 	vstr	s1, [r7, #16]
 80088ba:	ed87 1a03 	vstr	s2, [r7, #12]
 80088be:	edc7 1a02 	vstr	s3, [r7, #8]
 80088c2:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[0] = Kp_LF;
 80088c6:	4a0a      	ldr	r2, [pc, #40]	@ (80088f0 <Setup_PID_LF+0x44>)
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	6013      	str	r3, [r2, #0]
	Ki_Wheel[0] = Ki_LF;
 80088cc:	4a09      	ldr	r2, [pc, #36]	@ (80088f4 <Setup_PID_LF+0x48>)
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	6013      	str	r3, [r2, #0]
	Kd_Wheel[0] = Kd_LF;
 80088d2:	4a09      	ldr	r2, [pc, #36]	@ (80088f8 <Setup_PID_LF+0x4c>)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6013      	str	r3, [r2, #0]

	min_speed[0] = min_speed_LF;
 80088d8:	4a08      	ldr	r2, [pc, #32]	@ (80088fc <Setup_PID_LF+0x50>)
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	6013      	str	r3, [r2, #0]
	max_speed[0] = max_speed_LF;
 80088de:	4a08      	ldr	r2, [pc, #32]	@ (8008900 <Setup_PID_LF+0x54>)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6013      	str	r3, [r2, #0]
}
 80088e4:	bf00      	nop
 80088e6:	371c      	adds	r7, #28
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	200006e0 	.word	0x200006e0
 80088f4:	200006f8 	.word	0x200006f8
 80088f8:	20000710 	.word	0x20000710
 80088fc:	20000728 	.word	0x20000728
 8008900:	20000740 	.word	0x20000740

08008904 <Setup_PID_LB>:

void Setup_PID_LB(float Kp_LB ,float Ki_LB ,float Kd_LB ,float min_speed_LB ,float max_speed_LB){
 8008904:	b480      	push	{r7}
 8008906:	b087      	sub	sp, #28
 8008908:	af00      	add	r7, sp, #0
 800890a:	ed87 0a05 	vstr	s0, [r7, #20]
 800890e:	edc7 0a04 	vstr	s1, [r7, #16]
 8008912:	ed87 1a03 	vstr	s2, [r7, #12]
 8008916:	edc7 1a02 	vstr	s3, [r7, #8]
 800891a:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[1] = Kp_LB;
 800891e:	4a0a      	ldr	r2, [pc, #40]	@ (8008948 <Setup_PID_LB+0x44>)
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	6053      	str	r3, [r2, #4]
	Ki_Wheel[1] = Ki_LB;
 8008924:	4a09      	ldr	r2, [pc, #36]	@ (800894c <Setup_PID_LB+0x48>)
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	6053      	str	r3, [r2, #4]
	Kd_Wheel[1] = Kd_LB;
 800892a:	4a09      	ldr	r2, [pc, #36]	@ (8008950 <Setup_PID_LB+0x4c>)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6053      	str	r3, [r2, #4]

	min_speed[1] = min_speed_LB;
 8008930:	4a08      	ldr	r2, [pc, #32]	@ (8008954 <Setup_PID_LB+0x50>)
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	6053      	str	r3, [r2, #4]
	max_speed[1] = max_speed_LB;
 8008936:	4a08      	ldr	r2, [pc, #32]	@ (8008958 <Setup_PID_LB+0x54>)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6053      	str	r3, [r2, #4]
}
 800893c:	bf00      	nop
 800893e:	371c      	adds	r7, #28
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr
 8008948:	200006e0 	.word	0x200006e0
 800894c:	200006f8 	.word	0x200006f8
 8008950:	20000710 	.word	0x20000710
 8008954:	20000728 	.word	0x20000728
 8008958:	20000740 	.word	0x20000740

0800895c <Setup_PID_RF>:

void Setup_PID_RF(float Kp_RF ,float Ki_RF ,float Kd_RF ,float min_speed_RF ,float max_speed_RF){
 800895c:	b480      	push	{r7}
 800895e:	b087      	sub	sp, #28
 8008960:	af00      	add	r7, sp, #0
 8008962:	ed87 0a05 	vstr	s0, [r7, #20]
 8008966:	edc7 0a04 	vstr	s1, [r7, #16]
 800896a:	ed87 1a03 	vstr	s2, [r7, #12]
 800896e:	edc7 1a02 	vstr	s3, [r7, #8]
 8008972:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[2] = Kp_RF;
 8008976:	4a0a      	ldr	r2, [pc, #40]	@ (80089a0 <Setup_PID_RF+0x44>)
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	6093      	str	r3, [r2, #8]
	Ki_Wheel[2] = Ki_RF;
 800897c:	4a09      	ldr	r2, [pc, #36]	@ (80089a4 <Setup_PID_RF+0x48>)
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	6093      	str	r3, [r2, #8]
	Kd_Wheel[2] = Kd_RF;
 8008982:	4a09      	ldr	r2, [pc, #36]	@ (80089a8 <Setup_PID_RF+0x4c>)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6093      	str	r3, [r2, #8]

	min_speed[2] = min_speed_RF;
 8008988:	4a08      	ldr	r2, [pc, #32]	@ (80089ac <Setup_PID_RF+0x50>)
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	6093      	str	r3, [r2, #8]
	max_speed[2] = max_speed_RF;
 800898e:	4a08      	ldr	r2, [pc, #32]	@ (80089b0 <Setup_PID_RF+0x54>)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6093      	str	r3, [r2, #8]
}
 8008994:	bf00      	nop
 8008996:	371c      	adds	r7, #28
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr
 80089a0:	200006e0 	.word	0x200006e0
 80089a4:	200006f8 	.word	0x200006f8
 80089a8:	20000710 	.word	0x20000710
 80089ac:	20000728 	.word	0x20000728
 80089b0:	20000740 	.word	0x20000740

080089b4 <Setup_PID_RB>:

void Setup_PID_RB(float Kp_RB ,float Ki_RB ,float Kd_RB ,float min_speed_RB ,float max_speed_RB){
 80089b4:	b480      	push	{r7}
 80089b6:	b087      	sub	sp, #28
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	ed87 0a05 	vstr	s0, [r7, #20]
 80089be:	edc7 0a04 	vstr	s1, [r7, #16]
 80089c2:	ed87 1a03 	vstr	s2, [r7, #12]
 80089c6:	edc7 1a02 	vstr	s3, [r7, #8]
 80089ca:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[3] = Kp_RB;
 80089ce:	4a0a      	ldr	r2, [pc, #40]	@ (80089f8 <Setup_PID_RB+0x44>)
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	60d3      	str	r3, [r2, #12]
	Ki_Wheel[3] = Ki_RB;
 80089d4:	4a09      	ldr	r2, [pc, #36]	@ (80089fc <Setup_PID_RB+0x48>)
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	60d3      	str	r3, [r2, #12]
	Kd_Wheel[3] = Kd_RB;
 80089da:	4a09      	ldr	r2, [pc, #36]	@ (8008a00 <Setup_PID_RB+0x4c>)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	60d3      	str	r3, [r2, #12]

	min_speed[3] = min_speed_RB;
 80089e0:	4a08      	ldr	r2, [pc, #32]	@ (8008a04 <Setup_PID_RB+0x50>)
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	60d3      	str	r3, [r2, #12]
	max_speed[3] = max_speed_RB;
 80089e6:	4a08      	ldr	r2, [pc, #32]	@ (8008a08 <Setup_PID_RB+0x54>)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	60d3      	str	r3, [r2, #12]
}
 80089ec:	bf00      	nop
 80089ee:	371c      	adds	r7, #28
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr
 80089f8:	200006e0 	.word	0x200006e0
 80089fc:	200006f8 	.word	0x200006f8
 8008a00:	20000710 	.word	0x20000710
 8008a04:	20000728 	.word	0x20000728
 8008a08:	20000740 	.word	0x20000740

08008a0c <PID_Speed>:

float Past_Error[6]   = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float Output_PID[6]    = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float PID_Speed(float _Setpoint ,int16_t RPM ,uint8_t _Wheel){
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	ed87 0a01 	vstr	s0, [r7, #4]
 8008a16:	4603      	mov	r3, r0
 8008a18:	460a      	mov	r2, r1
 8008a1a:	807b      	strh	r3, [r7, #2]
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	707b      	strb	r3, [r7, #1]
//	  case 4 : getRPM_TIM_Wheel(EN_X ,EXTRA1 ); break;
//	  case 5 : getRPM_TIM_Wheel(EN_Y ,EXTRA2 ); break;
//	}

//	Error_Speed[_Wheel] = _Setpoint-_RPM[_Wheel];
	Error_Speed[_Wheel] = _Setpoint-RPM;
 8008a20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008a24:	ee07 3a90 	vmov	s15, r3
 8008a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008a2c:	787b      	ldrb	r3, [r7, #1]
 8008a2e:	ed97 7a01 	vldr	s14, [r7, #4]
 8008a32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a36:	4a41      	ldr	r2, [pc, #260]	@ (8008b3c <PID_Speed+0x130>)
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	edc3 7a00 	vstr	s15, [r3]

	Proportional[_Wheel] = Error_Speed[_Wheel];
 8008a40:	787a      	ldrb	r2, [r7, #1]
 8008a42:	787b      	ldrb	r3, [r7, #1]
 8008a44:	493d      	ldr	r1, [pc, #244]	@ (8008b3c <PID_Speed+0x130>)
 8008a46:	0092      	lsls	r2, r2, #2
 8008a48:	440a      	add	r2, r1
 8008a4a:	6812      	ldr	r2, [r2, #0]
 8008a4c:	493c      	ldr	r1, [pc, #240]	@ (8008b40 <PID_Speed+0x134>)
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	440b      	add	r3, r1
 8008a52:	601a      	str	r2, [r3, #0]
	Integnator[_Wheel]   += Error_Speed[_Wheel];
 8008a54:	787b      	ldrb	r3, [r7, #1]
 8008a56:	4a3b      	ldr	r2, [pc, #236]	@ (8008b44 <PID_Speed+0x138>)
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4413      	add	r3, r2
 8008a5c:	ed93 7a00 	vldr	s14, [r3]
 8008a60:	787b      	ldrb	r3, [r7, #1]
 8008a62:	4a36      	ldr	r2, [pc, #216]	@ (8008b3c <PID_Speed+0x130>)
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	edd3 7a00 	vldr	s15, [r3]
 8008a6c:	787b      	ldrb	r3, [r7, #1]
 8008a6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a72:	4a34      	ldr	r2, [pc, #208]	@ (8008b44 <PID_Speed+0x138>)
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	edc3 7a00 	vstr	s15, [r3]
	Derivative[_Wheel]   = Error_Speed[_Wheel] - Past_Error[_Wheel];
 8008a7c:	787b      	ldrb	r3, [r7, #1]
 8008a7e:	4a2f      	ldr	r2, [pc, #188]	@ (8008b3c <PID_Speed+0x130>)
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4413      	add	r3, r2
 8008a84:	ed93 7a00 	vldr	s14, [r3]
 8008a88:	787b      	ldrb	r3, [r7, #1]
 8008a8a:	4a2f      	ldr	r2, [pc, #188]	@ (8008b48 <PID_Speed+0x13c>)
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	edd3 7a00 	vldr	s15, [r3]
 8008a94:	787b      	ldrb	r3, [r7, #1]
 8008a96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a9a:	4a2c      	ldr	r2, [pc, #176]	@ (8008b4c <PID_Speed+0x140>)
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	edc3 7a00 	vstr	s15, [r3]

	Past_Error[_Wheel] = Error_Speed[_Wheel];
 8008aa4:	787a      	ldrb	r2, [r7, #1]
 8008aa6:	787b      	ldrb	r3, [r7, #1]
 8008aa8:	4924      	ldr	r1, [pc, #144]	@ (8008b3c <PID_Speed+0x130>)
 8008aaa:	0092      	lsls	r2, r2, #2
 8008aac:	440a      	add	r2, r1
 8008aae:	6812      	ldr	r2, [r2, #0]
 8008ab0:	4925      	ldr	r1, [pc, #148]	@ (8008b48 <PID_Speed+0x13c>)
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	440b      	add	r3, r1
 8008ab6:	601a      	str	r2, [r3, #0]

	Output_PID[_Wheel]  = (float)((Proportional[_Wheel]*Kp_Wheel[_Wheel]) + (Integnator[_Wheel]*Ki_Wheel[_Wheel]) + (Derivative[_Wheel]*Kd_Wheel[_Wheel]));
 8008ab8:	787b      	ldrb	r3, [r7, #1]
 8008aba:	4a21      	ldr	r2, [pc, #132]	@ (8008b40 <PID_Speed+0x134>)
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4413      	add	r3, r2
 8008ac0:	ed93 7a00 	vldr	s14, [r3]
 8008ac4:	787b      	ldrb	r3, [r7, #1]
 8008ac6:	4a22      	ldr	r2, [pc, #136]	@ (8008b50 <PID_Speed+0x144>)
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	edd3 7a00 	vldr	s15, [r3]
 8008ad0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ad4:	787b      	ldrb	r3, [r7, #1]
 8008ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8008b44 <PID_Speed+0x138>)
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4413      	add	r3, r2
 8008adc:	edd3 6a00 	vldr	s13, [r3]
 8008ae0:	787b      	ldrb	r3, [r7, #1]
 8008ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8008b54 <PID_Speed+0x148>)
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	edd3 7a00 	vldr	s15, [r3]
 8008aec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008af0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008af4:	787b      	ldrb	r3, [r7, #1]
 8008af6:	4a15      	ldr	r2, [pc, #84]	@ (8008b4c <PID_Speed+0x140>)
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	4413      	add	r3, r2
 8008afc:	edd3 6a00 	vldr	s13, [r3]
 8008b00:	787b      	ldrb	r3, [r7, #1]
 8008b02:	4a15      	ldr	r2, [pc, #84]	@ (8008b58 <PID_Speed+0x14c>)
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	4413      	add	r3, r2
 8008b08:	edd3 7a00 	vldr	s15, [r3]
 8008b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008b10:	787b      	ldrb	r3, [r7, #1]
 8008b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b16:	4a11      	ldr	r2, [pc, #68]	@ (8008b5c <PID_Speed+0x150>)
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	edc3 7a00 	vstr	s15, [r3]


	return Output_PID[_Wheel];
 8008b20:	787b      	ldrb	r3, [r7, #1]
 8008b22:	4a0e      	ldr	r2, [pc, #56]	@ (8008b5c <PID_Speed+0x150>)
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	4413      	add	r3, r2
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	ee07 3a90 	vmov	s15, r3
}
 8008b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr
 8008b3c:	20000758 	.word	0x20000758
 8008b40:	20000770 	.word	0x20000770
 8008b44:	20000788 	.word	0x20000788
 8008b48:	200007b8 	.word	0x200007b8
 8008b4c:	200007a0 	.word	0x200007a0
 8008b50:	200006e0 	.word	0x200006e0
 8008b54:	200006f8 	.word	0x200006f8
 8008b58:	20000710 	.word	0x20000710
 8008b5c:	200007d0 	.word	0x200007d0

08008b60 <Motor_DutyCycle_LF>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////Motor////////////////////////////////////////////////////////////////////
void Motor_DutyCycle_LF(int16_t DutyCycle_LF){
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	4603      	mov	r3, r0
 8008b68:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_LF > DutyCycle_LF_MAX) {
 8008b6a:	4b26      	ldr	r3, [pc, #152]	@ (8008c04 <Motor_DutyCycle_LF+0xa4>)
 8008b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b70:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	dd03      	ble.n	8008b80 <Motor_DutyCycle_LF+0x20>
	    DutyCycle_LF = DutyCycle_LF_MAX;
 8008b78:	4b22      	ldr	r3, [pc, #136]	@ (8008c04 <Motor_DutyCycle_LF+0xa4>)
 8008b7a:	881b      	ldrh	r3, [r3, #0]
 8008b7c:	80fb      	strh	r3, [r7, #6]
 8008b7e:	e00e      	b.n	8008b9e <Motor_DutyCycle_LF+0x3e>
	} else if (DutyCycle_LF < -DutyCycle_LF_MAX) {
 8008b80:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008b84:	4b1f      	ldr	r3, [pc, #124]	@ (8008c04 <Motor_DutyCycle_LF+0xa4>)
 8008b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b8a:	425b      	negs	r3, r3
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	da06      	bge.n	8008b9e <Motor_DutyCycle_LF+0x3e>
		DutyCycle_LF = -DutyCycle_LF_MAX;
 8008b90:	4b1c      	ldr	r3, [pc, #112]	@ (8008c04 <Motor_DutyCycle_LF+0xa4>)
 8008b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	425b      	negs	r3, r3
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	80fb      	strh	r3, [r7, #6]
	}

	LF_PWM->Instance->CCR1 = (DutyCycle_LF > 0) ? (int16_t)DutyCycle_LF : (DutyCycle_LF_MAX + (int16_t)DutyCycle_LF);
 8008b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	dd02      	ble.n	8008bac <Motor_DutyCycle_LF+0x4c>
 8008ba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008baa:	e006      	b.n	8008bba <Motor_DutyCycle_LF+0x5a>
 8008bac:	4b15      	ldr	r3, [pc, #84]	@ (8008c04 <Motor_DutyCycle_LF+0xa4>)
 8008bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008bb8:	4413      	add	r3, r2
 8008bba:	4a13      	ldr	r2, [pc, #76]	@ (8008c08 <Motor_DutyCycle_LF+0xa8>)
 8008bbc:	6812      	ldr	r2, [r2, #0]
 8008bbe:	6812      	ldr	r2, [r2, #0]
 8008bc0:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_LF , (DutyCycle_LF < 0) ? 1 : 0);
 8008bc2:	4b12      	ldr	r3, [pc, #72]	@ (8008c0c <Motor_DutyCycle_LF+0xac>)
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008bca:	13db      	asrs	r3, r3, #15
 8008bcc:	b21b      	sxth	r3, r3
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	f003 0301 	and.w	r3, r3, #1
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	4610      	mov	r0, r2
 8008bda:	f000 fba1 	bl	8009320 <digitalWrite>

	if(DutyCycle_LF == 0){
 8008bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d10a      	bne.n	8008bfc <Motor_DutyCycle_LF+0x9c>
	   LF_PWM->Instance->CCR1 = 0;
 8008be6:	4b08      	ldr	r3, [pc, #32]	@ (8008c08 <Motor_DutyCycle_LF+0xa8>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2200      	movs	r2, #0
 8008bee:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_LF ,0);
 8008bf0:	4b06      	ldr	r3, [pc, #24]	@ (8008c0c <Motor_DutyCycle_LF+0xac>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 fb92 	bl	8009320 <digitalWrite>
	}
}
 8008bfc:	bf00      	nop
 8008bfe:	3708      	adds	r7, #8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}
 8008c04:	2000068c 	.word	0x2000068c
 8008c08:	20000674 	.word	0x20000674
 8008c0c:	20000698 	.word	0x20000698

08008c10 <Motor_DutyCycle_LB>:

void Motor_DutyCycle_LB(int16_t DutyCycle_LB){
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	4603      	mov	r3, r0
 8008c18:	80fb      	strh	r3, [r7, #6]
	DutyCycle_LB = -DutyCycle_LB;
 8008c1a:	88fb      	ldrh	r3, [r7, #6]
 8008c1c:	425b      	negs	r3, r3
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_LB > DutyCycle_LB_MAX) {
 8008c22:	4b26      	ldr	r3, [pc, #152]	@ (8008cbc <Motor_DutyCycle_LB+0xac>)
 8008c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c28:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	dd03      	ble.n	8008c38 <Motor_DutyCycle_LB+0x28>
		DutyCycle_LB = DutyCycle_LB_MAX;
 8008c30:	4b22      	ldr	r3, [pc, #136]	@ (8008cbc <Motor_DutyCycle_LB+0xac>)
 8008c32:	881b      	ldrh	r3, [r3, #0]
 8008c34:	80fb      	strh	r3, [r7, #6]
 8008c36:	e00e      	b.n	8008c56 <Motor_DutyCycle_LB+0x46>
	} else if (DutyCycle_LB < -DutyCycle_LB_MAX) {
 8008c38:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8008cbc <Motor_DutyCycle_LB+0xac>)
 8008c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c42:	425b      	negs	r3, r3
 8008c44:	429a      	cmp	r2, r3
 8008c46:	da06      	bge.n	8008c56 <Motor_DutyCycle_LB+0x46>
		DutyCycle_LB = -DutyCycle_LB_MAX;
 8008c48:	4b1c      	ldr	r3, [pc, #112]	@ (8008cbc <Motor_DutyCycle_LB+0xac>)
 8008c4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	425b      	negs	r3, r3
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	80fb      	strh	r3, [r7, #6]
	}

	LB_PWM->Instance->CCR1 = (DutyCycle_LB > 0) ? (int16_t)DutyCycle_LB : (DutyCycle_LB_MAX + (int16_t)DutyCycle_LB);
 8008c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	dd02      	ble.n	8008c64 <Motor_DutyCycle_LB+0x54>
 8008c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c62:	e006      	b.n	8008c72 <Motor_DutyCycle_LB+0x62>
 8008c64:	4b15      	ldr	r3, [pc, #84]	@ (8008cbc <Motor_DutyCycle_LB+0xac>)
 8008c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c70:	4413      	add	r3, r2
 8008c72:	4a13      	ldr	r2, [pc, #76]	@ (8008cc0 <Motor_DutyCycle_LB+0xb0>)
 8008c74:	6812      	ldr	r2, [r2, #0]
 8008c76:	6812      	ldr	r2, [r2, #0]
 8008c78:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_LB , (DutyCycle_LB < 0) ? 1 : 0);
 8008c7a:	4b12      	ldr	r3, [pc, #72]	@ (8008cc4 <Motor_DutyCycle_LB+0xb4>)
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c82:	13db      	asrs	r3, r3, #15
 8008c84:	b21b      	sxth	r3, r3
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	f003 0301 	and.w	r3, r3, #1
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	4619      	mov	r1, r3
 8008c90:	4610      	mov	r0, r2
 8008c92:	f000 fb45 	bl	8009320 <digitalWrite>

	if(DutyCycle_LB == 0){
 8008c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10a      	bne.n	8008cb4 <Motor_DutyCycle_LB+0xa4>
	   LB_PWM->Instance->CCR1 = 0;
 8008c9e:	4b08      	ldr	r3, [pc, #32]	@ (8008cc0 <Motor_DutyCycle_LB+0xb0>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_LB ,0);
 8008ca8:	4b06      	ldr	r3, [pc, #24]	@ (8008cc4 <Motor_DutyCycle_LB+0xb4>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2100      	movs	r1, #0
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f000 fb36 	bl	8009320 <digitalWrite>
	}
}
 8008cb4:	bf00      	nop
 8008cb6:	3708      	adds	r7, #8
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	2000068e 	.word	0x2000068e
 8008cc0:	20000678 	.word	0x20000678
 8008cc4:	2000069c 	.word	0x2000069c

08008cc8 <Motor_DutyCycle_RF>:

void Motor_DutyCycle_RF(int16_t DutyCycle_RF){
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b082      	sub	sp, #8
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	4603      	mov	r3, r0
 8008cd0:	80fb      	strh	r3, [r7, #6]
	DutyCycle_RF = -DutyCycle_RF;
 8008cd2:	88fb      	ldrh	r3, [r7, #6]
 8008cd4:	425b      	negs	r3, r3
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_RF > DutyCycle_RF_MAX) {
 8008cda:	4b26      	ldr	r3, [pc, #152]	@ (8008d74 <Motor_DutyCycle_RF+0xac>)
 8008cdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ce0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	dd03      	ble.n	8008cf0 <Motor_DutyCycle_RF+0x28>
		DutyCycle_RF = DutyCycle_RF_MAX;
 8008ce8:	4b22      	ldr	r3, [pc, #136]	@ (8008d74 <Motor_DutyCycle_RF+0xac>)
 8008cea:	881b      	ldrh	r3, [r3, #0]
 8008cec:	80fb      	strh	r3, [r7, #6]
 8008cee:	e00e      	b.n	8008d0e <Motor_DutyCycle_RF+0x46>
	} else if (DutyCycle_RF < -DutyCycle_RF_MAX) {
 8008cf0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8008d74 <Motor_DutyCycle_RF+0xac>)
 8008cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cfa:	425b      	negs	r3, r3
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	da06      	bge.n	8008d0e <Motor_DutyCycle_RF+0x46>
		DutyCycle_RF = -DutyCycle_RF_MAX;
 8008d00:	4b1c      	ldr	r3, [pc, #112]	@ (8008d74 <Motor_DutyCycle_RF+0xac>)
 8008d02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	425b      	negs	r3, r3
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	80fb      	strh	r3, [r7, #6]
	}

	RF_PWM->Instance->CCR1 = (DutyCycle_RF > 0) ? (int16_t)DutyCycle_RF : (DutyCycle_RF_MAX + (int16_t)DutyCycle_RF);
 8008d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	dd02      	ble.n	8008d1c <Motor_DutyCycle_RF+0x54>
 8008d16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d1a:	e006      	b.n	8008d2a <Motor_DutyCycle_RF+0x62>
 8008d1c:	4b15      	ldr	r3, [pc, #84]	@ (8008d74 <Motor_DutyCycle_RF+0xac>)
 8008d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d22:	461a      	mov	r2, r3
 8008d24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d28:	4413      	add	r3, r2
 8008d2a:	4a13      	ldr	r2, [pc, #76]	@ (8008d78 <Motor_DutyCycle_RF+0xb0>)
 8008d2c:	6812      	ldr	r2, [r2, #0]
 8008d2e:	6812      	ldr	r2, [r2, #0]
 8008d30:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_RF , (DutyCycle_RF < 0) ? 1 : 0);
 8008d32:	4b12      	ldr	r3, [pc, #72]	@ (8008d7c <Motor_DutyCycle_RF+0xb4>)
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d3a:	13db      	asrs	r3, r3, #15
 8008d3c:	b21b      	sxth	r3, r3
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	f003 0301 	and.w	r3, r3, #1
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	4619      	mov	r1, r3
 8008d48:	4610      	mov	r0, r2
 8008d4a:	f000 fae9 	bl	8009320 <digitalWrite>

	if(DutyCycle_RF == 0){
 8008d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10a      	bne.n	8008d6c <Motor_DutyCycle_RF+0xa4>
	   RF_PWM->Instance->CCR1 = 0;
 8008d56:	4b08      	ldr	r3, [pc, #32]	@ (8008d78 <Motor_DutyCycle_RF+0xb0>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_RF ,0);
 8008d60:	4b06      	ldr	r3, [pc, #24]	@ (8008d7c <Motor_DutyCycle_RF+0xb4>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2100      	movs	r1, #0
 8008d66:	4618      	mov	r0, r3
 8008d68:	f000 fada 	bl	8009320 <digitalWrite>
	}
}
 8008d6c:	bf00      	nop
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	20000690 	.word	0x20000690
 8008d78:	2000067c 	.word	0x2000067c
 8008d7c:	200006a0 	.word	0x200006a0

08008d80 <Motor_DutyCycle_RB>:

void Motor_DutyCycle_RB(int16_t DutyCycle_RB){
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	4603      	mov	r3, r0
 8008d88:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_RB > DutyCycle_RB_MAX) {
 8008d8a:	4b26      	ldr	r3, [pc, #152]	@ (8008e24 <Motor_DutyCycle_RB+0xa4>)
 8008d8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d90:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	dd03      	ble.n	8008da0 <Motor_DutyCycle_RB+0x20>
		DutyCycle_RB = DutyCycle_RB_MAX;
 8008d98:	4b22      	ldr	r3, [pc, #136]	@ (8008e24 <Motor_DutyCycle_RB+0xa4>)
 8008d9a:	881b      	ldrh	r3, [r3, #0]
 8008d9c:	80fb      	strh	r3, [r7, #6]
 8008d9e:	e00e      	b.n	8008dbe <Motor_DutyCycle_RB+0x3e>
	} else if (DutyCycle_RB < -DutyCycle_RB_MAX) {
 8008da0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008da4:	4b1f      	ldr	r3, [pc, #124]	@ (8008e24 <Motor_DutyCycle_RB+0xa4>)
 8008da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008daa:	425b      	negs	r3, r3
 8008dac:	429a      	cmp	r2, r3
 8008dae:	da06      	bge.n	8008dbe <Motor_DutyCycle_RB+0x3e>
	    DutyCycle_RB = -DutyCycle_RB_MAX;
 8008db0:	4b1c      	ldr	r3, [pc, #112]	@ (8008e24 <Motor_DutyCycle_RB+0xa4>)
 8008db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	425b      	negs	r3, r3
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	80fb      	strh	r3, [r7, #6]
	}

	RB_PWM->Instance->CCR2 = (DutyCycle_RB > 0) ? (int16_t)DutyCycle_RB : (DutyCycle_RB_MAX + (int16_t)DutyCycle_RB);
 8008dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	dd02      	ble.n	8008dcc <Motor_DutyCycle_RB+0x4c>
 8008dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008dca:	e006      	b.n	8008dda <Motor_DutyCycle_RB+0x5a>
 8008dcc:	4b15      	ldr	r3, [pc, #84]	@ (8008e24 <Motor_DutyCycle_RB+0xa4>)
 8008dce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008dd8:	4413      	add	r3, r2
 8008dda:	4a13      	ldr	r2, [pc, #76]	@ (8008e28 <Motor_DutyCycle_RB+0xa8>)
 8008ddc:	6812      	ldr	r2, [r2, #0]
 8008dde:	6812      	ldr	r2, [r2, #0]
 8008de0:	6393      	str	r3, [r2, #56]	@ 0x38

	digitalWrite(IN_RB , (DutyCycle_RB < 0) ? 1 : 0);
 8008de2:	4b12      	ldr	r3, [pc, #72]	@ (8008e2c <Motor_DutyCycle_RB+0xac>)
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008dea:	13db      	asrs	r3, r3, #15
 8008dec:	b21b      	sxth	r3, r3
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	4619      	mov	r1, r3
 8008df8:	4610      	mov	r0, r2
 8008dfa:	f000 fa91 	bl	8009320 <digitalWrite>

	if(DutyCycle_RB == 0){
 8008dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d10a      	bne.n	8008e1c <Motor_DutyCycle_RB+0x9c>
	    RB_PWM->Instance->CCR2 = 0;
 8008e06:	4b08      	ldr	r3, [pc, #32]	@ (8008e28 <Motor_DutyCycle_RB+0xa8>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	639a      	str	r2, [r3, #56]	@ 0x38
		digitalWrite(IN_RB ,0);
 8008e10:	4b06      	ldr	r3, [pc, #24]	@ (8008e2c <Motor_DutyCycle_RB+0xac>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2100      	movs	r1, #0
 8008e16:	4618      	mov	r0, r3
 8008e18:	f000 fa82 	bl	8009320 <digitalWrite>
	}
}
 8008e1c:	bf00      	nop
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	20000692 	.word	0x20000692
 8008e28:	20000680 	.word	0x20000680
 8008e2c:	200006a4 	.word	0x200006a4

08008e30 <Motor_DutyCycle_EXTRA1>:

void Motor_DutyCycle_EXTRA1(int16_t DutyCycle_EXTRA1){
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	4603      	mov	r3, r0
 8008e38:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_EXTRA1 > DutyCycle_EXTRA1_MAX) {
 8008e3a:	4b26      	ldr	r3, [pc, #152]	@ (8008ed4 <Motor_DutyCycle_EXTRA1+0xa4>)
 8008e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e40:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	dd03      	ble.n	8008e50 <Motor_DutyCycle_EXTRA1+0x20>
		DutyCycle_EXTRA1 = DutyCycle_EXTRA1_MAX;
 8008e48:	4b22      	ldr	r3, [pc, #136]	@ (8008ed4 <Motor_DutyCycle_EXTRA1+0xa4>)
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	80fb      	strh	r3, [r7, #6]
 8008e4e:	e00e      	b.n	8008e6e <Motor_DutyCycle_EXTRA1+0x3e>
	} else if (DutyCycle_EXTRA1 < -DutyCycle_EXTRA1_MAX) {
 8008e50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008e54:	4b1f      	ldr	r3, [pc, #124]	@ (8008ed4 <Motor_DutyCycle_EXTRA1+0xa4>)
 8008e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e5a:	425b      	negs	r3, r3
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	da06      	bge.n	8008e6e <Motor_DutyCycle_EXTRA1+0x3e>
		DutyCycle_EXTRA1 = -DutyCycle_EXTRA1_MAX;
 8008e60:	4b1c      	ldr	r3, [pc, #112]	@ (8008ed4 <Motor_DutyCycle_EXTRA1+0xa4>)
 8008e62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	425b      	negs	r3, r3
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	80fb      	strh	r3, [r7, #6]
	}

	EXTRA1_PWM->Instance->CCR1 = (DutyCycle_EXTRA1 > 0) ? (int16_t)DutyCycle_EXTRA1 : (DutyCycle_EXTRA1_MAX + (int16_t)DutyCycle_EXTRA1);
 8008e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	dd02      	ble.n	8008e7c <Motor_DutyCycle_EXTRA1+0x4c>
 8008e76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e7a:	e006      	b.n	8008e8a <Motor_DutyCycle_EXTRA1+0x5a>
 8008e7c:	4b15      	ldr	r3, [pc, #84]	@ (8008ed4 <Motor_DutyCycle_EXTRA1+0xa4>)
 8008e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e82:	461a      	mov	r2, r3
 8008e84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e88:	4413      	add	r3, r2
 8008e8a:	4a13      	ldr	r2, [pc, #76]	@ (8008ed8 <Motor_DutyCycle_EXTRA1+0xa8>)
 8008e8c:	6812      	ldr	r2, [r2, #0]
 8008e8e:	6812      	ldr	r2, [r2, #0]
 8008e90:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_EXTRA1 , (DutyCycle_EXTRA1 < 0) ? 1 : 0);
 8008e92:	4b12      	ldr	r3, [pc, #72]	@ (8008edc <Motor_DutyCycle_EXTRA1+0xac>)
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e9a:	13db      	asrs	r3, r3, #15
 8008e9c:	b21b      	sxth	r3, r3
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	f003 0301 	and.w	r3, r3, #1
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	4610      	mov	r0, r2
 8008eaa:	f000 fa39 	bl	8009320 <digitalWrite>

	if(DutyCycle_EXTRA1 == 0){
 8008eae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10a      	bne.n	8008ecc <Motor_DutyCycle_EXTRA1+0x9c>
		EXTRA1_PWM->Instance->CCR1 = 0;
 8008eb6:	4b08      	ldr	r3, [pc, #32]	@ (8008ed8 <Motor_DutyCycle_EXTRA1+0xa8>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	635a      	str	r2, [r3, #52]	@ 0x34
	    digitalWrite(IN_EXTRA1 ,0);
 8008ec0:	4b06      	ldr	r3, [pc, #24]	@ (8008edc <Motor_DutyCycle_EXTRA1+0xac>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 fa2a 	bl	8009320 <digitalWrite>
	}
}
 8008ecc:	bf00      	nop
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	20000694 	.word	0x20000694
 8008ed8:	20000684 	.word	0x20000684
 8008edc:	200006a8 	.word	0x200006a8

08008ee0 <Motor_DutyCycle_EXTRA2>:

void Motor_DutyCycle_EXTRA2(int16_t DutyCycle_EXTRA2){
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_EXTRA2 > DutyCycle_EXTRA2_MAX) {
 8008eea:	4b26      	ldr	r3, [pc, #152]	@ (8008f84 <Motor_DutyCycle_EXTRA2+0xa4>)
 8008eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ef0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	dd03      	ble.n	8008f00 <Motor_DutyCycle_EXTRA2+0x20>
		DutyCycle_EXTRA2 = DutyCycle_EXTRA2_MAX;
 8008ef8:	4b22      	ldr	r3, [pc, #136]	@ (8008f84 <Motor_DutyCycle_EXTRA2+0xa4>)
 8008efa:	881b      	ldrh	r3, [r3, #0]
 8008efc:	80fb      	strh	r3, [r7, #6]
 8008efe:	e00e      	b.n	8008f1e <Motor_DutyCycle_EXTRA2+0x3e>
	} else if (DutyCycle_EXTRA2 < -DutyCycle_EXTRA2_MAX) {
 8008f00:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008f04:	4b1f      	ldr	r3, [pc, #124]	@ (8008f84 <Motor_DutyCycle_EXTRA2+0xa4>)
 8008f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f0a:	425b      	negs	r3, r3
 8008f0c:	429a      	cmp	r2, r3
 8008f0e:	da06      	bge.n	8008f1e <Motor_DutyCycle_EXTRA2+0x3e>
		DutyCycle_EXTRA2 = -DutyCycle_EXTRA2_MAX;
 8008f10:	4b1c      	ldr	r3, [pc, #112]	@ (8008f84 <Motor_DutyCycle_EXTRA2+0xa4>)
 8008f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	425b      	negs	r3, r3
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	80fb      	strh	r3, [r7, #6]
	}

	EXTRA2_PWM->Instance->CCR1 = (DutyCycle_EXTRA2 > 0) ? (int16_t)DutyCycle_EXTRA2 : (DutyCycle_EXTRA2_MAX + (int16_t)DutyCycle_EXTRA2);
 8008f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	dd02      	ble.n	8008f2c <Motor_DutyCycle_EXTRA2+0x4c>
 8008f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f2a:	e006      	b.n	8008f3a <Motor_DutyCycle_EXTRA2+0x5a>
 8008f2c:	4b15      	ldr	r3, [pc, #84]	@ (8008f84 <Motor_DutyCycle_EXTRA2+0xa4>)
 8008f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f32:	461a      	mov	r2, r3
 8008f34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f38:	4413      	add	r3, r2
 8008f3a:	4a13      	ldr	r2, [pc, #76]	@ (8008f88 <Motor_DutyCycle_EXTRA2+0xa8>)
 8008f3c:	6812      	ldr	r2, [r2, #0]
 8008f3e:	6812      	ldr	r2, [r2, #0]
 8008f40:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_EXTRA2 , (DutyCycle_EXTRA2 < 0) ? 1 : 0);
 8008f42:	4b12      	ldr	r3, [pc, #72]	@ (8008f8c <Motor_DutyCycle_EXTRA2+0xac>)
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f4a:	13db      	asrs	r3, r3, #15
 8008f4c:	b21b      	sxth	r3, r3
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	f003 0301 	and.w	r3, r3, #1
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	4619      	mov	r1, r3
 8008f58:	4610      	mov	r0, r2
 8008f5a:	f000 f9e1 	bl	8009320 <digitalWrite>

	if(DutyCycle_EXTRA2 == 0){
 8008f5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d10a      	bne.n	8008f7c <Motor_DutyCycle_EXTRA2+0x9c>
	     EXTRA2_PWM->Instance->CCR1 = 0;
 8008f66:	4b08      	ldr	r3, [pc, #32]	@ (8008f88 <Motor_DutyCycle_EXTRA2+0xa8>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	635a      	str	r2, [r3, #52]	@ 0x34
		 digitalWrite(IN_EXTRA2 ,0);
 8008f70:	4b06      	ldr	r3, [pc, #24]	@ (8008f8c <Motor_DutyCycle_EXTRA2+0xac>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2100      	movs	r1, #0
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 f9d2 	bl	8009320 <digitalWrite>
	}
}
 8008f7c:	bf00      	nop
 8008f7e:	3708      	adds	r7, #8
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	20000696 	.word	0x20000696
 8008f88:	20000688 	.word	0x20000688
 8008f8c:	200006ac 	.word	0x200006ac

08008f90 <Motor_Speed_LF>:

int16_t Duty_Cycle[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float Motor_Speed_LF(int16_t RPM_INPUT ,float RPM_LF){
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	4603      	mov	r3, r0
 8008f98:	ed87 0a00 	vstr	s0, [r7]
 8008f9c:	80fb      	strh	r3, [r7, #6]
	if (RPM_LF > max_speed[0]) {
 8008f9e:	4b30      	ldr	r3, [pc, #192]	@ (8009060 <Motor_Speed_LF+0xd0>)
 8008fa0:	edd3 7a00 	vldr	s15, [r3]
 8008fa4:	ed97 7a00 	vldr	s14, [r7]
 8008fa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fb0:	dd03      	ble.n	8008fba <Motor_Speed_LF+0x2a>
	   RPM_LF = max_speed[0];
 8008fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8009060 <Motor_Speed_LF+0xd0>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	603b      	str	r3, [r7, #0]
 8008fb8:	e012      	b.n	8008fe0 <Motor_Speed_LF+0x50>
	} else if (RPM_LF < -max_speed[0]) {
 8008fba:	4b29      	ldr	r3, [pc, #164]	@ (8009060 <Motor_Speed_LF+0xd0>)
 8008fbc:	edd3 7a00 	vldr	s15, [r3]
 8008fc0:	eef1 7a67 	vneg.f32	s15, s15
 8008fc4:	ed97 7a00 	vldr	s14, [r7]
 8008fc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd0:	d506      	bpl.n	8008fe0 <Motor_Speed_LF+0x50>
	   RPM_LF = -max_speed[0];
 8008fd2:	4b23      	ldr	r3, [pc, #140]	@ (8009060 <Motor_Speed_LF+0xd0>)
 8008fd4:	edd3 7a00 	vldr	s15, [r3]
 8008fd8:	eef1 7a67 	vneg.f32	s15, s15
 8008fdc:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_LF , 0);
 8008fe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008fe4:	ee07 3a90 	vmov	s15, r3
 8008fe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008fec:	edd7 7a00 	vldr	s15, [r7]
 8008ff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ff4:	ee17 3a90 	vmov	r3, s15
 8008ff8:	b21b      	sxth	r3, r3
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	eeb0 0a47 	vmov.f32	s0, s14
 8009002:	f7ff fd03 	bl	8008a0c <PID_Speed>

	Duty_Cycle[0] = (int16_t)((Output_PID[0] / ((float)(max_speed[0] - min_speed[0]))) * DutyCycle_LF_MAX);
 8009006:	4b17      	ldr	r3, [pc, #92]	@ (8009064 <Motor_Speed_LF+0xd4>)
 8009008:	edd3 6a00 	vldr	s13, [r3]
 800900c:	4b14      	ldr	r3, [pc, #80]	@ (8009060 <Motor_Speed_LF+0xd0>)
 800900e:	ed93 7a00 	vldr	s14, [r3]
 8009012:	4b15      	ldr	r3, [pc, #84]	@ (8009068 <Motor_Speed_LF+0xd8>)
 8009014:	edd3 7a00 	vldr	s15, [r3]
 8009018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800901c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009020:	4b12      	ldr	r3, [pc, #72]	@ (800906c <Motor_Speed_LF+0xdc>)
 8009022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009026:	ee07 3a90 	vmov	s15, r3
 800902a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800902e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009032:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009036:	ee17 3a90 	vmov	r3, s15
 800903a:	b21a      	sxth	r2, r3
 800903c:	4b0c      	ldr	r3, [pc, #48]	@ (8009070 <Motor_Speed_LF+0xe0>)
 800903e:	801a      	strh	r2, [r3, #0]

	Motor_DutyCycle_LF(Duty_Cycle[0]);
 8009040:	4b0b      	ldr	r3, [pc, #44]	@ (8009070 <Motor_Speed_LF+0xe0>)
 8009042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009046:	4618      	mov	r0, r3
 8009048:	f7ff fd8a 	bl	8008b60 <Motor_DutyCycle_LF>

//	return _RPM[0];
	return Output_PID[0];
 800904c:	4b05      	ldr	r3, [pc, #20]	@ (8009064 <Motor_Speed_LF+0xd4>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	ee07 3a90 	vmov	s15, r3
}
 8009054:	eeb0 0a67 	vmov.f32	s0, s15
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	20000740 	.word	0x20000740
 8009064:	200007d0 	.word	0x200007d0
 8009068:	20000728 	.word	0x20000728
 800906c:	2000068c 	.word	0x2000068c
 8009070:	200007e8 	.word	0x200007e8

08009074 <Motor_Speed_LB>:

float Motor_Speed_LB(int16_t RPM_INPUT ,float RPM_LB){
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	4603      	mov	r3, r0
 800907c:	ed87 0a00 	vstr	s0, [r7]
 8009080:	80fb      	strh	r3, [r7, #6]
	if (RPM_LB > max_speed[1]) {
 8009082:	4b30      	ldr	r3, [pc, #192]	@ (8009144 <Motor_Speed_LB+0xd0>)
 8009084:	edd3 7a01 	vldr	s15, [r3, #4]
 8009088:	ed97 7a00 	vldr	s14, [r7]
 800908c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009094:	dd03      	ble.n	800909e <Motor_Speed_LB+0x2a>
	   RPM_LB = max_speed[1];
 8009096:	4b2b      	ldr	r3, [pc, #172]	@ (8009144 <Motor_Speed_LB+0xd0>)
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	603b      	str	r3, [r7, #0]
 800909c:	e012      	b.n	80090c4 <Motor_Speed_LB+0x50>
	} else if (RPM_LB < -max_speed[1]) {
 800909e:	4b29      	ldr	r3, [pc, #164]	@ (8009144 <Motor_Speed_LB+0xd0>)
 80090a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80090a4:	eef1 7a67 	vneg.f32	s15, s15
 80090a8:	ed97 7a00 	vldr	s14, [r7]
 80090ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090b4:	d506      	bpl.n	80090c4 <Motor_Speed_LB+0x50>
	   RPM_LB = -max_speed[1];
 80090b6:	4b23      	ldr	r3, [pc, #140]	@ (8009144 <Motor_Speed_LB+0xd0>)
 80090b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80090bc:	eef1 7a67 	vneg.f32	s15, s15
 80090c0:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_LB ,1);
 80090c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80090c8:	ee07 3a90 	vmov	s15, r3
 80090cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80090d0:	edd7 7a00 	vldr	s15, [r7]
 80090d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80090d8:	ee17 3a90 	vmov	r3, s15
 80090dc:	b21b      	sxth	r3, r3
 80090de:	2101      	movs	r1, #1
 80090e0:	4618      	mov	r0, r3
 80090e2:	eeb0 0a47 	vmov.f32	s0, s14
 80090e6:	f7ff fc91 	bl	8008a0c <PID_Speed>

	Duty_Cycle[1] = (int16_t)((Output_PID[1]/((float)(max_speed[1] - min_speed[1]))) * DutyCycle_LB_MAX);
 80090ea:	4b17      	ldr	r3, [pc, #92]	@ (8009148 <Motor_Speed_LB+0xd4>)
 80090ec:	edd3 6a01 	vldr	s13, [r3, #4]
 80090f0:	4b14      	ldr	r3, [pc, #80]	@ (8009144 <Motor_Speed_LB+0xd0>)
 80090f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80090f6:	4b15      	ldr	r3, [pc, #84]	@ (800914c <Motor_Speed_LB+0xd8>)
 80090f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80090fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009100:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009104:	4b12      	ldr	r3, [pc, #72]	@ (8009150 <Motor_Speed_LB+0xdc>)
 8009106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800910a:	ee07 3a90 	vmov	s15, r3
 800910e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009116:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800911a:	ee17 3a90 	vmov	r3, s15
 800911e:	b21a      	sxth	r2, r3
 8009120:	4b0c      	ldr	r3, [pc, #48]	@ (8009154 <Motor_Speed_LB+0xe0>)
 8009122:	805a      	strh	r2, [r3, #2]

	Motor_DutyCycle_LB(Duty_Cycle[1]);
 8009124:	4b0b      	ldr	r3, [pc, #44]	@ (8009154 <Motor_Speed_LB+0xe0>)
 8009126:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800912a:	4618      	mov	r0, r3
 800912c:	f7ff fd70 	bl	8008c10 <Motor_DutyCycle_LB>

//	return _RPM[1];
	return Output_PID[1];
 8009130:	4b05      	ldr	r3, [pc, #20]	@ (8009148 <Motor_Speed_LB+0xd4>)
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	ee07 3a90 	vmov	s15, r3
}
 8009138:	eeb0 0a67 	vmov.f32	s0, s15
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	20000740 	.word	0x20000740
 8009148:	200007d0 	.word	0x200007d0
 800914c:	20000728 	.word	0x20000728
 8009150:	2000068e 	.word	0x2000068e
 8009154:	200007e8 	.word	0x200007e8

08009158 <Motor_Speed_RF>:

float Motor_Speed_RF(int16_t RPM_INPUT ,float RPM_RF){
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	4603      	mov	r3, r0
 8009160:	ed87 0a00 	vstr	s0, [r7]
 8009164:	80fb      	strh	r3, [r7, #6]
	if (RPM_RF > max_speed[2]) {
 8009166:	4b30      	ldr	r3, [pc, #192]	@ (8009228 <Motor_Speed_RF+0xd0>)
 8009168:	edd3 7a02 	vldr	s15, [r3, #8]
 800916c:	ed97 7a00 	vldr	s14, [r7]
 8009170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009178:	dd03      	ble.n	8009182 <Motor_Speed_RF+0x2a>
	   RPM_RF = max_speed[2];
 800917a:	4b2b      	ldr	r3, [pc, #172]	@ (8009228 <Motor_Speed_RF+0xd0>)
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	603b      	str	r3, [r7, #0]
 8009180:	e012      	b.n	80091a8 <Motor_Speed_RF+0x50>
	} else if (RPM_RF < -max_speed[2]) {
 8009182:	4b29      	ldr	r3, [pc, #164]	@ (8009228 <Motor_Speed_RF+0xd0>)
 8009184:	edd3 7a02 	vldr	s15, [r3, #8]
 8009188:	eef1 7a67 	vneg.f32	s15, s15
 800918c:	ed97 7a00 	vldr	s14, [r7]
 8009190:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009198:	d506      	bpl.n	80091a8 <Motor_Speed_RF+0x50>
	   RPM_RF = -max_speed[2];
 800919a:	4b23      	ldr	r3, [pc, #140]	@ (8009228 <Motor_Speed_RF+0xd0>)
 800919c:	edd3 7a02 	vldr	s15, [r3, #8]
 80091a0:	eef1 7a67 	vneg.f32	s15, s15
 80091a4:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_RF ,2);
 80091a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80091ac:	ee07 3a90 	vmov	s15, r3
 80091b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80091b4:	edd7 7a00 	vldr	s15, [r7]
 80091b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80091bc:	ee17 3a90 	vmov	r3, s15
 80091c0:	b21b      	sxth	r3, r3
 80091c2:	2102      	movs	r1, #2
 80091c4:	4618      	mov	r0, r3
 80091c6:	eeb0 0a47 	vmov.f32	s0, s14
 80091ca:	f7ff fc1f 	bl	8008a0c <PID_Speed>

	Duty_Cycle[2] = (int16_t)((Output_PID[2]/((float)(max_speed[2] - min_speed[2]))) * DutyCycle_RF_MAX);
 80091ce:	4b17      	ldr	r3, [pc, #92]	@ (800922c <Motor_Speed_RF+0xd4>)
 80091d0:	edd3 6a02 	vldr	s13, [r3, #8]
 80091d4:	4b14      	ldr	r3, [pc, #80]	@ (8009228 <Motor_Speed_RF+0xd0>)
 80091d6:	ed93 7a02 	vldr	s14, [r3, #8]
 80091da:	4b15      	ldr	r3, [pc, #84]	@ (8009230 <Motor_Speed_RF+0xd8>)
 80091dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80091e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091e8:	4b12      	ldr	r3, [pc, #72]	@ (8009234 <Motor_Speed_RF+0xdc>)
 80091ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091ee:	ee07 3a90 	vmov	s15, r3
 80091f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80091fe:	ee17 3a90 	vmov	r3, s15
 8009202:	b21a      	sxth	r2, r3
 8009204:	4b0c      	ldr	r3, [pc, #48]	@ (8009238 <Motor_Speed_RF+0xe0>)
 8009206:	809a      	strh	r2, [r3, #4]

	Motor_DutyCycle_RF(Duty_Cycle[2]);
 8009208:	4b0b      	ldr	r3, [pc, #44]	@ (8009238 <Motor_Speed_RF+0xe0>)
 800920a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800920e:	4618      	mov	r0, r3
 8009210:	f7ff fd5a 	bl	8008cc8 <Motor_DutyCycle_RF>

//	return _RPM[2];
	return Output_PID[2];
 8009214:	4b05      	ldr	r3, [pc, #20]	@ (800922c <Motor_Speed_RF+0xd4>)
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	ee07 3a90 	vmov	s15, r3
}
 800921c:	eeb0 0a67 	vmov.f32	s0, s15
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	20000740 	.word	0x20000740
 800922c:	200007d0 	.word	0x200007d0
 8009230:	20000728 	.word	0x20000728
 8009234:	20000690 	.word	0x20000690
 8009238:	200007e8 	.word	0x200007e8

0800923c <Motor_Speed_RB>:

float Motor_Speed_RB(int16_t RPM_INPUT ,float RPM_RB){
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	4603      	mov	r3, r0
 8009244:	ed87 0a00 	vstr	s0, [r7]
 8009248:	80fb      	strh	r3, [r7, #6]
	if (RPM_RB > max_speed[3]) {
 800924a:	4b30      	ldr	r3, [pc, #192]	@ (800930c <Motor_Speed_RB+0xd0>)
 800924c:	edd3 7a03 	vldr	s15, [r3, #12]
 8009250:	ed97 7a00 	vldr	s14, [r7]
 8009254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800925c:	dd03      	ble.n	8009266 <Motor_Speed_RB+0x2a>
		RPM_RB = max_speed[3];
 800925e:	4b2b      	ldr	r3, [pc, #172]	@ (800930c <Motor_Speed_RB+0xd0>)
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	603b      	str	r3, [r7, #0]
 8009264:	e012      	b.n	800928c <Motor_Speed_RB+0x50>
	} else if (RPM_RB < -max_speed[3]) {
 8009266:	4b29      	ldr	r3, [pc, #164]	@ (800930c <Motor_Speed_RB+0xd0>)
 8009268:	edd3 7a03 	vldr	s15, [r3, #12]
 800926c:	eef1 7a67 	vneg.f32	s15, s15
 8009270:	ed97 7a00 	vldr	s14, [r7]
 8009274:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800927c:	d506      	bpl.n	800928c <Motor_Speed_RB+0x50>
		RPM_RB = -max_speed[3];
 800927e:	4b23      	ldr	r3, [pc, #140]	@ (800930c <Motor_Speed_RB+0xd0>)
 8009280:	edd3 7a03 	vldr	s15, [r3, #12]
 8009284:	eef1 7a67 	vneg.f32	s15, s15
 8009288:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_RB ,3);
 800928c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009290:	ee07 3a90 	vmov	s15, r3
 8009294:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009298:	edd7 7a00 	vldr	s15, [r7]
 800929c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80092a0:	ee17 3a90 	vmov	r3, s15
 80092a4:	b21b      	sxth	r3, r3
 80092a6:	2103      	movs	r1, #3
 80092a8:	4618      	mov	r0, r3
 80092aa:	eeb0 0a47 	vmov.f32	s0, s14
 80092ae:	f7ff fbad 	bl	8008a0c <PID_Speed>

	Duty_Cycle[3] = (int16_t)((Output_PID[3]/((float)(max_speed[3] - min_speed[3]))) * DutyCycle_RB_MAX);
 80092b2:	4b17      	ldr	r3, [pc, #92]	@ (8009310 <Motor_Speed_RB+0xd4>)
 80092b4:	edd3 6a03 	vldr	s13, [r3, #12]
 80092b8:	4b14      	ldr	r3, [pc, #80]	@ (800930c <Motor_Speed_RB+0xd0>)
 80092ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80092be:	4b15      	ldr	r3, [pc, #84]	@ (8009314 <Motor_Speed_RB+0xd8>)
 80092c0:	edd3 7a03 	vldr	s15, [r3, #12]
 80092c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092cc:	4b12      	ldr	r3, [pc, #72]	@ (8009318 <Motor_Speed_RB+0xdc>)
 80092ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80092d2:	ee07 3a90 	vmov	s15, r3
 80092d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80092da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80092e2:	ee17 3a90 	vmov	r3, s15
 80092e6:	b21a      	sxth	r2, r3
 80092e8:	4b0c      	ldr	r3, [pc, #48]	@ (800931c <Motor_Speed_RB+0xe0>)
 80092ea:	80da      	strh	r2, [r3, #6]

	Motor_DutyCycle_RB(Duty_Cycle[3]);
 80092ec:	4b0b      	ldr	r3, [pc, #44]	@ (800931c <Motor_Speed_RB+0xe0>)
 80092ee:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7ff fd44 	bl	8008d80 <Motor_DutyCycle_RB>

//	return _RPM[3];
	return Output_PID[3];
 80092f8:	4b05      	ldr	r3, [pc, #20]	@ (8009310 <Motor_Speed_RB+0xd4>)
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	ee07 3a90 	vmov	s15, r3
}
 8009300:	eeb0 0a67 	vmov.f32	s0, s15
 8009304:	3708      	adds	r7, #8
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	20000740 	.word	0x20000740
 8009310:	200007d0 	.word	0x200007d0
 8009314:	20000728 	.word	0x20000728
 8009318:	20000692 	.word	0x20000692
 800931c:	200007e8 	.word	0x200007e8

08009320 <digitalWrite>:

//	return _RPM[5];
	return Output_PID[5];
}

void digitalWrite(char* _PIN , uint8_t vlue){
 8009320:	b580      	push	{r7, lr}
 8009322:	b084      	sub	sp, #16
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	70fb      	strb	r3, [r7, #3]
	uint8_t PIN = (_PIN[2] - '0') * 10 + (_PIN[3] - '0');
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3302      	adds	r3, #2
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	3b30      	subs	r3, #48	@ 0x30
 8009334:	b2db      	uxtb	r3, r3
 8009336:	461a      	mov	r2, r3
 8009338:	0092      	lsls	r2, r2, #2
 800933a:	4413      	add	r3, r2
 800933c:	005b      	lsls	r3, r3, #1
 800933e:	b2da      	uxtb	r2, r3
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	3303      	adds	r3, #3
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	4413      	add	r3, r2
 8009348:	b2db      	uxtb	r3, r3
 800934a:	3b30      	subs	r3, #48	@ 0x30
 800934c:	73fb      	strb	r3, [r7, #15]

	if (_PIN[1] == 'A') {
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	3301      	adds	r3, #1
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	2b41      	cmp	r3, #65	@ 0x41
 8009356:	f040 809f 	bne.w	8009498 <digitalWrite+0x178>
	        switch (PIN) {
 800935a:	7bfb      	ldrb	r3, [r7, #15]
 800935c:	2b0f      	cmp	r3, #15
 800935e:	f200 833f 	bhi.w	80099e0 <digitalWrite+0x6c0>
 8009362:	a201      	add	r2, pc, #4	@ (adr r2, 8009368 <digitalWrite+0x48>)
 8009364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009368:	080093a9 	.word	0x080093a9
 800936c:	080093b7 	.word	0x080093b7
 8009370:	080093c5 	.word	0x080093c5
 8009374:	080093d3 	.word	0x080093d3
 8009378:	080093e1 	.word	0x080093e1
 800937c:	080093ef 	.word	0x080093ef
 8009380:	080093fd 	.word	0x080093fd
 8009384:	0800940b 	.word	0x0800940b
 8009388:	08009419 	.word	0x08009419
 800938c:	08009429 	.word	0x08009429
 8009390:	08009439 	.word	0x08009439
 8009394:	08009449 	.word	0x08009449
 8009398:	08009459 	.word	0x08009459
 800939c:	08009469 	.word	0x08009469
 80093a0:	08009479 	.word	0x08009479
 80093a4:	08009489 	.word	0x08009489
	            case 0: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, vlue); break;
 80093a8:	78fb      	ldrb	r3, [r7, #3]
 80093aa:	461a      	mov	r2, r3
 80093ac:	2101      	movs	r1, #1
 80093ae:	48bd      	ldr	r0, [pc, #756]	@ (80096a4 <digitalWrite+0x384>)
 80093b0:	f7f9 fe86 	bl	80030c0 <HAL_GPIO_WritePin>
 80093b4:	e314      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, vlue); break;
 80093b6:	78fb      	ldrb	r3, [r7, #3]
 80093b8:	461a      	mov	r2, r3
 80093ba:	2102      	movs	r1, #2
 80093bc:	48b9      	ldr	r0, [pc, #740]	@ (80096a4 <digitalWrite+0x384>)
 80093be:	f7f9 fe7f 	bl	80030c0 <HAL_GPIO_WritePin>
 80093c2:	e30d      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, vlue); break;
 80093c4:	78fb      	ldrb	r3, [r7, #3]
 80093c6:	461a      	mov	r2, r3
 80093c8:	2104      	movs	r1, #4
 80093ca:	48b6      	ldr	r0, [pc, #728]	@ (80096a4 <digitalWrite+0x384>)
 80093cc:	f7f9 fe78 	bl	80030c0 <HAL_GPIO_WritePin>
 80093d0:	e306      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, vlue); break;
 80093d2:	78fb      	ldrb	r3, [r7, #3]
 80093d4:	461a      	mov	r2, r3
 80093d6:	2108      	movs	r1, #8
 80093d8:	48b2      	ldr	r0, [pc, #712]	@ (80096a4 <digitalWrite+0x384>)
 80093da:	f7f9 fe71 	bl	80030c0 <HAL_GPIO_WritePin>
 80093de:	e2ff      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, vlue); break;
 80093e0:	78fb      	ldrb	r3, [r7, #3]
 80093e2:	461a      	mov	r2, r3
 80093e4:	2110      	movs	r1, #16
 80093e6:	48af      	ldr	r0, [pc, #700]	@ (80096a4 <digitalWrite+0x384>)
 80093e8:	f7f9 fe6a 	bl	80030c0 <HAL_GPIO_WritePin>
 80093ec:	e2f8      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, vlue); break;
 80093ee:	78fb      	ldrb	r3, [r7, #3]
 80093f0:	461a      	mov	r2, r3
 80093f2:	2120      	movs	r1, #32
 80093f4:	48ab      	ldr	r0, [pc, #684]	@ (80096a4 <digitalWrite+0x384>)
 80093f6:	f7f9 fe63 	bl	80030c0 <HAL_GPIO_WritePin>
 80093fa:	e2f1      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, vlue); break;
 80093fc:	78fb      	ldrb	r3, [r7, #3]
 80093fe:	461a      	mov	r2, r3
 8009400:	2140      	movs	r1, #64	@ 0x40
 8009402:	48a8      	ldr	r0, [pc, #672]	@ (80096a4 <digitalWrite+0x384>)
 8009404:	f7f9 fe5c 	bl	80030c0 <HAL_GPIO_WritePin>
 8009408:	e2ea      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, vlue); break;
 800940a:	78fb      	ldrb	r3, [r7, #3]
 800940c:	461a      	mov	r2, r3
 800940e:	2180      	movs	r1, #128	@ 0x80
 8009410:	48a4      	ldr	r0, [pc, #656]	@ (80096a4 <digitalWrite+0x384>)
 8009412:	f7f9 fe55 	bl	80030c0 <HAL_GPIO_WritePin>
 8009416:	e2e3      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, vlue); break;
 8009418:	78fb      	ldrb	r3, [r7, #3]
 800941a:	461a      	mov	r2, r3
 800941c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009420:	48a0      	ldr	r0, [pc, #640]	@ (80096a4 <digitalWrite+0x384>)
 8009422:	f7f9 fe4d 	bl	80030c0 <HAL_GPIO_WritePin>
 8009426:	e2db      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, vlue); break;
 8009428:	78fb      	ldrb	r3, [r7, #3]
 800942a:	461a      	mov	r2, r3
 800942c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009430:	489c      	ldr	r0, [pc, #624]	@ (80096a4 <digitalWrite+0x384>)
 8009432:	f7f9 fe45 	bl	80030c0 <HAL_GPIO_WritePin>
 8009436:	e2d3      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, vlue); break;
 8009438:	78fb      	ldrb	r3, [r7, #3]
 800943a:	461a      	mov	r2, r3
 800943c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009440:	4898      	ldr	r0, [pc, #608]	@ (80096a4 <digitalWrite+0x384>)
 8009442:	f7f9 fe3d 	bl	80030c0 <HAL_GPIO_WritePin>
 8009446:	e2cb      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, vlue); break;
 8009448:	78fb      	ldrb	r3, [r7, #3]
 800944a:	461a      	mov	r2, r3
 800944c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009450:	4894      	ldr	r0, [pc, #592]	@ (80096a4 <digitalWrite+0x384>)
 8009452:	f7f9 fe35 	bl	80030c0 <HAL_GPIO_WritePin>
 8009456:	e2c3      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, vlue); break;
 8009458:	78fb      	ldrb	r3, [r7, #3]
 800945a:	461a      	mov	r2, r3
 800945c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009460:	4890      	ldr	r0, [pc, #576]	@ (80096a4 <digitalWrite+0x384>)
 8009462:	f7f9 fe2d 	bl	80030c0 <HAL_GPIO_WritePin>
 8009466:	e2bb      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, vlue); break;
 8009468:	78fb      	ldrb	r3, [r7, #3]
 800946a:	461a      	mov	r2, r3
 800946c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009470:	488c      	ldr	r0, [pc, #560]	@ (80096a4 <digitalWrite+0x384>)
 8009472:	f7f9 fe25 	bl	80030c0 <HAL_GPIO_WritePin>
 8009476:	e2b3      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, vlue); break;
 8009478:	78fb      	ldrb	r3, [r7, #3]
 800947a:	461a      	mov	r2, r3
 800947c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009480:	4888      	ldr	r0, [pc, #544]	@ (80096a4 <digitalWrite+0x384>)
 8009482:	f7f9 fe1d 	bl	80030c0 <HAL_GPIO_WritePin>
 8009486:	e2ab      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, vlue); break;
 8009488:	78fb      	ldrb	r3, [r7, #3]
 800948a:	461a      	mov	r2, r3
 800948c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009490:	4884      	ldr	r0, [pc, #528]	@ (80096a4 <digitalWrite+0x384>)
 8009492:	f7f9 fe15 	bl	80030c0 <HAL_GPIO_WritePin>
 8009496:	e2a3      	b.n	80099e0 <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'B') {
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	3301      	adds	r3, #1
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	2b42      	cmp	r3, #66	@ 0x42
 80094a0:	f040 80a0 	bne.w	80095e4 <digitalWrite+0x2c4>
	        switch (PIN) {
 80094a4:	7bfb      	ldrb	r3, [r7, #15]
 80094a6:	2b0f      	cmp	r3, #15
 80094a8:	f200 829a 	bhi.w	80099e0 <digitalWrite+0x6c0>
 80094ac:	a201      	add	r2, pc, #4	@ (adr r2, 80094b4 <digitalWrite+0x194>)
 80094ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b2:	bf00      	nop
 80094b4:	080094f5 	.word	0x080094f5
 80094b8:	08009503 	.word	0x08009503
 80094bc:	08009511 	.word	0x08009511
 80094c0:	0800951f 	.word	0x0800951f
 80094c4:	0800952d 	.word	0x0800952d
 80094c8:	0800953b 	.word	0x0800953b
 80094cc:	08009549 	.word	0x08009549
 80094d0:	08009557 	.word	0x08009557
 80094d4:	08009565 	.word	0x08009565
 80094d8:	08009575 	.word	0x08009575
 80094dc:	08009585 	.word	0x08009585
 80094e0:	08009595 	.word	0x08009595
 80094e4:	080095a5 	.word	0x080095a5
 80094e8:	080095b5 	.word	0x080095b5
 80094ec:	080095c5 	.word	0x080095c5
 80094f0:	080095d5 	.word	0x080095d5
	            case 0: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, vlue); break;
 80094f4:	78fb      	ldrb	r3, [r7, #3]
 80094f6:	461a      	mov	r2, r3
 80094f8:	2101      	movs	r1, #1
 80094fa:	486b      	ldr	r0, [pc, #428]	@ (80096a8 <digitalWrite+0x388>)
 80094fc:	f7f9 fde0 	bl	80030c0 <HAL_GPIO_WritePin>
 8009500:	e26e      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, vlue); break;
 8009502:	78fb      	ldrb	r3, [r7, #3]
 8009504:	461a      	mov	r2, r3
 8009506:	2102      	movs	r1, #2
 8009508:	4867      	ldr	r0, [pc, #412]	@ (80096a8 <digitalWrite+0x388>)
 800950a:	f7f9 fdd9 	bl	80030c0 <HAL_GPIO_WritePin>
 800950e:	e267      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, vlue); break;
 8009510:	78fb      	ldrb	r3, [r7, #3]
 8009512:	461a      	mov	r2, r3
 8009514:	2104      	movs	r1, #4
 8009516:	4864      	ldr	r0, [pc, #400]	@ (80096a8 <digitalWrite+0x388>)
 8009518:	f7f9 fdd2 	bl	80030c0 <HAL_GPIO_WritePin>
 800951c:	e260      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, vlue); break;
 800951e:	78fb      	ldrb	r3, [r7, #3]
 8009520:	461a      	mov	r2, r3
 8009522:	2108      	movs	r1, #8
 8009524:	4860      	ldr	r0, [pc, #384]	@ (80096a8 <digitalWrite+0x388>)
 8009526:	f7f9 fdcb 	bl	80030c0 <HAL_GPIO_WritePin>
 800952a:	e259      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, vlue); break;
 800952c:	78fb      	ldrb	r3, [r7, #3]
 800952e:	461a      	mov	r2, r3
 8009530:	2110      	movs	r1, #16
 8009532:	485d      	ldr	r0, [pc, #372]	@ (80096a8 <digitalWrite+0x388>)
 8009534:	f7f9 fdc4 	bl	80030c0 <HAL_GPIO_WritePin>
 8009538:	e252      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, vlue); break;
 800953a:	78fb      	ldrb	r3, [r7, #3]
 800953c:	461a      	mov	r2, r3
 800953e:	2120      	movs	r1, #32
 8009540:	4859      	ldr	r0, [pc, #356]	@ (80096a8 <digitalWrite+0x388>)
 8009542:	f7f9 fdbd 	bl	80030c0 <HAL_GPIO_WritePin>
 8009546:	e24b      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, vlue); break;
 8009548:	78fb      	ldrb	r3, [r7, #3]
 800954a:	461a      	mov	r2, r3
 800954c:	2140      	movs	r1, #64	@ 0x40
 800954e:	4856      	ldr	r0, [pc, #344]	@ (80096a8 <digitalWrite+0x388>)
 8009550:	f7f9 fdb6 	bl	80030c0 <HAL_GPIO_WritePin>
 8009554:	e244      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, vlue); break;
 8009556:	78fb      	ldrb	r3, [r7, #3]
 8009558:	461a      	mov	r2, r3
 800955a:	2180      	movs	r1, #128	@ 0x80
 800955c:	4852      	ldr	r0, [pc, #328]	@ (80096a8 <digitalWrite+0x388>)
 800955e:	f7f9 fdaf 	bl	80030c0 <HAL_GPIO_WritePin>
 8009562:	e23d      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, vlue); break;
 8009564:	78fb      	ldrb	r3, [r7, #3]
 8009566:	461a      	mov	r2, r3
 8009568:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800956c:	484e      	ldr	r0, [pc, #312]	@ (80096a8 <digitalWrite+0x388>)
 800956e:	f7f9 fda7 	bl	80030c0 <HAL_GPIO_WritePin>
 8009572:	e235      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, vlue); break;
 8009574:	78fb      	ldrb	r3, [r7, #3]
 8009576:	461a      	mov	r2, r3
 8009578:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800957c:	484a      	ldr	r0, [pc, #296]	@ (80096a8 <digitalWrite+0x388>)
 800957e:	f7f9 fd9f 	bl	80030c0 <HAL_GPIO_WritePin>
 8009582:	e22d      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, vlue); break;
 8009584:	78fb      	ldrb	r3, [r7, #3]
 8009586:	461a      	mov	r2, r3
 8009588:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800958c:	4846      	ldr	r0, [pc, #280]	@ (80096a8 <digitalWrite+0x388>)
 800958e:	f7f9 fd97 	bl	80030c0 <HAL_GPIO_WritePin>
 8009592:	e225      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, vlue); break;
 8009594:	78fb      	ldrb	r3, [r7, #3]
 8009596:	461a      	mov	r2, r3
 8009598:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800959c:	4842      	ldr	r0, [pc, #264]	@ (80096a8 <digitalWrite+0x388>)
 800959e:	f7f9 fd8f 	bl	80030c0 <HAL_GPIO_WritePin>
 80095a2:	e21d      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, vlue); break;
 80095a4:	78fb      	ldrb	r3, [r7, #3]
 80095a6:	461a      	mov	r2, r3
 80095a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80095ac:	483e      	ldr	r0, [pc, #248]	@ (80096a8 <digitalWrite+0x388>)
 80095ae:	f7f9 fd87 	bl	80030c0 <HAL_GPIO_WritePin>
 80095b2:	e215      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, vlue); break;
 80095b4:	78fb      	ldrb	r3, [r7, #3]
 80095b6:	461a      	mov	r2, r3
 80095b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80095bc:	483a      	ldr	r0, [pc, #232]	@ (80096a8 <digitalWrite+0x388>)
 80095be:	f7f9 fd7f 	bl	80030c0 <HAL_GPIO_WritePin>
 80095c2:	e20d      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, vlue); break;
 80095c4:	78fb      	ldrb	r3, [r7, #3]
 80095c6:	461a      	mov	r2, r3
 80095c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80095cc:	4836      	ldr	r0, [pc, #216]	@ (80096a8 <digitalWrite+0x388>)
 80095ce:	f7f9 fd77 	bl	80030c0 <HAL_GPIO_WritePin>
 80095d2:	e205      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, vlue); break;
 80095d4:	78fb      	ldrb	r3, [r7, #3]
 80095d6:	461a      	mov	r2, r3
 80095d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80095dc:	4832      	ldr	r0, [pc, #200]	@ (80096a8 <digitalWrite+0x388>)
 80095de:	f7f9 fd6f 	bl	80030c0 <HAL_GPIO_WritePin>
 80095e2:	e1fd      	b.n	80099e0 <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'C') {
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	3301      	adds	r3, #1
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	2b43      	cmp	r3, #67	@ 0x43
 80095ec:	f040 80a7 	bne.w	800973e <digitalWrite+0x41e>
	        switch (PIN) {
 80095f0:	7bfb      	ldrb	r3, [r7, #15]
 80095f2:	2b0f      	cmp	r3, #15
 80095f4:	f200 81f4 	bhi.w	80099e0 <digitalWrite+0x6c0>
 80095f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009600 <digitalWrite+0x2e0>)
 80095fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095fe:	bf00      	nop
 8009600:	08009641 	.word	0x08009641
 8009604:	0800964f 	.word	0x0800964f
 8009608:	0800965d 	.word	0x0800965d
 800960c:	0800966b 	.word	0x0800966b
 8009610:	08009679 	.word	0x08009679
 8009614:	08009687 	.word	0x08009687
 8009618:	08009695 	.word	0x08009695
 800961c:	080096b1 	.word	0x080096b1
 8009620:	080096bf 	.word	0x080096bf
 8009624:	080096cf 	.word	0x080096cf
 8009628:	080096df 	.word	0x080096df
 800962c:	080096ef 	.word	0x080096ef
 8009630:	080096ff 	.word	0x080096ff
 8009634:	0800970f 	.word	0x0800970f
 8009638:	0800971f 	.word	0x0800971f
 800963c:	0800972f 	.word	0x0800972f
	            case 0: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, vlue); break;
 8009640:	78fb      	ldrb	r3, [r7, #3]
 8009642:	461a      	mov	r2, r3
 8009644:	2101      	movs	r1, #1
 8009646:	4819      	ldr	r0, [pc, #100]	@ (80096ac <digitalWrite+0x38c>)
 8009648:	f7f9 fd3a 	bl	80030c0 <HAL_GPIO_WritePin>
 800964c:	e1c8      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, vlue); break;
 800964e:	78fb      	ldrb	r3, [r7, #3]
 8009650:	461a      	mov	r2, r3
 8009652:	2102      	movs	r1, #2
 8009654:	4815      	ldr	r0, [pc, #84]	@ (80096ac <digitalWrite+0x38c>)
 8009656:	f7f9 fd33 	bl	80030c0 <HAL_GPIO_WritePin>
 800965a:	e1c1      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, vlue); break;
 800965c:	78fb      	ldrb	r3, [r7, #3]
 800965e:	461a      	mov	r2, r3
 8009660:	2104      	movs	r1, #4
 8009662:	4812      	ldr	r0, [pc, #72]	@ (80096ac <digitalWrite+0x38c>)
 8009664:	f7f9 fd2c 	bl	80030c0 <HAL_GPIO_WritePin>
 8009668:	e1ba      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, vlue); break;
 800966a:	78fb      	ldrb	r3, [r7, #3]
 800966c:	461a      	mov	r2, r3
 800966e:	2108      	movs	r1, #8
 8009670:	480e      	ldr	r0, [pc, #56]	@ (80096ac <digitalWrite+0x38c>)
 8009672:	f7f9 fd25 	bl	80030c0 <HAL_GPIO_WritePin>
 8009676:	e1b3      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, vlue); break;
 8009678:	78fb      	ldrb	r3, [r7, #3]
 800967a:	461a      	mov	r2, r3
 800967c:	2110      	movs	r1, #16
 800967e:	480b      	ldr	r0, [pc, #44]	@ (80096ac <digitalWrite+0x38c>)
 8009680:	f7f9 fd1e 	bl	80030c0 <HAL_GPIO_WritePin>
 8009684:	e1ac      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, vlue); break;
 8009686:	78fb      	ldrb	r3, [r7, #3]
 8009688:	461a      	mov	r2, r3
 800968a:	2120      	movs	r1, #32
 800968c:	4807      	ldr	r0, [pc, #28]	@ (80096ac <digitalWrite+0x38c>)
 800968e:	f7f9 fd17 	bl	80030c0 <HAL_GPIO_WritePin>
 8009692:	e1a5      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, vlue); break;
 8009694:	78fb      	ldrb	r3, [r7, #3]
 8009696:	461a      	mov	r2, r3
 8009698:	2140      	movs	r1, #64	@ 0x40
 800969a:	4804      	ldr	r0, [pc, #16]	@ (80096ac <digitalWrite+0x38c>)
 800969c:	f7f9 fd10 	bl	80030c0 <HAL_GPIO_WritePin>
 80096a0:	e19e      	b.n	80099e0 <digitalWrite+0x6c0>
 80096a2:	bf00      	nop
 80096a4:	40020000 	.word	0x40020000
 80096a8:	40020400 	.word	0x40020400
 80096ac:	40020800 	.word	0x40020800
	            case 7: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, vlue); break;
 80096b0:	78fb      	ldrb	r3, [r7, #3]
 80096b2:	461a      	mov	r2, r3
 80096b4:	2180      	movs	r1, #128	@ 0x80
 80096b6:	48bb      	ldr	r0, [pc, #748]	@ (80099a4 <digitalWrite+0x684>)
 80096b8:	f7f9 fd02 	bl	80030c0 <HAL_GPIO_WritePin>
 80096bc:	e190      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, vlue); break;
 80096be:	78fb      	ldrb	r3, [r7, #3]
 80096c0:	461a      	mov	r2, r3
 80096c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80096c6:	48b7      	ldr	r0, [pc, #732]	@ (80099a4 <digitalWrite+0x684>)
 80096c8:	f7f9 fcfa 	bl	80030c0 <HAL_GPIO_WritePin>
 80096cc:	e188      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, vlue); break;
 80096ce:	78fb      	ldrb	r3, [r7, #3]
 80096d0:	461a      	mov	r2, r3
 80096d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80096d6:	48b3      	ldr	r0, [pc, #716]	@ (80099a4 <digitalWrite+0x684>)
 80096d8:	f7f9 fcf2 	bl	80030c0 <HAL_GPIO_WritePin>
 80096dc:	e180      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, vlue); break;
 80096de:	78fb      	ldrb	r3, [r7, #3]
 80096e0:	461a      	mov	r2, r3
 80096e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80096e6:	48af      	ldr	r0, [pc, #700]	@ (80099a4 <digitalWrite+0x684>)
 80096e8:	f7f9 fcea 	bl	80030c0 <HAL_GPIO_WritePin>
 80096ec:	e178      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, vlue); break;
 80096ee:	78fb      	ldrb	r3, [r7, #3]
 80096f0:	461a      	mov	r2, r3
 80096f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80096f6:	48ab      	ldr	r0, [pc, #684]	@ (80099a4 <digitalWrite+0x684>)
 80096f8:	f7f9 fce2 	bl	80030c0 <HAL_GPIO_WritePin>
 80096fc:	e170      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, vlue); break;
 80096fe:	78fb      	ldrb	r3, [r7, #3]
 8009700:	461a      	mov	r2, r3
 8009702:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009706:	48a7      	ldr	r0, [pc, #668]	@ (80099a4 <digitalWrite+0x684>)
 8009708:	f7f9 fcda 	bl	80030c0 <HAL_GPIO_WritePin>
 800970c:	e168      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, vlue); break;
 800970e:	78fb      	ldrb	r3, [r7, #3]
 8009710:	461a      	mov	r2, r3
 8009712:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009716:	48a3      	ldr	r0, [pc, #652]	@ (80099a4 <digitalWrite+0x684>)
 8009718:	f7f9 fcd2 	bl	80030c0 <HAL_GPIO_WritePin>
 800971c:	e160      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, vlue); break;
 800971e:	78fb      	ldrb	r3, [r7, #3]
 8009720:	461a      	mov	r2, r3
 8009722:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009726:	489f      	ldr	r0, [pc, #636]	@ (80099a4 <digitalWrite+0x684>)
 8009728:	f7f9 fcca 	bl	80030c0 <HAL_GPIO_WritePin>
 800972c:	e158      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, vlue); break;
 800972e:	78fb      	ldrb	r3, [r7, #3]
 8009730:	461a      	mov	r2, r3
 8009732:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009736:	489b      	ldr	r0, [pc, #620]	@ (80099a4 <digitalWrite+0x684>)
 8009738:	f7f9 fcc2 	bl	80030c0 <HAL_GPIO_WritePin>
 800973c:	e150      	b.n	80099e0 <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'D') {
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	3301      	adds	r3, #1
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	2b44      	cmp	r3, #68	@ 0x44
 8009746:	f040 809f 	bne.w	8009888 <digitalWrite+0x568>
	        switch (PIN) {
 800974a:	7bfb      	ldrb	r3, [r7, #15]
 800974c:	2b0f      	cmp	r3, #15
 800974e:	f200 8147 	bhi.w	80099e0 <digitalWrite+0x6c0>
 8009752:	a201      	add	r2, pc, #4	@ (adr r2, 8009758 <digitalWrite+0x438>)
 8009754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009758:	08009799 	.word	0x08009799
 800975c:	080097a7 	.word	0x080097a7
 8009760:	080097b5 	.word	0x080097b5
 8009764:	080097c3 	.word	0x080097c3
 8009768:	080097d1 	.word	0x080097d1
 800976c:	080097df 	.word	0x080097df
 8009770:	080097ed 	.word	0x080097ed
 8009774:	080097fb 	.word	0x080097fb
 8009778:	08009809 	.word	0x08009809
 800977c:	08009819 	.word	0x08009819
 8009780:	08009829 	.word	0x08009829
 8009784:	08009839 	.word	0x08009839
 8009788:	08009849 	.word	0x08009849
 800978c:	08009859 	.word	0x08009859
 8009790:	08009869 	.word	0x08009869
 8009794:	08009879 	.word	0x08009879
	            case 0: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, vlue); break;
 8009798:	78fb      	ldrb	r3, [r7, #3]
 800979a:	461a      	mov	r2, r3
 800979c:	2101      	movs	r1, #1
 800979e:	4882      	ldr	r0, [pc, #520]	@ (80099a8 <digitalWrite+0x688>)
 80097a0:	f7f9 fc8e 	bl	80030c0 <HAL_GPIO_WritePin>
 80097a4:	e11c      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, vlue); break;
 80097a6:	78fb      	ldrb	r3, [r7, #3]
 80097a8:	461a      	mov	r2, r3
 80097aa:	2102      	movs	r1, #2
 80097ac:	487e      	ldr	r0, [pc, #504]	@ (80099a8 <digitalWrite+0x688>)
 80097ae:	f7f9 fc87 	bl	80030c0 <HAL_GPIO_WritePin>
 80097b2:	e115      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, vlue); break;
 80097b4:	78fb      	ldrb	r3, [r7, #3]
 80097b6:	461a      	mov	r2, r3
 80097b8:	2104      	movs	r1, #4
 80097ba:	487b      	ldr	r0, [pc, #492]	@ (80099a8 <digitalWrite+0x688>)
 80097bc:	f7f9 fc80 	bl	80030c0 <HAL_GPIO_WritePin>
 80097c0:	e10e      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, vlue); break;
 80097c2:	78fb      	ldrb	r3, [r7, #3]
 80097c4:	461a      	mov	r2, r3
 80097c6:	2108      	movs	r1, #8
 80097c8:	4877      	ldr	r0, [pc, #476]	@ (80099a8 <digitalWrite+0x688>)
 80097ca:	f7f9 fc79 	bl	80030c0 <HAL_GPIO_WritePin>
 80097ce:	e107      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, vlue); break;
 80097d0:	78fb      	ldrb	r3, [r7, #3]
 80097d2:	461a      	mov	r2, r3
 80097d4:	2110      	movs	r1, #16
 80097d6:	4874      	ldr	r0, [pc, #464]	@ (80099a8 <digitalWrite+0x688>)
 80097d8:	f7f9 fc72 	bl	80030c0 <HAL_GPIO_WritePin>
 80097dc:	e100      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, vlue); break;
 80097de:	78fb      	ldrb	r3, [r7, #3]
 80097e0:	461a      	mov	r2, r3
 80097e2:	2120      	movs	r1, #32
 80097e4:	4870      	ldr	r0, [pc, #448]	@ (80099a8 <digitalWrite+0x688>)
 80097e6:	f7f9 fc6b 	bl	80030c0 <HAL_GPIO_WritePin>
 80097ea:	e0f9      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, vlue); break;
 80097ec:	78fb      	ldrb	r3, [r7, #3]
 80097ee:	461a      	mov	r2, r3
 80097f0:	2140      	movs	r1, #64	@ 0x40
 80097f2:	486d      	ldr	r0, [pc, #436]	@ (80099a8 <digitalWrite+0x688>)
 80097f4:	f7f9 fc64 	bl	80030c0 <HAL_GPIO_WritePin>
 80097f8:	e0f2      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, vlue); break;
 80097fa:	78fb      	ldrb	r3, [r7, #3]
 80097fc:	461a      	mov	r2, r3
 80097fe:	2180      	movs	r1, #128	@ 0x80
 8009800:	4869      	ldr	r0, [pc, #420]	@ (80099a8 <digitalWrite+0x688>)
 8009802:	f7f9 fc5d 	bl	80030c0 <HAL_GPIO_WritePin>
 8009806:	e0eb      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, vlue); break;
 8009808:	78fb      	ldrb	r3, [r7, #3]
 800980a:	461a      	mov	r2, r3
 800980c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009810:	4865      	ldr	r0, [pc, #404]	@ (80099a8 <digitalWrite+0x688>)
 8009812:	f7f9 fc55 	bl	80030c0 <HAL_GPIO_WritePin>
 8009816:	e0e3      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, vlue); break;
 8009818:	78fb      	ldrb	r3, [r7, #3]
 800981a:	461a      	mov	r2, r3
 800981c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009820:	4861      	ldr	r0, [pc, #388]	@ (80099a8 <digitalWrite+0x688>)
 8009822:	f7f9 fc4d 	bl	80030c0 <HAL_GPIO_WritePin>
 8009826:	e0db      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, vlue); break;
 8009828:	78fb      	ldrb	r3, [r7, #3]
 800982a:	461a      	mov	r2, r3
 800982c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009830:	485d      	ldr	r0, [pc, #372]	@ (80099a8 <digitalWrite+0x688>)
 8009832:	f7f9 fc45 	bl	80030c0 <HAL_GPIO_WritePin>
 8009836:	e0d3      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, vlue); break;
 8009838:	78fb      	ldrb	r3, [r7, #3]
 800983a:	461a      	mov	r2, r3
 800983c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009840:	4859      	ldr	r0, [pc, #356]	@ (80099a8 <digitalWrite+0x688>)
 8009842:	f7f9 fc3d 	bl	80030c0 <HAL_GPIO_WritePin>
 8009846:	e0cb      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, vlue); break;
 8009848:	78fb      	ldrb	r3, [r7, #3]
 800984a:	461a      	mov	r2, r3
 800984c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009850:	4855      	ldr	r0, [pc, #340]	@ (80099a8 <digitalWrite+0x688>)
 8009852:	f7f9 fc35 	bl	80030c0 <HAL_GPIO_WritePin>
 8009856:	e0c3      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, vlue); break;
 8009858:	78fb      	ldrb	r3, [r7, #3]
 800985a:	461a      	mov	r2, r3
 800985c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009860:	4851      	ldr	r0, [pc, #324]	@ (80099a8 <digitalWrite+0x688>)
 8009862:	f7f9 fc2d 	bl	80030c0 <HAL_GPIO_WritePin>
 8009866:	e0bb      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, vlue); break;
 8009868:	78fb      	ldrb	r3, [r7, #3]
 800986a:	461a      	mov	r2, r3
 800986c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009870:	484d      	ldr	r0, [pc, #308]	@ (80099a8 <digitalWrite+0x688>)
 8009872:	f7f9 fc25 	bl	80030c0 <HAL_GPIO_WritePin>
 8009876:	e0b3      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, vlue); break;
 8009878:	78fb      	ldrb	r3, [r7, #3]
 800987a:	461a      	mov	r2, r3
 800987c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009880:	4849      	ldr	r0, [pc, #292]	@ (80099a8 <digitalWrite+0x688>)
 8009882:	f7f9 fc1d 	bl	80030c0 <HAL_GPIO_WritePin>
 8009886:	e0ab      	b.n	80099e0 <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'E') {
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	3301      	adds	r3, #1
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	2b45      	cmp	r3, #69	@ 0x45
 8009890:	f040 80a6 	bne.w	80099e0 <digitalWrite+0x6c0>
	        switch (PIN) {
 8009894:	7bfb      	ldrb	r3, [r7, #15]
 8009896:	2b0f      	cmp	r3, #15
 8009898:	f200 80a2 	bhi.w	80099e0 <digitalWrite+0x6c0>
 800989c:	a201      	add	r2, pc, #4	@ (adr r2, 80098a4 <digitalWrite+0x584>)
 800989e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a2:	bf00      	nop
 80098a4:	080098e5 	.word	0x080098e5
 80098a8:	080098f3 	.word	0x080098f3
 80098ac:	08009901 	.word	0x08009901
 80098b0:	0800990f 	.word	0x0800990f
 80098b4:	0800991d 	.word	0x0800991d
 80098b8:	0800992b 	.word	0x0800992b
 80098bc:	08009939 	.word	0x08009939
 80098c0:	08009947 	.word	0x08009947
 80098c4:	08009955 	.word	0x08009955
 80098c8:	08009965 	.word	0x08009965
 80098cc:	08009975 	.word	0x08009975
 80098d0:	08009985 	.word	0x08009985
 80098d4:	08009995 	.word	0x08009995
 80098d8:	080099b1 	.word	0x080099b1
 80098dc:	080099c1 	.word	0x080099c1
 80098e0:	080099d1 	.word	0x080099d1
	            case 0: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, vlue); break;
 80098e4:	78fb      	ldrb	r3, [r7, #3]
 80098e6:	461a      	mov	r2, r3
 80098e8:	2101      	movs	r1, #1
 80098ea:	4830      	ldr	r0, [pc, #192]	@ (80099ac <digitalWrite+0x68c>)
 80098ec:	f7f9 fbe8 	bl	80030c0 <HAL_GPIO_WritePin>
 80098f0:	e076      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, vlue); break;
 80098f2:	78fb      	ldrb	r3, [r7, #3]
 80098f4:	461a      	mov	r2, r3
 80098f6:	2102      	movs	r1, #2
 80098f8:	482c      	ldr	r0, [pc, #176]	@ (80099ac <digitalWrite+0x68c>)
 80098fa:	f7f9 fbe1 	bl	80030c0 <HAL_GPIO_WritePin>
 80098fe:	e06f      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, vlue); break;
 8009900:	78fb      	ldrb	r3, [r7, #3]
 8009902:	461a      	mov	r2, r3
 8009904:	2104      	movs	r1, #4
 8009906:	4829      	ldr	r0, [pc, #164]	@ (80099ac <digitalWrite+0x68c>)
 8009908:	f7f9 fbda 	bl	80030c0 <HAL_GPIO_WritePin>
 800990c:	e068      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, vlue); break;
 800990e:	78fb      	ldrb	r3, [r7, #3]
 8009910:	461a      	mov	r2, r3
 8009912:	2108      	movs	r1, #8
 8009914:	4825      	ldr	r0, [pc, #148]	@ (80099ac <digitalWrite+0x68c>)
 8009916:	f7f9 fbd3 	bl	80030c0 <HAL_GPIO_WritePin>
 800991a:	e061      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, vlue); break;
 800991c:	78fb      	ldrb	r3, [r7, #3]
 800991e:	461a      	mov	r2, r3
 8009920:	2110      	movs	r1, #16
 8009922:	4822      	ldr	r0, [pc, #136]	@ (80099ac <digitalWrite+0x68c>)
 8009924:	f7f9 fbcc 	bl	80030c0 <HAL_GPIO_WritePin>
 8009928:	e05a      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, vlue); break;
 800992a:	78fb      	ldrb	r3, [r7, #3]
 800992c:	461a      	mov	r2, r3
 800992e:	2120      	movs	r1, #32
 8009930:	481e      	ldr	r0, [pc, #120]	@ (80099ac <digitalWrite+0x68c>)
 8009932:	f7f9 fbc5 	bl	80030c0 <HAL_GPIO_WritePin>
 8009936:	e053      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, vlue); break;
 8009938:	78fb      	ldrb	r3, [r7, #3]
 800993a:	461a      	mov	r2, r3
 800993c:	2140      	movs	r1, #64	@ 0x40
 800993e:	481b      	ldr	r0, [pc, #108]	@ (80099ac <digitalWrite+0x68c>)
 8009940:	f7f9 fbbe 	bl	80030c0 <HAL_GPIO_WritePin>
 8009944:	e04c      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, vlue); break;
 8009946:	78fb      	ldrb	r3, [r7, #3]
 8009948:	461a      	mov	r2, r3
 800994a:	2180      	movs	r1, #128	@ 0x80
 800994c:	4817      	ldr	r0, [pc, #92]	@ (80099ac <digitalWrite+0x68c>)
 800994e:	f7f9 fbb7 	bl	80030c0 <HAL_GPIO_WritePin>
 8009952:	e045      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, vlue); break;
 8009954:	78fb      	ldrb	r3, [r7, #3]
 8009956:	461a      	mov	r2, r3
 8009958:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800995c:	4813      	ldr	r0, [pc, #76]	@ (80099ac <digitalWrite+0x68c>)
 800995e:	f7f9 fbaf 	bl	80030c0 <HAL_GPIO_WritePin>
 8009962:	e03d      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, vlue); break;
 8009964:	78fb      	ldrb	r3, [r7, #3]
 8009966:	461a      	mov	r2, r3
 8009968:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800996c:	480f      	ldr	r0, [pc, #60]	@ (80099ac <digitalWrite+0x68c>)
 800996e:	f7f9 fba7 	bl	80030c0 <HAL_GPIO_WritePin>
 8009972:	e035      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, vlue); break;
 8009974:	78fb      	ldrb	r3, [r7, #3]
 8009976:	461a      	mov	r2, r3
 8009978:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800997c:	480b      	ldr	r0, [pc, #44]	@ (80099ac <digitalWrite+0x68c>)
 800997e:	f7f9 fb9f 	bl	80030c0 <HAL_GPIO_WritePin>
 8009982:	e02d      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, vlue); break;
 8009984:	78fb      	ldrb	r3, [r7, #3]
 8009986:	461a      	mov	r2, r3
 8009988:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800998c:	4807      	ldr	r0, [pc, #28]	@ (80099ac <digitalWrite+0x68c>)
 800998e:	f7f9 fb97 	bl	80030c0 <HAL_GPIO_WritePin>
 8009992:	e025      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, vlue); break;
 8009994:	78fb      	ldrb	r3, [r7, #3]
 8009996:	461a      	mov	r2, r3
 8009998:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800999c:	4803      	ldr	r0, [pc, #12]	@ (80099ac <digitalWrite+0x68c>)
 800999e:	f7f9 fb8f 	bl	80030c0 <HAL_GPIO_WritePin>
 80099a2:	e01d      	b.n	80099e0 <digitalWrite+0x6c0>
 80099a4:	40020800 	.word	0x40020800
 80099a8:	40020c00 	.word	0x40020c00
 80099ac:	40021000 	.word	0x40021000
	            case 13: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, vlue); break;
 80099b0:	78fb      	ldrb	r3, [r7, #3]
 80099b2:	461a      	mov	r2, r3
 80099b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80099b8:	480b      	ldr	r0, [pc, #44]	@ (80099e8 <digitalWrite+0x6c8>)
 80099ba:	f7f9 fb81 	bl	80030c0 <HAL_GPIO_WritePin>
 80099be:	e00f      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, vlue); break;
 80099c0:	78fb      	ldrb	r3, [r7, #3]
 80099c2:	461a      	mov	r2, r3
 80099c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80099c8:	4807      	ldr	r0, [pc, #28]	@ (80099e8 <digitalWrite+0x6c8>)
 80099ca:	f7f9 fb79 	bl	80030c0 <HAL_GPIO_WritePin>
 80099ce:	e007      	b.n	80099e0 <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, vlue); break;
 80099d0:	78fb      	ldrb	r3, [r7, #3]
 80099d2:	461a      	mov	r2, r3
 80099d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80099d8:	4803      	ldr	r0, [pc, #12]	@ (80099e8 <digitalWrite+0x6c8>)
 80099da:	f7f9 fb71 	bl	80030c0 <HAL_GPIO_WritePin>
 80099de:	bf00      	nop
	        }
	    }
}
 80099e0:	bf00      	nop
 80099e2:	3710      	adds	r7, #16
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	40021000 	.word	0x40021000

080099ec <Setup_Forward_Kinematic>:

float _Lx;
float _Ly;
float _Radius_wheel;

void Setup_Forward_Kinematic(float Lx ,float Ly ,float Radius_wheel){
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	ed87 0a03 	vstr	s0, [r7, #12]
 80099f6:	edc7 0a02 	vstr	s1, [r7, #8]
 80099fa:	ed87 1a01 	vstr	s2, [r7, #4]
	_Lx = Lx;
 80099fe:	4a07      	ldr	r2, [pc, #28]	@ (8009a1c <Setup_Forward_Kinematic+0x30>)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6013      	str	r3, [r2, #0]
	_Ly = Ly;
 8009a04:	4a06      	ldr	r2, [pc, #24]	@ (8009a20 <Setup_Forward_Kinematic+0x34>)
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	6013      	str	r3, [r2, #0]
	_Radius_wheel = Radius_wheel;
 8009a0a:	4a06      	ldr	r2, [pc, #24]	@ (8009a24 <Setup_Forward_Kinematic+0x38>)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6013      	str	r3, [r2, #0]
}
 8009a10:	bf00      	nop
 8009a12:	3714      	adds	r7, #20
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr
 8009a1c:	200007f4 	.word	0x200007f4
 8009a20:	200007f8 	.word	0x200007f8
 8009a24:	200007fc 	.word	0x200007fc

08009a28 <Setup_frequency_Forward_Kinematic>:

float _Pos_X = 0.0f;
float _Pos_Y = 0.0f;
float _Pos_Z = 0.0f;

void Setup_frequency_Forward_Kinematic(uint8_t freq){
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	4603      	mov	r3, r0
 8009a30:	71fb      	strb	r3, [r7, #7]
	__freq = freq;
 8009a32:	4a04      	ldr	r2, [pc, #16]	@ (8009a44 <Setup_frequency_Forward_Kinematic+0x1c>)
 8009a34:	79fb      	ldrb	r3, [r7, #7]
 8009a36:	7013      	strb	r3, [r2, #0]
}
 8009a38:	bf00      	nop
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	2000001c 	.word	0x2000001c

08009a48 <Setup_Inverse_Kinematic>:

float Lx_;
float Ly_;
float Radius_wheel_;

void Setup_Inverse_Kinematic(float Lx ,float Ly ,float Radius_wheel){
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	ed87 0a03 	vstr	s0, [r7, #12]
 8009a52:	edc7 0a02 	vstr	s1, [r7, #8]
 8009a56:	ed87 1a01 	vstr	s2, [r7, #4]
	Lx_ = Lx;
 8009a5a:	4a07      	ldr	r2, [pc, #28]	@ (8009a78 <Setup_Inverse_Kinematic+0x30>)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6013      	str	r3, [r2, #0]
	Ly_ = Ly;
 8009a60:	4a06      	ldr	r2, [pc, #24]	@ (8009a7c <Setup_Inverse_Kinematic+0x34>)
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	6013      	str	r3, [r2, #0]
	Radius_wheel_ = Radius_wheel;
 8009a66:	4a06      	ldr	r2, [pc, #24]	@ (8009a80 <Setup_Inverse_Kinematic+0x38>)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6013      	str	r3, [r2, #0]
}
 8009a6c:	bf00      	nop
 8009a6e:	3714      	adds	r7, #20
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr
 8009a78:	20000800 	.word	0x20000800
 8009a7c:	20000804 	.word	0x20000804
 8009a80:	20000808 	.word	0x20000808

08009a84 <Inverse_Kinematic>:
float w_LF = 0.0f;
float w_LB = 0.0f;
float w_RF = 0.0f;
float w_RB = 0.0f;

void Inverse_Kinematic(float Vx ,float Vy ,float wz){
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	ed87 0a03 	vstr	s0, [r7, #12]
 8009a8e:	edc7 0a02 	vstr	s1, [r7, #8]
 8009a92:	ed87 1a01 	vstr	s2, [r7, #4]
	w_LF = (Vx - Vy - (Lx_ +Ly_)*wz)/Radius_wheel_;
 8009a96:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8009a9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009aa2:	4b3a      	ldr	r3, [pc, #232]	@ (8009b8c <Inverse_Kinematic+0x108>)
 8009aa4:	edd3 6a00 	vldr	s13, [r3]
 8009aa8:	4b39      	ldr	r3, [pc, #228]	@ (8009b90 <Inverse_Kinematic+0x10c>)
 8009aaa:	edd3 7a00 	vldr	s15, [r3]
 8009aae:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009ab2:	edd7 7a01 	vldr	s15, [r7, #4]
 8009ab6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009aba:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009abe:	4b35      	ldr	r3, [pc, #212]	@ (8009b94 <Inverse_Kinematic+0x110>)
 8009ac0:	ed93 7a00 	vldr	s14, [r3]
 8009ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ac8:	4b33      	ldr	r3, [pc, #204]	@ (8009b98 <Inverse_Kinematic+0x114>)
 8009aca:	edc3 7a00 	vstr	s15, [r3]
	w_RF = -(Vx + Vy + (Lx_ +Ly_)*wz)/Radius_wheel_;
 8009ace:	ed97 7a03 	vldr	s14, [r7, #12]
 8009ad2:	edd7 7a02 	vldr	s15, [r7, #8]
 8009ad6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ada:	4b2c      	ldr	r3, [pc, #176]	@ (8009b8c <Inverse_Kinematic+0x108>)
 8009adc:	edd3 6a00 	vldr	s13, [r3]
 8009ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8009b90 <Inverse_Kinematic+0x10c>)
 8009ae2:	edd3 7a00 	vldr	s15, [r3]
 8009ae6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009aea:	edd7 7a01 	vldr	s15, [r7, #4]
 8009aee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009af6:	eef1 6a67 	vneg.f32	s13, s15
 8009afa:	4b26      	ldr	r3, [pc, #152]	@ (8009b94 <Inverse_Kinematic+0x110>)
 8009afc:	ed93 7a00 	vldr	s14, [r3]
 8009b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b04:	4b25      	ldr	r3, [pc, #148]	@ (8009b9c <Inverse_Kinematic+0x118>)
 8009b06:	edc3 7a00 	vstr	s15, [r3]
	w_LB = (Vx + Vy - (Lx_ +Ly_)*wz)/Radius_wheel_;
 8009b0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8009b0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009b12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b16:	4b1d      	ldr	r3, [pc, #116]	@ (8009b8c <Inverse_Kinematic+0x108>)
 8009b18:	edd3 6a00 	vldr	s13, [r3]
 8009b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8009b90 <Inverse_Kinematic+0x10c>)
 8009b1e:	edd3 7a00 	vldr	s15, [r3]
 8009b22:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009b26:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b2e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009b32:	4b18      	ldr	r3, [pc, #96]	@ (8009b94 <Inverse_Kinematic+0x110>)
 8009b34:	ed93 7a00 	vldr	s14, [r3]
 8009b38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b3c:	4b18      	ldr	r3, [pc, #96]	@ (8009ba0 <Inverse_Kinematic+0x11c>)
 8009b3e:	edc3 7a00 	vstr	s15, [r3]
	w_RB = -(Vx - Vy + (Lx_ +Ly_)*wz)/Radius_wheel_;
 8009b42:	ed97 7a03 	vldr	s14, [r7, #12]
 8009b46:	edd7 7a02 	vldr	s15, [r7, #8]
 8009b4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8009b8c <Inverse_Kinematic+0x108>)
 8009b50:	edd3 6a00 	vldr	s13, [r3]
 8009b54:	4b0e      	ldr	r3, [pc, #56]	@ (8009b90 <Inverse_Kinematic+0x10c>)
 8009b56:	edd3 7a00 	vldr	s15, [r3]
 8009b5a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009b5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b6a:	eef1 6a67 	vneg.f32	s13, s15
 8009b6e:	4b09      	ldr	r3, [pc, #36]	@ (8009b94 <Inverse_Kinematic+0x110>)
 8009b70:	ed93 7a00 	vldr	s14, [r3]
 8009b74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b78:	4b0a      	ldr	r3, [pc, #40]	@ (8009ba4 <Inverse_Kinematic+0x120>)
 8009b7a:	edc3 7a00 	vstr	s15, [r3]
}
 8009b7e:	bf00      	nop
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	20000800 	.word	0x20000800
 8009b90:	20000804 	.word	0x20000804
 8009b94:	20000808 	.word	0x20000808
 8009b98:	2000080c 	.word	0x2000080c
 8009b9c:	20000814 	.word	0x20000814
 8009ba0:	20000810 	.word	0x20000810
 8009ba4:	20000818 	.word	0x20000818

08009ba8 <get_w_LF>:

float get_w_LF(){
 8009ba8:	b480      	push	{r7}
 8009baa:	af00      	add	r7, sp, #0
	return w_LF;
 8009bac:	4b04      	ldr	r3, [pc, #16]	@ (8009bc0 <get_w_LF+0x18>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	ee07 3a90 	vmov	s15, r3
}
 8009bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr
 8009bc0:	2000080c 	.word	0x2000080c

08009bc4 <get_w_LB>:

float get_w_LB(){
 8009bc4:	b480      	push	{r7}
 8009bc6:	af00      	add	r7, sp, #0
	return w_LB;
 8009bc8:	4b04      	ldr	r3, [pc, #16]	@ (8009bdc <get_w_LB+0x18>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	ee07 3a90 	vmov	s15, r3
}
 8009bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr
 8009bdc:	20000810 	.word	0x20000810

08009be0 <get_w_RF>:

float get_w_RF(){
 8009be0:	b480      	push	{r7}
 8009be2:	af00      	add	r7, sp, #0
	return w_RF;
 8009be4:	4b04      	ldr	r3, [pc, #16]	@ (8009bf8 <get_w_RF+0x18>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	ee07 3a90 	vmov	s15, r3
}
 8009bec:	eeb0 0a67 	vmov.f32	s0, s15
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr
 8009bf8:	20000814 	.word	0x20000814

08009bfc <get_w_RB>:

float get_w_RB(){
 8009bfc:	b480      	push	{r7}
 8009bfe:	af00      	add	r7, sp, #0
	return w_RB;
 8009c00:	4b04      	ldr	r3, [pc, #16]	@ (8009c14 <get_w_RB+0x18>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	ee07 3a90 	vmov	s15, r3
}
 8009c08:	eeb0 0a67 	vmov.f32	s0, s15
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr
 8009c14:	20000818 	.word	0x20000818

08009c18 <map>:

float map(float value, float fromLow, float fromHigh, float toLow, float toHigh) {
 8009c18:	b480      	push	{r7}
 8009c1a:	b087      	sub	sp, #28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	ed87 0a05 	vstr	s0, [r7, #20]
 8009c22:	edc7 0a04 	vstr	s1, [r7, #16]
 8009c26:	ed87 1a03 	vstr	s2, [r7, #12]
 8009c2a:	edc7 1a02 	vstr	s3, [r7, #8]
 8009c2e:	ed87 2a01 	vstr	s4, [r7, #4]
    return toLow + (toHigh - toLow) * ((value - fromLow) / (fromHigh - fromLow));
 8009c32:	ed97 7a01 	vldr	s14, [r7, #4]
 8009c36:	edd7 7a02 	vldr	s15, [r7, #8]
 8009c3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009c3e:	edd7 6a05 	vldr	s13, [r7, #20]
 8009c42:	edd7 7a04 	vldr	s15, [r7, #16]
 8009c46:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8009c4a:	edd7 6a03 	vldr	s13, [r7, #12]
 8009c4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009c52:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009c56:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8009c5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009c62:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8009c66:	eeb0 0a67 	vmov.f32	s0, s15
 8009c6a:	371c      	adds	r7, #28
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009c80:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009c84:	f002 fc50 	bl	800c528 <USBD_static_malloc>
 8009c88:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d109      	bne.n	8009ca4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	32b0      	adds	r2, #176	@ 0xb0
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009ca0:	2302      	movs	r3, #2
 8009ca2:	e0d4      	b.n	8009e4e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009ca4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009ca8:	2100      	movs	r1, #0
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f002 fc80 	bl	800c5b0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	32b0      	adds	r2, #176	@ 0xb0
 8009cba:	68f9      	ldr	r1, [r7, #12]
 8009cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	32b0      	adds	r2, #176	@ 0xb0
 8009cca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	7c1b      	ldrb	r3, [r3, #16]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d138      	bne.n	8009d4e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009cdc:	4b5e      	ldr	r3, [pc, #376]	@ (8009e58 <USBD_CDC_Init+0x1e4>)
 8009cde:	7819      	ldrb	r1, [r3, #0]
 8009ce0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ce4:	2202      	movs	r2, #2
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f002 fafb 	bl	800c2e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009cec:	4b5a      	ldr	r3, [pc, #360]	@ (8009e58 <USBD_CDC_Init+0x1e4>)
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	f003 020f 	and.w	r2, r3, #15
 8009cf4:	6879      	ldr	r1, [r7, #4]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	4413      	add	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	440b      	add	r3, r1
 8009d00:	3324      	adds	r3, #36	@ 0x24
 8009d02:	2201      	movs	r2, #1
 8009d04:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009d06:	4b55      	ldr	r3, [pc, #340]	@ (8009e5c <USBD_CDC_Init+0x1e8>)
 8009d08:	7819      	ldrb	r1, [r3, #0]
 8009d0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009d0e:	2202      	movs	r2, #2
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f002 fae6 	bl	800c2e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009d16:	4b51      	ldr	r3, [pc, #324]	@ (8009e5c <USBD_CDC_Init+0x1e8>)
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	f003 020f 	and.w	r2, r3, #15
 8009d1e:	6879      	ldr	r1, [r7, #4]
 8009d20:	4613      	mov	r3, r2
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	4413      	add	r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	440b      	add	r3, r1
 8009d2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009d2e:	2201      	movs	r2, #1
 8009d30:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009d32:	4b4b      	ldr	r3, [pc, #300]	@ (8009e60 <USBD_CDC_Init+0x1ec>)
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	f003 020f 	and.w	r2, r3, #15
 8009d3a:	6879      	ldr	r1, [r7, #4]
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4413      	add	r3, r2
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	440b      	add	r3, r1
 8009d46:	3326      	adds	r3, #38	@ 0x26
 8009d48:	2210      	movs	r2, #16
 8009d4a:	801a      	strh	r2, [r3, #0]
 8009d4c:	e035      	b.n	8009dba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009d4e:	4b42      	ldr	r3, [pc, #264]	@ (8009e58 <USBD_CDC_Init+0x1e4>)
 8009d50:	7819      	ldrb	r1, [r3, #0]
 8009d52:	2340      	movs	r3, #64	@ 0x40
 8009d54:	2202      	movs	r2, #2
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f002 fac3 	bl	800c2e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009d5c:	4b3e      	ldr	r3, [pc, #248]	@ (8009e58 <USBD_CDC_Init+0x1e4>)
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	f003 020f 	and.w	r2, r3, #15
 8009d64:	6879      	ldr	r1, [r7, #4]
 8009d66:	4613      	mov	r3, r2
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	4413      	add	r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	440b      	add	r3, r1
 8009d70:	3324      	adds	r3, #36	@ 0x24
 8009d72:	2201      	movs	r2, #1
 8009d74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009d76:	4b39      	ldr	r3, [pc, #228]	@ (8009e5c <USBD_CDC_Init+0x1e8>)
 8009d78:	7819      	ldrb	r1, [r3, #0]
 8009d7a:	2340      	movs	r3, #64	@ 0x40
 8009d7c:	2202      	movs	r2, #2
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f002 faaf 	bl	800c2e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009d84:	4b35      	ldr	r3, [pc, #212]	@ (8009e5c <USBD_CDC_Init+0x1e8>)
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	f003 020f 	and.w	r2, r3, #15
 8009d8c:	6879      	ldr	r1, [r7, #4]
 8009d8e:	4613      	mov	r3, r2
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	4413      	add	r3, r2
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	440b      	add	r3, r1
 8009d98:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009da0:	4b2f      	ldr	r3, [pc, #188]	@ (8009e60 <USBD_CDC_Init+0x1ec>)
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	f003 020f 	and.w	r2, r3, #15
 8009da8:	6879      	ldr	r1, [r7, #4]
 8009daa:	4613      	mov	r3, r2
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	4413      	add	r3, r2
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	440b      	add	r3, r1
 8009db4:	3326      	adds	r3, #38	@ 0x26
 8009db6:	2210      	movs	r2, #16
 8009db8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009dba:	4b29      	ldr	r3, [pc, #164]	@ (8009e60 <USBD_CDC_Init+0x1ec>)
 8009dbc:	7819      	ldrb	r1, [r3, #0]
 8009dbe:	2308      	movs	r3, #8
 8009dc0:	2203      	movs	r2, #3
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f002 fa8d 	bl	800c2e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009dc8:	4b25      	ldr	r3, [pc, #148]	@ (8009e60 <USBD_CDC_Init+0x1ec>)
 8009dca:	781b      	ldrb	r3, [r3, #0]
 8009dcc:	f003 020f 	and.w	r2, r3, #15
 8009dd0:	6879      	ldr	r1, [r7, #4]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4413      	add	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	440b      	add	r3, r1
 8009ddc:	3324      	adds	r3, #36	@ 0x24
 8009dde:	2201      	movs	r2, #1
 8009de0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	33b0      	adds	r3, #176	@ 0xb0
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	4413      	add	r3, r2
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d101      	bne.n	8009e1c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009e18:	2302      	movs	r3, #2
 8009e1a:	e018      	b.n	8009e4e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	7c1b      	ldrb	r3, [r3, #16]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d10a      	bne.n	8009e3a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e24:	4b0d      	ldr	r3, [pc, #52]	@ (8009e5c <USBD_CDC_Init+0x1e8>)
 8009e26:	7819      	ldrb	r1, [r3, #0]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009e2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f002 fb44 	bl	800c4c0 <USBD_LL_PrepareReceive>
 8009e38:	e008      	b.n	8009e4c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009e3a:	4b08      	ldr	r3, [pc, #32]	@ (8009e5c <USBD_CDC_Init+0x1e8>)
 8009e3c:	7819      	ldrb	r1, [r3, #0]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009e44:	2340      	movs	r3, #64	@ 0x40
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f002 fb3a 	bl	800c4c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	200000a7 	.word	0x200000a7
 8009e5c:	200000a8 	.word	0x200000a8
 8009e60:	200000a9 	.word	0x200000a9

08009e64 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009e70:	4b3a      	ldr	r3, [pc, #232]	@ (8009f5c <USBD_CDC_DeInit+0xf8>)
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	4619      	mov	r1, r3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f002 fa59 	bl	800c32e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009e7c:	4b37      	ldr	r3, [pc, #220]	@ (8009f5c <USBD_CDC_DeInit+0xf8>)
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	f003 020f 	and.w	r2, r3, #15
 8009e84:	6879      	ldr	r1, [r7, #4]
 8009e86:	4613      	mov	r3, r2
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	4413      	add	r3, r2
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	440b      	add	r3, r1
 8009e90:	3324      	adds	r3, #36	@ 0x24
 8009e92:	2200      	movs	r2, #0
 8009e94:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009e96:	4b32      	ldr	r3, [pc, #200]	@ (8009f60 <USBD_CDC_DeInit+0xfc>)
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f002 fa46 	bl	800c32e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8009f60 <USBD_CDC_DeInit+0xfc>)
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	f003 020f 	and.w	r2, r3, #15
 8009eaa:	6879      	ldr	r1, [r7, #4]
 8009eac:	4613      	mov	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	440b      	add	r3, r1
 8009eb6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009eba:	2200      	movs	r2, #0
 8009ebc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009ebe:	4b29      	ldr	r3, [pc, #164]	@ (8009f64 <USBD_CDC_DeInit+0x100>)
 8009ec0:	781b      	ldrb	r3, [r3, #0]
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f002 fa32 	bl	800c32e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009eca:	4b26      	ldr	r3, [pc, #152]	@ (8009f64 <USBD_CDC_DeInit+0x100>)
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	f003 020f 	and.w	r2, r3, #15
 8009ed2:	6879      	ldr	r1, [r7, #4]
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	440b      	add	r3, r1
 8009ede:	3324      	adds	r3, #36	@ 0x24
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8009f64 <USBD_CDC_DeInit+0x100>)
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	f003 020f 	and.w	r2, r3, #15
 8009eec:	6879      	ldr	r1, [r7, #4]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	4413      	add	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	440b      	add	r3, r1
 8009ef8:	3326      	adds	r3, #38	@ 0x26
 8009efa:	2200      	movs	r2, #0
 8009efc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	32b0      	adds	r2, #176	@ 0xb0
 8009f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d01f      	beq.n	8009f50 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	33b0      	adds	r3, #176	@ 0xb0
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	4413      	add	r3, r2
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	32b0      	adds	r2, #176	@ 0xb0
 8009f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f002 fb06 	bl	800c544 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	32b0      	adds	r2, #176	@ 0xb0
 8009f42:	2100      	movs	r1, #0
 8009f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3708      	adds	r7, #8
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}
 8009f5a:	bf00      	nop
 8009f5c:	200000a7 	.word	0x200000a7
 8009f60:	200000a8 	.word	0x200000a8
 8009f64:	200000a9 	.word	0x200000a9

08009f68 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
 8009f70:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	32b0      	adds	r2, #176	@ 0xb0
 8009f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f80:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009f82:	2300      	movs	r3, #0
 8009f84:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009f86:	2300      	movs	r3, #0
 8009f88:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d101      	bne.n	8009f98 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009f94:	2303      	movs	r3, #3
 8009f96:	e0bf      	b.n	800a118 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d050      	beq.n	800a046 <USBD_CDC_Setup+0xde>
 8009fa4:	2b20      	cmp	r3, #32
 8009fa6:	f040 80af 	bne.w	800a108 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	88db      	ldrh	r3, [r3, #6]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d03a      	beq.n	800a028 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	b25b      	sxtb	r3, r3
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	da1b      	bge.n	8009ff4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	33b0      	adds	r3, #176	@ 0xb0
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	4413      	add	r3, r2
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	683a      	ldr	r2, [r7, #0]
 8009fd0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009fd2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009fd4:	683a      	ldr	r2, [r7, #0]
 8009fd6:	88d2      	ldrh	r2, [r2, #6]
 8009fd8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	88db      	ldrh	r3, [r3, #6]
 8009fde:	2b07      	cmp	r3, #7
 8009fe0:	bf28      	it	cs
 8009fe2:	2307      	movcs	r3, #7
 8009fe4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	89fa      	ldrh	r2, [r7, #14]
 8009fea:	4619      	mov	r1, r3
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f001 fd53 	bl	800ba98 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009ff2:	e090      	b.n	800a116 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	785a      	ldrb	r2, [r3, #1]
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	88db      	ldrh	r3, [r3, #6]
 800a002:	2b3f      	cmp	r3, #63	@ 0x3f
 800a004:	d803      	bhi.n	800a00e <USBD_CDC_Setup+0xa6>
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	88db      	ldrh	r3, [r3, #6]
 800a00a:	b2da      	uxtb	r2, r3
 800a00c:	e000      	b.n	800a010 <USBD_CDC_Setup+0xa8>
 800a00e:	2240      	movs	r2, #64	@ 0x40
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a016:	6939      	ldr	r1, [r7, #16]
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a01e:	461a      	mov	r2, r3
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f001 fd65 	bl	800baf0 <USBD_CtlPrepareRx>
      break;
 800a026:	e076      	b.n	800a116 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	33b0      	adds	r3, #176	@ 0xb0
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	4413      	add	r3, r2
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	683a      	ldr	r2, [r7, #0]
 800a03c:	7850      	ldrb	r0, [r2, #1]
 800a03e:	2200      	movs	r2, #0
 800a040:	6839      	ldr	r1, [r7, #0]
 800a042:	4798      	blx	r3
      break;
 800a044:	e067      	b.n	800a116 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	785b      	ldrb	r3, [r3, #1]
 800a04a:	2b0b      	cmp	r3, #11
 800a04c:	d851      	bhi.n	800a0f2 <USBD_CDC_Setup+0x18a>
 800a04e:	a201      	add	r2, pc, #4	@ (adr r2, 800a054 <USBD_CDC_Setup+0xec>)
 800a050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a054:	0800a085 	.word	0x0800a085
 800a058:	0800a101 	.word	0x0800a101
 800a05c:	0800a0f3 	.word	0x0800a0f3
 800a060:	0800a0f3 	.word	0x0800a0f3
 800a064:	0800a0f3 	.word	0x0800a0f3
 800a068:	0800a0f3 	.word	0x0800a0f3
 800a06c:	0800a0f3 	.word	0x0800a0f3
 800a070:	0800a0f3 	.word	0x0800a0f3
 800a074:	0800a0f3 	.word	0x0800a0f3
 800a078:	0800a0f3 	.word	0x0800a0f3
 800a07c:	0800a0af 	.word	0x0800a0af
 800a080:	0800a0d9 	.word	0x0800a0d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a08a:	b2db      	uxtb	r3, r3
 800a08c:	2b03      	cmp	r3, #3
 800a08e:	d107      	bne.n	800a0a0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a090:	f107 030a 	add.w	r3, r7, #10
 800a094:	2202      	movs	r2, #2
 800a096:	4619      	mov	r1, r3
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f001 fcfd 	bl	800ba98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a09e:	e032      	b.n	800a106 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a0a0:	6839      	ldr	r1, [r7, #0]
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f001 fc7b 	bl	800b99e <USBD_CtlError>
            ret = USBD_FAIL;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	75fb      	strb	r3, [r7, #23]
          break;
 800a0ac:	e02b      	b.n	800a106 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	2b03      	cmp	r3, #3
 800a0b8:	d107      	bne.n	800a0ca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a0ba:	f107 030d 	add.w	r3, r7, #13
 800a0be:	2201      	movs	r2, #1
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f001 fce8 	bl	800ba98 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a0c8:	e01d      	b.n	800a106 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a0ca:	6839      	ldr	r1, [r7, #0]
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f001 fc66 	bl	800b99e <USBD_CtlError>
            ret = USBD_FAIL;
 800a0d2:	2303      	movs	r3, #3
 800a0d4:	75fb      	strb	r3, [r7, #23]
          break;
 800a0d6:	e016      	b.n	800a106 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b03      	cmp	r3, #3
 800a0e2:	d00f      	beq.n	800a104 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a0e4:	6839      	ldr	r1, [r7, #0]
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f001 fc59 	bl	800b99e <USBD_CtlError>
            ret = USBD_FAIL;
 800a0ec:	2303      	movs	r3, #3
 800a0ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a0f0:	e008      	b.n	800a104 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a0f2:	6839      	ldr	r1, [r7, #0]
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f001 fc52 	bl	800b99e <USBD_CtlError>
          ret = USBD_FAIL;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	75fb      	strb	r3, [r7, #23]
          break;
 800a0fe:	e002      	b.n	800a106 <USBD_CDC_Setup+0x19e>
          break;
 800a100:	bf00      	nop
 800a102:	e008      	b.n	800a116 <USBD_CDC_Setup+0x1ae>
          break;
 800a104:	bf00      	nop
      }
      break;
 800a106:	e006      	b.n	800a116 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a108:	6839      	ldr	r1, [r7, #0]
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f001 fc47 	bl	800b99e <USBD_CtlError>
      ret = USBD_FAIL;
 800a110:	2303      	movs	r3, #3
 800a112:	75fb      	strb	r3, [r7, #23]
      break;
 800a114:	bf00      	nop
  }

  return (uint8_t)ret;
 800a116:	7dfb      	ldrb	r3, [r7, #23]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3718      	adds	r7, #24
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	460b      	mov	r3, r1
 800a12a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a132:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	32b0      	adds	r2, #176	@ 0xb0
 800a13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d101      	bne.n	800a14a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a146:	2303      	movs	r3, #3
 800a148:	e065      	b.n	800a216 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	32b0      	adds	r2, #176	@ 0xb0
 800a154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a158:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a15a:	78fb      	ldrb	r3, [r7, #3]
 800a15c:	f003 020f 	and.w	r2, r3, #15
 800a160:	6879      	ldr	r1, [r7, #4]
 800a162:	4613      	mov	r3, r2
 800a164:	009b      	lsls	r3, r3, #2
 800a166:	4413      	add	r3, r2
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	440b      	add	r3, r1
 800a16c:	3318      	adds	r3, #24
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d02f      	beq.n	800a1d4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a174:	78fb      	ldrb	r3, [r7, #3]
 800a176:	f003 020f 	and.w	r2, r3, #15
 800a17a:	6879      	ldr	r1, [r7, #4]
 800a17c:	4613      	mov	r3, r2
 800a17e:	009b      	lsls	r3, r3, #2
 800a180:	4413      	add	r3, r2
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	440b      	add	r3, r1
 800a186:	3318      	adds	r3, #24
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	78fb      	ldrb	r3, [r7, #3]
 800a18c:	f003 010f 	and.w	r1, r3, #15
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	460b      	mov	r3, r1
 800a194:	00db      	lsls	r3, r3, #3
 800a196:	440b      	add	r3, r1
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4403      	add	r3, r0
 800a19c:	331c      	adds	r3, #28
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	fbb2 f1f3 	udiv	r1, r2, r3
 800a1a4:	fb01 f303 	mul.w	r3, r1, r3
 800a1a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d112      	bne.n	800a1d4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a1ae:	78fb      	ldrb	r3, [r7, #3]
 800a1b0:	f003 020f 	and.w	r2, r3, #15
 800a1b4:	6879      	ldr	r1, [r7, #4]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	009b      	lsls	r3, r3, #2
 800a1ba:	4413      	add	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	440b      	add	r3, r1
 800a1c0:	3318      	adds	r3, #24
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a1c6:	78f9      	ldrb	r1, [r7, #3]
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f002 f956 	bl	800c47e <USBD_LL_Transmit>
 800a1d2:	e01f      	b.n	800a214 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	33b0      	adds	r3, #176	@ 0xb0
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	4413      	add	r3, r2
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d010      	beq.n	800a214 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	33b0      	adds	r3, #176	@ 0xb0
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	4413      	add	r3, r2
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a210:	78fa      	ldrb	r2, [r7, #3]
 800a212:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b084      	sub	sp, #16
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	460b      	mov	r3, r1
 800a228:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	32b0      	adds	r2, #176	@ 0xb0
 800a234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a238:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	32b0      	adds	r2, #176	@ 0xb0
 800a244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d101      	bne.n	800a250 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a24c:	2303      	movs	r3, #3
 800a24e:	e01a      	b.n	800a286 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a250:	78fb      	ldrb	r3, [r7, #3]
 800a252:	4619      	mov	r1, r3
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f002 f954 	bl	800c502 <USBD_LL_GetRxDataSize>
 800a25a:	4602      	mov	r2, r0
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	33b0      	adds	r3, #176	@ 0xb0
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	4413      	add	r3, r2
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	68db      	ldr	r3, [r3, #12]
 800a274:	68fa      	ldr	r2, [r7, #12]
 800a276:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a280:	4611      	mov	r1, r2
 800a282:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}

0800a28e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a28e:	b580      	push	{r7, lr}
 800a290:	b084      	sub	sp, #16
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	32b0      	adds	r2, #176	@ 0xb0
 800a2a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d101      	bne.n	800a2b0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a2ac:	2303      	movs	r3, #3
 800a2ae:	e024      	b.n	800a2fa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	33b0      	adds	r3, #176	@ 0xb0
 800a2ba:	009b      	lsls	r3, r3, #2
 800a2bc:	4413      	add	r3, r2
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d019      	beq.n	800a2f8 <USBD_CDC_EP0_RxReady+0x6a>
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a2ca:	2bff      	cmp	r3, #255	@ 0xff
 800a2cc:	d014      	beq.n	800a2f8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	33b0      	adds	r3, #176	@ 0xb0
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	4413      	add	r3, r2
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	68fa      	ldr	r2, [r7, #12]
 800a2e2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a2e6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a2ee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	22ff      	movs	r2, #255	@ 0xff
 800a2f4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
	...

0800a304 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b086      	sub	sp, #24
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a30c:	2182      	movs	r1, #130	@ 0x82
 800a30e:	4818      	ldr	r0, [pc, #96]	@ (800a370 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a310:	f000 fd0f 	bl	800ad32 <USBD_GetEpDesc>
 800a314:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a316:	2101      	movs	r1, #1
 800a318:	4815      	ldr	r0, [pc, #84]	@ (800a370 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a31a:	f000 fd0a 	bl	800ad32 <USBD_GetEpDesc>
 800a31e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a320:	2181      	movs	r1, #129	@ 0x81
 800a322:	4813      	ldr	r0, [pc, #76]	@ (800a370 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a324:	f000 fd05 	bl	800ad32 <USBD_GetEpDesc>
 800a328:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	2210      	movs	r2, #16
 800a334:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d006      	beq.n	800a34a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	2200      	movs	r2, #0
 800a340:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a344:	711a      	strb	r2, [r3, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d006      	beq.n	800a35e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a358:	711a      	strb	r2, [r3, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2243      	movs	r2, #67	@ 0x43
 800a362:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a364:	4b02      	ldr	r3, [pc, #8]	@ (800a370 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a366:	4618      	mov	r0, r3
 800a368:	3718      	adds	r7, #24
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	20000064 	.word	0x20000064

0800a374 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b086      	sub	sp, #24
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a37c:	2182      	movs	r1, #130	@ 0x82
 800a37e:	4818      	ldr	r0, [pc, #96]	@ (800a3e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a380:	f000 fcd7 	bl	800ad32 <USBD_GetEpDesc>
 800a384:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a386:	2101      	movs	r1, #1
 800a388:	4815      	ldr	r0, [pc, #84]	@ (800a3e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a38a:	f000 fcd2 	bl	800ad32 <USBD_GetEpDesc>
 800a38e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a390:	2181      	movs	r1, #129	@ 0x81
 800a392:	4813      	ldr	r0, [pc, #76]	@ (800a3e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a394:	f000 fccd 	bl	800ad32 <USBD_GetEpDesc>
 800a398:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d002      	beq.n	800a3a6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	2210      	movs	r2, #16
 800a3a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d006      	beq.n	800a3ba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	711a      	strb	r2, [r3, #4]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f042 0202 	orr.w	r2, r2, #2
 800a3b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d006      	beq.n	800a3ce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	711a      	strb	r2, [r3, #4]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f042 0202 	orr.w	r2, r2, #2
 800a3cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	2243      	movs	r2, #67	@ 0x43
 800a3d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a3d4:	4b02      	ldr	r3, [pc, #8]	@ (800a3e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3718      	adds	r7, #24
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	20000064 	.word	0x20000064

0800a3e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b086      	sub	sp, #24
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a3ec:	2182      	movs	r1, #130	@ 0x82
 800a3ee:	4818      	ldr	r0, [pc, #96]	@ (800a450 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a3f0:	f000 fc9f 	bl	800ad32 <USBD_GetEpDesc>
 800a3f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	4815      	ldr	r0, [pc, #84]	@ (800a450 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a3fa:	f000 fc9a 	bl	800ad32 <USBD_GetEpDesc>
 800a3fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a400:	2181      	movs	r1, #129	@ 0x81
 800a402:	4813      	ldr	r0, [pc, #76]	@ (800a450 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a404:	f000 fc95 	bl	800ad32 <USBD_GetEpDesc>
 800a408:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d002      	beq.n	800a416 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	2210      	movs	r2, #16
 800a414:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d006      	beq.n	800a42a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	2200      	movs	r2, #0
 800a420:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a424:	711a      	strb	r2, [r3, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d006      	beq.n	800a43e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a438:	711a      	strb	r2, [r3, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2243      	movs	r2, #67	@ 0x43
 800a442:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a444:	4b02      	ldr	r3, [pc, #8]	@ (800a450 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a446:	4618      	mov	r0, r3
 800a448:	3718      	adds	r7, #24
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	20000064 	.word	0x20000064

0800a454 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	220a      	movs	r2, #10
 800a460:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a462:	4b03      	ldr	r3, [pc, #12]	@ (800a470 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a464:	4618      	mov	r0, r3
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr
 800a470:	20000020 	.word	0x20000020

0800a474 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d101      	bne.n	800a488 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a484:	2303      	movs	r3, #3
 800a486:	e009      	b.n	800a49c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	33b0      	adds	r3, #176	@ 0xb0
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	4413      	add	r3, r2
 800a496:	683a      	ldr	r2, [r7, #0]
 800a498:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a49a:	2300      	movs	r3, #0
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	370c      	adds	r7, #12
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b087      	sub	sp, #28
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	32b0      	adds	r2, #176	@ 0xb0
 800a4be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4c2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d101      	bne.n	800a4ce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	e008      	b.n	800a4e0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	68ba      	ldr	r2, [r7, #8]
 800a4d2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a4de:	2300      	movs	r3, #0
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	371c      	adds	r7, #28
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	32b0      	adds	r2, #176	@ 0xb0
 800a500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a504:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d101      	bne.n	800a510 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a50c:	2303      	movs	r3, #3
 800a50e:	e004      	b.n	800a51a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	683a      	ldr	r2, [r7, #0]
 800a514:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
	...

0800a528 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	32b0      	adds	r2, #176	@ 0xb0
 800a53a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a53e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	32b0      	adds	r2, #176	@ 0xb0
 800a54a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d101      	bne.n	800a556 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a552:	2303      	movs	r3, #3
 800a554:	e018      	b.n	800a588 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	7c1b      	ldrb	r3, [r3, #16]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d10a      	bne.n	800a574 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a55e:	4b0c      	ldr	r3, [pc, #48]	@ (800a590 <USBD_CDC_ReceivePacket+0x68>)
 800a560:	7819      	ldrb	r1, [r3, #0]
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a568:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f001 ffa7 	bl	800c4c0 <USBD_LL_PrepareReceive>
 800a572:	e008      	b.n	800a586 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a574:	4b06      	ldr	r3, [pc, #24]	@ (800a590 <USBD_CDC_ReceivePacket+0x68>)
 800a576:	7819      	ldrb	r1, [r3, #0]
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a57e:	2340      	movs	r3, #64	@ 0x40
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f001 ff9d 	bl	800c4c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	200000a8 	.word	0x200000a8

0800a594 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d101      	bne.n	800a5ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	e01f      	b.n	800a5ec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d003      	beq.n	800a5d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	68ba      	ldr	r2, [r7, #8]
 800a5ce:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	79fa      	ldrb	r2, [r7, #7]
 800a5de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	f001 fe17 	bl	800c214 <USBD_LL_Init>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a5ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3718      	adds	r7, #24
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a5fe:	2300      	movs	r3, #0
 800a600:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d101      	bne.n	800a60c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a608:	2303      	movs	r3, #3
 800a60a:	e025      	b.n	800a658 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	683a      	ldr	r2, [r7, #0]
 800a610:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	32ae      	adds	r2, #174	@ 0xae
 800a61e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a624:	2b00      	cmp	r3, #0
 800a626:	d00f      	beq.n	800a648 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	32ae      	adds	r2, #174	@ 0xae
 800a632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a638:	f107 020e 	add.w	r2, r7, #14
 800a63c:	4610      	mov	r0, r2
 800a63e:	4798      	blx	r3
 800a640:	4602      	mov	r2, r0
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a64e:	1c5a      	adds	r2, r3, #1
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f001 fe1f 	bl	800c2ac <USBD_LL_Start>
 800a66e:	4603      	mov	r3, r0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3708      	adds	r7, #8
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a680:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a682:	4618      	mov	r0, r3
 800a684:	370c      	adds	r7, #12
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr

0800a68e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b084      	sub	sp, #16
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
 800a696:	460b      	mov	r3, r1
 800a698:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a69a:	2300      	movs	r3, #0
 800a69c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d009      	beq.n	800a6bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	78fa      	ldrb	r2, [r7, #3]
 800a6b2:	4611      	mov	r1, r2
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	4798      	blx	r3
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b084      	sub	sp, #16
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
 800a6ce:	460b      	mov	r3, r1
 800a6d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	78fa      	ldrb	r2, [r7, #3]
 800a6e0:	4611      	mov	r1, r2
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	4798      	blx	r3
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d001      	beq.n	800a6f0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a6ec:	2303      	movs	r3, #3
 800a6ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b084      	sub	sp, #16
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
 800a702:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a70a:	6839      	ldr	r1, [r7, #0]
 800a70c:	4618      	mov	r0, r3
 800a70e:	f001 f90c 	bl	800b92a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2201      	movs	r2, #1
 800a716:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a720:	461a      	mov	r2, r3
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a72e:	f003 031f 	and.w	r3, r3, #31
 800a732:	2b02      	cmp	r3, #2
 800a734:	d01a      	beq.n	800a76c <USBD_LL_SetupStage+0x72>
 800a736:	2b02      	cmp	r3, #2
 800a738:	d822      	bhi.n	800a780 <USBD_LL_SetupStage+0x86>
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d002      	beq.n	800a744 <USBD_LL_SetupStage+0x4a>
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d00a      	beq.n	800a758 <USBD_LL_SetupStage+0x5e>
 800a742:	e01d      	b.n	800a780 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a74a:	4619      	mov	r1, r3
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 fb63 	bl	800ae18 <USBD_StdDevReq>
 800a752:	4603      	mov	r3, r0
 800a754:	73fb      	strb	r3, [r7, #15]
      break;
 800a756:	e020      	b.n	800a79a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a75e:	4619      	mov	r1, r3
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 fbcb 	bl	800aefc <USBD_StdItfReq>
 800a766:	4603      	mov	r3, r0
 800a768:	73fb      	strb	r3, [r7, #15]
      break;
 800a76a:	e016      	b.n	800a79a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a772:	4619      	mov	r1, r3
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 fc2d 	bl	800afd4 <USBD_StdEPReq>
 800a77a:	4603      	mov	r3, r0
 800a77c:	73fb      	strb	r3, [r7, #15]
      break;
 800a77e:	e00c      	b.n	800a79a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a786:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	4619      	mov	r1, r3
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f001 fdec 	bl	800c36c <USBD_LL_StallEP>
 800a794:	4603      	mov	r3, r0
 800a796:	73fb      	strb	r3, [r7, #15]
      break;
 800a798:	bf00      	nop
  }

  return ret;
 800a79a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b086      	sub	sp, #24
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	607a      	str	r2, [r7, #4]
 800a7b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a7b6:	7afb      	ldrb	r3, [r7, #11]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d16e      	bne.n	800a89a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a7c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a7ca:	2b03      	cmp	r3, #3
 800a7cc:	f040 8098 	bne.w	800a900 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	689a      	ldr	r2, [r3, #8]
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d913      	bls.n	800a804 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	689a      	ldr	r2, [r3, #8]
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	1ad2      	subs	r2, r2, r3
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	68da      	ldr	r2, [r3, #12]
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	bf28      	it	cs
 800a7f6:	4613      	movcs	r3, r2
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	6879      	ldr	r1, [r7, #4]
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f001 f994 	bl	800bb2a <USBD_CtlContinueRx>
 800a802:	e07d      	b.n	800a900 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a80a:	f003 031f 	and.w	r3, r3, #31
 800a80e:	2b02      	cmp	r3, #2
 800a810:	d014      	beq.n	800a83c <USBD_LL_DataOutStage+0x98>
 800a812:	2b02      	cmp	r3, #2
 800a814:	d81d      	bhi.n	800a852 <USBD_LL_DataOutStage+0xae>
 800a816:	2b00      	cmp	r3, #0
 800a818:	d002      	beq.n	800a820 <USBD_LL_DataOutStage+0x7c>
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d003      	beq.n	800a826 <USBD_LL_DataOutStage+0x82>
 800a81e:	e018      	b.n	800a852 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a820:	2300      	movs	r3, #0
 800a822:	75bb      	strb	r3, [r7, #22]
            break;
 800a824:	e018      	b.n	800a858 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a82c:	b2db      	uxtb	r3, r3
 800a82e:	4619      	mov	r1, r3
 800a830:	68f8      	ldr	r0, [r7, #12]
 800a832:	f000 fa64 	bl	800acfe <USBD_CoreFindIF>
 800a836:	4603      	mov	r3, r0
 800a838:	75bb      	strb	r3, [r7, #22]
            break;
 800a83a:	e00d      	b.n	800a858 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a842:	b2db      	uxtb	r3, r3
 800a844:	4619      	mov	r1, r3
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f000 fa66 	bl	800ad18 <USBD_CoreFindEP>
 800a84c:	4603      	mov	r3, r0
 800a84e:	75bb      	strb	r3, [r7, #22]
            break;
 800a850:	e002      	b.n	800a858 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a852:	2300      	movs	r3, #0
 800a854:	75bb      	strb	r3, [r7, #22]
            break;
 800a856:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a858:	7dbb      	ldrb	r3, [r7, #22]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d119      	bne.n	800a892 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a864:	b2db      	uxtb	r3, r3
 800a866:	2b03      	cmp	r3, #3
 800a868:	d113      	bne.n	800a892 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a86a:	7dba      	ldrb	r2, [r7, #22]
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	32ae      	adds	r2, #174	@ 0xae
 800a870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d00b      	beq.n	800a892 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a87a:	7dba      	ldrb	r2, [r7, #22]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a882:	7dba      	ldrb	r2, [r7, #22]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	32ae      	adds	r2, #174	@ 0xae
 800a888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a88c:	691b      	ldr	r3, [r3, #16]
 800a88e:	68f8      	ldr	r0, [r7, #12]
 800a890:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a892:	68f8      	ldr	r0, [r7, #12]
 800a894:	f001 f95a 	bl	800bb4c <USBD_CtlSendStatus>
 800a898:	e032      	b.n	800a900 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a89a:	7afb      	ldrb	r3, [r7, #11]
 800a89c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f000 fa37 	bl	800ad18 <USBD_CoreFindEP>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8ae:	7dbb      	ldrb	r3, [r7, #22]
 800a8b0:	2bff      	cmp	r3, #255	@ 0xff
 800a8b2:	d025      	beq.n	800a900 <USBD_LL_DataOutStage+0x15c>
 800a8b4:	7dbb      	ldrb	r3, [r7, #22]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d122      	bne.n	800a900 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	2b03      	cmp	r3, #3
 800a8c4:	d117      	bne.n	800a8f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a8c6:	7dba      	ldrb	r2, [r7, #22]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	32ae      	adds	r2, #174	@ 0xae
 800a8cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8d0:	699b      	ldr	r3, [r3, #24]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00f      	beq.n	800a8f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a8d6:	7dba      	ldrb	r2, [r7, #22]
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a8de:	7dba      	ldrb	r2, [r7, #22]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	32ae      	adds	r2, #174	@ 0xae
 800a8e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8e8:	699b      	ldr	r3, [r3, #24]
 800a8ea:	7afa      	ldrb	r2, [r7, #11]
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	4798      	blx	r3
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a8f6:	7dfb      	ldrb	r3, [r7, #23]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d001      	beq.n	800a900 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a8fc:	7dfb      	ldrb	r3, [r7, #23]
 800a8fe:	e000      	b.n	800a902 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a900:	2300      	movs	r3, #0
}
 800a902:	4618      	mov	r0, r3
 800a904:	3718      	adds	r7, #24
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}

0800a90a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b086      	sub	sp, #24
 800a90e:	af00      	add	r7, sp, #0
 800a910:	60f8      	str	r0, [r7, #12]
 800a912:	460b      	mov	r3, r1
 800a914:	607a      	str	r2, [r7, #4]
 800a916:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a918:	7afb      	ldrb	r3, [r7, #11]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d16f      	bne.n	800a9fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	3314      	adds	r3, #20
 800a922:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a92a:	2b02      	cmp	r3, #2
 800a92c:	d15a      	bne.n	800a9e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	689a      	ldr	r2, [r3, #8]
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	429a      	cmp	r2, r3
 800a938:	d914      	bls.n	800a964 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	689a      	ldr	r2, [r3, #8]
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	1ad2      	subs	r2, r2, r3
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	461a      	mov	r2, r3
 800a94e:	6879      	ldr	r1, [r7, #4]
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f001 f8bc 	bl	800bace <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a956:	2300      	movs	r3, #0
 800a958:	2200      	movs	r2, #0
 800a95a:	2100      	movs	r1, #0
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f001 fdaf 	bl	800c4c0 <USBD_LL_PrepareReceive>
 800a962:	e03f      	b.n	800a9e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	68da      	ldr	r2, [r3, #12]
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d11c      	bne.n	800a9aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	685a      	ldr	r2, [r3, #4]
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a978:	429a      	cmp	r2, r3
 800a97a:	d316      	bcc.n	800a9aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	685a      	ldr	r2, [r3, #4]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a986:	429a      	cmp	r2, r3
 800a988:	d20f      	bcs.n	800a9aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a98a:	2200      	movs	r2, #0
 800a98c:	2100      	movs	r1, #0
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f001 f89d 	bl	800bace <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a99c:	2300      	movs	r3, #0
 800a99e:	2200      	movs	r2, #0
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	68f8      	ldr	r0, [r7, #12]
 800a9a4:	f001 fd8c 	bl	800c4c0 <USBD_LL_PrepareReceive>
 800a9a8:	e01c      	b.n	800a9e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	2b03      	cmp	r3, #3
 800a9b4:	d10f      	bne.n	800a9d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d009      	beq.n	800a9d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9d0:	68db      	ldr	r3, [r3, #12]
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9d6:	2180      	movs	r1, #128	@ 0x80
 800a9d8:	68f8      	ldr	r0, [r7, #12]
 800a9da:	f001 fcc7 	bl	800c36c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	f001 f8c7 	bl	800bb72 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d03a      	beq.n	800aa64 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	f7ff fe42 	bl	800a678 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a9fc:	e032      	b.n	800aa64 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a9fe:	7afb      	ldrb	r3, [r7, #11]
 800aa00:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aa04:	b2db      	uxtb	r3, r3
 800aa06:	4619      	mov	r1, r3
 800aa08:	68f8      	ldr	r0, [r7, #12]
 800aa0a:	f000 f985 	bl	800ad18 <USBD_CoreFindEP>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aa12:	7dfb      	ldrb	r3, [r7, #23]
 800aa14:	2bff      	cmp	r3, #255	@ 0xff
 800aa16:	d025      	beq.n	800aa64 <USBD_LL_DataInStage+0x15a>
 800aa18:	7dfb      	ldrb	r3, [r7, #23]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d122      	bne.n	800aa64 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	2b03      	cmp	r3, #3
 800aa28:	d11c      	bne.n	800aa64 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800aa2a:	7dfa      	ldrb	r2, [r7, #23]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	32ae      	adds	r2, #174	@ 0xae
 800aa30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa34:	695b      	ldr	r3, [r3, #20]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d014      	beq.n	800aa64 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800aa3a:	7dfa      	ldrb	r2, [r7, #23]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800aa42:	7dfa      	ldrb	r2, [r7, #23]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	32ae      	adds	r2, #174	@ 0xae
 800aa48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa4c:	695b      	ldr	r3, [r3, #20]
 800aa4e:	7afa      	ldrb	r2, [r7, #11]
 800aa50:	4611      	mov	r1, r2
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	4798      	blx	r3
 800aa56:	4603      	mov	r3, r0
 800aa58:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800aa5a:	7dbb      	ldrb	r3, [r7, #22]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d001      	beq.n	800aa64 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800aa60:	7dbb      	ldrb	r3, [r7, #22]
 800aa62:	e000      	b.n	800aa66 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3718      	adds	r7, #24
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd80      	pop	{r7, pc}

0800aa6e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	b084      	sub	sp, #16
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa76:	2300      	movs	r3, #0
 800aa78:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2200      	movs	r2, #0
 800aa86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2200      	movs	r2, #0
 800aa94:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d014      	beq.n	800aad4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00e      	beq.n	800aad4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	6852      	ldr	r2, [r2, #4]
 800aac2:	b2d2      	uxtb	r2, r2
 800aac4:	4611      	mov	r1, r2
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	4798      	blx	r3
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d001      	beq.n	800aad4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aad0:	2303      	movs	r3, #3
 800aad2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aad4:	2340      	movs	r3, #64	@ 0x40
 800aad6:	2200      	movs	r2, #0
 800aad8:	2100      	movs	r1, #0
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f001 fc01 	bl	800c2e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2240      	movs	r2, #64	@ 0x40
 800aaec:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aaf0:	2340      	movs	r3, #64	@ 0x40
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	2180      	movs	r1, #128	@ 0x80
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f001 fbf3 	bl	800c2e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2201      	movs	r2, #1
 800ab00:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2240      	movs	r2, #64	@ 0x40
 800ab06:	621a      	str	r2, [r3, #32]

  return ret;
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ab12:	b480      	push	{r7}
 800ab14:	b083      	sub	sp, #12
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	78fa      	ldrb	r2, [r7, #3]
 800ab22:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ab24:	2300      	movs	r3, #0
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	370c      	adds	r7, #12
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab30:	4770      	bx	lr

0800ab32 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ab32:	b480      	push	{r7}
 800ab34:	b083      	sub	sp, #12
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	2b04      	cmp	r3, #4
 800ab44:	d006      	beq.n	800ab54 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab4c:	b2da      	uxtb	r2, r3
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2204      	movs	r2, #4
 800ab58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	370c      	adds	r7, #12
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr

0800ab6a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ab6a:	b480      	push	{r7}
 800ab6c:	b083      	sub	sp, #12
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	2b04      	cmp	r3, #4
 800ab7c:	d106      	bne.n	800ab8c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ab84:	b2da      	uxtb	r2, r3
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	370c      	adds	r7, #12
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	b082      	sub	sp, #8
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	2b03      	cmp	r3, #3
 800abac:	d110      	bne.n	800abd0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d00b      	beq.n	800abd0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abbe:	69db      	ldr	r3, [r3, #28]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d005      	beq.n	800abd0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800abca:	69db      	ldr	r3, [r3, #28]
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800abd0:	2300      	movs	r3, #0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3708      	adds	r7, #8
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b082      	sub	sp, #8
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
 800abe2:	460b      	mov	r3, r1
 800abe4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	32ae      	adds	r2, #174	@ 0xae
 800abf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d101      	bne.n	800abfc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800abf8:	2303      	movs	r3, #3
 800abfa:	e01c      	b.n	800ac36 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	2b03      	cmp	r3, #3
 800ac06:	d115      	bne.n	800ac34 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	32ae      	adds	r2, #174	@ 0xae
 800ac12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac16:	6a1b      	ldr	r3, [r3, #32]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d00b      	beq.n	800ac34 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	32ae      	adds	r2, #174	@ 0xae
 800ac26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac2a:	6a1b      	ldr	r3, [r3, #32]
 800ac2c:	78fa      	ldrb	r2, [r7, #3]
 800ac2e:	4611      	mov	r1, r2
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3708      	adds	r7, #8
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b082      	sub	sp, #8
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
 800ac46:	460b      	mov	r3, r1
 800ac48:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	32ae      	adds	r2, #174	@ 0xae
 800ac54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d101      	bne.n	800ac60 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ac5c:	2303      	movs	r3, #3
 800ac5e:	e01c      	b.n	800ac9a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	2b03      	cmp	r3, #3
 800ac6a:	d115      	bne.n	800ac98 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	32ae      	adds	r2, #174	@ 0xae
 800ac76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00b      	beq.n	800ac98 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	32ae      	adds	r2, #174	@ 0xae
 800ac8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac90:	78fa      	ldrb	r2, [r7, #3]
 800ac92:	4611      	mov	r1, r2
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3708      	adds	r7, #8
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}

0800aca2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800aca2:	b480      	push	{r7}
 800aca4:	b083      	sub	sp, #12
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800acaa:	2300      	movs	r3, #0
}
 800acac:	4618      	mov	r0, r3
 800acae:	370c      	adds	r7, #12
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800acc0:	2300      	movs	r3, #0
 800acc2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2201      	movs	r2, #1
 800acc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00e      	beq.n	800acf4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	6852      	ldr	r2, [r2, #4]
 800ace2:	b2d2      	uxtb	r2, r2
 800ace4:	4611      	mov	r1, r2
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	4798      	blx	r3
 800acea:	4603      	mov	r3, r0
 800acec:	2b00      	cmp	r3, #0
 800acee:	d001      	beq.n	800acf4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800acf0:	2303      	movs	r3, #3
 800acf2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800acfe:	b480      	push	{r7}
 800ad00:	b083      	sub	sp, #12
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
 800ad06:	460b      	mov	r3, r1
 800ad08:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ad0a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	370c      	adds	r7, #12
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	460b      	mov	r3, r1
 800ad22:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ad24:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	370c      	adds	r7, #12
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr

0800ad32 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b086      	sub	sp, #24
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ad46:	2300      	movs	r3, #0
 800ad48:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	885b      	ldrh	r3, [r3, #2]
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	7812      	ldrb	r2, [r2, #0]
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d91f      	bls.n	800ad98 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ad5e:	e013      	b.n	800ad88 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ad60:	f107 030a 	add.w	r3, r7, #10
 800ad64:	4619      	mov	r1, r3
 800ad66:	6978      	ldr	r0, [r7, #20]
 800ad68:	f000 f81b 	bl	800ada2 <USBD_GetNextDesc>
 800ad6c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	785b      	ldrb	r3, [r3, #1]
 800ad72:	2b05      	cmp	r3, #5
 800ad74:	d108      	bne.n	800ad88 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	789b      	ldrb	r3, [r3, #2]
 800ad7e:	78fa      	ldrb	r2, [r7, #3]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d008      	beq.n	800ad96 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ad84:	2300      	movs	r3, #0
 800ad86:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	885b      	ldrh	r3, [r3, #2]
 800ad8c:	b29a      	uxth	r2, r3
 800ad8e:	897b      	ldrh	r3, [r7, #10]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d8e5      	bhi.n	800ad60 <USBD_GetEpDesc+0x2e>
 800ad94:	e000      	b.n	800ad98 <USBD_GetEpDesc+0x66>
          break;
 800ad96:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ad98:	693b      	ldr	r3, [r7, #16]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3718      	adds	r7, #24
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ada2:	b480      	push	{r7}
 800ada4:	b085      	sub	sp, #20
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	881b      	ldrh	r3, [r3, #0]
 800adb4:	68fa      	ldr	r2, [r7, #12]
 800adb6:	7812      	ldrb	r2, [r2, #0]
 800adb8:	4413      	add	r3, r2
 800adba:	b29a      	uxth	r2, r3
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	461a      	mov	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	4413      	add	r3, r2
 800adca:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800adcc:	68fb      	ldr	r3, [r7, #12]
}
 800adce:	4618      	mov	r0, r3
 800add0:	3714      	adds	r7, #20
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr

0800adda <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800adda:	b480      	push	{r7}
 800addc:	b087      	sub	sp, #28
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	3301      	adds	r3, #1
 800adf0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800adf8:	8a3b      	ldrh	r3, [r7, #16]
 800adfa:	021b      	lsls	r3, r3, #8
 800adfc:	b21a      	sxth	r2, r3
 800adfe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	b21b      	sxth	r3, r3
 800ae06:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ae08:	89fb      	ldrh	r3, [r7, #14]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	371c      	adds	r7, #28
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr
	...

0800ae18 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae2e:	2b40      	cmp	r3, #64	@ 0x40
 800ae30:	d005      	beq.n	800ae3e <USBD_StdDevReq+0x26>
 800ae32:	2b40      	cmp	r3, #64	@ 0x40
 800ae34:	d857      	bhi.n	800aee6 <USBD_StdDevReq+0xce>
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00f      	beq.n	800ae5a <USBD_StdDevReq+0x42>
 800ae3a:	2b20      	cmp	r3, #32
 800ae3c:	d153      	bne.n	800aee6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	32ae      	adds	r2, #174	@ 0xae
 800ae48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	6839      	ldr	r1, [r7, #0]
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	4798      	blx	r3
 800ae54:	4603      	mov	r3, r0
 800ae56:	73fb      	strb	r3, [r7, #15]
      break;
 800ae58:	e04a      	b.n	800aef0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	785b      	ldrb	r3, [r3, #1]
 800ae5e:	2b09      	cmp	r3, #9
 800ae60:	d83b      	bhi.n	800aeda <USBD_StdDevReq+0xc2>
 800ae62:	a201      	add	r2, pc, #4	@ (adr r2, 800ae68 <USBD_StdDevReq+0x50>)
 800ae64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae68:	0800aebd 	.word	0x0800aebd
 800ae6c:	0800aed1 	.word	0x0800aed1
 800ae70:	0800aedb 	.word	0x0800aedb
 800ae74:	0800aec7 	.word	0x0800aec7
 800ae78:	0800aedb 	.word	0x0800aedb
 800ae7c:	0800ae9b 	.word	0x0800ae9b
 800ae80:	0800ae91 	.word	0x0800ae91
 800ae84:	0800aedb 	.word	0x0800aedb
 800ae88:	0800aeb3 	.word	0x0800aeb3
 800ae8c:	0800aea5 	.word	0x0800aea5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ae90:	6839      	ldr	r1, [r7, #0]
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f000 fa3c 	bl	800b310 <USBD_GetDescriptor>
          break;
 800ae98:	e024      	b.n	800aee4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ae9a:	6839      	ldr	r1, [r7, #0]
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 fba1 	bl	800b5e4 <USBD_SetAddress>
          break;
 800aea2:	e01f      	b.n	800aee4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aea4:	6839      	ldr	r1, [r7, #0]
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 fbe0 	bl	800b66c <USBD_SetConfig>
 800aeac:	4603      	mov	r3, r0
 800aeae:	73fb      	strb	r3, [r7, #15]
          break;
 800aeb0:	e018      	b.n	800aee4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aeb2:	6839      	ldr	r1, [r7, #0]
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 fc83 	bl	800b7c0 <USBD_GetConfig>
          break;
 800aeba:	e013      	b.n	800aee4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aebc:	6839      	ldr	r1, [r7, #0]
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 fcb4 	bl	800b82c <USBD_GetStatus>
          break;
 800aec4:	e00e      	b.n	800aee4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aec6:	6839      	ldr	r1, [r7, #0]
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fce3 	bl	800b894 <USBD_SetFeature>
          break;
 800aece:	e009      	b.n	800aee4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aed0:	6839      	ldr	r1, [r7, #0]
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 fd07 	bl	800b8e6 <USBD_ClrFeature>
          break;
 800aed8:	e004      	b.n	800aee4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800aeda:	6839      	ldr	r1, [r7, #0]
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 fd5e 	bl	800b99e <USBD_CtlError>
          break;
 800aee2:	bf00      	nop
      }
      break;
 800aee4:	e004      	b.n	800aef0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800aee6:	6839      	ldr	r1, [r7, #0]
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 fd58 	bl	800b99e <USBD_CtlError>
      break;
 800aeee:	bf00      	nop
  }

  return ret;
 800aef0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3710      	adds	r7, #16
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop

0800aefc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af06:	2300      	movs	r3, #0
 800af08:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800af12:	2b40      	cmp	r3, #64	@ 0x40
 800af14:	d005      	beq.n	800af22 <USBD_StdItfReq+0x26>
 800af16:	2b40      	cmp	r3, #64	@ 0x40
 800af18:	d852      	bhi.n	800afc0 <USBD_StdItfReq+0xc4>
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d001      	beq.n	800af22 <USBD_StdItfReq+0x26>
 800af1e:	2b20      	cmp	r3, #32
 800af20:	d14e      	bne.n	800afc0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	3b01      	subs	r3, #1
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d840      	bhi.n	800afb2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	889b      	ldrh	r3, [r3, #4]
 800af34:	b2db      	uxtb	r3, r3
 800af36:	2b01      	cmp	r3, #1
 800af38:	d836      	bhi.n	800afa8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	889b      	ldrh	r3, [r3, #4]
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	4619      	mov	r1, r3
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f7ff fedb 	bl	800acfe <USBD_CoreFindIF>
 800af48:	4603      	mov	r3, r0
 800af4a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af4c:	7bbb      	ldrb	r3, [r7, #14]
 800af4e:	2bff      	cmp	r3, #255	@ 0xff
 800af50:	d01d      	beq.n	800af8e <USBD_StdItfReq+0x92>
 800af52:	7bbb      	ldrb	r3, [r7, #14]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d11a      	bne.n	800af8e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800af58:	7bba      	ldrb	r2, [r7, #14]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	32ae      	adds	r2, #174	@ 0xae
 800af5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af62:	689b      	ldr	r3, [r3, #8]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d00f      	beq.n	800af88 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800af68:	7bba      	ldrb	r2, [r7, #14]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800af70:	7bba      	ldrb	r2, [r7, #14]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	32ae      	adds	r2, #174	@ 0xae
 800af76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	6839      	ldr	r1, [r7, #0]
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	4798      	blx	r3
 800af82:	4603      	mov	r3, r0
 800af84:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af86:	e004      	b.n	800af92 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800af88:	2303      	movs	r3, #3
 800af8a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800af8c:	e001      	b.n	800af92 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800af8e:	2303      	movs	r3, #3
 800af90:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	88db      	ldrh	r3, [r3, #6]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d110      	bne.n	800afbc <USBD_StdItfReq+0xc0>
 800af9a:	7bfb      	ldrb	r3, [r7, #15]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d10d      	bne.n	800afbc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 fdd3 	bl	800bb4c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800afa6:	e009      	b.n	800afbc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800afa8:	6839      	ldr	r1, [r7, #0]
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 fcf7 	bl	800b99e <USBD_CtlError>
          break;
 800afb0:	e004      	b.n	800afbc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800afb2:	6839      	ldr	r1, [r7, #0]
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 fcf2 	bl	800b99e <USBD_CtlError>
          break;
 800afba:	e000      	b.n	800afbe <USBD_StdItfReq+0xc2>
          break;
 800afbc:	bf00      	nop
      }
      break;
 800afbe:	e004      	b.n	800afca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800afc0:	6839      	ldr	r1, [r7, #0]
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 fceb 	bl	800b99e <USBD_CtlError>
      break;
 800afc8:	bf00      	nop
  }

  return ret;
 800afca:	7bfb      	ldrb	r3, [r7, #15]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3710      	adds	r7, #16
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800afde:	2300      	movs	r3, #0
 800afe0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	889b      	ldrh	r3, [r3, #4]
 800afe6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aff0:	2b40      	cmp	r3, #64	@ 0x40
 800aff2:	d007      	beq.n	800b004 <USBD_StdEPReq+0x30>
 800aff4:	2b40      	cmp	r3, #64	@ 0x40
 800aff6:	f200 817f 	bhi.w	800b2f8 <USBD_StdEPReq+0x324>
 800affa:	2b00      	cmp	r3, #0
 800affc:	d02a      	beq.n	800b054 <USBD_StdEPReq+0x80>
 800affe:	2b20      	cmp	r3, #32
 800b000:	f040 817a 	bne.w	800b2f8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b004:	7bbb      	ldrb	r3, [r7, #14]
 800b006:	4619      	mov	r1, r3
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f7ff fe85 	bl	800ad18 <USBD_CoreFindEP>
 800b00e:	4603      	mov	r3, r0
 800b010:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b012:	7b7b      	ldrb	r3, [r7, #13]
 800b014:	2bff      	cmp	r3, #255	@ 0xff
 800b016:	f000 8174 	beq.w	800b302 <USBD_StdEPReq+0x32e>
 800b01a:	7b7b      	ldrb	r3, [r7, #13]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f040 8170 	bne.w	800b302 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b022:	7b7a      	ldrb	r2, [r7, #13]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b02a:	7b7a      	ldrb	r2, [r7, #13]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	32ae      	adds	r2, #174	@ 0xae
 800b030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b034:	689b      	ldr	r3, [r3, #8]
 800b036:	2b00      	cmp	r3, #0
 800b038:	f000 8163 	beq.w	800b302 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b03c:	7b7a      	ldrb	r2, [r7, #13]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	32ae      	adds	r2, #174	@ 0xae
 800b042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	6839      	ldr	r1, [r7, #0]
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	4798      	blx	r3
 800b04e:	4603      	mov	r3, r0
 800b050:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b052:	e156      	b.n	800b302 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	785b      	ldrb	r3, [r3, #1]
 800b058:	2b03      	cmp	r3, #3
 800b05a:	d008      	beq.n	800b06e <USBD_StdEPReq+0x9a>
 800b05c:	2b03      	cmp	r3, #3
 800b05e:	f300 8145 	bgt.w	800b2ec <USBD_StdEPReq+0x318>
 800b062:	2b00      	cmp	r3, #0
 800b064:	f000 809b 	beq.w	800b19e <USBD_StdEPReq+0x1ca>
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d03c      	beq.n	800b0e6 <USBD_StdEPReq+0x112>
 800b06c:	e13e      	b.n	800b2ec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b074:	b2db      	uxtb	r3, r3
 800b076:	2b02      	cmp	r3, #2
 800b078:	d002      	beq.n	800b080 <USBD_StdEPReq+0xac>
 800b07a:	2b03      	cmp	r3, #3
 800b07c:	d016      	beq.n	800b0ac <USBD_StdEPReq+0xd8>
 800b07e:	e02c      	b.n	800b0da <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b080:	7bbb      	ldrb	r3, [r7, #14]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d00d      	beq.n	800b0a2 <USBD_StdEPReq+0xce>
 800b086:	7bbb      	ldrb	r3, [r7, #14]
 800b088:	2b80      	cmp	r3, #128	@ 0x80
 800b08a:	d00a      	beq.n	800b0a2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b08c:	7bbb      	ldrb	r3, [r7, #14]
 800b08e:	4619      	mov	r1, r3
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f001 f96b 	bl	800c36c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b096:	2180      	movs	r1, #128	@ 0x80
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f001 f967 	bl	800c36c <USBD_LL_StallEP>
 800b09e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0a0:	e020      	b.n	800b0e4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b0a2:	6839      	ldr	r1, [r7, #0]
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 fc7a 	bl	800b99e <USBD_CtlError>
              break;
 800b0aa:	e01b      	b.n	800b0e4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	885b      	ldrh	r3, [r3, #2]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d10e      	bne.n	800b0d2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b0b4:	7bbb      	ldrb	r3, [r7, #14]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d00b      	beq.n	800b0d2 <USBD_StdEPReq+0xfe>
 800b0ba:	7bbb      	ldrb	r3, [r7, #14]
 800b0bc:	2b80      	cmp	r3, #128	@ 0x80
 800b0be:	d008      	beq.n	800b0d2 <USBD_StdEPReq+0xfe>
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	88db      	ldrh	r3, [r3, #6]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d104      	bne.n	800b0d2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0c8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f001 f94d 	bl	800c36c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 fd3a 	bl	800bb4c <USBD_CtlSendStatus>

              break;
 800b0d8:	e004      	b.n	800b0e4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b0da:	6839      	ldr	r1, [r7, #0]
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 fc5e 	bl	800b99e <USBD_CtlError>
              break;
 800b0e2:	bf00      	nop
          }
          break;
 800b0e4:	e107      	b.n	800b2f6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	2b02      	cmp	r3, #2
 800b0f0:	d002      	beq.n	800b0f8 <USBD_StdEPReq+0x124>
 800b0f2:	2b03      	cmp	r3, #3
 800b0f4:	d016      	beq.n	800b124 <USBD_StdEPReq+0x150>
 800b0f6:	e04b      	b.n	800b190 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0f8:	7bbb      	ldrb	r3, [r7, #14]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d00d      	beq.n	800b11a <USBD_StdEPReq+0x146>
 800b0fe:	7bbb      	ldrb	r3, [r7, #14]
 800b100:	2b80      	cmp	r3, #128	@ 0x80
 800b102:	d00a      	beq.n	800b11a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b104:	7bbb      	ldrb	r3, [r7, #14]
 800b106:	4619      	mov	r1, r3
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f001 f92f 	bl	800c36c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b10e:	2180      	movs	r1, #128	@ 0x80
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f001 f92b 	bl	800c36c <USBD_LL_StallEP>
 800b116:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b118:	e040      	b.n	800b19c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b11a:	6839      	ldr	r1, [r7, #0]
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 fc3e 	bl	800b99e <USBD_CtlError>
              break;
 800b122:	e03b      	b.n	800b19c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	885b      	ldrh	r3, [r3, #2]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d136      	bne.n	800b19a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b12c:	7bbb      	ldrb	r3, [r7, #14]
 800b12e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b132:	2b00      	cmp	r3, #0
 800b134:	d004      	beq.n	800b140 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b136:	7bbb      	ldrb	r3, [r7, #14]
 800b138:	4619      	mov	r1, r3
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f001 f935 	bl	800c3aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 fd03 	bl	800bb4c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b146:	7bbb      	ldrb	r3, [r7, #14]
 800b148:	4619      	mov	r1, r3
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f7ff fde4 	bl	800ad18 <USBD_CoreFindEP>
 800b150:	4603      	mov	r3, r0
 800b152:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b154:	7b7b      	ldrb	r3, [r7, #13]
 800b156:	2bff      	cmp	r3, #255	@ 0xff
 800b158:	d01f      	beq.n	800b19a <USBD_StdEPReq+0x1c6>
 800b15a:	7b7b      	ldrb	r3, [r7, #13]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d11c      	bne.n	800b19a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b160:	7b7a      	ldrb	r2, [r7, #13]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b168:	7b7a      	ldrb	r2, [r7, #13]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	32ae      	adds	r2, #174	@ 0xae
 800b16e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d010      	beq.n	800b19a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b178:	7b7a      	ldrb	r2, [r7, #13]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	32ae      	adds	r2, #174	@ 0xae
 800b17e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	6839      	ldr	r1, [r7, #0]
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	4798      	blx	r3
 800b18a:	4603      	mov	r3, r0
 800b18c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b18e:	e004      	b.n	800b19a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b190:	6839      	ldr	r1, [r7, #0]
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fc03 	bl	800b99e <USBD_CtlError>
              break;
 800b198:	e000      	b.n	800b19c <USBD_StdEPReq+0x1c8>
              break;
 800b19a:	bf00      	nop
          }
          break;
 800b19c:	e0ab      	b.n	800b2f6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	2b02      	cmp	r3, #2
 800b1a8:	d002      	beq.n	800b1b0 <USBD_StdEPReq+0x1dc>
 800b1aa:	2b03      	cmp	r3, #3
 800b1ac:	d032      	beq.n	800b214 <USBD_StdEPReq+0x240>
 800b1ae:	e097      	b.n	800b2e0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1b0:	7bbb      	ldrb	r3, [r7, #14]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d007      	beq.n	800b1c6 <USBD_StdEPReq+0x1f2>
 800b1b6:	7bbb      	ldrb	r3, [r7, #14]
 800b1b8:	2b80      	cmp	r3, #128	@ 0x80
 800b1ba:	d004      	beq.n	800b1c6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b1bc:	6839      	ldr	r1, [r7, #0]
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 fbed 	bl	800b99e <USBD_CtlError>
                break;
 800b1c4:	e091      	b.n	800b2ea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	da0b      	bge.n	800b1e6 <USBD_StdEPReq+0x212>
 800b1ce:	7bbb      	ldrb	r3, [r7, #14]
 800b1d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	4413      	add	r3, r2
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	3310      	adds	r3, #16
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	3304      	adds	r3, #4
 800b1e4:	e00b      	b.n	800b1fe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1e6:	7bbb      	ldrb	r3, [r7, #14]
 800b1e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	4413      	add	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	3304      	adds	r3, #4
 800b1fe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	2200      	movs	r2, #0
 800b204:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	2202      	movs	r2, #2
 800b20a:	4619      	mov	r1, r3
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 fc43 	bl	800ba98 <USBD_CtlSendData>
              break;
 800b212:	e06a      	b.n	800b2ea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b214:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	da11      	bge.n	800b240 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b21c:	7bbb      	ldrb	r3, [r7, #14]
 800b21e:	f003 020f 	and.w	r2, r3, #15
 800b222:	6879      	ldr	r1, [r7, #4]
 800b224:	4613      	mov	r3, r2
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	4413      	add	r3, r2
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	440b      	add	r3, r1
 800b22e:	3324      	adds	r3, #36	@ 0x24
 800b230:	881b      	ldrh	r3, [r3, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d117      	bne.n	800b266 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b236:	6839      	ldr	r1, [r7, #0]
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 fbb0 	bl	800b99e <USBD_CtlError>
                  break;
 800b23e:	e054      	b.n	800b2ea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b240:	7bbb      	ldrb	r3, [r7, #14]
 800b242:	f003 020f 	and.w	r2, r3, #15
 800b246:	6879      	ldr	r1, [r7, #4]
 800b248:	4613      	mov	r3, r2
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	4413      	add	r3, r2
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	440b      	add	r3, r1
 800b252:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b256:	881b      	ldrh	r3, [r3, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d104      	bne.n	800b266 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b25c:	6839      	ldr	r1, [r7, #0]
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f000 fb9d 	bl	800b99e <USBD_CtlError>
                  break;
 800b264:	e041      	b.n	800b2ea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b266:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	da0b      	bge.n	800b286 <USBD_StdEPReq+0x2b2>
 800b26e:	7bbb      	ldrb	r3, [r7, #14]
 800b270:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b274:	4613      	mov	r3, r2
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	4413      	add	r3, r2
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	3310      	adds	r3, #16
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	4413      	add	r3, r2
 800b282:	3304      	adds	r3, #4
 800b284:	e00b      	b.n	800b29e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b286:	7bbb      	ldrb	r3, [r7, #14]
 800b288:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b28c:	4613      	mov	r3, r2
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	4413      	add	r3, r2
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	4413      	add	r3, r2
 800b29c:	3304      	adds	r3, #4
 800b29e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b2a0:	7bbb      	ldrb	r3, [r7, #14]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d002      	beq.n	800b2ac <USBD_StdEPReq+0x2d8>
 800b2a6:	7bbb      	ldrb	r3, [r7, #14]
 800b2a8:	2b80      	cmp	r3, #128	@ 0x80
 800b2aa:	d103      	bne.n	800b2b4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	601a      	str	r2, [r3, #0]
 800b2b2:	e00e      	b.n	800b2d2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b2b4:	7bbb      	ldrb	r3, [r7, #14]
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f001 f895 	bl	800c3e8 <USBD_LL_IsStallEP>
 800b2be:	4603      	mov	r3, r0
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d003      	beq.n	800b2cc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	601a      	str	r2, [r3, #0]
 800b2ca:	e002      	b.n	800b2d2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	2202      	movs	r2, #2
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 fbdd 	bl	800ba98 <USBD_CtlSendData>
              break;
 800b2de:	e004      	b.n	800b2ea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b2e0:	6839      	ldr	r1, [r7, #0]
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 fb5b 	bl	800b99e <USBD_CtlError>
              break;
 800b2e8:	bf00      	nop
          }
          break;
 800b2ea:	e004      	b.n	800b2f6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b2ec:	6839      	ldr	r1, [r7, #0]
 800b2ee:	6878      	ldr	r0, [r7, #4]
 800b2f0:	f000 fb55 	bl	800b99e <USBD_CtlError>
          break;
 800b2f4:	bf00      	nop
      }
      break;
 800b2f6:	e005      	b.n	800b304 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b2f8:	6839      	ldr	r1, [r7, #0]
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 fb4f 	bl	800b99e <USBD_CtlError>
      break;
 800b300:	e000      	b.n	800b304 <USBD_StdEPReq+0x330>
      break;
 800b302:	bf00      	nop
  }

  return ret;
 800b304:	7bfb      	ldrb	r3, [r7, #15]
}
 800b306:	4618      	mov	r0, r3
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
	...

0800b310 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b31a:	2300      	movs	r3, #0
 800b31c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b31e:	2300      	movs	r3, #0
 800b320:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b322:	2300      	movs	r3, #0
 800b324:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	885b      	ldrh	r3, [r3, #2]
 800b32a:	0a1b      	lsrs	r3, r3, #8
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	3b01      	subs	r3, #1
 800b330:	2b06      	cmp	r3, #6
 800b332:	f200 8128 	bhi.w	800b586 <USBD_GetDescriptor+0x276>
 800b336:	a201      	add	r2, pc, #4	@ (adr r2, 800b33c <USBD_GetDescriptor+0x2c>)
 800b338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b33c:	0800b359 	.word	0x0800b359
 800b340:	0800b371 	.word	0x0800b371
 800b344:	0800b3b1 	.word	0x0800b3b1
 800b348:	0800b587 	.word	0x0800b587
 800b34c:	0800b587 	.word	0x0800b587
 800b350:	0800b527 	.word	0x0800b527
 800b354:	0800b553 	.word	0x0800b553
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	7c12      	ldrb	r2, [r2, #16]
 800b364:	f107 0108 	add.w	r1, r7, #8
 800b368:	4610      	mov	r0, r2
 800b36a:	4798      	blx	r3
 800b36c:	60f8      	str	r0, [r7, #12]
      break;
 800b36e:	e112      	b.n	800b596 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	7c1b      	ldrb	r3, [r3, #16]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d10d      	bne.n	800b394 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b37e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b380:	f107 0208 	add.w	r2, r7, #8
 800b384:	4610      	mov	r0, r2
 800b386:	4798      	blx	r3
 800b388:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	3301      	adds	r3, #1
 800b38e:	2202      	movs	r2, #2
 800b390:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b392:	e100      	b.n	800b596 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b39a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b39c:	f107 0208 	add.w	r2, r7, #8
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	4798      	blx	r3
 800b3a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	2202      	movs	r2, #2
 800b3ac:	701a      	strb	r2, [r3, #0]
      break;
 800b3ae:	e0f2      	b.n	800b596 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	885b      	ldrh	r3, [r3, #2]
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	2b05      	cmp	r3, #5
 800b3b8:	f200 80ac 	bhi.w	800b514 <USBD_GetDescriptor+0x204>
 800b3bc:	a201      	add	r2, pc, #4	@ (adr r2, 800b3c4 <USBD_GetDescriptor+0xb4>)
 800b3be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3c2:	bf00      	nop
 800b3c4:	0800b3dd 	.word	0x0800b3dd
 800b3c8:	0800b411 	.word	0x0800b411
 800b3cc:	0800b445 	.word	0x0800b445
 800b3d0:	0800b479 	.word	0x0800b479
 800b3d4:	0800b4ad 	.word	0x0800b4ad
 800b3d8:	0800b4e1 	.word	0x0800b4e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00b      	beq.n	800b400 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	7c12      	ldrb	r2, [r2, #16]
 800b3f4:	f107 0108 	add.w	r1, r7, #8
 800b3f8:	4610      	mov	r0, r2
 800b3fa:	4798      	blx	r3
 800b3fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3fe:	e091      	b.n	800b524 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b400:	6839      	ldr	r1, [r7, #0]
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 facb 	bl	800b99e <USBD_CtlError>
            err++;
 800b408:	7afb      	ldrb	r3, [r7, #11]
 800b40a:	3301      	adds	r3, #1
 800b40c:	72fb      	strb	r3, [r7, #11]
          break;
 800b40e:	e089      	b.n	800b524 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00b      	beq.n	800b434 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	7c12      	ldrb	r2, [r2, #16]
 800b428:	f107 0108 	add.w	r1, r7, #8
 800b42c:	4610      	mov	r0, r2
 800b42e:	4798      	blx	r3
 800b430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b432:	e077      	b.n	800b524 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b434:	6839      	ldr	r1, [r7, #0]
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 fab1 	bl	800b99e <USBD_CtlError>
            err++;
 800b43c:	7afb      	ldrb	r3, [r7, #11]
 800b43e:	3301      	adds	r3, #1
 800b440:	72fb      	strb	r3, [r7, #11]
          break;
 800b442:	e06f      	b.n	800b524 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b44a:	68db      	ldr	r3, [r3, #12]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00b      	beq.n	800b468 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b456:	68db      	ldr	r3, [r3, #12]
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	7c12      	ldrb	r2, [r2, #16]
 800b45c:	f107 0108 	add.w	r1, r7, #8
 800b460:	4610      	mov	r0, r2
 800b462:	4798      	blx	r3
 800b464:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b466:	e05d      	b.n	800b524 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b468:	6839      	ldr	r1, [r7, #0]
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 fa97 	bl	800b99e <USBD_CtlError>
            err++;
 800b470:	7afb      	ldrb	r3, [r7, #11]
 800b472:	3301      	adds	r3, #1
 800b474:	72fb      	strb	r3, [r7, #11]
          break;
 800b476:	e055      	b.n	800b524 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b47e:	691b      	ldr	r3, [r3, #16]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d00b      	beq.n	800b49c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b48a:	691b      	ldr	r3, [r3, #16]
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	7c12      	ldrb	r2, [r2, #16]
 800b490:	f107 0108 	add.w	r1, r7, #8
 800b494:	4610      	mov	r0, r2
 800b496:	4798      	blx	r3
 800b498:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b49a:	e043      	b.n	800b524 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b49c:	6839      	ldr	r1, [r7, #0]
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f000 fa7d 	bl	800b99e <USBD_CtlError>
            err++;
 800b4a4:	7afb      	ldrb	r3, [r7, #11]
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b4aa:	e03b      	b.n	800b524 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4b2:	695b      	ldr	r3, [r3, #20]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d00b      	beq.n	800b4d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4be:	695b      	ldr	r3, [r3, #20]
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	7c12      	ldrb	r2, [r2, #16]
 800b4c4:	f107 0108 	add.w	r1, r7, #8
 800b4c8:	4610      	mov	r0, r2
 800b4ca:	4798      	blx	r3
 800b4cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4ce:	e029      	b.n	800b524 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b4d0:	6839      	ldr	r1, [r7, #0]
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 fa63 	bl	800b99e <USBD_CtlError>
            err++;
 800b4d8:	7afb      	ldrb	r3, [r7, #11]
 800b4da:	3301      	adds	r3, #1
 800b4dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b4de:	e021      	b.n	800b524 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4e6:	699b      	ldr	r3, [r3, #24]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00b      	beq.n	800b504 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b4f2:	699b      	ldr	r3, [r3, #24]
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	7c12      	ldrb	r2, [r2, #16]
 800b4f8:	f107 0108 	add.w	r1, r7, #8
 800b4fc:	4610      	mov	r0, r2
 800b4fe:	4798      	blx	r3
 800b500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b502:	e00f      	b.n	800b524 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b504:	6839      	ldr	r1, [r7, #0]
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 fa49 	bl	800b99e <USBD_CtlError>
            err++;
 800b50c:	7afb      	ldrb	r3, [r7, #11]
 800b50e:	3301      	adds	r3, #1
 800b510:	72fb      	strb	r3, [r7, #11]
          break;
 800b512:	e007      	b.n	800b524 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b514:	6839      	ldr	r1, [r7, #0]
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 fa41 	bl	800b99e <USBD_CtlError>
          err++;
 800b51c:	7afb      	ldrb	r3, [r7, #11]
 800b51e:	3301      	adds	r3, #1
 800b520:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b522:	bf00      	nop
      }
      break;
 800b524:	e037      	b.n	800b596 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	7c1b      	ldrb	r3, [r3, #16]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d109      	bne.n	800b542 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b536:	f107 0208 	add.w	r2, r7, #8
 800b53a:	4610      	mov	r0, r2
 800b53c:	4798      	blx	r3
 800b53e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b540:	e029      	b.n	800b596 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b542:	6839      	ldr	r1, [r7, #0]
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 fa2a 	bl	800b99e <USBD_CtlError>
        err++;
 800b54a:	7afb      	ldrb	r3, [r7, #11]
 800b54c:	3301      	adds	r3, #1
 800b54e:	72fb      	strb	r3, [r7, #11]
      break;
 800b550:	e021      	b.n	800b596 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	7c1b      	ldrb	r3, [r3, #16]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d10d      	bne.n	800b576 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b562:	f107 0208 	add.w	r2, r7, #8
 800b566:	4610      	mov	r0, r2
 800b568:	4798      	blx	r3
 800b56a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	3301      	adds	r3, #1
 800b570:	2207      	movs	r2, #7
 800b572:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b574:	e00f      	b.n	800b596 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b576:	6839      	ldr	r1, [r7, #0]
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 fa10 	bl	800b99e <USBD_CtlError>
        err++;
 800b57e:	7afb      	ldrb	r3, [r7, #11]
 800b580:	3301      	adds	r3, #1
 800b582:	72fb      	strb	r3, [r7, #11]
      break;
 800b584:	e007      	b.n	800b596 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b586:	6839      	ldr	r1, [r7, #0]
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 fa08 	bl	800b99e <USBD_CtlError>
      err++;
 800b58e:	7afb      	ldrb	r3, [r7, #11]
 800b590:	3301      	adds	r3, #1
 800b592:	72fb      	strb	r3, [r7, #11]
      break;
 800b594:	bf00      	nop
  }

  if (err != 0U)
 800b596:	7afb      	ldrb	r3, [r7, #11]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d11e      	bne.n	800b5da <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	88db      	ldrh	r3, [r3, #6]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d016      	beq.n	800b5d2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b5a4:	893b      	ldrh	r3, [r7, #8]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00e      	beq.n	800b5c8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	88da      	ldrh	r2, [r3, #6]
 800b5ae:	893b      	ldrh	r3, [r7, #8]
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	bf28      	it	cs
 800b5b4:	4613      	movcs	r3, r2
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b5ba:	893b      	ldrh	r3, [r7, #8]
 800b5bc:	461a      	mov	r2, r3
 800b5be:	68f9      	ldr	r1, [r7, #12]
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 fa69 	bl	800ba98 <USBD_CtlSendData>
 800b5c6:	e009      	b.n	800b5dc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b5c8:	6839      	ldr	r1, [r7, #0]
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 f9e7 	bl	800b99e <USBD_CtlError>
 800b5d0:	e004      	b.n	800b5dc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 faba 	bl	800bb4c <USBD_CtlSendStatus>
 800b5d8:	e000      	b.n	800b5dc <USBD_GetDescriptor+0x2cc>
    return;
 800b5da:	bf00      	nop
  }
}
 800b5dc:	3710      	adds	r7, #16
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop

0800b5e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	889b      	ldrh	r3, [r3, #4]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d131      	bne.n	800b65a <USBD_SetAddress+0x76>
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	88db      	ldrh	r3, [r3, #6]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d12d      	bne.n	800b65a <USBD_SetAddress+0x76>
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	885b      	ldrh	r3, [r3, #2]
 800b602:	2b7f      	cmp	r3, #127	@ 0x7f
 800b604:	d829      	bhi.n	800b65a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	885b      	ldrh	r3, [r3, #2]
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b610:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b618:	b2db      	uxtb	r3, r3
 800b61a:	2b03      	cmp	r3, #3
 800b61c:	d104      	bne.n	800b628 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b61e:	6839      	ldr	r1, [r7, #0]
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 f9bc 	bl	800b99e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b626:	e01d      	b.n	800b664 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	7bfa      	ldrb	r2, [r7, #15]
 800b62c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b630:	7bfb      	ldrb	r3, [r7, #15]
 800b632:	4619      	mov	r1, r3
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 ff03 	bl	800c440 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 fa86 	bl	800bb4c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b640:	7bfb      	ldrb	r3, [r7, #15]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d004      	beq.n	800b650 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2202      	movs	r2, #2
 800b64a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b64e:	e009      	b.n	800b664 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2201      	movs	r2, #1
 800b654:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b658:	e004      	b.n	800b664 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b65a:	6839      	ldr	r1, [r7, #0]
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 f99e 	bl	800b99e <USBD_CtlError>
  }
}
 800b662:	bf00      	nop
 800b664:	bf00      	nop
 800b666:	3710      	adds	r7, #16
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b676:	2300      	movs	r3, #0
 800b678:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	885b      	ldrh	r3, [r3, #2]
 800b67e:	b2da      	uxtb	r2, r3
 800b680:	4b4e      	ldr	r3, [pc, #312]	@ (800b7bc <USBD_SetConfig+0x150>)
 800b682:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b684:	4b4d      	ldr	r3, [pc, #308]	@ (800b7bc <USBD_SetConfig+0x150>)
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d905      	bls.n	800b698 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b68c:	6839      	ldr	r1, [r7, #0]
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 f985 	bl	800b99e <USBD_CtlError>
    return USBD_FAIL;
 800b694:	2303      	movs	r3, #3
 800b696:	e08c      	b.n	800b7b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	2b02      	cmp	r3, #2
 800b6a2:	d002      	beq.n	800b6aa <USBD_SetConfig+0x3e>
 800b6a4:	2b03      	cmp	r3, #3
 800b6a6:	d029      	beq.n	800b6fc <USBD_SetConfig+0x90>
 800b6a8:	e075      	b.n	800b796 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b6aa:	4b44      	ldr	r3, [pc, #272]	@ (800b7bc <USBD_SetConfig+0x150>)
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d020      	beq.n	800b6f4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b6b2:	4b42      	ldr	r3, [pc, #264]	@ (800b7bc <USBD_SetConfig+0x150>)
 800b6b4:	781b      	ldrb	r3, [r3, #0]
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b6bc:	4b3f      	ldr	r3, [pc, #252]	@ (800b7bc <USBD_SetConfig+0x150>)
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f7fe ffe3 	bl	800a68e <USBD_SetClassConfig>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b6cc:	7bfb      	ldrb	r3, [r7, #15]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d008      	beq.n	800b6e4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b6d2:	6839      	ldr	r1, [r7, #0]
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 f962 	bl	800b99e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2202      	movs	r2, #2
 800b6de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b6e2:	e065      	b.n	800b7b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f000 fa31 	bl	800bb4c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2203      	movs	r2, #3
 800b6ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b6f2:	e05d      	b.n	800b7b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 fa29 	bl	800bb4c <USBD_CtlSendStatus>
      break;
 800b6fa:	e059      	b.n	800b7b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b6fc:	4b2f      	ldr	r3, [pc, #188]	@ (800b7bc <USBD_SetConfig+0x150>)
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d112      	bne.n	800b72a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2202      	movs	r2, #2
 800b708:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b70c:	4b2b      	ldr	r3, [pc, #172]	@ (800b7bc <USBD_SetConfig+0x150>)
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	461a      	mov	r2, r3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b716:	4b29      	ldr	r3, [pc, #164]	@ (800b7bc <USBD_SetConfig+0x150>)
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	4619      	mov	r1, r3
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f7fe ffd2 	bl	800a6c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 fa12 	bl	800bb4c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b728:	e042      	b.n	800b7b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b72a:	4b24      	ldr	r3, [pc, #144]	@ (800b7bc <USBD_SetConfig+0x150>)
 800b72c:	781b      	ldrb	r3, [r3, #0]
 800b72e:	461a      	mov	r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	429a      	cmp	r2, r3
 800b736:	d02a      	beq.n	800b78e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	b2db      	uxtb	r3, r3
 800b73e:	4619      	mov	r1, r3
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f7fe ffc0 	bl	800a6c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b746:	4b1d      	ldr	r3, [pc, #116]	@ (800b7bc <USBD_SetConfig+0x150>)
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	461a      	mov	r2, r3
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b750:	4b1a      	ldr	r3, [pc, #104]	@ (800b7bc <USBD_SetConfig+0x150>)
 800b752:	781b      	ldrb	r3, [r3, #0]
 800b754:	4619      	mov	r1, r3
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f7fe ff99 	bl	800a68e <USBD_SetClassConfig>
 800b75c:	4603      	mov	r3, r0
 800b75e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b760:	7bfb      	ldrb	r3, [r7, #15]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00f      	beq.n	800b786 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b766:	6839      	ldr	r1, [r7, #0]
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f000 f918 	bl	800b99e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	b2db      	uxtb	r3, r3
 800b774:	4619      	mov	r1, r3
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f7fe ffa5 	bl	800a6c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2202      	movs	r2, #2
 800b780:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b784:	e014      	b.n	800b7b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 f9e0 	bl	800bb4c <USBD_CtlSendStatus>
      break;
 800b78c:	e010      	b.n	800b7b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f9dc 	bl	800bb4c <USBD_CtlSendStatus>
      break;
 800b794:	e00c      	b.n	800b7b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b796:	6839      	ldr	r1, [r7, #0]
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 f900 	bl	800b99e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b79e:	4b07      	ldr	r3, [pc, #28]	@ (800b7bc <USBD_SetConfig+0x150>)
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f7fe ff8e 	bl	800a6c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b7aa:	2303      	movs	r3, #3
 800b7ac:	73fb      	strb	r3, [r7, #15]
      break;
 800b7ae:	bf00      	nop
  }

  return ret;
 800b7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3710      	adds	r7, #16
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	20000849 	.word	0x20000849

0800b7c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	88db      	ldrh	r3, [r3, #6]
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d004      	beq.n	800b7dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b7d2:	6839      	ldr	r1, [r7, #0]
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 f8e2 	bl	800b99e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b7da:	e023      	b.n	800b824 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7e2:	b2db      	uxtb	r3, r3
 800b7e4:	2b02      	cmp	r3, #2
 800b7e6:	dc02      	bgt.n	800b7ee <USBD_GetConfig+0x2e>
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	dc03      	bgt.n	800b7f4 <USBD_GetConfig+0x34>
 800b7ec:	e015      	b.n	800b81a <USBD_GetConfig+0x5a>
 800b7ee:	2b03      	cmp	r3, #3
 800b7f0:	d00b      	beq.n	800b80a <USBD_GetConfig+0x4a>
 800b7f2:	e012      	b.n	800b81a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	3308      	adds	r3, #8
 800b7fe:	2201      	movs	r2, #1
 800b800:	4619      	mov	r1, r3
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f000 f948 	bl	800ba98 <USBD_CtlSendData>
        break;
 800b808:	e00c      	b.n	800b824 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	3304      	adds	r3, #4
 800b80e:	2201      	movs	r2, #1
 800b810:	4619      	mov	r1, r3
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f000 f940 	bl	800ba98 <USBD_CtlSendData>
        break;
 800b818:	e004      	b.n	800b824 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b81a:	6839      	ldr	r1, [r7, #0]
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 f8be 	bl	800b99e <USBD_CtlError>
        break;
 800b822:	bf00      	nop
}
 800b824:	bf00      	nop
 800b826:	3708      	adds	r7, #8
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b83c:	b2db      	uxtb	r3, r3
 800b83e:	3b01      	subs	r3, #1
 800b840:	2b02      	cmp	r3, #2
 800b842:	d81e      	bhi.n	800b882 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	88db      	ldrh	r3, [r3, #6]
 800b848:	2b02      	cmp	r3, #2
 800b84a:	d004      	beq.n	800b856 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b84c:	6839      	ldr	r1, [r7, #0]
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 f8a5 	bl	800b99e <USBD_CtlError>
        break;
 800b854:	e01a      	b.n	800b88c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2201      	movs	r2, #1
 800b85a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b862:	2b00      	cmp	r3, #0
 800b864:	d005      	beq.n	800b872 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	68db      	ldr	r3, [r3, #12]
 800b86a:	f043 0202 	orr.w	r2, r3, #2
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	330c      	adds	r3, #12
 800b876:	2202      	movs	r2, #2
 800b878:	4619      	mov	r1, r3
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 f90c 	bl	800ba98 <USBD_CtlSendData>
      break;
 800b880:	e004      	b.n	800b88c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b882:	6839      	ldr	r1, [r7, #0]
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 f88a 	bl	800b99e <USBD_CtlError>
      break;
 800b88a:	bf00      	nop
  }
}
 800b88c:	bf00      	nop
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	885b      	ldrh	r3, [r3, #2]
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d107      	bne.n	800b8b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 f94c 	bl	800bb4c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b8b4:	e013      	b.n	800b8de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	885b      	ldrh	r3, [r3, #2]
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	d10b      	bne.n	800b8d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	889b      	ldrh	r3, [r3, #4]
 800b8c2:	0a1b      	lsrs	r3, r3, #8
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	b2da      	uxtb	r2, r3
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 f93c 	bl	800bb4c <USBD_CtlSendStatus>
}
 800b8d4:	e003      	b.n	800b8de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b8d6:	6839      	ldr	r1, [r7, #0]
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 f860 	bl	800b99e <USBD_CtlError>
}
 800b8de:	bf00      	nop
 800b8e0:	3708      	adds	r7, #8
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b082      	sub	sp, #8
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
 800b8ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8f6:	b2db      	uxtb	r3, r3
 800b8f8:	3b01      	subs	r3, #1
 800b8fa:	2b02      	cmp	r3, #2
 800b8fc:	d80b      	bhi.n	800b916 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	885b      	ldrh	r3, [r3, #2]
 800b902:	2b01      	cmp	r3, #1
 800b904:	d10c      	bne.n	800b920 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 f91c 	bl	800bb4c <USBD_CtlSendStatus>
      }
      break;
 800b914:	e004      	b.n	800b920 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b916:	6839      	ldr	r1, [r7, #0]
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 f840 	bl	800b99e <USBD_CtlError>
      break;
 800b91e:	e000      	b.n	800b922 <USBD_ClrFeature+0x3c>
      break;
 800b920:	bf00      	nop
  }
}
 800b922:	bf00      	nop
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}

0800b92a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b084      	sub	sp, #16
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
 800b932:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	781a      	ldrb	r2, [r3, #0]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	3301      	adds	r3, #1
 800b944:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	781a      	ldrb	r2, [r3, #0]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	3301      	adds	r3, #1
 800b952:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f7ff fa40 	bl	800adda <SWAPBYTE>
 800b95a:	4603      	mov	r3, r0
 800b95c:	461a      	mov	r2, r3
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	3301      	adds	r3, #1
 800b966:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	3301      	adds	r3, #1
 800b96c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b96e:	68f8      	ldr	r0, [r7, #12]
 800b970:	f7ff fa33 	bl	800adda <SWAPBYTE>
 800b974:	4603      	mov	r3, r0
 800b976:	461a      	mov	r2, r3
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	3301      	adds	r3, #1
 800b980:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	3301      	adds	r3, #1
 800b986:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f7ff fa26 	bl	800adda <SWAPBYTE>
 800b98e:	4603      	mov	r3, r0
 800b990:	461a      	mov	r2, r3
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	80da      	strh	r2, [r3, #6]
}
 800b996:	bf00      	nop
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}

0800b99e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b99e:	b580      	push	{r7, lr}
 800b9a0:	b082      	sub	sp, #8
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
 800b9a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9a8:	2180      	movs	r1, #128	@ 0x80
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 fcde 	bl	800c36c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 fcda 	bl	800c36c <USBD_LL_StallEP>
}
 800b9b8:	bf00      	nop
 800b9ba:	3708      	adds	r7, #8
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	60f8      	str	r0, [r7, #12]
 800b9c8:	60b9      	str	r1, [r7, #8]
 800b9ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d042      	beq.n	800ba5c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b9da:	6938      	ldr	r0, [r7, #16]
 800b9dc:	f000 f842 	bl	800ba64 <USBD_GetLen>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	005b      	lsls	r3, r3, #1
 800b9e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9ea:	d808      	bhi.n	800b9fe <USBD_GetString+0x3e>
 800b9ec:	6938      	ldr	r0, [r7, #16]
 800b9ee:	f000 f839 	bl	800ba64 <USBD_GetLen>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	005b      	lsls	r3, r3, #1
 800b9fa:	b29a      	uxth	r2, r3
 800b9fc:	e001      	b.n	800ba02 <USBD_GetString+0x42>
 800b9fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ba06:	7dfb      	ldrb	r3, [r7, #23]
 800ba08:	68ba      	ldr	r2, [r7, #8]
 800ba0a:	4413      	add	r3, r2
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	7812      	ldrb	r2, [r2, #0]
 800ba10:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba12:	7dfb      	ldrb	r3, [r7, #23]
 800ba14:	3301      	adds	r3, #1
 800ba16:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ba18:	7dfb      	ldrb	r3, [r7, #23]
 800ba1a:	68ba      	ldr	r2, [r7, #8]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	2203      	movs	r2, #3
 800ba20:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba22:	7dfb      	ldrb	r3, [r7, #23]
 800ba24:	3301      	adds	r3, #1
 800ba26:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ba28:	e013      	b.n	800ba52 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ba2a:	7dfb      	ldrb	r3, [r7, #23]
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	4413      	add	r3, r2
 800ba30:	693a      	ldr	r2, [r7, #16]
 800ba32:	7812      	ldrb	r2, [r2, #0]
 800ba34:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	3301      	adds	r3, #1
 800ba3a:	613b      	str	r3, [r7, #16]
    idx++;
 800ba3c:	7dfb      	ldrb	r3, [r7, #23]
 800ba3e:	3301      	adds	r3, #1
 800ba40:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ba42:	7dfb      	ldrb	r3, [r7, #23]
 800ba44:	68ba      	ldr	r2, [r7, #8]
 800ba46:	4413      	add	r3, r2
 800ba48:	2200      	movs	r2, #0
 800ba4a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ba4c:	7dfb      	ldrb	r3, [r7, #23]
 800ba4e:	3301      	adds	r3, #1
 800ba50:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d1e7      	bne.n	800ba2a <USBD_GetString+0x6a>
 800ba5a:	e000      	b.n	800ba5e <USBD_GetString+0x9e>
    return;
 800ba5c:	bf00      	nop
  }
}
 800ba5e:	3718      	adds	r7, #24
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b085      	sub	sp, #20
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ba74:	e005      	b.n	800ba82 <USBD_GetLen+0x1e>
  {
    len++;
 800ba76:	7bfb      	ldrb	r3, [r7, #15]
 800ba78:	3301      	adds	r3, #1
 800ba7a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d1f5      	bne.n	800ba76 <USBD_GetLen+0x12>
  }

  return len;
 800ba8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3714      	adds	r7, #20
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2202      	movs	r2, #2
 800baa8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	2100      	movs	r1, #0
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f000 fcdd 	bl	800c47e <USBD_LL_Transmit>

  return USBD_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}

0800bace <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bace:	b580      	push	{r7, lr}
 800bad0:	b084      	sub	sp, #16
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	60f8      	str	r0, [r7, #12]
 800bad6:	60b9      	str	r1, [r7, #8]
 800bad8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	68ba      	ldr	r2, [r7, #8]
 800bade:	2100      	movs	r1, #0
 800bae0:	68f8      	ldr	r0, [r7, #12]
 800bae2:	f000 fccc 	bl	800c47e <USBD_LL_Transmit>

  return USBD_OK;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3710      	adds	r7, #16
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2203      	movs	r2, #3
 800bb00:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	68ba      	ldr	r2, [r7, #8]
 800bb18:	2100      	movs	r1, #0
 800bb1a:	68f8      	ldr	r0, [r7, #12]
 800bb1c:	f000 fcd0 	bl	800c4c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb20:	2300      	movs	r3, #0
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3710      	adds	r7, #16
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}

0800bb2a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bb2a:	b580      	push	{r7, lr}
 800bb2c:	b084      	sub	sp, #16
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	60f8      	str	r0, [r7, #12]
 800bb32:	60b9      	str	r1, [r7, #8]
 800bb34:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	68ba      	ldr	r2, [r7, #8]
 800bb3a:	2100      	movs	r1, #0
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f000 fcbf 	bl	800c4c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb42:	2300      	movs	r3, #0
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3710      	adds	r7, #16
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2204      	movs	r2, #4
 800bb58:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	2200      	movs	r2, #0
 800bb60:	2100      	movs	r1, #0
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 fc8b 	bl	800c47e <USBD_LL_Transmit>

  return USBD_OK;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3708      	adds	r7, #8
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bb72:	b580      	push	{r7, lr}
 800bb74:	b082      	sub	sp, #8
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2205      	movs	r2, #5
 800bb7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb82:	2300      	movs	r3, #0
 800bb84:	2200      	movs	r2, #0
 800bb86:	2100      	movs	r1, #0
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 fc99 	bl	800c4c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb8e:	2300      	movs	r3, #0
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3708      	adds	r7, #8
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	4912      	ldr	r1, [pc, #72]	@ (800bbe8 <MX_USB_DEVICE_Init+0x50>)
 800bba0:	4812      	ldr	r0, [pc, #72]	@ (800bbec <MX_USB_DEVICE_Init+0x54>)
 800bba2:	f7fe fcf7 	bl	800a594 <USBD_Init>
 800bba6:	4603      	mov	r3, r0
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d001      	beq.n	800bbb0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bbac:	f7f5 fd98 	bl	80016e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bbb0:	490f      	ldr	r1, [pc, #60]	@ (800bbf0 <MX_USB_DEVICE_Init+0x58>)
 800bbb2:	480e      	ldr	r0, [pc, #56]	@ (800bbec <MX_USB_DEVICE_Init+0x54>)
 800bbb4:	f7fe fd1e 	bl	800a5f4 <USBD_RegisterClass>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d001      	beq.n	800bbc2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bbbe:	f7f5 fd8f 	bl	80016e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bbc2:	490c      	ldr	r1, [pc, #48]	@ (800bbf4 <MX_USB_DEVICE_Init+0x5c>)
 800bbc4:	4809      	ldr	r0, [pc, #36]	@ (800bbec <MX_USB_DEVICE_Init+0x54>)
 800bbc6:	f7fe fc55 	bl	800a474 <USBD_CDC_RegisterInterface>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d001      	beq.n	800bbd4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bbd0:	f7f5 fd86 	bl	80016e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bbd4:	4805      	ldr	r0, [pc, #20]	@ (800bbec <MX_USB_DEVICE_Init+0x54>)
 800bbd6:	f7fe fd43 	bl	800a660 <USBD_Start>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d001      	beq.n	800bbe4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bbe0:	f7f5 fd7e 	bl	80016e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bbe4:	bf00      	nop
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	200000c0 	.word	0x200000c0
 800bbec:	2000084c 	.word	0x2000084c
 800bbf0:	2000002c 	.word	0x2000002c
 800bbf4:	200000ac 	.word	0x200000ac

0800bbf8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	4905      	ldr	r1, [pc, #20]	@ (800bc14 <CDC_Init_FS+0x1c>)
 800bc00:	4805      	ldr	r0, [pc, #20]	@ (800bc18 <CDC_Init_FS+0x20>)
 800bc02:	f7fe fc51 	bl	800a4a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bc06:	4905      	ldr	r1, [pc, #20]	@ (800bc1c <CDC_Init_FS+0x24>)
 800bc08:	4803      	ldr	r0, [pc, #12]	@ (800bc18 <CDC_Init_FS+0x20>)
 800bc0a:	f7fe fc6f 	bl	800a4ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bc0e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	bd80      	pop	{r7, pc}
 800bc14:	2000132c 	.word	0x2000132c
 800bc18:	2000084c 	.word	0x2000084c
 800bc1c:	20000b2c 	.word	0x20000b2c

0800bc20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bc20:	b480      	push	{r7}
 800bc22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bc24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr

0800bc30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	4603      	mov	r3, r0
 800bc38:	6039      	str	r1, [r7, #0]
 800bc3a:	71fb      	strb	r3, [r7, #7]
 800bc3c:	4613      	mov	r3, r2
 800bc3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bc40:	79fb      	ldrb	r3, [r7, #7]
 800bc42:	2b23      	cmp	r3, #35	@ 0x23
 800bc44:	d84a      	bhi.n	800bcdc <CDC_Control_FS+0xac>
 800bc46:	a201      	add	r2, pc, #4	@ (adr r2, 800bc4c <CDC_Control_FS+0x1c>)
 800bc48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc4c:	0800bcdd 	.word	0x0800bcdd
 800bc50:	0800bcdd 	.word	0x0800bcdd
 800bc54:	0800bcdd 	.word	0x0800bcdd
 800bc58:	0800bcdd 	.word	0x0800bcdd
 800bc5c:	0800bcdd 	.word	0x0800bcdd
 800bc60:	0800bcdd 	.word	0x0800bcdd
 800bc64:	0800bcdd 	.word	0x0800bcdd
 800bc68:	0800bcdd 	.word	0x0800bcdd
 800bc6c:	0800bcdd 	.word	0x0800bcdd
 800bc70:	0800bcdd 	.word	0x0800bcdd
 800bc74:	0800bcdd 	.word	0x0800bcdd
 800bc78:	0800bcdd 	.word	0x0800bcdd
 800bc7c:	0800bcdd 	.word	0x0800bcdd
 800bc80:	0800bcdd 	.word	0x0800bcdd
 800bc84:	0800bcdd 	.word	0x0800bcdd
 800bc88:	0800bcdd 	.word	0x0800bcdd
 800bc8c:	0800bcdd 	.word	0x0800bcdd
 800bc90:	0800bcdd 	.word	0x0800bcdd
 800bc94:	0800bcdd 	.word	0x0800bcdd
 800bc98:	0800bcdd 	.word	0x0800bcdd
 800bc9c:	0800bcdd 	.word	0x0800bcdd
 800bca0:	0800bcdd 	.word	0x0800bcdd
 800bca4:	0800bcdd 	.word	0x0800bcdd
 800bca8:	0800bcdd 	.word	0x0800bcdd
 800bcac:	0800bcdd 	.word	0x0800bcdd
 800bcb0:	0800bcdd 	.word	0x0800bcdd
 800bcb4:	0800bcdd 	.word	0x0800bcdd
 800bcb8:	0800bcdd 	.word	0x0800bcdd
 800bcbc:	0800bcdd 	.word	0x0800bcdd
 800bcc0:	0800bcdd 	.word	0x0800bcdd
 800bcc4:	0800bcdd 	.word	0x0800bcdd
 800bcc8:	0800bcdd 	.word	0x0800bcdd
 800bccc:	0800bcdd 	.word	0x0800bcdd
 800bcd0:	0800bcdd 	.word	0x0800bcdd
 800bcd4:	0800bcdd 	.word	0x0800bcdd
 800bcd8:	0800bcdd 	.word	0x0800bcdd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bcdc:	bf00      	nop
  }

  return (USBD_OK);
 800bcde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b084      	sub	sp, #16
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bcf6:	6879      	ldr	r1, [r7, #4]
 800bcf8:	480e      	ldr	r0, [pc, #56]	@ (800bd34 <CDC_Receive_FS+0x48>)
 800bcfa:	f7fe fbf7 	bl	800a4ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bcfe:	480d      	ldr	r0, [pc, #52]	@ (800bd34 <CDC_Receive_FS+0x48>)
 800bd00:	f7fe fc12 	bl	800a528 <USBD_CDC_ReceivePacket>

  //https://controllerstech.com/send-and-receive-data-to-pc-without-uart-stm32-usb-com/

  uint8_t len = (uint8_t) *Len;
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	73fb      	strb	r3, [r7, #15]

    if(len == ROS_COMM_RX_SIZE){
 800bd0a:	7bfb      	ldrb	r3, [r7, #15]
 800bd0c:	2b0d      	cmp	r3, #13
 800bd0e:	d105      	bne.n	800bd1c <CDC_Receive_FS+0x30>
	  memcpy((uint8_t *)&rbc_Packet_t, Buf, len);  // copy the data to the buffer
 800bd10:	7bfb      	ldrb	r3, [r7, #15]
 800bd12:	461a      	mov	r2, r3
 800bd14:	6879      	ldr	r1, [r7, #4]
 800bd16:	4808      	ldr	r0, [pc, #32]	@ (800bd38 <CDC_Receive_FS+0x4c>)
 800bd18:	f000 fc76 	bl	800c608 <memcpy>
    }

    rx_flag = 1;
 800bd1c:	4b07      	ldr	r3, [pc, #28]	@ (800bd3c <CDC_Receive_FS+0x50>)
 800bd1e:	2201      	movs	r2, #1
 800bd20:	701a      	strb	r2, [r3, #0]
    tx_flag = 0;
 800bd22:	4b07      	ldr	r3, [pc, #28]	@ (800bd40 <CDC_Receive_FS+0x54>)
 800bd24:	2200      	movs	r2, #0
 800bd26:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800bd28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	2000084c 	.word	0x2000084c
 800bd38:	2000081c 	.word	0x2000081c
 800bd3c:	20000b28 	.word	0x20000b28
 800bd40:	200000aa 	.word	0x200000aa

0800bd44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b087      	sub	sp, #28
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	4613      	mov	r3, r2
 800bd50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bd52:	2300      	movs	r3, #0
 800bd54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bd56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	371c      	adds	r7, #28
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr
	...

0800bd68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b083      	sub	sp, #12
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	4603      	mov	r3, r0
 800bd70:	6039      	str	r1, [r7, #0]
 800bd72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	2212      	movs	r2, #18
 800bd78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bd7a:	4b03      	ldr	r3, [pc, #12]	@ (800bd88 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	370c      	adds	r7, #12
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr
 800bd88:	200000dc 	.word	0x200000dc

0800bd8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	4603      	mov	r3, r0
 800bd94:	6039      	str	r1, [r7, #0]
 800bd96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	2204      	movs	r2, #4
 800bd9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bd9e:	4b03      	ldr	r3, [pc, #12]	@ (800bdac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	370c      	adds	r7, #12
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr
 800bdac:	200000f0 	.word	0x200000f0

0800bdb0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	6039      	str	r1, [r7, #0]
 800bdba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bdbc:	79fb      	ldrb	r3, [r7, #7]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d105      	bne.n	800bdce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bdc2:	683a      	ldr	r2, [r7, #0]
 800bdc4:	4907      	ldr	r1, [pc, #28]	@ (800bde4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bdc6:	4808      	ldr	r0, [pc, #32]	@ (800bde8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bdc8:	f7ff fdfa 	bl	800b9c0 <USBD_GetString>
 800bdcc:	e004      	b.n	800bdd8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bdce:	683a      	ldr	r2, [r7, #0]
 800bdd0:	4904      	ldr	r1, [pc, #16]	@ (800bde4 <USBD_FS_ProductStrDescriptor+0x34>)
 800bdd2:	4805      	ldr	r0, [pc, #20]	@ (800bde8 <USBD_FS_ProductStrDescriptor+0x38>)
 800bdd4:	f7ff fdf4 	bl	800b9c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdd8:	4b02      	ldr	r3, [pc, #8]	@ (800bde4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3708      	adds	r7, #8
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	20001b2c 	.word	0x20001b2c
 800bde8:	0800c684 	.word	0x0800c684

0800bdec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	6039      	str	r1, [r7, #0]
 800bdf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bdf8:	683a      	ldr	r2, [r7, #0]
 800bdfa:	4904      	ldr	r1, [pc, #16]	@ (800be0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bdfc:	4804      	ldr	r0, [pc, #16]	@ (800be10 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bdfe:	f7ff fddf 	bl	800b9c0 <USBD_GetString>
  return USBD_StrDesc;
 800be02:	4b02      	ldr	r3, [pc, #8]	@ (800be0c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800be04:	4618      	mov	r0, r3
 800be06:	3708      	adds	r7, #8
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}
 800be0c:	20001b2c 	.word	0x20001b2c
 800be10:	0800c69c 	.word	0x0800c69c

0800be14 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	4603      	mov	r3, r0
 800be1c:	6039      	str	r1, [r7, #0]
 800be1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	221a      	movs	r2, #26
 800be24:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be26:	f000 f843 	bl	800beb0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800be2a:	4b02      	ldr	r3, [pc, #8]	@ (800be34 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	200000f4 	.word	0x200000f4

0800be38 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	4603      	mov	r3, r0
 800be40:	6039      	str	r1, [r7, #0]
 800be42:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be44:	79fb      	ldrb	r3, [r7, #7]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d105      	bne.n	800be56 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be4a:	683a      	ldr	r2, [r7, #0]
 800be4c:	4907      	ldr	r1, [pc, #28]	@ (800be6c <USBD_FS_ConfigStrDescriptor+0x34>)
 800be4e:	4808      	ldr	r0, [pc, #32]	@ (800be70 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be50:	f7ff fdb6 	bl	800b9c0 <USBD_GetString>
 800be54:	e004      	b.n	800be60 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800be56:	683a      	ldr	r2, [r7, #0]
 800be58:	4904      	ldr	r1, [pc, #16]	@ (800be6c <USBD_FS_ConfigStrDescriptor+0x34>)
 800be5a:	4805      	ldr	r0, [pc, #20]	@ (800be70 <USBD_FS_ConfigStrDescriptor+0x38>)
 800be5c:	f7ff fdb0 	bl	800b9c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be60:	4b02      	ldr	r3, [pc, #8]	@ (800be6c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800be62:	4618      	mov	r0, r3
 800be64:	3708      	adds	r7, #8
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	20001b2c 	.word	0x20001b2c
 800be70:	0800c6b0 	.word	0x0800c6b0

0800be74 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	4603      	mov	r3, r0
 800be7c:	6039      	str	r1, [r7, #0]
 800be7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be80:	79fb      	ldrb	r3, [r7, #7]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d105      	bne.n	800be92 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be86:	683a      	ldr	r2, [r7, #0]
 800be88:	4907      	ldr	r1, [pc, #28]	@ (800bea8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be8a:	4808      	ldr	r0, [pc, #32]	@ (800beac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be8c:	f7ff fd98 	bl	800b9c0 <USBD_GetString>
 800be90:	e004      	b.n	800be9c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800be92:	683a      	ldr	r2, [r7, #0]
 800be94:	4904      	ldr	r1, [pc, #16]	@ (800bea8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800be96:	4805      	ldr	r0, [pc, #20]	@ (800beac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800be98:	f7ff fd92 	bl	800b9c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be9c:	4b02      	ldr	r3, [pc, #8]	@ (800bea8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3708      	adds	r7, #8
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	20001b2c 	.word	0x20001b2c
 800beac:	0800c6bc 	.word	0x0800c6bc

0800beb0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800beb6:	4b0f      	ldr	r3, [pc, #60]	@ (800bef4 <Get_SerialNum+0x44>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bebc:	4b0e      	ldr	r3, [pc, #56]	@ (800bef8 <Get_SerialNum+0x48>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bec2:	4b0e      	ldr	r3, [pc, #56]	@ (800befc <Get_SerialNum+0x4c>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bec8:	68fa      	ldr	r2, [r7, #12]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	4413      	add	r3, r2
 800bece:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d009      	beq.n	800beea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bed6:	2208      	movs	r2, #8
 800bed8:	4909      	ldr	r1, [pc, #36]	@ (800bf00 <Get_SerialNum+0x50>)
 800beda:	68f8      	ldr	r0, [r7, #12]
 800bedc:	f000 f814 	bl	800bf08 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bee0:	2204      	movs	r2, #4
 800bee2:	4908      	ldr	r1, [pc, #32]	@ (800bf04 <Get_SerialNum+0x54>)
 800bee4:	68b8      	ldr	r0, [r7, #8]
 800bee6:	f000 f80f 	bl	800bf08 <IntToUnicode>
  }
}
 800beea:	bf00      	nop
 800beec:	3710      	adds	r7, #16
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	1fff7a10 	.word	0x1fff7a10
 800bef8:	1fff7a14 	.word	0x1fff7a14
 800befc:	1fff7a18 	.word	0x1fff7a18
 800bf00:	200000f6 	.word	0x200000f6
 800bf04:	20000106 	.word	0x20000106

0800bf08 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b087      	sub	sp, #28
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	4613      	mov	r3, r2
 800bf14:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bf16:	2300      	movs	r3, #0
 800bf18:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	75fb      	strb	r3, [r7, #23]
 800bf1e:	e027      	b.n	800bf70 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	0f1b      	lsrs	r3, r3, #28
 800bf24:	2b09      	cmp	r3, #9
 800bf26:	d80b      	bhi.n	800bf40 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	0f1b      	lsrs	r3, r3, #28
 800bf2c:	b2da      	uxtb	r2, r3
 800bf2e:	7dfb      	ldrb	r3, [r7, #23]
 800bf30:	005b      	lsls	r3, r3, #1
 800bf32:	4619      	mov	r1, r3
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	440b      	add	r3, r1
 800bf38:	3230      	adds	r2, #48	@ 0x30
 800bf3a:	b2d2      	uxtb	r2, r2
 800bf3c:	701a      	strb	r2, [r3, #0]
 800bf3e:	e00a      	b.n	800bf56 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	0f1b      	lsrs	r3, r3, #28
 800bf44:	b2da      	uxtb	r2, r3
 800bf46:	7dfb      	ldrb	r3, [r7, #23]
 800bf48:	005b      	lsls	r3, r3, #1
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	440b      	add	r3, r1
 800bf50:	3237      	adds	r2, #55	@ 0x37
 800bf52:	b2d2      	uxtb	r2, r2
 800bf54:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	011b      	lsls	r3, r3, #4
 800bf5a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf5c:	7dfb      	ldrb	r3, [r7, #23]
 800bf5e:	005b      	lsls	r3, r3, #1
 800bf60:	3301      	adds	r3, #1
 800bf62:	68ba      	ldr	r2, [r7, #8]
 800bf64:	4413      	add	r3, r2
 800bf66:	2200      	movs	r2, #0
 800bf68:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf6a:	7dfb      	ldrb	r3, [r7, #23]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	75fb      	strb	r3, [r7, #23]
 800bf70:	7dfa      	ldrb	r2, [r7, #23]
 800bf72:	79fb      	ldrb	r3, [r7, #7]
 800bf74:	429a      	cmp	r2, r3
 800bf76:	d3d3      	bcc.n	800bf20 <IntToUnicode+0x18>
  }
}
 800bf78:	bf00      	nop
 800bf7a:	bf00      	nop
 800bf7c:	371c      	adds	r7, #28
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr
	...

0800bf88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b08a      	sub	sp, #40	@ 0x28
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf90:	f107 0314 	add.w	r3, r7, #20
 800bf94:	2200      	movs	r2, #0
 800bf96:	601a      	str	r2, [r3, #0]
 800bf98:	605a      	str	r2, [r3, #4]
 800bf9a:	609a      	str	r2, [r3, #8]
 800bf9c:	60da      	str	r2, [r3, #12]
 800bf9e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bfa8:	d13a      	bne.n	800c020 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bfaa:	2300      	movs	r3, #0
 800bfac:	613b      	str	r3, [r7, #16]
 800bfae:	4b1e      	ldr	r3, [pc, #120]	@ (800c028 <HAL_PCD_MspInit+0xa0>)
 800bfb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfb2:	4a1d      	ldr	r2, [pc, #116]	@ (800c028 <HAL_PCD_MspInit+0xa0>)
 800bfb4:	f043 0301 	orr.w	r3, r3, #1
 800bfb8:	6313      	str	r3, [r2, #48]	@ 0x30
 800bfba:	4b1b      	ldr	r3, [pc, #108]	@ (800c028 <HAL_PCD_MspInit+0xa0>)
 800bfbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfbe:	f003 0301 	and.w	r3, r3, #1
 800bfc2:	613b      	str	r3, [r7, #16]
 800bfc4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bfc6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800bfca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bfcc:	2302      	movs	r3, #2
 800bfce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfd4:	2303      	movs	r3, #3
 800bfd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bfd8:	230a      	movs	r3, #10
 800bfda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bfdc:	f107 0314 	add.w	r3, r7, #20
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	4812      	ldr	r0, [pc, #72]	@ (800c02c <HAL_PCD_MspInit+0xa4>)
 800bfe4:	f7f6 fdd4 	bl	8002b90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bfe8:	4b0f      	ldr	r3, [pc, #60]	@ (800c028 <HAL_PCD_MspInit+0xa0>)
 800bfea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfec:	4a0e      	ldr	r2, [pc, #56]	@ (800c028 <HAL_PCD_MspInit+0xa0>)
 800bfee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bff2:	6353      	str	r3, [r2, #52]	@ 0x34
 800bff4:	2300      	movs	r3, #0
 800bff6:	60fb      	str	r3, [r7, #12]
 800bff8:	4b0b      	ldr	r3, [pc, #44]	@ (800c028 <HAL_PCD_MspInit+0xa0>)
 800bffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bffc:	4a0a      	ldr	r2, [pc, #40]	@ (800c028 <HAL_PCD_MspInit+0xa0>)
 800bffe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c002:	6453      	str	r3, [r2, #68]	@ 0x44
 800c004:	4b08      	ldr	r3, [pc, #32]	@ (800c028 <HAL_PCD_MspInit+0xa0>)
 800c006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c008:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c00c:	60fb      	str	r3, [r7, #12]
 800c00e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c010:	2200      	movs	r2, #0
 800c012:	2100      	movs	r1, #0
 800c014:	2043      	movs	r0, #67	@ 0x43
 800c016:	f7f6 fce4 	bl	80029e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c01a:	2043      	movs	r0, #67	@ 0x43
 800c01c:	f7f6 fcfd 	bl	8002a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c020:	bf00      	nop
 800c022:	3728      	adds	r7, #40	@ 0x28
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}
 800c028:	40023800 	.word	0x40023800
 800c02c:	40020000 	.word	0x40020000

0800c030 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c044:	4619      	mov	r1, r3
 800c046:	4610      	mov	r0, r2
 800c048:	f7fe fb57 	bl	800a6fa <USBD_LL_SetupStage>
}
 800c04c:	bf00      	nop
 800c04e:	3708      	adds	r7, #8
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b082      	sub	sp, #8
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	460b      	mov	r3, r1
 800c05e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c066:	78fa      	ldrb	r2, [r7, #3]
 800c068:	6879      	ldr	r1, [r7, #4]
 800c06a:	4613      	mov	r3, r2
 800c06c:	00db      	lsls	r3, r3, #3
 800c06e:	4413      	add	r3, r2
 800c070:	009b      	lsls	r3, r3, #2
 800c072:	440b      	add	r3, r1
 800c074:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	78fb      	ldrb	r3, [r7, #3]
 800c07c:	4619      	mov	r1, r3
 800c07e:	f7fe fb91 	bl	800a7a4 <USBD_LL_DataOutStage>
}
 800c082:	bf00      	nop
 800c084:	3708      	adds	r7, #8
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}

0800c08a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c08a:	b580      	push	{r7, lr}
 800c08c:	b082      	sub	sp, #8
 800c08e:	af00      	add	r7, sp, #0
 800c090:	6078      	str	r0, [r7, #4]
 800c092:	460b      	mov	r3, r1
 800c094:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c09c:	78fa      	ldrb	r2, [r7, #3]
 800c09e:	6879      	ldr	r1, [r7, #4]
 800c0a0:	4613      	mov	r3, r2
 800c0a2:	00db      	lsls	r3, r3, #3
 800c0a4:	4413      	add	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	440b      	add	r3, r1
 800c0aa:	3320      	adds	r3, #32
 800c0ac:	681a      	ldr	r2, [r3, #0]
 800c0ae:	78fb      	ldrb	r3, [r7, #3]
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	f7fe fc2a 	bl	800a90a <USBD_LL_DataInStage>
}
 800c0b6:	bf00      	nop
 800c0b8:	3708      	adds	r7, #8
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b082      	sub	sp, #8
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7fe fd64 	bl	800ab9a <USBD_LL_SOF>
}
 800c0d2:	bf00      	nop
 800c0d4:	3708      	adds	r7, #8
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b084      	sub	sp, #16
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	79db      	ldrb	r3, [r3, #7]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d102      	bne.n	800c0f4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	73fb      	strb	r3, [r7, #15]
 800c0f2:	e008      	b.n	800c106 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	79db      	ldrb	r3, [r3, #7]
 800c0f8:	2b02      	cmp	r3, #2
 800c0fa:	d102      	bne.n	800c102 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	73fb      	strb	r3, [r7, #15]
 800c100:	e001      	b.n	800c106 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c102:	f7f5 faed 	bl	80016e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c10c:	7bfa      	ldrb	r2, [r7, #15]
 800c10e:	4611      	mov	r1, r2
 800c110:	4618      	mov	r0, r3
 800c112:	f7fe fcfe 	bl	800ab12 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7fe fca6 	bl	800aa6e <USBD_LL_Reset>
}
 800c122:	bf00      	nop
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
	...

0800c12c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7fe fcf9 	bl	800ab32 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	687a      	ldr	r2, [r7, #4]
 800c14c:	6812      	ldr	r2, [r2, #0]
 800c14e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c152:	f043 0301 	orr.w	r3, r3, #1
 800c156:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	7adb      	ldrb	r3, [r3, #11]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d005      	beq.n	800c16c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c160:	4b04      	ldr	r3, [pc, #16]	@ (800c174 <HAL_PCD_SuspendCallback+0x48>)
 800c162:	691b      	ldr	r3, [r3, #16]
 800c164:	4a03      	ldr	r2, [pc, #12]	@ (800c174 <HAL_PCD_SuspendCallback+0x48>)
 800c166:	f043 0306 	orr.w	r3, r3, #6
 800c16a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c16c:	bf00      	nop
 800c16e:	3708      	adds	r7, #8
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	e000ed00 	.word	0xe000ed00

0800c178 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c186:	4618      	mov	r0, r3
 800c188:	f7fe fcef 	bl	800ab6a <USBD_LL_Resume>
}
 800c18c:	bf00      	nop
 800c18e:	3708      	adds	r7, #8
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	460b      	mov	r3, r1
 800c19e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1a6:	78fa      	ldrb	r2, [r7, #3]
 800c1a8:	4611      	mov	r1, r2
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7fe fd47 	bl	800ac3e <USBD_LL_IsoOUTIncomplete>
}
 800c1b0:	bf00      	nop
 800c1b2:	3708      	adds	r7, #8
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1ca:	78fa      	ldrb	r2, [r7, #3]
 800c1cc:	4611      	mov	r1, r2
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f7fe fd03 	bl	800abda <USBD_LL_IsoINIncomplete>
}
 800c1d4:	bf00      	nop
 800c1d6:	3708      	adds	r7, #8
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b082      	sub	sp, #8
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7fe fd59 	bl	800aca2 <USBD_LL_DevConnected>
}
 800c1f0:	bf00      	nop
 800c1f2:	3708      	adds	r7, #8
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c206:	4618      	mov	r0, r3
 800c208:	f7fe fd56 	bl	800acb8 <USBD_LL_DevDisconnected>
}
 800c20c:	bf00      	nop
 800c20e:	3708      	adds	r7, #8
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d13c      	bne.n	800c29e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c224:	4a20      	ldr	r2, [pc, #128]	@ (800c2a8 <USBD_LL_Init+0x94>)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4a1e      	ldr	r2, [pc, #120]	@ (800c2a8 <USBD_LL_Init+0x94>)
 800c230:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c234:	4b1c      	ldr	r3, [pc, #112]	@ (800c2a8 <USBD_LL_Init+0x94>)
 800c236:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c23a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c23c:	4b1a      	ldr	r3, [pc, #104]	@ (800c2a8 <USBD_LL_Init+0x94>)
 800c23e:	2204      	movs	r2, #4
 800c240:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c242:	4b19      	ldr	r3, [pc, #100]	@ (800c2a8 <USBD_LL_Init+0x94>)
 800c244:	2202      	movs	r2, #2
 800c246:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c248:	4b17      	ldr	r3, [pc, #92]	@ (800c2a8 <USBD_LL_Init+0x94>)
 800c24a:	2200      	movs	r2, #0
 800c24c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c24e:	4b16      	ldr	r3, [pc, #88]	@ (800c2a8 <USBD_LL_Init+0x94>)
 800c250:	2202      	movs	r2, #2
 800c252:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c254:	4b14      	ldr	r3, [pc, #80]	@ (800c2a8 <USBD_LL_Init+0x94>)
 800c256:	2200      	movs	r2, #0
 800c258:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c25a:	4b13      	ldr	r3, [pc, #76]	@ (800c2a8 <USBD_LL_Init+0x94>)
 800c25c:	2200      	movs	r2, #0
 800c25e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c260:	4b11      	ldr	r3, [pc, #68]	@ (800c2a8 <USBD_LL_Init+0x94>)
 800c262:	2200      	movs	r2, #0
 800c264:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c266:	4b10      	ldr	r3, [pc, #64]	@ (800c2a8 <USBD_LL_Init+0x94>)
 800c268:	2200      	movs	r2, #0
 800c26a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c26c:	4b0e      	ldr	r3, [pc, #56]	@ (800c2a8 <USBD_LL_Init+0x94>)
 800c26e:	2200      	movs	r2, #0
 800c270:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c272:	480d      	ldr	r0, [pc, #52]	@ (800c2a8 <USBD_LL_Init+0x94>)
 800c274:	f7f7 f882 	bl	800337c <HAL_PCD_Init>
 800c278:	4603      	mov	r3, r0
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d001      	beq.n	800c282 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c27e:	f7f5 fa2f 	bl	80016e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c282:	2180      	movs	r1, #128	@ 0x80
 800c284:	4808      	ldr	r0, [pc, #32]	@ (800c2a8 <USBD_LL_Init+0x94>)
 800c286:	f7f8 faae 	bl	80047e6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c28a:	2240      	movs	r2, #64	@ 0x40
 800c28c:	2100      	movs	r1, #0
 800c28e:	4806      	ldr	r0, [pc, #24]	@ (800c2a8 <USBD_LL_Init+0x94>)
 800c290:	f7f8 fa62 	bl	8004758 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c294:	2280      	movs	r2, #128	@ 0x80
 800c296:	2101      	movs	r1, #1
 800c298:	4803      	ldr	r0, [pc, #12]	@ (800c2a8 <USBD_LL_Init+0x94>)
 800c29a:	f7f8 fa5d 	bl	8004758 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c29e:	2300      	movs	r3, #0
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}
 800c2a8:	20001d2c 	.word	0x20001d2c

0800c2ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b084      	sub	sp, #16
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	f7f7 f969 	bl	800359a <HAL_PCD_Start>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2cc:	7bfb      	ldrb	r3, [r7, #15]
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f000 f942 	bl	800c558 <USBD_Get_USB_Status>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3710      	adds	r7, #16
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}

0800c2e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b084      	sub	sp, #16
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
 800c2ea:	4608      	mov	r0, r1
 800c2ec:	4611      	mov	r1, r2
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	70fb      	strb	r3, [r7, #3]
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	70bb      	strb	r3, [r7, #2]
 800c2f8:	4613      	mov	r3, r2
 800c2fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c300:	2300      	movs	r3, #0
 800c302:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c30a:	78bb      	ldrb	r3, [r7, #2]
 800c30c:	883a      	ldrh	r2, [r7, #0]
 800c30e:	78f9      	ldrb	r1, [r7, #3]
 800c310:	f7f7 fe3d 	bl	8003f8e <HAL_PCD_EP_Open>
 800c314:	4603      	mov	r3, r0
 800c316:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c318:	7bfb      	ldrb	r3, [r7, #15]
 800c31a:	4618      	mov	r0, r3
 800c31c:	f000 f91c 	bl	800c558 <USBD_Get_USB_Status>
 800c320:	4603      	mov	r3, r0
 800c322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c324:	7bbb      	ldrb	r3, [r7, #14]
}
 800c326:	4618      	mov	r0, r3
 800c328:	3710      	adds	r7, #16
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bd80      	pop	{r7, pc}

0800c32e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c32e:	b580      	push	{r7, lr}
 800c330:	b084      	sub	sp, #16
 800c332:	af00      	add	r7, sp, #0
 800c334:	6078      	str	r0, [r7, #4]
 800c336:	460b      	mov	r3, r1
 800c338:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c33a:	2300      	movs	r3, #0
 800c33c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c33e:	2300      	movs	r3, #0
 800c340:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c348:	78fa      	ldrb	r2, [r7, #3]
 800c34a:	4611      	mov	r1, r2
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7f7 fe88 	bl	8004062 <HAL_PCD_EP_Close>
 800c352:	4603      	mov	r3, r0
 800c354:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c356:	7bfb      	ldrb	r3, [r7, #15]
 800c358:	4618      	mov	r0, r3
 800c35a:	f000 f8fd 	bl	800c558 <USBD_Get_USB_Status>
 800c35e:	4603      	mov	r3, r0
 800c360:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c362:	7bbb      	ldrb	r3, [r7, #14]
}
 800c364:	4618      	mov	r0, r3
 800c366:	3710      	adds	r7, #16
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	460b      	mov	r3, r1
 800c376:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c378:	2300      	movs	r3, #0
 800c37a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c37c:	2300      	movs	r3, #0
 800c37e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c386:	78fa      	ldrb	r2, [r7, #3]
 800c388:	4611      	mov	r1, r2
 800c38a:	4618      	mov	r0, r3
 800c38c:	f7f7 ff40 	bl	8004210 <HAL_PCD_EP_SetStall>
 800c390:	4603      	mov	r3, r0
 800c392:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c394:	7bfb      	ldrb	r3, [r7, #15]
 800c396:	4618      	mov	r0, r3
 800c398:	f000 f8de 	bl	800c558 <USBD_Get_USB_Status>
 800c39c:	4603      	mov	r3, r0
 800c39e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3710      	adds	r7, #16
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b084      	sub	sp, #16
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c3c4:	78fa      	ldrb	r2, [r7, #3]
 800c3c6:	4611      	mov	r1, r2
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7f7 ff84 	bl	80042d6 <HAL_PCD_EP_ClrStall>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3d2:	7bfb      	ldrb	r3, [r7, #15]
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f000 f8bf 	bl	800c558 <USBD_Get_USB_Status>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3de:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3710      	adds	r7, #16
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b085      	sub	sp, #20
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c3fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c3fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c400:	2b00      	cmp	r3, #0
 800c402:	da0b      	bge.n	800c41c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c404:	78fb      	ldrb	r3, [r7, #3]
 800c406:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c40a:	68f9      	ldr	r1, [r7, #12]
 800c40c:	4613      	mov	r3, r2
 800c40e:	00db      	lsls	r3, r3, #3
 800c410:	4413      	add	r3, r2
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	440b      	add	r3, r1
 800c416:	3316      	adds	r3, #22
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	e00b      	b.n	800c434 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c41c:	78fb      	ldrb	r3, [r7, #3]
 800c41e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c422:	68f9      	ldr	r1, [r7, #12]
 800c424:	4613      	mov	r3, r2
 800c426:	00db      	lsls	r3, r3, #3
 800c428:	4413      	add	r3, r2
 800c42a:	009b      	lsls	r3, r3, #2
 800c42c:	440b      	add	r3, r1
 800c42e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c432:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c434:	4618      	mov	r0, r3
 800c436:	3714      	adds	r7, #20
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr

0800c440 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
 800c448:	460b      	mov	r3, r1
 800c44a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c44c:	2300      	movs	r3, #0
 800c44e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c450:	2300      	movs	r3, #0
 800c452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c45a:	78fa      	ldrb	r2, [r7, #3]
 800c45c:	4611      	mov	r1, r2
 800c45e:	4618      	mov	r0, r3
 800c460:	f7f7 fd71 	bl	8003f46 <HAL_PCD_SetAddress>
 800c464:	4603      	mov	r3, r0
 800c466:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c468:	7bfb      	ldrb	r3, [r7, #15]
 800c46a:	4618      	mov	r0, r3
 800c46c:	f000 f874 	bl	800c558 <USBD_Get_USB_Status>
 800c470:	4603      	mov	r3, r0
 800c472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c474:	7bbb      	ldrb	r3, [r7, #14]
}
 800c476:	4618      	mov	r0, r3
 800c478:	3710      	adds	r7, #16
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c47e:	b580      	push	{r7, lr}
 800c480:	b086      	sub	sp, #24
 800c482:	af00      	add	r7, sp, #0
 800c484:	60f8      	str	r0, [r7, #12]
 800c486:	607a      	str	r2, [r7, #4]
 800c488:	603b      	str	r3, [r7, #0]
 800c48a:	460b      	mov	r3, r1
 800c48c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c48e:	2300      	movs	r3, #0
 800c490:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c492:	2300      	movs	r3, #0
 800c494:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c49c:	7af9      	ldrb	r1, [r7, #11]
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	f7f7 fe7b 	bl	800419c <HAL_PCD_EP_Transmit>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4aa:	7dfb      	ldrb	r3, [r7, #23]
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f000 f853 	bl	800c558 <USBD_Get_USB_Status>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3718      	adds	r7, #24
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b086      	sub	sp, #24
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	607a      	str	r2, [r7, #4]
 800c4ca:	603b      	str	r3, [r7, #0]
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c4de:	7af9      	ldrb	r1, [r7, #11]
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	f7f7 fe07 	bl	80040f6 <HAL_PCD_EP_Receive>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4ec:	7dfb      	ldrb	r3, [r7, #23]
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f000 f832 	bl	800c558 <USBD_Get_USB_Status>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3718      	adds	r7, #24
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b082      	sub	sp, #8
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
 800c50a:	460b      	mov	r3, r1
 800c50c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c514:	78fa      	ldrb	r2, [r7, #3]
 800c516:	4611      	mov	r1, r2
 800c518:	4618      	mov	r0, r3
 800c51a:	f7f7 fe27 	bl	800416c <HAL_PCD_EP_GetRxCount>
 800c51e:	4603      	mov	r3, r0
}
 800c520:	4618      	mov	r0, r3
 800c522:	3708      	adds	r7, #8
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c528:	b480      	push	{r7}
 800c52a:	b083      	sub	sp, #12
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c530:	4b03      	ldr	r3, [pc, #12]	@ (800c540 <USBD_static_malloc+0x18>)
}
 800c532:	4618      	mov	r0, r3
 800c534:	370c      	adds	r7, #12
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr
 800c53e:	bf00      	nop
 800c540:	20002210 	.word	0x20002210

0800c544 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]

}
 800c54c:	bf00      	nop
 800c54e:	370c      	adds	r7, #12
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c558:	b480      	push	{r7}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	4603      	mov	r3, r0
 800c560:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c562:	2300      	movs	r3, #0
 800c564:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c566:	79fb      	ldrb	r3, [r7, #7]
 800c568:	2b03      	cmp	r3, #3
 800c56a:	d817      	bhi.n	800c59c <USBD_Get_USB_Status+0x44>
 800c56c:	a201      	add	r2, pc, #4	@ (adr r2, 800c574 <USBD_Get_USB_Status+0x1c>)
 800c56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c572:	bf00      	nop
 800c574:	0800c585 	.word	0x0800c585
 800c578:	0800c58b 	.word	0x0800c58b
 800c57c:	0800c591 	.word	0x0800c591
 800c580:	0800c597 	.word	0x0800c597
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c584:	2300      	movs	r3, #0
 800c586:	73fb      	strb	r3, [r7, #15]
    break;
 800c588:	e00b      	b.n	800c5a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c58a:	2303      	movs	r3, #3
 800c58c:	73fb      	strb	r3, [r7, #15]
    break;
 800c58e:	e008      	b.n	800c5a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c590:	2301      	movs	r3, #1
 800c592:	73fb      	strb	r3, [r7, #15]
    break;
 800c594:	e005      	b.n	800c5a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c596:	2303      	movs	r3, #3
 800c598:	73fb      	strb	r3, [r7, #15]
    break;
 800c59a:	e002      	b.n	800c5a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c59c:	2303      	movs	r3, #3
 800c59e:	73fb      	strb	r3, [r7, #15]
    break;
 800c5a0:	bf00      	nop
  }
  return usb_status;
 800c5a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3714      	adds	r7, #20
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <memset>:
 800c5b0:	4402      	add	r2, r0
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d100      	bne.n	800c5ba <memset+0xa>
 800c5b8:	4770      	bx	lr
 800c5ba:	f803 1b01 	strb.w	r1, [r3], #1
 800c5be:	e7f9      	b.n	800c5b4 <memset+0x4>

0800c5c0 <__libc_init_array>:
 800c5c0:	b570      	push	{r4, r5, r6, lr}
 800c5c2:	4d0d      	ldr	r5, [pc, #52]	@ (800c5f8 <__libc_init_array+0x38>)
 800c5c4:	4c0d      	ldr	r4, [pc, #52]	@ (800c5fc <__libc_init_array+0x3c>)
 800c5c6:	1b64      	subs	r4, r4, r5
 800c5c8:	10a4      	asrs	r4, r4, #2
 800c5ca:	2600      	movs	r6, #0
 800c5cc:	42a6      	cmp	r6, r4
 800c5ce:	d109      	bne.n	800c5e4 <__libc_init_array+0x24>
 800c5d0:	4d0b      	ldr	r5, [pc, #44]	@ (800c600 <__libc_init_array+0x40>)
 800c5d2:	4c0c      	ldr	r4, [pc, #48]	@ (800c604 <__libc_init_array+0x44>)
 800c5d4:	f000 f826 	bl	800c624 <_init>
 800c5d8:	1b64      	subs	r4, r4, r5
 800c5da:	10a4      	asrs	r4, r4, #2
 800c5dc:	2600      	movs	r6, #0
 800c5de:	42a6      	cmp	r6, r4
 800c5e0:	d105      	bne.n	800c5ee <__libc_init_array+0x2e>
 800c5e2:	bd70      	pop	{r4, r5, r6, pc}
 800c5e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5e8:	4798      	blx	r3
 800c5ea:	3601      	adds	r6, #1
 800c5ec:	e7ee      	b.n	800c5cc <__libc_init_array+0xc>
 800c5ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5f2:	4798      	blx	r3
 800c5f4:	3601      	adds	r6, #1
 800c5f6:	e7f2      	b.n	800c5de <__libc_init_array+0x1e>
 800c5f8:	0800c6ec 	.word	0x0800c6ec
 800c5fc:	0800c6ec 	.word	0x0800c6ec
 800c600:	0800c6ec 	.word	0x0800c6ec
 800c604:	0800c6f0 	.word	0x0800c6f0

0800c608 <memcpy>:
 800c608:	440a      	add	r2, r1
 800c60a:	4291      	cmp	r1, r2
 800c60c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c610:	d100      	bne.n	800c614 <memcpy+0xc>
 800c612:	4770      	bx	lr
 800c614:	b510      	push	{r4, lr}
 800c616:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c61a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c61e:	4291      	cmp	r1, r2
 800c620:	d1f9      	bne.n	800c616 <memcpy+0xe>
 800c622:	bd10      	pop	{r4, pc}

0800c624 <_init>:
 800c624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c626:	bf00      	nop
 800c628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c62a:	bc08      	pop	{r3}
 800c62c:	469e      	mov	lr, r3
 800c62e:	4770      	bx	lr

0800c630 <_fini>:
 800c630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c632:	bf00      	nop
 800c634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c636:	bc08      	pop	{r3}
 800c638:	469e      	mov	lr, r3
 800c63a:	4770      	bx	lr
