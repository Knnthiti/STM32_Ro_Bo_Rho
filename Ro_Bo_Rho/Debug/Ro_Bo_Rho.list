
Ro_Bo_Rho.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0d0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800c258  0800c258  0000d258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c300  0800c300  0000e110  2**0
                  CONTENTS
  4 .ARM          00000008  0800c300  0800c300  0000d300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c308  0800c308  0000e110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c308  0800c308  0000d308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c30c  0800c30c  0000d30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  0800c310  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e110  2**0
                  CONTENTS
 10 .bss          00002318  20000110  20000110  0000e110  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002428  20002428  0000e110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e110  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e9d3  00000000  00000000  0000e140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000456e  00000000  00000000  0002cb13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ba8  00000000  00000000  00031088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001596  00000000  00000000  00032c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002748c  00000000  00000000  000341c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000244fe  00000000  00000000  0005b652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e15b9  00000000  00000000  0007fb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00161109  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000075f8  00000000  00000000  0016114c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00168744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000110 	.word	0x20000110
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c240 	.word	0x0800c240

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000114 	.word	0x20000114
 80001c4:	0800c240 	.word	0x0800c240

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f001 fe08 	bl	80020d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 fa46 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 ff90 	bl	80013e8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004c8:	f000 fbba 	bl	8000c40 <MX_TIM2_Init>
  MX_TIM4_Init();
 80004cc:	f000 fc60 	bl	8000d90 <MX_TIM4_Init>
  MX_ADC1_Init();
 80004d0:	f000 faa8 	bl	8000a24 <MX_ADC1_Init>
  MX_SPI2_Init();
 80004d4:	f000 fb26 	bl	8000b24 <MX_SPI2_Init>
  MX_TIM1_Init();
 80004d8:	f000 fb5a 	bl	8000b90 <MX_TIM1_Init>
  MX_TIM8_Init();
 80004dc:	f000 fd00 	bl	8000ee0 <MX_TIM8_Init>
  MX_TIM9_Init();
 80004e0:	f000 fd56 	bl	8000f90 <MX_TIM9_Init>
  MX_TIM10_Init();
 80004e4:	f000 fda4 	bl	8001030 <MX_TIM10_Init>
  MX_TIM11_Init();
 80004e8:	f000 fdf0 	bl	80010cc <MX_TIM11_Init>
  MX_TIM12_Init();
 80004ec:	f000 fe3c 	bl	8001168 <MX_TIM12_Init>
  MX_TIM13_Init();
 80004f0:	f000 fe8a 	bl	8001208 <MX_TIM13_Init>
  MX_TIM14_Init();
 80004f4:	f000 fed6 	bl	80012a4 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 80004f8:	f000 ff4c 	bl	8001394 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80004fc:	f00b f95a 	bl	800b7b4 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8000500:	f000 ff1e 	bl	8001340 <MX_UART4_Init>
  MX_I2C2_Init();
 8000504:	f000 fae0 	bl	8000ac8 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000508:	f000 fbee 	bl	8000ce8 <MX_TIM3_Init>
  MX_TIM5_Init();
 800050c:	f000 fc94 	bl	8000e38 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
   Motor_setup_LF(&htim14   ,&htim5    ,"PC05");
 8000510:	4ac2      	ldr	r2, [pc, #776]	@ (800081c <main+0x364>)
 8000512:	49c3      	ldr	r1, [pc, #780]	@ (8000820 <main+0x368>)
 8000514:	48c3      	ldr	r0, [pc, #780]	@ (8000824 <main+0x36c>)
 8000516:	f007 fdfb 	bl	8008110 <Motor_setup_LF>
   Motor_setup_LB(&htim12   ,&htim1    ,"PE12");
 800051a:	4ac3      	ldr	r2, [pc, #780]	@ (8000828 <main+0x370>)
 800051c:	49c3      	ldr	r1, [pc, #780]	@ (800082c <main+0x374>)
 800051e:	48c4      	ldr	r0, [pc, #784]	@ (8000830 <main+0x378>)
 8000520:	f007 fe24 	bl	800816c <Motor_setup_LB>
   Motor_setup_RF(&htim11   ,&htim8    ,"PE01");
 8000524:	4ac3      	ldr	r2, [pc, #780]	@ (8000834 <main+0x37c>)
 8000526:	49c4      	ldr	r1, [pc, #784]	@ (8000838 <main+0x380>)
 8000528:	48c4      	ldr	r0, [pc, #784]	@ (800083c <main+0x384>)
 800052a:	f007 fe4d 	bl	80081c8 <Motor_setup_RF>
   Motor_setup_RB(&htim12   ,&htim4    ,"PD09");
 800052e:	4ac4      	ldr	r2, [pc, #784]	@ (8000840 <main+0x388>)
 8000530:	49c4      	ldr	r1, [pc, #784]	@ (8000844 <main+0x38c>)
 8000532:	48bf      	ldr	r0, [pc, #764]	@ (8000830 <main+0x378>)
 8000534:	f007 fe76 	bl	8008224 <Motor_setup_RB>
   Motor_setup_EXTRA1(&htim9,&htim3    ,"PC13");
 8000538:	4ac3      	ldr	r2, [pc, #780]	@ (8000848 <main+0x390>)
 800053a:	49c4      	ldr	r1, [pc, #784]	@ (800084c <main+0x394>)
 800053c:	48c4      	ldr	r0, [pc, #784]	@ (8000850 <main+0x398>)
 800053e:	f007 fe9f 	bl	8008280 <Motor_setup_EXTRA1>
   Motor_setup_EXTRA2(&htim10,&htim2   ,"PE00");
 8000542:	4ac4      	ldr	r2, [pc, #784]	@ (8000854 <main+0x39c>)
 8000544:	49c4      	ldr	r1, [pc, #784]	@ (8000858 <main+0x3a0>)
 8000546:	48c5      	ldr	r0, [pc, #788]	@ (800085c <main+0x3a4>)
 8000548:	f007 fec8 	bl	80082dc <Motor_setup_EXTRA2>

   Setup_Gear_Ratio(27);
 800054c:	201b      	movs	r0, #27
 800054e:	f007 ff13 	bl	8008378 <Setup_Gear_Ratio>
   Setup_CPR(68);
 8000552:	2044      	movs	r0, #68	@ 0x44
 8000554:	f007 ff00 	bl	8008358 <Setup_CPR>
   Setup_frequency_Motor(100);
 8000558:	2064      	movs	r0, #100	@ 0x64
 800055a:	f007 ff1d 	bl	8008398 <Setup_frequency_Motor>

   Setup_PID_LF(1.0 ,0.0 ,0.1 ,0 ,280);
 800055e:	ed9f 2ac0 	vldr	s4, [pc, #768]	@ 8000860 <main+0x3a8>
 8000562:	eddf 1ac0 	vldr	s3, [pc, #768]	@ 8000864 <main+0x3ac>
 8000566:	ed9f 1ac0 	vldr	s2, [pc, #768]	@ 8000868 <main+0x3b0>
 800056a:	eddf 0abe 	vldr	s1, [pc, #760]	@ 8000864 <main+0x3ac>
 800056e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000572:	f007 ffa9 	bl	80084c8 <Setup_PID_LF>
   Setup_PID_LB(1.0 ,0.0 ,0.1 ,0 ,280);
 8000576:	ed9f 2aba 	vldr	s4, [pc, #744]	@ 8000860 <main+0x3a8>
 800057a:	eddf 1aba 	vldr	s3, [pc, #744]	@ 8000864 <main+0x3ac>
 800057e:	ed9f 1aba 	vldr	s2, [pc, #744]	@ 8000868 <main+0x3b0>
 8000582:	eddf 0ab8 	vldr	s1, [pc, #736]	@ 8000864 <main+0x3ac>
 8000586:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800058a:	f007 ffc9 	bl	8008520 <Setup_PID_LB>
   Setup_PID_RF(1.0 ,0.0 ,0.1 ,0 ,280);
 800058e:	ed9f 2ab4 	vldr	s4, [pc, #720]	@ 8000860 <main+0x3a8>
 8000592:	eddf 1ab4 	vldr	s3, [pc, #720]	@ 8000864 <main+0x3ac>
 8000596:	ed9f 1ab4 	vldr	s2, [pc, #720]	@ 8000868 <main+0x3b0>
 800059a:	eddf 0ab2 	vldr	s1, [pc, #712]	@ 8000864 <main+0x3ac>
 800059e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80005a2:	f007 ffe9 	bl	8008578 <Setup_PID_RF>
   Setup_PID_RB(1.0 ,0.0 ,0.1 ,0 ,280);
 80005a6:	ed9f 2aae 	vldr	s4, [pc, #696]	@ 8000860 <main+0x3a8>
 80005aa:	eddf 1aae 	vldr	s3, [pc, #696]	@ 8000864 <main+0x3ac>
 80005ae:	ed9f 1aae 	vldr	s2, [pc, #696]	@ 8000868 <main+0x3b0>
 80005b2:	eddf 0aac 	vldr	s1, [pc, #688]	@ 8000864 <main+0x3ac>
 80005b6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80005ba:	f008 f809 	bl	80085d0 <Setup_PID_RB>
//   Setup_PID_EXTRA1(0.5 ,0.1 ,0 ,0 ,280);
//   Setup_PID_EXTRA2(0.5 ,0.1 ,0 ,0 ,280);

   Setup_frequency_Forward_Kinematic(100);
 80005be:	2064      	movs	r0, #100	@ 0x64
 80005c0:	f009 f840 	bl	8009644 <Setup_frequency_Forward_Kinematic>
   Setup_Forward_Kinematic(0.23f ,0.23f ,0.06f);
 80005c4:	ed9f 1aa9 	vldr	s2, [pc, #676]	@ 800086c <main+0x3b4>
 80005c8:	eddf 0aa9 	vldr	s1, [pc, #676]	@ 8000870 <main+0x3b8>
 80005cc:	ed9f 0aa8 	vldr	s0, [pc, #672]	@ 8000870 <main+0x3b8>
 80005d0:	f009 f81a 	bl	8009608 <Setup_Forward_Kinematic>

   Setup_Inverse_Kinematic(0.23f ,0.23f ,0.06f);
 80005d4:	ed9f 1aa5 	vldr	s2, [pc, #660]	@ 800086c <main+0x3b4>
 80005d8:	eddf 0aa5 	vldr	s1, [pc, #660]	@ 8000870 <main+0x3b8>
 80005dc:	ed9f 0aa4 	vldr	s0, [pc, #656]	@ 8000870 <main+0x3b8>
 80005e0:	f009 f840 	bl	8009664 <Setup_Inverse_Kinematic>

   //UAST2 esp_s3_zero to STM32
   HAL_UART_Receive_IT(&huart2, (uint8_t *)&Str_PS2, sizeof(Str_PS2));
 80005e4:	2212      	movs	r2, #18
 80005e6:	49a3      	ldr	r1, [pc, #652]	@ (8000874 <main+0x3bc>)
 80005e8:	48a3      	ldr	r0, [pc, #652]	@ (8000878 <main+0x3c0>)
 80005ea:	f005 fb25 	bl	8005c38 <HAL_UART_Receive_IT>
    /* USER CODE BEGIN 3 */

//	  CDC_Transmit_FS((uint8_t*)RPM ,6);
//	  HAL_Delay(1000);

	  if((uwTick - PastTime) > 10){
 80005ee:	4ba3      	ldr	r3, [pc, #652]	@ (800087c <main+0x3c4>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4aa3      	ldr	r2, [pc, #652]	@ (8000880 <main+0x3c8>)
 80005f4:	6812      	ldr	r2, [r2, #0]
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	2b0a      	cmp	r3, #10
 80005fa:	d9f8      	bls.n	80005ee <main+0x136>
         if(Str_PS2.seting[1] == 1){
 80005fc:	4b9d      	ldr	r3, [pc, #628]	@ (8000874 <main+0x3bc>)
 80005fe:	7b5b      	ldrb	r3, [r3, #13]
 8000600:	2b01      	cmp	r3, #1
 8000602:	f040 817a 	bne.w	80008fa <main+0x442>
         digitalWrite("PE07" , 1);
 8000606:	2101      	movs	r1, #1
 8000608:	489e      	ldr	r0, [pc, #632]	@ (8000884 <main+0x3cc>)
 800060a:	f008 fc97 	bl	8008f3c <digitalWrite>
//	    count[2] = getCount(&htim8);
//	    count[3] = getCount(&htim4);
//	    count[4] = getCount(&htim2);
//	    count[5] = getCount(&htim3);

	    RPM[0] = getRPM_TIM_Wheel(&htim5 ,LF);
 800060e:	2100      	movs	r1, #0
 8000610:	4883      	ldr	r0, [pc, #524]	@ (8000820 <main+0x368>)
 8000612:	f007 feeb 	bl	80083ec <getRPM_TIM_Wheel>
 8000616:	eef0 7a40 	vmov.f32	s15, s0
 800061a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800061e:	ee17 3a90 	vmov	r3, s15
 8000622:	b21a      	sxth	r2, r3
 8000624:	4b98      	ldr	r3, [pc, #608]	@ (8000888 <main+0x3d0>)
 8000626:	801a      	strh	r2, [r3, #0]
	    RPM[1] = -getRPM_TIM_Wheel(&htim1 ,LB);
 8000628:	2101      	movs	r1, #1
 800062a:	4880      	ldr	r0, [pc, #512]	@ (800082c <main+0x374>)
 800062c:	f007 fede 	bl	80083ec <getRPM_TIM_Wheel>
 8000630:	eef0 7a40 	vmov.f32	s15, s0
 8000634:	eef1 7a67 	vneg.f32	s15, s15
 8000638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800063c:	ee17 3a90 	vmov	r3, s15
 8000640:	b21a      	sxth	r2, r3
 8000642:	4b91      	ldr	r3, [pc, #580]	@ (8000888 <main+0x3d0>)
 8000644:	805a      	strh	r2, [r3, #2]
	    RPM[2] = getRPM_TIM_Wheel(&htim8 ,RF);
 8000646:	2102      	movs	r1, #2
 8000648:	487b      	ldr	r0, [pc, #492]	@ (8000838 <main+0x380>)
 800064a:	f007 fecf 	bl	80083ec <getRPM_TIM_Wheel>
 800064e:	eef0 7a40 	vmov.f32	s15, s0
 8000652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000656:	ee17 3a90 	vmov	r3, s15
 800065a:	b21a      	sxth	r2, r3
 800065c:	4b8a      	ldr	r3, [pc, #552]	@ (8000888 <main+0x3d0>)
 800065e:	809a      	strh	r2, [r3, #4]
	    RPM[3] = getRPM_TIM_Wheel(&htim4 ,RB);
 8000660:	2103      	movs	r1, #3
 8000662:	4878      	ldr	r0, [pc, #480]	@ (8000844 <main+0x38c>)
 8000664:	f007 fec2 	bl	80083ec <getRPM_TIM_Wheel>
 8000668:	eef0 7a40 	vmov.f32	s15, s0
 800066c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000670:	ee17 3a90 	vmov	r3, s15
 8000674:	b21a      	sxth	r2, r3
 8000676:	4b84      	ldr	r3, [pc, #528]	@ (8000888 <main+0x3d0>)
 8000678:	80da      	strh	r2, [r3, #6]
//	    RPM[5] = getRPM_TIM_Wheel(&htim2 ,EXTRA2);

//		Odometry_Forward_Kinematic(getRPM_to_Rad_s(RPM[0]), getRPM_to_Rad_s(RPM[1]), getRPM_to_Rad_s(RPM[2]), getRPM_to_Rad_s(RPM[3]));
//		x = get_Vz();

	    Inverse_Kinematic(Vx ,Vy ,Vz);
 800067a:	4b84      	ldr	r3, [pc, #528]	@ (800088c <main+0x3d4>)
 800067c:	edd3 7a00 	vldr	s15, [r3]
 8000680:	4b83      	ldr	r3, [pc, #524]	@ (8000890 <main+0x3d8>)
 8000682:	ed93 7a00 	vldr	s14, [r3]
 8000686:	4b83      	ldr	r3, [pc, #524]	@ (8000894 <main+0x3dc>)
 8000688:	edd3 6a00 	vldr	s13, [r3]
 800068c:	eeb0 1a66 	vmov.f32	s2, s13
 8000690:	eef0 0a47 	vmov.f32	s1, s14
 8000694:	eeb0 0a67 	vmov.f32	s0, s15
 8000698:	f009 f802 	bl	80096a0 <Inverse_Kinematic>

	    PID[0] = Motor_Speed_LF(getRad_s_to_RPM(get_w_LF()) ,RPM[0]);
 800069c:	f009 f892 	bl	80097c4 <get_w_LF>
 80006a0:	eef0 7a40 	vmov.f32	s15, s0
 80006a4:	eeb0 0a67 	vmov.f32	s0, s15
 80006a8:	f007 fe86 	bl	80083b8 <getRad_s_to_RPM>
 80006ac:	eef0 7a40 	vmov.f32	s15, s0
 80006b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006b4:	ee17 3a90 	vmov	r3, s15
 80006b8:	b21b      	sxth	r3, r3
 80006ba:	4a73      	ldr	r2, [pc, #460]	@ (8000888 <main+0x3d0>)
 80006bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80006c0:	ee07 2a90 	vmov	s15, r2
 80006c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006c8:	eeb0 0a67 	vmov.f32	s0, s15
 80006cc:	4618      	mov	r0, r3
 80006ce:	f008 fa6d 	bl	8008bac <Motor_Speed_LF>
 80006d2:	eef0 7a40 	vmov.f32	s15, s0
 80006d6:	4b70      	ldr	r3, [pc, #448]	@ (8000898 <main+0x3e0>)
 80006d8:	edc3 7a00 	vstr	s15, [r3]
	    PID[1] = Motor_Speed_LB(getRad_s_to_RPM(get_w_LB()) ,RPM[1]);
 80006dc:	f009 f880 	bl	80097e0 <get_w_LB>
 80006e0:	eef0 7a40 	vmov.f32	s15, s0
 80006e4:	eeb0 0a67 	vmov.f32	s0, s15
 80006e8:	f007 fe66 	bl	80083b8 <getRad_s_to_RPM>
 80006ec:	eef0 7a40 	vmov.f32	s15, s0
 80006f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006f4:	ee17 3a90 	vmov	r3, s15
 80006f8:	b21b      	sxth	r3, r3
 80006fa:	4a63      	ldr	r2, [pc, #396]	@ (8000888 <main+0x3d0>)
 80006fc:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000700:	ee07 2a90 	vmov	s15, r2
 8000704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000708:	eeb0 0a67 	vmov.f32	s0, s15
 800070c:	4618      	mov	r0, r3
 800070e:	f008 fabf 	bl	8008c90 <Motor_Speed_LB>
 8000712:	eef0 7a40 	vmov.f32	s15, s0
 8000716:	4b60      	ldr	r3, [pc, #384]	@ (8000898 <main+0x3e0>)
 8000718:	edc3 7a01 	vstr	s15, [r3, #4]
	    PID[2] = Motor_Speed_RF(getRad_s_to_RPM(get_w_RF()) ,RPM[2]);
 800071c:	f009 f86e 	bl	80097fc <get_w_RF>
 8000720:	eef0 7a40 	vmov.f32	s15, s0
 8000724:	eeb0 0a67 	vmov.f32	s0, s15
 8000728:	f007 fe46 	bl	80083b8 <getRad_s_to_RPM>
 800072c:	eef0 7a40 	vmov.f32	s15, s0
 8000730:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000734:	ee17 3a90 	vmov	r3, s15
 8000738:	b21b      	sxth	r3, r3
 800073a:	4a53      	ldr	r2, [pc, #332]	@ (8000888 <main+0x3d0>)
 800073c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000740:	ee07 2a90 	vmov	s15, r2
 8000744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000748:	eeb0 0a67 	vmov.f32	s0, s15
 800074c:	4618      	mov	r0, r3
 800074e:	f008 fb11 	bl	8008d74 <Motor_Speed_RF>
 8000752:	eef0 7a40 	vmov.f32	s15, s0
 8000756:	4b50      	ldr	r3, [pc, #320]	@ (8000898 <main+0x3e0>)
 8000758:	edc3 7a02 	vstr	s15, [r3, #8]
	    PID[3] = Motor_Speed_RB(getRad_s_to_RPM(get_w_RB()) ,RPM[3]);
 800075c:	f009 f85c 	bl	8009818 <get_w_RB>
 8000760:	eef0 7a40 	vmov.f32	s15, s0
 8000764:	eeb0 0a67 	vmov.f32	s0, s15
 8000768:	f007 fe26 	bl	80083b8 <getRad_s_to_RPM>
 800076c:	eef0 7a40 	vmov.f32	s15, s0
 8000770:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000774:	ee17 3a90 	vmov	r3, s15
 8000778:	b21b      	sxth	r3, r3
 800077a:	4a43      	ldr	r2, [pc, #268]	@ (8000888 <main+0x3d0>)
 800077c:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000780:	ee07 2a90 	vmov	s15, r2
 8000784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000788:	eeb0 0a67 	vmov.f32	s0, s15
 800078c:	4618      	mov	r0, r3
 800078e:	f008 fb63 	bl	8008e58 <Motor_Speed_RB>
 8000792:	eef0 7a40 	vmov.f32	s15, s0
 8000796:	4b40      	ldr	r3, [pc, #256]	@ (8000898 <main+0x3e0>)
 8000798:	edc3 7a03 	vstr	s15, [r3, #12]
//	    PID[1] = Motor_Speed_LB(-180 ,RPM[1]);
//	    PID[2] = Motor_Speed_RF(-180 ,RPM[2]);
//	    PID[3] = Motor_Speed_RB(-180 ,RPM[3]);


	    if ((Str_PS2.attack[2] == 1) && (lastButtonState_load_Ball == 0)) {
 800079c:	4b35      	ldr	r3, [pc, #212]	@ (8000874 <main+0x3bc>)
 800079e:	799b      	ldrb	r3, [r3, #6]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d113      	bne.n	80007cc <main+0x314>
 80007a4:	4b3d      	ldr	r3, [pc, #244]	@ (800089c <main+0x3e4>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d10f      	bne.n	80007cc <main+0x314>
	    	status_load_Ball = !status_load_Ball;
 80007ac:	4b3c      	ldr	r3, [pc, #240]	@ (80008a0 <main+0x3e8>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	bf0c      	ite	eq
 80007b4:	2301      	moveq	r3, #1
 80007b6:	2300      	movne	r3, #0
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	461a      	mov	r2, r3
 80007bc:	4b38      	ldr	r3, [pc, #224]	@ (80008a0 <main+0x3e8>)
 80007be:	701a      	strb	r2, [r3, #0]
	        digitalWrite("PE10", status_load_Ball);
 80007c0:	4b37      	ldr	r3, [pc, #220]	@ (80008a0 <main+0x3e8>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	4837      	ldr	r0, [pc, #220]	@ (80008a4 <main+0x3ec>)
 80007c8:	f008 fbb8 	bl	8008f3c <digitalWrite>
	    }
	    lastButtonState_load_Ball = Str_PS2.attack[2];
 80007cc:	4b29      	ldr	r3, [pc, #164]	@ (8000874 <main+0x3bc>)
 80007ce:	799a      	ldrb	r2, [r3, #6]
 80007d0:	4b32      	ldr	r3, [pc, #200]	@ (800089c <main+0x3e4>)
 80007d2:	701a      	strb	r2, [r3, #0]

	    if ((Str_PS2.attack[1] == 1) && (lastButtonState_re_Ball == 0)) {
 80007d4:	4b27      	ldr	r3, [pc, #156]	@ (8000874 <main+0x3bc>)
 80007d6:	795b      	ldrb	r3, [r3, #5]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d113      	bne.n	8000804 <main+0x34c>
 80007dc:	4b32      	ldr	r3, [pc, #200]	@ (80008a8 <main+0x3f0>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d10f      	bne.n	8000804 <main+0x34c>
	    	status_re_Ball = !status_re_Ball;
 80007e4:	4b31      	ldr	r3, [pc, #196]	@ (80008ac <main+0x3f4>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	bf0c      	ite	eq
 80007ec:	2301      	moveq	r3, #1
 80007ee:	2300      	movne	r3, #0
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	461a      	mov	r2, r3
 80007f4:	4b2d      	ldr	r3, [pc, #180]	@ (80008ac <main+0x3f4>)
 80007f6:	701a      	strb	r2, [r3, #0]
	   	    digitalWrite("PE08", status_re_Ball);
 80007f8:	4b2c      	ldr	r3, [pc, #176]	@ (80008ac <main+0x3f4>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4619      	mov	r1, r3
 80007fe:	482c      	ldr	r0, [pc, #176]	@ (80008b0 <main+0x3f8>)
 8000800:	f008 fb9c 	bl	8008f3c <digitalWrite>
	   	 }
	    lastButtonState_re_Ball = Str_PS2.attack[1];
 8000804:	4b1b      	ldr	r3, [pc, #108]	@ (8000874 <main+0x3bc>)
 8000806:	795a      	ldrb	r2, [r3, #5]
 8000808:	4b27      	ldr	r3, [pc, #156]	@ (80008a8 <main+0x3f0>)
 800080a:	701a      	strb	r2, [r3, #0]


	   	 if(Str_PS2.attack[5] == 1){
 800080c:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <main+0x3bc>)
 800080e:	7a5b      	ldrb	r3, [r3, #9]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d151      	bne.n	80008b8 <main+0x400>
	   	    Motor_DutyCycle_EXTRA1(-2000);
 8000814:	4827      	ldr	r0, [pc, #156]	@ (80008b4 <main+0x3fc>)
 8000816:	f008 f919 	bl	8008a4c <Motor_DutyCycle_EXTRA1>
 800081a:	e059      	b.n	80008d0 <main+0x418>
 800081c:	0800c258 	.word	0x0800c258
 8000820:	20000340 	.word	0x20000340
 8000824:	20000538 	.word	0x20000538
 8000828:	0800c260 	.word	0x0800c260
 800082c:	20000220 	.word	0x20000220
 8000830:	200004a8 	.word	0x200004a8
 8000834:	0800c268 	.word	0x0800c268
 8000838:	20000388 	.word	0x20000388
 800083c:	20000460 	.word	0x20000460
 8000840:	0800c270 	.word	0x0800c270
 8000844:	200002f8 	.word	0x200002f8
 8000848:	0800c278 	.word	0x0800c278
 800084c:	200002b0 	.word	0x200002b0
 8000850:	200003d0 	.word	0x200003d0
 8000854:	0800c280 	.word	0x0800c280
 8000858:	20000268 	.word	0x20000268
 800085c:	20000418 	.word	0x20000418
 8000860:	438c0000 	.word	0x438c0000
 8000864:	00000000 	.word	0x00000000
 8000868:	3dcccccd 	.word	0x3dcccccd
 800086c:	3d75c28f 	.word	0x3d75c28f
 8000870:	3e6b851f 	.word	0x3e6b851f
 8000874:	20000638 	.word	0x20000638
 8000878:	200005c8 	.word	0x200005c8
 800087c:	20000650 	.word	0x20000650
 8000880:	2000061c 	.word	0x2000061c
 8000884:	0800c288 	.word	0x0800c288
 8000888:	20000000 	.word	0x20000000
 800088c:	20000610 	.word	0x20000610
 8000890:	20000614 	.word	0x20000614
 8000894:	20000618 	.word	0x20000618
 8000898:	20000620 	.word	0x20000620
 800089c:	2000064c 	.word	0x2000064c
 80008a0:	2000064a 	.word	0x2000064a
 80008a4:	0800c290 	.word	0x0800c290
 80008a8:	2000064d 	.word	0x2000064d
 80008ac:	2000064b 	.word	0x2000064b
 80008b0:	0800c298 	.word	0x0800c298
 80008b4:	fffff830 	.word	0xfffff830
	   	 }else if(Str_PS2.attack[7] == 1){
 80008b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <main+0x480>)
 80008ba:	7adb      	ldrb	r3, [r3, #11]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d104      	bne.n	80008ca <main+0x412>
	   	    Motor_DutyCycle_EXTRA1(2000);
 80008c0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008c4:	f008 f8c2 	bl	8008a4c <Motor_DutyCycle_EXTRA1>
 80008c8:	e002      	b.n	80008d0 <main+0x418>
	   	 }else{
	   		Motor_DutyCycle_EXTRA1(0);
 80008ca:	2000      	movs	r0, #0
 80008cc:	f008 f8be 	bl	8008a4c <Motor_DutyCycle_EXTRA1>
	   	 }


	   	 if(Str_PS2.attack[3] == 1){
 80008d0:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <main+0x480>)
 80008d2:	79db      	ldrb	r3, [r3, #7]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d104      	bne.n	80008e2 <main+0x42a>
	   	    Motor_DutyCycle_EXTRA2(4000);
 80008d8:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80008dc:	f008 f90e 	bl	8008afc <Motor_DutyCycle_EXTRA2>
 80008e0:	e024      	b.n	800092c <main+0x474>
	   	 }else if(Str_PS2.attack[0] == 1){
 80008e2:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <main+0x480>)
 80008e4:	791b      	ldrb	r3, [r3, #4]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d103      	bne.n	80008f2 <main+0x43a>
		   	Motor_DutyCycle_EXTRA2(-4000);
 80008ea:	4814      	ldr	r0, [pc, #80]	@ (800093c <main+0x484>)
 80008ec:	f008 f906 	bl	8008afc <Motor_DutyCycle_EXTRA2>
 80008f0:	e01c      	b.n	800092c <main+0x474>
		 }else{
	   		Motor_DutyCycle_EXTRA2(0);
 80008f2:	2000      	movs	r0, #0
 80008f4:	f008 f902 	bl	8008afc <Motor_DutyCycle_EXTRA2>
 80008f8:	e018      	b.n	800092c <main+0x474>
	   	 }

         }else{
        	 Motor_DutyCycle_LF(0);
 80008fa:	2000      	movs	r0, #0
 80008fc:	f007 ff3e 	bl	800877c <Motor_DutyCycle_LF>
        	 Motor_DutyCycle_LB(0);
 8000900:	2000      	movs	r0, #0
 8000902:	f007 ff93 	bl	800882c <Motor_DutyCycle_LB>
        	 Motor_DutyCycle_RF(0);
 8000906:	2000      	movs	r0, #0
 8000908:	f007 ffec 	bl	80088e4 <Motor_DutyCycle_RF>
        	 Motor_DutyCycle_RB(0);
 800090c:	2000      	movs	r0, #0
 800090e:	f008 f845 	bl	800899c <Motor_DutyCycle_RB>
        	 Motor_DutyCycle_EXTRA1(0);
 8000912:	2000      	movs	r0, #0
 8000914:	f008 f89a 	bl	8008a4c <Motor_DutyCycle_EXTRA1>
        	 Motor_DutyCycle_EXTRA2(0);
 8000918:	2000      	movs	r0, #0
 800091a:	f008 f8ef 	bl	8008afc <Motor_DutyCycle_EXTRA2>
        	 digitalWrite("PE07" , 0);
 800091e:	2100      	movs	r1, #0
 8000920:	4807      	ldr	r0, [pc, #28]	@ (8000940 <main+0x488>)
 8000922:	f008 fb0b 	bl	8008f3c <digitalWrite>
        	 HAL_UART_IRQHandler(&huart2);
 8000926:	4807      	ldr	r0, [pc, #28]	@ (8000944 <main+0x48c>)
 8000928:	f005 f9ac 	bl	8005c84 <HAL_UART_IRQHandler>
         }
	    PastTime = uwTick;
 800092c:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <main+0x490>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	4b06      	ldr	r3, [pc, #24]	@ (800094c <main+0x494>)
 8000934:	601a      	str	r2, [r3, #0]
	  if((uwTick - PastTime) > 10){
 8000936:	e65a      	b.n	80005ee <main+0x136>
 8000938:	20000638 	.word	0x20000638
 800093c:	fffff060 	.word	0xfffff060
 8000940:	0800c288 	.word	0x0800c288
 8000944:	200005c8 	.word	0x200005c8
 8000948:	20000650 	.word	0x20000650
 800094c:	2000061c 	.word	0x2000061c

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b094      	sub	sp, #80	@ 0x50
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0320 	add.w	r3, r7, #32
 800095a:	2230      	movs	r2, #48	@ 0x30
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f00b fc34 	bl	800c1cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	4b28      	ldr	r3, [pc, #160]	@ (8000a1c <SystemClock_Config+0xcc>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097c:	4a27      	ldr	r2, [pc, #156]	@ (8000a1c <SystemClock_Config+0xcc>)
 800097e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000982:	6413      	str	r3, [r2, #64]	@ 0x40
 8000984:	4b25      	ldr	r3, [pc, #148]	@ (8000a1c <SystemClock_Config+0xcc>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	4b22      	ldr	r3, [pc, #136]	@ (8000a20 <SystemClock_Config+0xd0>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a21      	ldr	r2, [pc, #132]	@ (8000a20 <SystemClock_Config+0xd0>)
 800099a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a20 <SystemClock_Config+0xd0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009ac:	2301      	movs	r3, #1
 80009ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b6:	2302      	movs	r3, #2
 80009b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 7;
 80009c0:	2307      	movs	r3, #7
 80009c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009c4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ca:	2304      	movs	r3, #4
 80009cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80009ce:	2308      	movs	r3, #8
 80009d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d2:	f107 0320 	add.w	r3, r7, #32
 80009d6:	4618      	mov	r0, r3
 80009d8:	f003 fd62 	bl	80044a0 <HAL_RCC_OscConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009e2:	f000 fe21 	bl	8001628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e6:	230f      	movs	r3, #15
 80009e8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ea:	2302      	movs	r3, #2
 80009ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009f2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009fe:	f107 030c 	add.w	r3, r7, #12
 8000a02:	2103      	movs	r1, #3
 8000a04:	4618      	mov	r0, r3
 8000a06:	f003 ffc3 	bl	8004990 <HAL_RCC_ClockConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a10:	f000 fe0a 	bl	8001628 <Error_Handler>
  }
}
 8000a14:	bf00      	nop
 8000a16:	3750      	adds	r7, #80	@ 0x50
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40007000 	.word	0x40007000

08000a24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a36:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <MX_ADC1_Init+0x98>)
 8000a38:	4a21      	ldr	r2, [pc, #132]	@ (8000ac0 <MX_ADC1_Init+0x9c>)
 8000a3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000abc <MX_ADC1_Init+0x98>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	@ (8000abc <MX_ADC1_Init+0x98>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <MX_ADC1_Init+0x98>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000abc <MX_ADC1_Init+0x98>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a54:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <MX_ADC1_Init+0x98>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a5c:	4b17      	ldr	r3, [pc, #92]	@ (8000abc <MX_ADC1_Init+0x98>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a62:	4b16      	ldr	r3, [pc, #88]	@ (8000abc <MX_ADC1_Init+0x98>)
 8000a64:	4a17      	ldr	r2, [pc, #92]	@ (8000ac4 <MX_ADC1_Init+0xa0>)
 8000a66:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a68:	4b14      	ldr	r3, [pc, #80]	@ (8000abc <MX_ADC1_Init+0x98>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	@ (8000abc <MX_ADC1_Init+0x98>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a74:	4b11      	ldr	r3, [pc, #68]	@ (8000abc <MX_ADC1_Init+0x98>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000abc <MX_ADC1_Init+0x98>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a82:	480e      	ldr	r0, [pc, #56]	@ (8000abc <MX_ADC1_Init+0x98>)
 8000a84:	f001 fbba 	bl	80021fc <HAL_ADC_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a8e:	f000 fdcb 	bl	8001628 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a92:	2304      	movs	r3, #4
 8000a94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a96:	2301      	movs	r3, #1
 8000a98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	@ (8000abc <MX_ADC1_Init+0x98>)
 8000aa4:	f001 fbee 	bl	8002284 <HAL_ADC_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000aae:	f000 fdbb 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	2000012c 	.word	0x2000012c
 8000ac0:	40012000 	.word	0x40012000
 8000ac4:	0f000001 	.word	0x0f000001

08000ac8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <MX_I2C2_Init+0x50>)
 8000ace:	4a13      	ldr	r2, [pc, #76]	@ (8000b1c <MX_I2C2_Init+0x54>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <MX_I2C2_Init+0x50>)
 8000ad4:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <MX_I2C2_Init+0x58>)
 8000ad6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <MX_I2C2_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <MX_I2C2_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <MX_I2C2_Init+0x50>)
 8000ae6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aec:	4b0a      	ldr	r3, [pc, #40]	@ (8000b18 <MX_I2C2_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <MX_I2C2_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af8:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <MX_I2C2_Init+0x50>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <MX_I2C2_Init+0x50>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b04:	4804      	ldr	r0, [pc, #16]	@ (8000b18 <MX_I2C2_Init+0x50>)
 8000b06:	f002 f935 	bl	8002d74 <HAL_I2C_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b10:	f000 fd8a 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000174 	.word	0x20000174
 8000b1c:	40005800 	.word	0x40005800
 8000b20:	00061a80 	.word	0x00061a80

08000b24 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b28:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <MX_SPI2_Init+0x64>)
 8000b2a:	4a18      	ldr	r2, [pc, #96]	@ (8000b8c <MX_SPI2_Init+0x68>)
 8000b2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b2e:	4b16      	ldr	r3, [pc, #88]	@ (8000b88 <MX_SPI2_Init+0x64>)
 8000b30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b36:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <MX_SPI2_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b3c:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <MX_SPI2_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <MX_SPI2_Init+0x64>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b48:	4b0f      	ldr	r3, [pc, #60]	@ (8000b88 <MX_SPI2_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <MX_SPI2_Init+0x64>)
 8000b50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b54:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b56:	4b0c      	ldr	r3, [pc, #48]	@ (8000b88 <MX_SPI2_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <MX_SPI2_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b62:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <MX_SPI2_Init+0x64>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b68:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <MX_SPI2_Init+0x64>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <MX_SPI2_Init+0x64>)
 8000b70:	220a      	movs	r2, #10
 8000b72:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b74:	4804      	ldr	r0, [pc, #16]	@ (8000b88 <MX_SPI2_Init+0x64>)
 8000b76:	f004 f92b 	bl	8004dd0 <HAL_SPI_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b80:	f000 fd52 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	200001c8 	.word	0x200001c8
 8000b8c:	40003800 	.word	0x40003800

08000b90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	@ 0x30
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	2224      	movs	r2, #36	@ 0x24
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f00b fb14 	bl	800c1cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bac:	4b22      	ldr	r3, [pc, #136]	@ (8000c38 <MX_TIM1_Init+0xa8>)
 8000bae:	4a23      	ldr	r2, [pc, #140]	@ (8000c3c <MX_TIM1_Init+0xac>)
 8000bb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bb2:	4b21      	ldr	r3, [pc, #132]	@ (8000c38 <MX_TIM1_Init+0xa8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c38 <MX_TIM1_Init+0xa8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8000c38 <MX_TIM1_Init+0xa8>)
 8000bc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <MX_TIM1_Init+0xa8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <MX_TIM1_Init+0xa8>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	@ (8000c38 <MX_TIM1_Init+0xa8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000be0:	2301      	movs	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bec:	2300      	movs	r3, #0
 8000bee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	4619      	mov	r1, r3
 8000c02:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <MX_TIM1_Init+0xa8>)
 8000c04:	f004 fad4 	bl	80051b0 <HAL_TIM_Encoder_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000c0e:	f000 fd0b 	bl	8001628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4806      	ldr	r0, [pc, #24]	@ (8000c38 <MX_TIM1_Init+0xa8>)
 8000c20:	f004 ff3e 	bl	8005aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000c2a:	f000 fcfd 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	3730      	adds	r7, #48	@ 0x30
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000220 	.word	0x20000220
 8000c3c:	40010000 	.word	0x40010000

08000c40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	@ 0x30
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c46:	f107 030c 	add.w	r3, r7, #12
 8000c4a:	2224      	movs	r2, #36	@ 0x24
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f00b fabc 	bl	800c1cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ce4 <MX_TIM2_Init+0xa4>)
 8000c5e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce4 <MX_TIM2_Init+0xa4>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce4 <MX_TIM2_Init+0xa4>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c70:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce4 <MX_TIM2_Init+0xa4>)
 8000c72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce4 <MX_TIM2_Init+0xa4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ce4 <MX_TIM2_Init+0xa4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c84:	2303      	movs	r3, #3
 8000c86:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	4619      	mov	r1, r3
 8000cae:	480d      	ldr	r0, [pc, #52]	@ (8000ce4 <MX_TIM2_Init+0xa4>)
 8000cb0:	f004 fa7e 	bl	80051b0 <HAL_TIM_Encoder_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000cba:	f000 fcb5 	bl	8001628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4806      	ldr	r0, [pc, #24]	@ (8000ce4 <MX_TIM2_Init+0xa4>)
 8000ccc:	f004 fee8 	bl	8005aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000cd6:	f000 fca7 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	3730      	adds	r7, #48	@ 0x30
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000268 	.word	0x20000268

08000ce8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	@ 0x30
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	2224      	movs	r2, #36	@ 0x24
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f00b fa68 	bl	800c1cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d04:	4b20      	ldr	r3, [pc, #128]	@ (8000d88 <MX_TIM3_Init+0xa0>)
 8000d06:	4a21      	ldr	r2, [pc, #132]	@ (8000d8c <MX_TIM3_Init+0xa4>)
 8000d08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000d88 <MX_TIM3_Init+0xa0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b1d      	ldr	r3, [pc, #116]	@ (8000d88 <MX_TIM3_Init+0xa0>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d16:	4b1c      	ldr	r3, [pc, #112]	@ (8000d88 <MX_TIM3_Init+0xa0>)
 8000d18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d88 <MX_TIM3_Init+0xa0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d24:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <MX_TIM3_Init+0xa0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d32:	2301      	movs	r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d42:	2301      	movs	r3, #1
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	4619      	mov	r1, r3
 8000d54:	480c      	ldr	r0, [pc, #48]	@ (8000d88 <MX_TIM3_Init+0xa0>)
 8000d56:	f004 fa2b 	bl	80051b0 <HAL_TIM_Encoder_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000d60:	f000 fc62 	bl	8001628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d64:	2300      	movs	r3, #0
 8000d66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <MX_TIM3_Init+0xa0>)
 8000d72:	f004 fe95 	bl	8005aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000d7c:	f000 fc54 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	3730      	adds	r7, #48	@ 0x30
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200002b0 	.word	0x200002b0
 8000d8c:	40000400 	.word	0x40000400

08000d90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08c      	sub	sp, #48	@ 0x30
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	2224      	movs	r2, #36	@ 0x24
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f00b fa14 	bl	800c1cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dac:	4b20      	ldr	r3, [pc, #128]	@ (8000e30 <MX_TIM4_Init+0xa0>)
 8000dae:	4a21      	ldr	r2, [pc, #132]	@ (8000e34 <MX_TIM4_Init+0xa4>)
 8000db0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000db2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e30 <MX_TIM4_Init+0xa0>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e30 <MX_TIM4_Init+0xa0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <MX_TIM4_Init+0xa0>)
 8000dc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dc4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <MX_TIM4_Init+0xa0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dcc:	4b18      	ldr	r3, [pc, #96]	@ (8000e30 <MX_TIM4_Init+0xa0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dea:	2301      	movs	r3, #1
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <MX_TIM4_Init+0xa0>)
 8000dfe:	f004 f9d7 	bl	80051b0 <HAL_TIM_Encoder_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000e08:	f000 fc0e 	bl	8001628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <MX_TIM4_Init+0xa0>)
 8000e1a:	f004 fe41 	bl	8005aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000e24:	f000 fc00 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	3730      	adds	r7, #48	@ 0x30
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	200002f8 	.word	0x200002f8
 8000e34:	40000800 	.word	0x40000800

08000e38 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08c      	sub	sp, #48	@ 0x30
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	2224      	movs	r2, #36	@ 0x24
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f00b f9c0 	bl	800c1cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e54:	4b20      	ldr	r3, [pc, #128]	@ (8000ed8 <MX_TIM5_Init+0xa0>)
 8000e56:	4a21      	ldr	r2, [pc, #132]	@ (8000edc <MX_TIM5_Init+0xa4>)
 8000e58:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed8 <MX_TIM5_Init+0xa0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e60:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <MX_TIM5_Init+0xa0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <MX_TIM5_Init+0xa0>)
 8000e68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e6c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <MX_TIM5_Init+0xa0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e74:	4b18      	ldr	r3, [pc, #96]	@ (8000ed8 <MX_TIM5_Init+0xa0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e82:	2301      	movs	r3, #1
 8000e84:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e92:	2301      	movs	r3, #1
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000e9e:	f107 030c 	add.w	r3, r7, #12
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	480c      	ldr	r0, [pc, #48]	@ (8000ed8 <MX_TIM5_Init+0xa0>)
 8000ea6:	f004 f983 	bl	80051b0 <HAL_TIM_Encoder_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000eb0:	f000 fbba 	bl	8001628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4805      	ldr	r0, [pc, #20]	@ (8000ed8 <MX_TIM5_Init+0xa0>)
 8000ec2:	f004 fded 	bl	8005aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000ecc:	f000 fbac 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	3730      	adds	r7, #48	@ 0x30
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000340 	.word	0x20000340
 8000edc:	40000c00 	.word	0x40000c00

08000ee0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08c      	sub	sp, #48	@ 0x30
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	2224      	movs	r2, #36	@ 0x24
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f00b f96c 	bl	800c1cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef4:	1d3b      	adds	r3, r7, #4
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000efc:	4b22      	ldr	r3, [pc, #136]	@ (8000f88 <MX_TIM8_Init+0xa8>)
 8000efe:	4a23      	ldr	r2, [pc, #140]	@ (8000f8c <MX_TIM8_Init+0xac>)
 8000f00:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000f02:	4b21      	ldr	r3, [pc, #132]	@ (8000f88 <MX_TIM8_Init+0xa8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f08:	4b1f      	ldr	r3, [pc, #124]	@ (8000f88 <MX_TIM8_Init+0xa8>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f88 <MX_TIM8_Init+0xa8>)
 8000f10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f14:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f16:	4b1c      	ldr	r3, [pc, #112]	@ (8000f88 <MX_TIM8_Init+0xa8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <MX_TIM8_Init+0xa8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f22:	4b19      	ldr	r3, [pc, #100]	@ (8000f88 <MX_TIM8_Init+0xa8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f30:	2301      	movs	r3, #1
 8000f32:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f40:	2301      	movs	r3, #1
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	4619      	mov	r1, r3
 8000f52:	480d      	ldr	r0, [pc, #52]	@ (8000f88 <MX_TIM8_Init+0xa8>)
 8000f54:	f004 f92c 	bl	80051b0 <HAL_TIM_Encoder_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8000f5e:	f000 fb63 	bl	8001628 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	@ (8000f88 <MX_TIM8_Init+0xa8>)
 8000f70:	f004 fd96 	bl	8005aa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8000f7a:	f000 fb55 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	3730      	adds	r7, #48	@ 0x30
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000388 	.word	0x20000388
 8000f8c:	40010400 	.word	0x40010400

08000f90 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
 8000fa4:	615a      	str	r2, [r3, #20]
 8000fa6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8001028 <MX_TIM9_Init+0x98>)
 8000faa:	4a20      	ldr	r2, [pc, #128]	@ (800102c <MX_TIM9_Init+0x9c>)
 8000fac:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 2-1;
 8000fae:	4b1e      	ldr	r3, [pc, #120]	@ (8001028 <MX_TIM9_Init+0x98>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001028 <MX_TIM9_Init+0x98>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4096-1;
 8000fba:	4b1b      	ldr	r3, [pc, #108]	@ (8001028 <MX_TIM9_Init+0x98>)
 8000fbc:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000fc0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc2:	4b19      	ldr	r3, [pc, #100]	@ (8001028 <MX_TIM9_Init+0x98>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc8:	4b17      	ldr	r3, [pc, #92]	@ (8001028 <MX_TIM9_Init+0x98>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000fce:	4816      	ldr	r0, [pc, #88]	@ (8001028 <MX_TIM9_Init+0x98>)
 8000fd0:	f003 ffd6 	bl	8004f80 <HAL_TIM_PWM_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8000fda:	f000 fb25 	bl	8001628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fde:	2360      	movs	r3, #96	@ 0x60
 8000fe0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480c      	ldr	r0, [pc, #48]	@ (8001028 <MX_TIM9_Init+0x98>)
 8000ff6:	f004 fa0f 	bl	8005418 <HAL_TIM_PWM_ConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001000:	f000 fb12 	bl	8001628 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	2204      	movs	r2, #4
 8001008:	4619      	mov	r1, r3
 800100a:	4807      	ldr	r0, [pc, #28]	@ (8001028 <MX_TIM9_Init+0x98>)
 800100c:	f004 fa04 	bl	8005418 <HAL_TIM_PWM_ConfigChannel>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001016:	f000 fb07 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800101a:	4803      	ldr	r0, [pc, #12]	@ (8001028 <MX_TIM9_Init+0x98>)
 800101c:	f000 fe54 	bl	8001cc8 <HAL_TIM_MspPostInit>

}
 8001020:	bf00      	nop
 8001022:	3720      	adds	r7, #32
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200003d0 	.word	0x200003d0
 800102c:	40014000 	.word	0x40014000

08001030 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
 8001044:	615a      	str	r2, [r3, #20]
 8001046:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001048:	4b1e      	ldr	r3, [pc, #120]	@ (80010c4 <MX_TIM10_Init+0x94>)
 800104a:	4a1f      	ldr	r2, [pc, #124]	@ (80010c8 <MX_TIM10_Init+0x98>)
 800104c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 2-1;
 800104e:	4b1d      	ldr	r3, [pc, #116]	@ (80010c4 <MX_TIM10_Init+0x94>)
 8001050:	2201      	movs	r2, #1
 8001052:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001054:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <MX_TIM10_Init+0x94>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4096-1;
 800105a:	4b1a      	ldr	r3, [pc, #104]	@ (80010c4 <MX_TIM10_Init+0x94>)
 800105c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001060:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001062:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <MX_TIM10_Init+0x94>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001068:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <MX_TIM10_Init+0x94>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800106e:	4815      	ldr	r0, [pc, #84]	@ (80010c4 <MX_TIM10_Init+0x94>)
 8001070:	f003 ff37 	bl	8004ee2 <HAL_TIM_Base_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800107a:	f000 fad5 	bl	8001628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800107e:	4811      	ldr	r0, [pc, #68]	@ (80010c4 <MX_TIM10_Init+0x94>)
 8001080:	f003 ff7e 	bl	8004f80 <HAL_TIM_PWM_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800108a:	f000 facd 	bl	8001628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800108e:	2360      	movs	r3, #96	@ 0x60
 8001090:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2200      	movs	r2, #0
 80010a2:	4619      	mov	r1, r3
 80010a4:	4807      	ldr	r0, [pc, #28]	@ (80010c4 <MX_TIM10_Init+0x94>)
 80010a6:	f004 f9b7 	bl	8005418 <HAL_TIM_PWM_ConfigChannel>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80010b0:	f000 faba 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80010b4:	4803      	ldr	r0, [pc, #12]	@ (80010c4 <MX_TIM10_Init+0x94>)
 80010b6:	f000 fe07 	bl	8001cc8 <HAL_TIM_MspPostInit>

}
 80010ba:	bf00      	nop
 80010bc:	3720      	adds	r7, #32
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000418 	.word	0x20000418
 80010c8:	40014400 	.word	0x40014400

080010cc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b088      	sub	sp, #32
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
 80010e0:	615a      	str	r2, [r3, #20]
 80010e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80010e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001160 <MX_TIM11_Init+0x94>)
 80010e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001164 <MX_TIM11_Init+0x98>)
 80010e8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2-1;
 80010ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <MX_TIM11_Init+0x94>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001160 <MX_TIM11_Init+0x94>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 4096-1;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <MX_TIM11_Init+0x94>)
 80010f8:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80010fc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fe:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <MX_TIM11_Init+0x94>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001104:	4b16      	ldr	r3, [pc, #88]	@ (8001160 <MX_TIM11_Init+0x94>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800110a:	4815      	ldr	r0, [pc, #84]	@ (8001160 <MX_TIM11_Init+0x94>)
 800110c:	f003 fee9 	bl	8004ee2 <HAL_TIM_Base_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001116:	f000 fa87 	bl	8001628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800111a:	4811      	ldr	r0, [pc, #68]	@ (8001160 <MX_TIM11_Init+0x94>)
 800111c:	f003 ff30 	bl	8004f80 <HAL_TIM_PWM_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001126:	f000 fa7f 	bl	8001628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112a:	2360      	movs	r3, #96	@ 0x60
 800112c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2200      	movs	r2, #0
 800113e:	4619      	mov	r1, r3
 8001140:	4807      	ldr	r0, [pc, #28]	@ (8001160 <MX_TIM11_Init+0x94>)
 8001142:	f004 f969 	bl	8005418 <HAL_TIM_PWM_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800114c:	f000 fa6c 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001150:	4803      	ldr	r0, [pc, #12]	@ (8001160 <MX_TIM11_Init+0x94>)
 8001152:	f000 fdb9 	bl	8001cc8 <HAL_TIM_MspPostInit>

}
 8001156:	bf00      	nop
 8001158:	3720      	adds	r7, #32
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000460 	.word	0x20000460
 8001164:	40014800 	.word	0x40014800

08001168 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
 800117c:	615a      	str	r2, [r3, #20]
 800117e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001180:	4b1f      	ldr	r3, [pc, #124]	@ (8001200 <MX_TIM12_Init+0x98>)
 8001182:	4a20      	ldr	r2, [pc, #128]	@ (8001204 <MX_TIM12_Init+0x9c>)
 8001184:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 2-1;
 8001186:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <MX_TIM12_Init+0x98>)
 8001188:	2201      	movs	r2, #1
 800118a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800118c:	4b1c      	ldr	r3, [pc, #112]	@ (8001200 <MX_TIM12_Init+0x98>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4096-1;
 8001192:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <MX_TIM12_Init+0x98>)
 8001194:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001198:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800119a:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <MX_TIM12_Init+0x98>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a0:	4b17      	ldr	r3, [pc, #92]	@ (8001200 <MX_TIM12_Init+0x98>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80011a6:	4816      	ldr	r0, [pc, #88]	@ (8001200 <MX_TIM12_Init+0x98>)
 80011a8:	f003 feea 	bl	8004f80 <HAL_TIM_PWM_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80011b2:	f000 fa39 	bl	8001628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b6:	2360      	movs	r3, #96	@ 0x60
 80011b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2200      	movs	r2, #0
 80011ca:	4619      	mov	r1, r3
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <MX_TIM12_Init+0x98>)
 80011ce:	f004 f923 	bl	8005418 <HAL_TIM_PWM_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80011d8:	f000 fa26 	bl	8001628 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	2204      	movs	r2, #4
 80011e0:	4619      	mov	r1, r3
 80011e2:	4807      	ldr	r0, [pc, #28]	@ (8001200 <MX_TIM12_Init+0x98>)
 80011e4:	f004 f918 	bl	8005418 <HAL_TIM_PWM_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 80011ee:	f000 fa1b 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80011f2:	4803      	ldr	r0, [pc, #12]	@ (8001200 <MX_TIM12_Init+0x98>)
 80011f4:	f000 fd68 	bl	8001cc8 <HAL_TIM_MspPostInit>

}
 80011f8:	bf00      	nop
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200004a8 	.word	0x200004a8
 8001204:	40001800 	.word	0x40001800

08001208 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b088      	sub	sp, #32
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
 800121c:	615a      	str	r2, [r3, #20]
 800121e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001220:	4b1e      	ldr	r3, [pc, #120]	@ (800129c <MX_TIM13_Init+0x94>)
 8001222:	4a1f      	ldr	r2, [pc, #124]	@ (80012a0 <MX_TIM13_Init+0x98>)
 8001224:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2-1;
 8001226:	4b1d      	ldr	r3, [pc, #116]	@ (800129c <MX_TIM13_Init+0x94>)
 8001228:	2201      	movs	r2, #1
 800122a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122c:	4b1b      	ldr	r3, [pc, #108]	@ (800129c <MX_TIM13_Init+0x94>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 4096-1;
 8001232:	4b1a      	ldr	r3, [pc, #104]	@ (800129c <MX_TIM13_Init+0x94>)
 8001234:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001238:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123a:	4b18      	ldr	r3, [pc, #96]	@ (800129c <MX_TIM13_Init+0x94>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001240:	4b16      	ldr	r3, [pc, #88]	@ (800129c <MX_TIM13_Init+0x94>)
 8001242:	2200      	movs	r2, #0
 8001244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001246:	4815      	ldr	r0, [pc, #84]	@ (800129c <MX_TIM13_Init+0x94>)
 8001248:	f003 fe4b 	bl	8004ee2 <HAL_TIM_Base_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001252:	f000 f9e9 	bl	8001628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001256:	4811      	ldr	r0, [pc, #68]	@ (800129c <MX_TIM13_Init+0x94>)
 8001258:	f003 fe92 	bl	8004f80 <HAL_TIM_PWM_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001262:	f000 f9e1 	bl	8001628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001266:	2360      	movs	r3, #96	@ 0x60
 8001268:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2200      	movs	r2, #0
 800127a:	4619      	mov	r1, r3
 800127c:	4807      	ldr	r0, [pc, #28]	@ (800129c <MX_TIM13_Init+0x94>)
 800127e:	f004 f8cb 	bl	8005418 <HAL_TIM_PWM_ConfigChannel>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001288:	f000 f9ce 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800128c:	4803      	ldr	r0, [pc, #12]	@ (800129c <MX_TIM13_Init+0x94>)
 800128e:	f000 fd1b 	bl	8001cc8 <HAL_TIM_MspPostInit>

}
 8001292:	bf00      	nop
 8001294:	3720      	adds	r7, #32
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200004f0 	.word	0x200004f0
 80012a0:	40001c00 	.word	0x40001c00

080012a4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
 80012b8:	615a      	str	r2, [r3, #20]
 80012ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80012bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001338 <MX_TIM14_Init+0x94>)
 80012be:	4a1f      	ldr	r2, [pc, #124]	@ (800133c <MX_TIM14_Init+0x98>)
 80012c0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 2-1;
 80012c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001338 <MX_TIM14_Init+0x94>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <MX_TIM14_Init+0x94>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4096-1;
 80012ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <MX_TIM14_Init+0x94>)
 80012d0:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80012d4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d6:	4b18      	ldr	r3, [pc, #96]	@ (8001338 <MX_TIM14_Init+0x94>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012dc:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <MX_TIM14_Init+0x94>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80012e2:	4815      	ldr	r0, [pc, #84]	@ (8001338 <MX_TIM14_Init+0x94>)
 80012e4:	f003 fdfd 	bl	8004ee2 <HAL_TIM_Base_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80012ee:	f000 f99b 	bl	8001628 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80012f2:	4811      	ldr	r0, [pc, #68]	@ (8001338 <MX_TIM14_Init+0x94>)
 80012f4:	f003 fe44 	bl	8004f80 <HAL_TIM_PWM_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80012fe:	f000 f993 	bl	8001628 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001302:	2360      	movs	r3, #96	@ 0x60
 8001304:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2200      	movs	r2, #0
 8001316:	4619      	mov	r1, r3
 8001318:	4807      	ldr	r0, [pc, #28]	@ (8001338 <MX_TIM14_Init+0x94>)
 800131a:	f004 f87d 	bl	8005418 <HAL_TIM_PWM_ConfigChannel>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001324:	f000 f980 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001328:	4803      	ldr	r0, [pc, #12]	@ (8001338 <MX_TIM14_Init+0x94>)
 800132a:	f000 fccd 	bl	8001cc8 <HAL_TIM_MspPostInit>

}
 800132e:	bf00      	nop
 8001330:	3720      	adds	r7, #32
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000538 	.word	0x20000538
 800133c:	40002000 	.word	0x40002000

08001340 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001344:	4b11      	ldr	r3, [pc, #68]	@ (800138c <MX_UART4_Init+0x4c>)
 8001346:	4a12      	ldr	r2, [pc, #72]	@ (8001390 <MX_UART4_Init+0x50>)
 8001348:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800134a:	4b10      	ldr	r3, [pc, #64]	@ (800138c <MX_UART4_Init+0x4c>)
 800134c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001350:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001352:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <MX_UART4_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001358:	4b0c      	ldr	r3, [pc, #48]	@ (800138c <MX_UART4_Init+0x4c>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800135e:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <MX_UART4_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001364:	4b09      	ldr	r3, [pc, #36]	@ (800138c <MX_UART4_Init+0x4c>)
 8001366:	220c      	movs	r2, #12
 8001368:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136a:	4b08      	ldr	r3, [pc, #32]	@ (800138c <MX_UART4_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001370:	4b06      	ldr	r3, [pc, #24]	@ (800138c <MX_UART4_Init+0x4c>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001376:	4805      	ldr	r0, [pc, #20]	@ (800138c <MX_UART4_Init+0x4c>)
 8001378:	f004 fc0e 	bl	8005b98 <HAL_UART_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001382:	f000 f951 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000580 	.word	0x20000580
 8001390:	40004c00 	.word	0x40004c00

08001394 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001398:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 800139a:	4a12      	ldr	r2, [pc, #72]	@ (80013e4 <MX_USART2_UART_Init+0x50>)
 800139c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800139e:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 80013b8:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013ba:	2204      	movs	r2, #4
 80013bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013cc:	f004 fbe4 	bl	8005b98 <HAL_UART_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013d6:	f000 f927 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	200005c8 	.word	0x200005c8
 80013e4:	40004400 	.word	0x40004400

080013e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08c      	sub	sp, #48	@ 0x30
 80013ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	4b54      	ldr	r3, [pc, #336]	@ (8001554 <MX_GPIO_Init+0x16c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a53      	ldr	r2, [pc, #332]	@ (8001554 <MX_GPIO_Init+0x16c>)
 8001408:	f043 0310 	orr.w	r3, r3, #16
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b51      	ldr	r3, [pc, #324]	@ (8001554 <MX_GPIO_Init+0x16c>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0310 	and.w	r3, r3, #16
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	4b4d      	ldr	r3, [pc, #308]	@ (8001554 <MX_GPIO_Init+0x16c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	4a4c      	ldr	r2, [pc, #304]	@ (8001554 <MX_GPIO_Init+0x16c>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	6313      	str	r3, [r2, #48]	@ 0x30
 800142a:	4b4a      	ldr	r3, [pc, #296]	@ (8001554 <MX_GPIO_Init+0x16c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	4b46      	ldr	r3, [pc, #280]	@ (8001554 <MX_GPIO_Init+0x16c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a45      	ldr	r2, [pc, #276]	@ (8001554 <MX_GPIO_Init+0x16c>)
 8001440:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b43      	ldr	r3, [pc, #268]	@ (8001554 <MX_GPIO_Init+0x16c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
 8001456:	4b3f      	ldr	r3, [pc, #252]	@ (8001554 <MX_GPIO_Init+0x16c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a3e      	ldr	r2, [pc, #248]	@ (8001554 <MX_GPIO_Init+0x16c>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b3c      	ldr	r3, [pc, #240]	@ (8001554 <MX_GPIO_Init+0x16c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	4b38      	ldr	r3, [pc, #224]	@ (8001554 <MX_GPIO_Init+0x16c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	4a37      	ldr	r2, [pc, #220]	@ (8001554 <MX_GPIO_Init+0x16c>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	6313      	str	r3, [r2, #48]	@ 0x30
 800147e:	4b35      	ldr	r3, [pc, #212]	@ (8001554 <MX_GPIO_Init+0x16c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	4b31      	ldr	r3, [pc, #196]	@ (8001554 <MX_GPIO_Init+0x16c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a30      	ldr	r2, [pc, #192]	@ (8001554 <MX_GPIO_Init+0x16c>)
 8001494:	f043 0308 	orr.w	r3, r3, #8
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b2e      	ldr	r3, [pc, #184]	@ (8001554 <MX_GPIO_Init+0x16c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CE_1_Pin|CE_2_Pin|GPIO_PIN_7|GPIO_PIN_8
 80014a6:	2200      	movs	r2, #0
 80014a8:	f24b 518f 	movw	r1, #46479	@ 0xb58f
 80014ac:	482a      	ldr	r0, [pc, #168]	@ (8001558 <MX_GPIO_Init+0x170>)
 80014ae:	f001 fc47 	bl	8002d40 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|LB_DIGI_R_Pin|GPIO_PIN_13|GPIO_PIN_15
                          |EXTRA2_DIGI_R_Pin|RF_DIGI_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EXTRA1_DIGI_R_Pin|LF_DIGI_R_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	f242 0120 	movw	r1, #8224	@ 0x2020
 80014b8:	4828      	ldr	r0, [pc, #160]	@ (800155c <MX_GPIO_Init+0x174>)
 80014ba:	f001 fc41 	bl	8002d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	2101      	movs	r1, #1
 80014c2:	4827      	ldr	r0, [pc, #156]	@ (8001560 <MX_GPIO_Init+0x178>)
 80014c4:	f001 fc3c 	bl	8002d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RB_DIGI_R_GPIO_Port, RB_DIGI_R_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014ce:	4825      	ldr	r0, [pc, #148]	@ (8001564 <MX_GPIO_Init+0x17c>)
 80014d0:	f001 fc36 	bl	8002d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_1_Pin CE_2_Pin PE7 PE8
                           PE10 LB_DIGI_R_Pin PE13 PE15
                           EXTRA2_DIGI_R_Pin RF_DIGI_R_Pin */
  GPIO_InitStruct.Pin = CE_1_Pin|CE_2_Pin|GPIO_PIN_7|GPIO_PIN_8
 80014d4:	f24b 538f 	movw	r3, #46479	@ 0xb58f
 80014d8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|LB_DIGI_R_Pin|GPIO_PIN_13|GPIO_PIN_15
                          |EXTRA2_DIGI_R_Pin|RF_DIGI_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	481a      	ldr	r0, [pc, #104]	@ (8001558 <MX_GPIO_Init+0x170>)
 80014ee:	f001 fa8b 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTRA1_DIGI_R_Pin LF_DIGI_R_Pin */
  GPIO_InitStruct.Pin = EXTRA1_DIGI_R_Pin|LF_DIGI_R_Pin;
 80014f2:	f242 0320 	movw	r3, #8224	@ 0x2020
 80014f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	4619      	mov	r1, r3
 800150a:	4814      	ldr	r0, [pc, #80]	@ (800155c <MX_GPIO_Init+0x174>)
 800150c:	f001 fa7c 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001510:	2301      	movs	r3, #1
 8001512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001514:	2301      	movs	r3, #1
 8001516:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2300      	movs	r3, #0
 800151e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	4619      	mov	r1, r3
 8001526:	480e      	ldr	r0, [pc, #56]	@ (8001560 <MX_GPIO_Init+0x178>)
 8001528:	f001 fa6e 	bl	8002a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : RB_DIGI_R_Pin */
  GPIO_InitStruct.Pin = RB_DIGI_R_Pin;
 800152c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001530:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RB_DIGI_R_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 031c 	add.w	r3, r7, #28
 8001542:	4619      	mov	r1, r3
 8001544:	4807      	ldr	r0, [pc, #28]	@ (8001564 <MX_GPIO_Init+0x17c>)
 8001546:	f001 fa5f 	bl	8002a08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800154a:	bf00      	nop
 800154c:	3730      	adds	r7, #48	@ 0x30
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40021000 	.word	0x40021000
 800155c:	40020800 	.word	0x40020800
 8001560:	40020400 	.word	0x40020400
 8001564:	40020c00 	.word	0x40020c00

08001568 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2,(uint8_t *)&Str_PS2, sizeof(Str_PS2));
 8001570:	2212      	movs	r2, #18
 8001572:	4926      	ldr	r1, [pc, #152]	@ (800160c <HAL_UART_RxCpltCallback+0xa4>)
 8001574:	4826      	ldr	r0, [pc, #152]	@ (8001610 <HAL_UART_RxCpltCallback+0xa8>)
 8001576:	f004 fb5f 	bl	8005c38 <HAL_UART_Receive_IT>

//	Vx = map(Joy[1], 0.0f, 255.0f, -128.0f, 127.0f);
//	Vy = map(Joy[0], 0.0f, 255.0f, -128.0f, 127.0f);
//	Vz = map(Joy[3], 0.0f, 255.0f, -128.0f, 127.0f);

	Vx = map(Str_PS2.stickValues[1], 0.0f, 255.0f, 2.0f, -2.0f);
 800157a:	4b24      	ldr	r3, [pc, #144]	@ (800160c <HAL_UART_RxCpltCallback+0xa4>)
 800157c:	7bdb      	ldrb	r3, [r3, #15]
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001586:	eeb8 2a00 	vmov.f32	s4, #128	@ 0xc0000000 -2.0
 800158a:	eef0 1a00 	vmov.f32	s3, #0	@ 0x40000000  2.0
 800158e:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 8001614 <HAL_UART_RxCpltCallback+0xac>
 8001592:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8001618 <HAL_UART_RxCpltCallback+0xb0>
 8001596:	eeb0 0a67 	vmov.f32	s0, s15
 800159a:	f008 f94b 	bl	8009834 <map>
 800159e:	eef0 7a40 	vmov.f32	s15, s0
 80015a2:	4b1e      	ldr	r3, [pc, #120]	@ (800161c <HAL_UART_RxCpltCallback+0xb4>)
 80015a4:	edc3 7a00 	vstr	s15, [r3]
	Vy = map(Str_PS2.stickValues[0], 0.0f, 255.0f, 2.0f, -2.0f);
 80015a8:	4b18      	ldr	r3, [pc, #96]	@ (800160c <HAL_UART_RxCpltCallback+0xa4>)
 80015aa:	7b9b      	ldrb	r3, [r3, #14]
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b4:	eeb8 2a00 	vmov.f32	s4, #128	@ 0xc0000000 -2.0
 80015b8:	eef0 1a00 	vmov.f32	s3, #0	@ 0x40000000  2.0
 80015bc:	ed9f 1a15 	vldr	s2, [pc, #84]	@ 8001614 <HAL_UART_RxCpltCallback+0xac>
 80015c0:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8001618 <HAL_UART_RxCpltCallback+0xb0>
 80015c4:	eeb0 0a67 	vmov.f32	s0, s15
 80015c8:	f008 f934 	bl	8009834 <map>
 80015cc:	eef0 7a40 	vmov.f32	s15, s0
 80015d0:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <HAL_UART_RxCpltCallback+0xb8>)
 80015d2:	edc3 7a00 	vstr	s15, [r3]
	Vz = map(Str_PS2.stickValues[3], 0.0f, 255.0f, 4.0f, -4.0f);
 80015d6:	4b0d      	ldr	r3, [pc, #52]	@ (800160c <HAL_UART_RxCpltCallback+0xa4>)
 80015d8:	7c5b      	ldrb	r3, [r3, #17]
 80015da:	ee07 3a90 	vmov	s15, r3
 80015de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015e2:	eeb9 2a00 	vmov.f32	s4, #144	@ 0xc0800000 -4.0
 80015e6:	eef1 1a00 	vmov.f32	s3, #16	@ 0x40800000  4.0
 80015ea:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 8001614 <HAL_UART_RxCpltCallback+0xac>
 80015ee:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8001618 <HAL_UART_RxCpltCallback+0xb0>
 80015f2:	eeb0 0a67 	vmov.f32	s0, s15
 80015f6:	f008 f91d 	bl	8009834 <map>
 80015fa:	eef0 7a40 	vmov.f32	s15, s0
 80015fe:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <HAL_UART_RxCpltCallback+0xbc>)
 8001600:	edc3 7a00 	vstr	s15, [r3]
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000638 	.word	0x20000638
 8001610:	200005c8 	.word	0x200005c8
 8001614:	437f0000 	.word	0x437f0000
 8001618:	00000000 	.word	0x00000000
 800161c:	20000610 	.word	0x20000610
 8001620:	20000614 	.word	0x20000614
 8001624:	20000618 	.word	0x20000618

08001628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800162c:	b672      	cpsid	i
}
 800162e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <Error_Handler+0x8>

08001634 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <HAL_MspInit+0x4c>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001642:	4a0f      	ldr	r2, [pc, #60]	@ (8001680 <HAL_MspInit+0x4c>)
 8001644:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001648:	6453      	str	r3, [r2, #68]	@ 0x44
 800164a:	4b0d      	ldr	r3, [pc, #52]	@ (8001680 <HAL_MspInit+0x4c>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	603b      	str	r3, [r7, #0]
 800165a:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <HAL_MspInit+0x4c>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	4a08      	ldr	r2, [pc, #32]	@ (8001680 <HAL_MspInit+0x4c>)
 8001660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001664:	6413      	str	r3, [r2, #64]	@ 0x40
 8001666:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <HAL_MspInit+0x4c>)
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800

08001684 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	@ 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a24      	ldr	r2, [pc, #144]	@ (8001734 <HAL_ADC_MspInit+0xb0>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d141      	bne.n	800172a <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	4b23      	ldr	r3, [pc, #140]	@ (8001738 <HAL_ADC_MspInit+0xb4>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ae:	4a22      	ldr	r2, [pc, #136]	@ (8001738 <HAL_ADC_MspInit+0xb4>)
 80016b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016b6:	4b20      	ldr	r3, [pc, #128]	@ (8001738 <HAL_ADC_MspInit+0xb4>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001738 <HAL_ADC_MspInit+0xb4>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001738 <HAL_ADC_MspInit+0xb4>)
 80016cc:	f043 0304 	orr.w	r3, r3, #4
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <HAL_ADC_MspInit+0xb4>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <HAL_ADC_MspInit+0xb4>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	4a14      	ldr	r2, [pc, #80]	@ (8001738 <HAL_ADC_MspInit+0xb4>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ee:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <HAL_ADC_MspInit+0xb4>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016fa:	2303      	movs	r3, #3
 80016fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fe:	2303      	movs	r3, #3
 8001700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001706:	f107 0314 	add.w	r3, r7, #20
 800170a:	4619      	mov	r1, r3
 800170c:	480b      	ldr	r0, [pc, #44]	@ (800173c <HAL_ADC_MspInit+0xb8>)
 800170e:	f001 f97b 	bl	8002a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001712:	2330      	movs	r3, #48	@ 0x30
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001716:	2303      	movs	r3, #3
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	4806      	ldr	r0, [pc, #24]	@ (8001740 <HAL_ADC_MspInit+0xbc>)
 8001726:	f001 f96f 	bl	8002a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800172a:	bf00      	nop
 800172c:	3728      	adds	r7, #40	@ 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40012000 	.word	0x40012000
 8001738:	40023800 	.word	0x40023800
 800173c:	40020800 	.word	0x40020800
 8001740:	40020000 	.word	0x40020000

08001744 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	@ 0x28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a19      	ldr	r2, [pc, #100]	@ (80017c8 <HAL_I2C_MspInit+0x84>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d12c      	bne.n	80017c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	4b18      	ldr	r3, [pc, #96]	@ (80017cc <HAL_I2C_MspInit+0x88>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a17      	ldr	r2, [pc, #92]	@ (80017cc <HAL_I2C_MspInit+0x88>)
 8001770:	f043 0302 	orr.w	r3, r3, #2
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <HAL_I2C_MspInit+0x88>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001782:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001788:	2312      	movs	r3, #18
 800178a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001794:	2304      	movs	r3, #4
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	4619      	mov	r1, r3
 800179e:	480c      	ldr	r0, [pc, #48]	@ (80017d0 <HAL_I2C_MspInit+0x8c>)
 80017a0:	f001 f932 	bl	8002a08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <HAL_I2C_MspInit+0x88>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ac:	4a07      	ldr	r2, [pc, #28]	@ (80017cc <HAL_I2C_MspInit+0x88>)
 80017ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b4:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <HAL_I2C_MspInit+0x88>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017c0:	bf00      	nop
 80017c2:	3728      	adds	r7, #40	@ 0x28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40005800 	.word	0x40005800
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020400 	.word	0x40020400

080017d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	@ 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a28      	ldr	r2, [pc, #160]	@ (8001894 <HAL_SPI_MspInit+0xc0>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d14a      	bne.n	800188c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	613b      	str	r3, [r7, #16]
 80017fa:	4b27      	ldr	r3, [pc, #156]	@ (8001898 <HAL_SPI_MspInit+0xc4>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fe:	4a26      	ldr	r2, [pc, #152]	@ (8001898 <HAL_SPI_MspInit+0xc4>)
 8001800:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001804:	6413      	str	r3, [r2, #64]	@ 0x40
 8001806:	4b24      	ldr	r3, [pc, #144]	@ (8001898 <HAL_SPI_MspInit+0xc4>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	4b20      	ldr	r3, [pc, #128]	@ (8001898 <HAL_SPI_MspInit+0xc4>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	4a1f      	ldr	r2, [pc, #124]	@ (8001898 <HAL_SPI_MspInit+0xc4>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6313      	str	r3, [r2, #48]	@ 0x30
 8001822:	4b1d      	ldr	r3, [pc, #116]	@ (8001898 <HAL_SPI_MspInit+0xc4>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	4b19      	ldr	r3, [pc, #100]	@ (8001898 <HAL_SPI_MspInit+0xc4>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	4a18      	ldr	r2, [pc, #96]	@ (8001898 <HAL_SPI_MspInit+0xc4>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	6313      	str	r3, [r2, #48]	@ 0x30
 800183e:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <HAL_SPI_MspInit+0xc4>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800184a:	230c      	movs	r3, #12
 800184c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001856:	2303      	movs	r3, #3
 8001858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800185a:	2305      	movs	r3, #5
 800185c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	480d      	ldr	r0, [pc, #52]	@ (800189c <HAL_SPI_MspInit+0xc8>)
 8001866:	f001 f8cf 	bl	8002a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800186a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800186e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001878:	2303      	movs	r3, #3
 800187a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800187c:	2305      	movs	r3, #5
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	4806      	ldr	r0, [pc, #24]	@ (80018a0 <HAL_SPI_MspInit+0xcc>)
 8001888:	f001 f8be 	bl	8002a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800188c:	bf00      	nop
 800188e:	3728      	adds	r7, #40	@ 0x28
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40003800 	.word	0x40003800
 8001898:	40023800 	.word	0x40023800
 800189c:	40020800 	.word	0x40020800
 80018a0:	40020400 	.word	0x40020400

080018a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b094      	sub	sp, #80	@ 0x50
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a8c      	ldr	r2, [pc, #560]	@ (8001af4 <HAL_TIM_Encoder_MspInit+0x250>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d12d      	bne.n	8001922 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018ca:	4b8b      	ldr	r3, [pc, #556]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ce:	4a8a      	ldr	r2, [pc, #552]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018d6:	4b88      	ldr	r3, [pc, #544]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80018e6:	4b84      	ldr	r3, [pc, #528]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	4a83      	ldr	r2, [pc, #524]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018ec:	f043 0310 	orr.w	r3, r3, #16
 80018f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f2:	4b81      	ldr	r3, [pc, #516]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f003 0310 	and.w	r3, r3, #16
 80018fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80018fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80018fe:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001902:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	2302      	movs	r3, #2
 8001906:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001908:	2302      	movs	r3, #2
 800190a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190c:	2303      	movs	r3, #3
 800190e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001910:	2301      	movs	r3, #1
 8001912:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001914:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001918:	4619      	mov	r1, r3
 800191a:	4878      	ldr	r0, [pc, #480]	@ (8001afc <HAL_TIM_Encoder_MspInit+0x258>)
 800191c:	f001 f874 	bl	8002a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001920:	e12b      	b.n	8001b7a <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM2)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800192a:	d14b      	bne.n	80019c4 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800192c:	2300      	movs	r3, #0
 800192e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001930:	4b71      	ldr	r3, [pc, #452]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001934:	4a70      	ldr	r2, [pc, #448]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6413      	str	r3, [r2, #64]	@ 0x40
 800193c:	4b6e      	ldr	r3, [pc, #440]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	633b      	str	r3, [r7, #48]	@ 0x30
 8001946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001948:	2300      	movs	r3, #0
 800194a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800194c:	4b6a      	ldr	r3, [pc, #424]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001950:	4a69      	ldr	r2, [pc, #420]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6313      	str	r3, [r2, #48]	@ 0x30
 8001958:	4b67      	ldr	r3, [pc, #412]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001964:	2300      	movs	r3, #0
 8001966:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001968:	4b63      	ldr	r3, [pc, #396]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196c:	4a62      	ldr	r2, [pc, #392]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 800196e:	f043 0302 	orr.w	r3, r3, #2
 8001972:	6313      	str	r3, [r2, #48]	@ 0x30
 8001974:	4b60      	ldr	r3, [pc, #384]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800197e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = EN_X_A_Pin;
 8001980:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001984:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001992:	2301      	movs	r3, #1
 8001994:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(EN_X_A_GPIO_Port, &GPIO_InitStruct);
 8001996:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800199a:	4619      	mov	r1, r3
 800199c:	4858      	ldr	r0, [pc, #352]	@ (8001b00 <HAL_TIM_Encoder_MspInit+0x25c>)
 800199e:	f001 f833 	bl	8002a08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EN_X_B_Pin;
 80019a2:	2308      	movs	r3, #8
 80019a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019b2:	2301      	movs	r3, #1
 80019b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(EN_X_B_GPIO_Port, &GPIO_InitStruct);
 80019b6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80019ba:	4619      	mov	r1, r3
 80019bc:	4851      	ldr	r0, [pc, #324]	@ (8001b04 <HAL_TIM_Encoder_MspInit+0x260>)
 80019be:	f001 f823 	bl	8002a08 <HAL_GPIO_Init>
}
 80019c2:	e0da      	b.n	8001b7a <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM3)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001b08 <HAL_TIM_Encoder_MspInit+0x264>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d12c      	bne.n	8001a28 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d2:	4b49      	ldr	r3, [pc, #292]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	4a48      	ldr	r2, [pc, #288]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019de:	4b46      	ldr	r3, [pc, #280]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80019e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
 80019ee:	4b42      	ldr	r3, [pc, #264]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a41      	ldr	r2, [pc, #260]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b3f      	ldr	r3, [pc, #252]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	623b      	str	r3, [r7, #32]
 8001a04:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = EN_Y_A_Pin|EN_Y_B_Pin;
 8001a06:	2330      	movs	r3, #48	@ 0x30
 8001a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a16:	2302      	movs	r3, #2
 8001a18:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4838      	ldr	r0, [pc, #224]	@ (8001b04 <HAL_TIM_Encoder_MspInit+0x260>)
 8001a22:	f000 fff1 	bl	8002a08 <HAL_GPIO_Init>
}
 8001a26:	e0a8      	b.n	8001b7a <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM4)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a37      	ldr	r2, [pc, #220]	@ (8001b0c <HAL_TIM_Encoder_MspInit+0x268>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d12d      	bne.n	8001a8e <HAL_TIM_Encoder_MspInit+0x1ea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	4b30      	ldr	r3, [pc, #192]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	4a2f      	ldr	r2, [pc, #188]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a42:	4b2d      	ldr	r3, [pc, #180]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
 8001a52:	4b29      	ldr	r3, [pc, #164]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	4a28      	ldr	r2, [pc, #160]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a58:	f043 0308 	orr.w	r3, r3, #8
 8001a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5e:	4b26      	ldr	r3, [pc, #152]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	61bb      	str	r3, [r7, #24]
 8001a68:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a6a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a80:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001a84:	4619      	mov	r1, r3
 8001a86:	4822      	ldr	r0, [pc, #136]	@ (8001b10 <HAL_TIM_Encoder_MspInit+0x26c>)
 8001a88:	f000 ffbe 	bl	8002a08 <HAL_GPIO_Init>
}
 8001a8c:	e075      	b.n	8001b7a <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM5)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a20      	ldr	r2, [pc, #128]	@ (8001b14 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d13f      	bne.n	8001b18 <HAL_TIM_Encoder_MspInit+0x274>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	4b16      	ldr	r3, [pc, #88]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	4a15      	ldr	r2, [pc, #84]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001aa2:	f043 0308 	orr.w	r3, r3, #8
 8001aa6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa8:	4b13      	ldr	r3, [pc, #76]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abc:	4a0e      	ldr	r2, [pc, #56]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4805      	ldr	r0, [pc, #20]	@ (8001b00 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001aec:	f000 ff8c 	bl	8002a08 <HAL_GPIO_Init>
}
 8001af0:	e043      	b.n	8001b7a <HAL_TIM_Encoder_MspInit+0x2d6>
 8001af2:	bf00      	nop
 8001af4:	40010000 	.word	0x40010000
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40020000 	.word	0x40020000
 8001b04:	40020400 	.word	0x40020400
 8001b08:	40000400 	.word	0x40000400
 8001b0c:	40000800 	.word	0x40000800
 8001b10:	40020c00 	.word	0x40020c00
 8001b14:	40000c00 	.word	0x40000c00
  else if(htim_encoder->Instance==TIM8)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a19      	ldr	r2, [pc, #100]	@ (8001b84 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d12b      	bne.n	8001b7a <HAL_TIM_Encoder_MspInit+0x2d6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b18      	ldr	r3, [pc, #96]	@ (8001b88 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2a:	4a17      	ldr	r2, [pc, #92]	@ (8001b88 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b32:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	4b11      	ldr	r3, [pc, #68]	@ (8001b88 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	4a10      	ldr	r2, [pc, #64]	@ (8001b88 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b88 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b5a:	23c0      	movs	r3, #192	@ 0xc0
 8001b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b62:	2302      	movs	r3, #2
 8001b64:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b66:	2303      	movs	r3, #3
 8001b68:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	@ (8001b8c <HAL_TIM_Encoder_MspInit+0x2e8>)
 8001b76:	f000 ff47 	bl	8002a08 <HAL_GPIO_Init>
}
 8001b7a:	bf00      	nop
 8001b7c:	3750      	adds	r7, #80	@ 0x50
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40010400 	.word	0x40010400
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40020800 	.word	0x40020800

08001b90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a15      	ldr	r2, [pc, #84]	@ (8001bf4 <HAL_TIM_PWM_MspInit+0x64>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d10e      	bne.n	8001bc0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b14      	ldr	r3, [pc, #80]	@ (8001bf8 <HAL_TIM_PWM_MspInit+0x68>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	4a13      	ldr	r2, [pc, #76]	@ (8001bf8 <HAL_TIM_PWM_MspInit+0x68>)
 8001bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bb2:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <HAL_TIM_PWM_MspInit+0x68>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001bbe:	e012      	b.n	8001be6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bfc <HAL_TIM_PWM_MspInit+0x6c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d10d      	bne.n	8001be6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf8 <HAL_TIM_PWM_MspInit+0x68>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	4a09      	ldr	r2, [pc, #36]	@ (8001bf8 <HAL_TIM_PWM_MspInit+0x68>)
 8001bd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bda:	4b07      	ldr	r3, [pc, #28]	@ (8001bf8 <HAL_TIM_PWM_MspInit+0x68>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	68bb      	ldr	r3, [r7, #8]
}
 8001be6:	bf00      	nop
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40014000 	.word	0x40014000
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40001800 	.word	0x40001800

08001c00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b087      	sub	sp, #28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a29      	ldr	r2, [pc, #164]	@ (8001cb4 <HAL_TIM_Base_MspInit+0xb4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d10e      	bne.n	8001c30 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	4b28      	ldr	r3, [pc, #160]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	4a27      	ldr	r2, [pc, #156]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c22:	4b25      	ldr	r3, [pc, #148]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001c2e:	e03a      	b.n	8001ca6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a21      	ldr	r2, [pc, #132]	@ (8001cbc <HAL_TIM_Base_MspInit+0xbc>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d10e      	bne.n	8001c58 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c42:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]
}
 8001c56:	e026      	b.n	8001ca6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM13)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a18      	ldr	r2, [pc, #96]	@ (8001cc0 <HAL_TIM_Base_MspInit+0xc0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d10e      	bne.n	8001c80 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	4a13      	ldr	r2, [pc, #76]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c72:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
}
 8001c7e:	e012      	b.n	8001ca6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM14)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc4 <HAL_TIM_Base_MspInit+0xc4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d10d      	bne.n	8001ca6 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	4a09      	ldr	r2, [pc, #36]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c9a:	4b07      	ldr	r3, [pc, #28]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca2:	60bb      	str	r3, [r7, #8]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
}
 8001ca6:	bf00      	nop
 8001ca8:	371c      	adds	r7, #28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40014400 	.word	0x40014400
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40014800 	.word	0x40014800
 8001cc0:	40001c00 	.word	0x40001c00
 8001cc4:	40002000 	.word	0x40002000

08001cc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08e      	sub	sp, #56	@ 0x38
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a6d      	ldr	r2, [pc, #436]	@ (8001e9c <HAL_TIM_MspPostInit+0x1d4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d11e      	bne.n	8001d28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
 8001cee:	4b6c      	ldr	r3, [pc, #432]	@ (8001ea0 <HAL_TIM_MspPostInit+0x1d8>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	4a6b      	ldr	r2, [pc, #428]	@ (8001ea0 <HAL_TIM_MspPostInit+0x1d8>)
 8001cf4:	f043 0310 	orr.w	r3, r3, #16
 8001cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfa:	4b69      	ldr	r3, [pc, #420]	@ (8001ea0 <HAL_TIM_MspPostInit+0x1d8>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	f003 0310 	and.w	r3, r3, #16
 8001d02:	623b      	str	r3, [r7, #32]
 8001d04:	6a3b      	ldr	r3, [r7, #32]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = EXTRA1_PWM_L_Pin|SERVO_1_Pin;
 8001d06:	2360      	movs	r3, #96	@ 0x60
 8001d08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d12:	2300      	movs	r3, #0
 8001d14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001d16:	2303      	movs	r3, #3
 8001d18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4860      	ldr	r0, [pc, #384]	@ (8001ea4 <HAL_TIM_MspPostInit+0x1dc>)
 8001d22:	f000 fe71 	bl	8002a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001d26:	e0b5      	b.n	8001e94 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM10)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a5e      	ldr	r2, [pc, #376]	@ (8001ea8 <HAL_TIM_MspPostInit+0x1e0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d11f      	bne.n	8001d72 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	4b5a      	ldr	r3, [pc, #360]	@ (8001ea0 <HAL_TIM_MspPostInit+0x1d8>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	4a59      	ldr	r2, [pc, #356]	@ (8001ea0 <HAL_TIM_MspPostInit+0x1d8>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d42:	4b57      	ldr	r3, [pc, #348]	@ (8001ea0 <HAL_TIM_MspPostInit+0x1d8>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	61fb      	str	r3, [r7, #28]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = EXTRA2_PWM_L_Pin;
 8001d4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d54:	2302      	movs	r3, #2
 8001d56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001d60:	2303      	movs	r3, #3
 8001d62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(EXTRA2_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001d64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4850      	ldr	r0, [pc, #320]	@ (8001eac <HAL_TIM_MspPostInit+0x1e4>)
 8001d6c:	f000 fe4c 	bl	8002a08 <HAL_GPIO_Init>
}
 8001d70:	e090      	b.n	8001e94 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM11)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a4e      	ldr	r2, [pc, #312]	@ (8001eb0 <HAL_TIM_MspPostInit+0x1e8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d11f      	bne.n	8001dbc <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61bb      	str	r3, [r7, #24]
 8001d80:	4b47      	ldr	r3, [pc, #284]	@ (8001ea0 <HAL_TIM_MspPostInit+0x1d8>)
 8001d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d84:	4a46      	ldr	r2, [pc, #280]	@ (8001ea0 <HAL_TIM_MspPostInit+0x1d8>)
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8c:	4b44      	ldr	r3, [pc, #272]	@ (8001ea0 <HAL_TIM_MspPostInit+0x1d8>)
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	61bb      	str	r3, [r7, #24]
 8001d96:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RF_PWM_L_Pin;
 8001d98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	2300      	movs	r3, #0
 8001da8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001daa:	2303      	movs	r3, #3
 8001dac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RF_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001db2:	4619      	mov	r1, r3
 8001db4:	483d      	ldr	r0, [pc, #244]	@ (8001eac <HAL_TIM_MspPostInit+0x1e4>)
 8001db6:	f000 fe27 	bl	8002a08 <HAL_GPIO_Init>
}
 8001dba:	e06b      	b.n	8001e94 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM12)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a3c      	ldr	r2, [pc, #240]	@ (8001eb4 <HAL_TIM_MspPostInit+0x1ec>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d11f      	bne.n	8001e06 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	4b35      	ldr	r3, [pc, #212]	@ (8001ea0 <HAL_TIM_MspPostInit+0x1d8>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a34      	ldr	r2, [pc, #208]	@ (8001ea0 <HAL_TIM_MspPostInit+0x1d8>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b32      	ldr	r3, [pc, #200]	@ (8001ea0 <HAL_TIM_MspPostInit+0x1d8>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LB_PWM_L_Pin|RB_PWM_L_Pin;
 8001de2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001df4:	2309      	movs	r3, #9
 8001df6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	482b      	ldr	r0, [pc, #172]	@ (8001eac <HAL_TIM_MspPostInit+0x1e4>)
 8001e00:	f000 fe02 	bl	8002a08 <HAL_GPIO_Init>
}
 8001e04:	e046      	b.n	8001e94 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM13)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a2b      	ldr	r2, [pc, #172]	@ (8001eb8 <HAL_TIM_MspPostInit+0x1f0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d11e      	bne.n	8001e4e <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e10:	2300      	movs	r3, #0
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	4b22      	ldr	r3, [pc, #136]	@ (8001ea0 <HAL_TIM_MspPostInit+0x1d8>)
 8001e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e18:	4a21      	ldr	r2, [pc, #132]	@ (8001ea0 <HAL_TIM_MspPostInit+0x1d8>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e20:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea0 <HAL_TIM_MspPostInit+0x1d8>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	613b      	str	r3, [r7, #16]
 8001e2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO_2_Pin;
 8001e2c:	2340      	movs	r3, #64	@ 0x40
 8001e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001e3c:	2309      	movs	r3, #9
 8001e3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SERVO_2_GPIO_Port, &GPIO_InitStruct);
 8001e40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e44:	4619      	mov	r1, r3
 8001e46:	481d      	ldr	r0, [pc, #116]	@ (8001ebc <HAL_TIM_MspPostInit+0x1f4>)
 8001e48:	f000 fdde 	bl	8002a08 <HAL_GPIO_Init>
}
 8001e4c:	e022      	b.n	8001e94 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM14)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec0 <HAL_TIM_MspPostInit+0x1f8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d11d      	bne.n	8001e94 <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <HAL_TIM_MspPostInit+0x1d8>)
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e60:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea0 <HAL_TIM_MspPostInit+0x1d8>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea0 <HAL_TIM_MspPostInit+0x1d8>)
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LF_PWM_L_Pin;
 8001e74:	2380      	movs	r3, #128	@ 0x80
 8001e76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001e84:	2309      	movs	r3, #9
 8001e86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LF_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001e88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	480b      	ldr	r0, [pc, #44]	@ (8001ebc <HAL_TIM_MspPostInit+0x1f4>)
 8001e90:	f000 fdba 	bl	8002a08 <HAL_GPIO_Init>
}
 8001e94:	bf00      	nop
 8001e96:	3738      	adds	r7, #56	@ 0x38
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40014000 	.word	0x40014000
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40014400 	.word	0x40014400
 8001eac:	40020400 	.word	0x40020400
 8001eb0:	40014800 	.word	0x40014800
 8001eb4:	40001800 	.word	0x40001800
 8001eb8:	40001c00 	.word	0x40001c00
 8001ebc:	40020000 	.word	0x40020000
 8001ec0:	40002000 	.word	0x40002000

08001ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08c      	sub	sp, #48	@ 0x30
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a36      	ldr	r2, [pc, #216]	@ (8001fbc <HAL_UART_MspInit+0xf8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d12d      	bne.n	8001f42 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
 8001eea:	4b35      	ldr	r3, [pc, #212]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	4a34      	ldr	r2, [pc, #208]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001ef0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ef4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ef6:	4b32      	ldr	r3, [pc, #200]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001efe:	61bb      	str	r3, [r7, #24]
 8001f00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	4b2e      	ldr	r3, [pc, #184]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	4a2d      	ldr	r2, [pc, #180]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001f0c:	f043 0304 	orr.w	r3, r3, #4
 8001f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f12:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f1e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f30:	2308      	movs	r3, #8
 8001f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4822      	ldr	r0, [pc, #136]	@ (8001fc4 <HAL_UART_MspInit+0x100>)
 8001f3c:	f000 fd64 	bl	8002a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f40:	e038      	b.n	8001fb4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a20      	ldr	r2, [pc, #128]	@ (8001fc8 <HAL_UART_MspInit+0x104>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d133      	bne.n	8001fb4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f54:	4a1a      	ldr	r2, [pc, #104]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001f56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f5c:	4b18      	ldr	r3, [pc, #96]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	4b14      	ldr	r3, [pc, #80]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f70:	4a13      	ldr	r2, [pc, #76]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001f72:	f043 0301 	orr.w	r3, r3, #1
 8001f76:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f78:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <HAL_UART_MspInit+0xfc>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f84:	230c      	movs	r3, #12
 8001f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f90:	2303      	movs	r3, #3
 8001f92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f94:	2307      	movs	r3, #7
 8001f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f98:	f107 031c 	add.w	r3, r7, #28
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	480b      	ldr	r0, [pc, #44]	@ (8001fcc <HAL_UART_MspInit+0x108>)
 8001fa0:	f000 fd32 	bl	8002a08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	2026      	movs	r0, #38	@ 0x26
 8001faa:	f000 fc64 	bl	8002876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fae:	2026      	movs	r0, #38	@ 0x26
 8001fb0:	f000 fc7d 	bl	80028ae <HAL_NVIC_EnableIRQ>
}
 8001fb4:	bf00      	nop
 8001fb6:	3730      	adds	r7, #48	@ 0x30
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40004c00 	.word	0x40004c00
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020800 	.word	0x40020800
 8001fc8:	40004400 	.word	0x40004400
 8001fcc:	40020000 	.word	0x40020000

08001fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <NMI_Handler+0x4>

08001fd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <HardFault_Handler+0x4>

08001fe0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <MemManage_Handler+0x4>

08001fe8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <BusFault_Handler+0x4>

08001ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <UsageFault_Handler+0x4>

08001ff8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002026:	f000 f8a5 	bl	8002174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002034:	4802      	ldr	r0, [pc, #8]	@ (8002040 <USART2_IRQHandler+0x10>)
 8002036:	f003 fe25 	bl	8005c84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200005c8 	.word	0x200005c8

08002044 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002048:	4802      	ldr	r0, [pc, #8]	@ (8002054 <OTG_FS_IRQHandler+0x10>)
 800204a:	f001 f91b 	bl	8003284 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20001d24 	.word	0x20001d24

08002058 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800205c:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <SystemInit+0x20>)
 800205e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002062:	4a05      	ldr	r2, [pc, #20]	@ (8002078 <SystemInit+0x20>)
 8002064:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002068:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <Reset_Handler>:
 800207c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020b4 <LoopFillZerobss+0xe>
 8002080:	f7ff ffea 	bl	8002058 <SystemInit>
 8002084:	480c      	ldr	r0, [pc, #48]	@ (80020b8 <LoopFillZerobss+0x12>)
 8002086:	490d      	ldr	r1, [pc, #52]	@ (80020bc <LoopFillZerobss+0x16>)
 8002088:	4a0d      	ldr	r2, [pc, #52]	@ (80020c0 <LoopFillZerobss+0x1a>)
 800208a:	2300      	movs	r3, #0
 800208c:	e002      	b.n	8002094 <LoopCopyDataInit>

0800208e <CopyDataInit>:
 800208e:	58d4      	ldr	r4, [r2, r3]
 8002090:	50c4      	str	r4, [r0, r3]
 8002092:	3304      	adds	r3, #4

08002094 <LoopCopyDataInit>:
 8002094:	18c4      	adds	r4, r0, r3
 8002096:	428c      	cmp	r4, r1
 8002098:	d3f9      	bcc.n	800208e <CopyDataInit>
 800209a:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <LoopFillZerobss+0x1e>)
 800209c:	4c0a      	ldr	r4, [pc, #40]	@ (80020c8 <LoopFillZerobss+0x22>)
 800209e:	2300      	movs	r3, #0
 80020a0:	e001      	b.n	80020a6 <LoopFillZerobss>

080020a2 <FillZerobss>:
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	3204      	adds	r2, #4

080020a6 <LoopFillZerobss>:
 80020a6:	42a2      	cmp	r2, r4
 80020a8:	d3fb      	bcc.n	80020a2 <FillZerobss>
 80020aa:	f00a f897 	bl	800c1dc <__libc_init_array>
 80020ae:	f7fe fa03 	bl	80004b8 <main>
 80020b2:	4770      	bx	lr
 80020b4:	20020000 	.word	0x20020000
 80020b8:	20000000 	.word	0x20000000
 80020bc:	20000110 	.word	0x20000110
 80020c0:	0800c310 	.word	0x0800c310
 80020c4:	20000110 	.word	0x20000110
 80020c8:	20002428 	.word	0x20002428

080020cc <ADC_IRQHandler>:
 80020cc:	e7fe      	b.n	80020cc <ADC_IRQHandler>
	...

080020d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <HAL_Init+0x40>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002110 <HAL_Init+0x40>)
 80020da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002110 <HAL_Init+0x40>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002110 <HAL_Init+0x40>)
 80020e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ec:	4b08      	ldr	r3, [pc, #32]	@ (8002110 <HAL_Init+0x40>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a07      	ldr	r2, [pc, #28]	@ (8002110 <HAL_Init+0x40>)
 80020f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f8:	2003      	movs	r0, #3
 80020fa:	f000 fbb1 	bl	8002860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020fe:	200f      	movs	r0, #15
 8002100:	f000 f808 	bl	8002114 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002104:	f7ff fa96 	bl	8001634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40023c00 	.word	0x40023c00

08002114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800211c:	4b12      	ldr	r3, [pc, #72]	@ (8002168 <HAL_InitTick+0x54>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	4b12      	ldr	r3, [pc, #72]	@ (800216c <HAL_InitTick+0x58>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800212a:	fbb3 f3f1 	udiv	r3, r3, r1
 800212e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002132:	4618      	mov	r0, r3
 8002134:	f000 fbc9 	bl	80028ca <HAL_SYSTICK_Config>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e00e      	b.n	8002160 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b0f      	cmp	r3, #15
 8002146:	d80a      	bhi.n	800215e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002148:	2200      	movs	r2, #0
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	f04f 30ff 	mov.w	r0, #4294967295
 8002150:	f000 fb91 	bl	8002876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002154:	4a06      	ldr	r2, [pc, #24]	@ (8002170 <HAL_InitTick+0x5c>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	e000      	b.n	8002160 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	2000000c 	.word	0x2000000c
 800216c:	20000014 	.word	0x20000014
 8002170:	20000010 	.word	0x20000010

08002174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_IncTick+0x20>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_IncTick+0x24>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4413      	add	r3, r2
 8002184:	4a04      	ldr	r2, [pc, #16]	@ (8002198 <HAL_IncTick+0x24>)
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000014 	.word	0x20000014
 8002198:	20000650 	.word	0x20000650

0800219c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return uwTick;
 80021a0:	4b03      	ldr	r3, [pc, #12]	@ (80021b0 <HAL_GetTick+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000650 	.word	0x20000650

080021b4 <HAL_Delay>:
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)

{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021bc:	f7ff ffee 	bl	800219c <HAL_GetTick>
 80021c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021cc:	d005      	beq.n	80021da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ce:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <HAL_Delay+0x44>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4413      	add	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021da:	bf00      	nop
 80021dc:	f7ff ffde 	bl	800219c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d8f7      	bhi.n	80021dc <HAL_Delay+0x28>
  {
  }
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000014 	.word	0x20000014

080021fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e033      	b.n	800227a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	2b00      	cmp	r3, #0
 8002218:	d109      	bne.n	800222e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff fa32 	bl	8001684 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	f003 0310 	and.w	r3, r3, #16
 8002236:	2b00      	cmp	r3, #0
 8002238:	d118      	bne.n	800226c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002242:	f023 0302 	bic.w	r3, r3, #2
 8002246:	f043 0202 	orr.w	r2, r3, #2
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f93a 	bl	80024c8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	f023 0303 	bic.w	r3, r3, #3
 8002262:	f043 0201 	orr.w	r2, r3, #1
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	641a      	str	r2, [r3, #64]	@ 0x40
 800226a:	e001      	b.n	8002270 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002278:	7bfb      	ldrb	r3, [r7, #15]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x1c>
 800229c:	2302      	movs	r3, #2
 800229e:	e105      	b.n	80024ac <HAL_ADC_ConfigChannel+0x228>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b09      	cmp	r3, #9
 80022ae:	d925      	bls.n	80022fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68d9      	ldr	r1, [r3, #12]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	461a      	mov	r2, r3
 80022be:	4613      	mov	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	4413      	add	r3, r2
 80022c4:	3b1e      	subs	r3, #30
 80022c6:	2207      	movs	r2, #7
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43da      	mvns	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	400a      	ands	r2, r1
 80022d4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68d9      	ldr	r1, [r3, #12]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	4618      	mov	r0, r3
 80022e8:	4603      	mov	r3, r0
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	4403      	add	r3, r0
 80022ee:	3b1e      	subs	r3, #30
 80022f0:	409a      	lsls	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	e022      	b.n	8002342 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6919      	ldr	r1, [r3, #16]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	b29b      	uxth	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	4613      	mov	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	2207      	movs	r2, #7
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43da      	mvns	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	400a      	ands	r2, r1
 800231e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6919      	ldr	r1, [r3, #16]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	b29b      	uxth	r3, r3
 8002330:	4618      	mov	r0, r3
 8002332:	4603      	mov	r3, r0
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	4403      	add	r3, r0
 8002338:	409a      	lsls	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b06      	cmp	r3, #6
 8002348:	d824      	bhi.n	8002394 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	3b05      	subs	r3, #5
 800235c:	221f      	movs	r2, #31
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43da      	mvns	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	400a      	ands	r2, r1
 800236a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	4618      	mov	r0, r3
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	3b05      	subs	r3, #5
 8002386:	fa00 f203 	lsl.w	r2, r0, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	635a      	str	r2, [r3, #52]	@ 0x34
 8002392:	e04c      	b.n	800242e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b0c      	cmp	r3, #12
 800239a:	d824      	bhi.n	80023e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	3b23      	subs	r3, #35	@ 0x23
 80023ae:	221f      	movs	r2, #31
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43da      	mvns	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	400a      	ands	r2, r1
 80023bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	4618      	mov	r0, r3
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	3b23      	subs	r3, #35	@ 0x23
 80023d8:	fa00 f203 	lsl.w	r2, r0, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80023e4:	e023      	b.n	800242e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	3b41      	subs	r3, #65	@ 0x41
 80023f8:	221f      	movs	r2, #31
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43da      	mvns	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	400a      	ands	r2, r1
 8002406:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	4618      	mov	r0, r3
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4413      	add	r3, r2
 8002420:	3b41      	subs	r3, #65	@ 0x41
 8002422:	fa00 f203 	lsl.w	r2, r0, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800242e:	4b22      	ldr	r3, [pc, #136]	@ (80024b8 <HAL_ADC_ConfigChannel+0x234>)
 8002430:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a21      	ldr	r2, [pc, #132]	@ (80024bc <HAL_ADC_ConfigChannel+0x238>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d109      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x1cc>
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b12      	cmp	r3, #18
 8002442:	d105      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a19      	ldr	r2, [pc, #100]	@ (80024bc <HAL_ADC_ConfigChannel+0x238>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d123      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x21e>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b10      	cmp	r3, #16
 8002460:	d003      	beq.n	800246a <HAL_ADC_ConfigChannel+0x1e6>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2b11      	cmp	r3, #17
 8002468:	d11b      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b10      	cmp	r3, #16
 800247c:	d111      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800247e:	4b10      	ldr	r3, [pc, #64]	@ (80024c0 <HAL_ADC_ConfigChannel+0x23c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a10      	ldr	r2, [pc, #64]	@ (80024c4 <HAL_ADC_ConfigChannel+0x240>)
 8002484:	fba2 2303 	umull	r2, r3, r2, r3
 8002488:	0c9a      	lsrs	r2, r3, #18
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002494:	e002      	b.n	800249c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	3b01      	subs	r3, #1
 800249a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f9      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	40012300 	.word	0x40012300
 80024bc:	40012000 	.word	0x40012000
 80024c0:	2000000c 	.word	0x2000000c
 80024c4:	431bde83 	.word	0x431bde83

080024c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024d0:	4b79      	ldr	r3, [pc, #484]	@ (80026b8 <ADC_Init+0x1f0>)
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	431a      	orrs	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6859      	ldr	r1, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	021a      	lsls	r2, r3, #8
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002520:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6859      	ldr	r1, [r3, #4]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002542:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6899      	ldr	r1, [r3, #8]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255a:	4a58      	ldr	r2, [pc, #352]	@ (80026bc <ADC_Init+0x1f4>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d022      	beq.n	80025a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800256e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6899      	ldr	r1, [r3, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002590:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6899      	ldr	r1, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	e00f      	b.n	80025c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0202 	bic.w	r2, r2, #2
 80025d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6899      	ldr	r1, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	7e1b      	ldrb	r3, [r3, #24]
 80025e0:	005a      	lsls	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	430a      	orrs	r2, r1
 80025e8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d01b      	beq.n	800262c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002602:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002612:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	6859      	ldr	r1, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261e:	3b01      	subs	r3, #1
 8002620:	035a      	lsls	r2, r3, #13
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	e007      	b.n	800263c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800263a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800264a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	3b01      	subs	r3, #1
 8002658:	051a      	lsls	r2, r3, #20
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002670:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6899      	ldr	r1, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800267e:	025a      	lsls	r2, r3, #9
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	430a      	orrs	r2, r1
 8002686:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002696:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	6899      	ldr	r1, [r3, #8]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	029a      	lsls	r2, r3, #10
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	609a      	str	r2, [r3, #8]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	40012300 	.word	0x40012300
 80026bc:	0f000001 	.word	0x0f000001

080026c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002704 <__NVIC_SetPriorityGrouping+0x44>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026dc:	4013      	ands	r3, r2
 80026de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026f2:	4a04      	ldr	r2, [pc, #16]	@ (8002704 <__NVIC_SetPriorityGrouping+0x44>)
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	60d3      	str	r3, [r2, #12]
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800270c:	4b04      	ldr	r3, [pc, #16]	@ (8002720 <__NVIC_GetPriorityGrouping+0x18>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	0a1b      	lsrs	r3, r3, #8
 8002712:	f003 0307 	and.w	r3, r3, #7
}
 8002716:	4618      	mov	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	2b00      	cmp	r3, #0
 8002734:	db0b      	blt.n	800274e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002736:	79fb      	ldrb	r3, [r7, #7]
 8002738:	f003 021f 	and.w	r2, r3, #31
 800273c:	4907      	ldr	r1, [pc, #28]	@ (800275c <__NVIC_EnableIRQ+0x38>)
 800273e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	2001      	movs	r0, #1
 8002746:	fa00 f202 	lsl.w	r2, r0, r2
 800274a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800274e:	bf00      	nop
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	e000e100 	.word	0xe000e100

08002760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002770:	2b00      	cmp	r3, #0
 8002772:	db0a      	blt.n	800278a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	b2da      	uxtb	r2, r3
 8002778:	490c      	ldr	r1, [pc, #48]	@ (80027ac <__NVIC_SetPriority+0x4c>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	0112      	lsls	r2, r2, #4
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	440b      	add	r3, r1
 8002784:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002788:	e00a      	b.n	80027a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4908      	ldr	r1, [pc, #32]	@ (80027b0 <__NVIC_SetPriority+0x50>)
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	3b04      	subs	r3, #4
 8002798:	0112      	lsls	r2, r2, #4
 800279a:	b2d2      	uxtb	r2, r2
 800279c:	440b      	add	r3, r1
 800279e:	761a      	strb	r2, [r3, #24]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000e100 	.word	0xe000e100
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b089      	sub	sp, #36	@ 0x24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	f1c3 0307 	rsb	r3, r3, #7
 80027ce:	2b04      	cmp	r3, #4
 80027d0:	bf28      	it	cs
 80027d2:	2304      	movcs	r3, #4
 80027d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3304      	adds	r3, #4
 80027da:	2b06      	cmp	r3, #6
 80027dc:	d902      	bls.n	80027e4 <NVIC_EncodePriority+0x30>
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3b03      	subs	r3, #3
 80027e2:	e000      	b.n	80027e6 <NVIC_EncodePriority+0x32>
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43da      	mvns	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	401a      	ands	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	fa01 f303 	lsl.w	r3, r1, r3
 8002806:	43d9      	mvns	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	4313      	orrs	r3, r2
         );
}
 800280e:	4618      	mov	r0, r3
 8002810:	3724      	adds	r7, #36	@ 0x24
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3b01      	subs	r3, #1
 8002828:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800282c:	d301      	bcc.n	8002832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800282e:	2301      	movs	r3, #1
 8002830:	e00f      	b.n	8002852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002832:	4a0a      	ldr	r2, [pc, #40]	@ (800285c <SysTick_Config+0x40>)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3b01      	subs	r3, #1
 8002838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800283a:	210f      	movs	r1, #15
 800283c:	f04f 30ff 	mov.w	r0, #4294967295
 8002840:	f7ff ff8e 	bl	8002760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002844:	4b05      	ldr	r3, [pc, #20]	@ (800285c <SysTick_Config+0x40>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800284a:	4b04      	ldr	r3, [pc, #16]	@ (800285c <SysTick_Config+0x40>)
 800284c:	2207      	movs	r2, #7
 800284e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	e000e010 	.word	0xe000e010

08002860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f7ff ff29 	bl	80026c0 <__NVIC_SetPriorityGrouping>
}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002876:	b580      	push	{r7, lr}
 8002878:	b086      	sub	sp, #24
 800287a:	af00      	add	r7, sp, #0
 800287c:	4603      	mov	r3, r0
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002888:	f7ff ff3e 	bl	8002708 <__NVIC_GetPriorityGrouping>
 800288c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	68b9      	ldr	r1, [r7, #8]
 8002892:	6978      	ldr	r0, [r7, #20]
 8002894:	f7ff ff8e 	bl	80027b4 <NVIC_EncodePriority>
 8002898:	4602      	mov	r2, r0
 800289a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff ff5d 	bl	8002760 <__NVIC_SetPriority>
}
 80028a6:	bf00      	nop
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	4603      	mov	r3, r0
 80028b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff31 	bl	8002724 <__NVIC_EnableIRQ>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ffa2 	bl	800281c <SysTick_Config>
 80028d8:	4603      	mov	r3, r0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ee:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028f0:	f7ff fc54 	bl	800219c <HAL_GetTick>
 80028f4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d008      	beq.n	8002914 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2280      	movs	r2, #128	@ 0x80
 8002906:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e052      	b.n	80029ba <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0216 	bic.w	r2, r2, #22
 8002922:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695a      	ldr	r2, [r3, #20]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002932:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002938:	2b00      	cmp	r3, #0
 800293a:	d103      	bne.n	8002944 <HAL_DMA_Abort+0x62>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002940:	2b00      	cmp	r3, #0
 8002942:	d007      	beq.n	8002954 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0208 	bic.w	r2, r2, #8
 8002952:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002964:	e013      	b.n	800298e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002966:	f7ff fc19 	bl	800219c <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b05      	cmp	r3, #5
 8002972:	d90c      	bls.n	800298e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2220      	movs	r2, #32
 8002978:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2203      	movs	r2, #3
 800297e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e015      	b.n	80029ba <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1e4      	bne.n	8002966 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a0:	223f      	movs	r2, #63	@ 0x3f
 80029a2:	409a      	lsls	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d004      	beq.n	80029e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2280      	movs	r2, #128	@ 0x80
 80029da:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e00c      	b.n	80029fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2205      	movs	r2, #5
 80029e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b089      	sub	sp, #36	@ 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a1e:	2300      	movs	r3, #0
 8002a20:	61fb      	str	r3, [r7, #28]
 8002a22:	e16b      	b.n	8002cfc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a24:	2201      	movs	r2, #1
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4013      	ands	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	f040 815a 	bne.w	8002cf6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d005      	beq.n	8002a5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d130      	bne.n	8002abc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	2203      	movs	r2, #3
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a90:	2201      	movs	r2, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 0201 	and.w	r2, r3, #1
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d017      	beq.n	8002af8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d123      	bne.n	8002b4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	08da      	lsrs	r2, r3, #3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3208      	adds	r2, #8
 8002b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	220f      	movs	r2, #15
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	691a      	ldr	r2, [r3, #16]
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	08da      	lsrs	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3208      	adds	r2, #8
 8002b46:	69b9      	ldr	r1, [r7, #24]
 8002b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	2203      	movs	r2, #3
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0203 	and.w	r2, r3, #3
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	f000 80b4 	beq.w	8002cf6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	4b60      	ldr	r3, [pc, #384]	@ (8002d14 <HAL_GPIO_Init+0x30c>)
 8002b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b96:	4a5f      	ldr	r2, [pc, #380]	@ (8002d14 <HAL_GPIO_Init+0x30c>)
 8002b98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b9e:	4b5d      	ldr	r3, [pc, #372]	@ (8002d14 <HAL_GPIO_Init+0x30c>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002baa:	4a5b      	ldr	r2, [pc, #364]	@ (8002d18 <HAL_GPIO_Init+0x310>)
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	089b      	lsrs	r3, r3, #2
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	220f      	movs	r2, #15
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a52      	ldr	r2, [pc, #328]	@ (8002d1c <HAL_GPIO_Init+0x314>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d02b      	beq.n	8002c2e <HAL_GPIO_Init+0x226>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a51      	ldr	r2, [pc, #324]	@ (8002d20 <HAL_GPIO_Init+0x318>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d025      	beq.n	8002c2a <HAL_GPIO_Init+0x222>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a50      	ldr	r2, [pc, #320]	@ (8002d24 <HAL_GPIO_Init+0x31c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d01f      	beq.n	8002c26 <HAL_GPIO_Init+0x21e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a4f      	ldr	r2, [pc, #316]	@ (8002d28 <HAL_GPIO_Init+0x320>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d019      	beq.n	8002c22 <HAL_GPIO_Init+0x21a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a4e      	ldr	r2, [pc, #312]	@ (8002d2c <HAL_GPIO_Init+0x324>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d013      	beq.n	8002c1e <HAL_GPIO_Init+0x216>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a4d      	ldr	r2, [pc, #308]	@ (8002d30 <HAL_GPIO_Init+0x328>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d00d      	beq.n	8002c1a <HAL_GPIO_Init+0x212>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a4c      	ldr	r2, [pc, #304]	@ (8002d34 <HAL_GPIO_Init+0x32c>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d007      	beq.n	8002c16 <HAL_GPIO_Init+0x20e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a4b      	ldr	r2, [pc, #300]	@ (8002d38 <HAL_GPIO_Init+0x330>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d101      	bne.n	8002c12 <HAL_GPIO_Init+0x20a>
 8002c0e:	2307      	movs	r3, #7
 8002c10:	e00e      	b.n	8002c30 <HAL_GPIO_Init+0x228>
 8002c12:	2308      	movs	r3, #8
 8002c14:	e00c      	b.n	8002c30 <HAL_GPIO_Init+0x228>
 8002c16:	2306      	movs	r3, #6
 8002c18:	e00a      	b.n	8002c30 <HAL_GPIO_Init+0x228>
 8002c1a:	2305      	movs	r3, #5
 8002c1c:	e008      	b.n	8002c30 <HAL_GPIO_Init+0x228>
 8002c1e:	2304      	movs	r3, #4
 8002c20:	e006      	b.n	8002c30 <HAL_GPIO_Init+0x228>
 8002c22:	2303      	movs	r3, #3
 8002c24:	e004      	b.n	8002c30 <HAL_GPIO_Init+0x228>
 8002c26:	2302      	movs	r3, #2
 8002c28:	e002      	b.n	8002c30 <HAL_GPIO_Init+0x228>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <HAL_GPIO_Init+0x228>
 8002c2e:	2300      	movs	r3, #0
 8002c30:	69fa      	ldr	r2, [r7, #28]
 8002c32:	f002 0203 	and.w	r2, r2, #3
 8002c36:	0092      	lsls	r2, r2, #2
 8002c38:	4093      	lsls	r3, r2
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c40:	4935      	ldr	r1, [pc, #212]	@ (8002d18 <HAL_GPIO_Init+0x310>)
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	089b      	lsrs	r3, r3, #2
 8002c46:	3302      	adds	r3, #2
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d3c <HAL_GPIO_Init+0x334>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c72:	4a32      	ldr	r2, [pc, #200]	@ (8002d3c <HAL_GPIO_Init+0x334>)
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c78:	4b30      	ldr	r3, [pc, #192]	@ (8002d3c <HAL_GPIO_Init+0x334>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d003      	beq.n	8002c9c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c9c:	4a27      	ldr	r2, [pc, #156]	@ (8002d3c <HAL_GPIO_Init+0x334>)
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ca2:	4b26      	ldr	r3, [pc, #152]	@ (8002d3c <HAL_GPIO_Init+0x334>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cc6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d3c <HAL_GPIO_Init+0x334>)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d3c <HAL_GPIO_Init+0x334>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cf0:	4a12      	ldr	r2, [pc, #72]	@ (8002d3c <HAL_GPIO_Init+0x334>)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	2b0f      	cmp	r3, #15
 8002d00:	f67f ae90 	bls.w	8002a24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop
 8002d08:	3724      	adds	r7, #36	@ 0x24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40023800 	.word	0x40023800
 8002d18:	40013800 	.word	0x40013800
 8002d1c:	40020000 	.word	0x40020000
 8002d20:	40020400 	.word	0x40020400
 8002d24:	40020800 	.word	0x40020800
 8002d28:	40020c00 	.word	0x40020c00
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	40021400 	.word	0x40021400
 8002d34:	40021800 	.word	0x40021800
 8002d38:	40021c00 	.word	0x40021c00
 8002d3c:	40013c00 	.word	0x40013c00

08002d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	807b      	strh	r3, [r7, #2]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d50:	787b      	ldrb	r3, [r7, #1]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d56:	887a      	ldrh	r2, [r7, #2]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d5c:	e003      	b.n	8002d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d5e:	887b      	ldrh	r3, [r7, #2]
 8002d60:	041a      	lsls	r2, r3, #16
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	619a      	str	r2, [r3, #24]
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e12b      	b.n	8002fde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d106      	bne.n	8002da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7fe fcd2 	bl	8001744 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2224      	movs	r2, #36	@ 0x24
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002dc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dd8:	f001 ffd2 	bl	8004d80 <HAL_RCC_GetPCLK1Freq>
 8002ddc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4a81      	ldr	r2, [pc, #516]	@ (8002fe8 <HAL_I2C_Init+0x274>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d807      	bhi.n	8002df8 <HAL_I2C_Init+0x84>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4a80      	ldr	r2, [pc, #512]	@ (8002fec <HAL_I2C_Init+0x278>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	bf94      	ite	ls
 8002df0:	2301      	movls	r3, #1
 8002df2:	2300      	movhi	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	e006      	b.n	8002e06 <HAL_I2C_Init+0x92>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4a7d      	ldr	r2, [pc, #500]	@ (8002ff0 <HAL_I2C_Init+0x27c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	bf94      	ite	ls
 8002e00:	2301      	movls	r3, #1
 8002e02:	2300      	movhi	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e0e7      	b.n	8002fde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4a78      	ldr	r2, [pc, #480]	@ (8002ff4 <HAL_I2C_Init+0x280>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	0c9b      	lsrs	r3, r3, #18
 8002e18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4a6a      	ldr	r2, [pc, #424]	@ (8002fe8 <HAL_I2C_Init+0x274>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d802      	bhi.n	8002e48 <HAL_I2C_Init+0xd4>
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	3301      	adds	r3, #1
 8002e46:	e009      	b.n	8002e5c <HAL_I2C_Init+0xe8>
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	4a69      	ldr	r2, [pc, #420]	@ (8002ff8 <HAL_I2C_Init+0x284>)
 8002e54:	fba2 2303 	umull	r2, r3, r2, r3
 8002e58:	099b      	lsrs	r3, r3, #6
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	430b      	orrs	r3, r1
 8002e62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e6e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	495c      	ldr	r1, [pc, #368]	@ (8002fe8 <HAL_I2C_Init+0x274>)
 8002e78:	428b      	cmp	r3, r1
 8002e7a:	d819      	bhi.n	8002eb0 <HAL_I2C_Init+0x13c>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1e59      	subs	r1, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e8a:	1c59      	adds	r1, r3, #1
 8002e8c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e90:	400b      	ands	r3, r1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <HAL_I2C_Init+0x138>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1e59      	subs	r1, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eaa:	e051      	b.n	8002f50 <HAL_I2C_Init+0x1dc>
 8002eac:	2304      	movs	r3, #4
 8002eae:	e04f      	b.n	8002f50 <HAL_I2C_Init+0x1dc>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d111      	bne.n	8002edc <HAL_I2C_Init+0x168>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1e58      	subs	r0, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6859      	ldr	r1, [r3, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	440b      	add	r3, r1
 8002ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	e012      	b.n	8002f02 <HAL_I2C_Init+0x18e>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1e58      	subs	r0, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	0099      	lsls	r1, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf0c      	ite	eq
 8002efc:	2301      	moveq	r3, #1
 8002efe:	2300      	movne	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_I2C_Init+0x196>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e022      	b.n	8002f50 <HAL_I2C_Init+0x1dc>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10e      	bne.n	8002f30 <HAL_I2C_Init+0x1bc>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1e58      	subs	r0, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6859      	ldr	r1, [r3, #4]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	440b      	add	r3, r1
 8002f20:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f24:	3301      	adds	r3, #1
 8002f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f2e:	e00f      	b.n	8002f50 <HAL_I2C_Init+0x1dc>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	1e58      	subs	r0, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	0099      	lsls	r1, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f46:	3301      	adds	r3, #1
 8002f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	6809      	ldr	r1, [r1, #0]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69da      	ldr	r2, [r3, #28]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6911      	ldr	r1, [r2, #16]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68d2      	ldr	r2, [r2, #12]
 8002f8a:	4311      	orrs	r1, r2
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	430b      	orrs	r3, r1
 8002f92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695a      	ldr	r2, [r3, #20]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	000186a0 	.word	0x000186a0
 8002fec:	001e847f 	.word	0x001e847f
 8002ff0:	003d08ff 	.word	0x003d08ff
 8002ff4:	431bde83 	.word	0x431bde83
 8002ff8:	10624dd3 	.word	0x10624dd3

08002ffc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af02      	add	r7, sp, #8
 8003002:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e101      	b.n	8003212 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d106      	bne.n	800302e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f008 fdbb 	bl	800bba4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2203      	movs	r2, #3
 8003032:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800303c:	d102      	bne.n	8003044 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f003 fe30 	bl	8006cae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	7c1a      	ldrb	r2, [r3, #16]
 8003056:	f88d 2000 	strb.w	r2, [sp]
 800305a:	3304      	adds	r3, #4
 800305c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800305e:	f003 fd0f 	bl	8006a80 <USB_CoreInit>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0ce      	b.n	8003212 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2100      	movs	r1, #0
 800307a:	4618      	mov	r0, r3
 800307c:	f003 fe28 	bl	8006cd0 <USB_SetCurrentMode>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d005      	beq.n	8003092 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2202      	movs	r2, #2
 800308a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e0bf      	b.n	8003212 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003092:	2300      	movs	r3, #0
 8003094:	73fb      	strb	r3, [r7, #15]
 8003096:	e04a      	b.n	800312e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003098:	7bfa      	ldrb	r2, [r7, #15]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	3315      	adds	r3, #21
 80030a8:	2201      	movs	r2, #1
 80030aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030ac:	7bfa      	ldrb	r2, [r7, #15]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	3314      	adds	r3, #20
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030c0:	7bfa      	ldrb	r2, [r7, #15]
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	b298      	uxth	r0, r3
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	332e      	adds	r3, #46	@ 0x2e
 80030d4:	4602      	mov	r2, r0
 80030d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030d8:	7bfa      	ldrb	r2, [r7, #15]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	4413      	add	r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	3318      	adds	r3, #24
 80030e8:	2200      	movs	r2, #0
 80030ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030ec:	7bfa      	ldrb	r2, [r7, #15]
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4413      	add	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	331c      	adds	r3, #28
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003100:	7bfa      	ldrb	r2, [r7, #15]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	3320      	adds	r3, #32
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003114:	7bfa      	ldrb	r2, [r7, #15]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	3324      	adds	r3, #36	@ 0x24
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003128:	7bfb      	ldrb	r3, [r7, #15]
 800312a:	3301      	adds	r3, #1
 800312c:	73fb      	strb	r3, [r7, #15]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	791b      	ldrb	r3, [r3, #4]
 8003132:	7bfa      	ldrb	r2, [r7, #15]
 8003134:	429a      	cmp	r2, r3
 8003136:	d3af      	bcc.n	8003098 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003138:	2300      	movs	r3, #0
 800313a:	73fb      	strb	r3, [r7, #15]
 800313c:	e044      	b.n	80031c8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800313e:	7bfa      	ldrb	r2, [r7, #15]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003154:	7bfa      	ldrb	r2, [r7, #15]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003166:	7bfa      	ldrb	r2, [r7, #15]
 8003168:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800316a:	7bfa      	ldrb	r2, [r7, #15]
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	4413      	add	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	440b      	add	r3, r1
 8003178:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003180:	7bfa      	ldrb	r2, [r7, #15]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003196:	7bfa      	ldrb	r2, [r7, #15]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	4413      	add	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
 80031c4:	3301      	adds	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	791b      	ldrb	r3, [r3, #4]
 80031cc:	7bfa      	ldrb	r2, [r7, #15]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d3b5      	bcc.n	800313e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	7c1a      	ldrb	r2, [r3, #16]
 80031da:	f88d 2000 	strb.w	r2, [sp]
 80031de:	3304      	adds	r3, #4
 80031e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031e2:	f003 fdc1 	bl	8006d68 <USB_DevInit>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e00c      	b.n	8003212 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f004 fe0b 	bl	8007e26 <USB_DevDisconnect>

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_PCD_Start+0x1c>
 8003232:	2302      	movs	r3, #2
 8003234:	e022      	b.n	800327c <HAL_PCD_Start+0x62>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800324e:	2b01      	cmp	r3, #1
 8003250:	d105      	bne.n	800325e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003256:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f003 fd12 	bl	8006c8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4618      	mov	r0, r3
 800326e:	f004 fdb9 	bl	8007de4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	4618      	mov	r0, r3
 800327e:	3710      	adds	r7, #16
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003284:	b590      	push	{r4, r7, lr}
 8003286:	b08d      	sub	sp, #52	@ 0x34
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003292:	6a3b      	ldr	r3, [r7, #32]
 8003294:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f004 fe77 	bl	8007f8e <USB_GetMode>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f040 848c 	bne.w	8003bc0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f004 fddb 	bl	8007e68 <USB_ReadInterrupts>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 8482 	beq.w	8003bbe <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	0a1b      	lsrs	r3, r3, #8
 80032c4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f004 fdc8 	bl	8007e68 <USB_ReadInterrupts>
 80032d8:	4603      	mov	r3, r0
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d107      	bne.n	80032f2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695a      	ldr	r2, [r3, #20]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f002 0202 	and.w	r2, r2, #2
 80032f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f004 fdb6 	bl	8007e68 <USB_ReadInterrupts>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	2b10      	cmp	r3, #16
 8003304:	d161      	bne.n	80033ca <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699a      	ldr	r2, [r3, #24]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0210 	bic.w	r2, r2, #16
 8003314:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	f003 020f 	and.w	r2, r3, #15
 8003322:	4613      	mov	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	3304      	adds	r3, #4
 8003334:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	0c5b      	lsrs	r3, r3, #17
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	2b02      	cmp	r3, #2
 8003340:	d124      	bne.n	800338c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d035      	beq.n	80033ba <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	091b      	lsrs	r3, r3, #4
 8003356:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003358:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800335c:	b29b      	uxth	r3, r3
 800335e:	461a      	mov	r2, r3
 8003360:	6a38      	ldr	r0, [r7, #32]
 8003362:	f004 fbed 	bl	8007b40 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	68da      	ldr	r2, [r3, #12]
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	091b      	lsrs	r3, r3, #4
 800336e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003372:	441a      	add	r2, r3
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	091b      	lsrs	r3, r3, #4
 8003380:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003384:	441a      	add	r2, r3
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	615a      	str	r2, [r3, #20]
 800338a:	e016      	b.n	80033ba <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	0c5b      	lsrs	r3, r3, #17
 8003390:	f003 030f 	and.w	r3, r3, #15
 8003394:	2b06      	cmp	r3, #6
 8003396:	d110      	bne.n	80033ba <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800339e:	2208      	movs	r2, #8
 80033a0:	4619      	mov	r1, r3
 80033a2:	6a38      	ldr	r0, [r7, #32]
 80033a4:	f004 fbcc 	bl	8007b40 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	695a      	ldr	r2, [r3, #20]
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	091b      	lsrs	r3, r3, #4
 80033b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033b4:	441a      	add	r2, r3
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699a      	ldr	r2, [r3, #24]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0210 	orr.w	r2, r2, #16
 80033c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f004 fd4a 	bl	8007e68 <USB_ReadInterrupts>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033da:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80033de:	f040 80a7 	bne.w	8003530 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f004 fd4f 	bl	8007e8e <USB_ReadDevAllOutEpInterrupt>
 80033f0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80033f2:	e099      	b.n	8003528 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80033f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 808e 	beq.w	800351c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	4611      	mov	r1, r2
 800340a:	4618      	mov	r0, r3
 800340c:	f004 fd73 	bl	8007ef6 <USB_ReadDevOutEPInterrupt>
 8003410:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00c      	beq.n	8003436 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	4413      	add	r3, r2
 8003424:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003428:	461a      	mov	r2, r3
 800342a:	2301      	movs	r3, #1
 800342c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800342e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 fea3 	bl	800417c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00c      	beq.n	800345a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800344c:	461a      	mov	r2, r3
 800344e:	2308      	movs	r3, #8
 8003450:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003452:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 ff79 	bl	800434c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f003 0310 	and.w	r3, r3, #16
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003466:	015a      	lsls	r2, r3, #5
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	4413      	add	r3, r2
 800346c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003470:	461a      	mov	r2, r3
 8003472:	2310      	movs	r3, #16
 8003474:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d030      	beq.n	80034e2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003488:	2b80      	cmp	r3, #128	@ 0x80
 800348a:	d109      	bne.n	80034a0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	69fa      	ldr	r2, [r7, #28]
 8003496:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800349a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800349e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80034a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034a2:	4613      	mov	r3, r2
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	3304      	adds	r3, #4
 80034b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	78db      	ldrb	r3, [r3, #3]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d108      	bne.n	80034d0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	2200      	movs	r2, #0
 80034c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f008 fc70 	bl	800bdb0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80034d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034dc:	461a      	mov	r2, r3
 80034de:	2302      	movs	r3, #2
 80034e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	f003 0320 	and.w	r3, r3, #32
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d008      	beq.n	80034fe <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034f8:	461a      	mov	r2, r3
 80034fa:	2320      	movs	r3, #32
 80034fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d009      	beq.n	800351c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	4413      	add	r3, r2
 8003510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003514:	461a      	mov	r2, r3
 8003516:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800351a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	3301      	adds	r3, #1
 8003520:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003524:	085b      	lsrs	r3, r3, #1
 8003526:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352a:	2b00      	cmp	r3, #0
 800352c:	f47f af62 	bne.w	80033f4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f004 fc97 	bl	8007e68 <USB_ReadInterrupts>
 800353a:	4603      	mov	r3, r0
 800353c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003540:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003544:	f040 80db 	bne.w	80036fe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4618      	mov	r0, r3
 800354e:	f004 fcb8 	bl	8007ec2 <USB_ReadDevAllInEpInterrupt>
 8003552:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003558:	e0cd      	b.n	80036f6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800355a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800355c:	f003 0301 	and.w	r3, r3, #1
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80c2 	beq.w	80036ea <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	4611      	mov	r1, r2
 8003570:	4618      	mov	r0, r3
 8003572:	f004 fcde 	bl	8007f32 <USB_ReadDevInEPInterrupt>
 8003576:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d057      	beq.n	8003632 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	f003 030f 	and.w	r3, r3, #15
 8003588:	2201      	movs	r2, #1
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003596:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	43db      	mvns	r3, r3
 800359c:	69f9      	ldr	r1, [r7, #28]
 800359e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80035a2:	4013      	ands	r3, r2
 80035a4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80035a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035b2:	461a      	mov	r2, r3
 80035b4:	2301      	movs	r3, #1
 80035b6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	799b      	ldrb	r3, [r3, #6]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d132      	bne.n	8003626 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035c4:	4613      	mov	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	3320      	adds	r3, #32
 80035d0:	6819      	ldr	r1, [r3, #0]
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4403      	add	r3, r0
 80035e0:	331c      	adds	r3, #28
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4419      	add	r1, r3
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ea:	4613      	mov	r3, r2
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4403      	add	r3, r0
 80035f4:	3320      	adds	r3, #32
 80035f6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80035f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d113      	bne.n	8003626 <HAL_PCD_IRQHandler+0x3a2>
 80035fe:	6879      	ldr	r1, [r7, #4]
 8003600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003602:	4613      	mov	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	3324      	adds	r3, #36	@ 0x24
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d108      	bne.n	8003626 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6818      	ldr	r0, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800361e:	461a      	mov	r2, r3
 8003620:	2101      	movs	r1, #1
 8003622:	f004 fce5 	bl	8007ff0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	b2db      	uxtb	r3, r3
 800362a:	4619      	mov	r1, r3
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f008 fb3a 	bl	800bca6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d008      	beq.n	800364e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800363c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	4413      	add	r3, r2
 8003644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003648:	461a      	mov	r2, r3
 800364a:	2308      	movs	r3, #8
 800364c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f003 0310 	and.w	r3, r3, #16
 8003654:	2b00      	cmp	r3, #0
 8003656:	d008      	beq.n	800366a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003664:	461a      	mov	r2, r3
 8003666:	2310      	movs	r3, #16
 8003668:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	4413      	add	r3, r2
 800367c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003680:	461a      	mov	r2, r3
 8003682:	2340      	movs	r3, #64	@ 0x40
 8003684:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d023      	beq.n	80036d8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003690:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003692:	6a38      	ldr	r0, [r7, #32]
 8003694:	f003 fccc 	bl	8007030 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003698:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800369a:	4613      	mov	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	3310      	adds	r3, #16
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	4413      	add	r3, r2
 80036a8:	3304      	adds	r3, #4
 80036aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	78db      	ldrb	r3, [r3, #3]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d108      	bne.n	80036c6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2200      	movs	r2, #0
 80036b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	4619      	mov	r1, r3
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f008 fb87 	bl	800bdd4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c8:	015a      	lsls	r2, r3, #5
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	4413      	add	r3, r2
 80036ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036d2:	461a      	mov	r2, r3
 80036d4:	2302      	movs	r3, #2
 80036d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 fcbd 	bl	8004064 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	3301      	adds	r3, #1
 80036ee:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80036f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f2:	085b      	lsrs	r3, r3, #1
 80036f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80036f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	f47f af2e 	bne.w	800355a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f004 fbb0 	bl	8007e68 <USB_ReadInterrupts>
 8003708:	4603      	mov	r3, r0
 800370a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800370e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003712:	d122      	bne.n	800375a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003722:	f023 0301 	bic.w	r3, r3, #1
 8003726:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800372e:	2b01      	cmp	r3, #1
 8003730:	d108      	bne.n	8003744 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800373a:	2100      	movs	r1, #0
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fea3 	bl	8004488 <HAL_PCDEx_LPM_Callback>
 8003742:	e002      	b.n	800374a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f008 fb25 	bl	800bd94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003758:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f004 fb82 	bl	8007e68 <USB_ReadInterrupts>
 8003764:	4603      	mov	r3, r0
 8003766:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800376a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800376e:	d112      	bne.n	8003796 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b01      	cmp	r3, #1
 800377e:	d102      	bne.n	8003786 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f008 fae1 	bl	800bd48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695a      	ldr	r2, [r3, #20]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003794:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f004 fb64 	bl	8007e68 <USB_ReadInterrupts>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037aa:	f040 80b7 	bne.w	800391c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037bc:	f023 0301 	bic.w	r3, r3, #1
 80037c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2110      	movs	r1, #16
 80037c8:	4618      	mov	r0, r3
 80037ca:	f003 fc31 	bl	8007030 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ce:	2300      	movs	r3, #0
 80037d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037d2:	e046      	b.n	8003862 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037e0:	461a      	mov	r2, r3
 80037e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80037e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037f8:	0151      	lsls	r1, r2, #5
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	440a      	add	r2, r1
 80037fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003802:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003806:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	4413      	add	r3, r2
 8003810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003814:	461a      	mov	r2, r3
 8003816:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800381a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800381c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800382c:	0151      	lsls	r1, r2, #5
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	440a      	add	r2, r1
 8003832:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003836:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800383a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800383c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	4413      	add	r3, r2
 8003844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800384c:	0151      	lsls	r1, r2, #5
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	440a      	add	r2, r1
 8003852:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003856:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800385a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800385c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385e:	3301      	adds	r3, #1
 8003860:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	791b      	ldrb	r3, [r3, #4]
 8003866:	461a      	mov	r2, r3
 8003868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800386a:	4293      	cmp	r3, r2
 800386c:	d3b2      	bcc.n	80037d4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800387c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003880:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	7bdb      	ldrb	r3, [r3, #15]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d016      	beq.n	80038b8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003890:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800389a:	f043 030b 	orr.w	r3, r3, #11
 800389e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038b0:	f043 030b 	orr.w	r3, r3, #11
 80038b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80038b6:	e015      	b.n	80038e4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038ca:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80038ce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038de:	f043 030b 	orr.w	r3, r3, #11
 80038e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69fa      	ldr	r2, [r7, #28]
 80038ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038f2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80038f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003906:	461a      	mov	r2, r3
 8003908:	f004 fb72 	bl	8007ff0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800391a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f004 faa1 	bl	8007e68 <USB_ReadInterrupts>
 8003926:	4603      	mov	r3, r0
 8003928:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800392c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003930:	d123      	bne.n	800397a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f004 fb37 	bl	8007faa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f003 fbee 	bl	8007122 <USB_GetDevSpeed>
 8003946:	4603      	mov	r3, r0
 8003948:	461a      	mov	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681c      	ldr	r4, [r3, #0]
 8003952:	f001 fa09 	bl	8004d68 <HAL_RCC_GetHCLKFreq>
 8003956:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800395c:	461a      	mov	r2, r3
 800395e:	4620      	mov	r0, r4
 8003960:	f003 f8f2 	bl	8006b48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f008 f9c6 	bl	800bcf6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695a      	ldr	r2, [r3, #20]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003978:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f004 fa72 	bl	8007e68 <USB_ReadInterrupts>
 8003984:	4603      	mov	r3, r0
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b08      	cmp	r3, #8
 800398c:	d10a      	bne.n	80039a4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f008 f9a3 	bl	800bcda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f002 0208 	and.w	r2, r2, #8
 80039a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f004 fa5d 	bl	8007e68 <USB_ReadInterrupts>
 80039ae:	4603      	mov	r3, r0
 80039b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039b4:	2b80      	cmp	r3, #128	@ 0x80
 80039b6:	d123      	bne.n	8003a00 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039c4:	2301      	movs	r3, #1
 80039c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80039c8:	e014      	b.n	80039f4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ce:	4613      	mov	r3, r2
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d105      	bne.n	80039ee <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80039e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	4619      	mov	r1, r3
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 fb0a 	bl	8004002 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	3301      	adds	r3, #1
 80039f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	791b      	ldrb	r3, [r3, #4]
 80039f8:	461a      	mov	r2, r3
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d3e4      	bcc.n	80039ca <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f004 fa2f 	bl	8007e68 <USB_ReadInterrupts>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a14:	d13c      	bne.n	8003a90 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a16:	2301      	movs	r3, #1
 8003a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a1a:	e02b      	b.n	8003a74 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a30:	4613      	mov	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	3318      	adds	r3, #24
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d115      	bne.n	8003a6e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a42:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	da12      	bge.n	8003a6e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	3317      	adds	r3, #23
 8003a58:	2201      	movs	r2, #1
 8003a5a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	4619      	mov	r1, r3
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 faca 	bl	8004002 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a70:	3301      	adds	r3, #1
 8003a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	791b      	ldrb	r3, [r3, #4]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d3cd      	bcc.n	8003a1c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695a      	ldr	r2, [r3, #20]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003a8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f004 f9e7 	bl	8007e68 <USB_ReadInterrupts>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aa0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003aa4:	d156      	bne.n	8003b54 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aaa:	e045      	b.n	8003b38 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d12e      	bne.n	8003b32 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ad4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	da2b      	bge.n	8003b32 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003ae6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d121      	bne.n	8003b32 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003af2:	4613      	mov	r3, r2
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4413      	add	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003b00:	2201      	movs	r2, #1
 8003b02:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10a      	bne.n	8003b32 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	69fa      	ldr	r2, [r7, #28]
 8003b26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b2e:	6053      	str	r3, [r2, #4]
            break;
 8003b30:	e008      	b.n	8003b44 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	3301      	adds	r3, #1
 8003b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	791b      	ldrb	r3, [r3, #4]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d3b3      	bcc.n	8003aac <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695a      	ldr	r2, [r3, #20]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003b52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f004 f985 	bl	8007e68 <USB_ReadInterrupts>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003b64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b68:	d10a      	bne.n	8003b80 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f008 f944 	bl	800bdf8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f004 f96f 	bl	8007e68 <USB_ReadInterrupts>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d115      	bne.n	8003bc0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f008 f934 	bl	800be14 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	6859      	ldr	r1, [r3, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	605a      	str	r2, [r3, #4]
 8003bbc:	e000      	b.n	8003bc0 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003bbe:	bf00      	nop
    }
  }
}
 8003bc0:	3734      	adds	r7, #52	@ 0x34
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd90      	pop	{r4, r7, pc}

08003bc6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b082      	sub	sp, #8
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_PCD_SetAddress+0x1a>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e012      	b.n	8003c06 <HAL_PCD_SetAddress+0x40>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f004 f8ce 	bl	8007d98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b084      	sub	sp, #16
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	6078      	str	r0, [r7, #4]
 8003c16:	4608      	mov	r0, r1
 8003c18:	4611      	mov	r1, r2
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	70fb      	strb	r3, [r7, #3]
 8003c20:	460b      	mov	r3, r1
 8003c22:	803b      	strh	r3, [r7, #0]
 8003c24:	4613      	mov	r3, r2
 8003c26:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	da0f      	bge.n	8003c54 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	f003 020f 	and.w	r2, r3, #15
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	3310      	adds	r3, #16
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	4413      	add	r3, r2
 8003c48:	3304      	adds	r3, #4
 8003c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	705a      	strb	r2, [r3, #1]
 8003c52:	e00f      	b.n	8003c74 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	f003 020f 	and.w	r2, r3, #15
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	00db      	lsls	r3, r3, #3
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003c80:	883b      	ldrh	r3, [r7, #0]
 8003c82:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	78ba      	ldrb	r2, [r7, #2]
 8003c8e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	785b      	ldrb	r3, [r3, #1]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d004      	beq.n	8003ca2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ca2:	78bb      	ldrb	r3, [r7, #2]
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d102      	bne.n	8003cae <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_PCD_EP_Open+0xae>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e00e      	b.n	8003cda <HAL_PCD_EP_Open+0xcc>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68f9      	ldr	r1, [r7, #12]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f003 fa4e 	bl	800716c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003cd8:	7afb      	ldrb	r3, [r7, #11]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b084      	sub	sp, #16
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	460b      	mov	r3, r1
 8003cec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	da0f      	bge.n	8003d16 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cf6:	78fb      	ldrb	r3, [r7, #3]
 8003cf8:	f003 020f 	and.w	r2, r3, #15
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	3310      	adds	r3, #16
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	4413      	add	r3, r2
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2201      	movs	r2, #1
 8003d12:	705a      	strb	r2, [r3, #1]
 8003d14:	e00f      	b.n	8003d36 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	f003 020f 	and.w	r2, r3, #15
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d36:	78fb      	ldrb	r3, [r7, #3]
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_PCD_EP_Close+0x6e>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e00e      	b.n	8003d6e <HAL_PCD_EP_Close+0x8c>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68f9      	ldr	r1, [r7, #12]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f003 fa8c 	bl	800727c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b086      	sub	sp, #24
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	60f8      	str	r0, [r7, #12]
 8003d7e:	607a      	str	r2, [r7, #4]
 8003d80:	603b      	str	r3, [r7, #0]
 8003d82:	460b      	mov	r3, r1
 8003d84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d86:	7afb      	ldrb	r3, [r7, #11]
 8003d88:	f003 020f 	and.w	r2, r3, #15
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2200      	movs	r2, #0
 8003db0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	2200      	movs	r2, #0
 8003db6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003db8:	7afb      	ldrb	r3, [r7, #11]
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	799b      	ldrb	r3, [r3, #6]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d102      	bne.n	8003dd2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6818      	ldr	r0, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	799b      	ldrb	r3, [r3, #6]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	6979      	ldr	r1, [r7, #20]
 8003dde:	f003 fb29 	bl	8007434 <USB_EPStartXfer>

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	f003 020f 	and.w	r2, r3, #15
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003e0e:	681b      	ldr	r3, [r3, #0]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b086      	sub	sp, #24
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	607a      	str	r2, [r7, #4]
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e2c:	7afb      	ldrb	r3, [r7, #11]
 8003e2e:	f003 020f 	and.w	r2, r3, #15
 8003e32:	4613      	mov	r3, r2
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	3310      	adds	r3, #16
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4413      	add	r3, r2
 8003e40:	3304      	adds	r3, #4
 8003e42:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	2200      	movs	r2, #0
 8003e54:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e5c:	7afb      	ldrb	r3, [r7, #11]
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	799b      	ldrb	r3, [r3, #6]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d102      	bne.n	8003e76 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	799b      	ldrb	r3, [r3, #6]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	6979      	ldr	r1, [r7, #20]
 8003e82:	f003 fad7 	bl	8007434 <USB_EPStartXfer>

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	7912      	ldrb	r2, [r2, #4]
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d901      	bls.n	8003eae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e04f      	b.n	8003f4e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003eae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	da0f      	bge.n	8003ed6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eb6:	78fb      	ldrb	r3, [r7, #3]
 8003eb8:	f003 020f 	and.w	r2, r3, #15
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	3310      	adds	r3, #16
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	4413      	add	r3, r2
 8003eca:	3304      	adds	r3, #4
 8003ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	705a      	strb	r2, [r3, #1]
 8003ed4:	e00d      	b.n	8003ef2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ed6:	78fa      	ldrb	r2, [r7, #3]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3304      	adds	r3, #4
 8003eea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d101      	bne.n	8003f12 <HAL_PCD_EP_SetStall+0x82>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	e01d      	b.n	8003f4e <HAL_PCD_EP_SetStall+0xbe>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68f9      	ldr	r1, [r7, #12]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f003 fe65 	bl	8007bf0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d109      	bne.n	8003f44 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	7999      	ldrb	r1, [r3, #6]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f004 f856 	bl	8007ff0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b084      	sub	sp, #16
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	460b      	mov	r3, r1
 8003f60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f62:	78fb      	ldrb	r3, [r7, #3]
 8003f64:	f003 030f 	and.w	r3, r3, #15
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	7912      	ldrb	r2, [r2, #4]
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d901      	bls.n	8003f74 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e042      	b.n	8003ffa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	da0f      	bge.n	8003f9c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	f003 020f 	and.w	r2, r3, #15
 8003f82:	4613      	mov	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	3310      	adds	r3, #16
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	4413      	add	r3, r2
 8003f90:	3304      	adds	r3, #4
 8003f92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2201      	movs	r2, #1
 8003f98:	705a      	strb	r2, [r3, #1]
 8003f9a:	e00f      	b.n	8003fbc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	f003 020f 	and.w	r2, r3, #15
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_PCD_EP_ClrStall+0x86>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e00e      	b.n	8003ffa <HAL_PCD_EP_ClrStall+0xa4>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68f9      	ldr	r1, [r7, #12]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f003 fe6e 	bl	8007ccc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b084      	sub	sp, #16
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	460b      	mov	r3, r1
 800400c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800400e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004012:	2b00      	cmp	r3, #0
 8004014:	da0c      	bge.n	8004030 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004016:	78fb      	ldrb	r3, [r7, #3]
 8004018:	f003 020f 	and.w	r2, r3, #15
 800401c:	4613      	mov	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	3310      	adds	r3, #16
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	4413      	add	r3, r2
 800402a:	3304      	adds	r3, #4
 800402c:	60fb      	str	r3, [r7, #12]
 800402e:	e00c      	b.n	800404a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004030:	78fb      	ldrb	r3, [r7, #3]
 8004032:	f003 020f 	and.w	r2, r3, #15
 8004036:	4613      	mov	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	4413      	add	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	4413      	add	r3, r2
 8004046:	3304      	adds	r3, #4
 8004048:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68f9      	ldr	r1, [r7, #12]
 8004050:	4618      	mov	r0, r3
 8004052:	f003 fc8d 	bl	8007970 <USB_EPStopXfer>
 8004056:	4603      	mov	r3, r0
 8004058:	72fb      	strb	r3, [r7, #11]

  return ret;
 800405a:	7afb      	ldrb	r3, [r7, #11]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08a      	sub	sp, #40	@ 0x28
 8004068:	af02      	add	r7, sp, #8
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	4613      	mov	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	3310      	adds	r3, #16
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	4413      	add	r3, r2
 8004088:	3304      	adds	r3, #4
 800408a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	695a      	ldr	r2, [r3, #20]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	429a      	cmp	r2, r3
 8004096:	d901      	bls.n	800409c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e06b      	b.n	8004174 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d902      	bls.n	80040b8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	3303      	adds	r3, #3
 80040bc:	089b      	lsrs	r3, r3, #2
 80040be:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040c0:	e02a      	b.n	8004118 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	691a      	ldr	r2, [r3, #16]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d902      	bls.n	80040de <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	3303      	adds	r3, #3
 80040e2:	089b      	lsrs	r3, r3, #2
 80040e4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	68d9      	ldr	r1, [r3, #12]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	4603      	mov	r3, r0
 80040fa:	6978      	ldr	r0, [r7, #20]
 80040fc:	f003 fce2 	bl	8007ac4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	441a      	add	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	695a      	ldr	r2, [r3, #20]
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	441a      	add	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	429a      	cmp	r2, r3
 800412c:	d809      	bhi.n	8004142 <PCD_WriteEmptyTxFifo+0xde>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	695a      	ldr	r2, [r3, #20]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004136:	429a      	cmp	r2, r3
 8004138:	d203      	bcs.n	8004142 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1bf      	bne.n	80040c2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	691a      	ldr	r2, [r3, #16]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	429a      	cmp	r2, r3
 800414c:	d811      	bhi.n	8004172 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	2201      	movs	r2, #1
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004162:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	43db      	mvns	r3, r3
 8004168:	6939      	ldr	r1, [r7, #16]
 800416a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800416e:	4013      	ands	r3, r2
 8004170:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3720      	adds	r7, #32
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418c:	69fb      	ldr	r3, [r7, #28]
 800418e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	333c      	adds	r3, #60	@ 0x3c
 8004194:	3304      	adds	r3, #4
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	799b      	ldrb	r3, [r3, #6]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d17b      	bne.n	80042aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d015      	beq.n	80041e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	4a61      	ldr	r2, [pc, #388]	@ (8004344 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	f240 80b9 	bls.w	8004338 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 80b3 	beq.w	8004338 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041de:	461a      	mov	r2, r3
 80041e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041e4:	6093      	str	r3, [r2, #8]
 80041e6:	e0a7      	b.n	8004338 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041fe:	461a      	mov	r2, r3
 8004200:	2320      	movs	r3, #32
 8004202:	6093      	str	r3, [r2, #8]
 8004204:	e098      	b.n	8004338 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800420c:	2b00      	cmp	r3, #0
 800420e:	f040 8093 	bne.w	8004338 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	4a4b      	ldr	r2, [pc, #300]	@ (8004344 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d90f      	bls.n	800423a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004230:	461a      	mov	r2, r3
 8004232:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004236:	6093      	str	r3, [r2, #8]
 8004238:	e07e      	b.n	8004338 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	4613      	mov	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	4413      	add	r3, r2
 800424c:	3304      	adds	r3, #4
 800424e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1a      	ldr	r2, [r3, #32]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	0159      	lsls	r1, r3, #5
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	440b      	add	r3, r1
 800425c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004266:	1ad2      	subs	r2, r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d114      	bne.n	800429c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004284:	461a      	mov	r2, r3
 8004286:	2101      	movs	r1, #1
 8004288:	f003 feb2 	bl	8007ff0 <USB_EP0_OutStart>
 800428c:	e006      	b.n	800429c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	441a      	add	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	4619      	mov	r1, r3
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f007 fce4 	bl	800bc70 <HAL_PCD_DataOutStageCallback>
 80042a8:	e046      	b.n	8004338 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	4a26      	ldr	r2, [pc, #152]	@ (8004348 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d124      	bne.n	80042fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00a      	beq.n	80042d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042c8:	461a      	mov	r2, r3
 80042ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ce:	6093      	str	r3, [r2, #8]
 80042d0:	e032      	b.n	8004338 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042e8:	461a      	mov	r2, r3
 80042ea:	2320      	movs	r3, #32
 80042ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	4619      	mov	r1, r3
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f007 fcbb 	bl	800bc70 <HAL_PCD_DataOutStageCallback>
 80042fa:	e01d      	b.n	8004338 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d114      	bne.n	800432c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	4613      	mov	r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	4413      	add	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	440b      	add	r3, r1
 8004310:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d108      	bne.n	800432c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004324:	461a      	mov	r2, r3
 8004326:	2100      	movs	r1, #0
 8004328:	f003 fe62 	bl	8007ff0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	b2db      	uxtb	r3, r3
 8004330:	4619      	mov	r1, r3
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f007 fc9c 	bl	800bc70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3720      	adds	r7, #32
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	4f54300a 	.word	0x4f54300a
 8004348:	4f54310a 	.word	0x4f54310a

0800434c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	333c      	adds	r3, #60	@ 0x3c
 8004364:	3304      	adds	r3, #4
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4a15      	ldr	r2, [pc, #84]	@ (80043d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d90e      	bls.n	80043a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004388:	2b00      	cmp	r3, #0
 800438a:	d009      	beq.n	80043a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004398:	461a      	mov	r2, r3
 800439a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800439e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f007 fc53 	bl	800bc4c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	4a0a      	ldr	r2, [pc, #40]	@ (80043d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d90c      	bls.n	80043c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	799b      	ldrb	r3, [r3, #6]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d108      	bne.n	80043c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043c0:	461a      	mov	r2, r3
 80043c2:	2101      	movs	r1, #1
 80043c4:	f003 fe14 	bl	8007ff0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	4f54300a 	.word	0x4f54300a

080043d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	70fb      	strb	r3, [r7, #3]
 80043e4:	4613      	mov	r3, r2
 80043e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d107      	bne.n	8004406 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80043f6:	883b      	ldrh	r3, [r7, #0]
 80043f8:	0419      	lsls	r1, r3, #16
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	430a      	orrs	r2, r1
 8004402:	629a      	str	r2, [r3, #40]	@ 0x28
 8004404:	e028      	b.n	8004458 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800440c:	0c1b      	lsrs	r3, r3, #16
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	4413      	add	r3, r2
 8004412:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004414:	2300      	movs	r3, #0
 8004416:	73fb      	strb	r3, [r7, #15]
 8004418:	e00d      	b.n	8004436 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	3340      	adds	r3, #64	@ 0x40
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	0c1b      	lsrs	r3, r3, #16
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	4413      	add	r3, r2
 800442e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004430:	7bfb      	ldrb	r3, [r7, #15]
 8004432:	3301      	adds	r3, #1
 8004434:	73fb      	strb	r3, [r7, #15]
 8004436:	7bfa      	ldrb	r2, [r7, #15]
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	3b01      	subs	r3, #1
 800443c:	429a      	cmp	r2, r3
 800443e:	d3ec      	bcc.n	800441a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004440:	883b      	ldrh	r3, [r7, #0]
 8004442:	0418      	lsls	r0, r3, #16
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6819      	ldr	r1, [r3, #0]
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	3b01      	subs	r3, #1
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	4302      	orrs	r2, r0
 8004450:	3340      	adds	r3, #64	@ 0x40
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	460b      	mov	r3, r1
 8004470:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	887a      	ldrh	r2, [r7, #2]
 8004478:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e267      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d075      	beq.n	80045aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044be:	4b88      	ldr	r3, [pc, #544]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f003 030c 	and.w	r3, r3, #12
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d00c      	beq.n	80044e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ca:	4b85      	ldr	r3, [pc, #532]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d112      	bne.n	80044fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044d6:	4b82      	ldr	r3, [pc, #520]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044e2:	d10b      	bne.n	80044fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e4:	4b7e      	ldr	r3, [pc, #504]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d05b      	beq.n	80045a8 <HAL_RCC_OscConfig+0x108>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d157      	bne.n	80045a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e242      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004504:	d106      	bne.n	8004514 <HAL_RCC_OscConfig+0x74>
 8004506:	4b76      	ldr	r3, [pc, #472]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a75      	ldr	r2, [pc, #468]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 800450c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	e01d      	b.n	8004550 <HAL_RCC_OscConfig+0xb0>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800451c:	d10c      	bne.n	8004538 <HAL_RCC_OscConfig+0x98>
 800451e:	4b70      	ldr	r3, [pc, #448]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a6f      	ldr	r2, [pc, #444]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004524:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	4b6d      	ldr	r3, [pc, #436]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a6c      	ldr	r2, [pc, #432]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	e00b      	b.n	8004550 <HAL_RCC_OscConfig+0xb0>
 8004538:	4b69      	ldr	r3, [pc, #420]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a68      	ldr	r2, [pc, #416]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 800453e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	4b66      	ldr	r3, [pc, #408]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a65      	ldr	r2, [pc, #404]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 800454a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800454e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d013      	beq.n	8004580 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004558:	f7fd fe20 	bl	800219c <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004560:	f7fd fe1c 	bl	800219c <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b64      	cmp	r3, #100	@ 0x64
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e207      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004572:	4b5b      	ldr	r3, [pc, #364]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f0      	beq.n	8004560 <HAL_RCC_OscConfig+0xc0>
 800457e:	e014      	b.n	80045aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004580:	f7fd fe0c 	bl	800219c <HAL_GetTick>
 8004584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004588:	f7fd fe08 	bl	800219c <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b64      	cmp	r3, #100	@ 0x64
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e1f3      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800459a:	4b51      	ldr	r3, [pc, #324]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d1f0      	bne.n	8004588 <HAL_RCC_OscConfig+0xe8>
 80045a6:	e000      	b.n	80045aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d063      	beq.n	800467e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045b6:	4b4a      	ldr	r3, [pc, #296]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 030c 	and.w	r3, r3, #12
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00b      	beq.n	80045da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045c2:	4b47      	ldr	r3, [pc, #284]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d11c      	bne.n	8004608 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ce:	4b44      	ldr	r3, [pc, #272]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d116      	bne.n	8004608 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045da:	4b41      	ldr	r3, [pc, #260]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d005      	beq.n	80045f2 <HAL_RCC_OscConfig+0x152>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d001      	beq.n	80045f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e1c7      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f2:	4b3b      	ldr	r3, [pc, #236]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	4937      	ldr	r1, [pc, #220]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004602:	4313      	orrs	r3, r2
 8004604:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004606:	e03a      	b.n	800467e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d020      	beq.n	8004652 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004610:	4b34      	ldr	r3, [pc, #208]	@ (80046e4 <HAL_RCC_OscConfig+0x244>)
 8004612:	2201      	movs	r2, #1
 8004614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004616:	f7fd fdc1 	bl	800219c <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800461e:	f7fd fdbd 	bl	800219c <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e1a8      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004630:	4b2b      	ldr	r3, [pc, #172]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0f0      	beq.n	800461e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800463c:	4b28      	ldr	r3, [pc, #160]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	4925      	ldr	r1, [pc, #148]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 800464c:	4313      	orrs	r3, r2
 800464e:	600b      	str	r3, [r1, #0]
 8004650:	e015      	b.n	800467e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004652:	4b24      	ldr	r3, [pc, #144]	@ (80046e4 <HAL_RCC_OscConfig+0x244>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004658:	f7fd fda0 	bl	800219c <HAL_GetTick>
 800465c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800465e:	e008      	b.n	8004672 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004660:	f7fd fd9c 	bl	800219c <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	2b02      	cmp	r3, #2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e187      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004672:	4b1b      	ldr	r3, [pc, #108]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f0      	bne.n	8004660 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0308 	and.w	r3, r3, #8
 8004686:	2b00      	cmp	r3, #0
 8004688:	d036      	beq.n	80046f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d016      	beq.n	80046c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004692:	4b15      	ldr	r3, [pc, #84]	@ (80046e8 <HAL_RCC_OscConfig+0x248>)
 8004694:	2201      	movs	r2, #1
 8004696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004698:	f7fd fd80 	bl	800219c <HAL_GetTick>
 800469c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a0:	f7fd fd7c 	bl	800219c <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e167      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046b2:	4b0b      	ldr	r3, [pc, #44]	@ (80046e0 <HAL_RCC_OscConfig+0x240>)
 80046b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCC_OscConfig+0x200>
 80046be:	e01b      	b.n	80046f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046c0:	4b09      	ldr	r3, [pc, #36]	@ (80046e8 <HAL_RCC_OscConfig+0x248>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c6:	f7fd fd69 	bl	800219c <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046cc:	e00e      	b.n	80046ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ce:	f7fd fd65 	bl	800219c <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d907      	bls.n	80046ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e150      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
 80046e0:	40023800 	.word	0x40023800
 80046e4:	42470000 	.word	0x42470000
 80046e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ec:	4b88      	ldr	r3, [pc, #544]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 80046ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1ea      	bne.n	80046ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	f000 8097 	beq.w	8004834 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004706:	2300      	movs	r3, #0
 8004708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800470a:	4b81      	ldr	r3, [pc, #516]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d10f      	bne.n	8004736 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004716:	2300      	movs	r3, #0
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	4b7d      	ldr	r3, [pc, #500]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 800471c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471e:	4a7c      	ldr	r2, [pc, #496]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 8004720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004724:	6413      	str	r3, [r2, #64]	@ 0x40
 8004726:	4b7a      	ldr	r3, [pc, #488]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800472e:	60bb      	str	r3, [r7, #8]
 8004730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004732:	2301      	movs	r3, #1
 8004734:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004736:	4b77      	ldr	r3, [pc, #476]	@ (8004914 <HAL_RCC_OscConfig+0x474>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800473e:	2b00      	cmp	r3, #0
 8004740:	d118      	bne.n	8004774 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004742:	4b74      	ldr	r3, [pc, #464]	@ (8004914 <HAL_RCC_OscConfig+0x474>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a73      	ldr	r2, [pc, #460]	@ (8004914 <HAL_RCC_OscConfig+0x474>)
 8004748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800474c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800474e:	f7fd fd25 	bl	800219c <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004756:	f7fd fd21 	bl	800219c <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e10c      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004768:	4b6a      	ldr	r3, [pc, #424]	@ (8004914 <HAL_RCC_OscConfig+0x474>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0f0      	beq.n	8004756 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d106      	bne.n	800478a <HAL_RCC_OscConfig+0x2ea>
 800477c:	4b64      	ldr	r3, [pc, #400]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 800477e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004780:	4a63      	ldr	r2, [pc, #396]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	6713      	str	r3, [r2, #112]	@ 0x70
 8004788:	e01c      	b.n	80047c4 <HAL_RCC_OscConfig+0x324>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	2b05      	cmp	r3, #5
 8004790:	d10c      	bne.n	80047ac <HAL_RCC_OscConfig+0x30c>
 8004792:	4b5f      	ldr	r3, [pc, #380]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 8004794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004796:	4a5e      	ldr	r2, [pc, #376]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 8004798:	f043 0304 	orr.w	r3, r3, #4
 800479c:	6713      	str	r3, [r2, #112]	@ 0x70
 800479e:	4b5c      	ldr	r3, [pc, #368]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 80047a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a2:	4a5b      	ldr	r2, [pc, #364]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 80047a4:	f043 0301 	orr.w	r3, r3, #1
 80047a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80047aa:	e00b      	b.n	80047c4 <HAL_RCC_OscConfig+0x324>
 80047ac:	4b58      	ldr	r3, [pc, #352]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 80047ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b0:	4a57      	ldr	r2, [pc, #348]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 80047b2:	f023 0301 	bic.w	r3, r3, #1
 80047b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047b8:	4b55      	ldr	r3, [pc, #340]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 80047ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047bc:	4a54      	ldr	r2, [pc, #336]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 80047be:	f023 0304 	bic.w	r3, r3, #4
 80047c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d015      	beq.n	80047f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047cc:	f7fd fce6 	bl	800219c <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d2:	e00a      	b.n	80047ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d4:	f7fd fce2 	bl	800219c <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e0cb      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ea:	4b49      	ldr	r3, [pc, #292]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 80047ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0ee      	beq.n	80047d4 <HAL_RCC_OscConfig+0x334>
 80047f6:	e014      	b.n	8004822 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f8:	f7fd fcd0 	bl	800219c <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047fe:	e00a      	b.n	8004816 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004800:	f7fd fccc 	bl	800219c <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800480e:	4293      	cmp	r3, r2
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e0b5      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004816:	4b3e      	ldr	r3, [pc, #248]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 8004818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1ee      	bne.n	8004800 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004822:	7dfb      	ldrb	r3, [r7, #23]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d105      	bne.n	8004834 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004828:	4b39      	ldr	r3, [pc, #228]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 800482a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482c:	4a38      	ldr	r2, [pc, #224]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 800482e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004832:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80a1 	beq.w	8004980 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800483e:	4b34      	ldr	r3, [pc, #208]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
 8004846:	2b08      	cmp	r3, #8
 8004848:	d05c      	beq.n	8004904 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d141      	bne.n	80048d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004852:	4b31      	ldr	r3, [pc, #196]	@ (8004918 <HAL_RCC_OscConfig+0x478>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004858:	f7fd fca0 	bl	800219c <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004860:	f7fd fc9c 	bl	800219c <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e087      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004872:	4b27      	ldr	r3, [pc, #156]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69da      	ldr	r2, [r3, #28]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	431a      	orrs	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488c:	019b      	lsls	r3, r3, #6
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	3b01      	subs	r3, #1
 8004898:	041b      	lsls	r3, r3, #16
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a0:	061b      	lsls	r3, r3, #24
 80048a2:	491b      	ldr	r1, [pc, #108]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004918 <HAL_RCC_OscConfig+0x478>)
 80048aa:	2201      	movs	r2, #1
 80048ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ae:	f7fd fc75 	bl	800219c <HAL_GetTick>
 80048b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b4:	e008      	b.n	80048c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b6:	f7fd fc71 	bl	800219c <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e05c      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c8:	4b11      	ldr	r3, [pc, #68]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0f0      	beq.n	80048b6 <HAL_RCC_OscConfig+0x416>
 80048d4:	e054      	b.n	8004980 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d6:	4b10      	ldr	r3, [pc, #64]	@ (8004918 <HAL_RCC_OscConfig+0x478>)
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048dc:	f7fd fc5e 	bl	800219c <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e4:	f7fd fc5a 	bl	800219c <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e045      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f6:	4b06      	ldr	r3, [pc, #24]	@ (8004910 <HAL_RCC_OscConfig+0x470>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0x444>
 8004902:	e03d      	b.n	8004980 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d107      	bne.n	800491c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e038      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
 8004910:	40023800 	.word	0x40023800
 8004914:	40007000 	.word	0x40007000
 8004918:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800491c:	4b1b      	ldr	r3, [pc, #108]	@ (800498c <HAL_RCC_OscConfig+0x4ec>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d028      	beq.n	800497c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004934:	429a      	cmp	r2, r3
 8004936:	d121      	bne.n	800497c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004942:	429a      	cmp	r2, r3
 8004944:	d11a      	bne.n	800497c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800494c:	4013      	ands	r3, r2
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004952:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004954:	4293      	cmp	r3, r2
 8004956:	d111      	bne.n	800497c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004962:	085b      	lsrs	r3, r3, #1
 8004964:	3b01      	subs	r3, #1
 8004966:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004968:	429a      	cmp	r2, r3
 800496a:	d107      	bne.n	800497c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004976:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004978:	429a      	cmp	r2, r3
 800497a:	d001      	beq.n	8004980 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3718      	adds	r7, #24
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40023800 	.word	0x40023800

08004990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d101      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e0cc      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049a4:	4b68      	ldr	r3, [pc, #416]	@ (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d90c      	bls.n	80049cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b2:	4b65      	ldr	r3, [pc, #404]	@ (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ba:	4b63      	ldr	r3, [pc, #396]	@ (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d001      	beq.n	80049cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0b8      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d020      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049e4:	4b59      	ldr	r3, [pc, #356]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	4a58      	ldr	r2, [pc, #352]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d005      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049fc:	4b53      	ldr	r3, [pc, #332]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	4a52      	ldr	r2, [pc, #328]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a08:	4b50      	ldr	r3, [pc, #320]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	494d      	ldr	r1, [pc, #308]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d044      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d107      	bne.n	8004a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a2e:	4b47      	ldr	r3, [pc, #284]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d119      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e07f      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d003      	beq.n	8004a4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a4a:	2b03      	cmp	r3, #3
 8004a4c:	d107      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e06f      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e067      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a6e:	4b37      	ldr	r3, [pc, #220]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	f023 0203 	bic.w	r2, r3, #3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	4934      	ldr	r1, [pc, #208]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a80:	f7fd fb8c 	bl	800219c <HAL_GetTick>
 8004a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a86:	e00a      	b.n	8004a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a88:	f7fd fb88 	bl	800219c <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e04f      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 020c 	and.w	r2, r3, #12
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d1eb      	bne.n	8004a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ab0:	4b25      	ldr	r3, [pc, #148]	@ (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d20c      	bcs.n	8004ad8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004abe:	4b22      	ldr	r3, [pc, #136]	@ (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac6:	4b20      	ldr	r3, [pc, #128]	@ (8004b48 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d001      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e032      	b.n	8004b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ae4:	4b19      	ldr	r3, [pc, #100]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4916      	ldr	r1, [pc, #88]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b02:	4b12      	ldr	r3, [pc, #72]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	490e      	ldr	r1, [pc, #56]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b16:	f000 f821 	bl	8004b5c <HAL_RCC_GetSysClockFreq>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b4c <HAL_RCC_ClockConfig+0x1bc>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	091b      	lsrs	r3, r3, #4
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	490a      	ldr	r1, [pc, #40]	@ (8004b50 <HAL_RCC_ClockConfig+0x1c0>)
 8004b28:	5ccb      	ldrb	r3, [r1, r3]
 8004b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b2e:	4a09      	ldr	r2, [pc, #36]	@ (8004b54 <HAL_RCC_ClockConfig+0x1c4>)
 8004b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b32:	4b09      	ldr	r3, [pc, #36]	@ (8004b58 <HAL_RCC_ClockConfig+0x1c8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fd faec 	bl	8002114 <HAL_InitTick>

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40023c00 	.word	0x40023c00
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	0800c2e8 	.word	0x0800c2e8
 8004b54:	2000000c 	.word	0x2000000c
 8004b58:	20000010 	.word	0x20000010

08004b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b60:	b094      	sub	sp, #80	@ 0x50
 8004b62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b74:	4b79      	ldr	r3, [pc, #484]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 030c 	and.w	r3, r3, #12
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d00d      	beq.n	8004b9c <HAL_RCC_GetSysClockFreq+0x40>
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	f200 80e1 	bhi.w	8004d48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <HAL_RCC_GetSysClockFreq+0x34>
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d003      	beq.n	8004b96 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b8e:	e0db      	b.n	8004d48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b90:	4b73      	ldr	r3, [pc, #460]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b94:	e0db      	b.n	8004d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b96:	4b73      	ldr	r3, [pc, #460]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b9a:	e0d8      	b.n	8004d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b9c:	4b6f      	ldr	r3, [pc, #444]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ba4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d063      	beq.n	8004c7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	099b      	lsrs	r3, r3, #6
 8004bb8:	2200      	movs	r2, #0
 8004bba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bce:	4622      	mov	r2, r4
 8004bd0:	462b      	mov	r3, r5
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f04f 0100 	mov.w	r1, #0
 8004bda:	0159      	lsls	r1, r3, #5
 8004bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004be0:	0150      	lsls	r0, r2, #5
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4621      	mov	r1, r4
 8004be8:	1a51      	subs	r1, r2, r1
 8004bea:	6139      	str	r1, [r7, #16]
 8004bec:	4629      	mov	r1, r5
 8004bee:	eb63 0301 	sbc.w	r3, r3, r1
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	f04f 0200 	mov.w	r2, #0
 8004bf8:	f04f 0300 	mov.w	r3, #0
 8004bfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c00:	4659      	mov	r1, fp
 8004c02:	018b      	lsls	r3, r1, #6
 8004c04:	4651      	mov	r1, sl
 8004c06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c0a:	4651      	mov	r1, sl
 8004c0c:	018a      	lsls	r2, r1, #6
 8004c0e:	4651      	mov	r1, sl
 8004c10:	ebb2 0801 	subs.w	r8, r2, r1
 8004c14:	4659      	mov	r1, fp
 8004c16:	eb63 0901 	sbc.w	r9, r3, r1
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c2e:	4690      	mov	r8, r2
 8004c30:	4699      	mov	r9, r3
 8004c32:	4623      	mov	r3, r4
 8004c34:	eb18 0303 	adds.w	r3, r8, r3
 8004c38:	60bb      	str	r3, [r7, #8]
 8004c3a:	462b      	mov	r3, r5
 8004c3c:	eb49 0303 	adc.w	r3, r9, r3
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	f04f 0200 	mov.w	r2, #0
 8004c46:	f04f 0300 	mov.w	r3, #0
 8004c4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c4e:	4629      	mov	r1, r5
 8004c50:	024b      	lsls	r3, r1, #9
 8004c52:	4621      	mov	r1, r4
 8004c54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c58:	4621      	mov	r1, r4
 8004c5a:	024a      	lsls	r2, r1, #9
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	4619      	mov	r1, r3
 8004c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c62:	2200      	movs	r2, #0
 8004c64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c6c:	f7fb faac 	bl	80001c8 <__aeabi_uldivmod>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4613      	mov	r3, r2
 8004c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c78:	e058      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c7a:	4b38      	ldr	r3, [pc, #224]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	099b      	lsrs	r3, r3, #6
 8004c80:	2200      	movs	r2, #0
 8004c82:	4618      	mov	r0, r3
 8004c84:	4611      	mov	r1, r2
 8004c86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c8a:	623b      	str	r3, [r7, #32]
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c94:	4642      	mov	r2, r8
 8004c96:	464b      	mov	r3, r9
 8004c98:	f04f 0000 	mov.w	r0, #0
 8004c9c:	f04f 0100 	mov.w	r1, #0
 8004ca0:	0159      	lsls	r1, r3, #5
 8004ca2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ca6:	0150      	lsls	r0, r2, #5
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4641      	mov	r1, r8
 8004cae:	ebb2 0a01 	subs.w	sl, r2, r1
 8004cb2:	4649      	mov	r1, r9
 8004cb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ccc:	ebb2 040a 	subs.w	r4, r2, sl
 8004cd0:	eb63 050b 	sbc.w	r5, r3, fp
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	00eb      	lsls	r3, r5, #3
 8004cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ce2:	00e2      	lsls	r2, r4, #3
 8004ce4:	4614      	mov	r4, r2
 8004ce6:	461d      	mov	r5, r3
 8004ce8:	4643      	mov	r3, r8
 8004cea:	18e3      	adds	r3, r4, r3
 8004cec:	603b      	str	r3, [r7, #0]
 8004cee:	464b      	mov	r3, r9
 8004cf0:	eb45 0303 	adc.w	r3, r5, r3
 8004cf4:	607b      	str	r3, [r7, #4]
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d02:	4629      	mov	r1, r5
 8004d04:	028b      	lsls	r3, r1, #10
 8004d06:	4621      	mov	r1, r4
 8004d08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	028a      	lsls	r2, r1, #10
 8004d10:	4610      	mov	r0, r2
 8004d12:	4619      	mov	r1, r3
 8004d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d16:	2200      	movs	r2, #0
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	61fa      	str	r2, [r7, #28]
 8004d1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d20:	f7fb fa52 	bl	80001c8 <__aeabi_uldivmod>
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	4613      	mov	r3, r2
 8004d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	0c1b      	lsrs	r3, r3, #16
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	3301      	adds	r3, #1
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d46:	e002      	b.n	8004d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d48:	4b05      	ldr	r3, [pc, #20]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3750      	adds	r7, #80	@ 0x50
 8004d54:	46bd      	mov	sp, r7
 8004d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	00f42400 	.word	0x00f42400
 8004d64:	007a1200 	.word	0x007a1200

08004d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d6c:	4b03      	ldr	r3, [pc, #12]	@ (8004d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	2000000c 	.word	0x2000000c

08004d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d84:	f7ff fff0 	bl	8004d68 <HAL_RCC_GetHCLKFreq>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	4b05      	ldr	r3, [pc, #20]	@ (8004da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	0a9b      	lsrs	r3, r3, #10
 8004d90:	f003 0307 	and.w	r3, r3, #7
 8004d94:	4903      	ldr	r1, [pc, #12]	@ (8004da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d96:	5ccb      	ldrb	r3, [r1, r3]
 8004d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40023800 	.word	0x40023800
 8004da4:	0800c2f8 	.word	0x0800c2f8

08004da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004dac:	f7ff ffdc 	bl	8004d68 <HAL_RCC_GetHCLKFreq>
 8004db0:	4602      	mov	r2, r0
 8004db2:	4b05      	ldr	r3, [pc, #20]	@ (8004dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	0b5b      	lsrs	r3, r3, #13
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	4903      	ldr	r1, [pc, #12]	@ (8004dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dbe:	5ccb      	ldrb	r3, [r1, r3]
 8004dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	0800c2f8 	.word	0x0800c2f8

08004dd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e07b      	b.n	8004eda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d108      	bne.n	8004dfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004df2:	d009      	beq.n	8004e08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	61da      	str	r2, [r3, #28]
 8004dfa:	e005      	b.n	8004e08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fc fcd6 	bl	80017d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e8c:	ea42 0103 	orr.w	r1, r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e94:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	0c1b      	lsrs	r3, r3, #16
 8004ea6:	f003 0104 	and.w	r1, r3, #4
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eae:	f003 0210 	and.w	r2, r3, #16
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ec8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e041      	b.n	8004f78 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d106      	bne.n	8004f0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7fc fe79 	bl	8001c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2202      	movs	r2, #2
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4610      	mov	r0, r2
 8004f22:	f000 fb3b 	bl	800559c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e041      	b.n	8005016 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d106      	bne.n	8004fac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7fc fdf2 	bl	8001b90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3304      	adds	r3, #4
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	f000 faec 	bl	800559c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d109      	bne.n	8005044 <HAL_TIM_PWM_Start+0x24>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b01      	cmp	r3, #1
 800503a:	bf14      	ite	ne
 800503c:	2301      	movne	r3, #1
 800503e:	2300      	moveq	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	e022      	b.n	800508a <HAL_TIM_PWM_Start+0x6a>
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2b04      	cmp	r3, #4
 8005048:	d109      	bne.n	800505e <HAL_TIM_PWM_Start+0x3e>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b01      	cmp	r3, #1
 8005054:	bf14      	ite	ne
 8005056:	2301      	movne	r3, #1
 8005058:	2300      	moveq	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	e015      	b.n	800508a <HAL_TIM_PWM_Start+0x6a>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b08      	cmp	r3, #8
 8005062:	d109      	bne.n	8005078 <HAL_TIM_PWM_Start+0x58>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b01      	cmp	r3, #1
 800506e:	bf14      	ite	ne
 8005070:	2301      	movne	r3, #1
 8005072:	2300      	moveq	r3, #0
 8005074:	b2db      	uxtb	r3, r3
 8005076:	e008      	b.n	800508a <HAL_TIM_PWM_Start+0x6a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b01      	cmp	r3, #1
 8005082:	bf14      	ite	ne
 8005084:	2301      	movne	r3, #1
 8005086:	2300      	moveq	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e07c      	b.n	800518c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d104      	bne.n	80050a2 <HAL_TIM_PWM_Start+0x82>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050a0:	e013      	b.n	80050ca <HAL_TIM_PWM_Start+0xaa>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d104      	bne.n	80050b2 <HAL_TIM_PWM_Start+0x92>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050b0:	e00b      	b.n	80050ca <HAL_TIM_PWM_Start+0xaa>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d104      	bne.n	80050c2 <HAL_TIM_PWM_Start+0xa2>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2202      	movs	r2, #2
 80050bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050c0:	e003      	b.n	80050ca <HAL_TIM_PWM_Start+0xaa>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2202      	movs	r2, #2
 80050c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2201      	movs	r2, #1
 80050d0:	6839      	ldr	r1, [r7, #0]
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 fcbe 	bl	8005a54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a2d      	ldr	r2, [pc, #180]	@ (8005194 <HAL_TIM_PWM_Start+0x174>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d004      	beq.n	80050ec <HAL_TIM_PWM_Start+0xcc>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a2c      	ldr	r2, [pc, #176]	@ (8005198 <HAL_TIM_PWM_Start+0x178>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d101      	bne.n	80050f0 <HAL_TIM_PWM_Start+0xd0>
 80050ec:	2301      	movs	r3, #1
 80050ee:	e000      	b.n	80050f2 <HAL_TIM_PWM_Start+0xd2>
 80050f0:	2300      	movs	r3, #0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d007      	beq.n	8005106 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005104:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a22      	ldr	r2, [pc, #136]	@ (8005194 <HAL_TIM_PWM_Start+0x174>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d022      	beq.n	8005156 <HAL_TIM_PWM_Start+0x136>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005118:	d01d      	beq.n	8005156 <HAL_TIM_PWM_Start+0x136>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1f      	ldr	r2, [pc, #124]	@ (800519c <HAL_TIM_PWM_Start+0x17c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d018      	beq.n	8005156 <HAL_TIM_PWM_Start+0x136>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1d      	ldr	r2, [pc, #116]	@ (80051a0 <HAL_TIM_PWM_Start+0x180>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d013      	beq.n	8005156 <HAL_TIM_PWM_Start+0x136>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a1c      	ldr	r2, [pc, #112]	@ (80051a4 <HAL_TIM_PWM_Start+0x184>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00e      	beq.n	8005156 <HAL_TIM_PWM_Start+0x136>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a16      	ldr	r2, [pc, #88]	@ (8005198 <HAL_TIM_PWM_Start+0x178>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d009      	beq.n	8005156 <HAL_TIM_PWM_Start+0x136>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a18      	ldr	r2, [pc, #96]	@ (80051a8 <HAL_TIM_PWM_Start+0x188>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d004      	beq.n	8005156 <HAL_TIM_PWM_Start+0x136>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a16      	ldr	r2, [pc, #88]	@ (80051ac <HAL_TIM_PWM_Start+0x18c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d111      	bne.n	800517a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2b06      	cmp	r3, #6
 8005166:	d010      	beq.n	800518a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005178:	e007      	b.n	800518a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0201 	orr.w	r2, r2, #1
 8005188:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	40010000 	.word	0x40010000
 8005198:	40010400 	.word	0x40010400
 800519c:	40000400 	.word	0x40000400
 80051a0:	40000800 	.word	0x40000800
 80051a4:	40000c00 	.word	0x40000c00
 80051a8:	40014000 	.word	0x40014000
 80051ac:	40001800 	.word	0x40001800

080051b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e097      	b.n	80052f4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d106      	bne.n	80051de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7fc fb63 	bl	80018a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2202      	movs	r2, #2
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	6812      	ldr	r2, [r2, #0]
 80051f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051f4:	f023 0307 	bic.w	r3, r3, #7
 80051f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3304      	adds	r3, #4
 8005202:	4619      	mov	r1, r3
 8005204:	4610      	mov	r0, r2
 8005206:	f000 f9c9 	bl	800559c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005232:	f023 0303 	bic.w	r3, r3, #3
 8005236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	021b      	lsls	r3, r3, #8
 8005242:	4313      	orrs	r3, r2
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005250:	f023 030c 	bic.w	r3, r3, #12
 8005254:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800525c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005260:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68da      	ldr	r2, [r3, #12]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	021b      	lsls	r3, r3, #8
 800526c:	4313      	orrs	r3, r2
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	011a      	lsls	r2, r3, #4
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	031b      	lsls	r3, r3, #12
 8005280:	4313      	orrs	r3, r2
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800528e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005296:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685a      	ldr	r2, [r3, #4]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	011b      	lsls	r3, r3, #4
 80052a2:	4313      	orrs	r3, r2
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800530c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005314:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800531c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005324:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d110      	bne.n	800534e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800532c:	7bfb      	ldrb	r3, [r7, #15]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d102      	bne.n	8005338 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005332:	7b7b      	ldrb	r3, [r7, #13]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d001      	beq.n	800533c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e069      	b.n	8005410 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800534c:	e031      	b.n	80053b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b04      	cmp	r3, #4
 8005352:	d110      	bne.n	8005376 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005354:	7bbb      	ldrb	r3, [r7, #14]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d102      	bne.n	8005360 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800535a:	7b3b      	ldrb	r3, [r7, #12]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d001      	beq.n	8005364 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e055      	b.n	8005410 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005374:	e01d      	b.n	80053b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005376:	7bfb      	ldrb	r3, [r7, #15]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d108      	bne.n	800538e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800537c:	7bbb      	ldrb	r3, [r7, #14]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d105      	bne.n	800538e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005382:	7b7b      	ldrb	r3, [r7, #13]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d102      	bne.n	800538e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005388:	7b3b      	ldrb	r3, [r7, #12]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d001      	beq.n	8005392 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e03e      	b.n	8005410 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2202      	movs	r2, #2
 8005396:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2202      	movs	r2, #2
 800539e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2202      	movs	r2, #2
 80053a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2202      	movs	r2, #2
 80053ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <HAL_TIM_Encoder_Start+0xc4>
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d008      	beq.n	80053d0 <HAL_TIM_Encoder_Start+0xd4>
 80053be:	e00f      	b.n	80053e0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2201      	movs	r2, #1
 80053c6:	2100      	movs	r1, #0
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 fb43 	bl	8005a54 <TIM_CCxChannelCmd>
      break;
 80053ce:	e016      	b.n	80053fe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2201      	movs	r2, #1
 80053d6:	2104      	movs	r1, #4
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fb3b 	bl	8005a54 <TIM_CCxChannelCmd>
      break;
 80053de:	e00e      	b.n	80053fe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2201      	movs	r2, #1
 80053e6:	2100      	movs	r1, #0
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fb33 	bl	8005a54 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2201      	movs	r2, #1
 80053f4:	2104      	movs	r1, #4
 80053f6:	4618      	mov	r0, r3
 80053f8:	f000 fb2c 	bl	8005a54 <TIM_CCxChannelCmd>
      break;
 80053fc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f042 0201 	orr.w	r2, r2, #1
 800540c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800542e:	2b01      	cmp	r3, #1
 8005430:	d101      	bne.n	8005436 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005432:	2302      	movs	r3, #2
 8005434:	e0ae      	b.n	8005594 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b0c      	cmp	r3, #12
 8005442:	f200 809f 	bhi.w	8005584 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005446:	a201      	add	r2, pc, #4	@ (adr r2, 800544c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544c:	08005481 	.word	0x08005481
 8005450:	08005585 	.word	0x08005585
 8005454:	08005585 	.word	0x08005585
 8005458:	08005585 	.word	0x08005585
 800545c:	080054c1 	.word	0x080054c1
 8005460:	08005585 	.word	0x08005585
 8005464:	08005585 	.word	0x08005585
 8005468:	08005585 	.word	0x08005585
 800546c:	08005503 	.word	0x08005503
 8005470:	08005585 	.word	0x08005585
 8005474:	08005585 	.word	0x08005585
 8005478:	08005585 	.word	0x08005585
 800547c:	08005543 	.word	0x08005543
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68b9      	ldr	r1, [r7, #8]
 8005486:	4618      	mov	r0, r3
 8005488:	f000 f934 	bl	80056f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0208 	orr.w	r2, r2, #8
 800549a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0204 	bic.w	r2, r2, #4
 80054aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6999      	ldr	r1, [r3, #24]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	691a      	ldr	r2, [r3, #16]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	619a      	str	r2, [r3, #24]
      break;
 80054be:	e064      	b.n	800558a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68b9      	ldr	r1, [r7, #8]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 f984 	bl	80057d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6999      	ldr	r1, [r3, #24]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	021a      	lsls	r2, r3, #8
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	619a      	str	r2, [r3, #24]
      break;
 8005500:	e043      	b.n	800558a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68b9      	ldr	r1, [r7, #8]
 8005508:	4618      	mov	r0, r3
 800550a:	f000 f9d9 	bl	80058c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69da      	ldr	r2, [r3, #28]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0208 	orr.w	r2, r2, #8
 800551c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69da      	ldr	r2, [r3, #28]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0204 	bic.w	r2, r2, #4
 800552c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69d9      	ldr	r1, [r3, #28]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	61da      	str	r2, [r3, #28]
      break;
 8005540:	e023      	b.n	800558a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	4618      	mov	r0, r3
 800554a:	f000 fa2d 	bl	80059a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69da      	ldr	r2, [r3, #28]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800555c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69da      	ldr	r2, [r3, #28]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800556c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	69d9      	ldr	r1, [r3, #28]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	021a      	lsls	r2, r3, #8
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	61da      	str	r2, [r3, #28]
      break;
 8005582:	e002      	b.n	800558a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	75fb      	strb	r3, [r7, #23]
      break;
 8005588:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005592:	7dfb      	ldrb	r3, [r7, #23]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a46      	ldr	r2, [pc, #280]	@ (80056c8 <TIM_Base_SetConfig+0x12c>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d013      	beq.n	80055dc <TIM_Base_SetConfig+0x40>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ba:	d00f      	beq.n	80055dc <TIM_Base_SetConfig+0x40>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a43      	ldr	r2, [pc, #268]	@ (80056cc <TIM_Base_SetConfig+0x130>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00b      	beq.n	80055dc <TIM_Base_SetConfig+0x40>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a42      	ldr	r2, [pc, #264]	@ (80056d0 <TIM_Base_SetConfig+0x134>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d007      	beq.n	80055dc <TIM_Base_SetConfig+0x40>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a41      	ldr	r2, [pc, #260]	@ (80056d4 <TIM_Base_SetConfig+0x138>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d003      	beq.n	80055dc <TIM_Base_SetConfig+0x40>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a40      	ldr	r2, [pc, #256]	@ (80056d8 <TIM_Base_SetConfig+0x13c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d108      	bne.n	80055ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a35      	ldr	r2, [pc, #212]	@ (80056c8 <TIM_Base_SetConfig+0x12c>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d02b      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055fc:	d027      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a32      	ldr	r2, [pc, #200]	@ (80056cc <TIM_Base_SetConfig+0x130>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d023      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a31      	ldr	r2, [pc, #196]	@ (80056d0 <TIM_Base_SetConfig+0x134>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d01f      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a30      	ldr	r2, [pc, #192]	@ (80056d4 <TIM_Base_SetConfig+0x138>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d01b      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a2f      	ldr	r2, [pc, #188]	@ (80056d8 <TIM_Base_SetConfig+0x13c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d017      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a2e      	ldr	r2, [pc, #184]	@ (80056dc <TIM_Base_SetConfig+0x140>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d013      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a2d      	ldr	r2, [pc, #180]	@ (80056e0 <TIM_Base_SetConfig+0x144>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00f      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a2c      	ldr	r2, [pc, #176]	@ (80056e4 <TIM_Base_SetConfig+0x148>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00b      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a2b      	ldr	r2, [pc, #172]	@ (80056e8 <TIM_Base_SetConfig+0x14c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d007      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a2a      	ldr	r2, [pc, #168]	@ (80056ec <TIM_Base_SetConfig+0x150>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d003      	beq.n	800564e <TIM_Base_SetConfig+0xb2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a29      	ldr	r2, [pc, #164]	@ (80056f0 <TIM_Base_SetConfig+0x154>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d108      	bne.n	8005660 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a10      	ldr	r2, [pc, #64]	@ (80056c8 <TIM_Base_SetConfig+0x12c>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d003      	beq.n	8005694 <TIM_Base_SetConfig+0xf8>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a12      	ldr	r2, [pc, #72]	@ (80056d8 <TIM_Base_SetConfig+0x13c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d103      	bne.n	800569c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f003 0301 	and.w	r3, r3, #1
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d105      	bne.n	80056ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f023 0201 	bic.w	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	611a      	str	r2, [r3, #16]
  }
}
 80056ba:	bf00      	nop
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	40010000 	.word	0x40010000
 80056cc:	40000400 	.word	0x40000400
 80056d0:	40000800 	.word	0x40000800
 80056d4:	40000c00 	.word	0x40000c00
 80056d8:	40010400 	.word	0x40010400
 80056dc:	40014000 	.word	0x40014000
 80056e0:	40014400 	.word	0x40014400
 80056e4:	40014800 	.word	0x40014800
 80056e8:	40001800 	.word	0x40001800
 80056ec:	40001c00 	.word	0x40001c00
 80056f0:	40002000 	.word	0x40002000

080056f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	f023 0201 	bic.w	r2, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0303 	bic.w	r3, r3, #3
 800572a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f023 0302 	bic.w	r3, r3, #2
 800573c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	697a      	ldr	r2, [r7, #20]
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a20      	ldr	r2, [pc, #128]	@ (80057cc <TIM_OC1_SetConfig+0xd8>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d003      	beq.n	8005758 <TIM_OC1_SetConfig+0x64>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a1f      	ldr	r2, [pc, #124]	@ (80057d0 <TIM_OC1_SetConfig+0xdc>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d10c      	bne.n	8005772 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f023 0308 	bic.w	r3, r3, #8
 800575e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	4313      	orrs	r3, r2
 8005768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f023 0304 	bic.w	r3, r3, #4
 8005770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	4a15      	ldr	r2, [pc, #84]	@ (80057cc <TIM_OC1_SetConfig+0xd8>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d003      	beq.n	8005782 <TIM_OC1_SetConfig+0x8e>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4a14      	ldr	r2, [pc, #80]	@ (80057d0 <TIM_OC1_SetConfig+0xdc>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d111      	bne.n	80057a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	695b      	ldr	r3, [r3, #20]
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	4313      	orrs	r3, r2
 800579a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	621a      	str	r2, [r3, #32]
}
 80057c0:	bf00      	nop
 80057c2:	371c      	adds	r7, #28
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	40010000 	.word	0x40010000
 80057d0:	40010400 	.word	0x40010400

080057d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b087      	sub	sp, #28
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	f023 0210 	bic.w	r2, r3, #16
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800580a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	021b      	lsls	r3, r3, #8
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4313      	orrs	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f023 0320 	bic.w	r3, r3, #32
 800581e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a22      	ldr	r2, [pc, #136]	@ (80058b8 <TIM_OC2_SetConfig+0xe4>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d003      	beq.n	800583c <TIM_OC2_SetConfig+0x68>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a21      	ldr	r2, [pc, #132]	@ (80058bc <TIM_OC2_SetConfig+0xe8>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d10d      	bne.n	8005858 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005842:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	4313      	orrs	r3, r2
 800584e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005856:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a17      	ldr	r2, [pc, #92]	@ (80058b8 <TIM_OC2_SetConfig+0xe4>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d003      	beq.n	8005868 <TIM_OC2_SetConfig+0x94>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a16      	ldr	r2, [pc, #88]	@ (80058bc <TIM_OC2_SetConfig+0xe8>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d113      	bne.n	8005890 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800586e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005876:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	4313      	orrs	r3, r2
 8005882:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	4313      	orrs	r3, r2
 800588e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	621a      	str	r2, [r3, #32]
}
 80058aa:	bf00      	nop
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	40010000 	.word	0x40010000
 80058bc:	40010400 	.word	0x40010400

080058c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 0303 	bic.w	r3, r3, #3
 80058f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	021b      	lsls	r3, r3, #8
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	4313      	orrs	r3, r2
 8005914:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a21      	ldr	r2, [pc, #132]	@ (80059a0 <TIM_OC3_SetConfig+0xe0>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d003      	beq.n	8005926 <TIM_OC3_SetConfig+0x66>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a20      	ldr	r2, [pc, #128]	@ (80059a4 <TIM_OC3_SetConfig+0xe4>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d10d      	bne.n	8005942 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800592c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	021b      	lsls	r3, r3, #8
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005940:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a16      	ldr	r2, [pc, #88]	@ (80059a0 <TIM_OC3_SetConfig+0xe0>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d003      	beq.n	8005952 <TIM_OC3_SetConfig+0x92>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a15      	ldr	r2, [pc, #84]	@ (80059a4 <TIM_OC3_SetConfig+0xe4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d113      	bne.n	800597a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	4313      	orrs	r3, r2
 800596c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	011b      	lsls	r3, r3, #4
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	4313      	orrs	r3, r2
 8005978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685a      	ldr	r2, [r3, #4]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	621a      	str	r2, [r3, #32]
}
 8005994:	bf00      	nop
 8005996:	371c      	adds	r7, #28
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr
 80059a0:	40010000 	.word	0x40010000
 80059a4:	40010400 	.word	0x40010400

080059a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	021b      	lsls	r3, r3, #8
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	031b      	lsls	r3, r3, #12
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a12      	ldr	r2, [pc, #72]	@ (8005a4c <TIM_OC4_SetConfig+0xa4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d003      	beq.n	8005a10 <TIM_OC4_SetConfig+0x68>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a11      	ldr	r2, [pc, #68]	@ (8005a50 <TIM_OC4_SetConfig+0xa8>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d109      	bne.n	8005a24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	019b      	lsls	r3, r3, #6
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	621a      	str	r2, [r3, #32]
}
 8005a3e:	bf00      	nop
 8005a40:	371c      	adds	r7, #28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40010000 	.word	0x40010000
 8005a50:	40010400 	.word	0x40010400

08005a54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f003 031f 	and.w	r3, r3, #31
 8005a66:	2201      	movs	r2, #1
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6a1a      	ldr	r2, [r3, #32]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	43db      	mvns	r3, r3
 8005a76:	401a      	ands	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6a1a      	ldr	r2, [r3, #32]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f003 031f 	and.w	r3, r3, #31
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	621a      	str	r2, [r3, #32]
}
 8005a92:	bf00      	nop
 8005a94:	371c      	adds	r7, #28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
	...

08005aa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d101      	bne.n	8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	e05a      	b.n	8005b6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a21      	ldr	r2, [pc, #132]	@ (8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d022      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b04:	d01d      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a1d      	ldr	r2, [pc, #116]	@ (8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d018      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a1b      	ldr	r2, [pc, #108]	@ (8005b84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d013      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8005b88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00e      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a18      	ldr	r2, [pc, #96]	@ (8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d009      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a17      	ldr	r2, [pc, #92]	@ (8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d004      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a15      	ldr	r2, [pc, #84]	@ (8005b94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d10c      	bne.n	8005b5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	40010000 	.word	0x40010000
 8005b80:	40000400 	.word	0x40000400
 8005b84:	40000800 	.word	0x40000800
 8005b88:	40000c00 	.word	0x40000c00
 8005b8c:	40010400 	.word	0x40010400
 8005b90:	40014000 	.word	0x40014000
 8005b94:	40001800 	.word	0x40001800

08005b98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d101      	bne.n	8005baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e042      	b.n	8005c30 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fc f980 	bl	8001ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2224      	movs	r2, #36	@ 0x24
 8005bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fcdb 	bl	8006598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691a      	ldr	r2, [r3, #16]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	695a      	ldr	r2, [r3, #20]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	4613      	mov	r3, r2
 8005c44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b20      	cmp	r3, #32
 8005c50:	d112      	bne.n	8005c78 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <HAL_UART_Receive_IT+0x26>
 8005c58:	88fb      	ldrh	r3, [r7, #6]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e00b      	b.n	8005c7a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c68:	88fb      	ldrh	r3, [r7, #6]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	68b9      	ldr	r1, [r7, #8]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 faba 	bl	80061e8 <UART_Start_Receive_IT>
 8005c74:	4603      	mov	r3, r0
 8005c76:	e000      	b.n	8005c7a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005c78:	2302      	movs	r3, #2
  }
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
	...

08005c84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b0ba      	sub	sp, #232	@ 0xe8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005caa:	2300      	movs	r3, #0
 8005cac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cba:	f003 030f 	and.w	r3, r3, #15
 8005cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005cc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10f      	bne.n	8005cea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cce:	f003 0320 	and.w	r3, r3, #32
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d009      	beq.n	8005cea <HAL_UART_IRQHandler+0x66>
 8005cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cda:	f003 0320 	and.w	r3, r3, #32
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fb99 	bl	800641a <UART_Receive_IT>
      return;
 8005ce8:	e25b      	b.n	80061a2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005cea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f000 80de 	beq.w	8005eb0 <HAL_UART_IRQHandler+0x22c>
 8005cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d106      	bne.n	8005d0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 80d1 	beq.w	8005eb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00b      	beq.n	8005d32 <HAL_UART_IRQHandler+0xae>
 8005d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d005      	beq.n	8005d32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d2a:	f043 0201 	orr.w	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d36:	f003 0304 	and.w	r3, r3, #4
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00b      	beq.n	8005d56 <HAL_UART_IRQHandler+0xd2>
 8005d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d005      	beq.n	8005d56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4e:	f043 0202 	orr.w	r2, r3, #2
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00b      	beq.n	8005d7a <HAL_UART_IRQHandler+0xf6>
 8005d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d005      	beq.n	8005d7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d72:	f043 0204 	orr.w	r2, r3, #4
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d7e:	f003 0308 	and.w	r3, r3, #8
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d011      	beq.n	8005daa <HAL_UART_IRQHandler+0x126>
 8005d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d105      	bne.n	8005d9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da2:	f043 0208 	orr.w	r2, r3, #8
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 81f2 	beq.w	8006198 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005db8:	f003 0320 	and.w	r3, r3, #32
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d008      	beq.n	8005dd2 <HAL_UART_IRQHandler+0x14e>
 8005dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dc4:	f003 0320 	and.w	r3, r3, #32
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fb24 	bl	800641a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ddc:	2b40      	cmp	r3, #64	@ 0x40
 8005dde:	bf0c      	ite	eq
 8005de0:	2301      	moveq	r3, #1
 8005de2:	2300      	movne	r3, #0
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dee:	f003 0308 	and.w	r3, r3, #8
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d103      	bne.n	8005dfe <HAL_UART_IRQHandler+0x17a>
 8005df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d04f      	beq.n	8005e9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fa2c 	bl	800625c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e0e:	2b40      	cmp	r3, #64	@ 0x40
 8005e10:	d141      	bne.n	8005e96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3314      	adds	r3, #20
 8005e18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	3314      	adds	r3, #20
 8005e3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005e3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005e42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005e4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005e4e:	e841 2300 	strex	r3, r2, [r1]
 8005e52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1d9      	bne.n	8005e12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d013      	beq.n	8005e8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e6a:	4a7e      	ldr	r2, [pc, #504]	@ (8006064 <HAL_UART_IRQHandler+0x3e0>)
 8005e6c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fc fda5 	bl	80029c2 <HAL_DMA_Abort_IT>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d016      	beq.n	8005eac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005e88:	4610      	mov	r0, r2
 8005e8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e8c:	e00e      	b.n	8005eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f994 	bl	80061bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e94:	e00a      	b.n	8005eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f990 	bl	80061bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e9c:	e006      	b.n	8005eac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f98c 	bl	80061bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005eaa:	e175      	b.n	8006198 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eac:	bf00      	nop
    return;
 8005eae:	e173      	b.n	8006198 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	f040 814f 	bne.w	8006158 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ebe:	f003 0310 	and.w	r3, r3, #16
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f000 8148 	beq.w	8006158 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ecc:	f003 0310 	and.w	r3, r3, #16
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	f000 8141 	beq.w	8006158 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60bb      	str	r3, [r7, #8]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	60bb      	str	r3, [r7, #8]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	60bb      	str	r3, [r7, #8]
 8005eea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef6:	2b40      	cmp	r3, #64	@ 0x40
 8005ef8:	f040 80b6 	bne.w	8006068 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 8145 	beq.w	800619c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	f080 813e 	bcs.w	800619c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f26:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f32:	f000 8088 	beq.w	8006046 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	330c      	adds	r3, #12
 8005f3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f44:	e853 3f00 	ldrex	r3, [r3]
 8005f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005f4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005f62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005f6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005f72:	e841 2300 	strex	r3, r2, [r1]
 8005f76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1d9      	bne.n	8005f36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3314      	adds	r3, #20
 8005f88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f8c:	e853 3f00 	ldrex	r3, [r3]
 8005f90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f94:	f023 0301 	bic.w	r3, r3, #1
 8005f98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3314      	adds	r3, #20
 8005fa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005fa6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005faa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005fae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005fb2:	e841 2300 	strex	r3, r2, [r1]
 8005fb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005fb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1e1      	bne.n	8005f82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3314      	adds	r3, #20
 8005fc4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fc8:	e853 3f00 	ldrex	r3, [r3]
 8005fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005fce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3314      	adds	r3, #20
 8005fde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005fe2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005fe4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005fe8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005fea:	e841 2300 	strex	r3, r2, [r1]
 8005fee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1e3      	bne.n	8005fbe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	330c      	adds	r3, #12
 800600a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800600e:	e853 3f00 	ldrex	r3, [r3]
 8006012:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006014:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006016:	f023 0310 	bic.w	r3, r3, #16
 800601a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	330c      	adds	r3, #12
 8006024:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006028:	65ba      	str	r2, [r7, #88]	@ 0x58
 800602a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800602e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006030:	e841 2300 	strex	r3, r2, [r1]
 8006034:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1e3      	bne.n	8006004 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006040:	4618      	mov	r0, r3
 8006042:	f7fc fc4e 	bl	80028e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2202      	movs	r2, #2
 800604a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006054:	b29b      	uxth	r3, r3
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	b29b      	uxth	r3, r3
 800605a:	4619      	mov	r1, r3
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f8b7 	bl	80061d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006062:	e09b      	b.n	800619c <HAL_UART_IRQHandler+0x518>
 8006064:	08006323 	.word	0x08006323
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006070:	b29b      	uxth	r3, r3
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	f000 808e 	beq.w	80061a0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 8089 	beq.w	80061a0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	330c      	adds	r3, #12
 8006094:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006098:	e853 3f00 	ldrex	r3, [r3]
 800609c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800609e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	330c      	adds	r3, #12
 80060ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80060b2:	647a      	str	r2, [r7, #68]	@ 0x44
 80060b4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e3      	bne.n	800608e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3314      	adds	r3, #20
 80060cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d0:	e853 3f00 	ldrex	r3, [r3]
 80060d4:	623b      	str	r3, [r7, #32]
   return(result);
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	f023 0301 	bic.w	r3, r3, #1
 80060dc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3314      	adds	r3, #20
 80060e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80060ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80060ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e3      	bne.n	80060c6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2220      	movs	r2, #32
 8006102:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	330c      	adds	r3, #12
 8006112:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	60fb      	str	r3, [r7, #12]
   return(result);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 0310 	bic.w	r3, r3, #16
 8006122:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	330c      	adds	r3, #12
 800612c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006130:	61fa      	str	r2, [r7, #28]
 8006132:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	69b9      	ldr	r1, [r7, #24]
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	617b      	str	r3, [r7, #20]
   return(result);
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e3      	bne.n	800610c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800614a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800614e:	4619      	mov	r1, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f83d 	bl	80061d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006156:	e023      	b.n	80061a0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800615c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006160:	2b00      	cmp	r3, #0
 8006162:	d009      	beq.n	8006178 <HAL_UART_IRQHandler+0x4f4>
 8006164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800616c:	2b00      	cmp	r3, #0
 800616e:	d003      	beq.n	8006178 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f8ea 	bl	800634a <UART_Transmit_IT>
    return;
 8006176:	e014      	b.n	80061a2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006178:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800617c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00e      	beq.n	80061a2 <HAL_UART_IRQHandler+0x51e>
 8006184:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800618c:	2b00      	cmp	r3, #0
 800618e:	d008      	beq.n	80061a2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f92a 	bl	80063ea <UART_EndTransmit_IT>
    return;
 8006196:	e004      	b.n	80061a2 <HAL_UART_IRQHandler+0x51e>
    return;
 8006198:	bf00      	nop
 800619a:	e002      	b.n	80061a2 <HAL_UART_IRQHandler+0x51e>
      return;
 800619c:	bf00      	nop
 800619e:	e000      	b.n	80061a2 <HAL_UART_IRQHandler+0x51e>
      return;
 80061a0:	bf00      	nop
  }
}
 80061a2:	37e8      	adds	r7, #232	@ 0xe8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	4613      	mov	r3, r2
 80061f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	88fa      	ldrh	r2, [r7, #6]
 8006200:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	88fa      	ldrh	r2, [r7, #6]
 8006206:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2222      	movs	r2, #34	@ 0x22
 8006212:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d007      	beq.n	800622e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68da      	ldr	r2, [r3, #12]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800622c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	695a      	ldr	r2, [r3, #20]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f042 0201 	orr.w	r2, r2, #1
 800623c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68da      	ldr	r2, [r3, #12]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f042 0220 	orr.w	r2, r2, #32
 800624c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800625c:	b480      	push	{r7}
 800625e:	b095      	sub	sp, #84	@ 0x54
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	330c      	adds	r3, #12
 800626a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800626e:	e853 3f00 	ldrex	r3, [r3]
 8006272:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006276:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800627a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	330c      	adds	r3, #12
 8006282:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006284:	643a      	str	r2, [r7, #64]	@ 0x40
 8006286:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006288:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800628a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800628c:	e841 2300 	strex	r3, r2, [r1]
 8006290:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1e5      	bne.n	8006264 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3314      	adds	r3, #20
 800629e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	e853 3f00 	ldrex	r3, [r3]
 80062a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	f023 0301 	bic.w	r3, r3, #1
 80062ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	3314      	adds	r3, #20
 80062b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062c0:	e841 2300 	strex	r3, r2, [r1]
 80062c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1e5      	bne.n	8006298 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d119      	bne.n	8006308 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	330c      	adds	r3, #12
 80062da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	e853 3f00 	ldrex	r3, [r3]
 80062e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	f023 0310 	bic.w	r3, r3, #16
 80062ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	330c      	adds	r3, #12
 80062f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062f4:	61ba      	str	r2, [r7, #24]
 80062f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f8:	6979      	ldr	r1, [r7, #20]
 80062fa:	69ba      	ldr	r2, [r7, #24]
 80062fc:	e841 2300 	strex	r3, r2, [r1]
 8006300:	613b      	str	r3, [r7, #16]
   return(result);
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e5      	bne.n	80062d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2220      	movs	r2, #32
 800630c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006316:	bf00      	nop
 8006318:	3754      	adds	r7, #84	@ 0x54
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f7ff ff3d 	bl	80061bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006342:	bf00      	nop
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800634a:	b480      	push	{r7}
 800634c:	b085      	sub	sp, #20
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b21      	cmp	r3, #33	@ 0x21
 800635c:	d13e      	bne.n	80063dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006366:	d114      	bne.n	8006392 <UART_Transmit_IT+0x48>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d110      	bne.n	8006392 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006384:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	1c9a      	adds	r2, r3, #2
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	621a      	str	r2, [r3, #32]
 8006390:	e008      	b.n	80063a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	1c59      	adds	r1, r3, #1
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	6211      	str	r1, [r2, #32]
 800639c:	781a      	ldrb	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	4619      	mov	r1, r3
 80063b2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d10f      	bne.n	80063d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80063c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68da      	ldr	r2, [r3, #12]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063d8:	2300      	movs	r3, #0
 80063da:	e000      	b.n	80063de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063dc:	2302      	movs	r3, #2
  }
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b082      	sub	sp, #8
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68da      	ldr	r2, [r3, #12]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006400:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2220      	movs	r2, #32
 8006406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff fecc 	bl	80061a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b08c      	sub	sp, #48	@ 0x30
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b22      	cmp	r3, #34	@ 0x22
 800642c:	f040 80ae 	bne.w	800658c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006438:	d117      	bne.n	800646a <UART_Receive_IT+0x50>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d113      	bne.n	800646a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006442:	2300      	movs	r3, #0
 8006444:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800644a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	b29b      	uxth	r3, r3
 8006454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006458:	b29a      	uxth	r2, r3
 800645a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006462:	1c9a      	adds	r2, r3, #2
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	629a      	str	r2, [r3, #40]	@ 0x28
 8006468:	e026      	b.n	80064b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006470:	2300      	movs	r3, #0
 8006472:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800647c:	d007      	beq.n	800648e <UART_Receive_IT+0x74>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10a      	bne.n	800649c <UART_Receive_IT+0x82>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d106      	bne.n	800649c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	b2da      	uxtb	r2, r3
 8006496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006498:	701a      	strb	r2, [r3, #0]
 800649a:	e008      	b.n	80064ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80064bc:	b29b      	uxth	r3, r3
 80064be:	3b01      	subs	r3, #1
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	4619      	mov	r1, r3
 80064c6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d15d      	bne.n	8006588 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68da      	ldr	r2, [r3, #12]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0220 	bic.w	r2, r2, #32
 80064da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	695a      	ldr	r2, [r3, #20]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f022 0201 	bic.w	r2, r2, #1
 80064fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2220      	movs	r2, #32
 8006500:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800650e:	2b01      	cmp	r3, #1
 8006510:	d135      	bne.n	800657e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	330c      	adds	r3, #12
 800651e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	e853 3f00 	ldrex	r3, [r3]
 8006526:	613b      	str	r3, [r7, #16]
   return(result);
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f023 0310 	bic.w	r3, r3, #16
 800652e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	330c      	adds	r3, #12
 8006536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006538:	623a      	str	r2, [r7, #32]
 800653a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653c:	69f9      	ldr	r1, [r7, #28]
 800653e:	6a3a      	ldr	r2, [r7, #32]
 8006540:	e841 2300 	strex	r3, r2, [r1]
 8006544:	61bb      	str	r3, [r7, #24]
   return(result);
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1e5      	bne.n	8006518 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0310 	and.w	r3, r3, #16
 8006556:	2b10      	cmp	r3, #16
 8006558:	d10a      	bne.n	8006570 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	60fb      	str	r3, [r7, #12]
 800656e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006574:	4619      	mov	r1, r3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7ff fe2a 	bl	80061d0 <HAL_UARTEx_RxEventCallback>
 800657c:	e002      	b.n	8006584 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7fa fff2 	bl	8001568 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006584:	2300      	movs	r3, #0
 8006586:	e002      	b.n	800658e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	e000      	b.n	800658e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800658c:	2302      	movs	r3, #2
  }
}
 800658e:	4618      	mov	r0, r3
 8006590:	3730      	adds	r7, #48	@ 0x30
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800659c:	b0c0      	sub	sp, #256	@ 0x100
 800659e:	af00      	add	r7, sp, #0
 80065a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80065b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b4:	68d9      	ldr	r1, [r3, #12]
 80065b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	ea40 0301 	orr.w	r3, r0, r1
 80065c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c6:	689a      	ldr	r2, [r3, #8]
 80065c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	431a      	orrs	r2, r3
 80065d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	431a      	orrs	r2, r3
 80065d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	4313      	orrs	r3, r2
 80065e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80065f0:	f021 010c 	bic.w	r1, r1, #12
 80065f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065fe:	430b      	orrs	r3, r1
 8006600:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800660e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006612:	6999      	ldr	r1, [r3, #24]
 8006614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	ea40 0301 	orr.w	r3, r0, r1
 800661e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	4b8f      	ldr	r3, [pc, #572]	@ (8006864 <UART_SetConfig+0x2cc>)
 8006628:	429a      	cmp	r2, r3
 800662a:	d005      	beq.n	8006638 <UART_SetConfig+0xa0>
 800662c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	4b8d      	ldr	r3, [pc, #564]	@ (8006868 <UART_SetConfig+0x2d0>)
 8006634:	429a      	cmp	r2, r3
 8006636:	d104      	bne.n	8006642 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006638:	f7fe fbb6 	bl	8004da8 <HAL_RCC_GetPCLK2Freq>
 800663c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006640:	e003      	b.n	800664a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006642:	f7fe fb9d 	bl	8004d80 <HAL_RCC_GetPCLK1Freq>
 8006646:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800664a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006654:	f040 810c 	bne.w	8006870 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800665c:	2200      	movs	r2, #0
 800665e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006662:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006666:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800666a:	4622      	mov	r2, r4
 800666c:	462b      	mov	r3, r5
 800666e:	1891      	adds	r1, r2, r2
 8006670:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006672:	415b      	adcs	r3, r3
 8006674:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006676:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800667a:	4621      	mov	r1, r4
 800667c:	eb12 0801 	adds.w	r8, r2, r1
 8006680:	4629      	mov	r1, r5
 8006682:	eb43 0901 	adc.w	r9, r3, r1
 8006686:	f04f 0200 	mov.w	r2, #0
 800668a:	f04f 0300 	mov.w	r3, #0
 800668e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006692:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006696:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800669a:	4690      	mov	r8, r2
 800669c:	4699      	mov	r9, r3
 800669e:	4623      	mov	r3, r4
 80066a0:	eb18 0303 	adds.w	r3, r8, r3
 80066a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80066a8:	462b      	mov	r3, r5
 80066aa:	eb49 0303 	adc.w	r3, r9, r3
 80066ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80066b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80066c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80066c6:	460b      	mov	r3, r1
 80066c8:	18db      	adds	r3, r3, r3
 80066ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80066cc:	4613      	mov	r3, r2
 80066ce:	eb42 0303 	adc.w	r3, r2, r3
 80066d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80066d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80066d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80066dc:	f7f9 fd74 	bl	80001c8 <__aeabi_uldivmod>
 80066e0:	4602      	mov	r2, r0
 80066e2:	460b      	mov	r3, r1
 80066e4:	4b61      	ldr	r3, [pc, #388]	@ (800686c <UART_SetConfig+0x2d4>)
 80066e6:	fba3 2302 	umull	r2, r3, r3, r2
 80066ea:	095b      	lsrs	r3, r3, #5
 80066ec:	011c      	lsls	r4, r3, #4
 80066ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066f2:	2200      	movs	r2, #0
 80066f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80066fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006700:	4642      	mov	r2, r8
 8006702:	464b      	mov	r3, r9
 8006704:	1891      	adds	r1, r2, r2
 8006706:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006708:	415b      	adcs	r3, r3
 800670a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800670c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006710:	4641      	mov	r1, r8
 8006712:	eb12 0a01 	adds.w	sl, r2, r1
 8006716:	4649      	mov	r1, r9
 8006718:	eb43 0b01 	adc.w	fp, r3, r1
 800671c:	f04f 0200 	mov.w	r2, #0
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006728:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800672c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006730:	4692      	mov	sl, r2
 8006732:	469b      	mov	fp, r3
 8006734:	4643      	mov	r3, r8
 8006736:	eb1a 0303 	adds.w	r3, sl, r3
 800673a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800673e:	464b      	mov	r3, r9
 8006740:	eb4b 0303 	adc.w	r3, fp, r3
 8006744:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006754:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006758:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800675c:	460b      	mov	r3, r1
 800675e:	18db      	adds	r3, r3, r3
 8006760:	643b      	str	r3, [r7, #64]	@ 0x40
 8006762:	4613      	mov	r3, r2
 8006764:	eb42 0303 	adc.w	r3, r2, r3
 8006768:	647b      	str	r3, [r7, #68]	@ 0x44
 800676a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800676e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006772:	f7f9 fd29 	bl	80001c8 <__aeabi_uldivmod>
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	4611      	mov	r1, r2
 800677c:	4b3b      	ldr	r3, [pc, #236]	@ (800686c <UART_SetConfig+0x2d4>)
 800677e:	fba3 2301 	umull	r2, r3, r3, r1
 8006782:	095b      	lsrs	r3, r3, #5
 8006784:	2264      	movs	r2, #100	@ 0x64
 8006786:	fb02 f303 	mul.w	r3, r2, r3
 800678a:	1acb      	subs	r3, r1, r3
 800678c:	00db      	lsls	r3, r3, #3
 800678e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006792:	4b36      	ldr	r3, [pc, #216]	@ (800686c <UART_SetConfig+0x2d4>)
 8006794:	fba3 2302 	umull	r2, r3, r3, r2
 8006798:	095b      	lsrs	r3, r3, #5
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80067a0:	441c      	add	r4, r3
 80067a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067a6:	2200      	movs	r2, #0
 80067a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80067b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80067b4:	4642      	mov	r2, r8
 80067b6:	464b      	mov	r3, r9
 80067b8:	1891      	adds	r1, r2, r2
 80067ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80067bc:	415b      	adcs	r3, r3
 80067be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80067c4:	4641      	mov	r1, r8
 80067c6:	1851      	adds	r1, r2, r1
 80067c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80067ca:	4649      	mov	r1, r9
 80067cc:	414b      	adcs	r3, r1
 80067ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80067d0:	f04f 0200 	mov.w	r2, #0
 80067d4:	f04f 0300 	mov.w	r3, #0
 80067d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80067dc:	4659      	mov	r1, fp
 80067de:	00cb      	lsls	r3, r1, #3
 80067e0:	4651      	mov	r1, sl
 80067e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067e6:	4651      	mov	r1, sl
 80067e8:	00ca      	lsls	r2, r1, #3
 80067ea:	4610      	mov	r0, r2
 80067ec:	4619      	mov	r1, r3
 80067ee:	4603      	mov	r3, r0
 80067f0:	4642      	mov	r2, r8
 80067f2:	189b      	adds	r3, r3, r2
 80067f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067f8:	464b      	mov	r3, r9
 80067fa:	460a      	mov	r2, r1
 80067fc:	eb42 0303 	adc.w	r3, r2, r3
 8006800:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006810:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006814:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006818:	460b      	mov	r3, r1
 800681a:	18db      	adds	r3, r3, r3
 800681c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800681e:	4613      	mov	r3, r2
 8006820:	eb42 0303 	adc.w	r3, r2, r3
 8006824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006826:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800682a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800682e:	f7f9 fccb 	bl	80001c8 <__aeabi_uldivmod>
 8006832:	4602      	mov	r2, r0
 8006834:	460b      	mov	r3, r1
 8006836:	4b0d      	ldr	r3, [pc, #52]	@ (800686c <UART_SetConfig+0x2d4>)
 8006838:	fba3 1302 	umull	r1, r3, r3, r2
 800683c:	095b      	lsrs	r3, r3, #5
 800683e:	2164      	movs	r1, #100	@ 0x64
 8006840:	fb01 f303 	mul.w	r3, r1, r3
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	00db      	lsls	r3, r3, #3
 8006848:	3332      	adds	r3, #50	@ 0x32
 800684a:	4a08      	ldr	r2, [pc, #32]	@ (800686c <UART_SetConfig+0x2d4>)
 800684c:	fba2 2303 	umull	r2, r3, r2, r3
 8006850:	095b      	lsrs	r3, r3, #5
 8006852:	f003 0207 	and.w	r2, r3, #7
 8006856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4422      	add	r2, r4
 800685e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006860:	e106      	b.n	8006a70 <UART_SetConfig+0x4d8>
 8006862:	bf00      	nop
 8006864:	40011000 	.word	0x40011000
 8006868:	40011400 	.word	0x40011400
 800686c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006874:	2200      	movs	r2, #0
 8006876:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800687a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800687e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006882:	4642      	mov	r2, r8
 8006884:	464b      	mov	r3, r9
 8006886:	1891      	adds	r1, r2, r2
 8006888:	6239      	str	r1, [r7, #32]
 800688a:	415b      	adcs	r3, r3
 800688c:	627b      	str	r3, [r7, #36]	@ 0x24
 800688e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006892:	4641      	mov	r1, r8
 8006894:	1854      	adds	r4, r2, r1
 8006896:	4649      	mov	r1, r9
 8006898:	eb43 0501 	adc.w	r5, r3, r1
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	f04f 0300 	mov.w	r3, #0
 80068a4:	00eb      	lsls	r3, r5, #3
 80068a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068aa:	00e2      	lsls	r2, r4, #3
 80068ac:	4614      	mov	r4, r2
 80068ae:	461d      	mov	r5, r3
 80068b0:	4643      	mov	r3, r8
 80068b2:	18e3      	adds	r3, r4, r3
 80068b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80068b8:	464b      	mov	r3, r9
 80068ba:	eb45 0303 	adc.w	r3, r5, r3
 80068be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80068c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80068d2:	f04f 0200 	mov.w	r2, #0
 80068d6:	f04f 0300 	mov.w	r3, #0
 80068da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80068de:	4629      	mov	r1, r5
 80068e0:	008b      	lsls	r3, r1, #2
 80068e2:	4621      	mov	r1, r4
 80068e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068e8:	4621      	mov	r1, r4
 80068ea:	008a      	lsls	r2, r1, #2
 80068ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80068f0:	f7f9 fc6a 	bl	80001c8 <__aeabi_uldivmod>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4b60      	ldr	r3, [pc, #384]	@ (8006a7c <UART_SetConfig+0x4e4>)
 80068fa:	fba3 2302 	umull	r2, r3, r3, r2
 80068fe:	095b      	lsrs	r3, r3, #5
 8006900:	011c      	lsls	r4, r3, #4
 8006902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006906:	2200      	movs	r2, #0
 8006908:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800690c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006910:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006914:	4642      	mov	r2, r8
 8006916:	464b      	mov	r3, r9
 8006918:	1891      	adds	r1, r2, r2
 800691a:	61b9      	str	r1, [r7, #24]
 800691c:	415b      	adcs	r3, r3
 800691e:	61fb      	str	r3, [r7, #28]
 8006920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006924:	4641      	mov	r1, r8
 8006926:	1851      	adds	r1, r2, r1
 8006928:	6139      	str	r1, [r7, #16]
 800692a:	4649      	mov	r1, r9
 800692c:	414b      	adcs	r3, r1
 800692e:	617b      	str	r3, [r7, #20]
 8006930:	f04f 0200 	mov.w	r2, #0
 8006934:	f04f 0300 	mov.w	r3, #0
 8006938:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800693c:	4659      	mov	r1, fp
 800693e:	00cb      	lsls	r3, r1, #3
 8006940:	4651      	mov	r1, sl
 8006942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006946:	4651      	mov	r1, sl
 8006948:	00ca      	lsls	r2, r1, #3
 800694a:	4610      	mov	r0, r2
 800694c:	4619      	mov	r1, r3
 800694e:	4603      	mov	r3, r0
 8006950:	4642      	mov	r2, r8
 8006952:	189b      	adds	r3, r3, r2
 8006954:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006958:	464b      	mov	r3, r9
 800695a:	460a      	mov	r2, r1
 800695c:	eb42 0303 	adc.w	r3, r2, r3
 8006960:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800696e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006970:	f04f 0200 	mov.w	r2, #0
 8006974:	f04f 0300 	mov.w	r3, #0
 8006978:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800697c:	4649      	mov	r1, r9
 800697e:	008b      	lsls	r3, r1, #2
 8006980:	4641      	mov	r1, r8
 8006982:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006986:	4641      	mov	r1, r8
 8006988:	008a      	lsls	r2, r1, #2
 800698a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800698e:	f7f9 fc1b 	bl	80001c8 <__aeabi_uldivmod>
 8006992:	4602      	mov	r2, r0
 8006994:	460b      	mov	r3, r1
 8006996:	4611      	mov	r1, r2
 8006998:	4b38      	ldr	r3, [pc, #224]	@ (8006a7c <UART_SetConfig+0x4e4>)
 800699a:	fba3 2301 	umull	r2, r3, r3, r1
 800699e:	095b      	lsrs	r3, r3, #5
 80069a0:	2264      	movs	r2, #100	@ 0x64
 80069a2:	fb02 f303 	mul.w	r3, r2, r3
 80069a6:	1acb      	subs	r3, r1, r3
 80069a8:	011b      	lsls	r3, r3, #4
 80069aa:	3332      	adds	r3, #50	@ 0x32
 80069ac:	4a33      	ldr	r2, [pc, #204]	@ (8006a7c <UART_SetConfig+0x4e4>)
 80069ae:	fba2 2303 	umull	r2, r3, r2, r3
 80069b2:	095b      	lsrs	r3, r3, #5
 80069b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80069b8:	441c      	add	r4, r3
 80069ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069be:	2200      	movs	r2, #0
 80069c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80069c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80069c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80069c8:	4642      	mov	r2, r8
 80069ca:	464b      	mov	r3, r9
 80069cc:	1891      	adds	r1, r2, r2
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	415b      	adcs	r3, r3
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069d8:	4641      	mov	r1, r8
 80069da:	1851      	adds	r1, r2, r1
 80069dc:	6039      	str	r1, [r7, #0]
 80069de:	4649      	mov	r1, r9
 80069e0:	414b      	adcs	r3, r1
 80069e2:	607b      	str	r3, [r7, #4]
 80069e4:	f04f 0200 	mov.w	r2, #0
 80069e8:	f04f 0300 	mov.w	r3, #0
 80069ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069f0:	4659      	mov	r1, fp
 80069f2:	00cb      	lsls	r3, r1, #3
 80069f4:	4651      	mov	r1, sl
 80069f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069fa:	4651      	mov	r1, sl
 80069fc:	00ca      	lsls	r2, r1, #3
 80069fe:	4610      	mov	r0, r2
 8006a00:	4619      	mov	r1, r3
 8006a02:	4603      	mov	r3, r0
 8006a04:	4642      	mov	r2, r8
 8006a06:	189b      	adds	r3, r3, r2
 8006a08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a0a:	464b      	mov	r3, r9
 8006a0c:	460a      	mov	r2, r1
 8006a0e:	eb42 0303 	adc.w	r3, r2, r3
 8006a12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	f04f 0300 	mov.w	r3, #0
 8006a28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	008b      	lsls	r3, r1, #2
 8006a30:	4641      	mov	r1, r8
 8006a32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a36:	4641      	mov	r1, r8
 8006a38:	008a      	lsls	r2, r1, #2
 8006a3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006a3e:	f7f9 fbc3 	bl	80001c8 <__aeabi_uldivmod>
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	4b0d      	ldr	r3, [pc, #52]	@ (8006a7c <UART_SetConfig+0x4e4>)
 8006a48:	fba3 1302 	umull	r1, r3, r3, r2
 8006a4c:	095b      	lsrs	r3, r3, #5
 8006a4e:	2164      	movs	r1, #100	@ 0x64
 8006a50:	fb01 f303 	mul.w	r3, r1, r3
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	011b      	lsls	r3, r3, #4
 8006a58:	3332      	adds	r3, #50	@ 0x32
 8006a5a:	4a08      	ldr	r2, [pc, #32]	@ (8006a7c <UART_SetConfig+0x4e4>)
 8006a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a60:	095b      	lsrs	r3, r3, #5
 8006a62:	f003 020f 	and.w	r2, r3, #15
 8006a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4422      	add	r2, r4
 8006a6e:	609a      	str	r2, [r3, #8]
}
 8006a70:	bf00      	nop
 8006a72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006a76:	46bd      	mov	sp, r7
 8006a78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a7c:	51eb851f 	.word	0x51eb851f

08006a80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a80:	b084      	sub	sp, #16
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	f107 001c 	add.w	r0, r7, #28
 8006a8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a92:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d123      	bne.n	8006ae2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006aae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ac2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d105      	bne.n	8006ad6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f001 fae8 	bl	80080ac <USB_CoreReset>
 8006adc:	4603      	mov	r3, r0
 8006ade:	73fb      	strb	r3, [r7, #15]
 8006ae0:	e01b      	b.n	8006b1a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f001 fadc 	bl	80080ac <USB_CoreReset>
 8006af4:	4603      	mov	r3, r0
 8006af6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006af8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d106      	bne.n	8006b0e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b04:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b0c:	e005      	b.n	8006b1a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b12:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b1a:	7fbb      	ldrb	r3, [r7, #30]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d10b      	bne.n	8006b38 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	f043 0206 	orr.w	r2, r3, #6
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f043 0220 	orr.w	r2, r3, #32
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b44:	b004      	add	sp, #16
 8006b46:	4770      	bx	lr

08006b48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	4613      	mov	r3, r2
 8006b54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006b56:	79fb      	ldrb	r3, [r7, #7]
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d165      	bne.n	8006c28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	4a41      	ldr	r2, [pc, #260]	@ (8006c64 <USB_SetTurnaroundTime+0x11c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d906      	bls.n	8006b72 <USB_SetTurnaroundTime+0x2a>
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	4a40      	ldr	r2, [pc, #256]	@ (8006c68 <USB_SetTurnaroundTime+0x120>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d202      	bcs.n	8006b72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006b6c:	230f      	movs	r3, #15
 8006b6e:	617b      	str	r3, [r7, #20]
 8006b70:	e062      	b.n	8006c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	4a3c      	ldr	r2, [pc, #240]	@ (8006c68 <USB_SetTurnaroundTime+0x120>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d306      	bcc.n	8006b88 <USB_SetTurnaroundTime+0x40>
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	4a3b      	ldr	r2, [pc, #236]	@ (8006c6c <USB_SetTurnaroundTime+0x124>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d202      	bcs.n	8006b88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006b82:	230e      	movs	r3, #14
 8006b84:	617b      	str	r3, [r7, #20]
 8006b86:	e057      	b.n	8006c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	4a38      	ldr	r2, [pc, #224]	@ (8006c6c <USB_SetTurnaroundTime+0x124>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d306      	bcc.n	8006b9e <USB_SetTurnaroundTime+0x56>
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	4a37      	ldr	r2, [pc, #220]	@ (8006c70 <USB_SetTurnaroundTime+0x128>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d202      	bcs.n	8006b9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006b98:	230d      	movs	r3, #13
 8006b9a:	617b      	str	r3, [r7, #20]
 8006b9c:	e04c      	b.n	8006c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	4a33      	ldr	r2, [pc, #204]	@ (8006c70 <USB_SetTurnaroundTime+0x128>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d306      	bcc.n	8006bb4 <USB_SetTurnaroundTime+0x6c>
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	4a32      	ldr	r2, [pc, #200]	@ (8006c74 <USB_SetTurnaroundTime+0x12c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d802      	bhi.n	8006bb4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006bae:	230c      	movs	r3, #12
 8006bb0:	617b      	str	r3, [r7, #20]
 8006bb2:	e041      	b.n	8006c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	4a2f      	ldr	r2, [pc, #188]	@ (8006c74 <USB_SetTurnaroundTime+0x12c>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d906      	bls.n	8006bca <USB_SetTurnaroundTime+0x82>
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	4a2e      	ldr	r2, [pc, #184]	@ (8006c78 <USB_SetTurnaroundTime+0x130>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d802      	bhi.n	8006bca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006bc4:	230b      	movs	r3, #11
 8006bc6:	617b      	str	r3, [r7, #20]
 8006bc8:	e036      	b.n	8006c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	4a2a      	ldr	r2, [pc, #168]	@ (8006c78 <USB_SetTurnaroundTime+0x130>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d906      	bls.n	8006be0 <USB_SetTurnaroundTime+0x98>
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	4a29      	ldr	r2, [pc, #164]	@ (8006c7c <USB_SetTurnaroundTime+0x134>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d802      	bhi.n	8006be0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006bda:	230a      	movs	r3, #10
 8006bdc:	617b      	str	r3, [r7, #20]
 8006bde:	e02b      	b.n	8006c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	4a26      	ldr	r2, [pc, #152]	@ (8006c7c <USB_SetTurnaroundTime+0x134>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d906      	bls.n	8006bf6 <USB_SetTurnaroundTime+0xae>
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	4a25      	ldr	r2, [pc, #148]	@ (8006c80 <USB_SetTurnaroundTime+0x138>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d202      	bcs.n	8006bf6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006bf0:	2309      	movs	r3, #9
 8006bf2:	617b      	str	r3, [r7, #20]
 8006bf4:	e020      	b.n	8006c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	4a21      	ldr	r2, [pc, #132]	@ (8006c80 <USB_SetTurnaroundTime+0x138>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d306      	bcc.n	8006c0c <USB_SetTurnaroundTime+0xc4>
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	4a20      	ldr	r2, [pc, #128]	@ (8006c84 <USB_SetTurnaroundTime+0x13c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d802      	bhi.n	8006c0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006c06:	2308      	movs	r3, #8
 8006c08:	617b      	str	r3, [r7, #20]
 8006c0a:	e015      	b.n	8006c38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4a1d      	ldr	r2, [pc, #116]	@ (8006c84 <USB_SetTurnaroundTime+0x13c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d906      	bls.n	8006c22 <USB_SetTurnaroundTime+0xda>
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	4a1c      	ldr	r2, [pc, #112]	@ (8006c88 <USB_SetTurnaroundTime+0x140>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d202      	bcs.n	8006c22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006c1c:	2307      	movs	r3, #7
 8006c1e:	617b      	str	r3, [r7, #20]
 8006c20:	e00a      	b.n	8006c38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006c22:	2306      	movs	r3, #6
 8006c24:	617b      	str	r3, [r7, #20]
 8006c26:	e007      	b.n	8006c38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006c28:	79fb      	ldrb	r3, [r7, #7]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d102      	bne.n	8006c34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006c2e:	2309      	movs	r3, #9
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	e001      	b.n	8006c38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006c34:	2309      	movs	r3, #9
 8006c36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	68da      	ldr	r2, [r3, #12]
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	029b      	lsls	r3, r3, #10
 8006c4c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006c50:	431a      	orrs	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	371c      	adds	r7, #28
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr
 8006c64:	00d8acbf 	.word	0x00d8acbf
 8006c68:	00e4e1c0 	.word	0x00e4e1c0
 8006c6c:	00f42400 	.word	0x00f42400
 8006c70:	01067380 	.word	0x01067380
 8006c74:	011a499f 	.word	0x011a499f
 8006c78:	01312cff 	.word	0x01312cff
 8006c7c:	014ca43f 	.word	0x014ca43f
 8006c80:	016e3600 	.word	0x016e3600
 8006c84:	01a6ab1f 	.word	0x01a6ab1f
 8006c88:	01e84800 	.word	0x01e84800

08006c8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f043 0201 	orr.w	r2, r3, #1
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b083      	sub	sp, #12
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f023 0201 	bic.w	r2, r3, #1
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	460b      	mov	r3, r1
 8006cda:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cec:	78fb      	ldrb	r3, [r7, #3]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d115      	bne.n	8006d1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006cfe:	200a      	movs	r0, #10
 8006d00:	f7fb fa58 	bl	80021b4 <HAL_Delay>
      ms += 10U;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	330a      	adds	r3, #10
 8006d08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f001 f93f 	bl	8007f8e <USB_GetMode>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d01e      	beq.n	8006d54 <USB_SetCurrentMode+0x84>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d1a:	d9f0      	bls.n	8006cfe <USB_SetCurrentMode+0x2e>
 8006d1c:	e01a      	b.n	8006d54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d1e:	78fb      	ldrb	r3, [r7, #3]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d115      	bne.n	8006d50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d30:	200a      	movs	r0, #10
 8006d32:	f7fb fa3f 	bl	80021b4 <HAL_Delay>
      ms += 10U;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	330a      	adds	r3, #10
 8006d3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f001 f926 	bl	8007f8e <USB_GetMode>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d005      	beq.n	8006d54 <USB_SetCurrentMode+0x84>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d4c:	d9f0      	bls.n	8006d30 <USB_SetCurrentMode+0x60>
 8006d4e:	e001      	b.n	8006d54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e005      	b.n	8006d60 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2bc8      	cmp	r3, #200	@ 0xc8
 8006d58:	d101      	bne.n	8006d5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e000      	b.n	8006d60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d68:	b084      	sub	sp, #16
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b086      	sub	sp, #24
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d82:	2300      	movs	r3, #0
 8006d84:	613b      	str	r3, [r7, #16]
 8006d86:	e009      	b.n	8006d9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	3340      	adds	r3, #64	@ 0x40
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	2200      	movs	r2, #0
 8006d94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	613b      	str	r3, [r7, #16]
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	2b0e      	cmp	r3, #14
 8006da0:	d9f2      	bls.n	8006d88 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006da2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d11c      	bne.n	8006de4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006db8:	f043 0302 	orr.w	r3, r3, #2
 8006dbc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dce:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dda:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	639a      	str	r2, [r3, #56]	@ 0x38
 8006de2:	e00b      	b.n	8006dfc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006de8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e02:	461a      	mov	r2, r3
 8006e04:	2300      	movs	r3, #0
 8006e06:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e08:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d10d      	bne.n	8006e2c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d104      	bne.n	8006e22 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e18:	2100      	movs	r1, #0
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f968 	bl	80070f0 <USB_SetDevSpeed>
 8006e20:	e008      	b.n	8006e34 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e22:	2101      	movs	r1, #1
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f963 	bl	80070f0 <USB_SetDevSpeed>
 8006e2a:	e003      	b.n	8006e34 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e2c:	2103      	movs	r1, #3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f95e 	bl	80070f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e34:	2110      	movs	r1, #16
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f8fa 	bl	8007030 <USB_FlushTxFifo>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f924 	bl	8007094 <USB_FlushRxFifo>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d001      	beq.n	8006e56 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	2300      	movs	r3, #0
 8006e60:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e68:	461a      	mov	r2, r3
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e74:	461a      	mov	r2, r3
 8006e76:	2300      	movs	r3, #0
 8006e78:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	613b      	str	r3, [r7, #16]
 8006e7e:	e043      	b.n	8006f08 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e96:	d118      	bne.n	8006eca <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10a      	bne.n	8006eb4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eaa:	461a      	mov	r2, r3
 8006eac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006eb0:	6013      	str	r3, [r2, #0]
 8006eb2:	e013      	b.n	8006edc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006ec6:	6013      	str	r3, [r2, #0]
 8006ec8:	e008      	b.n	8006edc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	015a      	lsls	r2, r3, #5
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	2300      	movs	r3, #0
 8006eda:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ee8:	461a      	mov	r2, r3
 8006eea:	2300      	movs	r3, #0
 8006eec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006efa:	461a      	mov	r2, r3
 8006efc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	3301      	adds	r3, #1
 8006f06:	613b      	str	r3, [r7, #16]
 8006f08:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d3b5      	bcc.n	8006e80 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f14:	2300      	movs	r3, #0
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	e043      	b.n	8006fa2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f30:	d118      	bne.n	8006f64 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f44:	461a      	mov	r2, r3
 8006f46:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f4a:	6013      	str	r3, [r2, #0]
 8006f4c:	e013      	b.n	8006f76 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	015a      	lsls	r2, r3, #5
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	4413      	add	r3, r2
 8006f56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f60:	6013      	str	r3, [r2, #0]
 8006f62:	e008      	b.n	8006f76 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f70:	461a      	mov	r2, r3
 8006f72:	2300      	movs	r3, #0
 8006f74:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	015a      	lsls	r2, r3, #5
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f82:	461a      	mov	r2, r3
 8006f84:	2300      	movs	r3, #0
 8006f86:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f94:	461a      	mov	r2, r3
 8006f96:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d3b5      	bcc.n	8006f1a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fc0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006fce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fd0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d105      	bne.n	8006fe4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	f043 0210 	orr.w	r2, r3, #16
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	699a      	ldr	r2, [r3, #24]
 8006fe8:	4b10      	ldr	r3, [pc, #64]	@ (800702c <USB_DevInit+0x2c4>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ff0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d005      	beq.n	8007004 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	f043 0208 	orr.w	r2, r3, #8
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007004:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007008:	2b01      	cmp	r3, #1
 800700a:	d107      	bne.n	800701c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007014:	f043 0304 	orr.w	r3, r3, #4
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800701c:	7dfb      	ldrb	r3, [r7, #23]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3718      	adds	r7, #24
 8007022:	46bd      	mov	sp, r7
 8007024:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007028:	b004      	add	sp, #16
 800702a:	4770      	bx	lr
 800702c:	803c3800 	.word	0x803c3800

08007030 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800703a:	2300      	movs	r3, #0
 800703c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	3301      	adds	r3, #1
 8007042:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800704a:	d901      	bls.n	8007050 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e01b      	b.n	8007088 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	2b00      	cmp	r3, #0
 8007056:	daf2      	bge.n	800703e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	019b      	lsls	r3, r3, #6
 8007060:	f043 0220 	orr.w	r2, r3, #32
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	3301      	adds	r3, #1
 800706c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007074:	d901      	bls.n	800707a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e006      	b.n	8007088 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	f003 0320 	and.w	r3, r3, #32
 8007082:	2b20      	cmp	r3, #32
 8007084:	d0f0      	beq.n	8007068 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800709c:	2300      	movs	r3, #0
 800709e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	3301      	adds	r3, #1
 80070a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070ac:	d901      	bls.n	80070b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e018      	b.n	80070e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	daf2      	bge.n	80070a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2210      	movs	r2, #16
 80070c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	3301      	adds	r3, #1
 80070c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070d0:	d901      	bls.n	80070d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e006      	b.n	80070e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	f003 0310 	and.w	r3, r3, #16
 80070de:	2b10      	cmp	r3, #16
 80070e0:	d0f0      	beq.n	80070c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	460b      	mov	r3, r1
 80070fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	78fb      	ldrb	r3, [r7, #3]
 800710a:	68f9      	ldr	r1, [r7, #12]
 800710c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007110:	4313      	orrs	r3, r2
 8007112:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007122:	b480      	push	{r7}
 8007124:	b087      	sub	sp, #28
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f003 0306 	and.w	r3, r3, #6
 800713a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d102      	bne.n	8007148 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007142:	2300      	movs	r3, #0
 8007144:	75fb      	strb	r3, [r7, #23]
 8007146:	e00a      	b.n	800715e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b02      	cmp	r3, #2
 800714c:	d002      	beq.n	8007154 <USB_GetDevSpeed+0x32>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2b06      	cmp	r3, #6
 8007152:	d102      	bne.n	800715a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007154:	2302      	movs	r3, #2
 8007156:	75fb      	strb	r3, [r7, #23]
 8007158:	e001      	b.n	800715e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800715a:	230f      	movs	r3, #15
 800715c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800715e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007160:	4618      	mov	r0, r3
 8007162:	371c      	adds	r7, #28
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	785b      	ldrb	r3, [r3, #1]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d13a      	bne.n	80071fe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800718e:	69da      	ldr	r2, [r3, #28]
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	f003 030f 	and.w	r3, r3, #15
 8007198:	2101      	movs	r1, #1
 800719a:	fa01 f303 	lsl.w	r3, r1, r3
 800719e:	b29b      	uxth	r3, r3
 80071a0:	68f9      	ldr	r1, [r7, #12]
 80071a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071a6:	4313      	orrs	r3, r2
 80071a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d155      	bne.n	800726c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	015a      	lsls	r2, r3, #5
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4413      	add	r3, r2
 80071c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	791b      	ldrb	r3, [r3, #4]
 80071da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	059b      	lsls	r3, r3, #22
 80071e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071e4:	4313      	orrs	r3, r2
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	0151      	lsls	r1, r2, #5
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	440a      	add	r2, r1
 80071ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071fa:	6013      	str	r3, [r2, #0]
 80071fc:	e036      	b.n	800726c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007204:	69da      	ldr	r2, [r3, #28]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	f003 030f 	and.w	r3, r3, #15
 800720e:	2101      	movs	r1, #1
 8007210:	fa01 f303 	lsl.w	r3, r1, r3
 8007214:	041b      	lsls	r3, r3, #16
 8007216:	68f9      	ldr	r1, [r7, #12]
 8007218:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800721c:	4313      	orrs	r3, r2
 800721e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d11a      	bne.n	800726c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	4413      	add	r3, r2
 800723e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	791b      	ldrb	r3, [r3, #4]
 8007250:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007252:	430b      	orrs	r3, r1
 8007254:	4313      	orrs	r3, r2
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	0151      	lsls	r1, r2, #5
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	440a      	add	r2, r1
 800725e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007262:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800726a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3714      	adds	r7, #20
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
	...

0800727c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	785b      	ldrb	r3, [r3, #1]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d161      	bne.n	800735c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072ae:	d11f      	bne.n	80072f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	0151      	lsls	r1, r2, #5
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	440a      	add	r2, r1
 80072c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80072ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68ba      	ldr	r2, [r7, #8]
 80072e0:	0151      	lsls	r1, r2, #5
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	440a      	add	r2, r1
 80072e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	f003 030f 	and.w	r3, r3, #15
 8007300:	2101      	movs	r1, #1
 8007302:	fa01 f303 	lsl.w	r3, r1, r3
 8007306:	b29b      	uxth	r3, r3
 8007308:	43db      	mvns	r3, r3
 800730a:	68f9      	ldr	r1, [r7, #12]
 800730c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007310:	4013      	ands	r3, r2
 8007312:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800731a:	69da      	ldr	r2, [r3, #28]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	f003 030f 	and.w	r3, r3, #15
 8007324:	2101      	movs	r1, #1
 8007326:	fa01 f303 	lsl.w	r3, r1, r3
 800732a:	b29b      	uxth	r3, r3
 800732c:	43db      	mvns	r3, r3
 800732e:	68f9      	ldr	r1, [r7, #12]
 8007330:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007334:	4013      	ands	r3, r2
 8007336:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	0159      	lsls	r1, r3, #5
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	440b      	add	r3, r1
 800734e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007352:	4619      	mov	r1, r3
 8007354:	4b35      	ldr	r3, [pc, #212]	@ (800742c <USB_DeactivateEndpoint+0x1b0>)
 8007356:	4013      	ands	r3, r2
 8007358:	600b      	str	r3, [r1, #0]
 800735a:	e060      	b.n	800741e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800736e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007372:	d11f      	bne.n	80073b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	0151      	lsls	r1, r2, #5
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	440a      	add	r2, r1
 800738a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800738e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007392:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	0151      	lsls	r1, r2, #5
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	440a      	add	r2, r1
 80073aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	f003 030f 	and.w	r3, r3, #15
 80073c4:	2101      	movs	r1, #1
 80073c6:	fa01 f303 	lsl.w	r3, r1, r3
 80073ca:	041b      	lsls	r3, r3, #16
 80073cc:	43db      	mvns	r3, r3
 80073ce:	68f9      	ldr	r1, [r7, #12]
 80073d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073d4:	4013      	ands	r3, r2
 80073d6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073de:	69da      	ldr	r2, [r3, #28]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	f003 030f 	and.w	r3, r3, #15
 80073e8:	2101      	movs	r1, #1
 80073ea:	fa01 f303 	lsl.w	r3, r1, r3
 80073ee:	041b      	lsls	r3, r3, #16
 80073f0:	43db      	mvns	r3, r3
 80073f2:	68f9      	ldr	r1, [r7, #12]
 80073f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073f8:	4013      	ands	r3, r2
 80073fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	0159      	lsls	r1, r3, #5
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	440b      	add	r3, r1
 8007412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007416:	4619      	mov	r1, r3
 8007418:	4b05      	ldr	r3, [pc, #20]	@ (8007430 <USB_DeactivateEndpoint+0x1b4>)
 800741a:	4013      	ands	r3, r2
 800741c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	ec337800 	.word	0xec337800
 8007430:	eff37800 	.word	0xeff37800

08007434 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08a      	sub	sp, #40	@ 0x28
 8007438:	af02      	add	r7, sp, #8
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	4613      	mov	r3, r2
 8007440:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	785b      	ldrb	r3, [r3, #1]
 8007450:	2b01      	cmp	r3, #1
 8007452:	f040 817f 	bne.w	8007754 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d132      	bne.n	80074c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	0151      	lsls	r1, r2, #5
 8007470:	69fa      	ldr	r2, [r7, #28]
 8007472:	440a      	add	r2, r1
 8007474:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007478:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800747c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007480:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	015a      	lsls	r2, r3, #5
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	4413      	add	r3, r2
 800748a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	0151      	lsls	r1, r2, #5
 8007494:	69fa      	ldr	r2, [r7, #28]
 8007496:	440a      	add	r2, r1
 8007498:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800749c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80074a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	0151      	lsls	r1, r2, #5
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	440a      	add	r2, r1
 80074b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074bc:	0cdb      	lsrs	r3, r3, #19
 80074be:	04db      	lsls	r3, r3, #19
 80074c0:	6113      	str	r3, [r2, #16]
 80074c2:	e097      	b.n	80075f4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	69ba      	ldr	r2, [r7, #24]
 80074d4:	0151      	lsls	r1, r2, #5
 80074d6:	69fa      	ldr	r2, [r7, #28]
 80074d8:	440a      	add	r2, r1
 80074da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074de:	0cdb      	lsrs	r3, r3, #19
 80074e0:	04db      	lsls	r3, r3, #19
 80074e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	0151      	lsls	r1, r2, #5
 80074f6:	69fa      	ldr	r2, [r7, #28]
 80074f8:	440a      	add	r2, r1
 80074fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074fe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007502:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007506:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007508:	69bb      	ldr	r3, [r7, #24]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d11a      	bne.n	8007544 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	691a      	ldr	r2, [r3, #16]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	429a      	cmp	r2, r3
 8007518:	d903      	bls.n	8007522 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	689a      	ldr	r2, [r3, #8]
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	4413      	add	r3, r2
 800752a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	0151      	lsls	r1, r2, #5
 8007534:	69fa      	ldr	r2, [r7, #28]
 8007536:	440a      	add	r2, r1
 8007538:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800753c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007540:	6113      	str	r3, [r2, #16]
 8007542:	e044      	b.n	80075ce <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	691a      	ldr	r2, [r3, #16]
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	4413      	add	r3, r2
 800754e:	1e5a      	subs	r2, r3, #1
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	fbb2 f3f3 	udiv	r3, r2, r3
 8007558:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	4413      	add	r3, r2
 8007562:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007566:	691a      	ldr	r2, [r3, #16]
 8007568:	8afb      	ldrh	r3, [r7, #22]
 800756a:	04d9      	lsls	r1, r3, #19
 800756c:	4ba4      	ldr	r3, [pc, #656]	@ (8007800 <USB_EPStartXfer+0x3cc>)
 800756e:	400b      	ands	r3, r1
 8007570:	69b9      	ldr	r1, [r7, #24]
 8007572:	0148      	lsls	r0, r1, #5
 8007574:	69f9      	ldr	r1, [r7, #28]
 8007576:	4401      	add	r1, r0
 8007578:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800757c:	4313      	orrs	r3, r2
 800757e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	791b      	ldrb	r3, [r3, #4]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d122      	bne.n	80075ce <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	4413      	add	r3, r2
 8007590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	0151      	lsls	r1, r2, #5
 800759a:	69fa      	ldr	r2, [r7, #28]
 800759c:	440a      	add	r2, r1
 800759e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075a2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80075a6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075b4:	691a      	ldr	r2, [r3, #16]
 80075b6:	8afb      	ldrh	r3, [r7, #22]
 80075b8:	075b      	lsls	r3, r3, #29
 80075ba:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80075be:	69b9      	ldr	r1, [r7, #24]
 80075c0:	0148      	lsls	r0, r1, #5
 80075c2:	69f9      	ldr	r1, [r7, #28]
 80075c4:	4401      	add	r1, r0
 80075c6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80075ca:	4313      	orrs	r3, r2
 80075cc:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	69fb      	ldr	r3, [r7, #28]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075da:	691a      	ldr	r2, [r3, #16]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075e4:	69b9      	ldr	r1, [r7, #24]
 80075e6:	0148      	lsls	r0, r1, #5
 80075e8:	69f9      	ldr	r1, [r7, #28]
 80075ea:	4401      	add	r1, r0
 80075ec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80075f0:	4313      	orrs	r3, r2
 80075f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80075f4:	79fb      	ldrb	r3, [r7, #7]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d14b      	bne.n	8007692 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d009      	beq.n	8007616 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	4413      	add	r3, r2
 800760a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800760e:	461a      	mov	r2, r3
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	791b      	ldrb	r3, [r3, #4]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d128      	bne.n	8007670 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800762a:	2b00      	cmp	r3, #0
 800762c:	d110      	bne.n	8007650 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800762e:	69bb      	ldr	r3, [r7, #24]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	0151      	lsls	r1, r2, #5
 8007640:	69fa      	ldr	r2, [r7, #28]
 8007642:	440a      	add	r2, r1
 8007644:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007648:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800764c:	6013      	str	r3, [r2, #0]
 800764e:	e00f      	b.n	8007670 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	0151      	lsls	r1, r2, #5
 8007662:	69fa      	ldr	r2, [r7, #28]
 8007664:	440a      	add	r2, r1
 8007666:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800766a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800766e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	4413      	add	r3, r2
 8007678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	69ba      	ldr	r2, [r7, #24]
 8007680:	0151      	lsls	r1, r2, #5
 8007682:	69fa      	ldr	r2, [r7, #28]
 8007684:	440a      	add	r2, r1
 8007686:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800768a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800768e:	6013      	str	r3, [r2, #0]
 8007690:	e166      	b.n	8007960 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	4413      	add	r3, r2
 800769a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	69ba      	ldr	r2, [r7, #24]
 80076a2:	0151      	lsls	r1, r2, #5
 80076a4:	69fa      	ldr	r2, [r7, #28]
 80076a6:	440a      	add	r2, r1
 80076a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076ac:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80076b0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	791b      	ldrb	r3, [r3, #4]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d015      	beq.n	80076e6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f000 814e 	beq.w	8007960 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	f003 030f 	and.w	r3, r3, #15
 80076d4:	2101      	movs	r1, #1
 80076d6:	fa01 f303 	lsl.w	r3, r1, r3
 80076da:	69f9      	ldr	r1, [r7, #28]
 80076dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076e0:	4313      	orrs	r3, r2
 80076e2:	634b      	str	r3, [r1, #52]	@ 0x34
 80076e4:	e13c      	b.n	8007960 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d110      	bne.n	8007718 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80076f6:	69bb      	ldr	r3, [r7, #24]
 80076f8:	015a      	lsls	r2, r3, #5
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	0151      	lsls	r1, r2, #5
 8007708:	69fa      	ldr	r2, [r7, #28]
 800770a:	440a      	add	r2, r1
 800770c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007710:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	e00f      	b.n	8007738 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	015a      	lsls	r2, r3, #5
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	4413      	add	r3, r2
 8007720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	69ba      	ldr	r2, [r7, #24]
 8007728:	0151      	lsls	r1, r2, #5
 800772a:	69fa      	ldr	r2, [r7, #28]
 800772c:	440a      	add	r2, r1
 800772e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007736:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	68d9      	ldr	r1, [r3, #12]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	781a      	ldrb	r2, [r3, #0]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	b298      	uxth	r0, r3
 8007746:	79fb      	ldrb	r3, [r7, #7]
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	4603      	mov	r3, r0
 800774c:	68f8      	ldr	r0, [r7, #12]
 800774e:	f000 f9b9 	bl	8007ac4 <USB_WritePacket>
 8007752:	e105      	b.n	8007960 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	0151      	lsls	r1, r2, #5
 8007766:	69fa      	ldr	r2, [r7, #28]
 8007768:	440a      	add	r2, r1
 800776a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800776e:	0cdb      	lsrs	r3, r3, #19
 8007770:	04db      	lsls	r3, r3, #19
 8007772:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	015a      	lsls	r2, r3, #5
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	4413      	add	r3, r2
 800777c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	0151      	lsls	r1, r2, #5
 8007786:	69fa      	ldr	r2, [r7, #28]
 8007788:	440a      	add	r2, r1
 800778a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800778e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007792:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007796:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d132      	bne.n	8007804 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	689a      	ldr	r2, [r3, #8]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	689a      	ldr	r2, [r3, #8]
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	6a1b      	ldr	r3, [r3, #32]
 80077c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077cc:	69b9      	ldr	r1, [r7, #24]
 80077ce:	0148      	lsls	r0, r1, #5
 80077d0:	69f9      	ldr	r1, [r7, #28]
 80077d2:	4401      	add	r1, r0
 80077d4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80077d8:	4313      	orrs	r3, r2
 80077da:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	015a      	lsls	r2, r3, #5
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	4413      	add	r3, r2
 80077e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	69ba      	ldr	r2, [r7, #24]
 80077ec:	0151      	lsls	r1, r2, #5
 80077ee:	69fa      	ldr	r2, [r7, #28]
 80077f0:	440a      	add	r2, r1
 80077f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80077fa:	6113      	str	r3, [r2, #16]
 80077fc:	e062      	b.n	80078c4 <USB_EPStartXfer+0x490>
 80077fe:	bf00      	nop
 8007800:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d123      	bne.n	8007854 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	015a      	lsls	r2, r3, #5
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	4413      	add	r3, r2
 8007814:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007818:	691a      	ldr	r2, [r3, #16]
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007822:	69b9      	ldr	r1, [r7, #24]
 8007824:	0148      	lsls	r0, r1, #5
 8007826:	69f9      	ldr	r1, [r7, #28]
 8007828:	4401      	add	r1, r0
 800782a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800782e:	4313      	orrs	r3, r2
 8007830:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	015a      	lsls	r2, r3, #5
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	4413      	add	r3, r2
 800783a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	0151      	lsls	r1, r2, #5
 8007844:	69fa      	ldr	r2, [r7, #28]
 8007846:	440a      	add	r2, r1
 8007848:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800784c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007850:	6113      	str	r3, [r2, #16]
 8007852:	e037      	b.n	80078c4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	691a      	ldr	r2, [r3, #16]
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	4413      	add	r3, r2
 800785e:	1e5a      	subs	r2, r3, #1
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	fbb2 f3f3 	udiv	r3, r2, r3
 8007868:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	8afa      	ldrh	r2, [r7, #22]
 8007870:	fb03 f202 	mul.w	r2, r3, r2
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	4413      	add	r3, r2
 8007880:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007884:	691a      	ldr	r2, [r3, #16]
 8007886:	8afb      	ldrh	r3, [r7, #22]
 8007888:	04d9      	lsls	r1, r3, #19
 800788a:	4b38      	ldr	r3, [pc, #224]	@ (800796c <USB_EPStartXfer+0x538>)
 800788c:	400b      	ands	r3, r1
 800788e:	69b9      	ldr	r1, [r7, #24]
 8007890:	0148      	lsls	r0, r1, #5
 8007892:	69f9      	ldr	r1, [r7, #28]
 8007894:	4401      	add	r1, r0
 8007896:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800789a:	4313      	orrs	r3, r2
 800789c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	015a      	lsls	r2, r3, #5
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078aa:	691a      	ldr	r2, [r3, #16]
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	6a1b      	ldr	r3, [r3, #32]
 80078b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078b4:	69b9      	ldr	r1, [r7, #24]
 80078b6:	0148      	lsls	r0, r1, #5
 80078b8:	69f9      	ldr	r1, [r7, #28]
 80078ba:	4401      	add	r1, r0
 80078bc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80078c0:	4313      	orrs	r3, r2
 80078c2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80078c4:	79fb      	ldrb	r3, [r7, #7]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d10d      	bne.n	80078e6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d009      	beq.n	80078e6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	68d9      	ldr	r1, [r3, #12]
 80078d6:	69bb      	ldr	r3, [r7, #24]
 80078d8:	015a      	lsls	r2, r3, #5
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	4413      	add	r3, r2
 80078de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e2:	460a      	mov	r2, r1
 80078e4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	791b      	ldrb	r3, [r3, #4]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d128      	bne.n	8007940 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d110      	bne.n	8007920 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	015a      	lsls	r2, r3, #5
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	4413      	add	r3, r2
 8007906:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	69ba      	ldr	r2, [r7, #24]
 800790e:	0151      	lsls	r1, r2, #5
 8007910:	69fa      	ldr	r2, [r7, #28]
 8007912:	440a      	add	r2, r1
 8007914:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007918:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800791c:	6013      	str	r3, [r2, #0]
 800791e:	e00f      	b.n	8007940 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	015a      	lsls	r2, r3, #5
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	4413      	add	r3, r2
 8007928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69ba      	ldr	r2, [r7, #24]
 8007930:	0151      	lsls	r1, r2, #5
 8007932:	69fa      	ldr	r2, [r7, #28]
 8007934:	440a      	add	r2, r1
 8007936:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800793a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800793e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	4413      	add	r3, r2
 8007948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	69ba      	ldr	r2, [r7, #24]
 8007950:	0151      	lsls	r1, r2, #5
 8007952:	69fa      	ldr	r2, [r7, #28]
 8007954:	440a      	add	r2, r1
 8007956:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800795a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800795e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3720      	adds	r7, #32
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	1ff80000 	.word	0x1ff80000

08007970 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007970:	b480      	push	{r7}
 8007972:	b087      	sub	sp, #28
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800797a:	2300      	movs	r3, #0
 800797c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	785b      	ldrb	r3, [r3, #1]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d14a      	bne.n	8007a24 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	015a      	lsls	r2, r3, #5
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	4413      	add	r3, r2
 8007998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079a6:	f040 8086 	bne.w	8007ab6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	015a      	lsls	r2, r3, #5
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	4413      	add	r3, r2
 80079b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	7812      	ldrb	r2, [r2, #0]
 80079be:	0151      	lsls	r1, r2, #5
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	440a      	add	r2, r1
 80079c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80079cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	7812      	ldrb	r2, [r2, #0]
 80079e2:	0151      	lsls	r1, r2, #5
 80079e4:	693a      	ldr	r2, [r7, #16]
 80079e6:	440a      	add	r2, r1
 80079e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	3301      	adds	r3, #1
 80079f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d902      	bls.n	8007a08 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	75fb      	strb	r3, [r7, #23]
          break;
 8007a06:	e056      	b.n	8007ab6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a20:	d0e7      	beq.n	80079f2 <USB_EPStopXfer+0x82>
 8007a22:	e048      	b.n	8007ab6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	015a      	lsls	r2, r3, #5
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a3c:	d13b      	bne.n	8007ab6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	015a      	lsls	r2, r3, #5
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	4413      	add	r3, r2
 8007a48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	7812      	ldrb	r2, [r2, #0]
 8007a52:	0151      	lsls	r1, r2, #5
 8007a54:	693a      	ldr	r2, [r7, #16]
 8007a56:	440a      	add	r2, r1
 8007a58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a5c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a60:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	7812      	ldrb	r2, [r2, #0]
 8007a76:	0151      	lsls	r1, r2, #5
 8007a78:	693a      	ldr	r2, [r7, #16]
 8007a7a:	440a      	add	r2, r1
 8007a7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d902      	bls.n	8007a9c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	75fb      	strb	r3, [r7, #23]
          break;
 8007a9a:	e00c      	b.n	8007ab6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ab4:	d0e7      	beq.n	8007a86 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	371c      	adds	r7, #28
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b089      	sub	sp, #36	@ 0x24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	4611      	mov	r1, r2
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	71fb      	strb	r3, [r7, #7]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007ae2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d123      	bne.n	8007b32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007aea:	88bb      	ldrh	r3, [r7, #4]
 8007aec:	3303      	adds	r3, #3
 8007aee:	089b      	lsrs	r3, r3, #2
 8007af0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007af2:	2300      	movs	r3, #0
 8007af4:	61bb      	str	r3, [r7, #24]
 8007af6:	e018      	b.n	8007b2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007af8:	79fb      	ldrb	r3, [r7, #7]
 8007afa:	031a      	lsls	r2, r3, #12
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b04:	461a      	mov	r2, r3
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	3301      	adds	r3, #1
 8007b16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	3301      	adds	r3, #1
 8007b22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	3301      	adds	r3, #1
 8007b28:	61bb      	str	r3, [r7, #24]
 8007b2a:	69ba      	ldr	r2, [r7, #24]
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d3e2      	bcc.n	8007af8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3724      	adds	r7, #36	@ 0x24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b08b      	sub	sp, #44	@ 0x2c
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b56:	88fb      	ldrh	r3, [r7, #6]
 8007b58:	089b      	lsrs	r3, r3, #2
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b5e:	88fb      	ldrh	r3, [r7, #6]
 8007b60:	f003 0303 	and.w	r3, r3, #3
 8007b64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007b66:	2300      	movs	r3, #0
 8007b68:	623b      	str	r3, [r7, #32]
 8007b6a:	e014      	b.n	8007b96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b76:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b80:	3301      	adds	r3, #1
 8007b82:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b86:	3301      	adds	r3, #1
 8007b88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	3301      	adds	r3, #1
 8007b94:	623b      	str	r3, [r7, #32]
 8007b96:	6a3a      	ldr	r2, [r7, #32]
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d3e6      	bcc.n	8007b6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007b9e:	8bfb      	ldrh	r3, [r7, #30]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d01e      	beq.n	8007be2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ba8:	69bb      	ldr	r3, [r7, #24]
 8007baa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007bae:	461a      	mov	r2, r3
 8007bb0:	f107 0310 	add.w	r3, r7, #16
 8007bb4:	6812      	ldr	r2, [r2, #0]
 8007bb6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	00db      	lsls	r3, r3, #3
 8007bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc8:	701a      	strb	r2, [r3, #0]
      i++;
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	623b      	str	r3, [r7, #32]
      pDest++;
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007bd6:	8bfb      	ldrh	r3, [r7, #30]
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007bdc:	8bfb      	ldrh	r3, [r7, #30]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1ea      	bne.n	8007bb8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	372c      	adds	r7, #44	@ 0x2c
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	785b      	ldrb	r3, [r3, #1]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d12c      	bne.n	8007c66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	015a      	lsls	r2, r3, #5
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4413      	add	r3, r2
 8007c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	db12      	blt.n	8007c44 <USB_EPSetStall+0x54>
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00f      	beq.n	8007c44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	015a      	lsls	r2, r3, #5
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	0151      	lsls	r1, r2, #5
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	440a      	add	r2, r1
 8007c3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c3e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007c42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	0151      	lsls	r1, r2, #5
 8007c56:	68fa      	ldr	r2, [r7, #12]
 8007c58:	440a      	add	r2, r1
 8007c5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c62:	6013      	str	r3, [r2, #0]
 8007c64:	e02b      	b.n	8007cbe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	015a      	lsls	r2, r3, #5
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	db12      	blt.n	8007c9e <USB_EPSetStall+0xae>
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00f      	beq.n	8007c9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	0151      	lsls	r1, r2, #5
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	440a      	add	r2, r1
 8007c94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c98:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007c9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	0151      	lsls	r1, r2, #5
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	440a      	add	r2, r1
 8007cb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007cb8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007cbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3714      	adds	r7, #20
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	785b      	ldrb	r3, [r3, #1]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d128      	bne.n	8007d3a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68ba      	ldr	r2, [r7, #8]
 8007cf8:	0151      	lsls	r1, r2, #5
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	440a      	add	r2, r1
 8007cfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	791b      	ldrb	r3, [r3, #4]
 8007d0c:	2b03      	cmp	r3, #3
 8007d0e:	d003      	beq.n	8007d18 <USB_EPClearStall+0x4c>
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	791b      	ldrb	r3, [r3, #4]
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d138      	bne.n	8007d8a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	0151      	lsls	r1, r2, #5
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	440a      	add	r2, r1
 8007d2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d36:	6013      	str	r3, [r2, #0]
 8007d38:	e027      	b.n	8007d8a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	015a      	lsls	r2, r3, #5
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	4413      	add	r3, r2
 8007d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	0151      	lsls	r1, r2, #5
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	440a      	add	r2, r1
 8007d50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d54:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	791b      	ldrb	r3, [r3, #4]
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	d003      	beq.n	8007d6a <USB_EPClearStall+0x9e>
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	791b      	ldrb	r3, [r3, #4]
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d10f      	bne.n	8007d8a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	0151      	lsls	r1, r2, #5
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	440a      	add	r2, r1
 8007d80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d88:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	460b      	mov	r3, r1
 8007da2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007db6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007dba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	78fb      	ldrb	r3, [r7, #3]
 8007dc6:	011b      	lsls	r3, r3, #4
 8007dc8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007dcc:	68f9      	ldr	r1, [r7, #12]
 8007dce:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007dd6:	2300      	movs	r3, #0
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007dfe:	f023 0303 	bic.w	r3, r3, #3
 8007e02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e12:	f023 0302 	bic.w	r3, r3, #2
 8007e16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b085      	sub	sp, #20
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e40:	f023 0303 	bic.w	r3, r3, #3
 8007e44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e54:	f043 0302 	orr.w	r3, r3, #2
 8007e58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	695b      	ldr	r3, [r3, #20]
 8007e74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e80:	68fb      	ldr	r3, [r7, #12]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3714      	adds	r7, #20
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr

08007e8e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e8e:	b480      	push	{r7}
 8007e90:	b085      	sub	sp, #20
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eaa:	69db      	ldr	r3, [r3, #28]
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	4013      	ands	r3, r2
 8007eb0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	0c1b      	lsrs	r3, r3, #16
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3714      	adds	r7, #20
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ec2:	b480      	push	{r7}
 8007ec4:	b085      	sub	sp, #20
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ede:	69db      	ldr	r3, [r3, #28]
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	b29b      	uxth	r3, r3
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b085      	sub	sp, #20
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	460b      	mov	r3, r1
 8007f00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007f06:	78fb      	ldrb	r3, [r7, #3]
 8007f08:	015a      	lsls	r2, r3, #5
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	4013      	ands	r3, r2
 8007f22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f24:	68bb      	ldr	r3, [r7, #8]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b087      	sub	sp, #28
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f54:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007f56:	78fb      	ldrb	r3, [r7, #3]
 8007f58:	f003 030f 	and.w	r3, r3, #15
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f62:	01db      	lsls	r3, r3, #7
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007f6c:	78fb      	ldrb	r3, [r7, #3]
 8007f6e:	015a      	lsls	r2, r3, #5
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	4413      	add	r3, r2
 8007f74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	693a      	ldr	r2, [r7, #16]
 8007f7c:	4013      	ands	r3, r2
 8007f7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f80:	68bb      	ldr	r3, [r7, #8]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	371c      	adds	r7, #28
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b083      	sub	sp, #12
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	f003 0301 	and.w	r3, r3, #1
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b085      	sub	sp, #20
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fc4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007fc8:	f023 0307 	bic.w	r3, r3, #7
 8007fcc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fe0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	607a      	str	r2, [r7, #4]
 8007ffc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	333c      	adds	r3, #60	@ 0x3c
 8008006:	3304      	adds	r3, #4
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	4a26      	ldr	r2, [pc, #152]	@ (80080a8 <USB_EP0_OutStart+0xb8>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d90a      	bls.n	800802a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008020:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008024:	d101      	bne.n	800802a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008026:	2300      	movs	r3, #0
 8008028:	e037      	b.n	800809a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008030:	461a      	mov	r2, r3
 8008032:	2300      	movs	r3, #0
 8008034:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008044:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008048:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008058:	f043 0318 	orr.w	r3, r3, #24
 800805c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	697a      	ldr	r2, [r7, #20]
 8008068:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800806c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008070:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008072:	7afb      	ldrb	r3, [r7, #11]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d10f      	bne.n	8008098 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800807e:	461a      	mov	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	697a      	ldr	r2, [r7, #20]
 800808e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008092:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008096:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	371c      	adds	r7, #28
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	4f54300a 	.word	0x4f54300a

080080ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b085      	sub	sp, #20
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	3301      	adds	r3, #1
 80080bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080c4:	d901      	bls.n	80080ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80080c6:	2303      	movs	r3, #3
 80080c8:	e01b      	b.n	8008102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	daf2      	bge.n	80080b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	f043 0201 	orr.w	r2, r3, #1
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	3301      	adds	r3, #1
 80080e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080ee:	d901      	bls.n	80080f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e006      	b.n	8008102 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d0f0      	beq.n	80080e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3714      	adds	r7, #20
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
	...

08008110 <Motor_setup_LF>:
char* IN_RF;
char* IN_RB;
char* IN_EXTRA1;
char* IN_EXTRA2;

void Motor_setup_LF(TIM_HandleTypeDef *_TIM_14_CH1 ,TIM_HandleTypeDef *_TIM_5  ,char* _IN_LF){
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
	//Motor_setup_LF(PWM_TIM ,Encoder_TIM   ,IN_LF);

	LF_PWM = _TIM_14_CH1;
 800811c:	4a0f      	ldr	r2, [pc, #60]	@ (800815c <Motor_setup_LF+0x4c>)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6013      	str	r3, [r2, #0]
	EN_LF      = _TIM_5;
 8008122:	4a0f      	ldr	r2, [pc, #60]	@ (8008160 <Motor_setup_LF+0x50>)
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(LF_PWM, TIM_CHANNEL_1);       //PWM
 8008128:	4b0c      	ldr	r3, [pc, #48]	@ (800815c <Motor_setup_LF+0x4c>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2100      	movs	r1, #0
 800812e:	4618      	mov	r0, r3
 8008130:	f7fc ff76 	bl	8005020 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_LF , TIM_CHANNEL_ALL);     //Encoder
 8008134:	4b0a      	ldr	r3, [pc, #40]	@ (8008160 <Motor_setup_LF+0x50>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	213c      	movs	r1, #60	@ 0x3c
 800813a:	4618      	mov	r0, r3
 800813c:	f7fd f8de 	bl	80052fc <HAL_TIM_Encoder_Start>

	IN_LF = _IN_LF;
 8008140:	4a08      	ldr	r2, [pc, #32]	@ (8008164 <Motor_setup_LF+0x54>)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6013      	str	r3, [r2, #0]

	DutyCycle_LF_MAX = (LF_PWM->Init.Period);
 8008146:	4b05      	ldr	r3, [pc, #20]	@ (800815c <Motor_setup_LF+0x4c>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	b21a      	sxth	r2, r3
 800814e:	4b06      	ldr	r3, [pc, #24]	@ (8008168 <Motor_setup_LF+0x58>)
 8008150:	801a      	strh	r2, [r3, #0]

}
 8008152:	bf00      	nop
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	2000066c 	.word	0x2000066c
 8008160:	20000654 	.word	0x20000654
 8008164:	20000690 	.word	0x20000690
 8008168:	20000684 	.word	0x20000684

0800816c <Motor_setup_LB>:

void Motor_setup_LB(TIM_HandleTypeDef *_TIM_12_CH1 ,TIM_HandleTypeDef *_TIM_1  ,char* _IN_LB){
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
    //Motor_setup_LB(PWM_TIM ,Encoder_TIM  ,IN1_LB ,IN2_LB);

	LB_PWM = _TIM_12_CH1;
 8008178:	4a0f      	ldr	r2, [pc, #60]	@ (80081b8 <Motor_setup_LB+0x4c>)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6013      	str	r3, [r2, #0]
	EN_LB      = _TIM_1;
 800817e:	4a0f      	ldr	r2, [pc, #60]	@ (80081bc <Motor_setup_LB+0x50>)
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(LB_PWM, TIM_CHANNEL_1);       //PWM
 8008184:	4b0c      	ldr	r3, [pc, #48]	@ (80081b8 <Motor_setup_LB+0x4c>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2100      	movs	r1, #0
 800818a:	4618      	mov	r0, r3
 800818c:	f7fc ff48 	bl	8005020 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_LB , TIM_CHANNEL_ALL);     //Encoder
 8008190:	4b0a      	ldr	r3, [pc, #40]	@ (80081bc <Motor_setup_LB+0x50>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	213c      	movs	r1, #60	@ 0x3c
 8008196:	4618      	mov	r0, r3
 8008198:	f7fd f8b0 	bl	80052fc <HAL_TIM_Encoder_Start>

	IN_LB = _IN_LB;
 800819c:	4a08      	ldr	r2, [pc, #32]	@ (80081c0 <Motor_setup_LB+0x54>)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6013      	str	r3, [r2, #0]

	DutyCycle_LB_MAX = (LB_PWM->Init.Period);
 80081a2:	4b05      	ldr	r3, [pc, #20]	@ (80081b8 <Motor_setup_LB+0x4c>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68db      	ldr	r3, [r3, #12]
 80081a8:	b21a      	sxth	r2, r3
 80081aa:	4b06      	ldr	r3, [pc, #24]	@ (80081c4 <Motor_setup_LB+0x58>)
 80081ac:	801a      	strh	r2, [r3, #0]

}
 80081ae:	bf00      	nop
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	20000670 	.word	0x20000670
 80081bc:	20000658 	.word	0x20000658
 80081c0:	20000694 	.word	0x20000694
 80081c4:	20000686 	.word	0x20000686

080081c8 <Motor_setup_RF>:

void Motor_setup_RF(TIM_HandleTypeDef *_TIM_11_CH1  ,TIM_HandleTypeDef *_TIM_8  ,char* _IN_RF){
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
    //Motor_setup_RF(PWM_TIM ,Encoder_TIM   ,IN1_RF ,IN2_RF);

	RF_PWM = _TIM_11_CH1;
 80081d4:	4a0f      	ldr	r2, [pc, #60]	@ (8008214 <Motor_setup_RF+0x4c>)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6013      	str	r3, [r2, #0]
	EN_RF  = _TIM_8;
 80081da:	4a0f      	ldr	r2, [pc, #60]	@ (8008218 <Motor_setup_RF+0x50>)
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(RF_PWM, TIM_CHANNEL_1);           //PWM
 80081e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008214 <Motor_setup_RF+0x4c>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2100      	movs	r1, #0
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7fc ff1a 	bl	8005020 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_RF , TIM_CHANNEL_ALL);     //Encoder
 80081ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008218 <Motor_setup_RF+0x50>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	213c      	movs	r1, #60	@ 0x3c
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7fd f882 	bl	80052fc <HAL_TIM_Encoder_Start>

	IN_RF = _IN_RF;
 80081f8:	4a08      	ldr	r2, [pc, #32]	@ (800821c <Motor_setup_RF+0x54>)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6013      	str	r3, [r2, #0]

	DutyCycle_RF_MAX = (RF_PWM->Init.Period);
 80081fe:	4b05      	ldr	r3, [pc, #20]	@ (8008214 <Motor_setup_RF+0x4c>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	b21a      	sxth	r2, r3
 8008206:	4b06      	ldr	r3, [pc, #24]	@ (8008220 <Motor_setup_RF+0x58>)
 8008208:	801a      	strh	r2, [r3, #0]

}
 800820a:	bf00      	nop
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	20000674 	.word	0x20000674
 8008218:	2000065c 	.word	0x2000065c
 800821c:	20000698 	.word	0x20000698
 8008220:	20000688 	.word	0x20000688

08008224 <Motor_setup_RB>:

void Motor_setup_RB(TIM_HandleTypeDef *_TIM_12_CH2   ,TIM_HandleTypeDef *_TIM_4 ,char* _IN_RB){
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	RB_PWM = _TIM_12_CH2;
 8008230:	4a0f      	ldr	r2, [pc, #60]	@ (8008270 <Motor_setup_RB+0x4c>)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6013      	str	r3, [r2, #0]
	EN_RB  = _TIM_4;
 8008236:	4a0f      	ldr	r2, [pc, #60]	@ (8008274 <Motor_setup_RB+0x50>)
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(RB_PWM, TIM_CHANNEL_2);            //PWM
 800823c:	4b0c      	ldr	r3, [pc, #48]	@ (8008270 <Motor_setup_RB+0x4c>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2104      	movs	r1, #4
 8008242:	4618      	mov	r0, r3
 8008244:	f7fc feec 	bl	8005020 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_RB , TIM_CHANNEL_ALL);      //Encoder
 8008248:	4b0a      	ldr	r3, [pc, #40]	@ (8008274 <Motor_setup_RB+0x50>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	213c      	movs	r1, #60	@ 0x3c
 800824e:	4618      	mov	r0, r3
 8008250:	f7fd f854 	bl	80052fc <HAL_TIM_Encoder_Start>

	IN_RB = _IN_RB;
 8008254:	4a08      	ldr	r2, [pc, #32]	@ (8008278 <Motor_setup_RB+0x54>)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6013      	str	r3, [r2, #0]

	DutyCycle_RB_MAX = (RB_PWM->Init.Period);
 800825a:	4b05      	ldr	r3, [pc, #20]	@ (8008270 <Motor_setup_RB+0x4c>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	b21a      	sxth	r2, r3
 8008262:	4b06      	ldr	r3, [pc, #24]	@ (800827c <Motor_setup_RB+0x58>)
 8008264:	801a      	strh	r2, [r3, #0]

}
 8008266:	bf00      	nop
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	20000678 	.word	0x20000678
 8008274:	20000660 	.word	0x20000660
 8008278:	2000069c 	.word	0x2000069c
 800827c:	2000068a 	.word	0x2000068a

08008280 <Motor_setup_EXTRA1>:

void Motor_setup_EXTRA1(TIM_HandleTypeDef *_TIM_9_CH1  ,TIM_HandleTypeDef *_TIM_3  ,char* _IN_EXTRA1){
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	EXTRA1_PWM = _TIM_9_CH1;
 800828c:	4a0f      	ldr	r2, [pc, #60]	@ (80082cc <Motor_setup_EXTRA1+0x4c>)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6013      	str	r3, [r2, #0]
	EN_X  = _TIM_3;
 8008292:	4a0f      	ldr	r2, [pc, #60]	@ (80082d0 <Motor_setup_EXTRA1+0x50>)
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(EXTRA1_PWM, TIM_CHANNEL_1);            //PWM
 8008298:	4b0c      	ldr	r3, [pc, #48]	@ (80082cc <Motor_setup_EXTRA1+0x4c>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2100      	movs	r1, #0
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fc febe 	bl	8005020 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_X , TIM_CHANNEL_ALL);      //Encoder
 80082a4:	4b0a      	ldr	r3, [pc, #40]	@ (80082d0 <Motor_setup_EXTRA1+0x50>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	213c      	movs	r1, #60	@ 0x3c
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fd f826 	bl	80052fc <HAL_TIM_Encoder_Start>

	IN_EXTRA1 = _IN_EXTRA1;
 80082b0:	4a08      	ldr	r2, [pc, #32]	@ (80082d4 <Motor_setup_EXTRA1+0x54>)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6013      	str	r3, [r2, #0]

	DutyCycle_EXTRA1_MAX = (EXTRA1_PWM->Init.Period);
 80082b6:	4b05      	ldr	r3, [pc, #20]	@ (80082cc <Motor_setup_EXTRA1+0x4c>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	b21a      	sxth	r2, r3
 80082be:	4b06      	ldr	r3, [pc, #24]	@ (80082d8 <Motor_setup_EXTRA1+0x58>)
 80082c0:	801a      	strh	r2, [r3, #0]

}
 80082c2:	bf00      	nop
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	2000067c 	.word	0x2000067c
 80082d0:	20000664 	.word	0x20000664
 80082d4:	200006a0 	.word	0x200006a0
 80082d8:	2000068c 	.word	0x2000068c

080082dc <Motor_setup_EXTRA2>:

void Motor_setup_EXTRA2(TIM_HandleTypeDef *_TIM_10_CH1  ,TIM_HandleTypeDef *_TIM_2 ,char* _IN_EXTRA2){
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	EXTRA2_PWM = _TIM_10_CH1;
 80082e8:	4a0f      	ldr	r2, [pc, #60]	@ (8008328 <Motor_setup_EXTRA2+0x4c>)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6013      	str	r3, [r2, #0]
	EN_Y  = _TIM_2;
 80082ee:	4a0f      	ldr	r2, [pc, #60]	@ (800832c <Motor_setup_EXTRA2+0x50>)
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(EXTRA2_PWM, TIM_CHANNEL_1);            //PWM
 80082f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008328 <Motor_setup_EXTRA2+0x4c>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2100      	movs	r1, #0
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7fc fe90 	bl	8005020 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_Y , TIM_CHANNEL_ALL);      //Encoder
 8008300:	4b0a      	ldr	r3, [pc, #40]	@ (800832c <Motor_setup_EXTRA2+0x50>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	213c      	movs	r1, #60	@ 0x3c
 8008306:	4618      	mov	r0, r3
 8008308:	f7fc fff8 	bl	80052fc <HAL_TIM_Encoder_Start>

	IN_EXTRA2 = _IN_EXTRA2;
 800830c:	4a08      	ldr	r2, [pc, #32]	@ (8008330 <Motor_setup_EXTRA2+0x54>)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6013      	str	r3, [r2, #0]

	DutyCycle_EXTRA2_MAX = (EXTRA2_PWM->Init.Period);
 8008312:	4b05      	ldr	r3, [pc, #20]	@ (8008328 <Motor_setup_EXTRA2+0x4c>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	b21a      	sxth	r2, r3
 800831a:	4b06      	ldr	r3, [pc, #24]	@ (8008334 <Motor_setup_EXTRA2+0x58>)
 800831c:	801a      	strh	r2, [r3, #0]

}
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	20000680 	.word	0x20000680
 800832c:	20000668 	.word	0x20000668
 8008330:	200006a4 	.word	0x200006a4
 8008334:	2000068e 	.word	0x2000068e

08008338 <getCount>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////PID///////////////////////////////////////////////////////////////

int16_t getCount(TIM_HandleTypeDef *TIM){
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
	int16_t count = ((int16_t)(TIM->Instance->CNT));
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008346:	81fb      	strh	r3, [r7, #14]

	return count;
 8008348:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3714      	adds	r7, #20
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <Setup_CPR>:

float _RPM[6] = {0 ,0 ,0 ,0 ,0 ,0}; //Speed   //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

uint16_t CPR = 68;

void Setup_CPR(uint16_t _CPR){
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	4603      	mov	r3, r0
 8008360:	80fb      	strh	r3, [r7, #6]
	CPR = _CPR;
 8008362:	4a04      	ldr	r2, [pc, #16]	@ (8008374 <Setup_CPR+0x1c>)
 8008364:	88fb      	ldrh	r3, [r7, #6]
 8008366:	8013      	strh	r3, [r2, #0]
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	20000018 	.word	0x20000018

08008378 <Setup_Gear_Ratio>:

uint16_t Gear_Ratio = 48;

void Setup_Gear_Ratio(uint16_t _Gear_Ratio){
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	4603      	mov	r3, r0
 8008380:	80fb      	strh	r3, [r7, #6]
	Gear_Ratio = _Gear_Ratio;
 8008382:	4a04      	ldr	r2, [pc, #16]	@ (8008394 <Setup_Gear_Ratio+0x1c>)
 8008384:	88fb      	ldrh	r3, [r7, #6]
 8008386:	8013      	strh	r3, [r2, #0]
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	2000001a 	.word	0x2000001a

08008398 <Setup_frequency_Motor>:

void Setup_frequency_Motor(uint16_t freq){
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	4603      	mov	r3, r0
 80083a0:	80fb      	strh	r3, [r7, #6]
	_freq = freq;
 80083a2:	4a04      	ldr	r2, [pc, #16]	@ (80083b4 <Setup_frequency_Motor+0x1c>)
 80083a4:	88fb      	ldrh	r3, [r7, #6]
 80083a6:	8013      	strh	r3, [r2, #0]
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	20000016 	.word	0x20000016

080083b8 <getRad_s_to_RPM>:
	float Rad_s = RPM * 0.10472f;

	return Rad_s;
}

float getRad_s_to_RPM(float Rad_s){
 80083b8:	b480      	push	{r7}
 80083ba:	b085      	sub	sp, #20
 80083bc:	af00      	add	r7, sp, #0
 80083be:	ed87 0a01 	vstr	s0, [r7, #4]
	float RPM__ = Rad_s * 9.549297f;
 80083c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80083c6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80083e8 <getRad_s_to_RPM+0x30>
 80083ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80083ce:	edc7 7a03 	vstr	s15, [r7, #12]

	return RPM__;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	ee07 3a90 	vmov	s15, r3
}
 80083d8:	eeb0 0a67 	vmov.f32	s0, s15
 80083dc:	3714      	adds	r7, #20
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	4118c9ec 	.word	0x4118c9ec

080083ec <getRPM_TIM_Wheel>:

float getRPM_TIM_Wheel(TIM_HandleTypeDef *TIM ,uint8_t _Wheel){
 80083ec:	b590      	push	{r4, r7, lr}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	460b      	mov	r3, r1
 80083f6:	70fb      	strb	r3, [r7, #3]
	Present_Count[_Wheel] = (int16_t)getCount(TIM);
 80083f8:	78fc      	ldrb	r4, [r7, #3]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7ff ff9c 	bl	8008338 <getCount>
 8008400:	4603      	mov	r3, r0
 8008402:	461a      	mov	r2, r3
 8008404:	4b29      	ldr	r3, [pc, #164]	@ (80084ac <getRPM_TIM_Wheel+0xc0>)
 8008406:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	// V = count/t = count*freq
	_RPM[_Wheel] = (float)((int16_t)(Present_Count[_Wheel] - Past_Count[_Wheel]) * _freq);
 800840a:	78fb      	ldrb	r3, [r7, #3]
 800840c:	4a27      	ldr	r2, [pc, #156]	@ (80084ac <getRPM_TIM_Wheel+0xc0>)
 800840e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8008412:	b29a      	uxth	r2, r3
 8008414:	78fb      	ldrb	r3, [r7, #3]
 8008416:	4926      	ldr	r1, [pc, #152]	@ (80084b0 <getRPM_TIM_Wheel+0xc4>)
 8008418:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800841c:	b29b      	uxth	r3, r3
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	b29b      	uxth	r3, r3
 8008422:	b21b      	sxth	r3, r3
 8008424:	461a      	mov	r2, r3
 8008426:	4b23      	ldr	r3, [pc, #140]	@ (80084b4 <getRPM_TIM_Wheel+0xc8>)
 8008428:	881b      	ldrh	r3, [r3, #0]
 800842a:	fb03 f202 	mul.w	r2, r3, r2
 800842e:	78fb      	ldrb	r3, [r7, #3]
 8008430:	ee07 2a90 	vmov	s15, r2
 8008434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008438:	4a1f      	ldr	r2, [pc, #124]	@ (80084b8 <getRPM_TIM_Wheel+0xcc>)
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	4413      	add	r3, r2
 800843e:	edc3 7a00 	vstr	s15, [r3]
	_RPM[_Wheel] = (float)(((_RPM[_Wheel]* 60.0f)/CPR )/Gear_Ratio);
 8008442:	78fb      	ldrb	r3, [r7, #3]
 8008444:	4a1c      	ldr	r2, [pc, #112]	@ (80084b8 <getRPM_TIM_Wheel+0xcc>)
 8008446:	009b      	lsls	r3, r3, #2
 8008448:	4413      	add	r3, r2
 800844a:	edd3 7a00 	vldr	s15, [r3]
 800844e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80084bc <getRPM_TIM_Wheel+0xd0>
 8008452:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008456:	4b1a      	ldr	r3, [pc, #104]	@ (80084c0 <getRPM_TIM_Wheel+0xd4>)
 8008458:	881b      	ldrh	r3, [r3, #0]
 800845a:	ee07 3a90 	vmov	s15, r3
 800845e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008462:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008466:	4b17      	ldr	r3, [pc, #92]	@ (80084c4 <getRPM_TIM_Wheel+0xd8>)
 8008468:	881b      	ldrh	r3, [r3, #0]
 800846a:	ee07 3a90 	vmov	s15, r3
 800846e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008472:	78fb      	ldrb	r3, [r7, #3]
 8008474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008478:	4a0f      	ldr	r2, [pc, #60]	@ (80084b8 <getRPM_TIM_Wheel+0xcc>)
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	edc3 7a00 	vstr	s15, [r3]

	Past_Count[_Wheel] = Present_Count[_Wheel];
 8008482:	78fa      	ldrb	r2, [r7, #3]
 8008484:	78fb      	ldrb	r3, [r7, #3]
 8008486:	4909      	ldr	r1, [pc, #36]	@ (80084ac <getRPM_TIM_Wheel+0xc0>)
 8008488:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800848c:	4a08      	ldr	r2, [pc, #32]	@ (80084b0 <getRPM_TIM_Wheel+0xc4>)
 800848e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return _RPM[_Wheel];
 8008492:	78fb      	ldrb	r3, [r7, #3]
 8008494:	4a08      	ldr	r2, [pc, #32]	@ (80084b8 <getRPM_TIM_Wheel+0xcc>)
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	ee07 3a90 	vmov	s15, r3
}
 80084a0:	eeb0 0a67 	vmov.f32	s0, s15
 80084a4:	370c      	adds	r7, #12
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd90      	pop	{r4, r7, pc}
 80084aa:	bf00      	nop
 80084ac:	200006a8 	.word	0x200006a8
 80084b0:	200006b4 	.word	0x200006b4
 80084b4:	20000016 	.word	0x20000016
 80084b8:	200006c0 	.word	0x200006c0
 80084bc:	42700000 	.word	0x42700000
 80084c0:	20000018 	.word	0x20000018
 80084c4:	2000001a 	.word	0x2000001a

080084c8 <Setup_PID_LF>:

float min_speed[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2
float max_speed[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2


void Setup_PID_LF(float Kp_LF ,float Ki_LF ,float Kd_LF ,float min_speed_LF ,float max_speed_LF){
 80084c8:	b480      	push	{r7}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	ed87 0a05 	vstr	s0, [r7, #20]
 80084d2:	edc7 0a04 	vstr	s1, [r7, #16]
 80084d6:	ed87 1a03 	vstr	s2, [r7, #12]
 80084da:	edc7 1a02 	vstr	s3, [r7, #8]
 80084de:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[0] = Kp_LF;
 80084e2:	4a0a      	ldr	r2, [pc, #40]	@ (800850c <Setup_PID_LF+0x44>)
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	6013      	str	r3, [r2, #0]
	Ki_Wheel[0] = Ki_LF;
 80084e8:	4a09      	ldr	r2, [pc, #36]	@ (8008510 <Setup_PID_LF+0x48>)
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	6013      	str	r3, [r2, #0]
	Kd_Wheel[0] = Kd_LF;
 80084ee:	4a09      	ldr	r2, [pc, #36]	@ (8008514 <Setup_PID_LF+0x4c>)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6013      	str	r3, [r2, #0]

	min_speed[0] = min_speed_LF;
 80084f4:	4a08      	ldr	r2, [pc, #32]	@ (8008518 <Setup_PID_LF+0x50>)
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	6013      	str	r3, [r2, #0]
	max_speed[0] = max_speed_LF;
 80084fa:	4a08      	ldr	r2, [pc, #32]	@ (800851c <Setup_PID_LF+0x54>)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6013      	str	r3, [r2, #0]
}
 8008500:	bf00      	nop
 8008502:	371c      	adds	r7, #28
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr
 800850c:	200006d8 	.word	0x200006d8
 8008510:	200006f0 	.word	0x200006f0
 8008514:	20000708 	.word	0x20000708
 8008518:	20000720 	.word	0x20000720
 800851c:	20000738 	.word	0x20000738

08008520 <Setup_PID_LB>:

void Setup_PID_LB(float Kp_LB ,float Ki_LB ,float Kd_LB ,float min_speed_LB ,float max_speed_LB){
 8008520:	b480      	push	{r7}
 8008522:	b087      	sub	sp, #28
 8008524:	af00      	add	r7, sp, #0
 8008526:	ed87 0a05 	vstr	s0, [r7, #20]
 800852a:	edc7 0a04 	vstr	s1, [r7, #16]
 800852e:	ed87 1a03 	vstr	s2, [r7, #12]
 8008532:	edc7 1a02 	vstr	s3, [r7, #8]
 8008536:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[1] = Kp_LB;
 800853a:	4a0a      	ldr	r2, [pc, #40]	@ (8008564 <Setup_PID_LB+0x44>)
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	6053      	str	r3, [r2, #4]
	Ki_Wheel[1] = Ki_LB;
 8008540:	4a09      	ldr	r2, [pc, #36]	@ (8008568 <Setup_PID_LB+0x48>)
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	6053      	str	r3, [r2, #4]
	Kd_Wheel[1] = Kd_LB;
 8008546:	4a09      	ldr	r2, [pc, #36]	@ (800856c <Setup_PID_LB+0x4c>)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6053      	str	r3, [r2, #4]

	min_speed[1] = min_speed_LB;
 800854c:	4a08      	ldr	r2, [pc, #32]	@ (8008570 <Setup_PID_LB+0x50>)
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	6053      	str	r3, [r2, #4]
	max_speed[1] = max_speed_LB;
 8008552:	4a08      	ldr	r2, [pc, #32]	@ (8008574 <Setup_PID_LB+0x54>)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6053      	str	r3, [r2, #4]
}
 8008558:	bf00      	nop
 800855a:	371c      	adds	r7, #28
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr
 8008564:	200006d8 	.word	0x200006d8
 8008568:	200006f0 	.word	0x200006f0
 800856c:	20000708 	.word	0x20000708
 8008570:	20000720 	.word	0x20000720
 8008574:	20000738 	.word	0x20000738

08008578 <Setup_PID_RF>:

void Setup_PID_RF(float Kp_RF ,float Ki_RF ,float Kd_RF ,float min_speed_RF ,float max_speed_RF){
 8008578:	b480      	push	{r7}
 800857a:	b087      	sub	sp, #28
 800857c:	af00      	add	r7, sp, #0
 800857e:	ed87 0a05 	vstr	s0, [r7, #20]
 8008582:	edc7 0a04 	vstr	s1, [r7, #16]
 8008586:	ed87 1a03 	vstr	s2, [r7, #12]
 800858a:	edc7 1a02 	vstr	s3, [r7, #8]
 800858e:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[2] = Kp_RF;
 8008592:	4a0a      	ldr	r2, [pc, #40]	@ (80085bc <Setup_PID_RF+0x44>)
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	6093      	str	r3, [r2, #8]
	Ki_Wheel[2] = Ki_RF;
 8008598:	4a09      	ldr	r2, [pc, #36]	@ (80085c0 <Setup_PID_RF+0x48>)
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	6093      	str	r3, [r2, #8]
	Kd_Wheel[2] = Kd_RF;
 800859e:	4a09      	ldr	r2, [pc, #36]	@ (80085c4 <Setup_PID_RF+0x4c>)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6093      	str	r3, [r2, #8]

	min_speed[2] = min_speed_RF;
 80085a4:	4a08      	ldr	r2, [pc, #32]	@ (80085c8 <Setup_PID_RF+0x50>)
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	6093      	str	r3, [r2, #8]
	max_speed[2] = max_speed_RF;
 80085aa:	4a08      	ldr	r2, [pc, #32]	@ (80085cc <Setup_PID_RF+0x54>)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6093      	str	r3, [r2, #8]
}
 80085b0:	bf00      	nop
 80085b2:	371c      	adds	r7, #28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	200006d8 	.word	0x200006d8
 80085c0:	200006f0 	.word	0x200006f0
 80085c4:	20000708 	.word	0x20000708
 80085c8:	20000720 	.word	0x20000720
 80085cc:	20000738 	.word	0x20000738

080085d0 <Setup_PID_RB>:

void Setup_PID_RB(float Kp_RB ,float Ki_RB ,float Kd_RB ,float min_speed_RB ,float max_speed_RB){
 80085d0:	b480      	push	{r7}
 80085d2:	b087      	sub	sp, #28
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	ed87 0a05 	vstr	s0, [r7, #20]
 80085da:	edc7 0a04 	vstr	s1, [r7, #16]
 80085de:	ed87 1a03 	vstr	s2, [r7, #12]
 80085e2:	edc7 1a02 	vstr	s3, [r7, #8]
 80085e6:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[3] = Kp_RB;
 80085ea:	4a0a      	ldr	r2, [pc, #40]	@ (8008614 <Setup_PID_RB+0x44>)
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	60d3      	str	r3, [r2, #12]
	Ki_Wheel[3] = Ki_RB;
 80085f0:	4a09      	ldr	r2, [pc, #36]	@ (8008618 <Setup_PID_RB+0x48>)
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	60d3      	str	r3, [r2, #12]
	Kd_Wheel[3] = Kd_RB;
 80085f6:	4a09      	ldr	r2, [pc, #36]	@ (800861c <Setup_PID_RB+0x4c>)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	60d3      	str	r3, [r2, #12]

	min_speed[3] = min_speed_RB;
 80085fc:	4a08      	ldr	r2, [pc, #32]	@ (8008620 <Setup_PID_RB+0x50>)
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	60d3      	str	r3, [r2, #12]
	max_speed[3] = max_speed_RB;
 8008602:	4a08      	ldr	r2, [pc, #32]	@ (8008624 <Setup_PID_RB+0x54>)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	60d3      	str	r3, [r2, #12]
}
 8008608:	bf00      	nop
 800860a:	371c      	adds	r7, #28
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr
 8008614:	200006d8 	.word	0x200006d8
 8008618:	200006f0 	.word	0x200006f0
 800861c:	20000708 	.word	0x20000708
 8008620:	20000720 	.word	0x20000720
 8008624:	20000738 	.word	0x20000738

08008628 <PID_Speed>:

float Past_Error[6]   = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float Output_PID[6]    = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float PID_Speed(float _Setpoint ,int16_t RPM ,uint8_t _Wheel){
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	ed87 0a01 	vstr	s0, [r7, #4]
 8008632:	4603      	mov	r3, r0
 8008634:	460a      	mov	r2, r1
 8008636:	807b      	strh	r3, [r7, #2]
 8008638:	4613      	mov	r3, r2
 800863a:	707b      	strb	r3, [r7, #1]
//	  case 4 : getRPM_TIM_Wheel(EN_X ,EXTRA1 ); break;
//	  case 5 : getRPM_TIM_Wheel(EN_Y ,EXTRA2 ); break;
//	}

//	Error_Speed[_Wheel] = _Setpoint-_RPM[_Wheel];
	Error_Speed[_Wheel] = _Setpoint-RPM;
 800863c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008640:	ee07 3a90 	vmov	s15, r3
 8008644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008648:	787b      	ldrb	r3, [r7, #1]
 800864a:	ed97 7a01 	vldr	s14, [r7, #4]
 800864e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008652:	4a41      	ldr	r2, [pc, #260]	@ (8008758 <PID_Speed+0x130>)
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4413      	add	r3, r2
 8008658:	edc3 7a00 	vstr	s15, [r3]

	Proportional[_Wheel] = Error_Speed[_Wheel];
 800865c:	787a      	ldrb	r2, [r7, #1]
 800865e:	787b      	ldrb	r3, [r7, #1]
 8008660:	493d      	ldr	r1, [pc, #244]	@ (8008758 <PID_Speed+0x130>)
 8008662:	0092      	lsls	r2, r2, #2
 8008664:	440a      	add	r2, r1
 8008666:	6812      	ldr	r2, [r2, #0]
 8008668:	493c      	ldr	r1, [pc, #240]	@ (800875c <PID_Speed+0x134>)
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	440b      	add	r3, r1
 800866e:	601a      	str	r2, [r3, #0]
	Integnator[_Wheel]   += Error_Speed[_Wheel];
 8008670:	787b      	ldrb	r3, [r7, #1]
 8008672:	4a3b      	ldr	r2, [pc, #236]	@ (8008760 <PID_Speed+0x138>)
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	ed93 7a00 	vldr	s14, [r3]
 800867c:	787b      	ldrb	r3, [r7, #1]
 800867e:	4a36      	ldr	r2, [pc, #216]	@ (8008758 <PID_Speed+0x130>)
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4413      	add	r3, r2
 8008684:	edd3 7a00 	vldr	s15, [r3]
 8008688:	787b      	ldrb	r3, [r7, #1]
 800868a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800868e:	4a34      	ldr	r2, [pc, #208]	@ (8008760 <PID_Speed+0x138>)
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	4413      	add	r3, r2
 8008694:	edc3 7a00 	vstr	s15, [r3]
	Derivative[_Wheel]   = Error_Speed[_Wheel] - Past_Error[_Wheel];
 8008698:	787b      	ldrb	r3, [r7, #1]
 800869a:	4a2f      	ldr	r2, [pc, #188]	@ (8008758 <PID_Speed+0x130>)
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	4413      	add	r3, r2
 80086a0:	ed93 7a00 	vldr	s14, [r3]
 80086a4:	787b      	ldrb	r3, [r7, #1]
 80086a6:	4a2f      	ldr	r2, [pc, #188]	@ (8008764 <PID_Speed+0x13c>)
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	edd3 7a00 	vldr	s15, [r3]
 80086b0:	787b      	ldrb	r3, [r7, #1]
 80086b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086b6:	4a2c      	ldr	r2, [pc, #176]	@ (8008768 <PID_Speed+0x140>)
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	edc3 7a00 	vstr	s15, [r3]

	Past_Error[_Wheel] = Error_Speed[_Wheel];
 80086c0:	787a      	ldrb	r2, [r7, #1]
 80086c2:	787b      	ldrb	r3, [r7, #1]
 80086c4:	4924      	ldr	r1, [pc, #144]	@ (8008758 <PID_Speed+0x130>)
 80086c6:	0092      	lsls	r2, r2, #2
 80086c8:	440a      	add	r2, r1
 80086ca:	6812      	ldr	r2, [r2, #0]
 80086cc:	4925      	ldr	r1, [pc, #148]	@ (8008764 <PID_Speed+0x13c>)
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	440b      	add	r3, r1
 80086d2:	601a      	str	r2, [r3, #0]

	Output_PID[_Wheel]  = (float)((Proportional[_Wheel]*Kp_Wheel[_Wheel]) + (Integnator[_Wheel]*Ki_Wheel[_Wheel]) + (Derivative[_Wheel]*Kd_Wheel[_Wheel]));
 80086d4:	787b      	ldrb	r3, [r7, #1]
 80086d6:	4a21      	ldr	r2, [pc, #132]	@ (800875c <PID_Speed+0x134>)
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4413      	add	r3, r2
 80086dc:	ed93 7a00 	vldr	s14, [r3]
 80086e0:	787b      	ldrb	r3, [r7, #1]
 80086e2:	4a22      	ldr	r2, [pc, #136]	@ (800876c <PID_Speed+0x144>)
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	edd3 7a00 	vldr	s15, [r3]
 80086ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80086f0:	787b      	ldrb	r3, [r7, #1]
 80086f2:	4a1b      	ldr	r2, [pc, #108]	@ (8008760 <PID_Speed+0x138>)
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	edd3 6a00 	vldr	s13, [r3]
 80086fc:	787b      	ldrb	r3, [r7, #1]
 80086fe:	4a1c      	ldr	r2, [pc, #112]	@ (8008770 <PID_Speed+0x148>)
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	edd3 7a00 	vldr	s15, [r3]
 8008708:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800870c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008710:	787b      	ldrb	r3, [r7, #1]
 8008712:	4a15      	ldr	r2, [pc, #84]	@ (8008768 <PID_Speed+0x140>)
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	edd3 6a00 	vldr	s13, [r3]
 800871c:	787b      	ldrb	r3, [r7, #1]
 800871e:	4a15      	ldr	r2, [pc, #84]	@ (8008774 <PID_Speed+0x14c>)
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4413      	add	r3, r2
 8008724:	edd3 7a00 	vldr	s15, [r3]
 8008728:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800872c:	787b      	ldrb	r3, [r7, #1]
 800872e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008732:	4a11      	ldr	r2, [pc, #68]	@ (8008778 <PID_Speed+0x150>)
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	4413      	add	r3, r2
 8008738:	edc3 7a00 	vstr	s15, [r3]


	return Output_PID[_Wheel];
 800873c:	787b      	ldrb	r3, [r7, #1]
 800873e:	4a0e      	ldr	r2, [pc, #56]	@ (8008778 <PID_Speed+0x150>)
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	4413      	add	r3, r2
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	ee07 3a90 	vmov	s15, r3
}
 800874a:	eeb0 0a67 	vmov.f32	s0, s15
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	20000750 	.word	0x20000750
 800875c:	20000768 	.word	0x20000768
 8008760:	20000780 	.word	0x20000780
 8008764:	200007b0 	.word	0x200007b0
 8008768:	20000798 	.word	0x20000798
 800876c:	200006d8 	.word	0x200006d8
 8008770:	200006f0 	.word	0x200006f0
 8008774:	20000708 	.word	0x20000708
 8008778:	200007c8 	.word	0x200007c8

0800877c <Motor_DutyCycle_LF>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////Motor////////////////////////////////////////////////////////////////////
void Motor_DutyCycle_LF(int16_t DutyCycle_LF){
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_LF > DutyCycle_LF_MAX) {
 8008786:	4b26      	ldr	r3, [pc, #152]	@ (8008820 <Motor_DutyCycle_LF+0xa4>)
 8008788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800878c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008790:	429a      	cmp	r2, r3
 8008792:	dd03      	ble.n	800879c <Motor_DutyCycle_LF+0x20>
	    DutyCycle_LF = DutyCycle_LF_MAX;
 8008794:	4b22      	ldr	r3, [pc, #136]	@ (8008820 <Motor_DutyCycle_LF+0xa4>)
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	80fb      	strh	r3, [r7, #6]
 800879a:	e00e      	b.n	80087ba <Motor_DutyCycle_LF+0x3e>
	} else if (DutyCycle_LF < -DutyCycle_LF_MAX) {
 800879c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80087a0:	4b1f      	ldr	r3, [pc, #124]	@ (8008820 <Motor_DutyCycle_LF+0xa4>)
 80087a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087a6:	425b      	negs	r3, r3
 80087a8:	429a      	cmp	r2, r3
 80087aa:	da06      	bge.n	80087ba <Motor_DutyCycle_LF+0x3e>
		DutyCycle_LF = -DutyCycle_LF_MAX;
 80087ac:	4b1c      	ldr	r3, [pc, #112]	@ (8008820 <Motor_DutyCycle_LF+0xa4>)
 80087ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	425b      	negs	r3, r3
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	80fb      	strh	r3, [r7, #6]
	}

	LF_PWM->Instance->CCR1 = (DutyCycle_LF > 0) ? (int16_t)DutyCycle_LF : (DutyCycle_LF_MAX + (int16_t)DutyCycle_LF);
 80087ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	dd02      	ble.n	80087c8 <Motor_DutyCycle_LF+0x4c>
 80087c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80087c6:	e006      	b.n	80087d6 <Motor_DutyCycle_LF+0x5a>
 80087c8:	4b15      	ldr	r3, [pc, #84]	@ (8008820 <Motor_DutyCycle_LF+0xa4>)
 80087ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087ce:	461a      	mov	r2, r3
 80087d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80087d4:	4413      	add	r3, r2
 80087d6:	4a13      	ldr	r2, [pc, #76]	@ (8008824 <Motor_DutyCycle_LF+0xa8>)
 80087d8:	6812      	ldr	r2, [r2, #0]
 80087da:	6812      	ldr	r2, [r2, #0]
 80087dc:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_LF , (DutyCycle_LF < 0) ? 1 : 0);
 80087de:	4b12      	ldr	r3, [pc, #72]	@ (8008828 <Motor_DutyCycle_LF+0xac>)
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80087e6:	13db      	asrs	r3, r3, #15
 80087e8:	b21b      	sxth	r3, r3
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	4619      	mov	r1, r3
 80087f4:	4610      	mov	r0, r2
 80087f6:	f000 fba1 	bl	8008f3c <digitalWrite>

	if(DutyCycle_LF == 0){
 80087fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10a      	bne.n	8008818 <Motor_DutyCycle_LF+0x9c>
	   LF_PWM->Instance->CCR1 = 0;
 8008802:	4b08      	ldr	r3, [pc, #32]	@ (8008824 <Motor_DutyCycle_LF+0xa8>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2200      	movs	r2, #0
 800880a:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_LF ,0);
 800880c:	4b06      	ldr	r3, [pc, #24]	@ (8008828 <Motor_DutyCycle_LF+0xac>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	2100      	movs	r1, #0
 8008812:	4618      	mov	r0, r3
 8008814:	f000 fb92 	bl	8008f3c <digitalWrite>
	}
}
 8008818:	bf00      	nop
 800881a:	3708      	adds	r7, #8
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}
 8008820:	20000684 	.word	0x20000684
 8008824:	2000066c 	.word	0x2000066c
 8008828:	20000690 	.word	0x20000690

0800882c <Motor_DutyCycle_LB>:

void Motor_DutyCycle_LB(int16_t DutyCycle_LB){
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	4603      	mov	r3, r0
 8008834:	80fb      	strh	r3, [r7, #6]
	DutyCycle_LB = -DutyCycle_LB;
 8008836:	88fb      	ldrh	r3, [r7, #6]
 8008838:	425b      	negs	r3, r3
 800883a:	b29b      	uxth	r3, r3
 800883c:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_LB > DutyCycle_LB_MAX) {
 800883e:	4b26      	ldr	r3, [pc, #152]	@ (80088d8 <Motor_DutyCycle_LB+0xac>)
 8008840:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008844:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008848:	429a      	cmp	r2, r3
 800884a:	dd03      	ble.n	8008854 <Motor_DutyCycle_LB+0x28>
		DutyCycle_LB = DutyCycle_LB_MAX;
 800884c:	4b22      	ldr	r3, [pc, #136]	@ (80088d8 <Motor_DutyCycle_LB+0xac>)
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	80fb      	strh	r3, [r7, #6]
 8008852:	e00e      	b.n	8008872 <Motor_DutyCycle_LB+0x46>
	} else if (DutyCycle_LB < -DutyCycle_LB_MAX) {
 8008854:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008858:	4b1f      	ldr	r3, [pc, #124]	@ (80088d8 <Motor_DutyCycle_LB+0xac>)
 800885a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800885e:	425b      	negs	r3, r3
 8008860:	429a      	cmp	r2, r3
 8008862:	da06      	bge.n	8008872 <Motor_DutyCycle_LB+0x46>
		DutyCycle_LB = -DutyCycle_LB_MAX;
 8008864:	4b1c      	ldr	r3, [pc, #112]	@ (80088d8 <Motor_DutyCycle_LB+0xac>)
 8008866:	f9b3 3000 	ldrsh.w	r3, [r3]
 800886a:	b29b      	uxth	r3, r3
 800886c:	425b      	negs	r3, r3
 800886e:	b29b      	uxth	r3, r3
 8008870:	80fb      	strh	r3, [r7, #6]
	}

	LB_PWM->Instance->CCR1 = (DutyCycle_LB > 0) ? (int16_t)DutyCycle_LB : (DutyCycle_LB_MAX + (int16_t)DutyCycle_LB);
 8008872:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008876:	2b00      	cmp	r3, #0
 8008878:	dd02      	ble.n	8008880 <Motor_DutyCycle_LB+0x54>
 800887a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800887e:	e006      	b.n	800888e <Motor_DutyCycle_LB+0x62>
 8008880:	4b15      	ldr	r3, [pc, #84]	@ (80088d8 <Motor_DutyCycle_LB+0xac>)
 8008882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008886:	461a      	mov	r2, r3
 8008888:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800888c:	4413      	add	r3, r2
 800888e:	4a13      	ldr	r2, [pc, #76]	@ (80088dc <Motor_DutyCycle_LB+0xb0>)
 8008890:	6812      	ldr	r2, [r2, #0]
 8008892:	6812      	ldr	r2, [r2, #0]
 8008894:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_LB , (DutyCycle_LB < 0) ? 1 : 0);
 8008896:	4b12      	ldr	r3, [pc, #72]	@ (80088e0 <Motor_DutyCycle_LB+0xb4>)
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800889e:	13db      	asrs	r3, r3, #15
 80088a0:	b21b      	sxth	r3, r3
 80088a2:	b2db      	uxtb	r3, r3
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	4619      	mov	r1, r3
 80088ac:	4610      	mov	r0, r2
 80088ae:	f000 fb45 	bl	8008f3c <digitalWrite>

	if(DutyCycle_LB == 0){
 80088b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d10a      	bne.n	80088d0 <Motor_DutyCycle_LB+0xa4>
	   LB_PWM->Instance->CCR1 = 0;
 80088ba:	4b08      	ldr	r3, [pc, #32]	@ (80088dc <Motor_DutyCycle_LB+0xb0>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2200      	movs	r2, #0
 80088c2:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_LB ,0);
 80088c4:	4b06      	ldr	r3, [pc, #24]	@ (80088e0 <Motor_DutyCycle_LB+0xb4>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2100      	movs	r1, #0
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 fb36 	bl	8008f3c <digitalWrite>
	}
}
 80088d0:	bf00      	nop
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	20000686 	.word	0x20000686
 80088dc:	20000670 	.word	0x20000670
 80088e0:	20000694 	.word	0x20000694

080088e4 <Motor_DutyCycle_RF>:

void Motor_DutyCycle_RF(int16_t DutyCycle_RF){
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	4603      	mov	r3, r0
 80088ec:	80fb      	strh	r3, [r7, #6]
	DutyCycle_RF = -DutyCycle_RF;
 80088ee:	88fb      	ldrh	r3, [r7, #6]
 80088f0:	425b      	negs	r3, r3
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_RF > DutyCycle_RF_MAX) {
 80088f6:	4b26      	ldr	r3, [pc, #152]	@ (8008990 <Motor_DutyCycle_RF+0xac>)
 80088f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088fc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008900:	429a      	cmp	r2, r3
 8008902:	dd03      	ble.n	800890c <Motor_DutyCycle_RF+0x28>
		DutyCycle_RF = DutyCycle_RF_MAX;
 8008904:	4b22      	ldr	r3, [pc, #136]	@ (8008990 <Motor_DutyCycle_RF+0xac>)
 8008906:	881b      	ldrh	r3, [r3, #0]
 8008908:	80fb      	strh	r3, [r7, #6]
 800890a:	e00e      	b.n	800892a <Motor_DutyCycle_RF+0x46>
	} else if (DutyCycle_RF < -DutyCycle_RF_MAX) {
 800890c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008910:	4b1f      	ldr	r3, [pc, #124]	@ (8008990 <Motor_DutyCycle_RF+0xac>)
 8008912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008916:	425b      	negs	r3, r3
 8008918:	429a      	cmp	r2, r3
 800891a:	da06      	bge.n	800892a <Motor_DutyCycle_RF+0x46>
		DutyCycle_RF = -DutyCycle_RF_MAX;
 800891c:	4b1c      	ldr	r3, [pc, #112]	@ (8008990 <Motor_DutyCycle_RF+0xac>)
 800891e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008922:	b29b      	uxth	r3, r3
 8008924:	425b      	negs	r3, r3
 8008926:	b29b      	uxth	r3, r3
 8008928:	80fb      	strh	r3, [r7, #6]
	}

	RF_PWM->Instance->CCR1 = (DutyCycle_RF > 0) ? (int16_t)DutyCycle_RF : (DutyCycle_RF_MAX + (int16_t)DutyCycle_RF);
 800892a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800892e:	2b00      	cmp	r3, #0
 8008930:	dd02      	ble.n	8008938 <Motor_DutyCycle_RF+0x54>
 8008932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008936:	e006      	b.n	8008946 <Motor_DutyCycle_RF+0x62>
 8008938:	4b15      	ldr	r3, [pc, #84]	@ (8008990 <Motor_DutyCycle_RF+0xac>)
 800893a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800893e:	461a      	mov	r2, r3
 8008940:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008944:	4413      	add	r3, r2
 8008946:	4a13      	ldr	r2, [pc, #76]	@ (8008994 <Motor_DutyCycle_RF+0xb0>)
 8008948:	6812      	ldr	r2, [r2, #0]
 800894a:	6812      	ldr	r2, [r2, #0]
 800894c:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_RF , (DutyCycle_RF < 0) ? 1 : 0);
 800894e:	4b12      	ldr	r3, [pc, #72]	@ (8008998 <Motor_DutyCycle_RF+0xb4>)
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008956:	13db      	asrs	r3, r3, #15
 8008958:	b21b      	sxth	r3, r3
 800895a:	b2db      	uxtb	r3, r3
 800895c:	f003 0301 	and.w	r3, r3, #1
 8008960:	b2db      	uxtb	r3, r3
 8008962:	4619      	mov	r1, r3
 8008964:	4610      	mov	r0, r2
 8008966:	f000 fae9 	bl	8008f3c <digitalWrite>

	if(DutyCycle_RF == 0){
 800896a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d10a      	bne.n	8008988 <Motor_DutyCycle_RF+0xa4>
	   RF_PWM->Instance->CCR1 = 0;
 8008972:	4b08      	ldr	r3, [pc, #32]	@ (8008994 <Motor_DutyCycle_RF+0xb0>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2200      	movs	r2, #0
 800897a:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_RF ,0);
 800897c:	4b06      	ldr	r3, [pc, #24]	@ (8008998 <Motor_DutyCycle_RF+0xb4>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2100      	movs	r1, #0
 8008982:	4618      	mov	r0, r3
 8008984:	f000 fada 	bl	8008f3c <digitalWrite>
	}
}
 8008988:	bf00      	nop
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	20000688 	.word	0x20000688
 8008994:	20000674 	.word	0x20000674
 8008998:	20000698 	.word	0x20000698

0800899c <Motor_DutyCycle_RB>:

void Motor_DutyCycle_RB(int16_t DutyCycle_RB){
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	4603      	mov	r3, r0
 80089a4:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_RB > DutyCycle_RB_MAX) {
 80089a6:	4b26      	ldr	r3, [pc, #152]	@ (8008a40 <Motor_DutyCycle_RB+0xa4>)
 80089a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	dd03      	ble.n	80089bc <Motor_DutyCycle_RB+0x20>
		DutyCycle_RB = DutyCycle_RB_MAX;
 80089b4:	4b22      	ldr	r3, [pc, #136]	@ (8008a40 <Motor_DutyCycle_RB+0xa4>)
 80089b6:	881b      	ldrh	r3, [r3, #0]
 80089b8:	80fb      	strh	r3, [r7, #6]
 80089ba:	e00e      	b.n	80089da <Motor_DutyCycle_RB+0x3e>
	} else if (DutyCycle_RB < -DutyCycle_RB_MAX) {
 80089bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80089c0:	4b1f      	ldr	r3, [pc, #124]	@ (8008a40 <Motor_DutyCycle_RB+0xa4>)
 80089c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089c6:	425b      	negs	r3, r3
 80089c8:	429a      	cmp	r2, r3
 80089ca:	da06      	bge.n	80089da <Motor_DutyCycle_RB+0x3e>
	    DutyCycle_RB = -DutyCycle_RB_MAX;
 80089cc:	4b1c      	ldr	r3, [pc, #112]	@ (8008a40 <Motor_DutyCycle_RB+0xa4>)
 80089ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	425b      	negs	r3, r3
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	80fb      	strh	r3, [r7, #6]
	}

	RB_PWM->Instance->CCR2 = (DutyCycle_RB > 0) ? (int16_t)DutyCycle_RB : (DutyCycle_RB_MAX + (int16_t)DutyCycle_RB);
 80089da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	dd02      	ble.n	80089e8 <Motor_DutyCycle_RB+0x4c>
 80089e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80089e6:	e006      	b.n	80089f6 <Motor_DutyCycle_RB+0x5a>
 80089e8:	4b15      	ldr	r3, [pc, #84]	@ (8008a40 <Motor_DutyCycle_RB+0xa4>)
 80089ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089ee:	461a      	mov	r2, r3
 80089f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80089f4:	4413      	add	r3, r2
 80089f6:	4a13      	ldr	r2, [pc, #76]	@ (8008a44 <Motor_DutyCycle_RB+0xa8>)
 80089f8:	6812      	ldr	r2, [r2, #0]
 80089fa:	6812      	ldr	r2, [r2, #0]
 80089fc:	6393      	str	r3, [r2, #56]	@ 0x38

	digitalWrite(IN_RB , (DutyCycle_RB < 0) ? 1 : 0);
 80089fe:	4b12      	ldr	r3, [pc, #72]	@ (8008a48 <Motor_DutyCycle_RB+0xac>)
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a06:	13db      	asrs	r3, r3, #15
 8008a08:	b21b      	sxth	r3, r3
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	f003 0301 	and.w	r3, r3, #1
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	4619      	mov	r1, r3
 8008a14:	4610      	mov	r0, r2
 8008a16:	f000 fa91 	bl	8008f3c <digitalWrite>

	if(DutyCycle_RB == 0){
 8008a1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10a      	bne.n	8008a38 <Motor_DutyCycle_RB+0x9c>
	    RB_PWM->Instance->CCR2 = 0;
 8008a22:	4b08      	ldr	r3, [pc, #32]	@ (8008a44 <Motor_DutyCycle_RB+0xa8>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	639a      	str	r2, [r3, #56]	@ 0x38
		digitalWrite(IN_RB ,0);
 8008a2c:	4b06      	ldr	r3, [pc, #24]	@ (8008a48 <Motor_DutyCycle_RB+0xac>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2100      	movs	r1, #0
 8008a32:	4618      	mov	r0, r3
 8008a34:	f000 fa82 	bl	8008f3c <digitalWrite>
	}
}
 8008a38:	bf00      	nop
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	2000068a 	.word	0x2000068a
 8008a44:	20000678 	.word	0x20000678
 8008a48:	2000069c 	.word	0x2000069c

08008a4c <Motor_DutyCycle_EXTRA1>:

void Motor_DutyCycle_EXTRA1(int16_t DutyCycle_EXTRA1){
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	4603      	mov	r3, r0
 8008a54:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_EXTRA1 > DutyCycle_EXTRA1_MAX) {
 8008a56:	4b26      	ldr	r3, [pc, #152]	@ (8008af0 <Motor_DutyCycle_EXTRA1+0xa4>)
 8008a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a5c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	dd03      	ble.n	8008a6c <Motor_DutyCycle_EXTRA1+0x20>
		DutyCycle_EXTRA1 = DutyCycle_EXTRA1_MAX;
 8008a64:	4b22      	ldr	r3, [pc, #136]	@ (8008af0 <Motor_DutyCycle_EXTRA1+0xa4>)
 8008a66:	881b      	ldrh	r3, [r3, #0]
 8008a68:	80fb      	strh	r3, [r7, #6]
 8008a6a:	e00e      	b.n	8008a8a <Motor_DutyCycle_EXTRA1+0x3e>
	} else if (DutyCycle_EXTRA1 < -DutyCycle_EXTRA1_MAX) {
 8008a6c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008a70:	4b1f      	ldr	r3, [pc, #124]	@ (8008af0 <Motor_DutyCycle_EXTRA1+0xa4>)
 8008a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a76:	425b      	negs	r3, r3
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	da06      	bge.n	8008a8a <Motor_DutyCycle_EXTRA1+0x3e>
		DutyCycle_EXTRA1 = -DutyCycle_EXTRA1_MAX;
 8008a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8008af0 <Motor_DutyCycle_EXTRA1+0xa4>)
 8008a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	425b      	negs	r3, r3
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	80fb      	strh	r3, [r7, #6]
	}

	EXTRA1_PWM->Instance->CCR1 = (DutyCycle_EXTRA1 > 0) ? (int16_t)DutyCycle_EXTRA1 : (DutyCycle_EXTRA1_MAX + (int16_t)DutyCycle_EXTRA1);
 8008a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	dd02      	ble.n	8008a98 <Motor_DutyCycle_EXTRA1+0x4c>
 8008a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a96:	e006      	b.n	8008aa6 <Motor_DutyCycle_EXTRA1+0x5a>
 8008a98:	4b15      	ldr	r3, [pc, #84]	@ (8008af0 <Motor_DutyCycle_EXTRA1+0xa4>)
 8008a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008aa4:	4413      	add	r3, r2
 8008aa6:	4a13      	ldr	r2, [pc, #76]	@ (8008af4 <Motor_DutyCycle_EXTRA1+0xa8>)
 8008aa8:	6812      	ldr	r2, [r2, #0]
 8008aaa:	6812      	ldr	r2, [r2, #0]
 8008aac:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_EXTRA1 , (DutyCycle_EXTRA1 < 0) ? 1 : 0);
 8008aae:	4b12      	ldr	r3, [pc, #72]	@ (8008af8 <Motor_DutyCycle_EXTRA1+0xac>)
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ab6:	13db      	asrs	r3, r3, #15
 8008ab8:	b21b      	sxth	r3, r3
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	4610      	mov	r0, r2
 8008ac6:	f000 fa39 	bl	8008f3c <digitalWrite>

	if(DutyCycle_EXTRA1 == 0){
 8008aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10a      	bne.n	8008ae8 <Motor_DutyCycle_EXTRA1+0x9c>
		EXTRA1_PWM->Instance->CCR1 = 0;
 8008ad2:	4b08      	ldr	r3, [pc, #32]	@ (8008af4 <Motor_DutyCycle_EXTRA1+0xa8>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	635a      	str	r2, [r3, #52]	@ 0x34
	    digitalWrite(IN_EXTRA1 ,0);
 8008adc:	4b06      	ldr	r3, [pc, #24]	@ (8008af8 <Motor_DutyCycle_EXTRA1+0xac>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2100      	movs	r1, #0
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 fa2a 	bl	8008f3c <digitalWrite>
	}
}
 8008ae8:	bf00      	nop
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	2000068c 	.word	0x2000068c
 8008af4:	2000067c 	.word	0x2000067c
 8008af8:	200006a0 	.word	0x200006a0

08008afc <Motor_DutyCycle_EXTRA2>:

void Motor_DutyCycle_EXTRA2(int16_t DutyCycle_EXTRA2){
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	4603      	mov	r3, r0
 8008b04:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_EXTRA2 > DutyCycle_EXTRA2_MAX) {
 8008b06:	4b26      	ldr	r3, [pc, #152]	@ (8008ba0 <Motor_DutyCycle_EXTRA2+0xa4>)
 8008b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b0c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	dd03      	ble.n	8008b1c <Motor_DutyCycle_EXTRA2+0x20>
		DutyCycle_EXTRA2 = DutyCycle_EXTRA2_MAX;
 8008b14:	4b22      	ldr	r3, [pc, #136]	@ (8008ba0 <Motor_DutyCycle_EXTRA2+0xa4>)
 8008b16:	881b      	ldrh	r3, [r3, #0]
 8008b18:	80fb      	strh	r3, [r7, #6]
 8008b1a:	e00e      	b.n	8008b3a <Motor_DutyCycle_EXTRA2+0x3e>
	} else if (DutyCycle_EXTRA2 < -DutyCycle_EXTRA2_MAX) {
 8008b1c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008b20:	4b1f      	ldr	r3, [pc, #124]	@ (8008ba0 <Motor_DutyCycle_EXTRA2+0xa4>)
 8008b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b26:	425b      	negs	r3, r3
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	da06      	bge.n	8008b3a <Motor_DutyCycle_EXTRA2+0x3e>
		DutyCycle_EXTRA2 = -DutyCycle_EXTRA2_MAX;
 8008b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8008ba0 <Motor_DutyCycle_EXTRA2+0xa4>)
 8008b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b32:	b29b      	uxth	r3, r3
 8008b34:	425b      	negs	r3, r3
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	80fb      	strh	r3, [r7, #6]
	}

	EXTRA2_PWM->Instance->CCR1 = (DutyCycle_EXTRA2 > 0) ? (int16_t)DutyCycle_EXTRA2 : (DutyCycle_EXTRA2_MAX + (int16_t)DutyCycle_EXTRA2);
 8008b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	dd02      	ble.n	8008b48 <Motor_DutyCycle_EXTRA2+0x4c>
 8008b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b46:	e006      	b.n	8008b56 <Motor_DutyCycle_EXTRA2+0x5a>
 8008b48:	4b15      	ldr	r3, [pc, #84]	@ (8008ba0 <Motor_DutyCycle_EXTRA2+0xa4>)
 8008b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b54:	4413      	add	r3, r2
 8008b56:	4a13      	ldr	r2, [pc, #76]	@ (8008ba4 <Motor_DutyCycle_EXTRA2+0xa8>)
 8008b58:	6812      	ldr	r2, [r2, #0]
 8008b5a:	6812      	ldr	r2, [r2, #0]
 8008b5c:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_EXTRA2 , (DutyCycle_EXTRA2 < 0) ? 1 : 0);
 8008b5e:	4b12      	ldr	r3, [pc, #72]	@ (8008ba8 <Motor_DutyCycle_EXTRA2+0xac>)
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b66:	13db      	asrs	r3, r3, #15
 8008b68:	b21b      	sxth	r3, r3
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	f003 0301 	and.w	r3, r3, #1
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	4619      	mov	r1, r3
 8008b74:	4610      	mov	r0, r2
 8008b76:	f000 f9e1 	bl	8008f3c <digitalWrite>

	if(DutyCycle_EXTRA2 == 0){
 8008b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10a      	bne.n	8008b98 <Motor_DutyCycle_EXTRA2+0x9c>
	     EXTRA2_PWM->Instance->CCR1 = 0;
 8008b82:	4b08      	ldr	r3, [pc, #32]	@ (8008ba4 <Motor_DutyCycle_EXTRA2+0xa8>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	635a      	str	r2, [r3, #52]	@ 0x34
		 digitalWrite(IN_EXTRA2 ,0);
 8008b8c:	4b06      	ldr	r3, [pc, #24]	@ (8008ba8 <Motor_DutyCycle_EXTRA2+0xac>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2100      	movs	r1, #0
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 f9d2 	bl	8008f3c <digitalWrite>
	}
}
 8008b98:	bf00      	nop
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}
 8008ba0:	2000068e 	.word	0x2000068e
 8008ba4:	20000680 	.word	0x20000680
 8008ba8:	200006a4 	.word	0x200006a4

08008bac <Motor_Speed_LF>:

int16_t Duty_Cycle[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float Motor_Speed_LF(int16_t RPM_INPUT ,float RPM_LF){
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	ed87 0a00 	vstr	s0, [r7]
 8008bb8:	80fb      	strh	r3, [r7, #6]
	if (RPM_LF > max_speed[0]) {
 8008bba:	4b30      	ldr	r3, [pc, #192]	@ (8008c7c <Motor_Speed_LF+0xd0>)
 8008bbc:	edd3 7a00 	vldr	s15, [r3]
 8008bc0:	ed97 7a00 	vldr	s14, [r7]
 8008bc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bcc:	dd03      	ble.n	8008bd6 <Motor_Speed_LF+0x2a>
	   RPM_LF = max_speed[0];
 8008bce:	4b2b      	ldr	r3, [pc, #172]	@ (8008c7c <Motor_Speed_LF+0xd0>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	603b      	str	r3, [r7, #0]
 8008bd4:	e012      	b.n	8008bfc <Motor_Speed_LF+0x50>
	} else if (RPM_LF < -max_speed[0]) {
 8008bd6:	4b29      	ldr	r3, [pc, #164]	@ (8008c7c <Motor_Speed_LF+0xd0>)
 8008bd8:	edd3 7a00 	vldr	s15, [r3]
 8008bdc:	eef1 7a67 	vneg.f32	s15, s15
 8008be0:	ed97 7a00 	vldr	s14, [r7]
 8008be4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bec:	d506      	bpl.n	8008bfc <Motor_Speed_LF+0x50>
	   RPM_LF = -max_speed[0];
 8008bee:	4b23      	ldr	r3, [pc, #140]	@ (8008c7c <Motor_Speed_LF+0xd0>)
 8008bf0:	edd3 7a00 	vldr	s15, [r3]
 8008bf4:	eef1 7a67 	vneg.f32	s15, s15
 8008bf8:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_LF , 0);
 8008bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c00:	ee07 3a90 	vmov	s15, r3
 8008c04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008c08:	edd7 7a00 	vldr	s15, [r7]
 8008c0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c10:	ee17 3a90 	vmov	r3, s15
 8008c14:	b21b      	sxth	r3, r3
 8008c16:	2100      	movs	r1, #0
 8008c18:	4618      	mov	r0, r3
 8008c1a:	eeb0 0a47 	vmov.f32	s0, s14
 8008c1e:	f7ff fd03 	bl	8008628 <PID_Speed>

	Duty_Cycle[0] = (int16_t)((Output_PID[0] / ((float)(max_speed[0] - min_speed[0]))) * DutyCycle_LF_MAX);
 8008c22:	4b17      	ldr	r3, [pc, #92]	@ (8008c80 <Motor_Speed_LF+0xd4>)
 8008c24:	edd3 6a00 	vldr	s13, [r3]
 8008c28:	4b14      	ldr	r3, [pc, #80]	@ (8008c7c <Motor_Speed_LF+0xd0>)
 8008c2a:	ed93 7a00 	vldr	s14, [r3]
 8008c2e:	4b15      	ldr	r3, [pc, #84]	@ (8008c84 <Motor_Speed_LF+0xd8>)
 8008c30:	edd3 7a00 	vldr	s15, [r3]
 8008c34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c3c:	4b12      	ldr	r3, [pc, #72]	@ (8008c88 <Motor_Speed_LF+0xdc>)
 8008c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c42:	ee07 3a90 	vmov	s15, r3
 8008c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c52:	ee17 3a90 	vmov	r3, s15
 8008c56:	b21a      	sxth	r2, r3
 8008c58:	4b0c      	ldr	r3, [pc, #48]	@ (8008c8c <Motor_Speed_LF+0xe0>)
 8008c5a:	801a      	strh	r2, [r3, #0]

	Motor_DutyCycle_LF(Duty_Cycle[0]);
 8008c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8008c8c <Motor_Speed_LF+0xe0>)
 8008c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7ff fd8a 	bl	800877c <Motor_DutyCycle_LF>

//	return _RPM[0];
	return Output_PID[0];
 8008c68:	4b05      	ldr	r3, [pc, #20]	@ (8008c80 <Motor_Speed_LF+0xd4>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	ee07 3a90 	vmov	s15, r3
}
 8008c70:	eeb0 0a67 	vmov.f32	s0, s15
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20000738 	.word	0x20000738
 8008c80:	200007c8 	.word	0x200007c8
 8008c84:	20000720 	.word	0x20000720
 8008c88:	20000684 	.word	0x20000684
 8008c8c:	200007e0 	.word	0x200007e0

08008c90 <Motor_Speed_LB>:

float Motor_Speed_LB(int16_t RPM_INPUT ,float RPM_LB){
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	4603      	mov	r3, r0
 8008c98:	ed87 0a00 	vstr	s0, [r7]
 8008c9c:	80fb      	strh	r3, [r7, #6]
	if (RPM_LB > max_speed[1]) {
 8008c9e:	4b30      	ldr	r3, [pc, #192]	@ (8008d60 <Motor_Speed_LB+0xd0>)
 8008ca0:	edd3 7a01 	vldr	s15, [r3, #4]
 8008ca4:	ed97 7a00 	vldr	s14, [r7]
 8008ca8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb0:	dd03      	ble.n	8008cba <Motor_Speed_LB+0x2a>
	   RPM_LB = max_speed[1];
 8008cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8008d60 <Motor_Speed_LB+0xd0>)
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	603b      	str	r3, [r7, #0]
 8008cb8:	e012      	b.n	8008ce0 <Motor_Speed_LB+0x50>
	} else if (RPM_LB < -max_speed[1]) {
 8008cba:	4b29      	ldr	r3, [pc, #164]	@ (8008d60 <Motor_Speed_LB+0xd0>)
 8008cbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8008cc0:	eef1 7a67 	vneg.f32	s15, s15
 8008cc4:	ed97 7a00 	vldr	s14, [r7]
 8008cc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cd0:	d506      	bpl.n	8008ce0 <Motor_Speed_LB+0x50>
	   RPM_LB = -max_speed[1];
 8008cd2:	4b23      	ldr	r3, [pc, #140]	@ (8008d60 <Motor_Speed_LB+0xd0>)
 8008cd4:	edd3 7a01 	vldr	s15, [r3, #4]
 8008cd8:	eef1 7a67 	vneg.f32	s15, s15
 8008cdc:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_LB ,1);
 8008ce0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008ce4:	ee07 3a90 	vmov	s15, r3
 8008ce8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008cec:	edd7 7a00 	vldr	s15, [r7]
 8008cf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cf4:	ee17 3a90 	vmov	r3, s15
 8008cf8:	b21b      	sxth	r3, r3
 8008cfa:	2101      	movs	r1, #1
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	eeb0 0a47 	vmov.f32	s0, s14
 8008d02:	f7ff fc91 	bl	8008628 <PID_Speed>

	Duty_Cycle[1] = (int16_t)((Output_PID[1]/((float)(max_speed[1] - min_speed[1]))) * DutyCycle_LB_MAX);
 8008d06:	4b17      	ldr	r3, [pc, #92]	@ (8008d64 <Motor_Speed_LB+0xd4>)
 8008d08:	edd3 6a01 	vldr	s13, [r3, #4]
 8008d0c:	4b14      	ldr	r3, [pc, #80]	@ (8008d60 <Motor_Speed_LB+0xd0>)
 8008d0e:	ed93 7a01 	vldr	s14, [r3, #4]
 8008d12:	4b15      	ldr	r3, [pc, #84]	@ (8008d68 <Motor_Speed_LB+0xd8>)
 8008d14:	edd3 7a01 	vldr	s15, [r3, #4]
 8008d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d20:	4b12      	ldr	r3, [pc, #72]	@ (8008d6c <Motor_Speed_LB+0xdc>)
 8008d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d26:	ee07 3a90 	vmov	s15, r3
 8008d2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d36:	ee17 3a90 	vmov	r3, s15
 8008d3a:	b21a      	sxth	r2, r3
 8008d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8008d70 <Motor_Speed_LB+0xe0>)
 8008d3e:	805a      	strh	r2, [r3, #2]

	Motor_DutyCycle_LB(Duty_Cycle[1]);
 8008d40:	4b0b      	ldr	r3, [pc, #44]	@ (8008d70 <Motor_Speed_LB+0xe0>)
 8008d42:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7ff fd70 	bl	800882c <Motor_DutyCycle_LB>

//	return _RPM[1];
	return Output_PID[1];
 8008d4c:	4b05      	ldr	r3, [pc, #20]	@ (8008d64 <Motor_Speed_LB+0xd4>)
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	ee07 3a90 	vmov	s15, r3
}
 8008d54:	eeb0 0a67 	vmov.f32	s0, s15
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	20000738 	.word	0x20000738
 8008d64:	200007c8 	.word	0x200007c8
 8008d68:	20000720 	.word	0x20000720
 8008d6c:	20000686 	.word	0x20000686
 8008d70:	200007e0 	.word	0x200007e0

08008d74 <Motor_Speed_RF>:

float Motor_Speed_RF(int16_t RPM_INPUT ,float RPM_RF){
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	ed87 0a00 	vstr	s0, [r7]
 8008d80:	80fb      	strh	r3, [r7, #6]
	if (RPM_RF > max_speed[2]) {
 8008d82:	4b30      	ldr	r3, [pc, #192]	@ (8008e44 <Motor_Speed_RF+0xd0>)
 8008d84:	edd3 7a02 	vldr	s15, [r3, #8]
 8008d88:	ed97 7a00 	vldr	s14, [r7]
 8008d8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d94:	dd03      	ble.n	8008d9e <Motor_Speed_RF+0x2a>
	   RPM_RF = max_speed[2];
 8008d96:	4b2b      	ldr	r3, [pc, #172]	@ (8008e44 <Motor_Speed_RF+0xd0>)
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	603b      	str	r3, [r7, #0]
 8008d9c:	e012      	b.n	8008dc4 <Motor_Speed_RF+0x50>
	} else if (RPM_RF < -max_speed[2]) {
 8008d9e:	4b29      	ldr	r3, [pc, #164]	@ (8008e44 <Motor_Speed_RF+0xd0>)
 8008da0:	edd3 7a02 	vldr	s15, [r3, #8]
 8008da4:	eef1 7a67 	vneg.f32	s15, s15
 8008da8:	ed97 7a00 	vldr	s14, [r7]
 8008dac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008db4:	d506      	bpl.n	8008dc4 <Motor_Speed_RF+0x50>
	   RPM_RF = -max_speed[2];
 8008db6:	4b23      	ldr	r3, [pc, #140]	@ (8008e44 <Motor_Speed_RF+0xd0>)
 8008db8:	edd3 7a02 	vldr	s15, [r3, #8]
 8008dbc:	eef1 7a67 	vneg.f32	s15, s15
 8008dc0:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_RF ,2);
 8008dc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008dc8:	ee07 3a90 	vmov	s15, r3
 8008dcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008dd0:	edd7 7a00 	vldr	s15, [r7]
 8008dd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008dd8:	ee17 3a90 	vmov	r3, s15
 8008ddc:	b21b      	sxth	r3, r3
 8008dde:	2102      	movs	r1, #2
 8008de0:	4618      	mov	r0, r3
 8008de2:	eeb0 0a47 	vmov.f32	s0, s14
 8008de6:	f7ff fc1f 	bl	8008628 <PID_Speed>

	Duty_Cycle[2] = (int16_t)((Output_PID[2]/((float)(max_speed[2] - min_speed[2]))) * DutyCycle_RF_MAX);
 8008dea:	4b17      	ldr	r3, [pc, #92]	@ (8008e48 <Motor_Speed_RF+0xd4>)
 8008dec:	edd3 6a02 	vldr	s13, [r3, #8]
 8008df0:	4b14      	ldr	r3, [pc, #80]	@ (8008e44 <Motor_Speed_RF+0xd0>)
 8008df2:	ed93 7a02 	vldr	s14, [r3, #8]
 8008df6:	4b15      	ldr	r3, [pc, #84]	@ (8008e4c <Motor_Speed_RF+0xd8>)
 8008df8:	edd3 7a02 	vldr	s15, [r3, #8]
 8008dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e04:	4b12      	ldr	r3, [pc, #72]	@ (8008e50 <Motor_Speed_RF+0xdc>)
 8008e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e0a:	ee07 3a90 	vmov	s15, r3
 8008e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e1a:	ee17 3a90 	vmov	r3, s15
 8008e1e:	b21a      	sxth	r2, r3
 8008e20:	4b0c      	ldr	r3, [pc, #48]	@ (8008e54 <Motor_Speed_RF+0xe0>)
 8008e22:	809a      	strh	r2, [r3, #4]

	Motor_DutyCycle_RF(Duty_Cycle[2]);
 8008e24:	4b0b      	ldr	r3, [pc, #44]	@ (8008e54 <Motor_Speed_RF+0xe0>)
 8008e26:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7ff fd5a 	bl	80088e4 <Motor_DutyCycle_RF>

//	return _RPM[2];
	return Output_PID[2];
 8008e30:	4b05      	ldr	r3, [pc, #20]	@ (8008e48 <Motor_Speed_RF+0xd4>)
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	ee07 3a90 	vmov	s15, r3
}
 8008e38:	eeb0 0a67 	vmov.f32	s0, s15
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	20000738 	.word	0x20000738
 8008e48:	200007c8 	.word	0x200007c8
 8008e4c:	20000720 	.word	0x20000720
 8008e50:	20000688 	.word	0x20000688
 8008e54:	200007e0 	.word	0x200007e0

08008e58 <Motor_Speed_RB>:

float Motor_Speed_RB(int16_t RPM_INPUT ,float RPM_RB){
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	4603      	mov	r3, r0
 8008e60:	ed87 0a00 	vstr	s0, [r7]
 8008e64:	80fb      	strh	r3, [r7, #6]
	if (RPM_RB > max_speed[3]) {
 8008e66:	4b30      	ldr	r3, [pc, #192]	@ (8008f28 <Motor_Speed_RB+0xd0>)
 8008e68:	edd3 7a03 	vldr	s15, [r3, #12]
 8008e6c:	ed97 7a00 	vldr	s14, [r7]
 8008e70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e78:	dd03      	ble.n	8008e82 <Motor_Speed_RB+0x2a>
		RPM_RB = max_speed[3];
 8008e7a:	4b2b      	ldr	r3, [pc, #172]	@ (8008f28 <Motor_Speed_RB+0xd0>)
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	603b      	str	r3, [r7, #0]
 8008e80:	e012      	b.n	8008ea8 <Motor_Speed_RB+0x50>
	} else if (RPM_RB < -max_speed[3]) {
 8008e82:	4b29      	ldr	r3, [pc, #164]	@ (8008f28 <Motor_Speed_RB+0xd0>)
 8008e84:	edd3 7a03 	vldr	s15, [r3, #12]
 8008e88:	eef1 7a67 	vneg.f32	s15, s15
 8008e8c:	ed97 7a00 	vldr	s14, [r7]
 8008e90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e98:	d506      	bpl.n	8008ea8 <Motor_Speed_RB+0x50>
		RPM_RB = -max_speed[3];
 8008e9a:	4b23      	ldr	r3, [pc, #140]	@ (8008f28 <Motor_Speed_RB+0xd0>)
 8008e9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8008ea0:	eef1 7a67 	vneg.f32	s15, s15
 8008ea4:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_RB ,3);
 8008ea8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008eac:	ee07 3a90 	vmov	s15, r3
 8008eb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008eb4:	edd7 7a00 	vldr	s15, [r7]
 8008eb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ebc:	ee17 3a90 	vmov	r3, s15
 8008ec0:	b21b      	sxth	r3, r3
 8008ec2:	2103      	movs	r1, #3
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	eeb0 0a47 	vmov.f32	s0, s14
 8008eca:	f7ff fbad 	bl	8008628 <PID_Speed>

	Duty_Cycle[3] = (int16_t)((Output_PID[3]/((float)(max_speed[3] - min_speed[3]))) * DutyCycle_RB_MAX);
 8008ece:	4b17      	ldr	r3, [pc, #92]	@ (8008f2c <Motor_Speed_RB+0xd4>)
 8008ed0:	edd3 6a03 	vldr	s13, [r3, #12]
 8008ed4:	4b14      	ldr	r3, [pc, #80]	@ (8008f28 <Motor_Speed_RB+0xd0>)
 8008ed6:	ed93 7a03 	vldr	s14, [r3, #12]
 8008eda:	4b15      	ldr	r3, [pc, #84]	@ (8008f30 <Motor_Speed_RB+0xd8>)
 8008edc:	edd3 7a03 	vldr	s15, [r3, #12]
 8008ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ee4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ee8:	4b12      	ldr	r3, [pc, #72]	@ (8008f34 <Motor_Speed_RB+0xdc>)
 8008eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008eee:	ee07 3a90 	vmov	s15, r3
 8008ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008efa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008efe:	ee17 3a90 	vmov	r3, s15
 8008f02:	b21a      	sxth	r2, r3
 8008f04:	4b0c      	ldr	r3, [pc, #48]	@ (8008f38 <Motor_Speed_RB+0xe0>)
 8008f06:	80da      	strh	r2, [r3, #6]

	Motor_DutyCycle_RB(Duty_Cycle[3]);
 8008f08:	4b0b      	ldr	r3, [pc, #44]	@ (8008f38 <Motor_Speed_RB+0xe0>)
 8008f0a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7ff fd44 	bl	800899c <Motor_DutyCycle_RB>

//	return _RPM[3];
	return Output_PID[3];
 8008f14:	4b05      	ldr	r3, [pc, #20]	@ (8008f2c <Motor_Speed_RB+0xd4>)
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	ee07 3a90 	vmov	s15, r3
}
 8008f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	20000738 	.word	0x20000738
 8008f2c:	200007c8 	.word	0x200007c8
 8008f30:	20000720 	.word	0x20000720
 8008f34:	2000068a 	.word	0x2000068a
 8008f38:	200007e0 	.word	0x200007e0

08008f3c <digitalWrite>:

//	return _RPM[5];
	return Output_PID[5];
}

void digitalWrite(char* _PIN , uint8_t vlue){
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	460b      	mov	r3, r1
 8008f46:	70fb      	strb	r3, [r7, #3]
	uint8_t PIN = (_PIN[2] - '0') * 10 + (_PIN[3] - '0');
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	3302      	adds	r3, #2
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	3b30      	subs	r3, #48	@ 0x30
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	461a      	mov	r2, r3
 8008f54:	0092      	lsls	r2, r2, #2
 8008f56:	4413      	add	r3, r2
 8008f58:	005b      	lsls	r3, r3, #1
 8008f5a:	b2da      	uxtb	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	3303      	adds	r3, #3
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	4413      	add	r3, r2
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	3b30      	subs	r3, #48	@ 0x30
 8008f68:	73fb      	strb	r3, [r7, #15]

	if (_PIN[1] == 'A') {
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b41      	cmp	r3, #65	@ 0x41
 8008f72:	f040 809f 	bne.w	80090b4 <digitalWrite+0x178>
	        switch (PIN) {
 8008f76:	7bfb      	ldrb	r3, [r7, #15]
 8008f78:	2b0f      	cmp	r3, #15
 8008f7a:	f200 833f 	bhi.w	80095fc <digitalWrite+0x6c0>
 8008f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f84 <digitalWrite+0x48>)
 8008f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f84:	08008fc5 	.word	0x08008fc5
 8008f88:	08008fd3 	.word	0x08008fd3
 8008f8c:	08008fe1 	.word	0x08008fe1
 8008f90:	08008fef 	.word	0x08008fef
 8008f94:	08008ffd 	.word	0x08008ffd
 8008f98:	0800900b 	.word	0x0800900b
 8008f9c:	08009019 	.word	0x08009019
 8008fa0:	08009027 	.word	0x08009027
 8008fa4:	08009035 	.word	0x08009035
 8008fa8:	08009045 	.word	0x08009045
 8008fac:	08009055 	.word	0x08009055
 8008fb0:	08009065 	.word	0x08009065
 8008fb4:	08009075 	.word	0x08009075
 8008fb8:	08009085 	.word	0x08009085
 8008fbc:	08009095 	.word	0x08009095
 8008fc0:	080090a5 	.word	0x080090a5
	            case 0: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, vlue); break;
 8008fc4:	78fb      	ldrb	r3, [r7, #3]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	2101      	movs	r1, #1
 8008fca:	48bd      	ldr	r0, [pc, #756]	@ (80092c0 <digitalWrite+0x384>)
 8008fcc:	f7f9 feb8 	bl	8002d40 <HAL_GPIO_WritePin>
 8008fd0:	e314      	b.n	80095fc <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, vlue); break;
 8008fd2:	78fb      	ldrb	r3, [r7, #3]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	2102      	movs	r1, #2
 8008fd8:	48b9      	ldr	r0, [pc, #740]	@ (80092c0 <digitalWrite+0x384>)
 8008fda:	f7f9 feb1 	bl	8002d40 <HAL_GPIO_WritePin>
 8008fde:	e30d      	b.n	80095fc <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, vlue); break;
 8008fe0:	78fb      	ldrb	r3, [r7, #3]
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	2104      	movs	r1, #4
 8008fe6:	48b6      	ldr	r0, [pc, #728]	@ (80092c0 <digitalWrite+0x384>)
 8008fe8:	f7f9 feaa 	bl	8002d40 <HAL_GPIO_WritePin>
 8008fec:	e306      	b.n	80095fc <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, vlue); break;
 8008fee:	78fb      	ldrb	r3, [r7, #3]
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	2108      	movs	r1, #8
 8008ff4:	48b2      	ldr	r0, [pc, #712]	@ (80092c0 <digitalWrite+0x384>)
 8008ff6:	f7f9 fea3 	bl	8002d40 <HAL_GPIO_WritePin>
 8008ffa:	e2ff      	b.n	80095fc <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, vlue); break;
 8008ffc:	78fb      	ldrb	r3, [r7, #3]
 8008ffe:	461a      	mov	r2, r3
 8009000:	2110      	movs	r1, #16
 8009002:	48af      	ldr	r0, [pc, #700]	@ (80092c0 <digitalWrite+0x384>)
 8009004:	f7f9 fe9c 	bl	8002d40 <HAL_GPIO_WritePin>
 8009008:	e2f8      	b.n	80095fc <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, vlue); break;
 800900a:	78fb      	ldrb	r3, [r7, #3]
 800900c:	461a      	mov	r2, r3
 800900e:	2120      	movs	r1, #32
 8009010:	48ab      	ldr	r0, [pc, #684]	@ (80092c0 <digitalWrite+0x384>)
 8009012:	f7f9 fe95 	bl	8002d40 <HAL_GPIO_WritePin>
 8009016:	e2f1      	b.n	80095fc <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, vlue); break;
 8009018:	78fb      	ldrb	r3, [r7, #3]
 800901a:	461a      	mov	r2, r3
 800901c:	2140      	movs	r1, #64	@ 0x40
 800901e:	48a8      	ldr	r0, [pc, #672]	@ (80092c0 <digitalWrite+0x384>)
 8009020:	f7f9 fe8e 	bl	8002d40 <HAL_GPIO_WritePin>
 8009024:	e2ea      	b.n	80095fc <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, vlue); break;
 8009026:	78fb      	ldrb	r3, [r7, #3]
 8009028:	461a      	mov	r2, r3
 800902a:	2180      	movs	r1, #128	@ 0x80
 800902c:	48a4      	ldr	r0, [pc, #656]	@ (80092c0 <digitalWrite+0x384>)
 800902e:	f7f9 fe87 	bl	8002d40 <HAL_GPIO_WritePin>
 8009032:	e2e3      	b.n	80095fc <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, vlue); break;
 8009034:	78fb      	ldrb	r3, [r7, #3]
 8009036:	461a      	mov	r2, r3
 8009038:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800903c:	48a0      	ldr	r0, [pc, #640]	@ (80092c0 <digitalWrite+0x384>)
 800903e:	f7f9 fe7f 	bl	8002d40 <HAL_GPIO_WritePin>
 8009042:	e2db      	b.n	80095fc <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, vlue); break;
 8009044:	78fb      	ldrb	r3, [r7, #3]
 8009046:	461a      	mov	r2, r3
 8009048:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800904c:	489c      	ldr	r0, [pc, #624]	@ (80092c0 <digitalWrite+0x384>)
 800904e:	f7f9 fe77 	bl	8002d40 <HAL_GPIO_WritePin>
 8009052:	e2d3      	b.n	80095fc <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, vlue); break;
 8009054:	78fb      	ldrb	r3, [r7, #3]
 8009056:	461a      	mov	r2, r3
 8009058:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800905c:	4898      	ldr	r0, [pc, #608]	@ (80092c0 <digitalWrite+0x384>)
 800905e:	f7f9 fe6f 	bl	8002d40 <HAL_GPIO_WritePin>
 8009062:	e2cb      	b.n	80095fc <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, vlue); break;
 8009064:	78fb      	ldrb	r3, [r7, #3]
 8009066:	461a      	mov	r2, r3
 8009068:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800906c:	4894      	ldr	r0, [pc, #592]	@ (80092c0 <digitalWrite+0x384>)
 800906e:	f7f9 fe67 	bl	8002d40 <HAL_GPIO_WritePin>
 8009072:	e2c3      	b.n	80095fc <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, vlue); break;
 8009074:	78fb      	ldrb	r3, [r7, #3]
 8009076:	461a      	mov	r2, r3
 8009078:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800907c:	4890      	ldr	r0, [pc, #576]	@ (80092c0 <digitalWrite+0x384>)
 800907e:	f7f9 fe5f 	bl	8002d40 <HAL_GPIO_WritePin>
 8009082:	e2bb      	b.n	80095fc <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, vlue); break;
 8009084:	78fb      	ldrb	r3, [r7, #3]
 8009086:	461a      	mov	r2, r3
 8009088:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800908c:	488c      	ldr	r0, [pc, #560]	@ (80092c0 <digitalWrite+0x384>)
 800908e:	f7f9 fe57 	bl	8002d40 <HAL_GPIO_WritePin>
 8009092:	e2b3      	b.n	80095fc <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, vlue); break;
 8009094:	78fb      	ldrb	r3, [r7, #3]
 8009096:	461a      	mov	r2, r3
 8009098:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800909c:	4888      	ldr	r0, [pc, #544]	@ (80092c0 <digitalWrite+0x384>)
 800909e:	f7f9 fe4f 	bl	8002d40 <HAL_GPIO_WritePin>
 80090a2:	e2ab      	b.n	80095fc <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, vlue); break;
 80090a4:	78fb      	ldrb	r3, [r7, #3]
 80090a6:	461a      	mov	r2, r3
 80090a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80090ac:	4884      	ldr	r0, [pc, #528]	@ (80092c0 <digitalWrite+0x384>)
 80090ae:	f7f9 fe47 	bl	8002d40 <HAL_GPIO_WritePin>
 80090b2:	e2a3      	b.n	80095fc <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'B') {
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	3301      	adds	r3, #1
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	2b42      	cmp	r3, #66	@ 0x42
 80090bc:	f040 80a0 	bne.w	8009200 <digitalWrite+0x2c4>
	        switch (PIN) {
 80090c0:	7bfb      	ldrb	r3, [r7, #15]
 80090c2:	2b0f      	cmp	r3, #15
 80090c4:	f200 829a 	bhi.w	80095fc <digitalWrite+0x6c0>
 80090c8:	a201      	add	r2, pc, #4	@ (adr r2, 80090d0 <digitalWrite+0x194>)
 80090ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ce:	bf00      	nop
 80090d0:	08009111 	.word	0x08009111
 80090d4:	0800911f 	.word	0x0800911f
 80090d8:	0800912d 	.word	0x0800912d
 80090dc:	0800913b 	.word	0x0800913b
 80090e0:	08009149 	.word	0x08009149
 80090e4:	08009157 	.word	0x08009157
 80090e8:	08009165 	.word	0x08009165
 80090ec:	08009173 	.word	0x08009173
 80090f0:	08009181 	.word	0x08009181
 80090f4:	08009191 	.word	0x08009191
 80090f8:	080091a1 	.word	0x080091a1
 80090fc:	080091b1 	.word	0x080091b1
 8009100:	080091c1 	.word	0x080091c1
 8009104:	080091d1 	.word	0x080091d1
 8009108:	080091e1 	.word	0x080091e1
 800910c:	080091f1 	.word	0x080091f1
	            case 0: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, vlue); break;
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	461a      	mov	r2, r3
 8009114:	2101      	movs	r1, #1
 8009116:	486b      	ldr	r0, [pc, #428]	@ (80092c4 <digitalWrite+0x388>)
 8009118:	f7f9 fe12 	bl	8002d40 <HAL_GPIO_WritePin>
 800911c:	e26e      	b.n	80095fc <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, vlue); break;
 800911e:	78fb      	ldrb	r3, [r7, #3]
 8009120:	461a      	mov	r2, r3
 8009122:	2102      	movs	r1, #2
 8009124:	4867      	ldr	r0, [pc, #412]	@ (80092c4 <digitalWrite+0x388>)
 8009126:	f7f9 fe0b 	bl	8002d40 <HAL_GPIO_WritePin>
 800912a:	e267      	b.n	80095fc <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, vlue); break;
 800912c:	78fb      	ldrb	r3, [r7, #3]
 800912e:	461a      	mov	r2, r3
 8009130:	2104      	movs	r1, #4
 8009132:	4864      	ldr	r0, [pc, #400]	@ (80092c4 <digitalWrite+0x388>)
 8009134:	f7f9 fe04 	bl	8002d40 <HAL_GPIO_WritePin>
 8009138:	e260      	b.n	80095fc <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, vlue); break;
 800913a:	78fb      	ldrb	r3, [r7, #3]
 800913c:	461a      	mov	r2, r3
 800913e:	2108      	movs	r1, #8
 8009140:	4860      	ldr	r0, [pc, #384]	@ (80092c4 <digitalWrite+0x388>)
 8009142:	f7f9 fdfd 	bl	8002d40 <HAL_GPIO_WritePin>
 8009146:	e259      	b.n	80095fc <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, vlue); break;
 8009148:	78fb      	ldrb	r3, [r7, #3]
 800914a:	461a      	mov	r2, r3
 800914c:	2110      	movs	r1, #16
 800914e:	485d      	ldr	r0, [pc, #372]	@ (80092c4 <digitalWrite+0x388>)
 8009150:	f7f9 fdf6 	bl	8002d40 <HAL_GPIO_WritePin>
 8009154:	e252      	b.n	80095fc <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, vlue); break;
 8009156:	78fb      	ldrb	r3, [r7, #3]
 8009158:	461a      	mov	r2, r3
 800915a:	2120      	movs	r1, #32
 800915c:	4859      	ldr	r0, [pc, #356]	@ (80092c4 <digitalWrite+0x388>)
 800915e:	f7f9 fdef 	bl	8002d40 <HAL_GPIO_WritePin>
 8009162:	e24b      	b.n	80095fc <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, vlue); break;
 8009164:	78fb      	ldrb	r3, [r7, #3]
 8009166:	461a      	mov	r2, r3
 8009168:	2140      	movs	r1, #64	@ 0x40
 800916a:	4856      	ldr	r0, [pc, #344]	@ (80092c4 <digitalWrite+0x388>)
 800916c:	f7f9 fde8 	bl	8002d40 <HAL_GPIO_WritePin>
 8009170:	e244      	b.n	80095fc <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, vlue); break;
 8009172:	78fb      	ldrb	r3, [r7, #3]
 8009174:	461a      	mov	r2, r3
 8009176:	2180      	movs	r1, #128	@ 0x80
 8009178:	4852      	ldr	r0, [pc, #328]	@ (80092c4 <digitalWrite+0x388>)
 800917a:	f7f9 fde1 	bl	8002d40 <HAL_GPIO_WritePin>
 800917e:	e23d      	b.n	80095fc <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, vlue); break;
 8009180:	78fb      	ldrb	r3, [r7, #3]
 8009182:	461a      	mov	r2, r3
 8009184:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009188:	484e      	ldr	r0, [pc, #312]	@ (80092c4 <digitalWrite+0x388>)
 800918a:	f7f9 fdd9 	bl	8002d40 <HAL_GPIO_WritePin>
 800918e:	e235      	b.n	80095fc <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, vlue); break;
 8009190:	78fb      	ldrb	r3, [r7, #3]
 8009192:	461a      	mov	r2, r3
 8009194:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009198:	484a      	ldr	r0, [pc, #296]	@ (80092c4 <digitalWrite+0x388>)
 800919a:	f7f9 fdd1 	bl	8002d40 <HAL_GPIO_WritePin>
 800919e:	e22d      	b.n	80095fc <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, vlue); break;
 80091a0:	78fb      	ldrb	r3, [r7, #3]
 80091a2:	461a      	mov	r2, r3
 80091a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80091a8:	4846      	ldr	r0, [pc, #280]	@ (80092c4 <digitalWrite+0x388>)
 80091aa:	f7f9 fdc9 	bl	8002d40 <HAL_GPIO_WritePin>
 80091ae:	e225      	b.n	80095fc <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, vlue); break;
 80091b0:	78fb      	ldrb	r3, [r7, #3]
 80091b2:	461a      	mov	r2, r3
 80091b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80091b8:	4842      	ldr	r0, [pc, #264]	@ (80092c4 <digitalWrite+0x388>)
 80091ba:	f7f9 fdc1 	bl	8002d40 <HAL_GPIO_WritePin>
 80091be:	e21d      	b.n	80095fc <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, vlue); break;
 80091c0:	78fb      	ldrb	r3, [r7, #3]
 80091c2:	461a      	mov	r2, r3
 80091c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80091c8:	483e      	ldr	r0, [pc, #248]	@ (80092c4 <digitalWrite+0x388>)
 80091ca:	f7f9 fdb9 	bl	8002d40 <HAL_GPIO_WritePin>
 80091ce:	e215      	b.n	80095fc <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, vlue); break;
 80091d0:	78fb      	ldrb	r3, [r7, #3]
 80091d2:	461a      	mov	r2, r3
 80091d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80091d8:	483a      	ldr	r0, [pc, #232]	@ (80092c4 <digitalWrite+0x388>)
 80091da:	f7f9 fdb1 	bl	8002d40 <HAL_GPIO_WritePin>
 80091de:	e20d      	b.n	80095fc <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, vlue); break;
 80091e0:	78fb      	ldrb	r3, [r7, #3]
 80091e2:	461a      	mov	r2, r3
 80091e4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80091e8:	4836      	ldr	r0, [pc, #216]	@ (80092c4 <digitalWrite+0x388>)
 80091ea:	f7f9 fda9 	bl	8002d40 <HAL_GPIO_WritePin>
 80091ee:	e205      	b.n	80095fc <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, vlue); break;
 80091f0:	78fb      	ldrb	r3, [r7, #3]
 80091f2:	461a      	mov	r2, r3
 80091f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80091f8:	4832      	ldr	r0, [pc, #200]	@ (80092c4 <digitalWrite+0x388>)
 80091fa:	f7f9 fda1 	bl	8002d40 <HAL_GPIO_WritePin>
 80091fe:	e1fd      	b.n	80095fc <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'C') {
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	3301      	adds	r3, #1
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	2b43      	cmp	r3, #67	@ 0x43
 8009208:	f040 80a7 	bne.w	800935a <digitalWrite+0x41e>
	        switch (PIN) {
 800920c:	7bfb      	ldrb	r3, [r7, #15]
 800920e:	2b0f      	cmp	r3, #15
 8009210:	f200 81f4 	bhi.w	80095fc <digitalWrite+0x6c0>
 8009214:	a201      	add	r2, pc, #4	@ (adr r2, 800921c <digitalWrite+0x2e0>)
 8009216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800921a:	bf00      	nop
 800921c:	0800925d 	.word	0x0800925d
 8009220:	0800926b 	.word	0x0800926b
 8009224:	08009279 	.word	0x08009279
 8009228:	08009287 	.word	0x08009287
 800922c:	08009295 	.word	0x08009295
 8009230:	080092a3 	.word	0x080092a3
 8009234:	080092b1 	.word	0x080092b1
 8009238:	080092cd 	.word	0x080092cd
 800923c:	080092db 	.word	0x080092db
 8009240:	080092eb 	.word	0x080092eb
 8009244:	080092fb 	.word	0x080092fb
 8009248:	0800930b 	.word	0x0800930b
 800924c:	0800931b 	.word	0x0800931b
 8009250:	0800932b 	.word	0x0800932b
 8009254:	0800933b 	.word	0x0800933b
 8009258:	0800934b 	.word	0x0800934b
	            case 0: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, vlue); break;
 800925c:	78fb      	ldrb	r3, [r7, #3]
 800925e:	461a      	mov	r2, r3
 8009260:	2101      	movs	r1, #1
 8009262:	4819      	ldr	r0, [pc, #100]	@ (80092c8 <digitalWrite+0x38c>)
 8009264:	f7f9 fd6c 	bl	8002d40 <HAL_GPIO_WritePin>
 8009268:	e1c8      	b.n	80095fc <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, vlue); break;
 800926a:	78fb      	ldrb	r3, [r7, #3]
 800926c:	461a      	mov	r2, r3
 800926e:	2102      	movs	r1, #2
 8009270:	4815      	ldr	r0, [pc, #84]	@ (80092c8 <digitalWrite+0x38c>)
 8009272:	f7f9 fd65 	bl	8002d40 <HAL_GPIO_WritePin>
 8009276:	e1c1      	b.n	80095fc <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, vlue); break;
 8009278:	78fb      	ldrb	r3, [r7, #3]
 800927a:	461a      	mov	r2, r3
 800927c:	2104      	movs	r1, #4
 800927e:	4812      	ldr	r0, [pc, #72]	@ (80092c8 <digitalWrite+0x38c>)
 8009280:	f7f9 fd5e 	bl	8002d40 <HAL_GPIO_WritePin>
 8009284:	e1ba      	b.n	80095fc <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, vlue); break;
 8009286:	78fb      	ldrb	r3, [r7, #3]
 8009288:	461a      	mov	r2, r3
 800928a:	2108      	movs	r1, #8
 800928c:	480e      	ldr	r0, [pc, #56]	@ (80092c8 <digitalWrite+0x38c>)
 800928e:	f7f9 fd57 	bl	8002d40 <HAL_GPIO_WritePin>
 8009292:	e1b3      	b.n	80095fc <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, vlue); break;
 8009294:	78fb      	ldrb	r3, [r7, #3]
 8009296:	461a      	mov	r2, r3
 8009298:	2110      	movs	r1, #16
 800929a:	480b      	ldr	r0, [pc, #44]	@ (80092c8 <digitalWrite+0x38c>)
 800929c:	f7f9 fd50 	bl	8002d40 <HAL_GPIO_WritePin>
 80092a0:	e1ac      	b.n	80095fc <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, vlue); break;
 80092a2:	78fb      	ldrb	r3, [r7, #3]
 80092a4:	461a      	mov	r2, r3
 80092a6:	2120      	movs	r1, #32
 80092a8:	4807      	ldr	r0, [pc, #28]	@ (80092c8 <digitalWrite+0x38c>)
 80092aa:	f7f9 fd49 	bl	8002d40 <HAL_GPIO_WritePin>
 80092ae:	e1a5      	b.n	80095fc <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, vlue); break;
 80092b0:	78fb      	ldrb	r3, [r7, #3]
 80092b2:	461a      	mov	r2, r3
 80092b4:	2140      	movs	r1, #64	@ 0x40
 80092b6:	4804      	ldr	r0, [pc, #16]	@ (80092c8 <digitalWrite+0x38c>)
 80092b8:	f7f9 fd42 	bl	8002d40 <HAL_GPIO_WritePin>
 80092bc:	e19e      	b.n	80095fc <digitalWrite+0x6c0>
 80092be:	bf00      	nop
 80092c0:	40020000 	.word	0x40020000
 80092c4:	40020400 	.word	0x40020400
 80092c8:	40020800 	.word	0x40020800
	            case 7: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, vlue); break;
 80092cc:	78fb      	ldrb	r3, [r7, #3]
 80092ce:	461a      	mov	r2, r3
 80092d0:	2180      	movs	r1, #128	@ 0x80
 80092d2:	48bb      	ldr	r0, [pc, #748]	@ (80095c0 <digitalWrite+0x684>)
 80092d4:	f7f9 fd34 	bl	8002d40 <HAL_GPIO_WritePin>
 80092d8:	e190      	b.n	80095fc <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, vlue); break;
 80092da:	78fb      	ldrb	r3, [r7, #3]
 80092dc:	461a      	mov	r2, r3
 80092de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80092e2:	48b7      	ldr	r0, [pc, #732]	@ (80095c0 <digitalWrite+0x684>)
 80092e4:	f7f9 fd2c 	bl	8002d40 <HAL_GPIO_WritePin>
 80092e8:	e188      	b.n	80095fc <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, vlue); break;
 80092ea:	78fb      	ldrb	r3, [r7, #3]
 80092ec:	461a      	mov	r2, r3
 80092ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80092f2:	48b3      	ldr	r0, [pc, #716]	@ (80095c0 <digitalWrite+0x684>)
 80092f4:	f7f9 fd24 	bl	8002d40 <HAL_GPIO_WritePin>
 80092f8:	e180      	b.n	80095fc <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, vlue); break;
 80092fa:	78fb      	ldrb	r3, [r7, #3]
 80092fc:	461a      	mov	r2, r3
 80092fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009302:	48af      	ldr	r0, [pc, #700]	@ (80095c0 <digitalWrite+0x684>)
 8009304:	f7f9 fd1c 	bl	8002d40 <HAL_GPIO_WritePin>
 8009308:	e178      	b.n	80095fc <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, vlue); break;
 800930a:	78fb      	ldrb	r3, [r7, #3]
 800930c:	461a      	mov	r2, r3
 800930e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009312:	48ab      	ldr	r0, [pc, #684]	@ (80095c0 <digitalWrite+0x684>)
 8009314:	f7f9 fd14 	bl	8002d40 <HAL_GPIO_WritePin>
 8009318:	e170      	b.n	80095fc <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, vlue); break;
 800931a:	78fb      	ldrb	r3, [r7, #3]
 800931c:	461a      	mov	r2, r3
 800931e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009322:	48a7      	ldr	r0, [pc, #668]	@ (80095c0 <digitalWrite+0x684>)
 8009324:	f7f9 fd0c 	bl	8002d40 <HAL_GPIO_WritePin>
 8009328:	e168      	b.n	80095fc <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, vlue); break;
 800932a:	78fb      	ldrb	r3, [r7, #3]
 800932c:	461a      	mov	r2, r3
 800932e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009332:	48a3      	ldr	r0, [pc, #652]	@ (80095c0 <digitalWrite+0x684>)
 8009334:	f7f9 fd04 	bl	8002d40 <HAL_GPIO_WritePin>
 8009338:	e160      	b.n	80095fc <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, vlue); break;
 800933a:	78fb      	ldrb	r3, [r7, #3]
 800933c:	461a      	mov	r2, r3
 800933e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009342:	489f      	ldr	r0, [pc, #636]	@ (80095c0 <digitalWrite+0x684>)
 8009344:	f7f9 fcfc 	bl	8002d40 <HAL_GPIO_WritePin>
 8009348:	e158      	b.n	80095fc <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, vlue); break;
 800934a:	78fb      	ldrb	r3, [r7, #3]
 800934c:	461a      	mov	r2, r3
 800934e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009352:	489b      	ldr	r0, [pc, #620]	@ (80095c0 <digitalWrite+0x684>)
 8009354:	f7f9 fcf4 	bl	8002d40 <HAL_GPIO_WritePin>
 8009358:	e150      	b.n	80095fc <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'D') {
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	3301      	adds	r3, #1
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	2b44      	cmp	r3, #68	@ 0x44
 8009362:	f040 809f 	bne.w	80094a4 <digitalWrite+0x568>
	        switch (PIN) {
 8009366:	7bfb      	ldrb	r3, [r7, #15]
 8009368:	2b0f      	cmp	r3, #15
 800936a:	f200 8147 	bhi.w	80095fc <digitalWrite+0x6c0>
 800936e:	a201      	add	r2, pc, #4	@ (adr r2, 8009374 <digitalWrite+0x438>)
 8009370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009374:	080093b5 	.word	0x080093b5
 8009378:	080093c3 	.word	0x080093c3
 800937c:	080093d1 	.word	0x080093d1
 8009380:	080093df 	.word	0x080093df
 8009384:	080093ed 	.word	0x080093ed
 8009388:	080093fb 	.word	0x080093fb
 800938c:	08009409 	.word	0x08009409
 8009390:	08009417 	.word	0x08009417
 8009394:	08009425 	.word	0x08009425
 8009398:	08009435 	.word	0x08009435
 800939c:	08009445 	.word	0x08009445
 80093a0:	08009455 	.word	0x08009455
 80093a4:	08009465 	.word	0x08009465
 80093a8:	08009475 	.word	0x08009475
 80093ac:	08009485 	.word	0x08009485
 80093b0:	08009495 	.word	0x08009495
	            case 0: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, vlue); break;
 80093b4:	78fb      	ldrb	r3, [r7, #3]
 80093b6:	461a      	mov	r2, r3
 80093b8:	2101      	movs	r1, #1
 80093ba:	4882      	ldr	r0, [pc, #520]	@ (80095c4 <digitalWrite+0x688>)
 80093bc:	f7f9 fcc0 	bl	8002d40 <HAL_GPIO_WritePin>
 80093c0:	e11c      	b.n	80095fc <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, vlue); break;
 80093c2:	78fb      	ldrb	r3, [r7, #3]
 80093c4:	461a      	mov	r2, r3
 80093c6:	2102      	movs	r1, #2
 80093c8:	487e      	ldr	r0, [pc, #504]	@ (80095c4 <digitalWrite+0x688>)
 80093ca:	f7f9 fcb9 	bl	8002d40 <HAL_GPIO_WritePin>
 80093ce:	e115      	b.n	80095fc <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, vlue); break;
 80093d0:	78fb      	ldrb	r3, [r7, #3]
 80093d2:	461a      	mov	r2, r3
 80093d4:	2104      	movs	r1, #4
 80093d6:	487b      	ldr	r0, [pc, #492]	@ (80095c4 <digitalWrite+0x688>)
 80093d8:	f7f9 fcb2 	bl	8002d40 <HAL_GPIO_WritePin>
 80093dc:	e10e      	b.n	80095fc <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, vlue); break;
 80093de:	78fb      	ldrb	r3, [r7, #3]
 80093e0:	461a      	mov	r2, r3
 80093e2:	2108      	movs	r1, #8
 80093e4:	4877      	ldr	r0, [pc, #476]	@ (80095c4 <digitalWrite+0x688>)
 80093e6:	f7f9 fcab 	bl	8002d40 <HAL_GPIO_WritePin>
 80093ea:	e107      	b.n	80095fc <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, vlue); break;
 80093ec:	78fb      	ldrb	r3, [r7, #3]
 80093ee:	461a      	mov	r2, r3
 80093f0:	2110      	movs	r1, #16
 80093f2:	4874      	ldr	r0, [pc, #464]	@ (80095c4 <digitalWrite+0x688>)
 80093f4:	f7f9 fca4 	bl	8002d40 <HAL_GPIO_WritePin>
 80093f8:	e100      	b.n	80095fc <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, vlue); break;
 80093fa:	78fb      	ldrb	r3, [r7, #3]
 80093fc:	461a      	mov	r2, r3
 80093fe:	2120      	movs	r1, #32
 8009400:	4870      	ldr	r0, [pc, #448]	@ (80095c4 <digitalWrite+0x688>)
 8009402:	f7f9 fc9d 	bl	8002d40 <HAL_GPIO_WritePin>
 8009406:	e0f9      	b.n	80095fc <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, vlue); break;
 8009408:	78fb      	ldrb	r3, [r7, #3]
 800940a:	461a      	mov	r2, r3
 800940c:	2140      	movs	r1, #64	@ 0x40
 800940e:	486d      	ldr	r0, [pc, #436]	@ (80095c4 <digitalWrite+0x688>)
 8009410:	f7f9 fc96 	bl	8002d40 <HAL_GPIO_WritePin>
 8009414:	e0f2      	b.n	80095fc <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, vlue); break;
 8009416:	78fb      	ldrb	r3, [r7, #3]
 8009418:	461a      	mov	r2, r3
 800941a:	2180      	movs	r1, #128	@ 0x80
 800941c:	4869      	ldr	r0, [pc, #420]	@ (80095c4 <digitalWrite+0x688>)
 800941e:	f7f9 fc8f 	bl	8002d40 <HAL_GPIO_WritePin>
 8009422:	e0eb      	b.n	80095fc <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, vlue); break;
 8009424:	78fb      	ldrb	r3, [r7, #3]
 8009426:	461a      	mov	r2, r3
 8009428:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800942c:	4865      	ldr	r0, [pc, #404]	@ (80095c4 <digitalWrite+0x688>)
 800942e:	f7f9 fc87 	bl	8002d40 <HAL_GPIO_WritePin>
 8009432:	e0e3      	b.n	80095fc <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, vlue); break;
 8009434:	78fb      	ldrb	r3, [r7, #3]
 8009436:	461a      	mov	r2, r3
 8009438:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800943c:	4861      	ldr	r0, [pc, #388]	@ (80095c4 <digitalWrite+0x688>)
 800943e:	f7f9 fc7f 	bl	8002d40 <HAL_GPIO_WritePin>
 8009442:	e0db      	b.n	80095fc <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, vlue); break;
 8009444:	78fb      	ldrb	r3, [r7, #3]
 8009446:	461a      	mov	r2, r3
 8009448:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800944c:	485d      	ldr	r0, [pc, #372]	@ (80095c4 <digitalWrite+0x688>)
 800944e:	f7f9 fc77 	bl	8002d40 <HAL_GPIO_WritePin>
 8009452:	e0d3      	b.n	80095fc <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, vlue); break;
 8009454:	78fb      	ldrb	r3, [r7, #3]
 8009456:	461a      	mov	r2, r3
 8009458:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800945c:	4859      	ldr	r0, [pc, #356]	@ (80095c4 <digitalWrite+0x688>)
 800945e:	f7f9 fc6f 	bl	8002d40 <HAL_GPIO_WritePin>
 8009462:	e0cb      	b.n	80095fc <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, vlue); break;
 8009464:	78fb      	ldrb	r3, [r7, #3]
 8009466:	461a      	mov	r2, r3
 8009468:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800946c:	4855      	ldr	r0, [pc, #340]	@ (80095c4 <digitalWrite+0x688>)
 800946e:	f7f9 fc67 	bl	8002d40 <HAL_GPIO_WritePin>
 8009472:	e0c3      	b.n	80095fc <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, vlue); break;
 8009474:	78fb      	ldrb	r3, [r7, #3]
 8009476:	461a      	mov	r2, r3
 8009478:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800947c:	4851      	ldr	r0, [pc, #324]	@ (80095c4 <digitalWrite+0x688>)
 800947e:	f7f9 fc5f 	bl	8002d40 <HAL_GPIO_WritePin>
 8009482:	e0bb      	b.n	80095fc <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, vlue); break;
 8009484:	78fb      	ldrb	r3, [r7, #3]
 8009486:	461a      	mov	r2, r3
 8009488:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800948c:	484d      	ldr	r0, [pc, #308]	@ (80095c4 <digitalWrite+0x688>)
 800948e:	f7f9 fc57 	bl	8002d40 <HAL_GPIO_WritePin>
 8009492:	e0b3      	b.n	80095fc <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, vlue); break;
 8009494:	78fb      	ldrb	r3, [r7, #3]
 8009496:	461a      	mov	r2, r3
 8009498:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800949c:	4849      	ldr	r0, [pc, #292]	@ (80095c4 <digitalWrite+0x688>)
 800949e:	f7f9 fc4f 	bl	8002d40 <HAL_GPIO_WritePin>
 80094a2:	e0ab      	b.n	80095fc <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'E') {
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	3301      	adds	r3, #1
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	2b45      	cmp	r3, #69	@ 0x45
 80094ac:	f040 80a6 	bne.w	80095fc <digitalWrite+0x6c0>
	        switch (PIN) {
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
 80094b2:	2b0f      	cmp	r3, #15
 80094b4:	f200 80a2 	bhi.w	80095fc <digitalWrite+0x6c0>
 80094b8:	a201      	add	r2, pc, #4	@ (adr r2, 80094c0 <digitalWrite+0x584>)
 80094ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094be:	bf00      	nop
 80094c0:	08009501 	.word	0x08009501
 80094c4:	0800950f 	.word	0x0800950f
 80094c8:	0800951d 	.word	0x0800951d
 80094cc:	0800952b 	.word	0x0800952b
 80094d0:	08009539 	.word	0x08009539
 80094d4:	08009547 	.word	0x08009547
 80094d8:	08009555 	.word	0x08009555
 80094dc:	08009563 	.word	0x08009563
 80094e0:	08009571 	.word	0x08009571
 80094e4:	08009581 	.word	0x08009581
 80094e8:	08009591 	.word	0x08009591
 80094ec:	080095a1 	.word	0x080095a1
 80094f0:	080095b1 	.word	0x080095b1
 80094f4:	080095cd 	.word	0x080095cd
 80094f8:	080095dd 	.word	0x080095dd
 80094fc:	080095ed 	.word	0x080095ed
	            case 0: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, vlue); break;
 8009500:	78fb      	ldrb	r3, [r7, #3]
 8009502:	461a      	mov	r2, r3
 8009504:	2101      	movs	r1, #1
 8009506:	4830      	ldr	r0, [pc, #192]	@ (80095c8 <digitalWrite+0x68c>)
 8009508:	f7f9 fc1a 	bl	8002d40 <HAL_GPIO_WritePin>
 800950c:	e076      	b.n	80095fc <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, vlue); break;
 800950e:	78fb      	ldrb	r3, [r7, #3]
 8009510:	461a      	mov	r2, r3
 8009512:	2102      	movs	r1, #2
 8009514:	482c      	ldr	r0, [pc, #176]	@ (80095c8 <digitalWrite+0x68c>)
 8009516:	f7f9 fc13 	bl	8002d40 <HAL_GPIO_WritePin>
 800951a:	e06f      	b.n	80095fc <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, vlue); break;
 800951c:	78fb      	ldrb	r3, [r7, #3]
 800951e:	461a      	mov	r2, r3
 8009520:	2104      	movs	r1, #4
 8009522:	4829      	ldr	r0, [pc, #164]	@ (80095c8 <digitalWrite+0x68c>)
 8009524:	f7f9 fc0c 	bl	8002d40 <HAL_GPIO_WritePin>
 8009528:	e068      	b.n	80095fc <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, vlue); break;
 800952a:	78fb      	ldrb	r3, [r7, #3]
 800952c:	461a      	mov	r2, r3
 800952e:	2108      	movs	r1, #8
 8009530:	4825      	ldr	r0, [pc, #148]	@ (80095c8 <digitalWrite+0x68c>)
 8009532:	f7f9 fc05 	bl	8002d40 <HAL_GPIO_WritePin>
 8009536:	e061      	b.n	80095fc <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, vlue); break;
 8009538:	78fb      	ldrb	r3, [r7, #3]
 800953a:	461a      	mov	r2, r3
 800953c:	2110      	movs	r1, #16
 800953e:	4822      	ldr	r0, [pc, #136]	@ (80095c8 <digitalWrite+0x68c>)
 8009540:	f7f9 fbfe 	bl	8002d40 <HAL_GPIO_WritePin>
 8009544:	e05a      	b.n	80095fc <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, vlue); break;
 8009546:	78fb      	ldrb	r3, [r7, #3]
 8009548:	461a      	mov	r2, r3
 800954a:	2120      	movs	r1, #32
 800954c:	481e      	ldr	r0, [pc, #120]	@ (80095c8 <digitalWrite+0x68c>)
 800954e:	f7f9 fbf7 	bl	8002d40 <HAL_GPIO_WritePin>
 8009552:	e053      	b.n	80095fc <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, vlue); break;
 8009554:	78fb      	ldrb	r3, [r7, #3]
 8009556:	461a      	mov	r2, r3
 8009558:	2140      	movs	r1, #64	@ 0x40
 800955a:	481b      	ldr	r0, [pc, #108]	@ (80095c8 <digitalWrite+0x68c>)
 800955c:	f7f9 fbf0 	bl	8002d40 <HAL_GPIO_WritePin>
 8009560:	e04c      	b.n	80095fc <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, vlue); break;
 8009562:	78fb      	ldrb	r3, [r7, #3]
 8009564:	461a      	mov	r2, r3
 8009566:	2180      	movs	r1, #128	@ 0x80
 8009568:	4817      	ldr	r0, [pc, #92]	@ (80095c8 <digitalWrite+0x68c>)
 800956a:	f7f9 fbe9 	bl	8002d40 <HAL_GPIO_WritePin>
 800956e:	e045      	b.n	80095fc <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, vlue); break;
 8009570:	78fb      	ldrb	r3, [r7, #3]
 8009572:	461a      	mov	r2, r3
 8009574:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009578:	4813      	ldr	r0, [pc, #76]	@ (80095c8 <digitalWrite+0x68c>)
 800957a:	f7f9 fbe1 	bl	8002d40 <HAL_GPIO_WritePin>
 800957e:	e03d      	b.n	80095fc <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, vlue); break;
 8009580:	78fb      	ldrb	r3, [r7, #3]
 8009582:	461a      	mov	r2, r3
 8009584:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009588:	480f      	ldr	r0, [pc, #60]	@ (80095c8 <digitalWrite+0x68c>)
 800958a:	f7f9 fbd9 	bl	8002d40 <HAL_GPIO_WritePin>
 800958e:	e035      	b.n	80095fc <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, vlue); break;
 8009590:	78fb      	ldrb	r3, [r7, #3]
 8009592:	461a      	mov	r2, r3
 8009594:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009598:	480b      	ldr	r0, [pc, #44]	@ (80095c8 <digitalWrite+0x68c>)
 800959a:	f7f9 fbd1 	bl	8002d40 <HAL_GPIO_WritePin>
 800959e:	e02d      	b.n	80095fc <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, vlue); break;
 80095a0:	78fb      	ldrb	r3, [r7, #3]
 80095a2:	461a      	mov	r2, r3
 80095a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80095a8:	4807      	ldr	r0, [pc, #28]	@ (80095c8 <digitalWrite+0x68c>)
 80095aa:	f7f9 fbc9 	bl	8002d40 <HAL_GPIO_WritePin>
 80095ae:	e025      	b.n	80095fc <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, vlue); break;
 80095b0:	78fb      	ldrb	r3, [r7, #3]
 80095b2:	461a      	mov	r2, r3
 80095b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80095b8:	4803      	ldr	r0, [pc, #12]	@ (80095c8 <digitalWrite+0x68c>)
 80095ba:	f7f9 fbc1 	bl	8002d40 <HAL_GPIO_WritePin>
 80095be:	e01d      	b.n	80095fc <digitalWrite+0x6c0>
 80095c0:	40020800 	.word	0x40020800
 80095c4:	40020c00 	.word	0x40020c00
 80095c8:	40021000 	.word	0x40021000
	            case 13: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, vlue); break;
 80095cc:	78fb      	ldrb	r3, [r7, #3]
 80095ce:	461a      	mov	r2, r3
 80095d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80095d4:	480b      	ldr	r0, [pc, #44]	@ (8009604 <digitalWrite+0x6c8>)
 80095d6:	f7f9 fbb3 	bl	8002d40 <HAL_GPIO_WritePin>
 80095da:	e00f      	b.n	80095fc <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, vlue); break;
 80095dc:	78fb      	ldrb	r3, [r7, #3]
 80095de:	461a      	mov	r2, r3
 80095e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80095e4:	4807      	ldr	r0, [pc, #28]	@ (8009604 <digitalWrite+0x6c8>)
 80095e6:	f7f9 fbab 	bl	8002d40 <HAL_GPIO_WritePin>
 80095ea:	e007      	b.n	80095fc <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, vlue); break;
 80095ec:	78fb      	ldrb	r3, [r7, #3]
 80095ee:	461a      	mov	r2, r3
 80095f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80095f4:	4803      	ldr	r0, [pc, #12]	@ (8009604 <digitalWrite+0x6c8>)
 80095f6:	f7f9 fba3 	bl	8002d40 <HAL_GPIO_WritePin>
 80095fa:	bf00      	nop
	        }
	    }
}
 80095fc:	bf00      	nop
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	40021000 	.word	0x40021000

08009608 <Setup_Forward_Kinematic>:

float _Lx;
float _Ly;
float _Radius_wheel;

void Setup_Forward_Kinematic(float Lx ,float Ly ,float Radius_wheel){
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	ed87 0a03 	vstr	s0, [r7, #12]
 8009612:	edc7 0a02 	vstr	s1, [r7, #8]
 8009616:	ed87 1a01 	vstr	s2, [r7, #4]
	_Lx = Lx;
 800961a:	4a07      	ldr	r2, [pc, #28]	@ (8009638 <Setup_Forward_Kinematic+0x30>)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6013      	str	r3, [r2, #0]
	_Ly = Ly;
 8009620:	4a06      	ldr	r2, [pc, #24]	@ (800963c <Setup_Forward_Kinematic+0x34>)
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	6013      	str	r3, [r2, #0]
	_Radius_wheel = Radius_wheel;
 8009626:	4a06      	ldr	r2, [pc, #24]	@ (8009640 <Setup_Forward_Kinematic+0x38>)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6013      	str	r3, [r2, #0]
}
 800962c:	bf00      	nop
 800962e:	3714      	adds	r7, #20
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr
 8009638:	200007ec 	.word	0x200007ec
 800963c:	200007f0 	.word	0x200007f0
 8009640:	200007f4 	.word	0x200007f4

08009644 <Setup_frequency_Forward_Kinematic>:

float _Pos_X = 0.0f;
float _Pos_Y = 0.0f;
float _Pos_Z = 0.0f;

void Setup_frequency_Forward_Kinematic(uint8_t freq){
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	4603      	mov	r3, r0
 800964c:	71fb      	strb	r3, [r7, #7]
	__freq = freq;
 800964e:	4a04      	ldr	r2, [pc, #16]	@ (8009660 <Setup_frequency_Forward_Kinematic+0x1c>)
 8009650:	79fb      	ldrb	r3, [r7, #7]
 8009652:	7013      	strb	r3, [r2, #0]
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr
 8009660:	2000001c 	.word	0x2000001c

08009664 <Setup_Inverse_Kinematic>:

float Lx_;
float Ly_;
float Radius_wheel_;

void Setup_Inverse_Kinematic(float Lx ,float Ly ,float Radius_wheel){
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	ed87 0a03 	vstr	s0, [r7, #12]
 800966e:	edc7 0a02 	vstr	s1, [r7, #8]
 8009672:	ed87 1a01 	vstr	s2, [r7, #4]
	Lx_ = Lx;
 8009676:	4a07      	ldr	r2, [pc, #28]	@ (8009694 <Setup_Inverse_Kinematic+0x30>)
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6013      	str	r3, [r2, #0]
	Ly_ = Ly;
 800967c:	4a06      	ldr	r2, [pc, #24]	@ (8009698 <Setup_Inverse_Kinematic+0x34>)
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	6013      	str	r3, [r2, #0]
	Radius_wheel_ = Radius_wheel;
 8009682:	4a06      	ldr	r2, [pc, #24]	@ (800969c <Setup_Inverse_Kinematic+0x38>)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6013      	str	r3, [r2, #0]
}
 8009688:	bf00      	nop
 800968a:	3714      	adds	r7, #20
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr
 8009694:	200007f8 	.word	0x200007f8
 8009698:	200007fc 	.word	0x200007fc
 800969c:	20000800 	.word	0x20000800

080096a0 <Inverse_Kinematic>:
float w_LF = 0.0f;
float w_LB = 0.0f;
float w_RF = 0.0f;
float w_RB = 0.0f;

void Inverse_Kinematic(float Vx ,float Vy ,float wz){
 80096a0:	b480      	push	{r7}
 80096a2:	b085      	sub	sp, #20
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	ed87 0a03 	vstr	s0, [r7, #12]
 80096aa:	edc7 0a02 	vstr	s1, [r7, #8]
 80096ae:	ed87 1a01 	vstr	s2, [r7, #4]
	w_LF = (Vx - Vy - (Lx_ +Ly_)*wz)/Radius_wheel_;
 80096b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80096b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80096ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80096be:	4b3a      	ldr	r3, [pc, #232]	@ (80097a8 <Inverse_Kinematic+0x108>)
 80096c0:	edd3 6a00 	vldr	s13, [r3]
 80096c4:	4b39      	ldr	r3, [pc, #228]	@ (80097ac <Inverse_Kinematic+0x10c>)
 80096c6:	edd3 7a00 	vldr	s15, [r3]
 80096ca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80096ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80096d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096d6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80096da:	4b35      	ldr	r3, [pc, #212]	@ (80097b0 <Inverse_Kinematic+0x110>)
 80096dc:	ed93 7a00 	vldr	s14, [r3]
 80096e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096e4:	4b33      	ldr	r3, [pc, #204]	@ (80097b4 <Inverse_Kinematic+0x114>)
 80096e6:	edc3 7a00 	vstr	s15, [r3]
	w_RF = -(Vx + Vy + (Lx_ +Ly_)*wz)/Radius_wheel_;
 80096ea:	ed97 7a03 	vldr	s14, [r7, #12]
 80096ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80096f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80096f6:	4b2c      	ldr	r3, [pc, #176]	@ (80097a8 <Inverse_Kinematic+0x108>)
 80096f8:	edd3 6a00 	vldr	s13, [r3]
 80096fc:	4b2b      	ldr	r3, [pc, #172]	@ (80097ac <Inverse_Kinematic+0x10c>)
 80096fe:	edd3 7a00 	vldr	s15, [r3]
 8009702:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009706:	edd7 7a01 	vldr	s15, [r7, #4]
 800970a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800970e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009712:	eef1 6a67 	vneg.f32	s13, s15
 8009716:	4b26      	ldr	r3, [pc, #152]	@ (80097b0 <Inverse_Kinematic+0x110>)
 8009718:	ed93 7a00 	vldr	s14, [r3]
 800971c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009720:	4b25      	ldr	r3, [pc, #148]	@ (80097b8 <Inverse_Kinematic+0x118>)
 8009722:	edc3 7a00 	vstr	s15, [r3]
	w_LB = (Vx + Vy - (Lx_ +Ly_)*wz)/Radius_wheel_;
 8009726:	ed97 7a03 	vldr	s14, [r7, #12]
 800972a:	edd7 7a02 	vldr	s15, [r7, #8]
 800972e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009732:	4b1d      	ldr	r3, [pc, #116]	@ (80097a8 <Inverse_Kinematic+0x108>)
 8009734:	edd3 6a00 	vldr	s13, [r3]
 8009738:	4b1c      	ldr	r3, [pc, #112]	@ (80097ac <Inverse_Kinematic+0x10c>)
 800973a:	edd3 7a00 	vldr	s15, [r3]
 800973e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009742:	edd7 7a01 	vldr	s15, [r7, #4]
 8009746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800974a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800974e:	4b18      	ldr	r3, [pc, #96]	@ (80097b0 <Inverse_Kinematic+0x110>)
 8009750:	ed93 7a00 	vldr	s14, [r3]
 8009754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009758:	4b18      	ldr	r3, [pc, #96]	@ (80097bc <Inverse_Kinematic+0x11c>)
 800975a:	edc3 7a00 	vstr	s15, [r3]
	w_RB = -(Vx - Vy + (Lx_ +Ly_)*wz)/Radius_wheel_;
 800975e:	ed97 7a03 	vldr	s14, [r7, #12]
 8009762:	edd7 7a02 	vldr	s15, [r7, #8]
 8009766:	ee37 7a67 	vsub.f32	s14, s14, s15
 800976a:	4b0f      	ldr	r3, [pc, #60]	@ (80097a8 <Inverse_Kinematic+0x108>)
 800976c:	edd3 6a00 	vldr	s13, [r3]
 8009770:	4b0e      	ldr	r3, [pc, #56]	@ (80097ac <Inverse_Kinematic+0x10c>)
 8009772:	edd3 7a00 	vldr	s15, [r3]
 8009776:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800977a:	edd7 7a01 	vldr	s15, [r7, #4]
 800977e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009786:	eef1 6a67 	vneg.f32	s13, s15
 800978a:	4b09      	ldr	r3, [pc, #36]	@ (80097b0 <Inverse_Kinematic+0x110>)
 800978c:	ed93 7a00 	vldr	s14, [r3]
 8009790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009794:	4b0a      	ldr	r3, [pc, #40]	@ (80097c0 <Inverse_Kinematic+0x120>)
 8009796:	edc3 7a00 	vstr	s15, [r3]
}
 800979a:	bf00      	nop
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	200007f8 	.word	0x200007f8
 80097ac:	200007fc 	.word	0x200007fc
 80097b0:	20000800 	.word	0x20000800
 80097b4:	20000804 	.word	0x20000804
 80097b8:	2000080c 	.word	0x2000080c
 80097bc:	20000808 	.word	0x20000808
 80097c0:	20000810 	.word	0x20000810

080097c4 <get_w_LF>:

float get_w_LF(){
 80097c4:	b480      	push	{r7}
 80097c6:	af00      	add	r7, sp, #0
	return w_LF;
 80097c8:	4b04      	ldr	r3, [pc, #16]	@ (80097dc <get_w_LF+0x18>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	ee07 3a90 	vmov	s15, r3
}
 80097d0:	eeb0 0a67 	vmov.f32	s0, s15
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr
 80097dc:	20000804 	.word	0x20000804

080097e0 <get_w_LB>:

float get_w_LB(){
 80097e0:	b480      	push	{r7}
 80097e2:	af00      	add	r7, sp, #0
	return w_LB;
 80097e4:	4b04      	ldr	r3, [pc, #16]	@ (80097f8 <get_w_LB+0x18>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	ee07 3a90 	vmov	s15, r3
}
 80097ec:	eeb0 0a67 	vmov.f32	s0, s15
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr
 80097f8:	20000808 	.word	0x20000808

080097fc <get_w_RF>:

float get_w_RF(){
 80097fc:	b480      	push	{r7}
 80097fe:	af00      	add	r7, sp, #0
	return w_RF;
 8009800:	4b04      	ldr	r3, [pc, #16]	@ (8009814 <get_w_RF+0x18>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	ee07 3a90 	vmov	s15, r3
}
 8009808:	eeb0 0a67 	vmov.f32	s0, s15
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr
 8009814:	2000080c 	.word	0x2000080c

08009818 <get_w_RB>:

float get_w_RB(){
 8009818:	b480      	push	{r7}
 800981a:	af00      	add	r7, sp, #0
	return w_RB;
 800981c:	4b04      	ldr	r3, [pc, #16]	@ (8009830 <get_w_RB+0x18>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	ee07 3a90 	vmov	s15, r3
}
 8009824:	eeb0 0a67 	vmov.f32	s0, s15
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr
 8009830:	20000810 	.word	0x20000810

08009834 <map>:

float map(float value, float fromLow, float fromHigh, float toLow, float toHigh) {
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	ed87 0a05 	vstr	s0, [r7, #20]
 800983e:	edc7 0a04 	vstr	s1, [r7, #16]
 8009842:	ed87 1a03 	vstr	s2, [r7, #12]
 8009846:	edc7 1a02 	vstr	s3, [r7, #8]
 800984a:	ed87 2a01 	vstr	s4, [r7, #4]
    return toLow + (toHigh - toLow) * ((value - fromLow) / (fromHigh - fromLow));
 800984e:	ed97 7a01 	vldr	s14, [r7, #4]
 8009852:	edd7 7a02 	vldr	s15, [r7, #8]
 8009856:	ee37 7a67 	vsub.f32	s14, s14, s15
 800985a:	edd7 6a05 	vldr	s13, [r7, #20]
 800985e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009862:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8009866:	edd7 6a03 	vldr	s13, [r7, #12]
 800986a:	edd7 7a04 	vldr	s15, [r7, #16]
 800986e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009872:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8009876:	ee27 7a27 	vmul.f32	s14, s14, s15
 800987a:	edd7 7a02 	vldr	s15, [r7, #8]
 800987e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8009882:	eeb0 0a67 	vmov.f32	s0, s15
 8009886:	371c      	adds	r7, #28
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	460b      	mov	r3, r1
 800989a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800989c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80098a0:	f002 fc50 	bl	800c144 <USBD_static_malloc>
 80098a4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d109      	bne.n	80098c0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	32b0      	adds	r2, #176	@ 0xb0
 80098b6:	2100      	movs	r1, #0
 80098b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80098bc:	2302      	movs	r3, #2
 80098be:	e0d4      	b.n	8009a6a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80098c0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80098c4:	2100      	movs	r1, #0
 80098c6:	68f8      	ldr	r0, [r7, #12]
 80098c8:	f002 fc80 	bl	800c1cc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	32b0      	adds	r2, #176	@ 0xb0
 80098d6:	68f9      	ldr	r1, [r7, #12]
 80098d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	32b0      	adds	r2, #176	@ 0xb0
 80098e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	7c1b      	ldrb	r3, [r3, #16]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d138      	bne.n	800996a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80098f8:	4b5e      	ldr	r3, [pc, #376]	@ (8009a74 <USBD_CDC_Init+0x1e4>)
 80098fa:	7819      	ldrb	r1, [r3, #0]
 80098fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009900:	2202      	movs	r2, #2
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f002 fafb 	bl	800befe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009908:	4b5a      	ldr	r3, [pc, #360]	@ (8009a74 <USBD_CDC_Init+0x1e4>)
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	f003 020f 	and.w	r2, r3, #15
 8009910:	6879      	ldr	r1, [r7, #4]
 8009912:	4613      	mov	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	440b      	add	r3, r1
 800991c:	3324      	adds	r3, #36	@ 0x24
 800991e:	2201      	movs	r2, #1
 8009920:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009922:	4b55      	ldr	r3, [pc, #340]	@ (8009a78 <USBD_CDC_Init+0x1e8>)
 8009924:	7819      	ldrb	r1, [r3, #0]
 8009926:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800992a:	2202      	movs	r2, #2
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f002 fae6 	bl	800befe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009932:	4b51      	ldr	r3, [pc, #324]	@ (8009a78 <USBD_CDC_Init+0x1e8>)
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	f003 020f 	and.w	r2, r3, #15
 800993a:	6879      	ldr	r1, [r7, #4]
 800993c:	4613      	mov	r3, r2
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4413      	add	r3, r2
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	440b      	add	r3, r1
 8009946:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800994a:	2201      	movs	r2, #1
 800994c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800994e:	4b4b      	ldr	r3, [pc, #300]	@ (8009a7c <USBD_CDC_Init+0x1ec>)
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	f003 020f 	and.w	r2, r3, #15
 8009956:	6879      	ldr	r1, [r7, #4]
 8009958:	4613      	mov	r3, r2
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	4413      	add	r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	440b      	add	r3, r1
 8009962:	3326      	adds	r3, #38	@ 0x26
 8009964:	2210      	movs	r2, #16
 8009966:	801a      	strh	r2, [r3, #0]
 8009968:	e035      	b.n	80099d6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800996a:	4b42      	ldr	r3, [pc, #264]	@ (8009a74 <USBD_CDC_Init+0x1e4>)
 800996c:	7819      	ldrb	r1, [r3, #0]
 800996e:	2340      	movs	r3, #64	@ 0x40
 8009970:	2202      	movs	r2, #2
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f002 fac3 	bl	800befe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009978:	4b3e      	ldr	r3, [pc, #248]	@ (8009a74 <USBD_CDC_Init+0x1e4>)
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	f003 020f 	and.w	r2, r3, #15
 8009980:	6879      	ldr	r1, [r7, #4]
 8009982:	4613      	mov	r3, r2
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	4413      	add	r3, r2
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	440b      	add	r3, r1
 800998c:	3324      	adds	r3, #36	@ 0x24
 800998e:	2201      	movs	r2, #1
 8009990:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009992:	4b39      	ldr	r3, [pc, #228]	@ (8009a78 <USBD_CDC_Init+0x1e8>)
 8009994:	7819      	ldrb	r1, [r3, #0]
 8009996:	2340      	movs	r3, #64	@ 0x40
 8009998:	2202      	movs	r2, #2
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f002 faaf 	bl	800befe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80099a0:	4b35      	ldr	r3, [pc, #212]	@ (8009a78 <USBD_CDC_Init+0x1e8>)
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	f003 020f 	and.w	r2, r3, #15
 80099a8:	6879      	ldr	r1, [r7, #4]
 80099aa:	4613      	mov	r3, r2
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	4413      	add	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	440b      	add	r3, r1
 80099b4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80099b8:	2201      	movs	r2, #1
 80099ba:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80099bc:	4b2f      	ldr	r3, [pc, #188]	@ (8009a7c <USBD_CDC_Init+0x1ec>)
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	f003 020f 	and.w	r2, r3, #15
 80099c4:	6879      	ldr	r1, [r7, #4]
 80099c6:	4613      	mov	r3, r2
 80099c8:	009b      	lsls	r3, r3, #2
 80099ca:	4413      	add	r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	440b      	add	r3, r1
 80099d0:	3326      	adds	r3, #38	@ 0x26
 80099d2:	2210      	movs	r2, #16
 80099d4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80099d6:	4b29      	ldr	r3, [pc, #164]	@ (8009a7c <USBD_CDC_Init+0x1ec>)
 80099d8:	7819      	ldrb	r1, [r3, #0]
 80099da:	2308      	movs	r3, #8
 80099dc:	2203      	movs	r2, #3
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f002 fa8d 	bl	800befe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80099e4:	4b25      	ldr	r3, [pc, #148]	@ (8009a7c <USBD_CDC_Init+0x1ec>)
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	f003 020f 	and.w	r2, r3, #15
 80099ec:	6879      	ldr	r1, [r7, #4]
 80099ee:	4613      	mov	r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4413      	add	r3, r2
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	440b      	add	r3, r1
 80099f8:	3324      	adds	r3, #36	@ 0x24
 80099fa:	2201      	movs	r2, #1
 80099fc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	33b0      	adds	r3, #176	@ 0xb0
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4413      	add	r3, r2
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d101      	bne.n	8009a38 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009a34:	2302      	movs	r3, #2
 8009a36:	e018      	b.n	8009a6a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	7c1b      	ldrb	r3, [r3, #16]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10a      	bne.n	8009a56 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a40:	4b0d      	ldr	r3, [pc, #52]	@ (8009a78 <USBD_CDC_Init+0x1e8>)
 8009a42:	7819      	ldrb	r1, [r3, #0]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009a4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f002 fb44 	bl	800c0dc <USBD_LL_PrepareReceive>
 8009a54:	e008      	b.n	8009a68 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a56:	4b08      	ldr	r3, [pc, #32]	@ (8009a78 <USBD_CDC_Init+0x1e8>)
 8009a58:	7819      	ldrb	r1, [r3, #0]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009a60:	2340      	movs	r3, #64	@ 0x40
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f002 fb3a 	bl	800c0dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	200000a7 	.word	0x200000a7
 8009a78:	200000a8 	.word	0x200000a8
 8009a7c:	200000a9 	.word	0x200000a9

08009a80 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	460b      	mov	r3, r1
 8009a8a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8009b78 <USBD_CDC_DeInit+0xf8>)
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	4619      	mov	r1, r3
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f002 fa59 	bl	800bf4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009a98:	4b37      	ldr	r3, [pc, #220]	@ (8009b78 <USBD_CDC_DeInit+0xf8>)
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	f003 020f 	and.w	r2, r3, #15
 8009aa0:	6879      	ldr	r1, [r7, #4]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	4413      	add	r3, r2
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	440b      	add	r3, r1
 8009aac:	3324      	adds	r3, #36	@ 0x24
 8009aae:	2200      	movs	r2, #0
 8009ab0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009ab2:	4b32      	ldr	r3, [pc, #200]	@ (8009b7c <USBD_CDC_DeInit+0xfc>)
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f002 fa46 	bl	800bf4a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009abe:	4b2f      	ldr	r3, [pc, #188]	@ (8009b7c <USBD_CDC_DeInit+0xfc>)
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	f003 020f 	and.w	r2, r3, #15
 8009ac6:	6879      	ldr	r1, [r7, #4]
 8009ac8:	4613      	mov	r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	4413      	add	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	440b      	add	r3, r1
 8009ad2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009ada:	4b29      	ldr	r3, [pc, #164]	@ (8009b80 <USBD_CDC_DeInit+0x100>)
 8009adc:	781b      	ldrb	r3, [r3, #0]
 8009ade:	4619      	mov	r1, r3
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f002 fa32 	bl	800bf4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009ae6:	4b26      	ldr	r3, [pc, #152]	@ (8009b80 <USBD_CDC_DeInit+0x100>)
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	f003 020f 	and.w	r2, r3, #15
 8009aee:	6879      	ldr	r1, [r7, #4]
 8009af0:	4613      	mov	r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	4413      	add	r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	440b      	add	r3, r1
 8009afa:	3324      	adds	r3, #36	@ 0x24
 8009afc:	2200      	movs	r2, #0
 8009afe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009b00:	4b1f      	ldr	r3, [pc, #124]	@ (8009b80 <USBD_CDC_DeInit+0x100>)
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	f003 020f 	and.w	r2, r3, #15
 8009b08:	6879      	ldr	r1, [r7, #4]
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	4413      	add	r3, r2
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	440b      	add	r3, r1
 8009b14:	3326      	adds	r3, #38	@ 0x26
 8009b16:	2200      	movs	r2, #0
 8009b18:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	32b0      	adds	r2, #176	@ 0xb0
 8009b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d01f      	beq.n	8009b6c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	33b0      	adds	r3, #176	@ 0xb0
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	4413      	add	r3, r2
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	32b0      	adds	r2, #176	@ 0xb0
 8009b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f002 fb06 	bl	800c160 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	32b0      	adds	r2, #176	@ 0xb0
 8009b5e:	2100      	movs	r1, #0
 8009b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009b6c:	2300      	movs	r3, #0
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	200000a7 	.word	0x200000a7
 8009b7c:	200000a8 	.word	0x200000a8
 8009b80:	200000a9 	.word	0x200000a9

08009b84 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b086      	sub	sp, #24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	32b0      	adds	r2, #176	@ 0xb0
 8009b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b9c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d101      	bne.n	8009bb4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009bb0:	2303      	movs	r3, #3
 8009bb2:	e0bf      	b.n	8009d34 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d050      	beq.n	8009c62 <USBD_CDC_Setup+0xde>
 8009bc0:	2b20      	cmp	r3, #32
 8009bc2:	f040 80af 	bne.w	8009d24 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	88db      	ldrh	r3, [r3, #6]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d03a      	beq.n	8009c44 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	b25b      	sxtb	r3, r3
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	da1b      	bge.n	8009c10 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	33b0      	adds	r3, #176	@ 0xb0
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	4413      	add	r3, r2
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009bee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	88d2      	ldrh	r2, [r2, #6]
 8009bf4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	88db      	ldrh	r3, [r3, #6]
 8009bfa:	2b07      	cmp	r3, #7
 8009bfc:	bf28      	it	cs
 8009bfe:	2307      	movcs	r3, #7
 8009c00:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	89fa      	ldrh	r2, [r7, #14]
 8009c06:	4619      	mov	r1, r3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f001 fd53 	bl	800b6b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009c0e:	e090      	b.n	8009d32 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	785a      	ldrb	r2, [r3, #1]
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	88db      	ldrh	r3, [r3, #6]
 8009c1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8009c20:	d803      	bhi.n	8009c2a <USBD_CDC_Setup+0xa6>
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	88db      	ldrh	r3, [r3, #6]
 8009c26:	b2da      	uxtb	r2, r3
 8009c28:	e000      	b.n	8009c2c <USBD_CDC_Setup+0xa8>
 8009c2a:	2240      	movs	r2, #64	@ 0x40
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009c32:	6939      	ldr	r1, [r7, #16]
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f001 fd65 	bl	800b70c <USBD_CtlPrepareRx>
      break;
 8009c42:	e076      	b.n	8009d32 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	33b0      	adds	r3, #176	@ 0xb0
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	4413      	add	r3, r2
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	683a      	ldr	r2, [r7, #0]
 8009c58:	7850      	ldrb	r0, [r2, #1]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	6839      	ldr	r1, [r7, #0]
 8009c5e:	4798      	blx	r3
      break;
 8009c60:	e067      	b.n	8009d32 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	785b      	ldrb	r3, [r3, #1]
 8009c66:	2b0b      	cmp	r3, #11
 8009c68:	d851      	bhi.n	8009d0e <USBD_CDC_Setup+0x18a>
 8009c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8009c70 <USBD_CDC_Setup+0xec>)
 8009c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c70:	08009ca1 	.word	0x08009ca1
 8009c74:	08009d1d 	.word	0x08009d1d
 8009c78:	08009d0f 	.word	0x08009d0f
 8009c7c:	08009d0f 	.word	0x08009d0f
 8009c80:	08009d0f 	.word	0x08009d0f
 8009c84:	08009d0f 	.word	0x08009d0f
 8009c88:	08009d0f 	.word	0x08009d0f
 8009c8c:	08009d0f 	.word	0x08009d0f
 8009c90:	08009d0f 	.word	0x08009d0f
 8009c94:	08009d0f 	.word	0x08009d0f
 8009c98:	08009ccb 	.word	0x08009ccb
 8009c9c:	08009cf5 	.word	0x08009cf5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	2b03      	cmp	r3, #3
 8009caa:	d107      	bne.n	8009cbc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009cac:	f107 030a 	add.w	r3, r7, #10
 8009cb0:	2202      	movs	r2, #2
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f001 fcfd 	bl	800b6b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009cba:	e032      	b.n	8009d22 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f001 fc7b 	bl	800b5ba <USBD_CtlError>
            ret = USBD_FAIL;
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	75fb      	strb	r3, [r7, #23]
          break;
 8009cc8:	e02b      	b.n	8009d22 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	2b03      	cmp	r3, #3
 8009cd4:	d107      	bne.n	8009ce6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009cd6:	f107 030d 	add.w	r3, r7, #13
 8009cda:	2201      	movs	r2, #1
 8009cdc:	4619      	mov	r1, r3
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f001 fce8 	bl	800b6b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ce4:	e01d      	b.n	8009d22 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ce6:	6839      	ldr	r1, [r7, #0]
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f001 fc66 	bl	800b5ba <USBD_CtlError>
            ret = USBD_FAIL;
 8009cee:	2303      	movs	r3, #3
 8009cf0:	75fb      	strb	r3, [r7, #23]
          break;
 8009cf2:	e016      	b.n	8009d22 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	2b03      	cmp	r3, #3
 8009cfe:	d00f      	beq.n	8009d20 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009d00:	6839      	ldr	r1, [r7, #0]
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f001 fc59 	bl	800b5ba <USBD_CtlError>
            ret = USBD_FAIL;
 8009d08:	2303      	movs	r3, #3
 8009d0a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009d0c:	e008      	b.n	8009d20 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009d0e:	6839      	ldr	r1, [r7, #0]
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f001 fc52 	bl	800b5ba <USBD_CtlError>
          ret = USBD_FAIL;
 8009d16:	2303      	movs	r3, #3
 8009d18:	75fb      	strb	r3, [r7, #23]
          break;
 8009d1a:	e002      	b.n	8009d22 <USBD_CDC_Setup+0x19e>
          break;
 8009d1c:	bf00      	nop
 8009d1e:	e008      	b.n	8009d32 <USBD_CDC_Setup+0x1ae>
          break;
 8009d20:	bf00      	nop
      }
      break;
 8009d22:	e006      	b.n	8009d32 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f001 fc47 	bl	800b5ba <USBD_CtlError>
      ret = USBD_FAIL;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8009d30:	bf00      	nop
  }

  return (uint8_t)ret;
 8009d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3718      	adds	r7, #24
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	460b      	mov	r3, r1
 8009d46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	32b0      	adds	r2, #176	@ 0xb0
 8009d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d101      	bne.n	8009d66 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009d62:	2303      	movs	r3, #3
 8009d64:	e065      	b.n	8009e32 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	32b0      	adds	r2, #176	@ 0xb0
 8009d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d74:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009d76:	78fb      	ldrb	r3, [r7, #3]
 8009d78:	f003 020f 	and.w	r2, r3, #15
 8009d7c:	6879      	ldr	r1, [r7, #4]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	4413      	add	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	440b      	add	r3, r1
 8009d88:	3318      	adds	r3, #24
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d02f      	beq.n	8009df0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009d90:	78fb      	ldrb	r3, [r7, #3]
 8009d92:	f003 020f 	and.w	r2, r3, #15
 8009d96:	6879      	ldr	r1, [r7, #4]
 8009d98:	4613      	mov	r3, r2
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	4413      	add	r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	440b      	add	r3, r1
 8009da2:	3318      	adds	r3, #24
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	78fb      	ldrb	r3, [r7, #3]
 8009da8:	f003 010f 	and.w	r1, r3, #15
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	460b      	mov	r3, r1
 8009db0:	00db      	lsls	r3, r3, #3
 8009db2:	440b      	add	r3, r1
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	4403      	add	r3, r0
 8009db8:	331c      	adds	r3, #28
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	fbb2 f1f3 	udiv	r1, r2, r3
 8009dc0:	fb01 f303 	mul.w	r3, r1, r3
 8009dc4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d112      	bne.n	8009df0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009dca:	78fb      	ldrb	r3, [r7, #3]
 8009dcc:	f003 020f 	and.w	r2, r3, #15
 8009dd0:	6879      	ldr	r1, [r7, #4]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	4413      	add	r3, r2
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	440b      	add	r3, r1
 8009ddc:	3318      	adds	r3, #24
 8009dde:	2200      	movs	r2, #0
 8009de0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009de2:	78f9      	ldrb	r1, [r7, #3]
 8009de4:	2300      	movs	r3, #0
 8009de6:	2200      	movs	r2, #0
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	f002 f956 	bl	800c09a <USBD_LL_Transmit>
 8009dee:	e01f      	b.n	8009e30 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	33b0      	adds	r3, #176	@ 0xb0
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	4413      	add	r3, r2
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	691b      	ldr	r3, [r3, #16]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d010      	beq.n	8009e30 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	33b0      	adds	r3, #176	@ 0xb0
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4413      	add	r3, r2
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	68ba      	ldr	r2, [r7, #8]
 8009e22:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009e26:	68ba      	ldr	r2, [r7, #8]
 8009e28:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009e2c:	78fa      	ldrb	r2, [r7, #3]
 8009e2e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	460b      	mov	r3, r1
 8009e44:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	32b0      	adds	r2, #176	@ 0xb0
 8009e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e54:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	32b0      	adds	r2, #176	@ 0xb0
 8009e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d101      	bne.n	8009e6c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009e68:	2303      	movs	r3, #3
 8009e6a:	e01a      	b.n	8009ea2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009e6c:	78fb      	ldrb	r3, [r7, #3]
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f002 f954 	bl	800c11e <USBD_LL_GetRxDataSize>
 8009e76:	4602      	mov	r2, r0
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	33b0      	adds	r3, #176	@ 0xb0
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	4413      	add	r3, r2
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009e9c:	4611      	mov	r1, r2
 8009e9e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009ea0:	2300      	movs	r3, #0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b084      	sub	sp, #16
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	32b0      	adds	r2, #176	@ 0xb0
 8009ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ec0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d101      	bne.n	8009ecc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009ec8:	2303      	movs	r3, #3
 8009eca:	e024      	b.n	8009f16 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	33b0      	adds	r3, #176	@ 0xb0
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d019      	beq.n	8009f14 <USBD_CDC_EP0_RxReady+0x6a>
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009ee6:	2bff      	cmp	r3, #255	@ 0xff
 8009ee8:	d014      	beq.n	8009f14 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	33b0      	adds	r3, #176	@ 0xb0
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4413      	add	r3, r2
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009f02:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009f0a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	22ff      	movs	r2, #255	@ 0xff
 8009f10:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
	...

08009f20 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b086      	sub	sp, #24
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009f28:	2182      	movs	r1, #130	@ 0x82
 8009f2a:	4818      	ldr	r0, [pc, #96]	@ (8009f8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f2c:	f000 fd0f 	bl	800a94e <USBD_GetEpDesc>
 8009f30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009f32:	2101      	movs	r1, #1
 8009f34:	4815      	ldr	r0, [pc, #84]	@ (8009f8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f36:	f000 fd0a 	bl	800a94e <USBD_GetEpDesc>
 8009f3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f3c:	2181      	movs	r1, #129	@ 0x81
 8009f3e:	4813      	ldr	r0, [pc, #76]	@ (8009f8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f40:	f000 fd05 	bl	800a94e <USBD_GetEpDesc>
 8009f44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009f4c:	697b      	ldr	r3, [r7, #20]
 8009f4e:	2210      	movs	r2, #16
 8009f50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d006      	beq.n	8009f66 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f60:	711a      	strb	r2, [r3, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d006      	beq.n	8009f7a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f74:	711a      	strb	r2, [r3, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2243      	movs	r2, #67	@ 0x43
 8009f7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009f80:	4b02      	ldr	r3, [pc, #8]	@ (8009f8c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3718      	adds	r7, #24
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	20000064 	.word	0x20000064

08009f90 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b086      	sub	sp, #24
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009f98:	2182      	movs	r1, #130	@ 0x82
 8009f9a:	4818      	ldr	r0, [pc, #96]	@ (8009ffc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f9c:	f000 fcd7 	bl	800a94e <USBD_GetEpDesc>
 8009fa0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009fa2:	2101      	movs	r1, #1
 8009fa4:	4815      	ldr	r0, [pc, #84]	@ (8009ffc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009fa6:	f000 fcd2 	bl	800a94e <USBD_GetEpDesc>
 8009faa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009fac:	2181      	movs	r1, #129	@ 0x81
 8009fae:	4813      	ldr	r0, [pc, #76]	@ (8009ffc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009fb0:	f000 fccd 	bl	800a94e <USBD_GetEpDesc>
 8009fb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d002      	beq.n	8009fc2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	2210      	movs	r2, #16
 8009fc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d006      	beq.n	8009fd6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	711a      	strb	r2, [r3, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f042 0202 	orr.w	r2, r2, #2
 8009fd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d006      	beq.n	8009fea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	711a      	strb	r2, [r3, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f042 0202 	orr.w	r2, r2, #2
 8009fe8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2243      	movs	r2, #67	@ 0x43
 8009fee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009ff0:	4b02      	ldr	r3, [pc, #8]	@ (8009ffc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3718      	adds	r7, #24
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	20000064 	.word	0x20000064

0800a000 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b086      	sub	sp, #24
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a008:	2182      	movs	r1, #130	@ 0x82
 800a00a:	4818      	ldr	r0, [pc, #96]	@ (800a06c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a00c:	f000 fc9f 	bl	800a94e <USBD_GetEpDesc>
 800a010:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a012:	2101      	movs	r1, #1
 800a014:	4815      	ldr	r0, [pc, #84]	@ (800a06c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a016:	f000 fc9a 	bl	800a94e <USBD_GetEpDesc>
 800a01a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a01c:	2181      	movs	r1, #129	@ 0x81
 800a01e:	4813      	ldr	r0, [pc, #76]	@ (800a06c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a020:	f000 fc95 	bl	800a94e <USBD_GetEpDesc>
 800a024:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d002      	beq.n	800a032 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	2210      	movs	r2, #16
 800a030:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d006      	beq.n	800a046 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	2200      	movs	r2, #0
 800a03c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a040:	711a      	strb	r2, [r3, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d006      	beq.n	800a05a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2200      	movs	r2, #0
 800a050:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a054:	711a      	strb	r2, [r3, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2243      	movs	r2, #67	@ 0x43
 800a05e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a060:	4b02      	ldr	r3, [pc, #8]	@ (800a06c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a062:	4618      	mov	r0, r3
 800a064:	3718      	adds	r7, #24
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20000064 	.word	0x20000064

0800a070 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	220a      	movs	r2, #10
 800a07c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a07e:	4b03      	ldr	r3, [pc, #12]	@ (800a08c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a080:	4618      	mov	r0, r3
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	20000020 	.word	0x20000020

0800a090 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d101      	bne.n	800a0a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a0a0:	2303      	movs	r3, #3
 800a0a2:	e009      	b.n	800a0b8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	33b0      	adds	r3, #176	@ 0xb0
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	4413      	add	r3, r2
 800a0b2:	683a      	ldr	r2, [r7, #0]
 800a0b4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	370c      	adds	r7, #12
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b087      	sub	sp, #28
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	32b0      	adds	r2, #176	@ 0xb0
 800a0da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0de:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d101      	bne.n	800a0ea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	e008      	b.n	800a0fc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a0fa:	2300      	movs	r3, #0
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	371c      	adds	r7, #28
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	32b0      	adds	r2, #176	@ 0xb0
 800a11c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a120:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d101      	bne.n	800a12c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a128:	2303      	movs	r3, #3
 800a12a:	e004      	b.n	800a136 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	683a      	ldr	r2, [r7, #0]
 800a130:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3714      	adds	r7, #20
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr
	...

0800a144 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	32b0      	adds	r2, #176	@ 0xb0
 800a156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a15a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	32b0      	adds	r2, #176	@ 0xb0
 800a166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d101      	bne.n	800a172 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a16e:	2303      	movs	r3, #3
 800a170:	e018      	b.n	800a1a4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	7c1b      	ldrb	r3, [r3, #16]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d10a      	bne.n	800a190 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a17a:	4b0c      	ldr	r3, [pc, #48]	@ (800a1ac <USBD_CDC_ReceivePacket+0x68>)
 800a17c:	7819      	ldrb	r1, [r3, #0]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a184:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f001 ffa7 	bl	800c0dc <USBD_LL_PrepareReceive>
 800a18e:	e008      	b.n	800a1a2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a190:	4b06      	ldr	r3, [pc, #24]	@ (800a1ac <USBD_CDC_ReceivePacket+0x68>)
 800a192:	7819      	ldrb	r1, [r3, #0]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a19a:	2340      	movs	r3, #64	@ 0x40
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f001 ff9d 	bl	800c0dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}
 800a1ac:	200000a8 	.word	0x200000a8

0800a1b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b086      	sub	sp, #24
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d101      	bne.n	800a1c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	e01f      	b.n	800a208 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d003      	beq.n	800a1ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	68ba      	ldr	r2, [r7, #8]
 800a1ea:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	79fa      	ldrb	r2, [r7, #7]
 800a1fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f001 fe17 	bl	800be30 <USBD_LL_Init>
 800a202:	4603      	mov	r3, r0
 800a204:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a206:	7dfb      	ldrb	r3, [r7, #23]
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3718      	adds	r7, #24
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
 800a218:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a21a:	2300      	movs	r3, #0
 800a21c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d101      	bne.n	800a228 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a224:	2303      	movs	r3, #3
 800a226:	e025      	b.n	800a274 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	32ae      	adds	r2, #174	@ 0xae
 800a23a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a240:	2b00      	cmp	r3, #0
 800a242:	d00f      	beq.n	800a264 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	32ae      	adds	r2, #174	@ 0xae
 800a24e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a254:	f107 020e 	add.w	r2, r7, #14
 800a258:	4610      	mov	r0, r2
 800a25a:	4798      	blx	r3
 800a25c:	4602      	mov	r2, r0
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a26a:	1c5a      	adds	r2, r3, #1
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a272:	2300      	movs	r3, #0
}
 800a274:	4618      	mov	r0, r3
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}

0800a27c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f001 fe1f 	bl	800bec8 <USBD_LL_Start>
 800a28a:	4603      	mov	r3, r0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3708      	adds	r7, #8
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a294:	b480      	push	{r7}
 800a296:	b083      	sub	sp, #12
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a29c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	370c      	adds	r7, #12
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr

0800a2aa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2aa:	b580      	push	{r7, lr}
 800a2ac:	b084      	sub	sp, #16
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d009      	beq.n	800a2d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	78fa      	ldrb	r2, [r7, #3]
 800a2ce:	4611      	mov	r1, r2
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	4798      	blx	r3
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3710      	adds	r7, #16
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}

0800a2e2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2e2:	b580      	push	{r7, lr}
 800a2e4:	b084      	sub	sp, #16
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2f8:	685b      	ldr	r3, [r3, #4]
 800a2fa:	78fa      	ldrb	r2, [r7, #3]
 800a2fc:	4611      	mov	r1, r2
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	4798      	blx	r3
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d001      	beq.n	800a30c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a308:	2303      	movs	r3, #3
 800a30a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a30c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a316:	b580      	push	{r7, lr}
 800a318:	b084      	sub	sp, #16
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
 800a31e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a326:	6839      	ldr	r1, [r7, #0]
 800a328:	4618      	mov	r0, r3
 800a32a:	f001 f90c 	bl	800b546 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a33c:	461a      	mov	r2, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a34a:	f003 031f 	and.w	r3, r3, #31
 800a34e:	2b02      	cmp	r3, #2
 800a350:	d01a      	beq.n	800a388 <USBD_LL_SetupStage+0x72>
 800a352:	2b02      	cmp	r3, #2
 800a354:	d822      	bhi.n	800a39c <USBD_LL_SetupStage+0x86>
 800a356:	2b00      	cmp	r3, #0
 800a358:	d002      	beq.n	800a360 <USBD_LL_SetupStage+0x4a>
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d00a      	beq.n	800a374 <USBD_LL_SetupStage+0x5e>
 800a35e:	e01d      	b.n	800a39c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a366:	4619      	mov	r1, r3
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 fb63 	bl	800aa34 <USBD_StdDevReq>
 800a36e:	4603      	mov	r3, r0
 800a370:	73fb      	strb	r3, [r7, #15]
      break;
 800a372:	e020      	b.n	800a3b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a37a:	4619      	mov	r1, r3
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 fbcb 	bl	800ab18 <USBD_StdItfReq>
 800a382:	4603      	mov	r3, r0
 800a384:	73fb      	strb	r3, [r7, #15]
      break;
 800a386:	e016      	b.n	800a3b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a38e:	4619      	mov	r1, r3
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 fc2d 	bl	800abf0 <USBD_StdEPReq>
 800a396:	4603      	mov	r3, r0
 800a398:	73fb      	strb	r3, [r7, #15]
      break;
 800a39a:	e00c      	b.n	800a3b6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a3a2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a3a6:	b2db      	uxtb	r3, r3
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f001 fdec 	bl	800bf88 <USBD_LL_StallEP>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	73fb      	strb	r3, [r7, #15]
      break;
 800a3b4:	bf00      	nop
  }

  return ret;
 800a3b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3710      	adds	r7, #16
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b086      	sub	sp, #24
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	607a      	str	r2, [r7, #4]
 800a3cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a3d2:	7afb      	ldrb	r3, [r7, #11]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d16e      	bne.n	800a4b6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a3de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a3e6:	2b03      	cmp	r3, #3
 800a3e8:	f040 8098 	bne.w	800a51c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	689a      	ldr	r2, [r3, #8]
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d913      	bls.n	800a420 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	689a      	ldr	r2, [r3, #8]
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	1ad2      	subs	r2, r2, r3
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	68da      	ldr	r2, [r3, #12]
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	4293      	cmp	r3, r2
 800a410:	bf28      	it	cs
 800a412:	4613      	movcs	r3, r2
 800a414:	461a      	mov	r2, r3
 800a416:	6879      	ldr	r1, [r7, #4]
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f001 f994 	bl	800b746 <USBD_CtlContinueRx>
 800a41e:	e07d      	b.n	800a51c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a426:	f003 031f 	and.w	r3, r3, #31
 800a42a:	2b02      	cmp	r3, #2
 800a42c:	d014      	beq.n	800a458 <USBD_LL_DataOutStage+0x98>
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d81d      	bhi.n	800a46e <USBD_LL_DataOutStage+0xae>
 800a432:	2b00      	cmp	r3, #0
 800a434:	d002      	beq.n	800a43c <USBD_LL_DataOutStage+0x7c>
 800a436:	2b01      	cmp	r3, #1
 800a438:	d003      	beq.n	800a442 <USBD_LL_DataOutStage+0x82>
 800a43a:	e018      	b.n	800a46e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a43c:	2300      	movs	r3, #0
 800a43e:	75bb      	strb	r3, [r7, #22]
            break;
 800a440:	e018      	b.n	800a474 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	4619      	mov	r1, r3
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	f000 fa64 	bl	800a91a <USBD_CoreFindIF>
 800a452:	4603      	mov	r3, r0
 800a454:	75bb      	strb	r3, [r7, #22]
            break;
 800a456:	e00d      	b.n	800a474 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	4619      	mov	r1, r3
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f000 fa66 	bl	800a934 <USBD_CoreFindEP>
 800a468:	4603      	mov	r3, r0
 800a46a:	75bb      	strb	r3, [r7, #22]
            break;
 800a46c:	e002      	b.n	800a474 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a46e:	2300      	movs	r3, #0
 800a470:	75bb      	strb	r3, [r7, #22]
            break;
 800a472:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a474:	7dbb      	ldrb	r3, [r7, #22]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d119      	bne.n	800a4ae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a480:	b2db      	uxtb	r3, r3
 800a482:	2b03      	cmp	r3, #3
 800a484:	d113      	bne.n	800a4ae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a486:	7dba      	ldrb	r2, [r7, #22]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	32ae      	adds	r2, #174	@ 0xae
 800a48c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00b      	beq.n	800a4ae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a496:	7dba      	ldrb	r2, [r7, #22]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a49e:	7dba      	ldrb	r2, [r7, #22]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	32ae      	adds	r2, #174	@ 0xae
 800a4a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4a8:	691b      	ldr	r3, [r3, #16]
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a4ae:	68f8      	ldr	r0, [r7, #12]
 800a4b0:	f001 f95a 	bl	800b768 <USBD_CtlSendStatus>
 800a4b4:	e032      	b.n	800a51c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a4b6:	7afb      	ldrb	r3, [r7, #11]
 800a4b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	4619      	mov	r1, r3
 800a4c0:	68f8      	ldr	r0, [r7, #12]
 800a4c2:	f000 fa37 	bl	800a934 <USBD_CoreFindEP>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4ca:	7dbb      	ldrb	r3, [r7, #22]
 800a4cc:	2bff      	cmp	r3, #255	@ 0xff
 800a4ce:	d025      	beq.n	800a51c <USBD_LL_DataOutStage+0x15c>
 800a4d0:	7dbb      	ldrb	r3, [r7, #22]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d122      	bne.n	800a51c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	2b03      	cmp	r3, #3
 800a4e0:	d117      	bne.n	800a512 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a4e2:	7dba      	ldrb	r2, [r7, #22]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	32ae      	adds	r2, #174	@ 0xae
 800a4e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ec:	699b      	ldr	r3, [r3, #24]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00f      	beq.n	800a512 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a4f2:	7dba      	ldrb	r2, [r7, #22]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a4fa:	7dba      	ldrb	r2, [r7, #22]
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	32ae      	adds	r2, #174	@ 0xae
 800a500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a504:	699b      	ldr	r3, [r3, #24]
 800a506:	7afa      	ldrb	r2, [r7, #11]
 800a508:	4611      	mov	r1, r2
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	4798      	blx	r3
 800a50e:	4603      	mov	r3, r0
 800a510:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a512:	7dfb      	ldrb	r3, [r7, #23]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d001      	beq.n	800a51c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a518:	7dfb      	ldrb	r3, [r7, #23]
 800a51a:	e000      	b.n	800a51e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a51c:	2300      	movs	r3, #0
}
 800a51e:	4618      	mov	r0, r3
 800a520:	3718      	adds	r7, #24
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b086      	sub	sp, #24
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	60f8      	str	r0, [r7, #12]
 800a52e:	460b      	mov	r3, r1
 800a530:	607a      	str	r2, [r7, #4]
 800a532:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a534:	7afb      	ldrb	r3, [r7, #11]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d16f      	bne.n	800a61a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	3314      	adds	r3, #20
 800a53e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a546:	2b02      	cmp	r3, #2
 800a548:	d15a      	bne.n	800a600 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	689a      	ldr	r2, [r3, #8]
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	429a      	cmp	r2, r3
 800a554:	d914      	bls.n	800a580 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	689a      	ldr	r2, [r3, #8]
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	1ad2      	subs	r2, r2, r3
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	461a      	mov	r2, r3
 800a56a:	6879      	ldr	r1, [r7, #4]
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	f001 f8bc 	bl	800b6ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a572:	2300      	movs	r3, #0
 800a574:	2200      	movs	r2, #0
 800a576:	2100      	movs	r1, #0
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f001 fdaf 	bl	800c0dc <USBD_LL_PrepareReceive>
 800a57e:	e03f      	b.n	800a600 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	68da      	ldr	r2, [r3, #12]
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d11c      	bne.n	800a5c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	685a      	ldr	r2, [r3, #4]
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a594:	429a      	cmp	r2, r3
 800a596:	d316      	bcc.n	800a5c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	685a      	ldr	r2, [r3, #4]
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d20f      	bcs.n	800a5c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f001 f89d 	bl	800b6ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	2100      	movs	r1, #0
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f001 fd8c 	bl	800c0dc <USBD_LL_PrepareReceive>
 800a5c4:	e01c      	b.n	800a600 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	2b03      	cmp	r3, #3
 800a5d0:	d10f      	bne.n	800a5f2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5d8:	68db      	ldr	r3, [r3, #12]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d009      	beq.n	800a5f2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5ec:	68db      	ldr	r3, [r3, #12]
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5f2:	2180      	movs	r1, #128	@ 0x80
 800a5f4:	68f8      	ldr	r0, [r7, #12]
 800a5f6:	f001 fcc7 	bl	800bf88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f001 f8c7 	bl	800b78e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d03a      	beq.n	800a680 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a60a:	68f8      	ldr	r0, [r7, #12]
 800a60c:	f7ff fe42 	bl	800a294 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a618:	e032      	b.n	800a680 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a61a:	7afb      	ldrb	r3, [r7, #11]
 800a61c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a620:	b2db      	uxtb	r3, r3
 800a622:	4619      	mov	r1, r3
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f000 f985 	bl	800a934 <USBD_CoreFindEP>
 800a62a:	4603      	mov	r3, r0
 800a62c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a62e:	7dfb      	ldrb	r3, [r7, #23]
 800a630:	2bff      	cmp	r3, #255	@ 0xff
 800a632:	d025      	beq.n	800a680 <USBD_LL_DataInStage+0x15a>
 800a634:	7dfb      	ldrb	r3, [r7, #23]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d122      	bne.n	800a680 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a640:	b2db      	uxtb	r3, r3
 800a642:	2b03      	cmp	r3, #3
 800a644:	d11c      	bne.n	800a680 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a646:	7dfa      	ldrb	r2, [r7, #23]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	32ae      	adds	r2, #174	@ 0xae
 800a64c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a650:	695b      	ldr	r3, [r3, #20]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d014      	beq.n	800a680 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a656:	7dfa      	ldrb	r2, [r7, #23]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a65e:	7dfa      	ldrb	r2, [r7, #23]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	32ae      	adds	r2, #174	@ 0xae
 800a664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a668:	695b      	ldr	r3, [r3, #20]
 800a66a:	7afa      	ldrb	r2, [r7, #11]
 800a66c:	4611      	mov	r1, r2
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	4798      	blx	r3
 800a672:	4603      	mov	r3, r0
 800a674:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a676:	7dbb      	ldrb	r3, [r7, #22]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d001      	beq.n	800a680 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a67c:	7dbb      	ldrb	r3, [r7, #22]
 800a67e:	e000      	b.n	800a682 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3718      	adds	r7, #24
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b084      	sub	sp, #16
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a692:	2300      	movs	r3, #0
 800a694:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2201      	movs	r2, #1
 800a69a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d014      	beq.n	800a6f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00e      	beq.n	800a6f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	6852      	ldr	r2, [r2, #4]
 800a6de:	b2d2      	uxtb	r2, r2
 800a6e0:	4611      	mov	r1, r2
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	4798      	blx	r3
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d001      	beq.n	800a6f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a6ec:	2303      	movs	r3, #3
 800a6ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6f0:	2340      	movs	r3, #64	@ 0x40
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	2100      	movs	r1, #0
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f001 fc01 	bl	800befe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2201      	movs	r2, #1
 800a700:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2240      	movs	r2, #64	@ 0x40
 800a708:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a70c:	2340      	movs	r3, #64	@ 0x40
 800a70e:	2200      	movs	r2, #0
 800a710:	2180      	movs	r1, #128	@ 0x80
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f001 fbf3 	bl	800befe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2240      	movs	r2, #64	@ 0x40
 800a722:	621a      	str	r2, [r3, #32]

  return ret;
 800a724:	7bfb      	ldrb	r3, [r7, #15]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a72e:	b480      	push	{r7}
 800a730:	b083      	sub	sp, #12
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
 800a736:	460b      	mov	r3, r1
 800a738:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	78fa      	ldrb	r2, [r7, #3]
 800a73e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a740:	2300      	movs	r3, #0
}
 800a742:	4618      	mov	r0, r3
 800a744:	370c      	adds	r7, #12
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr

0800a74e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a74e:	b480      	push	{r7}
 800a750:	b083      	sub	sp, #12
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	2b04      	cmp	r3, #4
 800a760:	d006      	beq.n	800a770 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a768:	b2da      	uxtb	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2204      	movs	r2, #4
 800a774:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a778:	2300      	movs	r3, #0
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	370c      	adds	r7, #12
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr

0800a786 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a786:	b480      	push	{r7}
 800a788:	b083      	sub	sp, #12
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a794:	b2db      	uxtb	r3, r3
 800a796:	2b04      	cmp	r3, #4
 800a798:	d106      	bne.n	800a7a8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a7a0:	b2da      	uxtb	r2, r3
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	370c      	adds	r7, #12
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr

0800a7b6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b082      	sub	sp, #8
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	2b03      	cmp	r3, #3
 800a7c8:	d110      	bne.n	800a7ec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d00b      	beq.n	800a7ec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7da:	69db      	ldr	r3, [r3, #28]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d005      	beq.n	800a7ec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7e6:	69db      	ldr	r3, [r3, #28]
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3708      	adds	r7, #8
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b082      	sub	sp, #8
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
 800a7fe:	460b      	mov	r3, r1
 800a800:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	32ae      	adds	r2, #174	@ 0xae
 800a80c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d101      	bne.n	800a818 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a814:	2303      	movs	r3, #3
 800a816:	e01c      	b.n	800a852 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	2b03      	cmp	r3, #3
 800a822:	d115      	bne.n	800a850 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	32ae      	adds	r2, #174	@ 0xae
 800a82e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a832:	6a1b      	ldr	r3, [r3, #32]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00b      	beq.n	800a850 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	32ae      	adds	r2, #174	@ 0xae
 800a842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a846:	6a1b      	ldr	r3, [r3, #32]
 800a848:	78fa      	ldrb	r2, [r7, #3]
 800a84a:	4611      	mov	r1, r2
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	3708      	adds	r7, #8
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b082      	sub	sp, #8
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
 800a862:	460b      	mov	r3, r1
 800a864:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	32ae      	adds	r2, #174	@ 0xae
 800a870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d101      	bne.n	800a87c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a878:	2303      	movs	r3, #3
 800a87a:	e01c      	b.n	800a8b6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a882:	b2db      	uxtb	r3, r3
 800a884:	2b03      	cmp	r3, #3
 800a886:	d115      	bne.n	800a8b4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	32ae      	adds	r2, #174	@ 0xae
 800a892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d00b      	beq.n	800a8b4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	32ae      	adds	r2, #174	@ 0xae
 800a8a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ac:	78fa      	ldrb	r2, [r7, #3]
 800a8ae:	4611      	mov	r1, r2
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a8b4:	2300      	movs	r3, #0
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3708      	adds	r7, #8
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a8be:	b480      	push	{r7}
 800a8c0:	b083      	sub	sp, #12
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00e      	beq.n	800a910 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	6852      	ldr	r2, [r2, #4]
 800a8fe:	b2d2      	uxtb	r2, r2
 800a900:	4611      	mov	r1, r2
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	4798      	blx	r3
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d001      	beq.n	800a910 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a90c:	2303      	movs	r3, #3
 800a90e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a910:	7bfb      	ldrb	r3, [r7, #15]
}
 800a912:	4618      	mov	r0, r3
 800a914:	3710      	adds	r7, #16
 800a916:	46bd      	mov	sp, r7
 800a918:	bd80      	pop	{r7, pc}

0800a91a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a91a:	b480      	push	{r7}
 800a91c:	b083      	sub	sp, #12
 800a91e:	af00      	add	r7, sp, #0
 800a920:	6078      	str	r0, [r7, #4]
 800a922:	460b      	mov	r3, r1
 800a924:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a926:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a928:	4618      	mov	r0, r3
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	460b      	mov	r3, r1
 800a93e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a940:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a942:	4618      	mov	r0, r3
 800a944:	370c      	adds	r7, #12
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr

0800a94e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b086      	sub	sp, #24
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
 800a956:	460b      	mov	r3, r1
 800a958:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a962:	2300      	movs	r3, #0
 800a964:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	885b      	ldrh	r3, [r3, #2]
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	7812      	ldrb	r2, [r2, #0]
 800a970:	4293      	cmp	r3, r2
 800a972:	d91f      	bls.n	800a9b4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a97a:	e013      	b.n	800a9a4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a97c:	f107 030a 	add.w	r3, r7, #10
 800a980:	4619      	mov	r1, r3
 800a982:	6978      	ldr	r0, [r7, #20]
 800a984:	f000 f81b 	bl	800a9be <USBD_GetNextDesc>
 800a988:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	785b      	ldrb	r3, [r3, #1]
 800a98e:	2b05      	cmp	r3, #5
 800a990:	d108      	bne.n	800a9a4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	789b      	ldrb	r3, [r3, #2]
 800a99a:	78fa      	ldrb	r2, [r7, #3]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d008      	beq.n	800a9b2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	885b      	ldrh	r3, [r3, #2]
 800a9a8:	b29a      	uxth	r2, r3
 800a9aa:	897b      	ldrh	r3, [r7, #10]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d8e5      	bhi.n	800a97c <USBD_GetEpDesc+0x2e>
 800a9b0:	e000      	b.n	800a9b4 <USBD_GetEpDesc+0x66>
          break;
 800a9b2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a9b4:	693b      	ldr	r3, [r7, #16]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3718      	adds	r7, #24
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}

0800a9be <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a9be:	b480      	push	{r7}
 800a9c0:	b085      	sub	sp, #20
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	881b      	ldrh	r3, [r3, #0]
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	7812      	ldrb	r2, [r2, #0]
 800a9d4:	4413      	add	r3, r2
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3714      	adds	r7, #20
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr

0800a9f6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a9f6:	b480      	push	{r7}
 800a9f8:	b087      	sub	sp, #28
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aa14:	8a3b      	ldrh	r3, [r7, #16]
 800aa16:	021b      	lsls	r3, r3, #8
 800aa18:	b21a      	sxth	r2, r3
 800aa1a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aa1e:	4313      	orrs	r3, r2
 800aa20:	b21b      	sxth	r3, r3
 800aa22:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aa24:	89fb      	ldrh	r3, [r7, #14]
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	371c      	adds	r7, #28
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr
	...

0800aa34 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aa4a:	2b40      	cmp	r3, #64	@ 0x40
 800aa4c:	d005      	beq.n	800aa5a <USBD_StdDevReq+0x26>
 800aa4e:	2b40      	cmp	r3, #64	@ 0x40
 800aa50:	d857      	bhi.n	800ab02 <USBD_StdDevReq+0xce>
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00f      	beq.n	800aa76 <USBD_StdDevReq+0x42>
 800aa56:	2b20      	cmp	r3, #32
 800aa58:	d153      	bne.n	800ab02 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	32ae      	adds	r2, #174	@ 0xae
 800aa64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa68:	689b      	ldr	r3, [r3, #8]
 800aa6a:	6839      	ldr	r1, [r7, #0]
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	4798      	blx	r3
 800aa70:	4603      	mov	r3, r0
 800aa72:	73fb      	strb	r3, [r7, #15]
      break;
 800aa74:	e04a      	b.n	800ab0c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	785b      	ldrb	r3, [r3, #1]
 800aa7a:	2b09      	cmp	r3, #9
 800aa7c:	d83b      	bhi.n	800aaf6 <USBD_StdDevReq+0xc2>
 800aa7e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa84 <USBD_StdDevReq+0x50>)
 800aa80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa84:	0800aad9 	.word	0x0800aad9
 800aa88:	0800aaed 	.word	0x0800aaed
 800aa8c:	0800aaf7 	.word	0x0800aaf7
 800aa90:	0800aae3 	.word	0x0800aae3
 800aa94:	0800aaf7 	.word	0x0800aaf7
 800aa98:	0800aab7 	.word	0x0800aab7
 800aa9c:	0800aaad 	.word	0x0800aaad
 800aaa0:	0800aaf7 	.word	0x0800aaf7
 800aaa4:	0800aacf 	.word	0x0800aacf
 800aaa8:	0800aac1 	.word	0x0800aac1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aaac:	6839      	ldr	r1, [r7, #0]
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 fa3c 	bl	800af2c <USBD_GetDescriptor>
          break;
 800aab4:	e024      	b.n	800ab00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aab6:	6839      	ldr	r1, [r7, #0]
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 fba1 	bl	800b200 <USBD_SetAddress>
          break;
 800aabe:	e01f      	b.n	800ab00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aac0:	6839      	ldr	r1, [r7, #0]
 800aac2:	6878      	ldr	r0, [r7, #4]
 800aac4:	f000 fbe0 	bl	800b288 <USBD_SetConfig>
 800aac8:	4603      	mov	r3, r0
 800aaca:	73fb      	strb	r3, [r7, #15]
          break;
 800aacc:	e018      	b.n	800ab00 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aace:	6839      	ldr	r1, [r7, #0]
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 fc83 	bl	800b3dc <USBD_GetConfig>
          break;
 800aad6:	e013      	b.n	800ab00 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aad8:	6839      	ldr	r1, [r7, #0]
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fcb4 	bl	800b448 <USBD_GetStatus>
          break;
 800aae0:	e00e      	b.n	800ab00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aae2:	6839      	ldr	r1, [r7, #0]
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 fce3 	bl	800b4b0 <USBD_SetFeature>
          break;
 800aaea:	e009      	b.n	800ab00 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aaec:	6839      	ldr	r1, [r7, #0]
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 fd07 	bl	800b502 <USBD_ClrFeature>
          break;
 800aaf4:	e004      	b.n	800ab00 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800aaf6:	6839      	ldr	r1, [r7, #0]
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 fd5e 	bl	800b5ba <USBD_CtlError>
          break;
 800aafe:	bf00      	nop
      }
      break;
 800ab00:	e004      	b.n	800ab0c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ab02:	6839      	ldr	r1, [r7, #0]
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 fd58 	bl	800b5ba <USBD_CtlError>
      break;
 800ab0a:	bf00      	nop
  }

  return ret;
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop

0800ab18 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab22:	2300      	movs	r3, #0
 800ab24:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab2e:	2b40      	cmp	r3, #64	@ 0x40
 800ab30:	d005      	beq.n	800ab3e <USBD_StdItfReq+0x26>
 800ab32:	2b40      	cmp	r3, #64	@ 0x40
 800ab34:	d852      	bhi.n	800abdc <USBD_StdItfReq+0xc4>
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d001      	beq.n	800ab3e <USBD_StdItfReq+0x26>
 800ab3a:	2b20      	cmp	r3, #32
 800ab3c:	d14e      	bne.n	800abdc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	3b01      	subs	r3, #1
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	d840      	bhi.n	800abce <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	889b      	ldrh	r3, [r3, #4]
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d836      	bhi.n	800abc4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	889b      	ldrh	r3, [r3, #4]
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	4619      	mov	r1, r3
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7ff fedb 	bl	800a91a <USBD_CoreFindIF>
 800ab64:	4603      	mov	r3, r0
 800ab66:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab68:	7bbb      	ldrb	r3, [r7, #14]
 800ab6a:	2bff      	cmp	r3, #255	@ 0xff
 800ab6c:	d01d      	beq.n	800abaa <USBD_StdItfReq+0x92>
 800ab6e:	7bbb      	ldrb	r3, [r7, #14]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d11a      	bne.n	800abaa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ab74:	7bba      	ldrb	r2, [r7, #14]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	32ae      	adds	r2, #174	@ 0xae
 800ab7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00f      	beq.n	800aba4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ab84:	7bba      	ldrb	r2, [r7, #14]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ab8c:	7bba      	ldrb	r2, [r7, #14]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	32ae      	adds	r2, #174	@ 0xae
 800ab92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	6839      	ldr	r1, [r7, #0]
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	4798      	blx	r3
 800ab9e:	4603      	mov	r3, r0
 800aba0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aba2:	e004      	b.n	800abae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aba4:	2303      	movs	r3, #3
 800aba6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aba8:	e001      	b.n	800abae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800abaa:	2303      	movs	r3, #3
 800abac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	88db      	ldrh	r3, [r3, #6]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d110      	bne.n	800abd8 <USBD_StdItfReq+0xc0>
 800abb6:	7bfb      	ldrb	r3, [r7, #15]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d10d      	bne.n	800abd8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 fdd3 	bl	800b768 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800abc2:	e009      	b.n	800abd8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800abc4:	6839      	ldr	r1, [r7, #0]
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 fcf7 	bl	800b5ba <USBD_CtlError>
          break;
 800abcc:	e004      	b.n	800abd8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800abce:	6839      	ldr	r1, [r7, #0]
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f000 fcf2 	bl	800b5ba <USBD_CtlError>
          break;
 800abd6:	e000      	b.n	800abda <USBD_StdItfReq+0xc2>
          break;
 800abd8:	bf00      	nop
      }
      break;
 800abda:	e004      	b.n	800abe6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800abdc:	6839      	ldr	r1, [r7, #0]
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 fceb 	bl	800b5ba <USBD_CtlError>
      break;
 800abe4:	bf00      	nop
  }

  return ret;
 800abe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3710      	adds	r7, #16
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800abfa:	2300      	movs	r3, #0
 800abfc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	889b      	ldrh	r3, [r3, #4]
 800ac02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ac0c:	2b40      	cmp	r3, #64	@ 0x40
 800ac0e:	d007      	beq.n	800ac20 <USBD_StdEPReq+0x30>
 800ac10:	2b40      	cmp	r3, #64	@ 0x40
 800ac12:	f200 817f 	bhi.w	800af14 <USBD_StdEPReq+0x324>
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d02a      	beq.n	800ac70 <USBD_StdEPReq+0x80>
 800ac1a:	2b20      	cmp	r3, #32
 800ac1c:	f040 817a 	bne.w	800af14 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ac20:	7bbb      	ldrb	r3, [r7, #14]
 800ac22:	4619      	mov	r1, r3
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f7ff fe85 	bl	800a934 <USBD_CoreFindEP>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac2e:	7b7b      	ldrb	r3, [r7, #13]
 800ac30:	2bff      	cmp	r3, #255	@ 0xff
 800ac32:	f000 8174 	beq.w	800af1e <USBD_StdEPReq+0x32e>
 800ac36:	7b7b      	ldrb	r3, [r7, #13]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f040 8170 	bne.w	800af1e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ac3e:	7b7a      	ldrb	r2, [r7, #13]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ac46:	7b7a      	ldrb	r2, [r7, #13]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	32ae      	adds	r2, #174	@ 0xae
 800ac4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	f000 8163 	beq.w	800af1e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ac58:	7b7a      	ldrb	r2, [r7, #13]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	32ae      	adds	r2, #174	@ 0xae
 800ac5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac62:	689b      	ldr	r3, [r3, #8]
 800ac64:	6839      	ldr	r1, [r7, #0]
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	4798      	blx	r3
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ac6e:	e156      	b.n	800af1e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	785b      	ldrb	r3, [r3, #1]
 800ac74:	2b03      	cmp	r3, #3
 800ac76:	d008      	beq.n	800ac8a <USBD_StdEPReq+0x9a>
 800ac78:	2b03      	cmp	r3, #3
 800ac7a:	f300 8145 	bgt.w	800af08 <USBD_StdEPReq+0x318>
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	f000 809b 	beq.w	800adba <USBD_StdEPReq+0x1ca>
 800ac84:	2b01      	cmp	r3, #1
 800ac86:	d03c      	beq.n	800ad02 <USBD_StdEPReq+0x112>
 800ac88:	e13e      	b.n	800af08 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	d002      	beq.n	800ac9c <USBD_StdEPReq+0xac>
 800ac96:	2b03      	cmp	r3, #3
 800ac98:	d016      	beq.n	800acc8 <USBD_StdEPReq+0xd8>
 800ac9a:	e02c      	b.n	800acf6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac9c:	7bbb      	ldrb	r3, [r7, #14]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00d      	beq.n	800acbe <USBD_StdEPReq+0xce>
 800aca2:	7bbb      	ldrb	r3, [r7, #14]
 800aca4:	2b80      	cmp	r3, #128	@ 0x80
 800aca6:	d00a      	beq.n	800acbe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aca8:	7bbb      	ldrb	r3, [r7, #14]
 800acaa:	4619      	mov	r1, r3
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f001 f96b 	bl	800bf88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800acb2:	2180      	movs	r1, #128	@ 0x80
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f001 f967 	bl	800bf88 <USBD_LL_StallEP>
 800acba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800acbc:	e020      	b.n	800ad00 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800acbe:	6839      	ldr	r1, [r7, #0]
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 fc7a 	bl	800b5ba <USBD_CtlError>
              break;
 800acc6:	e01b      	b.n	800ad00 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	885b      	ldrh	r3, [r3, #2]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d10e      	bne.n	800acee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800acd0:	7bbb      	ldrb	r3, [r7, #14]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00b      	beq.n	800acee <USBD_StdEPReq+0xfe>
 800acd6:	7bbb      	ldrb	r3, [r7, #14]
 800acd8:	2b80      	cmp	r3, #128	@ 0x80
 800acda:	d008      	beq.n	800acee <USBD_StdEPReq+0xfe>
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	88db      	ldrh	r3, [r3, #6]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d104      	bne.n	800acee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ace4:	7bbb      	ldrb	r3, [r7, #14]
 800ace6:	4619      	mov	r1, r3
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f001 f94d 	bl	800bf88 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 fd3a 	bl	800b768 <USBD_CtlSendStatus>

              break;
 800acf4:	e004      	b.n	800ad00 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800acf6:	6839      	ldr	r1, [r7, #0]
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 fc5e 	bl	800b5ba <USBD_CtlError>
              break;
 800acfe:	bf00      	nop
          }
          break;
 800ad00:	e107      	b.n	800af12 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	d002      	beq.n	800ad14 <USBD_StdEPReq+0x124>
 800ad0e:	2b03      	cmp	r3, #3
 800ad10:	d016      	beq.n	800ad40 <USBD_StdEPReq+0x150>
 800ad12:	e04b      	b.n	800adac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad14:	7bbb      	ldrb	r3, [r7, #14]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d00d      	beq.n	800ad36 <USBD_StdEPReq+0x146>
 800ad1a:	7bbb      	ldrb	r3, [r7, #14]
 800ad1c:	2b80      	cmp	r3, #128	@ 0x80
 800ad1e:	d00a      	beq.n	800ad36 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad20:	7bbb      	ldrb	r3, [r7, #14]
 800ad22:	4619      	mov	r1, r3
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f001 f92f 	bl	800bf88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad2a:	2180      	movs	r1, #128	@ 0x80
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f001 f92b 	bl	800bf88 <USBD_LL_StallEP>
 800ad32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad34:	e040      	b.n	800adb8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ad36:	6839      	ldr	r1, [r7, #0]
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 fc3e 	bl	800b5ba <USBD_CtlError>
              break;
 800ad3e:	e03b      	b.n	800adb8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	885b      	ldrh	r3, [r3, #2]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d136      	bne.n	800adb6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ad48:	7bbb      	ldrb	r3, [r7, #14]
 800ad4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d004      	beq.n	800ad5c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ad52:	7bbb      	ldrb	r3, [r7, #14]
 800ad54:	4619      	mov	r1, r3
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f001 f935 	bl	800bfc6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f000 fd03 	bl	800b768 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ad62:	7bbb      	ldrb	r3, [r7, #14]
 800ad64:	4619      	mov	r1, r3
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f7ff fde4 	bl	800a934 <USBD_CoreFindEP>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad70:	7b7b      	ldrb	r3, [r7, #13]
 800ad72:	2bff      	cmp	r3, #255	@ 0xff
 800ad74:	d01f      	beq.n	800adb6 <USBD_StdEPReq+0x1c6>
 800ad76:	7b7b      	ldrb	r3, [r7, #13]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d11c      	bne.n	800adb6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ad7c:	7b7a      	ldrb	r2, [r7, #13]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ad84:	7b7a      	ldrb	r2, [r7, #13]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	32ae      	adds	r2, #174	@ 0xae
 800ad8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d010      	beq.n	800adb6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ad94:	7b7a      	ldrb	r2, [r7, #13]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	32ae      	adds	r2, #174	@ 0xae
 800ad9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	6839      	ldr	r1, [r7, #0]
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	4798      	blx	r3
 800ada6:	4603      	mov	r3, r0
 800ada8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800adaa:	e004      	b.n	800adb6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800adac:	6839      	ldr	r1, [r7, #0]
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f000 fc03 	bl	800b5ba <USBD_CtlError>
              break;
 800adb4:	e000      	b.n	800adb8 <USBD_StdEPReq+0x1c8>
              break;
 800adb6:	bf00      	nop
          }
          break;
 800adb8:	e0ab      	b.n	800af12 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	2b02      	cmp	r3, #2
 800adc4:	d002      	beq.n	800adcc <USBD_StdEPReq+0x1dc>
 800adc6:	2b03      	cmp	r3, #3
 800adc8:	d032      	beq.n	800ae30 <USBD_StdEPReq+0x240>
 800adca:	e097      	b.n	800aefc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800adcc:	7bbb      	ldrb	r3, [r7, #14]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d007      	beq.n	800ade2 <USBD_StdEPReq+0x1f2>
 800add2:	7bbb      	ldrb	r3, [r7, #14]
 800add4:	2b80      	cmp	r3, #128	@ 0x80
 800add6:	d004      	beq.n	800ade2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800add8:	6839      	ldr	r1, [r7, #0]
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fbed 	bl	800b5ba <USBD_CtlError>
                break;
 800ade0:	e091      	b.n	800af06 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ade2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	da0b      	bge.n	800ae02 <USBD_StdEPReq+0x212>
 800adea:	7bbb      	ldrb	r3, [r7, #14]
 800adec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800adf0:	4613      	mov	r3, r2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4413      	add	r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	3310      	adds	r3, #16
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	4413      	add	r3, r2
 800adfe:	3304      	adds	r3, #4
 800ae00:	e00b      	b.n	800ae1a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae02:	7bbb      	ldrb	r3, [r7, #14]
 800ae04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae08:	4613      	mov	r3, r2
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	4413      	add	r3, r2
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	4413      	add	r3, r2
 800ae18:	3304      	adds	r3, #4
 800ae1a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	2202      	movs	r2, #2
 800ae26:	4619      	mov	r1, r3
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 fc43 	bl	800b6b4 <USBD_CtlSendData>
              break;
 800ae2e:	e06a      	b.n	800af06 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ae30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	da11      	bge.n	800ae5c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ae38:	7bbb      	ldrb	r3, [r7, #14]
 800ae3a:	f003 020f 	and.w	r2, r3, #15
 800ae3e:	6879      	ldr	r1, [r7, #4]
 800ae40:	4613      	mov	r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	4413      	add	r3, r2
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	440b      	add	r3, r1
 800ae4a:	3324      	adds	r3, #36	@ 0x24
 800ae4c:	881b      	ldrh	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d117      	bne.n	800ae82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ae52:	6839      	ldr	r1, [r7, #0]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 fbb0 	bl	800b5ba <USBD_CtlError>
                  break;
 800ae5a:	e054      	b.n	800af06 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ae5c:	7bbb      	ldrb	r3, [r7, #14]
 800ae5e:	f003 020f 	and.w	r2, r3, #15
 800ae62:	6879      	ldr	r1, [r7, #4]
 800ae64:	4613      	mov	r3, r2
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	4413      	add	r3, r2
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	440b      	add	r3, r1
 800ae6e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae72:	881b      	ldrh	r3, [r3, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d104      	bne.n	800ae82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ae78:	6839      	ldr	r1, [r7, #0]
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 fb9d 	bl	800b5ba <USBD_CtlError>
                  break;
 800ae80:	e041      	b.n	800af06 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	da0b      	bge.n	800aea2 <USBD_StdEPReq+0x2b2>
 800ae8a:	7bbb      	ldrb	r3, [r7, #14]
 800ae8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae90:	4613      	mov	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	4413      	add	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	3310      	adds	r3, #16
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	3304      	adds	r3, #4
 800aea0:	e00b      	b.n	800aeba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aea2:	7bbb      	ldrb	r3, [r7, #14]
 800aea4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aea8:	4613      	mov	r3, r2
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	4413      	add	r3, r2
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	4413      	add	r3, r2
 800aeb8:	3304      	adds	r3, #4
 800aeba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aebc:	7bbb      	ldrb	r3, [r7, #14]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d002      	beq.n	800aec8 <USBD_StdEPReq+0x2d8>
 800aec2:	7bbb      	ldrb	r3, [r7, #14]
 800aec4:	2b80      	cmp	r3, #128	@ 0x80
 800aec6:	d103      	bne.n	800aed0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	2200      	movs	r2, #0
 800aecc:	601a      	str	r2, [r3, #0]
 800aece:	e00e      	b.n	800aeee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aed0:	7bbb      	ldrb	r3, [r7, #14]
 800aed2:	4619      	mov	r1, r3
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f001 f895 	bl	800c004 <USBD_LL_IsStallEP>
 800aeda:	4603      	mov	r3, r0
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d003      	beq.n	800aee8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	2201      	movs	r2, #1
 800aee4:	601a      	str	r2, [r3, #0]
 800aee6:	e002      	b.n	800aeee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	2200      	movs	r2, #0
 800aeec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	2202      	movs	r2, #2
 800aef2:	4619      	mov	r1, r3
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f000 fbdd 	bl	800b6b4 <USBD_CtlSendData>
              break;
 800aefa:	e004      	b.n	800af06 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800aefc:	6839      	ldr	r1, [r7, #0]
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 fb5b 	bl	800b5ba <USBD_CtlError>
              break;
 800af04:	bf00      	nop
          }
          break;
 800af06:	e004      	b.n	800af12 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fb55 	bl	800b5ba <USBD_CtlError>
          break;
 800af10:	bf00      	nop
      }
      break;
 800af12:	e005      	b.n	800af20 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800af14:	6839      	ldr	r1, [r7, #0]
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fb4f 	bl	800b5ba <USBD_CtlError>
      break;
 800af1c:	e000      	b.n	800af20 <USBD_StdEPReq+0x330>
      break;
 800af1e:	bf00      	nop
  }

  return ret;
 800af20:	7bfb      	ldrb	r3, [r7, #15]
}
 800af22:	4618      	mov	r0, r3
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
	...

0800af2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af36:	2300      	movs	r3, #0
 800af38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800af3a:	2300      	movs	r3, #0
 800af3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800af3e:	2300      	movs	r3, #0
 800af40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	885b      	ldrh	r3, [r3, #2]
 800af46:	0a1b      	lsrs	r3, r3, #8
 800af48:	b29b      	uxth	r3, r3
 800af4a:	3b01      	subs	r3, #1
 800af4c:	2b06      	cmp	r3, #6
 800af4e:	f200 8128 	bhi.w	800b1a2 <USBD_GetDescriptor+0x276>
 800af52:	a201      	add	r2, pc, #4	@ (adr r2, 800af58 <USBD_GetDescriptor+0x2c>)
 800af54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af58:	0800af75 	.word	0x0800af75
 800af5c:	0800af8d 	.word	0x0800af8d
 800af60:	0800afcd 	.word	0x0800afcd
 800af64:	0800b1a3 	.word	0x0800b1a3
 800af68:	0800b1a3 	.word	0x0800b1a3
 800af6c:	0800b143 	.word	0x0800b143
 800af70:	0800b16f 	.word	0x0800b16f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	7c12      	ldrb	r2, [r2, #16]
 800af80:	f107 0108 	add.w	r1, r7, #8
 800af84:	4610      	mov	r0, r2
 800af86:	4798      	blx	r3
 800af88:	60f8      	str	r0, [r7, #12]
      break;
 800af8a:	e112      	b.n	800b1b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	7c1b      	ldrb	r3, [r3, #16]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d10d      	bne.n	800afb0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af9c:	f107 0208 	add.w	r2, r7, #8
 800afa0:	4610      	mov	r0, r2
 800afa2:	4798      	blx	r3
 800afa4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	3301      	adds	r3, #1
 800afaa:	2202      	movs	r2, #2
 800afac:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800afae:	e100      	b.n	800b1b2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800afb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afb8:	f107 0208 	add.w	r2, r7, #8
 800afbc:	4610      	mov	r0, r2
 800afbe:	4798      	blx	r3
 800afc0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	3301      	adds	r3, #1
 800afc6:	2202      	movs	r2, #2
 800afc8:	701a      	strb	r2, [r3, #0]
      break;
 800afca:	e0f2      	b.n	800b1b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	885b      	ldrh	r3, [r3, #2]
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	2b05      	cmp	r3, #5
 800afd4:	f200 80ac 	bhi.w	800b130 <USBD_GetDescriptor+0x204>
 800afd8:	a201      	add	r2, pc, #4	@ (adr r2, 800afe0 <USBD_GetDescriptor+0xb4>)
 800afda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afde:	bf00      	nop
 800afe0:	0800aff9 	.word	0x0800aff9
 800afe4:	0800b02d 	.word	0x0800b02d
 800afe8:	0800b061 	.word	0x0800b061
 800afec:	0800b095 	.word	0x0800b095
 800aff0:	0800b0c9 	.word	0x0800b0c9
 800aff4:	0800b0fd 	.word	0x0800b0fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d00b      	beq.n	800b01c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b00a:	685b      	ldr	r3, [r3, #4]
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	7c12      	ldrb	r2, [r2, #16]
 800b010:	f107 0108 	add.w	r1, r7, #8
 800b014:	4610      	mov	r0, r2
 800b016:	4798      	blx	r3
 800b018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b01a:	e091      	b.n	800b140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b01c:	6839      	ldr	r1, [r7, #0]
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 facb 	bl	800b5ba <USBD_CtlError>
            err++;
 800b024:	7afb      	ldrb	r3, [r7, #11]
 800b026:	3301      	adds	r3, #1
 800b028:	72fb      	strb	r3, [r7, #11]
          break;
 800b02a:	e089      	b.n	800b140 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00b      	beq.n	800b050 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	687a      	ldr	r2, [r7, #4]
 800b042:	7c12      	ldrb	r2, [r2, #16]
 800b044:	f107 0108 	add.w	r1, r7, #8
 800b048:	4610      	mov	r0, r2
 800b04a:	4798      	blx	r3
 800b04c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b04e:	e077      	b.n	800b140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b050:	6839      	ldr	r1, [r7, #0]
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 fab1 	bl	800b5ba <USBD_CtlError>
            err++;
 800b058:	7afb      	ldrb	r3, [r7, #11]
 800b05a:	3301      	adds	r3, #1
 800b05c:	72fb      	strb	r3, [r7, #11]
          break;
 800b05e:	e06f      	b.n	800b140 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d00b      	beq.n	800b084 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	7c12      	ldrb	r2, [r2, #16]
 800b078:	f107 0108 	add.w	r1, r7, #8
 800b07c:	4610      	mov	r0, r2
 800b07e:	4798      	blx	r3
 800b080:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b082:	e05d      	b.n	800b140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b084:	6839      	ldr	r1, [r7, #0]
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 fa97 	bl	800b5ba <USBD_CtlError>
            err++;
 800b08c:	7afb      	ldrb	r3, [r7, #11]
 800b08e:	3301      	adds	r3, #1
 800b090:	72fb      	strb	r3, [r7, #11]
          break;
 800b092:	e055      	b.n	800b140 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b09a:	691b      	ldr	r3, [r3, #16]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d00b      	beq.n	800b0b8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	7c12      	ldrb	r2, [r2, #16]
 800b0ac:	f107 0108 	add.w	r1, r7, #8
 800b0b0:	4610      	mov	r0, r2
 800b0b2:	4798      	blx	r3
 800b0b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0b6:	e043      	b.n	800b140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0b8:	6839      	ldr	r1, [r7, #0]
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 fa7d 	bl	800b5ba <USBD_CtlError>
            err++;
 800b0c0:	7afb      	ldrb	r3, [r7, #11]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	72fb      	strb	r3, [r7, #11]
          break;
 800b0c6:	e03b      	b.n	800b140 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0ce:	695b      	ldr	r3, [r3, #20]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00b      	beq.n	800b0ec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0da:	695b      	ldr	r3, [r3, #20]
 800b0dc:	687a      	ldr	r2, [r7, #4]
 800b0de:	7c12      	ldrb	r2, [r2, #16]
 800b0e0:	f107 0108 	add.w	r1, r7, #8
 800b0e4:	4610      	mov	r0, r2
 800b0e6:	4798      	blx	r3
 800b0e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0ea:	e029      	b.n	800b140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0ec:	6839      	ldr	r1, [r7, #0]
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f000 fa63 	bl	800b5ba <USBD_CtlError>
            err++;
 800b0f4:	7afb      	ldrb	r3, [r7, #11]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	72fb      	strb	r3, [r7, #11]
          break;
 800b0fa:	e021      	b.n	800b140 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b102:	699b      	ldr	r3, [r3, #24]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d00b      	beq.n	800b120 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	7c12      	ldrb	r2, [r2, #16]
 800b114:	f107 0108 	add.w	r1, r7, #8
 800b118:	4610      	mov	r0, r2
 800b11a:	4798      	blx	r3
 800b11c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b11e:	e00f      	b.n	800b140 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b120:	6839      	ldr	r1, [r7, #0]
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 fa49 	bl	800b5ba <USBD_CtlError>
            err++;
 800b128:	7afb      	ldrb	r3, [r7, #11]
 800b12a:	3301      	adds	r3, #1
 800b12c:	72fb      	strb	r3, [r7, #11]
          break;
 800b12e:	e007      	b.n	800b140 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b130:	6839      	ldr	r1, [r7, #0]
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 fa41 	bl	800b5ba <USBD_CtlError>
          err++;
 800b138:	7afb      	ldrb	r3, [r7, #11]
 800b13a:	3301      	adds	r3, #1
 800b13c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b13e:	bf00      	nop
      }
      break;
 800b140:	e037      	b.n	800b1b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	7c1b      	ldrb	r3, [r3, #16]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d109      	bne.n	800b15e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b152:	f107 0208 	add.w	r2, r7, #8
 800b156:	4610      	mov	r0, r2
 800b158:	4798      	blx	r3
 800b15a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b15c:	e029      	b.n	800b1b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b15e:	6839      	ldr	r1, [r7, #0]
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 fa2a 	bl	800b5ba <USBD_CtlError>
        err++;
 800b166:	7afb      	ldrb	r3, [r7, #11]
 800b168:	3301      	adds	r3, #1
 800b16a:	72fb      	strb	r3, [r7, #11]
      break;
 800b16c:	e021      	b.n	800b1b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	7c1b      	ldrb	r3, [r3, #16]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10d      	bne.n	800b192 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b17c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b17e:	f107 0208 	add.w	r2, r7, #8
 800b182:	4610      	mov	r0, r2
 800b184:	4798      	blx	r3
 800b186:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	3301      	adds	r3, #1
 800b18c:	2207      	movs	r2, #7
 800b18e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b190:	e00f      	b.n	800b1b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b192:	6839      	ldr	r1, [r7, #0]
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 fa10 	bl	800b5ba <USBD_CtlError>
        err++;
 800b19a:	7afb      	ldrb	r3, [r7, #11]
 800b19c:	3301      	adds	r3, #1
 800b19e:	72fb      	strb	r3, [r7, #11]
      break;
 800b1a0:	e007      	b.n	800b1b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b1a2:	6839      	ldr	r1, [r7, #0]
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fa08 	bl	800b5ba <USBD_CtlError>
      err++;
 800b1aa:	7afb      	ldrb	r3, [r7, #11]
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	72fb      	strb	r3, [r7, #11]
      break;
 800b1b0:	bf00      	nop
  }

  if (err != 0U)
 800b1b2:	7afb      	ldrb	r3, [r7, #11]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d11e      	bne.n	800b1f6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	88db      	ldrh	r3, [r3, #6]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d016      	beq.n	800b1ee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b1c0:	893b      	ldrh	r3, [r7, #8]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d00e      	beq.n	800b1e4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	88da      	ldrh	r2, [r3, #6]
 800b1ca:	893b      	ldrh	r3, [r7, #8]
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	bf28      	it	cs
 800b1d0:	4613      	movcs	r3, r2
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b1d6:	893b      	ldrh	r3, [r7, #8]
 800b1d8:	461a      	mov	r2, r3
 800b1da:	68f9      	ldr	r1, [r7, #12]
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fa69 	bl	800b6b4 <USBD_CtlSendData>
 800b1e2:	e009      	b.n	800b1f8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b1e4:	6839      	ldr	r1, [r7, #0]
 800b1e6:	6878      	ldr	r0, [r7, #4]
 800b1e8:	f000 f9e7 	bl	800b5ba <USBD_CtlError>
 800b1ec:	e004      	b.n	800b1f8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b1ee:	6878      	ldr	r0, [r7, #4]
 800b1f0:	f000 faba 	bl	800b768 <USBD_CtlSendStatus>
 800b1f4:	e000      	b.n	800b1f8 <USBD_GetDescriptor+0x2cc>
    return;
 800b1f6:	bf00      	nop
  }
}
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop

0800b200 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	889b      	ldrh	r3, [r3, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d131      	bne.n	800b276 <USBD_SetAddress+0x76>
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	88db      	ldrh	r3, [r3, #6]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d12d      	bne.n	800b276 <USBD_SetAddress+0x76>
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	885b      	ldrh	r3, [r3, #2]
 800b21e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b220:	d829      	bhi.n	800b276 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	885b      	ldrh	r3, [r3, #2]
 800b226:	b2db      	uxtb	r3, r3
 800b228:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b22c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b234:	b2db      	uxtb	r3, r3
 800b236:	2b03      	cmp	r3, #3
 800b238:	d104      	bne.n	800b244 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b23a:	6839      	ldr	r1, [r7, #0]
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f000 f9bc 	bl	800b5ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b242:	e01d      	b.n	800b280 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	7bfa      	ldrb	r2, [r7, #15]
 800b248:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b24c:	7bfb      	ldrb	r3, [r7, #15]
 800b24e:	4619      	mov	r1, r3
 800b250:	6878      	ldr	r0, [r7, #4]
 800b252:	f000 ff03 	bl	800c05c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 fa86 	bl	800b768 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b25c:	7bfb      	ldrb	r3, [r7, #15]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d004      	beq.n	800b26c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2202      	movs	r2, #2
 800b266:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b26a:	e009      	b.n	800b280 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2201      	movs	r2, #1
 800b270:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b274:	e004      	b.n	800b280 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b276:	6839      	ldr	r1, [r7, #0]
 800b278:	6878      	ldr	r0, [r7, #4]
 800b27a:	f000 f99e 	bl	800b5ba <USBD_CtlError>
  }
}
 800b27e:	bf00      	nop
 800b280:	bf00      	nop
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b292:	2300      	movs	r3, #0
 800b294:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	885b      	ldrh	r3, [r3, #2]
 800b29a:	b2da      	uxtb	r2, r3
 800b29c:	4b4e      	ldr	r3, [pc, #312]	@ (800b3d8 <USBD_SetConfig+0x150>)
 800b29e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b2a0:	4b4d      	ldr	r3, [pc, #308]	@ (800b3d8 <USBD_SetConfig+0x150>)
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d905      	bls.n	800b2b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b2a8:	6839      	ldr	r1, [r7, #0]
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 f985 	bl	800b5ba <USBD_CtlError>
    return USBD_FAIL;
 800b2b0:	2303      	movs	r3, #3
 800b2b2:	e08c      	b.n	800b3ce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	d002      	beq.n	800b2c6 <USBD_SetConfig+0x3e>
 800b2c0:	2b03      	cmp	r3, #3
 800b2c2:	d029      	beq.n	800b318 <USBD_SetConfig+0x90>
 800b2c4:	e075      	b.n	800b3b2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b2c6:	4b44      	ldr	r3, [pc, #272]	@ (800b3d8 <USBD_SetConfig+0x150>)
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d020      	beq.n	800b310 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b2ce:	4b42      	ldr	r3, [pc, #264]	@ (800b3d8 <USBD_SetConfig+0x150>)
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b2d8:	4b3f      	ldr	r3, [pc, #252]	@ (800b3d8 <USBD_SetConfig+0x150>)
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	4619      	mov	r1, r3
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f7fe ffe3 	bl	800a2aa <USBD_SetClassConfig>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b2e8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d008      	beq.n	800b300 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b2ee:	6839      	ldr	r1, [r7, #0]
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 f962 	bl	800b5ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2202      	movs	r2, #2
 800b2fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b2fe:	e065      	b.n	800b3cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 fa31 	bl	800b768 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2203      	movs	r2, #3
 800b30a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b30e:	e05d      	b.n	800b3cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 fa29 	bl	800b768 <USBD_CtlSendStatus>
      break;
 800b316:	e059      	b.n	800b3cc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b318:	4b2f      	ldr	r3, [pc, #188]	@ (800b3d8 <USBD_SetConfig+0x150>)
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d112      	bne.n	800b346 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2202      	movs	r2, #2
 800b324:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b328:	4b2b      	ldr	r3, [pc, #172]	@ (800b3d8 <USBD_SetConfig+0x150>)
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	461a      	mov	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b332:	4b29      	ldr	r3, [pc, #164]	@ (800b3d8 <USBD_SetConfig+0x150>)
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	4619      	mov	r1, r3
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f7fe ffd2 	bl	800a2e2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 fa12 	bl	800b768 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b344:	e042      	b.n	800b3cc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b346:	4b24      	ldr	r3, [pc, #144]	@ (800b3d8 <USBD_SetConfig+0x150>)
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	461a      	mov	r2, r3
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	685b      	ldr	r3, [r3, #4]
 800b350:	429a      	cmp	r2, r3
 800b352:	d02a      	beq.n	800b3aa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	b2db      	uxtb	r3, r3
 800b35a:	4619      	mov	r1, r3
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f7fe ffc0 	bl	800a2e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b362:	4b1d      	ldr	r3, [pc, #116]	@ (800b3d8 <USBD_SetConfig+0x150>)
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	461a      	mov	r2, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b36c:	4b1a      	ldr	r3, [pc, #104]	@ (800b3d8 <USBD_SetConfig+0x150>)
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	4619      	mov	r1, r3
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f7fe ff99 	bl	800a2aa <USBD_SetClassConfig>
 800b378:	4603      	mov	r3, r0
 800b37a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b37c:	7bfb      	ldrb	r3, [r7, #15]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00f      	beq.n	800b3a2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b382:	6839      	ldr	r1, [r7, #0]
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f000 f918 	bl	800b5ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	4619      	mov	r1, r3
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f7fe ffa5 	bl	800a2e2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2202      	movs	r2, #2
 800b39c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b3a0:	e014      	b.n	800b3cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 f9e0 	bl	800b768 <USBD_CtlSendStatus>
      break;
 800b3a8:	e010      	b.n	800b3cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 f9dc 	bl	800b768 <USBD_CtlSendStatus>
      break;
 800b3b0:	e00c      	b.n	800b3cc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b3b2:	6839      	ldr	r1, [r7, #0]
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 f900 	bl	800b5ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b3ba:	4b07      	ldr	r3, [pc, #28]	@ (800b3d8 <USBD_SetConfig+0x150>)
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	4619      	mov	r1, r3
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f7fe ff8e 	bl	800a2e2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b3c6:	2303      	movs	r3, #3
 800b3c8:	73fb      	strb	r3, [r7, #15]
      break;
 800b3ca:	bf00      	nop
  }

  return ret;
 800b3cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3710      	adds	r7, #16
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}
 800b3d6:	bf00      	nop
 800b3d8:	20000841 	.word	0x20000841

0800b3dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	88db      	ldrh	r3, [r3, #6]
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d004      	beq.n	800b3f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b3ee:	6839      	ldr	r1, [r7, #0]
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 f8e2 	bl	800b5ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b3f6:	e023      	b.n	800b440 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	2b02      	cmp	r3, #2
 800b402:	dc02      	bgt.n	800b40a <USBD_GetConfig+0x2e>
 800b404:	2b00      	cmp	r3, #0
 800b406:	dc03      	bgt.n	800b410 <USBD_GetConfig+0x34>
 800b408:	e015      	b.n	800b436 <USBD_GetConfig+0x5a>
 800b40a:	2b03      	cmp	r3, #3
 800b40c:	d00b      	beq.n	800b426 <USBD_GetConfig+0x4a>
 800b40e:	e012      	b.n	800b436 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	3308      	adds	r3, #8
 800b41a:	2201      	movs	r2, #1
 800b41c:	4619      	mov	r1, r3
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 f948 	bl	800b6b4 <USBD_CtlSendData>
        break;
 800b424:	e00c      	b.n	800b440 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	3304      	adds	r3, #4
 800b42a:	2201      	movs	r2, #1
 800b42c:	4619      	mov	r1, r3
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f000 f940 	bl	800b6b4 <USBD_CtlSendData>
        break;
 800b434:	e004      	b.n	800b440 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b436:	6839      	ldr	r1, [r7, #0]
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 f8be 	bl	800b5ba <USBD_CtlError>
        break;
 800b43e:	bf00      	nop
}
 800b440:	bf00      	nop
 800b442:	3708      	adds	r7, #8
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	3b01      	subs	r3, #1
 800b45c:	2b02      	cmp	r3, #2
 800b45e:	d81e      	bhi.n	800b49e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	88db      	ldrh	r3, [r3, #6]
 800b464:	2b02      	cmp	r3, #2
 800b466:	d004      	beq.n	800b472 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b468:	6839      	ldr	r1, [r7, #0]
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 f8a5 	bl	800b5ba <USBD_CtlError>
        break;
 800b470:	e01a      	b.n	800b4a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2201      	movs	r2, #1
 800b476:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d005      	beq.n	800b48e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	f043 0202 	orr.w	r2, r3, #2
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	330c      	adds	r3, #12
 800b492:	2202      	movs	r2, #2
 800b494:	4619      	mov	r1, r3
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 f90c 	bl	800b6b4 <USBD_CtlSendData>
      break;
 800b49c:	e004      	b.n	800b4a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b49e:	6839      	ldr	r1, [r7, #0]
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 f88a 	bl	800b5ba <USBD_CtlError>
      break;
 800b4a6:	bf00      	nop
  }
}
 800b4a8:	bf00      	nop
 800b4aa:	3708      	adds	r7, #8
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	885b      	ldrh	r3, [r3, #2]
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d107      	bne.n	800b4d2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 f94c 	bl	800b768 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b4d0:	e013      	b.n	800b4fa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	885b      	ldrh	r3, [r3, #2]
 800b4d6:	2b02      	cmp	r3, #2
 800b4d8:	d10b      	bne.n	800b4f2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	889b      	ldrh	r3, [r3, #4]
 800b4de:	0a1b      	lsrs	r3, r3, #8
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	b2da      	uxtb	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 f93c 	bl	800b768 <USBD_CtlSendStatus>
}
 800b4f0:	e003      	b.n	800b4fa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b4f2:	6839      	ldr	r1, [r7, #0]
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 f860 	bl	800b5ba <USBD_CtlError>
}
 800b4fa:	bf00      	nop
 800b4fc:	3708      	adds	r7, #8
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}

0800b502 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b502:	b580      	push	{r7, lr}
 800b504:	b082      	sub	sp, #8
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b512:	b2db      	uxtb	r3, r3
 800b514:	3b01      	subs	r3, #1
 800b516:	2b02      	cmp	r3, #2
 800b518:	d80b      	bhi.n	800b532 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	885b      	ldrh	r3, [r3, #2]
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d10c      	bne.n	800b53c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2200      	movs	r2, #0
 800b526:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 f91c 	bl	800b768 <USBD_CtlSendStatus>
      }
      break;
 800b530:	e004      	b.n	800b53c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b532:	6839      	ldr	r1, [r7, #0]
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 f840 	bl	800b5ba <USBD_CtlError>
      break;
 800b53a:	e000      	b.n	800b53e <USBD_ClrFeature+0x3c>
      break;
 800b53c:	bf00      	nop
  }
}
 800b53e:	bf00      	nop
 800b540:	3708      	adds	r7, #8
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}

0800b546 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b546:	b580      	push	{r7, lr}
 800b548:	b084      	sub	sp, #16
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6078      	str	r0, [r7, #4]
 800b54e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	781a      	ldrb	r2, [r3, #0]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	3301      	adds	r3, #1
 800b560:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	781a      	ldrb	r2, [r3, #0]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	3301      	adds	r3, #1
 800b56e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f7ff fa40 	bl	800a9f6 <SWAPBYTE>
 800b576:	4603      	mov	r3, r0
 800b578:	461a      	mov	r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	3301      	adds	r3, #1
 800b582:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	3301      	adds	r3, #1
 800b588:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b58a:	68f8      	ldr	r0, [r7, #12]
 800b58c:	f7ff fa33 	bl	800a9f6 <SWAPBYTE>
 800b590:	4603      	mov	r3, r0
 800b592:	461a      	mov	r2, r3
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	3301      	adds	r3, #1
 800b59c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f7ff fa26 	bl	800a9f6 <SWAPBYTE>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	80da      	strh	r2, [r3, #6]
}
 800b5b2:	bf00      	nop
 800b5b4:	3710      	adds	r7, #16
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}

0800b5ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b082      	sub	sp, #8
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
 800b5c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5c4:	2180      	movs	r1, #128	@ 0x80
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 fcde 	bl	800bf88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 fcda 	bl	800bf88 <USBD_LL_StallEP>
}
 800b5d4:	bf00      	nop
 800b5d6:	3708      	adds	r7, #8
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b086      	sub	sp, #24
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	60f8      	str	r0, [r7, #12]
 800b5e4:	60b9      	str	r1, [r7, #8]
 800b5e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d042      	beq.n	800b678 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b5f6:	6938      	ldr	r0, [r7, #16]
 800b5f8:	f000 f842 	bl	800b680 <USBD_GetLen>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	3301      	adds	r3, #1
 800b600:	005b      	lsls	r3, r3, #1
 800b602:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b606:	d808      	bhi.n	800b61a <USBD_GetString+0x3e>
 800b608:	6938      	ldr	r0, [r7, #16]
 800b60a:	f000 f839 	bl	800b680 <USBD_GetLen>
 800b60e:	4603      	mov	r3, r0
 800b610:	3301      	adds	r3, #1
 800b612:	b29b      	uxth	r3, r3
 800b614:	005b      	lsls	r3, r3, #1
 800b616:	b29a      	uxth	r2, r3
 800b618:	e001      	b.n	800b61e <USBD_GetString+0x42>
 800b61a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b622:	7dfb      	ldrb	r3, [r7, #23]
 800b624:	68ba      	ldr	r2, [r7, #8]
 800b626:	4413      	add	r3, r2
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	7812      	ldrb	r2, [r2, #0]
 800b62c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b62e:	7dfb      	ldrb	r3, [r7, #23]
 800b630:	3301      	adds	r3, #1
 800b632:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b634:	7dfb      	ldrb	r3, [r7, #23]
 800b636:	68ba      	ldr	r2, [r7, #8]
 800b638:	4413      	add	r3, r2
 800b63a:	2203      	movs	r2, #3
 800b63c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b63e:	7dfb      	ldrb	r3, [r7, #23]
 800b640:	3301      	adds	r3, #1
 800b642:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b644:	e013      	b.n	800b66e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b646:	7dfb      	ldrb	r3, [r7, #23]
 800b648:	68ba      	ldr	r2, [r7, #8]
 800b64a:	4413      	add	r3, r2
 800b64c:	693a      	ldr	r2, [r7, #16]
 800b64e:	7812      	ldrb	r2, [r2, #0]
 800b650:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	3301      	adds	r3, #1
 800b656:	613b      	str	r3, [r7, #16]
    idx++;
 800b658:	7dfb      	ldrb	r3, [r7, #23]
 800b65a:	3301      	adds	r3, #1
 800b65c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b65e:	7dfb      	ldrb	r3, [r7, #23]
 800b660:	68ba      	ldr	r2, [r7, #8]
 800b662:	4413      	add	r3, r2
 800b664:	2200      	movs	r2, #0
 800b666:	701a      	strb	r2, [r3, #0]
    idx++;
 800b668:	7dfb      	ldrb	r3, [r7, #23]
 800b66a:	3301      	adds	r3, #1
 800b66c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1e7      	bne.n	800b646 <USBD_GetString+0x6a>
 800b676:	e000      	b.n	800b67a <USBD_GetString+0x9e>
    return;
 800b678:	bf00      	nop
  }
}
 800b67a:	3718      	adds	r7, #24
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b680:	b480      	push	{r7}
 800b682:	b085      	sub	sp, #20
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b688:	2300      	movs	r3, #0
 800b68a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b690:	e005      	b.n	800b69e <USBD_GetLen+0x1e>
  {
    len++;
 800b692:	7bfb      	ldrb	r3, [r7, #15]
 800b694:	3301      	adds	r3, #1
 800b696:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	3301      	adds	r3, #1
 800b69c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d1f5      	bne.n	800b692 <USBD_GetLen+0x12>
  }

  return len;
 800b6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3714      	adds	r7, #20
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b2:	4770      	bx	lr

0800b6b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2202      	movs	r2, #2
 800b6c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	68ba      	ldr	r2, [r7, #8]
 800b6d8:	2100      	movs	r1, #0
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	f000 fcdd 	bl	800c09a <USBD_LL_Transmit>

  return USBD_OK;
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b084      	sub	sp, #16
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	60f8      	str	r0, [r7, #12]
 800b6f2:	60b9      	str	r1, [r7, #8]
 800b6f4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	2100      	movs	r1, #0
 800b6fc:	68f8      	ldr	r0, [r7, #12]
 800b6fe:	f000 fccc 	bl	800c09a <USBD_LL_Transmit>

  return USBD_OK;
 800b702:	2300      	movs	r3, #0
}
 800b704:	4618      	mov	r0, r3
 800b706:	3710      	adds	r7, #16
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2203      	movs	r2, #3
 800b71c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	68ba      	ldr	r2, [r7, #8]
 800b734:	2100      	movs	r1, #0
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f000 fcd0 	bl	800c0dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3710      	adds	r7, #16
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b746:	b580      	push	{r7, lr}
 800b748:	b084      	sub	sp, #16
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	60f8      	str	r0, [r7, #12]
 800b74e:	60b9      	str	r1, [r7, #8]
 800b750:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	68ba      	ldr	r2, [r7, #8]
 800b756:	2100      	movs	r1, #0
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f000 fcbf 	bl	800c0dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b75e:	2300      	movs	r3, #0
}
 800b760:	4618      	mov	r0, r3
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2204      	movs	r2, #4
 800b774:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b778:	2300      	movs	r3, #0
 800b77a:	2200      	movs	r2, #0
 800b77c:	2100      	movs	r1, #0
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 fc8b 	bl	800c09a <USBD_LL_Transmit>

  return USBD_OK;
 800b784:	2300      	movs	r3, #0
}
 800b786:	4618      	mov	r0, r3
 800b788:	3708      	adds	r7, #8
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}

0800b78e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b78e:	b580      	push	{r7, lr}
 800b790:	b082      	sub	sp, #8
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2205      	movs	r2, #5
 800b79a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b79e:	2300      	movs	r3, #0
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	2100      	movs	r1, #0
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 fc99 	bl	800c0dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	4912      	ldr	r1, [pc, #72]	@ (800b804 <MX_USB_DEVICE_Init+0x50>)
 800b7bc:	4812      	ldr	r0, [pc, #72]	@ (800b808 <MX_USB_DEVICE_Init+0x54>)
 800b7be:	f7fe fcf7 	bl	800a1b0 <USBD_Init>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d001      	beq.n	800b7cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b7c8:	f7f5 ff2e 	bl	8001628 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b7cc:	490f      	ldr	r1, [pc, #60]	@ (800b80c <MX_USB_DEVICE_Init+0x58>)
 800b7ce:	480e      	ldr	r0, [pc, #56]	@ (800b808 <MX_USB_DEVICE_Init+0x54>)
 800b7d0:	f7fe fd1e 	bl	800a210 <USBD_RegisterClass>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d001      	beq.n	800b7de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b7da:	f7f5 ff25 	bl	8001628 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b7de:	490c      	ldr	r1, [pc, #48]	@ (800b810 <MX_USB_DEVICE_Init+0x5c>)
 800b7e0:	4809      	ldr	r0, [pc, #36]	@ (800b808 <MX_USB_DEVICE_Init+0x54>)
 800b7e2:	f7fe fc55 	bl	800a090 <USBD_CDC_RegisterInterface>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d001      	beq.n	800b7f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b7ec:	f7f5 ff1c 	bl	8001628 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b7f0:	4805      	ldr	r0, [pc, #20]	@ (800b808 <MX_USB_DEVICE_Init+0x54>)
 800b7f2:	f7fe fd43 	bl	800a27c <USBD_Start>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d001      	beq.n	800b800 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b7fc:	f7f5 ff14 	bl	8001628 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b800:	bf00      	nop
 800b802:	bd80      	pop	{r7, pc}
 800b804:	200000c0 	.word	0x200000c0
 800b808:	20000844 	.word	0x20000844
 800b80c:	2000002c 	.word	0x2000002c
 800b810:	200000ac 	.word	0x200000ac

0800b814 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b818:	2200      	movs	r2, #0
 800b81a:	4905      	ldr	r1, [pc, #20]	@ (800b830 <CDC_Init_FS+0x1c>)
 800b81c:	4805      	ldr	r0, [pc, #20]	@ (800b834 <CDC_Init_FS+0x20>)
 800b81e:	f7fe fc51 	bl	800a0c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b822:	4905      	ldr	r1, [pc, #20]	@ (800b838 <CDC_Init_FS+0x24>)
 800b824:	4803      	ldr	r0, [pc, #12]	@ (800b834 <CDC_Init_FS+0x20>)
 800b826:	f7fe fc6f 	bl	800a108 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b82a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	20001324 	.word	0x20001324
 800b834:	20000844 	.word	0x20000844
 800b838:	20000b24 	.word	0x20000b24

0800b83c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b83c:	b480      	push	{r7}
 800b83e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b840:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b842:	4618      	mov	r0, r3
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr

0800b84c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b083      	sub	sp, #12
 800b850:	af00      	add	r7, sp, #0
 800b852:	4603      	mov	r3, r0
 800b854:	6039      	str	r1, [r7, #0]
 800b856:	71fb      	strb	r3, [r7, #7]
 800b858:	4613      	mov	r3, r2
 800b85a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b85c:	79fb      	ldrb	r3, [r7, #7]
 800b85e:	2b23      	cmp	r3, #35	@ 0x23
 800b860:	d84a      	bhi.n	800b8f8 <CDC_Control_FS+0xac>
 800b862:	a201      	add	r2, pc, #4	@ (adr r2, 800b868 <CDC_Control_FS+0x1c>)
 800b864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b868:	0800b8f9 	.word	0x0800b8f9
 800b86c:	0800b8f9 	.word	0x0800b8f9
 800b870:	0800b8f9 	.word	0x0800b8f9
 800b874:	0800b8f9 	.word	0x0800b8f9
 800b878:	0800b8f9 	.word	0x0800b8f9
 800b87c:	0800b8f9 	.word	0x0800b8f9
 800b880:	0800b8f9 	.word	0x0800b8f9
 800b884:	0800b8f9 	.word	0x0800b8f9
 800b888:	0800b8f9 	.word	0x0800b8f9
 800b88c:	0800b8f9 	.word	0x0800b8f9
 800b890:	0800b8f9 	.word	0x0800b8f9
 800b894:	0800b8f9 	.word	0x0800b8f9
 800b898:	0800b8f9 	.word	0x0800b8f9
 800b89c:	0800b8f9 	.word	0x0800b8f9
 800b8a0:	0800b8f9 	.word	0x0800b8f9
 800b8a4:	0800b8f9 	.word	0x0800b8f9
 800b8a8:	0800b8f9 	.word	0x0800b8f9
 800b8ac:	0800b8f9 	.word	0x0800b8f9
 800b8b0:	0800b8f9 	.word	0x0800b8f9
 800b8b4:	0800b8f9 	.word	0x0800b8f9
 800b8b8:	0800b8f9 	.word	0x0800b8f9
 800b8bc:	0800b8f9 	.word	0x0800b8f9
 800b8c0:	0800b8f9 	.word	0x0800b8f9
 800b8c4:	0800b8f9 	.word	0x0800b8f9
 800b8c8:	0800b8f9 	.word	0x0800b8f9
 800b8cc:	0800b8f9 	.word	0x0800b8f9
 800b8d0:	0800b8f9 	.word	0x0800b8f9
 800b8d4:	0800b8f9 	.word	0x0800b8f9
 800b8d8:	0800b8f9 	.word	0x0800b8f9
 800b8dc:	0800b8f9 	.word	0x0800b8f9
 800b8e0:	0800b8f9 	.word	0x0800b8f9
 800b8e4:	0800b8f9 	.word	0x0800b8f9
 800b8e8:	0800b8f9 	.word	0x0800b8f9
 800b8ec:	0800b8f9 	.word	0x0800b8f9
 800b8f0:	0800b8f9 	.word	0x0800b8f9
 800b8f4:	0800b8f9 	.word	0x0800b8f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b8f8:	bf00      	nop
  }

  return (USBD_OK);
 800b8fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	370c      	adds	r7, #12
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b912:	6879      	ldr	r1, [r7, #4]
 800b914:	480e      	ldr	r0, [pc, #56]	@ (800b950 <CDC_Receive_FS+0x48>)
 800b916:	f7fe fbf7 	bl	800a108 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b91a:	480d      	ldr	r0, [pc, #52]	@ (800b950 <CDC_Receive_FS+0x48>)
 800b91c:	f7fe fc12 	bl	800a144 <USBD_CDC_ReceivePacket>

  //https://controllerstech.com/send-and-receive-data-to-pc-without-uart-stm32-usb-com/

  uint8_t len = (uint8_t) *Len;
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	73fb      	strb	r3, [r7, #15]

    if(len == ROS_COMM_RX_SIZE){
 800b926:	7bfb      	ldrb	r3, [r7, #15]
 800b928:	2b0d      	cmp	r3, #13
 800b92a:	d105      	bne.n	800b938 <CDC_Receive_FS+0x30>
	  memcpy((uint8_t *)&rbc_Packet_t, Buf, len);  // copy the data to the buffer
 800b92c:	7bfb      	ldrb	r3, [r7, #15]
 800b92e:	461a      	mov	r2, r3
 800b930:	6879      	ldr	r1, [r7, #4]
 800b932:	4808      	ldr	r0, [pc, #32]	@ (800b954 <CDC_Receive_FS+0x4c>)
 800b934:	f000 fc76 	bl	800c224 <memcpy>
    }

    rx_flag = 1;
 800b938:	4b07      	ldr	r3, [pc, #28]	@ (800b958 <CDC_Receive_FS+0x50>)
 800b93a:	2201      	movs	r2, #1
 800b93c:	701a      	strb	r2, [r3, #0]
    tx_flag = 0;
 800b93e:	4b07      	ldr	r3, [pc, #28]	@ (800b95c <CDC_Receive_FS+0x54>)
 800b940:	2200      	movs	r2, #0
 800b942:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800b944:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b946:	4618      	mov	r0, r3
 800b948:	3710      	adds	r7, #16
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	20000844 	.word	0x20000844
 800b954:	20000814 	.word	0x20000814
 800b958:	20000b20 	.word	0x20000b20
 800b95c:	200000aa 	.word	0x200000aa

0800b960 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b960:	b480      	push	{r7}
 800b962:	b087      	sub	sp, #28
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	4613      	mov	r3, r2
 800b96c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b96e:	2300      	movs	r3, #0
 800b970:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b972:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b976:	4618      	mov	r0, r3
 800b978:	371c      	adds	r7, #28
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr
	...

0800b984 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b984:	b480      	push	{r7}
 800b986:	b083      	sub	sp, #12
 800b988:	af00      	add	r7, sp, #0
 800b98a:	4603      	mov	r3, r0
 800b98c:	6039      	str	r1, [r7, #0]
 800b98e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	2212      	movs	r2, #18
 800b994:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b996:	4b03      	ldr	r3, [pc, #12]	@ (800b9a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b998:	4618      	mov	r0, r3
 800b99a:	370c      	adds	r7, #12
 800b99c:	46bd      	mov	sp, r7
 800b99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a2:	4770      	bx	lr
 800b9a4:	200000dc 	.word	0x200000dc

0800b9a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b083      	sub	sp, #12
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	6039      	str	r1, [r7, #0]
 800b9b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	2204      	movs	r2, #4
 800b9b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b9ba:	4b03      	ldr	r3, [pc, #12]	@ (800b9c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr
 800b9c8:	200000f0 	.word	0x200000f0

0800b9cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	6039      	str	r1, [r7, #0]
 800b9d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b9d8:	79fb      	ldrb	r3, [r7, #7]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d105      	bne.n	800b9ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b9de:	683a      	ldr	r2, [r7, #0]
 800b9e0:	4907      	ldr	r1, [pc, #28]	@ (800ba00 <USBD_FS_ProductStrDescriptor+0x34>)
 800b9e2:	4808      	ldr	r0, [pc, #32]	@ (800ba04 <USBD_FS_ProductStrDescriptor+0x38>)
 800b9e4:	f7ff fdfa 	bl	800b5dc <USBD_GetString>
 800b9e8:	e004      	b.n	800b9f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b9ea:	683a      	ldr	r2, [r7, #0]
 800b9ec:	4904      	ldr	r1, [pc, #16]	@ (800ba00 <USBD_FS_ProductStrDescriptor+0x34>)
 800b9ee:	4805      	ldr	r0, [pc, #20]	@ (800ba04 <USBD_FS_ProductStrDescriptor+0x38>)
 800b9f0:	f7ff fdf4 	bl	800b5dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9f4:	4b02      	ldr	r3, [pc, #8]	@ (800ba00 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3708      	adds	r7, #8
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	20001b24 	.word	0x20001b24
 800ba04:	0800c2a0 	.word	0x0800c2a0

0800ba08 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	4603      	mov	r3, r0
 800ba10:	6039      	str	r1, [r7, #0]
 800ba12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ba14:	683a      	ldr	r2, [r7, #0]
 800ba16:	4904      	ldr	r1, [pc, #16]	@ (800ba28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ba18:	4804      	ldr	r0, [pc, #16]	@ (800ba2c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ba1a:	f7ff fddf 	bl	800b5dc <USBD_GetString>
  return USBD_StrDesc;
 800ba1e:	4b02      	ldr	r3, [pc, #8]	@ (800ba28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3708      	adds	r7, #8
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}
 800ba28:	20001b24 	.word	0x20001b24
 800ba2c:	0800c2b8 	.word	0x0800c2b8

0800ba30 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	4603      	mov	r3, r0
 800ba38:	6039      	str	r1, [r7, #0]
 800ba3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	221a      	movs	r2, #26
 800ba40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ba42:	f000 f843 	bl	800bacc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ba46:	4b02      	ldr	r3, [pc, #8]	@ (800ba50 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3708      	adds	r7, #8
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	200000f4 	.word	0x200000f4

0800ba54 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	6039      	str	r1, [r7, #0]
 800ba5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ba60:	79fb      	ldrb	r3, [r7, #7]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d105      	bne.n	800ba72 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba66:	683a      	ldr	r2, [r7, #0]
 800ba68:	4907      	ldr	r1, [pc, #28]	@ (800ba88 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba6a:	4808      	ldr	r0, [pc, #32]	@ (800ba8c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ba6c:	f7ff fdb6 	bl	800b5dc <USBD_GetString>
 800ba70:	e004      	b.n	800ba7c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba72:	683a      	ldr	r2, [r7, #0]
 800ba74:	4904      	ldr	r1, [pc, #16]	@ (800ba88 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba76:	4805      	ldr	r0, [pc, #20]	@ (800ba8c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ba78:	f7ff fdb0 	bl	800b5dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba7c:	4b02      	ldr	r3, [pc, #8]	@ (800ba88 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3708      	adds	r7, #8
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	20001b24 	.word	0x20001b24
 800ba8c:	0800c2cc 	.word	0x0800c2cc

0800ba90 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	4603      	mov	r3, r0
 800ba98:	6039      	str	r1, [r7, #0]
 800ba9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba9c:	79fb      	ldrb	r3, [r7, #7]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d105      	bne.n	800baae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800baa2:	683a      	ldr	r2, [r7, #0]
 800baa4:	4907      	ldr	r1, [pc, #28]	@ (800bac4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800baa6:	4808      	ldr	r0, [pc, #32]	@ (800bac8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800baa8:	f7ff fd98 	bl	800b5dc <USBD_GetString>
 800baac:	e004      	b.n	800bab8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800baae:	683a      	ldr	r2, [r7, #0]
 800bab0:	4904      	ldr	r1, [pc, #16]	@ (800bac4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bab2:	4805      	ldr	r0, [pc, #20]	@ (800bac8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bab4:	f7ff fd92 	bl	800b5dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800bab8:	4b02      	ldr	r3, [pc, #8]	@ (800bac4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800baba:	4618      	mov	r0, r3
 800babc:	3708      	adds	r7, #8
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	20001b24 	.word	0x20001b24
 800bac8:	0800c2d8 	.word	0x0800c2d8

0800bacc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bad2:	4b0f      	ldr	r3, [pc, #60]	@ (800bb10 <Get_SerialNum+0x44>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bad8:	4b0e      	ldr	r3, [pc, #56]	@ (800bb14 <Get_SerialNum+0x48>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bade:	4b0e      	ldr	r3, [pc, #56]	@ (800bb18 <Get_SerialNum+0x4c>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	4413      	add	r3, r2
 800baea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d009      	beq.n	800bb06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800baf2:	2208      	movs	r2, #8
 800baf4:	4909      	ldr	r1, [pc, #36]	@ (800bb1c <Get_SerialNum+0x50>)
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	f000 f814 	bl	800bb24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bafc:	2204      	movs	r2, #4
 800bafe:	4908      	ldr	r1, [pc, #32]	@ (800bb20 <Get_SerialNum+0x54>)
 800bb00:	68b8      	ldr	r0, [r7, #8]
 800bb02:	f000 f80f 	bl	800bb24 <IntToUnicode>
  }
}
 800bb06:	bf00      	nop
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	1fff7a10 	.word	0x1fff7a10
 800bb14:	1fff7a14 	.word	0x1fff7a14
 800bb18:	1fff7a18 	.word	0x1fff7a18
 800bb1c:	200000f6 	.word	0x200000f6
 800bb20:	20000106 	.word	0x20000106

0800bb24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b087      	sub	sp, #28
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	4613      	mov	r3, r2
 800bb30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bb32:	2300      	movs	r3, #0
 800bb34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bb36:	2300      	movs	r3, #0
 800bb38:	75fb      	strb	r3, [r7, #23]
 800bb3a:	e027      	b.n	800bb8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	0f1b      	lsrs	r3, r3, #28
 800bb40:	2b09      	cmp	r3, #9
 800bb42:	d80b      	bhi.n	800bb5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	0f1b      	lsrs	r3, r3, #28
 800bb48:	b2da      	uxtb	r2, r3
 800bb4a:	7dfb      	ldrb	r3, [r7, #23]
 800bb4c:	005b      	lsls	r3, r3, #1
 800bb4e:	4619      	mov	r1, r3
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	440b      	add	r3, r1
 800bb54:	3230      	adds	r2, #48	@ 0x30
 800bb56:	b2d2      	uxtb	r2, r2
 800bb58:	701a      	strb	r2, [r3, #0]
 800bb5a:	e00a      	b.n	800bb72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	0f1b      	lsrs	r3, r3, #28
 800bb60:	b2da      	uxtb	r2, r3
 800bb62:	7dfb      	ldrb	r3, [r7, #23]
 800bb64:	005b      	lsls	r3, r3, #1
 800bb66:	4619      	mov	r1, r3
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	440b      	add	r3, r1
 800bb6c:	3237      	adds	r2, #55	@ 0x37
 800bb6e:	b2d2      	uxtb	r2, r2
 800bb70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	011b      	lsls	r3, r3, #4
 800bb76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bb78:	7dfb      	ldrb	r3, [r7, #23]
 800bb7a:	005b      	lsls	r3, r3, #1
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	68ba      	ldr	r2, [r7, #8]
 800bb80:	4413      	add	r3, r2
 800bb82:	2200      	movs	r2, #0
 800bb84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bb86:	7dfb      	ldrb	r3, [r7, #23]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	75fb      	strb	r3, [r7, #23]
 800bb8c:	7dfa      	ldrb	r2, [r7, #23]
 800bb8e:	79fb      	ldrb	r3, [r7, #7]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d3d3      	bcc.n	800bb3c <IntToUnicode+0x18>
  }
}
 800bb94:	bf00      	nop
 800bb96:	bf00      	nop
 800bb98:	371c      	adds	r7, #28
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr
	...

0800bba4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b08a      	sub	sp, #40	@ 0x28
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbac:	f107 0314 	add.w	r3, r7, #20
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	601a      	str	r2, [r3, #0]
 800bbb4:	605a      	str	r2, [r3, #4]
 800bbb6:	609a      	str	r2, [r3, #8]
 800bbb8:	60da      	str	r2, [r3, #12]
 800bbba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bbc4:	d13a      	bne.n	800bc3c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	613b      	str	r3, [r7, #16]
 800bbca:	4b1e      	ldr	r3, [pc, #120]	@ (800bc44 <HAL_PCD_MspInit+0xa0>)
 800bbcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbce:	4a1d      	ldr	r2, [pc, #116]	@ (800bc44 <HAL_PCD_MspInit+0xa0>)
 800bbd0:	f043 0301 	orr.w	r3, r3, #1
 800bbd4:	6313      	str	r3, [r2, #48]	@ 0x30
 800bbd6:	4b1b      	ldr	r3, [pc, #108]	@ (800bc44 <HAL_PCD_MspInit+0xa0>)
 800bbd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbda:	f003 0301 	and.w	r3, r3, #1
 800bbde:	613b      	str	r3, [r7, #16]
 800bbe0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bbe2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800bbe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbe8:	2302      	movs	r3, #2
 800bbea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbec:	2300      	movs	r3, #0
 800bbee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bbf4:	230a      	movs	r3, #10
 800bbf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bbf8:	f107 0314 	add.w	r3, r7, #20
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	4812      	ldr	r0, [pc, #72]	@ (800bc48 <HAL_PCD_MspInit+0xa4>)
 800bc00:	f7f6 ff02 	bl	8002a08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bc04:	4b0f      	ldr	r3, [pc, #60]	@ (800bc44 <HAL_PCD_MspInit+0xa0>)
 800bc06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc08:	4a0e      	ldr	r2, [pc, #56]	@ (800bc44 <HAL_PCD_MspInit+0xa0>)
 800bc0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc0e:	6353      	str	r3, [r2, #52]	@ 0x34
 800bc10:	2300      	movs	r3, #0
 800bc12:	60fb      	str	r3, [r7, #12]
 800bc14:	4b0b      	ldr	r3, [pc, #44]	@ (800bc44 <HAL_PCD_MspInit+0xa0>)
 800bc16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc18:	4a0a      	ldr	r2, [pc, #40]	@ (800bc44 <HAL_PCD_MspInit+0xa0>)
 800bc1a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bc1e:	6453      	str	r3, [r2, #68]	@ 0x44
 800bc20:	4b08      	ldr	r3, [pc, #32]	@ (800bc44 <HAL_PCD_MspInit+0xa0>)
 800bc22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc28:	60fb      	str	r3, [r7, #12]
 800bc2a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	2100      	movs	r1, #0
 800bc30:	2043      	movs	r0, #67	@ 0x43
 800bc32:	f7f6 fe20 	bl	8002876 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bc36:	2043      	movs	r0, #67	@ 0x43
 800bc38:	f7f6 fe39 	bl	80028ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bc3c:	bf00      	nop
 800bc3e:	3728      	adds	r7, #40	@ 0x28
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	40023800 	.word	0x40023800
 800bc48:	40020000 	.word	0x40020000

0800bc4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bc60:	4619      	mov	r1, r3
 800bc62:	4610      	mov	r0, r2
 800bc64:	f7fe fb57 	bl	800a316 <USBD_LL_SetupStage>
}
 800bc68:	bf00      	nop
 800bc6a:	3708      	adds	r7, #8
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	460b      	mov	r3, r1
 800bc7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bc82:	78fa      	ldrb	r2, [r7, #3]
 800bc84:	6879      	ldr	r1, [r7, #4]
 800bc86:	4613      	mov	r3, r2
 800bc88:	00db      	lsls	r3, r3, #3
 800bc8a:	4413      	add	r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	440b      	add	r3, r1
 800bc90:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	78fb      	ldrb	r3, [r7, #3]
 800bc98:	4619      	mov	r1, r3
 800bc9a:	f7fe fb91 	bl	800a3c0 <USBD_LL_DataOutStage>
}
 800bc9e:	bf00      	nop
 800bca0:	3708      	adds	r7, #8
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b082      	sub	sp, #8
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
 800bcae:	460b      	mov	r3, r1
 800bcb0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bcb8:	78fa      	ldrb	r2, [r7, #3]
 800bcba:	6879      	ldr	r1, [r7, #4]
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	00db      	lsls	r3, r3, #3
 800bcc0:	4413      	add	r3, r2
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	440b      	add	r3, r1
 800bcc6:	3320      	adds	r3, #32
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	78fb      	ldrb	r3, [r7, #3]
 800bccc:	4619      	mov	r1, r3
 800bcce:	f7fe fc2a 	bl	800a526 <USBD_LL_DataInStage>
}
 800bcd2:	bf00      	nop
 800bcd4:	3708      	adds	r7, #8
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b082      	sub	sp, #8
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7fe fd64 	bl	800a7b6 <USBD_LL_SOF>
}
 800bcee:	bf00      	nop
 800bcf0:	3708      	adds	r7, #8
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b084      	sub	sp, #16
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bcfe:	2301      	movs	r3, #1
 800bd00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	79db      	ldrb	r3, [r3, #7]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d102      	bne.n	800bd10 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	73fb      	strb	r3, [r7, #15]
 800bd0e:	e008      	b.n	800bd22 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	79db      	ldrb	r3, [r3, #7]
 800bd14:	2b02      	cmp	r3, #2
 800bd16:	d102      	bne.n	800bd1e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	73fb      	strb	r3, [r7, #15]
 800bd1c:	e001      	b.n	800bd22 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bd1e:	f7f5 fc83 	bl	8001628 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd28:	7bfa      	ldrb	r2, [r7, #15]
 800bd2a:	4611      	mov	r1, r2
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7fe fcfe 	bl	800a72e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7fe fca6 	bl	800a68a <USBD_LL_Reset>
}
 800bd3e:	bf00      	nop
 800bd40:	3710      	adds	r7, #16
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
	...

0800bd48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7fe fcf9 	bl	800a74e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	6812      	ldr	r2, [r2, #0]
 800bd6a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bd6e:	f043 0301 	orr.w	r3, r3, #1
 800bd72:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	7adb      	ldrb	r3, [r3, #11]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d005      	beq.n	800bd88 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd7c:	4b04      	ldr	r3, [pc, #16]	@ (800bd90 <HAL_PCD_SuspendCallback+0x48>)
 800bd7e:	691b      	ldr	r3, [r3, #16]
 800bd80:	4a03      	ldr	r2, [pc, #12]	@ (800bd90 <HAL_PCD_SuspendCallback+0x48>)
 800bd82:	f043 0306 	orr.w	r3, r3, #6
 800bd86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bd88:	bf00      	nop
 800bd8a:	3708      	adds	r7, #8
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	e000ed00 	.word	0xe000ed00

0800bd94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b082      	sub	sp, #8
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7fe fcef 	bl	800a786 <USBD_LL_Resume>
}
 800bda8:	bf00      	nop
 800bdaa:	3708      	adds	r7, #8
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	460b      	mov	r3, r1
 800bdba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bdc2:	78fa      	ldrb	r2, [r7, #3]
 800bdc4:	4611      	mov	r1, r2
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7fe fd47 	bl	800a85a <USBD_LL_IsoOUTIncomplete>
}
 800bdcc:	bf00      	nop
 800bdce:	3708      	adds	r7, #8
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	460b      	mov	r3, r1
 800bdde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bde6:	78fa      	ldrb	r2, [r7, #3]
 800bde8:	4611      	mov	r1, r2
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7fe fd03 	bl	800a7f6 <USBD_LL_IsoINIncomplete>
}
 800bdf0:	bf00      	nop
 800bdf2:	3708      	adds	r7, #8
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be06:	4618      	mov	r0, r3
 800be08:	f7fe fd59 	bl	800a8be <USBD_LL_DevConnected>
}
 800be0c:	bf00      	nop
 800be0e:	3708      	adds	r7, #8
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}

0800be14 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be22:	4618      	mov	r0, r3
 800be24:	f7fe fd56 	bl	800a8d4 <USBD_LL_DevDisconnected>
}
 800be28:	bf00      	nop
 800be2a:	3708      	adds	r7, #8
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}

0800be30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d13c      	bne.n	800beba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800be40:	4a20      	ldr	r2, [pc, #128]	@ (800bec4 <USBD_LL_Init+0x94>)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	4a1e      	ldr	r2, [pc, #120]	@ (800bec4 <USBD_LL_Init+0x94>)
 800be4c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800be50:	4b1c      	ldr	r3, [pc, #112]	@ (800bec4 <USBD_LL_Init+0x94>)
 800be52:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800be56:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800be58:	4b1a      	ldr	r3, [pc, #104]	@ (800bec4 <USBD_LL_Init+0x94>)
 800be5a:	2204      	movs	r2, #4
 800be5c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800be5e:	4b19      	ldr	r3, [pc, #100]	@ (800bec4 <USBD_LL_Init+0x94>)
 800be60:	2202      	movs	r2, #2
 800be62:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800be64:	4b17      	ldr	r3, [pc, #92]	@ (800bec4 <USBD_LL_Init+0x94>)
 800be66:	2200      	movs	r2, #0
 800be68:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800be6a:	4b16      	ldr	r3, [pc, #88]	@ (800bec4 <USBD_LL_Init+0x94>)
 800be6c:	2202      	movs	r2, #2
 800be6e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800be70:	4b14      	ldr	r3, [pc, #80]	@ (800bec4 <USBD_LL_Init+0x94>)
 800be72:	2200      	movs	r2, #0
 800be74:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800be76:	4b13      	ldr	r3, [pc, #76]	@ (800bec4 <USBD_LL_Init+0x94>)
 800be78:	2200      	movs	r2, #0
 800be7a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800be7c:	4b11      	ldr	r3, [pc, #68]	@ (800bec4 <USBD_LL_Init+0x94>)
 800be7e:	2200      	movs	r2, #0
 800be80:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800be82:	4b10      	ldr	r3, [pc, #64]	@ (800bec4 <USBD_LL_Init+0x94>)
 800be84:	2200      	movs	r2, #0
 800be86:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800be88:	4b0e      	ldr	r3, [pc, #56]	@ (800bec4 <USBD_LL_Init+0x94>)
 800be8a:	2200      	movs	r2, #0
 800be8c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800be8e:	480d      	ldr	r0, [pc, #52]	@ (800bec4 <USBD_LL_Init+0x94>)
 800be90:	f7f7 f8b4 	bl	8002ffc <HAL_PCD_Init>
 800be94:	4603      	mov	r3, r0
 800be96:	2b00      	cmp	r3, #0
 800be98:	d001      	beq.n	800be9e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800be9a:	f7f5 fbc5 	bl	8001628 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800be9e:	2180      	movs	r1, #128	@ 0x80
 800bea0:	4808      	ldr	r0, [pc, #32]	@ (800bec4 <USBD_LL_Init+0x94>)
 800bea2:	f7f8 fae0 	bl	8004466 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bea6:	2240      	movs	r2, #64	@ 0x40
 800bea8:	2100      	movs	r1, #0
 800beaa:	4806      	ldr	r0, [pc, #24]	@ (800bec4 <USBD_LL_Init+0x94>)
 800beac:	f7f8 fa94 	bl	80043d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800beb0:	2280      	movs	r2, #128	@ 0x80
 800beb2:	2101      	movs	r1, #1
 800beb4:	4803      	ldr	r0, [pc, #12]	@ (800bec4 <USBD_LL_Init+0x94>)
 800beb6:	f7f8 fa8f 	bl	80043d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800beba:	2300      	movs	r3, #0
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	3708      	adds	r7, #8
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	20001d24 	.word	0x20001d24

0800bec8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bed0:	2300      	movs	r3, #0
 800bed2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bed4:	2300      	movs	r3, #0
 800bed6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bede:	4618      	mov	r0, r3
 800bee0:	f7f7 f99b 	bl	800321a <HAL_PCD_Start>
 800bee4:	4603      	mov	r3, r0
 800bee6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bee8:	7bfb      	ldrb	r3, [r7, #15]
 800beea:	4618      	mov	r0, r3
 800beec:	f000 f942 	bl	800c174 <USBD_Get_USB_Status>
 800bef0:	4603      	mov	r3, r0
 800bef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bef4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b084      	sub	sp, #16
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	6078      	str	r0, [r7, #4]
 800bf06:	4608      	mov	r0, r1
 800bf08:	4611      	mov	r1, r2
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	70fb      	strb	r3, [r7, #3]
 800bf10:	460b      	mov	r3, r1
 800bf12:	70bb      	strb	r3, [r7, #2]
 800bf14:	4613      	mov	r3, r2
 800bf16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bf26:	78bb      	ldrb	r3, [r7, #2]
 800bf28:	883a      	ldrh	r2, [r7, #0]
 800bf2a:	78f9      	ldrb	r1, [r7, #3]
 800bf2c:	f7f7 fe6f 	bl	8003c0e <HAL_PCD_EP_Open>
 800bf30:	4603      	mov	r3, r0
 800bf32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf34:	7bfb      	ldrb	r3, [r7, #15]
 800bf36:	4618      	mov	r0, r3
 800bf38:	f000 f91c 	bl	800c174 <USBD_Get_USB_Status>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf40:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3710      	adds	r7, #16
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}

0800bf4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf4a:	b580      	push	{r7, lr}
 800bf4c:	b084      	sub	sp, #16
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
 800bf52:	460b      	mov	r3, r1
 800bf54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf56:	2300      	movs	r3, #0
 800bf58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf64:	78fa      	ldrb	r2, [r7, #3]
 800bf66:	4611      	mov	r1, r2
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7f7 feba 	bl	8003ce2 <HAL_PCD_EP_Close>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf72:	7bfb      	ldrb	r3, [r7, #15]
 800bf74:	4618      	mov	r0, r3
 800bf76:	f000 f8fd 	bl	800c174 <USBD_Get_USB_Status>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3710      	adds	r7, #16
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	460b      	mov	r3, r1
 800bf92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf94:	2300      	movs	r3, #0
 800bf96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bfa2:	78fa      	ldrb	r2, [r7, #3]
 800bfa4:	4611      	mov	r1, r2
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7f7 ff72 	bl	8003e90 <HAL_PCD_EP_SetStall>
 800bfac:	4603      	mov	r3, r0
 800bfae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfb0:	7bfb      	ldrb	r3, [r7, #15]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f000 f8de 	bl	800c174 <USBD_Get_USB_Status>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3710      	adds	r7, #16
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}

0800bfc6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b084      	sub	sp, #16
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	6078      	str	r0, [r7, #4]
 800bfce:	460b      	mov	r3, r1
 800bfd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bfe0:	78fa      	ldrb	r2, [r7, #3]
 800bfe2:	4611      	mov	r1, r2
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7f7 ffb6 	bl	8003f56 <HAL_PCD_EP_ClrStall>
 800bfea:	4603      	mov	r3, r0
 800bfec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfee:	7bfb      	ldrb	r3, [r7, #15]
 800bff0:	4618      	mov	r0, r3
 800bff2:	f000 f8bf 	bl	800c174 <USBD_Get_USB_Status>
 800bff6:	4603      	mov	r3, r0
 800bff8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bffa:	7bbb      	ldrb	r3, [r7, #14]
}
 800bffc:	4618      	mov	r0, r3
 800bffe:	3710      	adds	r7, #16
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}

0800c004 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c004:	b480      	push	{r7}
 800c006:	b085      	sub	sp, #20
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	460b      	mov	r3, r1
 800c00e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c016:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c018:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	da0b      	bge.n	800c038 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c020:	78fb      	ldrb	r3, [r7, #3]
 800c022:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c026:	68f9      	ldr	r1, [r7, #12]
 800c028:	4613      	mov	r3, r2
 800c02a:	00db      	lsls	r3, r3, #3
 800c02c:	4413      	add	r3, r2
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	440b      	add	r3, r1
 800c032:	3316      	adds	r3, #22
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	e00b      	b.n	800c050 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c038:	78fb      	ldrb	r3, [r7, #3]
 800c03a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c03e:	68f9      	ldr	r1, [r7, #12]
 800c040:	4613      	mov	r3, r2
 800c042:	00db      	lsls	r3, r3, #3
 800c044:	4413      	add	r3, r2
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	440b      	add	r3, r1
 800c04a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c04e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c050:	4618      	mov	r0, r3
 800c052:	3714      	adds	r7, #20
 800c054:	46bd      	mov	sp, r7
 800c056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05a:	4770      	bx	lr

0800c05c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	460b      	mov	r3, r1
 800c066:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c068:	2300      	movs	r3, #0
 800c06a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c06c:	2300      	movs	r3, #0
 800c06e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c076:	78fa      	ldrb	r2, [r7, #3]
 800c078:	4611      	mov	r1, r2
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7f7 fda3 	bl	8003bc6 <HAL_PCD_SetAddress>
 800c080:	4603      	mov	r3, r0
 800c082:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c084:	7bfb      	ldrb	r3, [r7, #15]
 800c086:	4618      	mov	r0, r3
 800c088:	f000 f874 	bl	800c174 <USBD_Get_USB_Status>
 800c08c:	4603      	mov	r3, r0
 800c08e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c090:	7bbb      	ldrb	r3, [r7, #14]
}
 800c092:	4618      	mov	r0, r3
 800c094:	3710      	adds	r7, #16
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}

0800c09a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b086      	sub	sp, #24
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	60f8      	str	r0, [r7, #12]
 800c0a2:	607a      	str	r2, [r7, #4]
 800c0a4:	603b      	str	r3, [r7, #0]
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c0b8:	7af9      	ldrb	r1, [r7, #11]
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	687a      	ldr	r2, [r7, #4]
 800c0be:	f7f7 fead 	bl	8003e1c <HAL_PCD_EP_Transmit>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0c6:	7dfb      	ldrb	r3, [r7, #23]
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f000 f853 	bl	800c174 <USBD_Get_USB_Status>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c0d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3718      	adds	r7, #24
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b086      	sub	sp, #24
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	607a      	str	r2, [r7, #4]
 800c0e6:	603b      	str	r3, [r7, #0]
 800c0e8:	460b      	mov	r3, r1
 800c0ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c0fa:	7af9      	ldrb	r1, [r7, #11]
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	f7f7 fe39 	bl	8003d76 <HAL_PCD_EP_Receive>
 800c104:	4603      	mov	r3, r0
 800c106:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c108:	7dfb      	ldrb	r3, [r7, #23]
 800c10a:	4618      	mov	r0, r3
 800c10c:	f000 f832 	bl	800c174 <USBD_Get_USB_Status>
 800c110:	4603      	mov	r3, r0
 800c112:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c114:	7dbb      	ldrb	r3, [r7, #22]
}
 800c116:	4618      	mov	r0, r3
 800c118:	3718      	adds	r7, #24
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c11e:	b580      	push	{r7, lr}
 800c120:	b082      	sub	sp, #8
 800c122:	af00      	add	r7, sp, #0
 800c124:	6078      	str	r0, [r7, #4]
 800c126:	460b      	mov	r3, r1
 800c128:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c130:	78fa      	ldrb	r2, [r7, #3]
 800c132:	4611      	mov	r1, r2
 800c134:	4618      	mov	r0, r3
 800c136:	f7f7 fe59 	bl	8003dec <HAL_PCD_EP_GetRxCount>
 800c13a:	4603      	mov	r3, r0
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c14c:	4b03      	ldr	r3, [pc, #12]	@ (800c15c <USBD_static_malloc+0x18>)
}
 800c14e:	4618      	mov	r0, r3
 800c150:	370c      	adds	r7, #12
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop
 800c15c:	20002208 	.word	0x20002208

0800c160 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c160:	b480      	push	{r7}
 800c162:	b083      	sub	sp, #12
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]

}
 800c168:	bf00      	nop
 800c16a:	370c      	adds	r7, #12
 800c16c:	46bd      	mov	sp, r7
 800c16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c172:	4770      	bx	lr

0800c174 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c174:	b480      	push	{r7}
 800c176:	b085      	sub	sp, #20
 800c178:	af00      	add	r7, sp, #0
 800c17a:	4603      	mov	r3, r0
 800c17c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c17e:	2300      	movs	r3, #0
 800c180:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c182:	79fb      	ldrb	r3, [r7, #7]
 800c184:	2b03      	cmp	r3, #3
 800c186:	d817      	bhi.n	800c1b8 <USBD_Get_USB_Status+0x44>
 800c188:	a201      	add	r2, pc, #4	@ (adr r2, 800c190 <USBD_Get_USB_Status+0x1c>)
 800c18a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c18e:	bf00      	nop
 800c190:	0800c1a1 	.word	0x0800c1a1
 800c194:	0800c1a7 	.word	0x0800c1a7
 800c198:	0800c1ad 	.word	0x0800c1ad
 800c19c:	0800c1b3 	.word	0x0800c1b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	73fb      	strb	r3, [r7, #15]
    break;
 800c1a4:	e00b      	b.n	800c1be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c1a6:	2303      	movs	r3, #3
 800c1a8:	73fb      	strb	r3, [r7, #15]
    break;
 800c1aa:	e008      	b.n	800c1be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	73fb      	strb	r3, [r7, #15]
    break;
 800c1b0:	e005      	b.n	800c1be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c1b2:	2303      	movs	r3, #3
 800c1b4:	73fb      	strb	r3, [r7, #15]
    break;
 800c1b6:	e002      	b.n	800c1be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c1b8:	2303      	movs	r3, #3
 800c1ba:	73fb      	strb	r3, [r7, #15]
    break;
 800c1bc:	bf00      	nop
  }
  return usb_status;
 800c1be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3714      	adds	r7, #20
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr

0800c1cc <memset>:
 800c1cc:	4402      	add	r2, r0
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d100      	bne.n	800c1d6 <memset+0xa>
 800c1d4:	4770      	bx	lr
 800c1d6:	f803 1b01 	strb.w	r1, [r3], #1
 800c1da:	e7f9      	b.n	800c1d0 <memset+0x4>

0800c1dc <__libc_init_array>:
 800c1dc:	b570      	push	{r4, r5, r6, lr}
 800c1de:	4d0d      	ldr	r5, [pc, #52]	@ (800c214 <__libc_init_array+0x38>)
 800c1e0:	4c0d      	ldr	r4, [pc, #52]	@ (800c218 <__libc_init_array+0x3c>)
 800c1e2:	1b64      	subs	r4, r4, r5
 800c1e4:	10a4      	asrs	r4, r4, #2
 800c1e6:	2600      	movs	r6, #0
 800c1e8:	42a6      	cmp	r6, r4
 800c1ea:	d109      	bne.n	800c200 <__libc_init_array+0x24>
 800c1ec:	4d0b      	ldr	r5, [pc, #44]	@ (800c21c <__libc_init_array+0x40>)
 800c1ee:	4c0c      	ldr	r4, [pc, #48]	@ (800c220 <__libc_init_array+0x44>)
 800c1f0:	f000 f826 	bl	800c240 <_init>
 800c1f4:	1b64      	subs	r4, r4, r5
 800c1f6:	10a4      	asrs	r4, r4, #2
 800c1f8:	2600      	movs	r6, #0
 800c1fa:	42a6      	cmp	r6, r4
 800c1fc:	d105      	bne.n	800c20a <__libc_init_array+0x2e>
 800c1fe:	bd70      	pop	{r4, r5, r6, pc}
 800c200:	f855 3b04 	ldr.w	r3, [r5], #4
 800c204:	4798      	blx	r3
 800c206:	3601      	adds	r6, #1
 800c208:	e7ee      	b.n	800c1e8 <__libc_init_array+0xc>
 800c20a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c20e:	4798      	blx	r3
 800c210:	3601      	adds	r6, #1
 800c212:	e7f2      	b.n	800c1fa <__libc_init_array+0x1e>
 800c214:	0800c308 	.word	0x0800c308
 800c218:	0800c308 	.word	0x0800c308
 800c21c:	0800c308 	.word	0x0800c308
 800c220:	0800c30c 	.word	0x0800c30c

0800c224 <memcpy>:
 800c224:	440a      	add	r2, r1
 800c226:	4291      	cmp	r1, r2
 800c228:	f100 33ff 	add.w	r3, r0, #4294967295
 800c22c:	d100      	bne.n	800c230 <memcpy+0xc>
 800c22e:	4770      	bx	lr
 800c230:	b510      	push	{r4, lr}
 800c232:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c23a:	4291      	cmp	r1, r2
 800c23c:	d1f9      	bne.n	800c232 <memcpy+0xe>
 800c23e:	bd10      	pop	{r4, pc}

0800c240 <_init>:
 800c240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c242:	bf00      	nop
 800c244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c246:	bc08      	pop	{r3}
 800c248:	469e      	mov	lr, r3
 800c24a:	4770      	bx	lr

0800c24c <_fini>:
 800c24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c24e:	bf00      	nop
 800c250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c252:	bc08      	pop	{r3}
 800c254:	469e      	mov	lr, r3
 800c256:	4770      	bx	lr
