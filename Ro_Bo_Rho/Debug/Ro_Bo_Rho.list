
Ro_Bo_Rho.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0b0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800c238  0800c238  0000d238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2d8  0800c2d8  0000e110  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2d8  0800c2d8  0000d2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2e0  0800c2e0  0000e110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2e0  0800c2e0  0000d2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c2e4  0800c2e4  0000d2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  0800c2e8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e110  2**0
                  CONTENTS
 10 .bss          00002318  20000110  20000110  0000e110  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002428  20002428  0000e110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e110  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e9c0  00000000  00000000  0000e140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004559  00000000  00000000  0002cb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ba8  00000000  00000000  00031060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001596  00000000  00000000  00032c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002748c  00000000  00000000  0003419e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000244f9  00000000  00000000  0005b62a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e15b9  00000000  00000000  0007fb23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001610dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000075f8  00000000  00000000  00161120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00168718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000110 	.word	0x20000110
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c220 	.word	0x0800c220

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000114 	.word	0x20000114
 80001c4:	0800c220 	.word	0x0800c220

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f001 fdf8 	bl	80020b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 fa36 	bl	8000930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 ff80 	bl	80013c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004c8:	f000 fbaa 	bl	8000c20 <MX_TIM2_Init>
  MX_TIM4_Init();
 80004cc:	f000 fc50 	bl	8000d70 <MX_TIM4_Init>
  MX_ADC1_Init();
 80004d0:	f000 fa98 	bl	8000a04 <MX_ADC1_Init>
  MX_SPI2_Init();
 80004d4:	f000 fb16 	bl	8000b04 <MX_SPI2_Init>
  MX_TIM1_Init();
 80004d8:	f000 fb4a 	bl	8000b70 <MX_TIM1_Init>
  MX_TIM8_Init();
 80004dc:	f000 fcf0 	bl	8000ec0 <MX_TIM8_Init>
  MX_TIM9_Init();
 80004e0:	f000 fd46 	bl	8000f70 <MX_TIM9_Init>
  MX_TIM10_Init();
 80004e4:	f000 fd94 	bl	8001010 <MX_TIM10_Init>
  MX_TIM11_Init();
 80004e8:	f000 fde0 	bl	80010ac <MX_TIM11_Init>
  MX_TIM12_Init();
 80004ec:	f000 fe2c 	bl	8001148 <MX_TIM12_Init>
  MX_TIM13_Init();
 80004f0:	f000 fe7a 	bl	80011e8 <MX_TIM13_Init>
  MX_TIM14_Init();
 80004f4:	f000 fec6 	bl	8001284 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 80004f8:	f000 ff3c 	bl	8001374 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80004fc:	f00b f94a 	bl	800b794 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8000500:	f000 ff0e 	bl	8001320 <MX_UART4_Init>
  MX_I2C2_Init();
 8000504:	f000 fad0 	bl	8000aa8 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000508:	f000 fbde 	bl	8000cc8 <MX_TIM3_Init>
  MX_TIM5_Init();
 800050c:	f000 fc84 	bl	8000e18 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
   Motor_setup_LF(&htim14   ,&htim5    ,"PC05");
 8000510:	4ac5      	ldr	r2, [pc, #788]	@ (8000828 <main+0x370>)
 8000512:	49c6      	ldr	r1, [pc, #792]	@ (800082c <main+0x374>)
 8000514:	48c6      	ldr	r0, [pc, #792]	@ (8000830 <main+0x378>)
 8000516:	f007 fdeb 	bl	80080f0 <Motor_setup_LF>
   Motor_setup_LB(&htim12   ,&htim1    ,"PE12");
 800051a:	4ac6      	ldr	r2, [pc, #792]	@ (8000834 <main+0x37c>)
 800051c:	49c6      	ldr	r1, [pc, #792]	@ (8000838 <main+0x380>)
 800051e:	48c7      	ldr	r0, [pc, #796]	@ (800083c <main+0x384>)
 8000520:	f007 fe14 	bl	800814c <Motor_setup_LB>
   Motor_setup_RF(&htim11   ,&htim8    ,"PE01");
 8000524:	4ac6      	ldr	r2, [pc, #792]	@ (8000840 <main+0x388>)
 8000526:	49c7      	ldr	r1, [pc, #796]	@ (8000844 <main+0x38c>)
 8000528:	48c7      	ldr	r0, [pc, #796]	@ (8000848 <main+0x390>)
 800052a:	f007 fe3d 	bl	80081a8 <Motor_setup_RF>
   Motor_setup_RB(&htim12   ,&htim4    ,"PD09");
 800052e:	4ac7      	ldr	r2, [pc, #796]	@ (800084c <main+0x394>)
 8000530:	49c7      	ldr	r1, [pc, #796]	@ (8000850 <main+0x398>)
 8000532:	48c2      	ldr	r0, [pc, #776]	@ (800083c <main+0x384>)
 8000534:	f007 fe66 	bl	8008204 <Motor_setup_RB>
   Motor_setup_EXTRA1(&htim9,&htim3    ,"PC13");
 8000538:	4ac6      	ldr	r2, [pc, #792]	@ (8000854 <main+0x39c>)
 800053a:	49c7      	ldr	r1, [pc, #796]	@ (8000858 <main+0x3a0>)
 800053c:	48c7      	ldr	r0, [pc, #796]	@ (800085c <main+0x3a4>)
 800053e:	f007 fe8f 	bl	8008260 <Motor_setup_EXTRA1>
   Motor_setup_EXTRA2(&htim10,&htim2   ,"PE00");
 8000542:	4ac7      	ldr	r2, [pc, #796]	@ (8000860 <main+0x3a8>)
 8000544:	49c7      	ldr	r1, [pc, #796]	@ (8000864 <main+0x3ac>)
 8000546:	48c8      	ldr	r0, [pc, #800]	@ (8000868 <main+0x3b0>)
 8000548:	f007 feb8 	bl	80082bc <Motor_setup_EXTRA2>

   Setup_Gear_Ratio(27);
 800054c:	201b      	movs	r0, #27
 800054e:	f007 ff03 	bl	8008358 <Setup_Gear_Ratio>
   Setup_CPR(68);
 8000552:	2044      	movs	r0, #68	@ 0x44
 8000554:	f007 fef0 	bl	8008338 <Setup_CPR>
   Setup_frequency_Motor(100);
 8000558:	2064      	movs	r0, #100	@ 0x64
 800055a:	f007 ff0d 	bl	8008378 <Setup_frequency_Motor>

   Setup_PID_LF(1.0 ,0.0 ,0.1 ,0 ,280);
 800055e:	ed9f 2ac3 	vldr	s4, [pc, #780]	@ 800086c <main+0x3b4>
 8000562:	eddf 1ac3 	vldr	s3, [pc, #780]	@ 8000870 <main+0x3b8>
 8000566:	ed9f 1ac3 	vldr	s2, [pc, #780]	@ 8000874 <main+0x3bc>
 800056a:	eddf 0ac1 	vldr	s1, [pc, #772]	@ 8000870 <main+0x3b8>
 800056e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000572:	f007 ff99 	bl	80084a8 <Setup_PID_LF>
   Setup_PID_LB(1.0 ,0.0 ,0.1 ,0 ,280);
 8000576:	ed9f 2abd 	vldr	s4, [pc, #756]	@ 800086c <main+0x3b4>
 800057a:	eddf 1abd 	vldr	s3, [pc, #756]	@ 8000870 <main+0x3b8>
 800057e:	ed9f 1abd 	vldr	s2, [pc, #756]	@ 8000874 <main+0x3bc>
 8000582:	eddf 0abb 	vldr	s1, [pc, #748]	@ 8000870 <main+0x3b8>
 8000586:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800058a:	f007 ffb9 	bl	8008500 <Setup_PID_LB>
   Setup_PID_RF(1.0 ,0.0 ,0.1 ,0 ,280);
 800058e:	ed9f 2ab7 	vldr	s4, [pc, #732]	@ 800086c <main+0x3b4>
 8000592:	eddf 1ab7 	vldr	s3, [pc, #732]	@ 8000870 <main+0x3b8>
 8000596:	ed9f 1ab7 	vldr	s2, [pc, #732]	@ 8000874 <main+0x3bc>
 800059a:	eddf 0ab5 	vldr	s1, [pc, #724]	@ 8000870 <main+0x3b8>
 800059e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80005a2:	f007 ffd9 	bl	8008558 <Setup_PID_RF>
   Setup_PID_RB(1.0 ,0.0 ,0.1 ,0 ,280);
 80005a6:	ed9f 2ab1 	vldr	s4, [pc, #708]	@ 800086c <main+0x3b4>
 80005aa:	eddf 1ab1 	vldr	s3, [pc, #708]	@ 8000870 <main+0x3b8>
 80005ae:	ed9f 1ab1 	vldr	s2, [pc, #708]	@ 8000874 <main+0x3bc>
 80005b2:	eddf 0aaf 	vldr	s1, [pc, #700]	@ 8000870 <main+0x3b8>
 80005b6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80005ba:	f007 fff9 	bl	80085b0 <Setup_PID_RB>
//   Setup_PID_EXTRA1(0.5 ,0.1 ,0 ,0 ,280);
//   Setup_PID_EXTRA2(0.5 ,0.1 ,0 ,0 ,280);

   Setup_frequency_Forward_Kinematic(100);
 80005be:	2064      	movs	r0, #100	@ 0x64
 80005c0:	f009 f830 	bl	8009624 <Setup_frequency_Forward_Kinematic>
   Setup_Forward_Kinematic(0.23f ,0.23f ,0.06f);
 80005c4:	ed9f 1aac 	vldr	s2, [pc, #688]	@ 8000878 <main+0x3c0>
 80005c8:	eddf 0aac 	vldr	s1, [pc, #688]	@ 800087c <main+0x3c4>
 80005cc:	ed9f 0aab 	vldr	s0, [pc, #684]	@ 800087c <main+0x3c4>
 80005d0:	f009 f80a 	bl	80095e8 <Setup_Forward_Kinematic>

   Setup_Inverse_Kinematic(0.23f ,0.23f ,0.06f);
 80005d4:	ed9f 1aa8 	vldr	s2, [pc, #672]	@ 8000878 <main+0x3c0>
 80005d8:	eddf 0aa8 	vldr	s1, [pc, #672]	@ 800087c <main+0x3c4>
 80005dc:	ed9f 0aa7 	vldr	s0, [pc, #668]	@ 800087c <main+0x3c4>
 80005e0:	f009 f830 	bl	8009644 <Setup_Inverse_Kinematic>

   //UAST2 esp_s3_zero to STM32
   HAL_UART_Receive_IT(&huart2, (uint8_t *)&Str_PS2, sizeof(Str_PS2));
 80005e4:	2212      	movs	r2, #18
 80005e6:	49a6      	ldr	r1, [pc, #664]	@ (8000880 <main+0x3c8>)
 80005e8:	48a6      	ldr	r0, [pc, #664]	@ (8000884 <main+0x3cc>)
 80005ea:	f005 fb15 	bl	8005c18 <HAL_UART_Receive_IT>
    /* USER CODE BEGIN 3 */

//	  CDC_Transmit_FS((uint8_t*)RPM ,6);
//	  HAL_Delay(1000);

	  if((uwTick - PastTime) > 10){
 80005ee:	4ba6      	ldr	r3, [pc, #664]	@ (8000888 <main+0x3d0>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4aa6      	ldr	r2, [pc, #664]	@ (800088c <main+0x3d4>)
 80005f4:	6812      	ldr	r2, [r2, #0]
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	2b0a      	cmp	r3, #10
 80005fa:	d9f8      	bls.n	80005ee <main+0x136>
         if(Str_PS2.seting[1] == 1){
 80005fc:	4ba0      	ldr	r3, [pc, #640]	@ (8000880 <main+0x3c8>)
 80005fe:	7b5b      	ldrb	r3, [r3, #13]
 8000600:	2b01      	cmp	r3, #1
 8000602:	f040 8175 	bne.w	80008f0 <main+0x438>
//	    count[2] = getCount(&htim8);
//	    count[3] = getCount(&htim4);
//	    count[4] = getCount(&htim2);
//	    count[5] = getCount(&htim3);

	    RPM[0] = getRPM_TIM_Wheel(&htim5 ,LF);
 8000606:	2100      	movs	r1, #0
 8000608:	4888      	ldr	r0, [pc, #544]	@ (800082c <main+0x374>)
 800060a:	f007 fedf 	bl	80083cc <getRPM_TIM_Wheel>
 800060e:	eef0 7a40 	vmov.f32	s15, s0
 8000612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000616:	ee17 3a90 	vmov	r3, s15
 800061a:	b21a      	sxth	r2, r3
 800061c:	4b9c      	ldr	r3, [pc, #624]	@ (8000890 <main+0x3d8>)
 800061e:	801a      	strh	r2, [r3, #0]
	    RPM[1] = -getRPM_TIM_Wheel(&htim1 ,LB);
 8000620:	2101      	movs	r1, #1
 8000622:	4885      	ldr	r0, [pc, #532]	@ (8000838 <main+0x380>)
 8000624:	f007 fed2 	bl	80083cc <getRPM_TIM_Wheel>
 8000628:	eef0 7a40 	vmov.f32	s15, s0
 800062c:	eef1 7a67 	vneg.f32	s15, s15
 8000630:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000634:	ee17 3a90 	vmov	r3, s15
 8000638:	b21a      	sxth	r2, r3
 800063a:	4b95      	ldr	r3, [pc, #596]	@ (8000890 <main+0x3d8>)
 800063c:	805a      	strh	r2, [r3, #2]
	    RPM[2] = getRPM_TIM_Wheel(&htim8 ,RF);
 800063e:	2102      	movs	r1, #2
 8000640:	4880      	ldr	r0, [pc, #512]	@ (8000844 <main+0x38c>)
 8000642:	f007 fec3 	bl	80083cc <getRPM_TIM_Wheel>
 8000646:	eef0 7a40 	vmov.f32	s15, s0
 800064a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800064e:	ee17 3a90 	vmov	r3, s15
 8000652:	b21a      	sxth	r2, r3
 8000654:	4b8e      	ldr	r3, [pc, #568]	@ (8000890 <main+0x3d8>)
 8000656:	809a      	strh	r2, [r3, #4]
	    RPM[3] = getRPM_TIM_Wheel(&htim4 ,RB);
 8000658:	2103      	movs	r1, #3
 800065a:	487d      	ldr	r0, [pc, #500]	@ (8000850 <main+0x398>)
 800065c:	f007 feb6 	bl	80083cc <getRPM_TIM_Wheel>
 8000660:	eef0 7a40 	vmov.f32	s15, s0
 8000664:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000668:	ee17 3a90 	vmov	r3, s15
 800066c:	b21a      	sxth	r2, r3
 800066e:	4b88      	ldr	r3, [pc, #544]	@ (8000890 <main+0x3d8>)
 8000670:	80da      	strh	r2, [r3, #6]
//	    RPM[5] = getRPM_TIM_Wheel(&htim2 ,EXTRA2);

//		Odometry_Forward_Kinematic(getRPM_to_Rad_s(RPM[0]), getRPM_to_Rad_s(RPM[1]), getRPM_to_Rad_s(RPM[2]), getRPM_to_Rad_s(RPM[3]));
//		x = get_Vz();

	    Inverse_Kinematic(Vx ,Vy ,Vz);
 8000672:	4b88      	ldr	r3, [pc, #544]	@ (8000894 <main+0x3dc>)
 8000674:	edd3 7a00 	vldr	s15, [r3]
 8000678:	4b87      	ldr	r3, [pc, #540]	@ (8000898 <main+0x3e0>)
 800067a:	ed93 7a00 	vldr	s14, [r3]
 800067e:	4b87      	ldr	r3, [pc, #540]	@ (800089c <main+0x3e4>)
 8000680:	edd3 6a00 	vldr	s13, [r3]
 8000684:	eeb0 1a66 	vmov.f32	s2, s13
 8000688:	eef0 0a47 	vmov.f32	s1, s14
 800068c:	eeb0 0a67 	vmov.f32	s0, s15
 8000690:	f008 fff6 	bl	8009680 <Inverse_Kinematic>

	    PID[0] = Motor_Speed_LF(getRad_s_to_RPM(get_w_LF()) ,RPM[0]);
 8000694:	f009 f886 	bl	80097a4 <get_w_LF>
 8000698:	eef0 7a40 	vmov.f32	s15, s0
 800069c:	eeb0 0a67 	vmov.f32	s0, s15
 80006a0:	f007 fe7a 	bl	8008398 <getRad_s_to_RPM>
 80006a4:	eef0 7a40 	vmov.f32	s15, s0
 80006a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006ac:	ee17 3a90 	vmov	r3, s15
 80006b0:	b21b      	sxth	r3, r3
 80006b2:	4a77      	ldr	r2, [pc, #476]	@ (8000890 <main+0x3d8>)
 80006b4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80006b8:	ee07 2a90 	vmov	s15, r2
 80006bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006c0:	eeb0 0a67 	vmov.f32	s0, s15
 80006c4:	4618      	mov	r0, r3
 80006c6:	f008 fa61 	bl	8008b8c <Motor_Speed_LF>
 80006ca:	eef0 7a40 	vmov.f32	s15, s0
 80006ce:	4b74      	ldr	r3, [pc, #464]	@ (80008a0 <main+0x3e8>)
 80006d0:	edc3 7a00 	vstr	s15, [r3]
	    PID[1] = Motor_Speed_LB(getRad_s_to_RPM(get_w_LB()) ,RPM[1]);
 80006d4:	f009 f874 	bl	80097c0 <get_w_LB>
 80006d8:	eef0 7a40 	vmov.f32	s15, s0
 80006dc:	eeb0 0a67 	vmov.f32	s0, s15
 80006e0:	f007 fe5a 	bl	8008398 <getRad_s_to_RPM>
 80006e4:	eef0 7a40 	vmov.f32	s15, s0
 80006e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006ec:	ee17 3a90 	vmov	r3, s15
 80006f0:	b21b      	sxth	r3, r3
 80006f2:	4a67      	ldr	r2, [pc, #412]	@ (8000890 <main+0x3d8>)
 80006f4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80006f8:	ee07 2a90 	vmov	s15, r2
 80006fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000700:	eeb0 0a67 	vmov.f32	s0, s15
 8000704:	4618      	mov	r0, r3
 8000706:	f008 fab3 	bl	8008c70 <Motor_Speed_LB>
 800070a:	eef0 7a40 	vmov.f32	s15, s0
 800070e:	4b64      	ldr	r3, [pc, #400]	@ (80008a0 <main+0x3e8>)
 8000710:	edc3 7a01 	vstr	s15, [r3, #4]
	    PID[2] = Motor_Speed_RF(getRad_s_to_RPM(get_w_RF()) ,RPM[2]);
 8000714:	f009 f862 	bl	80097dc <get_w_RF>
 8000718:	eef0 7a40 	vmov.f32	s15, s0
 800071c:	eeb0 0a67 	vmov.f32	s0, s15
 8000720:	f007 fe3a 	bl	8008398 <getRad_s_to_RPM>
 8000724:	eef0 7a40 	vmov.f32	s15, s0
 8000728:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800072c:	ee17 3a90 	vmov	r3, s15
 8000730:	b21b      	sxth	r3, r3
 8000732:	4a57      	ldr	r2, [pc, #348]	@ (8000890 <main+0x3d8>)
 8000734:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000738:	ee07 2a90 	vmov	s15, r2
 800073c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000740:	eeb0 0a67 	vmov.f32	s0, s15
 8000744:	4618      	mov	r0, r3
 8000746:	f008 fb05 	bl	8008d54 <Motor_Speed_RF>
 800074a:	eef0 7a40 	vmov.f32	s15, s0
 800074e:	4b54      	ldr	r3, [pc, #336]	@ (80008a0 <main+0x3e8>)
 8000750:	edc3 7a02 	vstr	s15, [r3, #8]
	    PID[3] = Motor_Speed_RB(getRad_s_to_RPM(get_w_RB()) ,RPM[3]);
 8000754:	f009 f850 	bl	80097f8 <get_w_RB>
 8000758:	eef0 7a40 	vmov.f32	s15, s0
 800075c:	eeb0 0a67 	vmov.f32	s0, s15
 8000760:	f007 fe1a 	bl	8008398 <getRad_s_to_RPM>
 8000764:	eef0 7a40 	vmov.f32	s15, s0
 8000768:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800076c:	ee17 3a90 	vmov	r3, s15
 8000770:	b21b      	sxth	r3, r3
 8000772:	4a47      	ldr	r2, [pc, #284]	@ (8000890 <main+0x3d8>)
 8000774:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000778:	ee07 2a90 	vmov	s15, r2
 800077c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000780:	eeb0 0a67 	vmov.f32	s0, s15
 8000784:	4618      	mov	r0, r3
 8000786:	f008 fb57 	bl	8008e38 <Motor_Speed_RB>
 800078a:	eef0 7a40 	vmov.f32	s15, s0
 800078e:	4b44      	ldr	r3, [pc, #272]	@ (80008a0 <main+0x3e8>)
 8000790:	edc3 7a03 	vstr	s15, [r3, #12]
//	    PID[1] = Motor_Speed_LB(-180 ,RPM[1]);
//	    PID[2] = Motor_Speed_RF(-180 ,RPM[2]);
//	    PID[3] = Motor_Speed_RB(-180 ,RPM[3]);


	    if ((Str_PS2.attack[2] == 1) && (lastButtonState_load_Ball == 0)) {
 8000794:	4b3a      	ldr	r3, [pc, #232]	@ (8000880 <main+0x3c8>)
 8000796:	799b      	ldrb	r3, [r3, #6]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d113      	bne.n	80007c4 <main+0x30c>
 800079c:	4b41      	ldr	r3, [pc, #260]	@ (80008a4 <main+0x3ec>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d10f      	bne.n	80007c4 <main+0x30c>
	    	status_load_Ball = !status_load_Ball;
 80007a4:	4b40      	ldr	r3, [pc, #256]	@ (80008a8 <main+0x3f0>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	bf0c      	ite	eq
 80007ac:	2301      	moveq	r3, #1
 80007ae:	2300      	movne	r3, #0
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	461a      	mov	r2, r3
 80007b4:	4b3c      	ldr	r3, [pc, #240]	@ (80008a8 <main+0x3f0>)
 80007b6:	701a      	strb	r2, [r3, #0]
	        digitalWrite("PE10", status_load_Ball);
 80007b8:	4b3b      	ldr	r3, [pc, #236]	@ (80008a8 <main+0x3f0>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	483b      	ldr	r0, [pc, #236]	@ (80008ac <main+0x3f4>)
 80007c0:	f008 fbac 	bl	8008f1c <digitalWrite>
	    }
	    lastButtonState_load_Ball = Str_PS2.attack[2];
 80007c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000880 <main+0x3c8>)
 80007c6:	799a      	ldrb	r2, [r3, #6]
 80007c8:	4b36      	ldr	r3, [pc, #216]	@ (80008a4 <main+0x3ec>)
 80007ca:	701a      	strb	r2, [r3, #0]

	    if ((Str_PS2.attack[1] == 1) && (lastButtonState_re_Ball == 0)) {
 80007cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000880 <main+0x3c8>)
 80007ce:	795b      	ldrb	r3, [r3, #5]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d113      	bne.n	80007fc <main+0x344>
 80007d4:	4b36      	ldr	r3, [pc, #216]	@ (80008b0 <main+0x3f8>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d10f      	bne.n	80007fc <main+0x344>
	    	status_re_Ball = !status_re_Ball;
 80007dc:	4b35      	ldr	r3, [pc, #212]	@ (80008b4 <main+0x3fc>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	bf0c      	ite	eq
 80007e4:	2301      	moveq	r3, #1
 80007e6:	2300      	movne	r3, #0
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b31      	ldr	r3, [pc, #196]	@ (80008b4 <main+0x3fc>)
 80007ee:	701a      	strb	r2, [r3, #0]
	   	    digitalWrite("PE08", status_re_Ball);
 80007f0:	4b30      	ldr	r3, [pc, #192]	@ (80008b4 <main+0x3fc>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4619      	mov	r1, r3
 80007f6:	4830      	ldr	r0, [pc, #192]	@ (80008b8 <main+0x400>)
 80007f8:	f008 fb90 	bl	8008f1c <digitalWrite>
	   	 }
	    lastButtonState_re_Ball = Str_PS2.attack[1];
 80007fc:	4b20      	ldr	r3, [pc, #128]	@ (8000880 <main+0x3c8>)
 80007fe:	795a      	ldrb	r2, [r3, #5]
 8000800:	4b2b      	ldr	r3, [pc, #172]	@ (80008b0 <main+0x3f8>)
 8000802:	701a      	strb	r2, [r3, #0]


	   	 if(Str_PS2.attack[5] == 1){
 8000804:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <main+0x3c8>)
 8000806:	7a5b      	ldrb	r3, [r3, #9]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d103      	bne.n	8000814 <main+0x35c>
	   	    Motor_DutyCycle_EXTRA1(-2000);
 800080c:	482b      	ldr	r0, [pc, #172]	@ (80008bc <main+0x404>)
 800080e:	f008 f90d 	bl	8008a2c <Motor_DutyCycle_EXTRA1>
 8000812:	e058      	b.n	80008c6 <main+0x40e>
	   	 }else if(Str_PS2.attack[7] == 1){
 8000814:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <main+0x3c8>)
 8000816:	7adb      	ldrb	r3, [r3, #11]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d151      	bne.n	80008c0 <main+0x408>
	   	    Motor_DutyCycle_EXTRA1(2000);
 800081c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000820:	f008 f904 	bl	8008a2c <Motor_DutyCycle_EXTRA1>
 8000824:	e04f      	b.n	80008c6 <main+0x40e>
 8000826:	bf00      	nop
 8000828:	0800c238 	.word	0x0800c238
 800082c:	20000340 	.word	0x20000340
 8000830:	20000538 	.word	0x20000538
 8000834:	0800c240 	.word	0x0800c240
 8000838:	20000220 	.word	0x20000220
 800083c:	200004a8 	.word	0x200004a8
 8000840:	0800c248 	.word	0x0800c248
 8000844:	20000388 	.word	0x20000388
 8000848:	20000460 	.word	0x20000460
 800084c:	0800c250 	.word	0x0800c250
 8000850:	200002f8 	.word	0x200002f8
 8000854:	0800c258 	.word	0x0800c258
 8000858:	200002b0 	.word	0x200002b0
 800085c:	200003d0 	.word	0x200003d0
 8000860:	0800c260 	.word	0x0800c260
 8000864:	20000268 	.word	0x20000268
 8000868:	20000418 	.word	0x20000418
 800086c:	438c0000 	.word	0x438c0000
 8000870:	00000000 	.word	0x00000000
 8000874:	3dcccccd 	.word	0x3dcccccd
 8000878:	3d75c28f 	.word	0x3d75c28f
 800087c:	3e6b851f 	.word	0x3e6b851f
 8000880:	20000638 	.word	0x20000638
 8000884:	200005c8 	.word	0x200005c8
 8000888:	20000650 	.word	0x20000650
 800088c:	2000061c 	.word	0x2000061c
 8000890:	20000000 	.word	0x20000000
 8000894:	20000610 	.word	0x20000610
 8000898:	20000614 	.word	0x20000614
 800089c:	20000618 	.word	0x20000618
 80008a0:	20000620 	.word	0x20000620
 80008a4:	2000064c 	.word	0x2000064c
 80008a8:	2000064a 	.word	0x2000064a
 80008ac:	0800c268 	.word	0x0800c268
 80008b0:	2000064d 	.word	0x2000064d
 80008b4:	2000064b 	.word	0x2000064b
 80008b8:	0800c270 	.word	0x0800c270
 80008bc:	fffff830 	.word	0xfffff830
	   	 }else{
	   		Motor_DutyCycle_EXTRA1(0);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f008 f8b3 	bl	8008a2c <Motor_DutyCycle_EXTRA1>
	   	 }


	   	 if(Str_PS2.attack[3] == 1){
 80008c6:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <main+0x468>)
 80008c8:	79db      	ldrb	r3, [r3, #7]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d104      	bne.n	80008d8 <main+0x420>
	   	    Motor_DutyCycle_EXTRA2(4000);
 80008ce:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80008d2:	f008 f903 	bl	8008adc <Motor_DutyCycle_EXTRA2>
 80008d6:	e01d      	b.n	8000914 <main+0x45c>
	   	 }else if(Str_PS2.attack[0] == 1){
 80008d8:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <main+0x468>)
 80008da:	791b      	ldrb	r3, [r3, #4]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d103      	bne.n	80008e8 <main+0x430>
		   	Motor_DutyCycle_EXTRA2(-4000);
 80008e0:	4810      	ldr	r0, [pc, #64]	@ (8000924 <main+0x46c>)
 80008e2:	f008 f8fb 	bl	8008adc <Motor_DutyCycle_EXTRA2>
 80008e6:	e015      	b.n	8000914 <main+0x45c>
		 }else{
	   		Motor_DutyCycle_EXTRA2(0);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f008 f8f7 	bl	8008adc <Motor_DutyCycle_EXTRA2>
 80008ee:	e011      	b.n	8000914 <main+0x45c>
	   	 }

         }else{
        	 Motor_DutyCycle_LF(0);
 80008f0:	2000      	movs	r0, #0
 80008f2:	f007 ff33 	bl	800875c <Motor_DutyCycle_LF>
        	 Motor_DutyCycle_LB(0);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f007 ff88 	bl	800880c <Motor_DutyCycle_LB>
        	 Motor_DutyCycle_RF(0);
 80008fc:	2000      	movs	r0, #0
 80008fe:	f007 ffe1 	bl	80088c4 <Motor_DutyCycle_RF>
        	 Motor_DutyCycle_RB(0);
 8000902:	2000      	movs	r0, #0
 8000904:	f008 f83a 	bl	800897c <Motor_DutyCycle_RB>
        	 Motor_DutyCycle_EXTRA1(0);
 8000908:	2000      	movs	r0, #0
 800090a:	f008 f88f 	bl	8008a2c <Motor_DutyCycle_EXTRA1>
        	 Motor_DutyCycle_EXTRA2(0);
 800090e:	2000      	movs	r0, #0
 8000910:	f008 f8e4 	bl	8008adc <Motor_DutyCycle_EXTRA2>
         }
	    PastTime = uwTick;
 8000914:	4b04      	ldr	r3, [pc, #16]	@ (8000928 <main+0x470>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b04      	ldr	r3, [pc, #16]	@ (800092c <main+0x474>)
 800091c:	601a      	str	r2, [r3, #0]
	  if((uwTick - PastTime) > 10){
 800091e:	e666      	b.n	80005ee <main+0x136>
 8000920:	20000638 	.word	0x20000638
 8000924:	fffff060 	.word	0xfffff060
 8000928:	20000650 	.word	0x20000650
 800092c:	2000061c 	.word	0x2000061c

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b094      	sub	sp, #80	@ 0x50
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 0320 	add.w	r3, r7, #32
 800093a:	2230      	movs	r2, #48	@ 0x30
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f00b fc34 	bl	800c1ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	4b28      	ldr	r3, [pc, #160]	@ (80009fc <SystemClock_Config+0xcc>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095c:	4a27      	ldr	r2, [pc, #156]	@ (80009fc <SystemClock_Config+0xcc>)
 800095e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000962:	6413      	str	r3, [r2, #64]	@ 0x40
 8000964:	4b25      	ldr	r3, [pc, #148]	@ (80009fc <SystemClock_Config+0xcc>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000968:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	4b22      	ldr	r3, [pc, #136]	@ (8000a00 <SystemClock_Config+0xd0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a21      	ldr	r2, [pc, #132]	@ (8000a00 <SystemClock_Config+0xd0>)
 800097a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800097e:	6013      	str	r3, [r2, #0]
 8000980:	4b1f      	ldr	r3, [pc, #124]	@ (8000a00 <SystemClock_Config+0xd0>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800098c:	2301      	movs	r3, #1
 800098e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000990:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000996:	2302      	movs	r3, #2
 8000998:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800099e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 7;
 80009a0:	2307      	movs	r3, #7
 80009a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009aa:	2304      	movs	r3, #4
 80009ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80009ae:	2308      	movs	r3, #8
 80009b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b2:	f107 0320 	add.w	r3, r7, #32
 80009b6:	4618      	mov	r0, r3
 80009b8:	f003 fd62 	bl	8004480 <HAL_RCC_OscConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009c2:	f000 fe21 	bl	8001608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c6:	230f      	movs	r3, #15
 80009c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ca:	2302      	movs	r3, #2
 80009cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	2103      	movs	r1, #3
 80009e4:	4618      	mov	r0, r3
 80009e6:	f003 ffc3 	bl	8004970 <HAL_RCC_ClockConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009f0:	f000 fe0a 	bl	8001608 <Error_Handler>
  }
}
 80009f4:	bf00      	nop
 80009f6:	3750      	adds	r7, #80	@ 0x50
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40007000 	.word	0x40007000

08000a04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a16:	4b21      	ldr	r3, [pc, #132]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a18:	4a21      	ldr	r2, [pc, #132]	@ (8000aa0 <MX_ADC1_Init+0x9c>)
 8000a1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a22:	4b1e      	ldr	r3, [pc, #120]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a28:	4b1c      	ldr	r3, [pc, #112]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a34:	4b19      	ldr	r3, [pc, #100]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a42:	4b16      	ldr	r3, [pc, #88]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a44:	4a17      	ldr	r2, [pc, #92]	@ (8000aa4 <MX_ADC1_Init+0xa0>)
 8000a46:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a48:	4b14      	ldr	r3, [pc, #80]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a4e:	4b13      	ldr	r3, [pc, #76]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a54:	4b11      	ldr	r3, [pc, #68]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a62:	480e      	ldr	r0, [pc, #56]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a64:	f001 fbba 	bl	80021dc <HAL_ADC_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a6e:	f000 fdcb 	bl	8001608 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a72:	2304      	movs	r3, #4
 8000a74:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a7e:	463b      	mov	r3, r7
 8000a80:	4619      	mov	r1, r3
 8000a82:	4806      	ldr	r0, [pc, #24]	@ (8000a9c <MX_ADC1_Init+0x98>)
 8000a84:	f001 fbee 	bl	8002264 <HAL_ADC_ConfigChannel>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a8e:	f000 fdbb 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	2000012c 	.word	0x2000012c
 8000aa0:	40012000 	.word	0x40012000
 8000aa4:	0f000001 	.word	0x0f000001

08000aa8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <MX_I2C2_Init+0x50>)
 8000aae:	4a13      	ldr	r2, [pc, #76]	@ (8000afc <MX_I2C2_Init+0x54>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <MX_I2C2_Init+0x50>)
 8000ab4:	4a12      	ldr	r2, [pc, #72]	@ (8000b00 <MX_I2C2_Init+0x58>)
 8000ab6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <MX_I2C2_Init+0x50>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <MX_I2C2_Init+0x50>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <MX_I2C2_Init+0x50>)
 8000ac6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <MX_I2C2_Init+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <MX_I2C2_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad8:	4b07      	ldr	r3, [pc, #28]	@ (8000af8 <MX_I2C2_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <MX_I2C2_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <MX_I2C2_Init+0x50>)
 8000ae6:	f002 f935 	bl	8002d54 <HAL_I2C_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000af0:	f000 fd8a 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000174 	.word	0x20000174
 8000afc:	40005800 	.word	0x40005800
 8000b00:	00061a80 	.word	0x00061a80

08000b04 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b08:	4b17      	ldr	r3, [pc, #92]	@ (8000b68 <MX_SPI2_Init+0x64>)
 8000b0a:	4a18      	ldr	r2, [pc, #96]	@ (8000b6c <MX_SPI2_Init+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b0e:	4b16      	ldr	r3, [pc, #88]	@ (8000b68 <MX_SPI2_Init+0x64>)
 8000b10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b14:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b16:	4b14      	ldr	r3, [pc, #80]	@ (8000b68 <MX_SPI2_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	@ (8000b68 <MX_SPI2_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b22:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <MX_SPI2_Init+0x64>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	@ (8000b68 <MX_SPI2_Init+0x64>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <MX_SPI2_Init+0x64>)
 8000b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b34:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b36:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <MX_SPI2_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b68 <MX_SPI2_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b42:	4b09      	ldr	r3, [pc, #36]	@ (8000b68 <MX_SPI2_Init+0x64>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b48:	4b07      	ldr	r3, [pc, #28]	@ (8000b68 <MX_SPI2_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b4e:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <MX_SPI2_Init+0x64>)
 8000b50:	220a      	movs	r2, #10
 8000b52:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b54:	4804      	ldr	r0, [pc, #16]	@ (8000b68 <MX_SPI2_Init+0x64>)
 8000b56:	f004 f92b 	bl	8004db0 <HAL_SPI_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b60:	f000 fd52 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200001c8 	.word	0x200001c8
 8000b6c:	40003800 	.word	0x40003800

08000b70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08c      	sub	sp, #48	@ 0x30
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	2224      	movs	r2, #36	@ 0x24
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f00b fb14 	bl	800c1ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b8c:	4b22      	ldr	r3, [pc, #136]	@ (8000c18 <MX_TIM1_Init+0xa8>)
 8000b8e:	4a23      	ldr	r2, [pc, #140]	@ (8000c1c <MX_TIM1_Init+0xac>)
 8000b90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b92:	4b21      	ldr	r3, [pc, #132]	@ (8000c18 <MX_TIM1_Init+0xa8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b98:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <MX_TIM1_Init+0xa8>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000c18 <MX_TIM1_Init+0xa8>)
 8000ba0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ba4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <MX_TIM1_Init+0xa8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <MX_TIM1_Init+0xa8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <MX_TIM1_Init+0xa8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	4619      	mov	r1, r3
 8000be2:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <MX_TIM1_Init+0xa8>)
 8000be4:	f004 fad4 	bl	8005190 <HAL_TIM_Encoder_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000bee:	f000 fd0b 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4806      	ldr	r0, [pc, #24]	@ (8000c18 <MX_TIM1_Init+0xa8>)
 8000c00:	f004 ff3e 	bl	8005a80 <HAL_TIMEx_MasterConfigSynchronization>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000c0a:	f000 fcfd 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	3730      	adds	r7, #48	@ 0x30
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20000220 	.word	0x20000220
 8000c1c:	40010000 	.word	0x40010000

08000c20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08c      	sub	sp, #48	@ 0x30
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	2224      	movs	r2, #36	@ 0x24
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f00b fabc 	bl	800c1ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c3c:	4b21      	ldr	r3, [pc, #132]	@ (8000cc4 <MX_TIM2_Init+0xa4>)
 8000c3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c44:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc4 <MX_TIM2_Init+0xa4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc4 <MX_TIM2_Init+0xa4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c50:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc4 <MX_TIM2_Init+0xa4>)
 8000c52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c58:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc4 <MX_TIM2_Init+0xa4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5e:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <MX_TIM2_Init+0xa4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c64:	2303      	movs	r3, #3
 8000c66:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480d      	ldr	r0, [pc, #52]	@ (8000cc4 <MX_TIM2_Init+0xa4>)
 8000c90:	f004 fa7e 	bl	8005190 <HAL_TIM_Encoder_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000c9a:	f000 fcb5 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4806      	ldr	r0, [pc, #24]	@ (8000cc4 <MX_TIM2_Init+0xa4>)
 8000cac:	f004 fee8 	bl	8005a80 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000cb6:	f000 fca7 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	3730      	adds	r7, #48	@ 0x30
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000268 	.word	0x20000268

08000cc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08c      	sub	sp, #48	@ 0x30
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	2224      	movs	r2, #36	@ 0x24
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f00b fa68 	bl	800c1ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ce4:	4b20      	ldr	r3, [pc, #128]	@ (8000d68 <MX_TIM3_Init+0xa0>)
 8000ce6:	4a21      	ldr	r2, [pc, #132]	@ (8000d6c <MX_TIM3_Init+0xa4>)
 8000ce8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cea:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <MX_TIM3_Init+0xa0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d68 <MX_TIM3_Init+0xa0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <MX_TIM3_Init+0xa0>)
 8000cf8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cfc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <MX_TIM3_Init+0xa0>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d04:	4b18      	ldr	r3, [pc, #96]	@ (8000d68 <MX_TIM3_Init+0xa0>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d12:	2301      	movs	r3, #1
 8000d14:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d22:	2301      	movs	r3, #1
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	4619      	mov	r1, r3
 8000d34:	480c      	ldr	r0, [pc, #48]	@ (8000d68 <MX_TIM3_Init+0xa0>)
 8000d36:	f004 fa2b 	bl	8005190 <HAL_TIM_Encoder_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000d40:	f000 fc62 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4805      	ldr	r0, [pc, #20]	@ (8000d68 <MX_TIM3_Init+0xa0>)
 8000d52:	f004 fe95 	bl	8005a80 <HAL_TIMEx_MasterConfigSynchronization>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000d5c:	f000 fc54 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	3730      	adds	r7, #48	@ 0x30
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200002b0 	.word	0x200002b0
 8000d6c:	40000400 	.word	0x40000400

08000d70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	@ 0x30
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	2224      	movs	r2, #36	@ 0x24
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f00b fa14 	bl	800c1ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d8c:	4b20      	ldr	r3, [pc, #128]	@ (8000e10 <MX_TIM4_Init+0xa0>)
 8000d8e:	4a21      	ldr	r2, [pc, #132]	@ (8000e14 <MX_TIM4_Init+0xa4>)
 8000d90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d92:	4b1f      	ldr	r3, [pc, #124]	@ (8000e10 <MX_TIM4_Init+0xa0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d98:	4b1d      	ldr	r3, [pc, #116]	@ (8000e10 <MX_TIM4_Init+0xa0>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e10 <MX_TIM4_Init+0xa0>)
 8000da0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000da4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <MX_TIM4_Init+0xa0>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dac:	4b18      	ldr	r3, [pc, #96]	@ (8000e10 <MX_TIM4_Init+0xa0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000db2:	2303      	movs	r3, #3
 8000db4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000db6:	2300      	movs	r3, #0
 8000db8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <MX_TIM4_Init+0xa0>)
 8000dde:	f004 f9d7 	bl	8005190 <HAL_TIM_Encoder_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000de8:	f000 fc0e 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <MX_TIM4_Init+0xa0>)
 8000dfa:	f004 fe41 	bl	8005a80 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000e04:	f000 fc00 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	3730      	adds	r7, #48	@ 0x30
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200002f8 	.word	0x200002f8
 8000e14:	40000800 	.word	0x40000800

08000e18 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08c      	sub	sp, #48	@ 0x30
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	2224      	movs	r2, #36	@ 0x24
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f00b f9c0 	bl	800c1ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e34:	4b20      	ldr	r3, [pc, #128]	@ (8000eb8 <MX_TIM5_Init+0xa0>)
 8000e36:	4a21      	ldr	r2, [pc, #132]	@ (8000ebc <MX_TIM5_Init+0xa4>)
 8000e38:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb8 <MX_TIM5_Init+0xa0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <MX_TIM5_Init+0xa0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb8 <MX_TIM5_Init+0xa0>)
 8000e48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e4c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <MX_TIM5_Init+0xa0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e54:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <MX_TIM5_Init+0xa0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e62:	2301      	movs	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e72:	2301      	movs	r3, #1
 8000e74:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	4619      	mov	r1, r3
 8000e84:	480c      	ldr	r0, [pc, #48]	@ (8000eb8 <MX_TIM5_Init+0xa0>)
 8000e86:	f004 f983 	bl	8005190 <HAL_TIM_Encoder_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000e90:	f000 fbba 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	@ (8000eb8 <MX_TIM5_Init+0xa0>)
 8000ea2:	f004 fded 	bl	8005a80 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000eac:	f000 fbac 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	3730      	adds	r7, #48	@ 0x30
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000340 	.word	0x20000340
 8000ebc:	40000c00 	.word	0x40000c00

08000ec0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08c      	sub	sp, #48	@ 0x30
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ec6:	f107 030c 	add.w	r3, r7, #12
 8000eca:	2224      	movs	r2, #36	@ 0x24
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f00b f96c 	bl	800c1ac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000edc:	4b22      	ldr	r3, [pc, #136]	@ (8000f68 <MX_TIM8_Init+0xa8>)
 8000ede:	4a23      	ldr	r2, [pc, #140]	@ (8000f6c <MX_TIM8_Init+0xac>)
 8000ee0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000ee2:	4b21      	ldr	r3, [pc, #132]	@ (8000f68 <MX_TIM8_Init+0xa8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f68 <MX_TIM8_Init+0xa8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000eee:	4b1e      	ldr	r3, [pc, #120]	@ (8000f68 <MX_TIM8_Init+0xa8>)
 8000ef0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ef4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <MX_TIM8_Init+0xa8>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <MX_TIM8_Init+0xa8>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f02:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <MX_TIM8_Init+0xa8>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f10:	2301      	movs	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f20:	2301      	movs	r3, #1
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	4619      	mov	r1, r3
 8000f32:	480d      	ldr	r0, [pc, #52]	@ (8000f68 <MX_TIM8_Init+0xa8>)
 8000f34:	f004 f92c 	bl	8005190 <HAL_TIM_Encoder_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8000f3e:	f000 fb63 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4806      	ldr	r0, [pc, #24]	@ (8000f68 <MX_TIM8_Init+0xa8>)
 8000f50:	f004 fd96 	bl	8005a80 <HAL_TIMEx_MasterConfigSynchronization>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8000f5a:	f000 fb55 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	3730      	adds	r7, #48	@ 0x30
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000388 	.word	0x20000388
 8000f6c:	40010400 	.word	0x40010400

08000f70 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]
 8000f84:	615a      	str	r2, [r3, #20]
 8000f86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000f88:	4b1f      	ldr	r3, [pc, #124]	@ (8001008 <MX_TIM9_Init+0x98>)
 8000f8a:	4a20      	ldr	r2, [pc, #128]	@ (800100c <MX_TIM9_Init+0x9c>)
 8000f8c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 2-1;
 8000f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001008 <MX_TIM9_Init+0x98>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f94:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <MX_TIM9_Init+0x98>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4096-1;
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001008 <MX_TIM9_Init+0x98>)
 8000f9c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000fa0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <MX_TIM9_Init+0x98>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa8:	4b17      	ldr	r3, [pc, #92]	@ (8001008 <MX_TIM9_Init+0x98>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000fae:	4816      	ldr	r0, [pc, #88]	@ (8001008 <MX_TIM9_Init+0x98>)
 8000fb0:	f003 ffd6 	bl	8004f60 <HAL_TIM_PWM_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8000fba:	f000 fb25 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fbe:	2360      	movs	r3, #96	@ 0x60
 8000fc0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	480c      	ldr	r0, [pc, #48]	@ (8001008 <MX_TIM9_Init+0x98>)
 8000fd6:	f004 fa0f 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8000fe0:	f000 fb12 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4807      	ldr	r0, [pc, #28]	@ (8001008 <MX_TIM9_Init+0x98>)
 8000fec:	f004 fa04 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8000ff6:	f000 fb07 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000ffa:	4803      	ldr	r0, [pc, #12]	@ (8001008 <MX_TIM9_Init+0x98>)
 8000ffc:	f000 fe54 	bl	8001ca8 <HAL_TIM_MspPostInit>

}
 8001000:	bf00      	nop
 8001002:	3720      	adds	r7, #32
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	200003d0 	.word	0x200003d0
 800100c:	40014000 	.word	0x40014000

08001010 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
 8001024:	615a      	str	r2, [r3, #20]
 8001026:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001028:	4b1e      	ldr	r3, [pc, #120]	@ (80010a4 <MX_TIM10_Init+0x94>)
 800102a:	4a1f      	ldr	r2, [pc, #124]	@ (80010a8 <MX_TIM10_Init+0x98>)
 800102c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 2-1;
 800102e:	4b1d      	ldr	r3, [pc, #116]	@ (80010a4 <MX_TIM10_Init+0x94>)
 8001030:	2201      	movs	r2, #1
 8001032:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001034:	4b1b      	ldr	r3, [pc, #108]	@ (80010a4 <MX_TIM10_Init+0x94>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4096-1;
 800103a:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <MX_TIM10_Init+0x94>)
 800103c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001040:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001042:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <MX_TIM10_Init+0x94>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001048:	4b16      	ldr	r3, [pc, #88]	@ (80010a4 <MX_TIM10_Init+0x94>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800104e:	4815      	ldr	r0, [pc, #84]	@ (80010a4 <MX_TIM10_Init+0x94>)
 8001050:	f003 ff37 	bl	8004ec2 <HAL_TIM_Base_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800105a:	f000 fad5 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800105e:	4811      	ldr	r0, [pc, #68]	@ (80010a4 <MX_TIM10_Init+0x94>)
 8001060:	f003 ff7e 	bl	8004f60 <HAL_TIM_PWM_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800106a:	f000 facd 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800106e:	2360      	movs	r3, #96	@ 0x60
 8001070:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2200      	movs	r2, #0
 8001082:	4619      	mov	r1, r3
 8001084:	4807      	ldr	r0, [pc, #28]	@ (80010a4 <MX_TIM10_Init+0x94>)
 8001086:	f004 f9b7 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001090:	f000 faba 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001094:	4803      	ldr	r0, [pc, #12]	@ (80010a4 <MX_TIM10_Init+0x94>)
 8001096:	f000 fe07 	bl	8001ca8 <HAL_TIM_MspPostInit>

}
 800109a:	bf00      	nop
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000418 	.word	0x20000418
 80010a8:	40014400 	.word	0x40014400

080010ac <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
 80010c0:	615a      	str	r2, [r3, #20]
 80010c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80010c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001140 <MX_TIM11_Init+0x94>)
 80010c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001144 <MX_TIM11_Init+0x98>)
 80010c8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2-1;
 80010ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001140 <MX_TIM11_Init+0x94>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <MX_TIM11_Init+0x94>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 4096-1;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <MX_TIM11_Init+0x94>)
 80010d8:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80010dc:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010de:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <MX_TIM11_Init+0x94>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e4:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <MX_TIM11_Init+0x94>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80010ea:	4815      	ldr	r0, [pc, #84]	@ (8001140 <MX_TIM11_Init+0x94>)
 80010ec:	f003 fee9 	bl	8004ec2 <HAL_TIM_Base_Init>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80010f6:	f000 fa87 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80010fa:	4811      	ldr	r0, [pc, #68]	@ (8001140 <MX_TIM11_Init+0x94>)
 80010fc:	f003 ff30 	bl	8004f60 <HAL_TIM_PWM_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001106:	f000 fa7f 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800110a:	2360      	movs	r3, #96	@ 0x60
 800110c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2200      	movs	r2, #0
 800111e:	4619      	mov	r1, r3
 8001120:	4807      	ldr	r0, [pc, #28]	@ (8001140 <MX_TIM11_Init+0x94>)
 8001122:	f004 f969 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800112c:	f000 fa6c 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001130:	4803      	ldr	r0, [pc, #12]	@ (8001140 <MX_TIM11_Init+0x94>)
 8001132:	f000 fdb9 	bl	8001ca8 <HAL_TIM_MspPostInit>

}
 8001136:	bf00      	nop
 8001138:	3720      	adds	r7, #32
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000460 	.word	0x20000460
 8001144:	40014800 	.word	0x40014800

08001148 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
 800115c:	615a      	str	r2, [r3, #20]
 800115e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001160:	4b1f      	ldr	r3, [pc, #124]	@ (80011e0 <MX_TIM12_Init+0x98>)
 8001162:	4a20      	ldr	r2, [pc, #128]	@ (80011e4 <MX_TIM12_Init+0x9c>)
 8001164:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 2-1;
 8001166:	4b1e      	ldr	r3, [pc, #120]	@ (80011e0 <MX_TIM12_Init+0x98>)
 8001168:	2201      	movs	r2, #1
 800116a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116c:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <MX_TIM12_Init+0x98>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4096-1;
 8001172:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <MX_TIM12_Init+0x98>)
 8001174:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001178:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117a:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <MX_TIM12_Init+0x98>)
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001180:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <MX_TIM12_Init+0x98>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001186:	4816      	ldr	r0, [pc, #88]	@ (80011e0 <MX_TIM12_Init+0x98>)
 8001188:	f003 feea 	bl	8004f60 <HAL_TIM_PWM_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001192:	f000 fa39 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001196:	2360      	movs	r3, #96	@ 0x60
 8001198:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	2200      	movs	r2, #0
 80011aa:	4619      	mov	r1, r3
 80011ac:	480c      	ldr	r0, [pc, #48]	@ (80011e0 <MX_TIM12_Init+0x98>)
 80011ae:	f004 f923 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80011b8:	f000 fa26 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2204      	movs	r2, #4
 80011c0:	4619      	mov	r1, r3
 80011c2:	4807      	ldr	r0, [pc, #28]	@ (80011e0 <MX_TIM12_Init+0x98>)
 80011c4:	f004 f918 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 80011ce:	f000 fa1b 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80011d2:	4803      	ldr	r0, [pc, #12]	@ (80011e0 <MX_TIM12_Init+0x98>)
 80011d4:	f000 fd68 	bl	8001ca8 <HAL_TIM_MspPostInit>

}
 80011d8:	bf00      	nop
 80011da:	3720      	adds	r7, #32
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200004a8 	.word	0x200004a8
 80011e4:	40001800 	.word	0x40001800

080011e8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
 80011fc:	615a      	str	r2, [r3, #20]
 80011fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001200:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <MX_TIM13_Init+0x94>)
 8001202:	4a1f      	ldr	r2, [pc, #124]	@ (8001280 <MX_TIM13_Init+0x98>)
 8001204:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2-1;
 8001206:	4b1d      	ldr	r3, [pc, #116]	@ (800127c <MX_TIM13_Init+0x94>)
 8001208:	2201      	movs	r2, #1
 800120a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120c:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <MX_TIM13_Init+0x94>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 4096-1;
 8001212:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <MX_TIM13_Init+0x94>)
 8001214:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001218:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121a:	4b18      	ldr	r3, [pc, #96]	@ (800127c <MX_TIM13_Init+0x94>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001220:	4b16      	ldr	r3, [pc, #88]	@ (800127c <MX_TIM13_Init+0x94>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001226:	4815      	ldr	r0, [pc, #84]	@ (800127c <MX_TIM13_Init+0x94>)
 8001228:	f003 fe4b 	bl	8004ec2 <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001232:	f000 f9e9 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001236:	4811      	ldr	r0, [pc, #68]	@ (800127c <MX_TIM13_Init+0x94>)
 8001238:	f003 fe92 	bl	8004f60 <HAL_TIM_PWM_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001242:	f000 f9e1 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001246:	2360      	movs	r3, #96	@ 0x60
 8001248:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2200      	movs	r2, #0
 800125a:	4619      	mov	r1, r3
 800125c:	4807      	ldr	r0, [pc, #28]	@ (800127c <MX_TIM13_Init+0x94>)
 800125e:	f004 f8cb 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001268:	f000 f9ce 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800126c:	4803      	ldr	r0, [pc, #12]	@ (800127c <MX_TIM13_Init+0x94>)
 800126e:	f000 fd1b 	bl	8001ca8 <HAL_TIM_MspPostInit>

}
 8001272:	bf00      	nop
 8001274:	3720      	adds	r7, #32
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	200004f0 	.word	0x200004f0
 8001280:	40001c00 	.word	0x40001c00

08001284 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
 8001298:	615a      	str	r2, [r3, #20]
 800129a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800129c:	4b1e      	ldr	r3, [pc, #120]	@ (8001318 <MX_TIM14_Init+0x94>)
 800129e:	4a1f      	ldr	r2, [pc, #124]	@ (800131c <MX_TIM14_Init+0x98>)
 80012a0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 2-1;
 80012a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <MX_TIM14_Init+0x94>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <MX_TIM14_Init+0x94>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4096-1;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001318 <MX_TIM14_Init+0x94>)
 80012b0:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80012b4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b6:	4b18      	ldr	r3, [pc, #96]	@ (8001318 <MX_TIM14_Init+0x94>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012bc:	4b16      	ldr	r3, [pc, #88]	@ (8001318 <MX_TIM14_Init+0x94>)
 80012be:	2200      	movs	r2, #0
 80012c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80012c2:	4815      	ldr	r0, [pc, #84]	@ (8001318 <MX_TIM14_Init+0x94>)
 80012c4:	f003 fdfd 	bl	8004ec2 <HAL_TIM_Base_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80012ce:	f000 f99b 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80012d2:	4811      	ldr	r0, [pc, #68]	@ (8001318 <MX_TIM14_Init+0x94>)
 80012d4:	f003 fe44 	bl	8004f60 <HAL_TIM_PWM_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80012de:	f000 f993 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e2:	2360      	movs	r3, #96	@ 0x60
 80012e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2200      	movs	r2, #0
 80012f6:	4619      	mov	r1, r3
 80012f8:	4807      	ldr	r0, [pc, #28]	@ (8001318 <MX_TIM14_Init+0x94>)
 80012fa:	f004 f87d 	bl	80053f8 <HAL_TIM_PWM_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001304:	f000 f980 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001308:	4803      	ldr	r0, [pc, #12]	@ (8001318 <MX_TIM14_Init+0x94>)
 800130a:	f000 fccd 	bl	8001ca8 <HAL_TIM_MspPostInit>

}
 800130e:	bf00      	nop
 8001310:	3720      	adds	r7, #32
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000538 	.word	0x20000538
 800131c:	40002000 	.word	0x40002000

08001320 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <MX_UART4_Init+0x4c>)
 8001326:	4a12      	ldr	r2, [pc, #72]	@ (8001370 <MX_UART4_Init+0x50>)
 8001328:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <MX_UART4_Init+0x4c>)
 800132c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001330:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001332:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <MX_UART4_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001338:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <MX_UART4_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <MX_UART4_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001344:	4b09      	ldr	r3, [pc, #36]	@ (800136c <MX_UART4_Init+0x4c>)
 8001346:	220c      	movs	r2, #12
 8001348:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134a:	4b08      	ldr	r3, [pc, #32]	@ (800136c <MX_UART4_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <MX_UART4_Init+0x4c>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <MX_UART4_Init+0x4c>)
 8001358:	f004 fc0e 	bl	8005b78 <HAL_UART_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001362:	f000 f951 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000580 	.word	0x20000580
 8001370:	40004c00 	.word	0x40004c00

08001374 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <MX_USART2_UART_Init+0x4c>)
 800137a:	4a12      	ldr	r2, [pc, #72]	@ (80013c4 <MX_USART2_UART_Init+0x50>)
 800137c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <MX_USART2_UART_Init+0x4c>)
 8001380:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <MX_USART2_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <MX_USART2_UART_Init+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001392:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <MX_USART2_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8001398:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <MX_USART2_UART_Init+0x4c>)
 800139a:	2204      	movs	r2, #4
 800139c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <MX_USART2_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <MX_USART2_UART_Init+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013aa:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <MX_USART2_UART_Init+0x4c>)
 80013ac:	f004 fbe4 	bl	8005b78 <HAL_UART_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013b6:	f000 f927 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200005c8 	.word	0x200005c8
 80013c4:	40004400 	.word	0x40004400

080013c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08c      	sub	sp, #48	@ 0x30
 80013cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
 80013e2:	4b54      	ldr	r3, [pc, #336]	@ (8001534 <MX_GPIO_Init+0x16c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	4a53      	ldr	r2, [pc, #332]	@ (8001534 <MX_GPIO_Init+0x16c>)
 80013e8:	f043 0310 	orr.w	r3, r3, #16
 80013ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ee:	4b51      	ldr	r3, [pc, #324]	@ (8001534 <MX_GPIO_Init+0x16c>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	61bb      	str	r3, [r7, #24]
 80013f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001534 <MX_GPIO_Init+0x16c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	4a4c      	ldr	r2, [pc, #304]	@ (8001534 <MX_GPIO_Init+0x16c>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	6313      	str	r3, [r2, #48]	@ 0x30
 800140a:	4b4a      	ldr	r3, [pc, #296]	@ (8001534 <MX_GPIO_Init+0x16c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	4b46      	ldr	r3, [pc, #280]	@ (8001534 <MX_GPIO_Init+0x16c>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a45      	ldr	r2, [pc, #276]	@ (8001534 <MX_GPIO_Init+0x16c>)
 8001420:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b43      	ldr	r3, [pc, #268]	@ (8001534 <MX_GPIO_Init+0x16c>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b3f      	ldr	r3, [pc, #252]	@ (8001534 <MX_GPIO_Init+0x16c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a3e      	ldr	r2, [pc, #248]	@ (8001534 <MX_GPIO_Init+0x16c>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b3c      	ldr	r3, [pc, #240]	@ (8001534 <MX_GPIO_Init+0x16c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b38      	ldr	r3, [pc, #224]	@ (8001534 <MX_GPIO_Init+0x16c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a37      	ldr	r2, [pc, #220]	@ (8001534 <MX_GPIO_Init+0x16c>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b35      	ldr	r3, [pc, #212]	@ (8001534 <MX_GPIO_Init+0x16c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b31      	ldr	r3, [pc, #196]	@ (8001534 <MX_GPIO_Init+0x16c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a30      	ldr	r2, [pc, #192]	@ (8001534 <MX_GPIO_Init+0x16c>)
 8001474:	f043 0308 	orr.w	r3, r3, #8
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b2e      	ldr	r3, [pc, #184]	@ (8001534 <MX_GPIO_Init+0x16c>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CE_1_Pin|CE_2_Pin|GPIO_PIN_7|GPIO_PIN_8
 8001486:	2200      	movs	r2, #0
 8001488:	f24b 518f 	movw	r1, #46479	@ 0xb58f
 800148c:	482a      	ldr	r0, [pc, #168]	@ (8001538 <MX_GPIO_Init+0x170>)
 800148e:	f001 fc47 	bl	8002d20 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|LB_DIGI_R_Pin|GPIO_PIN_13|GPIO_PIN_15
                          |EXTRA2_DIGI_R_Pin|RF_DIGI_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EXTRA1_DIGI_R_Pin|LF_DIGI_R_Pin, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	f242 0120 	movw	r1, #8224	@ 0x2020
 8001498:	4828      	ldr	r0, [pc, #160]	@ (800153c <MX_GPIO_Init+0x174>)
 800149a:	f001 fc41 	bl	8002d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2101      	movs	r1, #1
 80014a2:	4827      	ldr	r0, [pc, #156]	@ (8001540 <MX_GPIO_Init+0x178>)
 80014a4:	f001 fc3c 	bl	8002d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RB_DIGI_R_GPIO_Port, RB_DIGI_R_Pin, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014ae:	4825      	ldr	r0, [pc, #148]	@ (8001544 <MX_GPIO_Init+0x17c>)
 80014b0:	f001 fc36 	bl	8002d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_1_Pin CE_2_Pin PE7 PE8
                           PE10 LB_DIGI_R_Pin PE13 PE15
                           EXTRA2_DIGI_R_Pin RF_DIGI_R_Pin */
  GPIO_InitStruct.Pin = CE_1_Pin|CE_2_Pin|GPIO_PIN_7|GPIO_PIN_8
 80014b4:	f24b 538f 	movw	r3, #46479	@ 0xb58f
 80014b8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|LB_DIGI_R_Pin|GPIO_PIN_13|GPIO_PIN_15
                          |EXTRA2_DIGI_R_Pin|RF_DIGI_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	4619      	mov	r1, r3
 80014cc:	481a      	ldr	r0, [pc, #104]	@ (8001538 <MX_GPIO_Init+0x170>)
 80014ce:	f001 fa8b 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTRA1_DIGI_R_Pin LF_DIGI_R_Pin */
  GPIO_InitStruct.Pin = EXTRA1_DIGI_R_Pin|LF_DIGI_R_Pin;
 80014d2:	f242 0320 	movw	r3, #8224	@ 0x2020
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d8:	2301      	movs	r3, #1
 80014da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4619      	mov	r1, r3
 80014ea:	4814      	ldr	r0, [pc, #80]	@ (800153c <MX_GPIO_Init+0x174>)
 80014ec:	f001 fa7c 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f4:	2301      	movs	r3, #1
 80014f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4619      	mov	r1, r3
 8001506:	480e      	ldr	r0, [pc, #56]	@ (8001540 <MX_GPIO_Init+0x178>)
 8001508:	f001 fa6e 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RB_DIGI_R_Pin */
  GPIO_InitStruct.Pin = RB_DIGI_R_Pin;
 800150c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RB_DIGI_R_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	4619      	mov	r1, r3
 8001524:	4807      	ldr	r0, [pc, #28]	@ (8001544 <MX_GPIO_Init+0x17c>)
 8001526:	f001 fa5f 	bl	80029e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800152a:	bf00      	nop
 800152c:	3730      	adds	r7, #48	@ 0x30
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800
 8001538:	40021000 	.word	0x40021000
 800153c:	40020800 	.word	0x40020800
 8001540:	40020400 	.word	0x40020400
 8001544:	40020c00 	.word	0x40020c00

08001548 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2,(uint8_t *)&Str_PS2, sizeof(Str_PS2));
 8001550:	2212      	movs	r2, #18
 8001552:	4926      	ldr	r1, [pc, #152]	@ (80015ec <HAL_UART_RxCpltCallback+0xa4>)
 8001554:	4826      	ldr	r0, [pc, #152]	@ (80015f0 <HAL_UART_RxCpltCallback+0xa8>)
 8001556:	f004 fb5f 	bl	8005c18 <HAL_UART_Receive_IT>

//	Vx = map(Joy[1], 0.0f, 255.0f, -128.0f, 127.0f);
//	Vy = map(Joy[0], 0.0f, 255.0f, -128.0f, 127.0f);
//	Vz = map(Joy[3], 0.0f, 255.0f, -128.0f, 127.0f);

	Vx = map(Str_PS2.stickValues[1], 0.0f, 255.0f, 2.0f, -2.0f);
 800155a:	4b24      	ldr	r3, [pc, #144]	@ (80015ec <HAL_UART_RxCpltCallback+0xa4>)
 800155c:	7bdb      	ldrb	r3, [r3, #15]
 800155e:	ee07 3a90 	vmov	s15, r3
 8001562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001566:	eeb8 2a00 	vmov.f32	s4, #128	@ 0xc0000000 -2.0
 800156a:	eef0 1a00 	vmov.f32	s3, #0	@ 0x40000000  2.0
 800156e:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 80015f4 <HAL_UART_RxCpltCallback+0xac>
 8001572:	eddf 0a21 	vldr	s1, [pc, #132]	@ 80015f8 <HAL_UART_RxCpltCallback+0xb0>
 8001576:	eeb0 0a67 	vmov.f32	s0, s15
 800157a:	f008 f94b 	bl	8009814 <map>
 800157e:	eef0 7a40 	vmov.f32	s15, s0
 8001582:	4b1e      	ldr	r3, [pc, #120]	@ (80015fc <HAL_UART_RxCpltCallback+0xb4>)
 8001584:	edc3 7a00 	vstr	s15, [r3]
	Vy = map(Str_PS2.stickValues[0], 0.0f, 255.0f, 2.0f, -2.0f);
 8001588:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <HAL_UART_RxCpltCallback+0xa4>)
 800158a:	7b9b      	ldrb	r3, [r3, #14]
 800158c:	ee07 3a90 	vmov	s15, r3
 8001590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001594:	eeb8 2a00 	vmov.f32	s4, #128	@ 0xc0000000 -2.0
 8001598:	eef0 1a00 	vmov.f32	s3, #0	@ 0x40000000  2.0
 800159c:	ed9f 1a15 	vldr	s2, [pc, #84]	@ 80015f4 <HAL_UART_RxCpltCallback+0xac>
 80015a0:	eddf 0a15 	vldr	s1, [pc, #84]	@ 80015f8 <HAL_UART_RxCpltCallback+0xb0>
 80015a4:	eeb0 0a67 	vmov.f32	s0, s15
 80015a8:	f008 f934 	bl	8009814 <map>
 80015ac:	eef0 7a40 	vmov.f32	s15, s0
 80015b0:	4b13      	ldr	r3, [pc, #76]	@ (8001600 <HAL_UART_RxCpltCallback+0xb8>)
 80015b2:	edc3 7a00 	vstr	s15, [r3]
	Vz = map(Str_PS2.stickValues[3], 0.0f, 255.0f, 4.0f, -4.0f);
 80015b6:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <HAL_UART_RxCpltCallback+0xa4>)
 80015b8:	7c5b      	ldrb	r3, [r3, #17]
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015c2:	eeb9 2a00 	vmov.f32	s4, #144	@ 0xc0800000 -4.0
 80015c6:	eef1 1a00 	vmov.f32	s3, #16	@ 0x40800000  4.0
 80015ca:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 80015f4 <HAL_UART_RxCpltCallback+0xac>
 80015ce:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 80015f8 <HAL_UART_RxCpltCallback+0xb0>
 80015d2:	eeb0 0a67 	vmov.f32	s0, s15
 80015d6:	f008 f91d 	bl	8009814 <map>
 80015da:	eef0 7a40 	vmov.f32	s15, s0
 80015de:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <HAL_UART_RxCpltCallback+0xbc>)
 80015e0:	edc3 7a00 	vstr	s15, [r3]
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000638 	.word	0x20000638
 80015f0:	200005c8 	.word	0x200005c8
 80015f4:	437f0000 	.word	0x437f0000
 80015f8:	00000000 	.word	0x00000000
 80015fc:	20000610 	.word	0x20000610
 8001600:	20000614 	.word	0x20000614
 8001604:	20000618 	.word	0x20000618

08001608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800160c:	b672      	cpsid	i
}
 800160e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <Error_Handler+0x8>

08001614 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <HAL_MspInit+0x4c>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001622:	4a0f      	ldr	r2, [pc, #60]	@ (8001660 <HAL_MspInit+0x4c>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001628:	6453      	str	r3, [r2, #68]	@ 0x44
 800162a:	4b0d      	ldr	r3, [pc, #52]	@ (8001660 <HAL_MspInit+0x4c>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	603b      	str	r3, [r7, #0]
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <HAL_MspInit+0x4c>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	4a08      	ldr	r2, [pc, #32]	@ (8001660 <HAL_MspInit+0x4c>)
 8001640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001644:	6413      	str	r3, [r2, #64]	@ 0x40
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <HAL_MspInit+0x4c>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800

08001664 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	@ 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a24      	ldr	r2, [pc, #144]	@ (8001714 <HAL_ADC_MspInit+0xb0>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d141      	bne.n	800170a <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
 800168a:	4b23      	ldr	r3, [pc, #140]	@ (8001718 <HAL_ADC_MspInit+0xb4>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	4a22      	ldr	r2, [pc, #136]	@ (8001718 <HAL_ADC_MspInit+0xb4>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001694:	6453      	str	r3, [r2, #68]	@ 0x44
 8001696:	4b20      	ldr	r3, [pc, #128]	@ (8001718 <HAL_ADC_MspInit+0xb4>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800169e:	613b      	str	r3, [r7, #16]
 80016a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001718 <HAL_ADC_MspInit+0xb4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a1b      	ldr	r2, [pc, #108]	@ (8001718 <HAL_ADC_MspInit+0xb4>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <HAL_ADC_MspInit+0xb4>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	4b15      	ldr	r3, [pc, #84]	@ (8001718 <HAL_ADC_MspInit+0xb4>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	4a14      	ldr	r2, [pc, #80]	@ (8001718 <HAL_ADC_MspInit+0xb4>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ce:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <HAL_ADC_MspInit+0xb4>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016da:	2303      	movs	r3, #3
 80016dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016de:	2303      	movs	r3, #3
 80016e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	480b      	ldr	r0, [pc, #44]	@ (800171c <HAL_ADC_MspInit+0xb8>)
 80016ee:	f001 f97b 	bl	80029e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016f2:	2330      	movs	r3, #48	@ 0x30
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f6:	2303      	movs	r3, #3
 80016f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	4806      	ldr	r0, [pc, #24]	@ (8001720 <HAL_ADC_MspInit+0xbc>)
 8001706:	f001 f96f 	bl	80029e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800170a:	bf00      	nop
 800170c:	3728      	adds	r7, #40	@ 0x28
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40012000 	.word	0x40012000
 8001718:	40023800 	.word	0x40023800
 800171c:	40020800 	.word	0x40020800
 8001720:	40020000 	.word	0x40020000

08001724 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	@ 0x28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a19      	ldr	r2, [pc, #100]	@ (80017a8 <HAL_I2C_MspInit+0x84>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d12c      	bne.n	80017a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	4b18      	ldr	r3, [pc, #96]	@ (80017ac <HAL_I2C_MspInit+0x88>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a17      	ldr	r2, [pc, #92]	@ (80017ac <HAL_I2C_MspInit+0x88>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <HAL_I2C_MspInit+0x88>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001762:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001768:	2312      	movs	r3, #18
 800176a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001774:	2304      	movs	r3, #4
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	480c      	ldr	r0, [pc, #48]	@ (80017b0 <HAL_I2C_MspInit+0x8c>)
 8001780:	f001 f932 	bl	80029e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <HAL_I2C_MspInit+0x88>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178c:	4a07      	ldr	r2, [pc, #28]	@ (80017ac <HAL_I2C_MspInit+0x88>)
 800178e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001792:	6413      	str	r3, [r2, #64]	@ 0x40
 8001794:	4b05      	ldr	r3, [pc, #20]	@ (80017ac <HAL_I2C_MspInit+0x88>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001798:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017a0:	bf00      	nop
 80017a2:	3728      	adds	r7, #40	@ 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40005800 	.word	0x40005800
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020400 	.word	0x40020400

080017b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	@ 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a28      	ldr	r2, [pc, #160]	@ (8001874 <HAL_SPI_MspInit+0xc0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d14a      	bne.n	800186c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	4b27      	ldr	r3, [pc, #156]	@ (8001878 <HAL_SPI_MspInit+0xc4>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017de:	4a26      	ldr	r2, [pc, #152]	@ (8001878 <HAL_SPI_MspInit+0xc4>)
 80017e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017e6:	4b24      	ldr	r3, [pc, #144]	@ (8001878 <HAL_SPI_MspInit+0xc4>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <HAL_SPI_MspInit+0xc4>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001878 <HAL_SPI_MspInit+0xc4>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b1d      	ldr	r3, [pc, #116]	@ (8001878 <HAL_SPI_MspInit+0xc4>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <HAL_SPI_MspInit+0xc4>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4a18      	ldr	r2, [pc, #96]	@ (8001878 <HAL_SPI_MspInit+0xc4>)
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	6313      	str	r3, [r2, #48]	@ 0x30
 800181e:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <HAL_SPI_MspInit+0xc4>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800182a:	230c      	movs	r3, #12
 800182c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001836:	2303      	movs	r3, #3
 8001838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800183a:	2305      	movs	r3, #5
 800183c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	480d      	ldr	r0, [pc, #52]	@ (800187c <HAL_SPI_MspInit+0xc8>)
 8001846:	f001 f8cf 	bl	80029e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800184a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800184e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001858:	2303      	movs	r3, #3
 800185a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800185c:	2305      	movs	r3, #5
 800185e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	4619      	mov	r1, r3
 8001866:	4806      	ldr	r0, [pc, #24]	@ (8001880 <HAL_SPI_MspInit+0xcc>)
 8001868:	f001 f8be 	bl	80029e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800186c:	bf00      	nop
 800186e:	3728      	adds	r7, #40	@ 0x28
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40003800 	.word	0x40003800
 8001878:	40023800 	.word	0x40023800
 800187c:	40020800 	.word	0x40020800
 8001880:	40020400 	.word	0x40020400

08001884 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b094      	sub	sp, #80	@ 0x50
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a8c      	ldr	r2, [pc, #560]	@ (8001ad4 <HAL_TIM_Encoder_MspInit+0x250>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d12d      	bne.n	8001902 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018aa:	4b8b      	ldr	r3, [pc, #556]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ae:	4a8a      	ldr	r2, [pc, #552]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018b6:	4b88      	ldr	r3, [pc, #544]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80018c6:	4b84      	ldr	r3, [pc, #528]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ca:	4a83      	ldr	r2, [pc, #524]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018cc:	f043 0310 	orr.w	r3, r3, #16
 80018d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d2:	4b81      	ldr	r3, [pc, #516]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	637b      	str	r3, [r7, #52]	@ 0x34
 80018dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80018de:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80018e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018e8:	2302      	movs	r3, #2
 80018ea:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ec:	2303      	movs	r3, #3
 80018ee:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018f0:	2301      	movs	r3, #1
 80018f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018f4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80018f8:	4619      	mov	r1, r3
 80018fa:	4878      	ldr	r0, [pc, #480]	@ (8001adc <HAL_TIM_Encoder_MspInit+0x258>)
 80018fc:	f001 f874 	bl	80029e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001900:	e12b      	b.n	8001b5a <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM2)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800190a:	d14b      	bne.n	80019a4 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800190c:	2300      	movs	r3, #0
 800190e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001910:	4b71      	ldr	r3, [pc, #452]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001914:	4a70      	ldr	r2, [pc, #448]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6413      	str	r3, [r2, #64]	@ 0x40
 800191c:	4b6e      	ldr	r3, [pc, #440]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	633b      	str	r3, [r7, #48]	@ 0x30
 8001926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001928:	2300      	movs	r3, #0
 800192a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800192c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001930:	4a69      	ldr	r2, [pc, #420]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6313      	str	r3, [r2, #48]	@ 0x30
 8001938:	4b67      	ldr	r3, [pc, #412]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001948:	4b63      	ldr	r3, [pc, #396]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194c:	4a62      	ldr	r2, [pc, #392]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	6313      	str	r3, [r2, #48]	@ 0x30
 8001954:	4b60      	ldr	r3, [pc, #384]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800195e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = EN_X_A_Pin;
 8001960:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001964:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	2302      	movs	r3, #2
 8001968:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196e:	2300      	movs	r3, #0
 8001970:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001972:	2301      	movs	r3, #1
 8001974:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(EN_X_A_GPIO_Port, &GPIO_InitStruct);
 8001976:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800197a:	4619      	mov	r1, r3
 800197c:	4858      	ldr	r0, [pc, #352]	@ (8001ae0 <HAL_TIM_Encoder_MspInit+0x25c>)
 800197e:	f001 f833 	bl	80029e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EN_X_B_Pin;
 8001982:	2308      	movs	r3, #8
 8001984:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001992:	2301      	movs	r3, #1
 8001994:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(EN_X_B_GPIO_Port, &GPIO_InitStruct);
 8001996:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800199a:	4619      	mov	r1, r3
 800199c:	4851      	ldr	r0, [pc, #324]	@ (8001ae4 <HAL_TIM_Encoder_MspInit+0x260>)
 800199e:	f001 f823 	bl	80029e8 <HAL_GPIO_Init>
}
 80019a2:	e0da      	b.n	8001b5a <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM3)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a4f      	ldr	r2, [pc, #316]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x264>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d12c      	bne.n	8001a08 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019b2:	4b49      	ldr	r3, [pc, #292]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	4a48      	ldr	r2, [pc, #288]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019b8:	f043 0302 	orr.w	r3, r3, #2
 80019bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019be:	4b46      	ldr	r3, [pc, #280]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80019c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
 80019ce:	4b42      	ldr	r3, [pc, #264]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	4a41      	ldr	r2, [pc, #260]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019da:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	623b      	str	r3, [r7, #32]
 80019e4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = EN_Y_A_Pin|EN_Y_B_Pin;
 80019e6:	2330      	movs	r3, #48	@ 0x30
 80019e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019ee:	2302      	movs	r3, #2
 80019f0:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	2300      	movs	r3, #0
 80019f4:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019f6:	2302      	movs	r3, #2
 80019f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80019fe:	4619      	mov	r1, r3
 8001a00:	4838      	ldr	r0, [pc, #224]	@ (8001ae4 <HAL_TIM_Encoder_MspInit+0x260>)
 8001a02:	f000 fff1 	bl	80029e8 <HAL_GPIO_Init>
}
 8001a06:	e0a8      	b.n	8001b5a <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM4)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a37      	ldr	r2, [pc, #220]	@ (8001aec <HAL_TIM_Encoder_MspInit+0x268>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d12d      	bne.n	8001a6e <HAL_TIM_Encoder_MspInit+0x1ea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	61fb      	str	r3, [r7, #28]
 8001a16:	4b30      	ldr	r3, [pc, #192]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a22:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	61fb      	str	r3, [r7, #28]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61bb      	str	r3, [r7, #24]
 8001a32:	4b29      	ldr	r3, [pc, #164]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	4a28      	ldr	r2, [pc, #160]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a38:	f043 0308 	orr.w	r3, r3, #8
 8001a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3e:	4b26      	ldr	r3, [pc, #152]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	61bb      	str	r3, [r7, #24]
 8001a48:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a4a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a60:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001a64:	4619      	mov	r1, r3
 8001a66:	4822      	ldr	r0, [pc, #136]	@ (8001af0 <HAL_TIM_Encoder_MspInit+0x26c>)
 8001a68:	f000 ffbe 	bl	80029e8 <HAL_GPIO_Init>
}
 8001a6c:	e075      	b.n	8001b5a <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM5)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a20      	ldr	r2, [pc, #128]	@ (8001af4 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d13f      	bne.n	8001af8 <HAL_TIM_Encoder_MspInit+0x274>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	4b16      	ldr	r3, [pc, #88]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	4a15      	ldr	r2, [pc, #84]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a82:	f043 0308 	orr.w	r3, r3, #8
 8001a86:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a88:	4b13      	ldr	r3, [pc, #76]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9c:	4a0e      	ldr	r2, [pc, #56]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001abc:	2303      	movs	r3, #3
 8001abe:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4805      	ldr	r0, [pc, #20]	@ (8001ae0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001acc:	f000 ff8c 	bl	80029e8 <HAL_GPIO_Init>
}
 8001ad0:	e043      	b.n	8001b5a <HAL_TIM_Encoder_MspInit+0x2d6>
 8001ad2:	bf00      	nop
 8001ad4:	40010000 	.word	0x40010000
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40020000 	.word	0x40020000
 8001ae4:	40020400 	.word	0x40020400
 8001ae8:	40000400 	.word	0x40000400
 8001aec:	40000800 	.word	0x40000800
 8001af0:	40020c00 	.word	0x40020c00
 8001af4:	40000c00 	.word	0x40000c00
  else if(htim_encoder->Instance==TIM8)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a19      	ldr	r2, [pc, #100]	@ (8001b64 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d12b      	bne.n	8001b5a <HAL_TIM_Encoder_MspInit+0x2d6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b18      	ldr	r3, [pc, #96]	@ (8001b68 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0a:	4a17      	ldr	r2, [pc, #92]	@ (8001b68 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b12:	4b15      	ldr	r3, [pc, #84]	@ (8001b68 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	4a10      	ldr	r2, [pc, #64]	@ (8001b68 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b68 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b3a:	23c0      	movs	r3, #192	@ 0xc0
 8001b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b42:	2302      	movs	r3, #2
 8001b44:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b52:	4619      	mov	r1, r3
 8001b54:	4805      	ldr	r0, [pc, #20]	@ (8001b6c <HAL_TIM_Encoder_MspInit+0x2e8>)
 8001b56:	f000 ff47 	bl	80029e8 <HAL_GPIO_Init>
}
 8001b5a:	bf00      	nop
 8001b5c:	3750      	adds	r7, #80	@ 0x50
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40010400 	.word	0x40010400
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40020800 	.word	0x40020800

08001b70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a15      	ldr	r2, [pc, #84]	@ (8001bd4 <HAL_TIM_PWM_MspInit+0x64>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d10e      	bne.n	8001ba0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <HAL_TIM_PWM_MspInit+0x68>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	4a13      	ldr	r2, [pc, #76]	@ (8001bd8 <HAL_TIM_PWM_MspInit+0x68>)
 8001b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b92:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <HAL_TIM_PWM_MspInit+0x68>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001b9e:	e012      	b.n	8001bc6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bdc <HAL_TIM_PWM_MspInit+0x6c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d10d      	bne.n	8001bc6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	4b0a      	ldr	r3, [pc, #40]	@ (8001bd8 <HAL_TIM_PWM_MspInit+0x68>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	4a09      	ldr	r2, [pc, #36]	@ (8001bd8 <HAL_TIM_PWM_MspInit+0x68>)
 8001bb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bba:	4b07      	ldr	r3, [pc, #28]	@ (8001bd8 <HAL_TIM_PWM_MspInit+0x68>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
}
 8001bc6:	bf00      	nop
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40014000 	.word	0x40014000
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40001800 	.word	0x40001800

08001be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a29      	ldr	r2, [pc, #164]	@ (8001c94 <HAL_TIM_Base_MspInit+0xb4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d10e      	bne.n	8001c10 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	4b28      	ldr	r3, [pc, #160]	@ (8001c98 <HAL_TIM_Base_MspInit+0xb8>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfa:	4a27      	ldr	r2, [pc, #156]	@ (8001c98 <HAL_TIM_Base_MspInit+0xb8>)
 8001bfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c02:	4b25      	ldr	r3, [pc, #148]	@ (8001c98 <HAL_TIM_Base_MspInit+0xb8>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001c0e:	e03a      	b.n	8001c86 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a21      	ldr	r2, [pc, #132]	@ (8001c9c <HAL_TIM_Base_MspInit+0xbc>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d10e      	bne.n	8001c38 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001c98 <HAL_TIM_Base_MspInit+0xb8>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c22:	4a1d      	ldr	r2, [pc, #116]	@ (8001c98 <HAL_TIM_Base_MspInit+0xb8>)
 8001c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001c98 <HAL_TIM_Base_MspInit+0xb8>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]
}
 8001c36:	e026      	b.n	8001c86 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM13)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a18      	ldr	r2, [pc, #96]	@ (8001ca0 <HAL_TIM_Base_MspInit+0xc0>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d10e      	bne.n	8001c60 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b14      	ldr	r3, [pc, #80]	@ (8001c98 <HAL_TIM_Base_MspInit+0xb8>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	4a13      	ldr	r2, [pc, #76]	@ (8001c98 <HAL_TIM_Base_MspInit+0xb8>)
 8001c4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c52:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <HAL_TIM_Base_MspInit+0xb8>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
}
 8001c5e:	e012      	b.n	8001c86 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM14)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0f      	ldr	r2, [pc, #60]	@ (8001ca4 <HAL_TIM_Base_MspInit+0xc4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d10d      	bne.n	8001c86 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c98 <HAL_TIM_Base_MspInit+0xb8>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	4a09      	ldr	r2, [pc, #36]	@ (8001c98 <HAL_TIM_Base_MspInit+0xb8>)
 8001c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c7a:	4b07      	ldr	r3, [pc, #28]	@ (8001c98 <HAL_TIM_Base_MspInit+0xb8>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
}
 8001c86:	bf00      	nop
 8001c88:	371c      	adds	r7, #28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40014400 	.word	0x40014400
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40014800 	.word	0x40014800
 8001ca0:	40001c00 	.word	0x40001c00
 8001ca4:	40002000 	.word	0x40002000

08001ca8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08e      	sub	sp, #56	@ 0x38
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a6d      	ldr	r2, [pc, #436]	@ (8001e7c <HAL_TIM_MspPostInit+0x1d4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d11e      	bne.n	8001d08 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
 8001cce:	4b6c      	ldr	r3, [pc, #432]	@ (8001e80 <HAL_TIM_MspPostInit+0x1d8>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	4a6b      	ldr	r2, [pc, #428]	@ (8001e80 <HAL_TIM_MspPostInit+0x1d8>)
 8001cd4:	f043 0310 	orr.w	r3, r3, #16
 8001cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cda:	4b69      	ldr	r3, [pc, #420]	@ (8001e80 <HAL_TIM_MspPostInit+0x1d8>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	f003 0310 	and.w	r3, r3, #16
 8001ce2:	623b      	str	r3, [r7, #32]
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = EXTRA1_PWM_L_Pin|SERVO_1_Pin;
 8001ce6:	2360      	movs	r3, #96	@ 0x60
 8001ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4860      	ldr	r0, [pc, #384]	@ (8001e84 <HAL_TIM_MspPostInit+0x1dc>)
 8001d02:	f000 fe71 	bl	80029e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001d06:	e0b5      	b.n	8001e74 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM10)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a5e      	ldr	r2, [pc, #376]	@ (8001e88 <HAL_TIM_MspPostInit+0x1e0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d11f      	bne.n	8001d52 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	4b5a      	ldr	r3, [pc, #360]	@ (8001e80 <HAL_TIM_MspPostInit+0x1d8>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1a:	4a59      	ldr	r2, [pc, #356]	@ (8001e80 <HAL_TIM_MspPostInit+0x1d8>)
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d22:	4b57      	ldr	r3, [pc, #348]	@ (8001e80 <HAL_TIM_MspPostInit+0x1d8>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	61fb      	str	r3, [r7, #28]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = EXTRA2_PWM_L_Pin;
 8001d2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001d40:	2303      	movs	r3, #3
 8001d42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(EXTRA2_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4850      	ldr	r0, [pc, #320]	@ (8001e8c <HAL_TIM_MspPostInit+0x1e4>)
 8001d4c:	f000 fe4c 	bl	80029e8 <HAL_GPIO_Init>
}
 8001d50:	e090      	b.n	8001e74 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM11)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a4e      	ldr	r2, [pc, #312]	@ (8001e90 <HAL_TIM_MspPostInit+0x1e8>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d11f      	bne.n	8001d9c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61bb      	str	r3, [r7, #24]
 8001d60:	4b47      	ldr	r3, [pc, #284]	@ (8001e80 <HAL_TIM_MspPostInit+0x1d8>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d64:	4a46      	ldr	r2, [pc, #280]	@ (8001e80 <HAL_TIM_MspPostInit+0x1d8>)
 8001d66:	f043 0302 	orr.w	r3, r3, #2
 8001d6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6c:	4b44      	ldr	r3, [pc, #272]	@ (8001e80 <HAL_TIM_MspPostInit+0x1d8>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RF_PWM_L_Pin;
 8001d78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d86:	2300      	movs	r3, #0
 8001d88:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RF_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001d8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d92:	4619      	mov	r1, r3
 8001d94:	483d      	ldr	r0, [pc, #244]	@ (8001e8c <HAL_TIM_MspPostInit+0x1e4>)
 8001d96:	f000 fe27 	bl	80029e8 <HAL_GPIO_Init>
}
 8001d9a:	e06b      	b.n	8001e74 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM12)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a3c      	ldr	r2, [pc, #240]	@ (8001e94 <HAL_TIM_MspPostInit+0x1ec>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d11f      	bne.n	8001de6 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	4b35      	ldr	r3, [pc, #212]	@ (8001e80 <HAL_TIM_MspPostInit+0x1d8>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	4a34      	ldr	r2, [pc, #208]	@ (8001e80 <HAL_TIM_MspPostInit+0x1d8>)
 8001db0:	f043 0302 	orr.w	r3, r3, #2
 8001db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db6:	4b32      	ldr	r3, [pc, #200]	@ (8001e80 <HAL_TIM_MspPostInit+0x1d8>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LB_PWM_L_Pin|RB_PWM_L_Pin;
 8001dc2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001dd4:	2309      	movs	r3, #9
 8001dd6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ddc:	4619      	mov	r1, r3
 8001dde:	482b      	ldr	r0, [pc, #172]	@ (8001e8c <HAL_TIM_MspPostInit+0x1e4>)
 8001de0:	f000 fe02 	bl	80029e8 <HAL_GPIO_Init>
}
 8001de4:	e046      	b.n	8001e74 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM13)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a2b      	ldr	r2, [pc, #172]	@ (8001e98 <HAL_TIM_MspPostInit+0x1f0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d11e      	bne.n	8001e2e <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df0:	2300      	movs	r3, #0
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	4b22      	ldr	r3, [pc, #136]	@ (8001e80 <HAL_TIM_MspPostInit+0x1d8>)
 8001df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df8:	4a21      	ldr	r2, [pc, #132]	@ (8001e80 <HAL_TIM_MspPostInit+0x1d8>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e00:	4b1f      	ldr	r3, [pc, #124]	@ (8001e80 <HAL_TIM_MspPostInit+0x1d8>)
 8001e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO_2_Pin;
 8001e0c:	2340      	movs	r3, #64	@ 0x40
 8001e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001e1c:	2309      	movs	r3, #9
 8001e1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SERVO_2_GPIO_Port, &GPIO_InitStruct);
 8001e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e24:	4619      	mov	r1, r3
 8001e26:	481d      	ldr	r0, [pc, #116]	@ (8001e9c <HAL_TIM_MspPostInit+0x1f4>)
 8001e28:	f000 fdde 	bl	80029e8 <HAL_GPIO_Init>
}
 8001e2c:	e022      	b.n	8001e74 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM14)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea0 <HAL_TIM_MspPostInit+0x1f8>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d11d      	bne.n	8001e74 <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	4b10      	ldr	r3, [pc, #64]	@ (8001e80 <HAL_TIM_MspPostInit+0x1d8>)
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e40:	4a0f      	ldr	r2, [pc, #60]	@ (8001e80 <HAL_TIM_MspPostInit+0x1d8>)
 8001e42:	f043 0301 	orr.w	r3, r3, #1
 8001e46:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e48:	4b0d      	ldr	r3, [pc, #52]	@ (8001e80 <HAL_TIM_MspPostInit+0x1d8>)
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LF_PWM_L_Pin;
 8001e54:	2380      	movs	r3, #128	@ 0x80
 8001e56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001e64:	2309      	movs	r3, #9
 8001e66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LF_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001e68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	480b      	ldr	r0, [pc, #44]	@ (8001e9c <HAL_TIM_MspPostInit+0x1f4>)
 8001e70:	f000 fdba 	bl	80029e8 <HAL_GPIO_Init>
}
 8001e74:	bf00      	nop
 8001e76:	3738      	adds	r7, #56	@ 0x38
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40014000 	.word	0x40014000
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40014400 	.word	0x40014400
 8001e8c:	40020400 	.word	0x40020400
 8001e90:	40014800 	.word	0x40014800
 8001e94:	40001800 	.word	0x40001800
 8001e98:	40001c00 	.word	0x40001c00
 8001e9c:	40020000 	.word	0x40020000
 8001ea0:	40002000 	.word	0x40002000

08001ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08c      	sub	sp, #48	@ 0x30
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 031c 	add.w	r3, r7, #28
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a36      	ldr	r2, [pc, #216]	@ (8001f9c <HAL_UART_MspInit+0xf8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d12d      	bne.n	8001f22 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61bb      	str	r3, [r7, #24]
 8001eca:	4b35      	ldr	r3, [pc, #212]	@ (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	4a34      	ldr	r2, [pc, #208]	@ (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001ed0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed6:	4b32      	ldr	r3, [pc, #200]	@ (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ede:	61bb      	str	r3, [r7, #24]
 8001ee0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
 8001ee6:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	4a2d      	ldr	r2, [pc, #180]	@ (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef2:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001efe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f10:	2308      	movs	r3, #8
 8001f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f14:	f107 031c 	add.w	r3, r7, #28
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4822      	ldr	r0, [pc, #136]	@ (8001fa4 <HAL_UART_MspInit+0x100>)
 8001f1c:	f000 fd64 	bl	80029e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f20:	e038      	b.n	8001f94 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a20      	ldr	r2, [pc, #128]	@ (8001fa8 <HAL_UART_MspInit+0x104>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d133      	bne.n	8001f94 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f34:	4a1a      	ldr	r2, [pc, #104]	@ (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001f36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3c:	4b18      	ldr	r3, [pc, #96]	@ (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	4b14      	ldr	r3, [pc, #80]	@ (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f50:	4a13      	ldr	r2, [pc, #76]	@ (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f58:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <HAL_UART_MspInit+0xfc>)
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f64:	230c      	movs	r3, #12
 8001f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f70:	2303      	movs	r3, #3
 8001f72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f74:	2307      	movs	r3, #7
 8001f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f78:	f107 031c 	add.w	r3, r7, #28
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	480b      	ldr	r0, [pc, #44]	@ (8001fac <HAL_UART_MspInit+0x108>)
 8001f80:	f000 fd32 	bl	80029e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f84:	2200      	movs	r2, #0
 8001f86:	2100      	movs	r1, #0
 8001f88:	2026      	movs	r0, #38	@ 0x26
 8001f8a:	f000 fc64 	bl	8002856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f8e:	2026      	movs	r0, #38	@ 0x26
 8001f90:	f000 fc7d 	bl	800288e <HAL_NVIC_EnableIRQ>
}
 8001f94:	bf00      	nop
 8001f96:	3730      	adds	r7, #48	@ 0x30
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40004c00 	.word	0x40004c00
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020800 	.word	0x40020800
 8001fa8:	40004400 	.word	0x40004400
 8001fac:	40020000 	.word	0x40020000

08001fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <NMI_Handler+0x4>

08001fb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <HardFault_Handler+0x4>

08001fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <MemManage_Handler+0x4>

08001fc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fcc:	bf00      	nop
 8001fce:	e7fd      	b.n	8001fcc <BusFault_Handler+0x4>

08001fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <UsageFault_Handler+0x4>

08001fd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002006:	f000 f8a5 	bl	8002154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002014:	4802      	ldr	r0, [pc, #8]	@ (8002020 <USART2_IRQHandler+0x10>)
 8002016:	f003 fe25 	bl	8005c64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	200005c8 	.word	0x200005c8

08002024 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002028:	4802      	ldr	r0, [pc, #8]	@ (8002034 <OTG_FS_IRQHandler+0x10>)
 800202a:	f001 f91b 	bl	8003264 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20001d24 	.word	0x20001d24

08002038 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800203c:	4b06      	ldr	r3, [pc, #24]	@ (8002058 <SystemInit+0x20>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002042:	4a05      	ldr	r2, [pc, #20]	@ (8002058 <SystemInit+0x20>)
 8002044:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002048:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <Reset_Handler>:
 800205c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002094 <LoopFillZerobss+0xe>
 8002060:	f7ff ffea 	bl	8002038 <SystemInit>
 8002064:	480c      	ldr	r0, [pc, #48]	@ (8002098 <LoopFillZerobss+0x12>)
 8002066:	490d      	ldr	r1, [pc, #52]	@ (800209c <LoopFillZerobss+0x16>)
 8002068:	4a0d      	ldr	r2, [pc, #52]	@ (80020a0 <LoopFillZerobss+0x1a>)
 800206a:	2300      	movs	r3, #0
 800206c:	e002      	b.n	8002074 <LoopCopyDataInit>

0800206e <CopyDataInit>:
 800206e:	58d4      	ldr	r4, [r2, r3]
 8002070:	50c4      	str	r4, [r0, r3]
 8002072:	3304      	adds	r3, #4

08002074 <LoopCopyDataInit>:
 8002074:	18c4      	adds	r4, r0, r3
 8002076:	428c      	cmp	r4, r1
 8002078:	d3f9      	bcc.n	800206e <CopyDataInit>
 800207a:	4a0a      	ldr	r2, [pc, #40]	@ (80020a4 <LoopFillZerobss+0x1e>)
 800207c:	4c0a      	ldr	r4, [pc, #40]	@ (80020a8 <LoopFillZerobss+0x22>)
 800207e:	2300      	movs	r3, #0
 8002080:	e001      	b.n	8002086 <LoopFillZerobss>

08002082 <FillZerobss>:
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	3204      	adds	r2, #4

08002086 <LoopFillZerobss>:
 8002086:	42a2      	cmp	r2, r4
 8002088:	d3fb      	bcc.n	8002082 <FillZerobss>
 800208a:	f00a f897 	bl	800c1bc <__libc_init_array>
 800208e:	f7fe fa13 	bl	80004b8 <main>
 8002092:	4770      	bx	lr
 8002094:	20020000 	.word	0x20020000
 8002098:	20000000 	.word	0x20000000
 800209c:	20000110 	.word	0x20000110
 80020a0:	0800c2e8 	.word	0x0800c2e8
 80020a4:	20000110 	.word	0x20000110
 80020a8:	20002428 	.word	0x20002428

080020ac <ADC_IRQHandler>:
 80020ac:	e7fe      	b.n	80020ac <ADC_IRQHandler>
	...

080020b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020b4:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <HAL_Init+0x40>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0d      	ldr	r2, [pc, #52]	@ (80020f0 <HAL_Init+0x40>)
 80020ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020c0:	4b0b      	ldr	r3, [pc, #44]	@ (80020f0 <HAL_Init+0x40>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0a      	ldr	r2, [pc, #40]	@ (80020f0 <HAL_Init+0x40>)
 80020c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020cc:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <HAL_Init+0x40>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a07      	ldr	r2, [pc, #28]	@ (80020f0 <HAL_Init+0x40>)
 80020d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d8:	2003      	movs	r0, #3
 80020da:	f000 fbb1 	bl	8002840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020de:	200f      	movs	r0, #15
 80020e0:	f000 f808 	bl	80020f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e4:	f7ff fa96 	bl	8001614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40023c00 	.word	0x40023c00

080020f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020fc:	4b12      	ldr	r3, [pc, #72]	@ (8002148 <HAL_InitTick+0x54>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b12      	ldr	r3, [pc, #72]	@ (800214c <HAL_InitTick+0x58>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800210a:	fbb3 f3f1 	udiv	r3, r3, r1
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fbc9 	bl	80028aa <HAL_SYSTICK_Config>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e00e      	b.n	8002140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b0f      	cmp	r3, #15
 8002126:	d80a      	bhi.n	800213e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002128:	2200      	movs	r2, #0
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	f04f 30ff 	mov.w	r0, #4294967295
 8002130:	f000 fb91 	bl	8002856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002134:	4a06      	ldr	r2, [pc, #24]	@ (8002150 <HAL_InitTick+0x5c>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	e000      	b.n	8002140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	2000000c 	.word	0x2000000c
 800214c:	20000014 	.word	0x20000014
 8002150:	20000010 	.word	0x20000010

08002154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <HAL_IncTick+0x20>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <HAL_IncTick+0x24>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4413      	add	r3, r2
 8002164:	4a04      	ldr	r2, [pc, #16]	@ (8002178 <HAL_IncTick+0x24>)
 8002166:	6013      	str	r3, [r2, #0]
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000014 	.word	0x20000014
 8002178:	20000650 	.word	0x20000650

0800217c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return uwTick;
 8002180:	4b03      	ldr	r3, [pc, #12]	@ (8002190 <HAL_GetTick+0x14>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000650 	.word	0x20000650

08002194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800219c:	f7ff ffee 	bl	800217c <HAL_GetTick>
 80021a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ac:	d005      	beq.n	80021ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ae:	4b0a      	ldr	r3, [pc, #40]	@ (80021d8 <HAL_Delay+0x44>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4413      	add	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021ba:	bf00      	nop
 80021bc:	f7ff ffde 	bl	800217c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d8f7      	bhi.n	80021bc <HAL_Delay+0x28>
  {
  }
}
 80021cc:	bf00      	nop
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000014 	.word	0x20000014

080021dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e033      	b.n	800225a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff fa32 	bl	8001664 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	2b00      	cmp	r3, #0
 8002218:	d118      	bne.n	800224c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002222:	f023 0302 	bic.w	r3, r3, #2
 8002226:	f043 0202 	orr.w	r2, r3, #2
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f93a 	bl	80024a8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	f023 0303 	bic.w	r3, r3, #3
 8002242:	f043 0201 	orr.w	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	641a      	str	r2, [r3, #64]	@ 0x40
 800224a:	e001      	b.n	8002250 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002258:	7bfb      	ldrb	r3, [r7, #15]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x1c>
 800227c:	2302      	movs	r3, #2
 800227e:	e105      	b.n	800248c <HAL_ADC_ConfigChannel+0x228>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b09      	cmp	r3, #9
 800228e:	d925      	bls.n	80022dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68d9      	ldr	r1, [r3, #12]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	b29b      	uxth	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	4613      	mov	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	3b1e      	subs	r3, #30
 80022a6:	2207      	movs	r2, #7
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43da      	mvns	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	400a      	ands	r2, r1
 80022b4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68d9      	ldr	r1, [r3, #12]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	4603      	mov	r3, r0
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	4403      	add	r3, r0
 80022ce:	3b1e      	subs	r3, #30
 80022d0:	409a      	lsls	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	e022      	b.n	8002322 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6919      	ldr	r1, [r3, #16]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	461a      	mov	r2, r3
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	2207      	movs	r2, #7
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43da      	mvns	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	400a      	ands	r2, r1
 80022fe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6919      	ldr	r1, [r3, #16]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	b29b      	uxth	r3, r3
 8002310:	4618      	mov	r0, r3
 8002312:	4603      	mov	r3, r0
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	4403      	add	r3, r0
 8002318:	409a      	lsls	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b06      	cmp	r3, #6
 8002328:	d824      	bhi.n	8002374 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	3b05      	subs	r3, #5
 800233c:	221f      	movs	r2, #31
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	400a      	ands	r2, r1
 800234a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	4618      	mov	r0, r3
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	3b05      	subs	r3, #5
 8002366:	fa00 f203 	lsl.w	r2, r0, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	635a      	str	r2, [r3, #52]	@ 0x34
 8002372:	e04c      	b.n	800240e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b0c      	cmp	r3, #12
 800237a:	d824      	bhi.n	80023c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	4413      	add	r3, r2
 800238c:	3b23      	subs	r3, #35	@ 0x23
 800238e:	221f      	movs	r2, #31
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43da      	mvns	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	400a      	ands	r2, r1
 800239c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	4618      	mov	r0, r3
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	3b23      	subs	r3, #35	@ 0x23
 80023b8:	fa00 f203 	lsl.w	r2, r0, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80023c4:	e023      	b.n	800240e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	3b41      	subs	r3, #65	@ 0x41
 80023d8:	221f      	movs	r2, #31
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43da      	mvns	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	400a      	ands	r2, r1
 80023e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	4618      	mov	r0, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	3b41      	subs	r3, #65	@ 0x41
 8002402:	fa00 f203 	lsl.w	r2, r0, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	430a      	orrs	r2, r1
 800240c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800240e:	4b22      	ldr	r3, [pc, #136]	@ (8002498 <HAL_ADC_ConfigChannel+0x234>)
 8002410:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a21      	ldr	r2, [pc, #132]	@ (800249c <HAL_ADC_ConfigChannel+0x238>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d109      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x1cc>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b12      	cmp	r3, #18
 8002422:	d105      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a19      	ldr	r2, [pc, #100]	@ (800249c <HAL_ADC_ConfigChannel+0x238>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d123      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x21e>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2b10      	cmp	r3, #16
 8002440:	d003      	beq.n	800244a <HAL_ADC_ConfigChannel+0x1e6>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2b11      	cmp	r3, #17
 8002448:	d11b      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b10      	cmp	r3, #16
 800245c:	d111      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800245e:	4b10      	ldr	r3, [pc, #64]	@ (80024a0 <HAL_ADC_ConfigChannel+0x23c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a10      	ldr	r2, [pc, #64]	@ (80024a4 <HAL_ADC_ConfigChannel+0x240>)
 8002464:	fba2 2303 	umull	r2, r3, r2, r3
 8002468:	0c9a      	lsrs	r2, r3, #18
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002474:	e002      	b.n	800247c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	3b01      	subs	r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f9      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	40012300 	.word	0x40012300
 800249c:	40012000 	.word	0x40012000
 80024a0:	2000000c 	.word	0x2000000c
 80024a4:	431bde83 	.word	0x431bde83

080024a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024b0:	4b79      	ldr	r3, [pc, #484]	@ (8002698 <ADC_Init+0x1f0>)
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	431a      	orrs	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6859      	ldr	r1, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	021a      	lsls	r2, r3, #8
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002500:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6859      	ldr	r1, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002522:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6899      	ldr	r1, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253a:	4a58      	ldr	r2, [pc, #352]	@ (800269c <ADC_Init+0x1f4>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d022      	beq.n	8002586 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800254e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6899      	ldr	r1, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689a      	ldr	r2, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002570:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6899      	ldr	r1, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	e00f      	b.n	80025a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002594:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0202 	bic.w	r2, r2, #2
 80025b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6899      	ldr	r1, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	7e1b      	ldrb	r3, [r3, #24]
 80025c0:	005a      	lsls	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01b      	beq.n	800260c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025e2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80025f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6859      	ldr	r1, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	3b01      	subs	r3, #1
 8002600:	035a      	lsls	r2, r3, #13
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	e007      	b.n	800261c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800261a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800262a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	3b01      	subs	r3, #1
 8002638:	051a      	lsls	r2, r3, #20
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	430a      	orrs	r2, r1
 8002640:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002650:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6899      	ldr	r1, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800265e:	025a      	lsls	r2, r3, #9
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002676:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6899      	ldr	r1, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	029a      	lsls	r2, r3, #10
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	609a      	str	r2, [r3, #8]
}
 800268c:	bf00      	nop
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	40012300 	.word	0x40012300
 800269c:	0f000001 	.word	0x0f000001

080026a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b0:	4b0c      	ldr	r3, [pc, #48]	@ (80026e4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026bc:	4013      	ands	r3, r2
 80026be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026d2:	4a04      	ldr	r2, [pc, #16]	@ (80026e4 <__NVIC_SetPriorityGrouping+0x44>)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	60d3      	str	r3, [r2, #12]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026ec:	4b04      	ldr	r3, [pc, #16]	@ (8002700 <__NVIC_GetPriorityGrouping+0x18>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	f003 0307 	and.w	r3, r3, #7
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002712:	2b00      	cmp	r3, #0
 8002714:	db0b      	blt.n	800272e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	f003 021f 	and.w	r2, r3, #31
 800271c:	4907      	ldr	r1, [pc, #28]	@ (800273c <__NVIC_EnableIRQ+0x38>)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	2001      	movs	r0, #1
 8002726:	fa00 f202 	lsl.w	r2, r0, r2
 800272a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	e000e100 	.word	0xe000e100

08002740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	6039      	str	r1, [r7, #0]
 800274a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	2b00      	cmp	r3, #0
 8002752:	db0a      	blt.n	800276a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	b2da      	uxtb	r2, r3
 8002758:	490c      	ldr	r1, [pc, #48]	@ (800278c <__NVIC_SetPriority+0x4c>)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	0112      	lsls	r2, r2, #4
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	440b      	add	r3, r1
 8002764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002768:	e00a      	b.n	8002780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4908      	ldr	r1, [pc, #32]	@ (8002790 <__NVIC_SetPriority+0x50>)
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	3b04      	subs	r3, #4
 8002778:	0112      	lsls	r2, r2, #4
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	440b      	add	r3, r1
 800277e:	761a      	strb	r2, [r3, #24]
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000e100 	.word	0xe000e100
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002794:	b480      	push	{r7}
 8002796:	b089      	sub	sp, #36	@ 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f1c3 0307 	rsb	r3, r3, #7
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	bf28      	it	cs
 80027b2:	2304      	movcs	r3, #4
 80027b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3304      	adds	r3, #4
 80027ba:	2b06      	cmp	r3, #6
 80027bc:	d902      	bls.n	80027c4 <NVIC_EncodePriority+0x30>
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3b03      	subs	r3, #3
 80027c2:	e000      	b.n	80027c6 <NVIC_EncodePriority+0x32>
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	f04f 32ff 	mov.w	r2, #4294967295
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43da      	mvns	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	401a      	ands	r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027dc:	f04f 31ff 	mov.w	r1, #4294967295
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	fa01 f303 	lsl.w	r3, r1, r3
 80027e6:	43d9      	mvns	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ec:	4313      	orrs	r3, r2
         );
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3724      	adds	r7, #36	@ 0x24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800280c:	d301      	bcc.n	8002812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800280e:	2301      	movs	r3, #1
 8002810:	e00f      	b.n	8002832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002812:	4a0a      	ldr	r2, [pc, #40]	@ (800283c <SysTick_Config+0x40>)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800281a:	210f      	movs	r1, #15
 800281c:	f04f 30ff 	mov.w	r0, #4294967295
 8002820:	f7ff ff8e 	bl	8002740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002824:	4b05      	ldr	r3, [pc, #20]	@ (800283c <SysTick_Config+0x40>)
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282a:	4b04      	ldr	r3, [pc, #16]	@ (800283c <SysTick_Config+0x40>)
 800282c:	2207      	movs	r2, #7
 800282e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	e000e010 	.word	0xe000e010

08002840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff ff29 	bl	80026a0 <__NVIC_SetPriorityGrouping>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002868:	f7ff ff3e 	bl	80026e8 <__NVIC_GetPriorityGrouping>
 800286c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	6978      	ldr	r0, [r7, #20]
 8002874:	f7ff ff8e 	bl	8002794 <NVIC_EncodePriority>
 8002878:	4602      	mov	r2, r0
 800287a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff5d 	bl	8002740 <__NVIC_SetPriority>
}
 8002886:	bf00      	nop
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	4603      	mov	r3, r0
 8002896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff31 	bl	8002704 <__NVIC_EnableIRQ>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ffa2 	bl	80027fc <SysTick_Config>
 80028b8:	4603      	mov	r3, r0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028d0:	f7ff fc54 	bl	800217c <HAL_GetTick>
 80028d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d008      	beq.n	80028f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2280      	movs	r2, #128	@ 0x80
 80028e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e052      	b.n	800299a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0216 	bic.w	r2, r2, #22
 8002902:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002912:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002918:	2b00      	cmp	r3, #0
 800291a:	d103      	bne.n	8002924 <HAL_DMA_Abort+0x62>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002920:	2b00      	cmp	r3, #0
 8002922:	d007      	beq.n	8002934 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0208 	bic.w	r2, r2, #8
 8002932:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002944:	e013      	b.n	800296e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002946:	f7ff fc19 	bl	800217c <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b05      	cmp	r3, #5
 8002952:	d90c      	bls.n	800296e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2220      	movs	r2, #32
 8002958:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2203      	movs	r2, #3
 800295e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e015      	b.n	800299a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e4      	bne.n	8002946 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002980:	223f      	movs	r2, #63	@ 0x3f
 8002982:	409a      	lsls	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d004      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2280      	movs	r2, #128	@ 0x80
 80029ba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e00c      	b.n	80029da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2205      	movs	r2, #5
 80029c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b089      	sub	sp, #36	@ 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
 8002a02:	e16b      	b.n	8002cdc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a04:	2201      	movs	r2, #1
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	f040 815a 	bne.w	8002cd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d005      	beq.n	8002a3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d130      	bne.n	8002a9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	2203      	movs	r2, #3
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a70:	2201      	movs	r2, #1
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	43db      	mvns	r3, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	091b      	lsrs	r3, r3, #4
 8002a86:	f003 0201 	and.w	r2, r3, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	2b03      	cmp	r3, #3
 8002aa6:	d017      	beq.n	8002ad8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d123      	bne.n	8002b2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	08da      	lsrs	r2, r3, #3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3208      	adds	r2, #8
 8002aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	220f      	movs	r2, #15
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	08da      	lsrs	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3208      	adds	r2, #8
 8002b26:	69b9      	ldr	r1, [r7, #24]
 8002b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	2203      	movs	r2, #3
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0203 	and.w	r2, r3, #3
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80b4 	beq.w	8002cd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	4b60      	ldr	r3, [pc, #384]	@ (8002cf4 <HAL_GPIO_Init+0x30c>)
 8002b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b76:	4a5f      	ldr	r2, [pc, #380]	@ (8002cf4 <HAL_GPIO_Init+0x30c>)
 8002b78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b7e:	4b5d      	ldr	r3, [pc, #372]	@ (8002cf4 <HAL_GPIO_Init+0x30c>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b8a:	4a5b      	ldr	r2, [pc, #364]	@ (8002cf8 <HAL_GPIO_Init+0x310>)
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	3302      	adds	r3, #2
 8002b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	220f      	movs	r2, #15
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a52      	ldr	r2, [pc, #328]	@ (8002cfc <HAL_GPIO_Init+0x314>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d02b      	beq.n	8002c0e <HAL_GPIO_Init+0x226>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a51      	ldr	r2, [pc, #324]	@ (8002d00 <HAL_GPIO_Init+0x318>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d025      	beq.n	8002c0a <HAL_GPIO_Init+0x222>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a50      	ldr	r2, [pc, #320]	@ (8002d04 <HAL_GPIO_Init+0x31c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01f      	beq.n	8002c06 <HAL_GPIO_Init+0x21e>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a4f      	ldr	r2, [pc, #316]	@ (8002d08 <HAL_GPIO_Init+0x320>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d019      	beq.n	8002c02 <HAL_GPIO_Init+0x21a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a4e      	ldr	r2, [pc, #312]	@ (8002d0c <HAL_GPIO_Init+0x324>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d013      	beq.n	8002bfe <HAL_GPIO_Init+0x216>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a4d      	ldr	r2, [pc, #308]	@ (8002d10 <HAL_GPIO_Init+0x328>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00d      	beq.n	8002bfa <HAL_GPIO_Init+0x212>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a4c      	ldr	r2, [pc, #304]	@ (8002d14 <HAL_GPIO_Init+0x32c>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d007      	beq.n	8002bf6 <HAL_GPIO_Init+0x20e>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a4b      	ldr	r2, [pc, #300]	@ (8002d18 <HAL_GPIO_Init+0x330>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <HAL_GPIO_Init+0x20a>
 8002bee:	2307      	movs	r3, #7
 8002bf0:	e00e      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	e00c      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002bf6:	2306      	movs	r3, #6
 8002bf8:	e00a      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002bfa:	2305      	movs	r3, #5
 8002bfc:	e008      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002bfe:	2304      	movs	r3, #4
 8002c00:	e006      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002c02:	2303      	movs	r3, #3
 8002c04:	e004      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002c06:	2302      	movs	r3, #2
 8002c08:	e002      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e000      	b.n	8002c10 <HAL_GPIO_Init+0x228>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	69fa      	ldr	r2, [r7, #28]
 8002c12:	f002 0203 	and.w	r2, r2, #3
 8002c16:	0092      	lsls	r2, r2, #2
 8002c18:	4093      	lsls	r3, r2
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c20:	4935      	ldr	r1, [pc, #212]	@ (8002cf8 <HAL_GPIO_Init+0x310>)
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	089b      	lsrs	r3, r3, #2
 8002c26:	3302      	adds	r3, #2
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d1c <HAL_GPIO_Init+0x334>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c52:	4a32      	ldr	r2, [pc, #200]	@ (8002d1c <HAL_GPIO_Init+0x334>)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c58:	4b30      	ldr	r3, [pc, #192]	@ (8002d1c <HAL_GPIO_Init+0x334>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c7c:	4a27      	ldr	r2, [pc, #156]	@ (8002d1c <HAL_GPIO_Init+0x334>)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c82:	4b26      	ldr	r3, [pc, #152]	@ (8002d1c <HAL_GPIO_Init+0x334>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d1c <HAL_GPIO_Init+0x334>)
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cac:	4b1b      	ldr	r3, [pc, #108]	@ (8002d1c <HAL_GPIO_Init+0x334>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cd0:	4a12      	ldr	r2, [pc, #72]	@ (8002d1c <HAL_GPIO_Init+0x334>)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	61fb      	str	r3, [r7, #28]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b0f      	cmp	r3, #15
 8002ce0:	f67f ae90 	bls.w	8002a04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop
 8002ce8:	3724      	adds	r7, #36	@ 0x24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40013800 	.word	0x40013800
 8002cfc:	40020000 	.word	0x40020000
 8002d00:	40020400 	.word	0x40020400
 8002d04:	40020800 	.word	0x40020800
 8002d08:	40020c00 	.word	0x40020c00
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40021400 	.word	0x40021400
 8002d14:	40021800 	.word	0x40021800
 8002d18:	40021c00 	.word	0x40021c00
 8002d1c:	40013c00 	.word	0x40013c00

08002d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	807b      	strh	r3, [r7, #2]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d30:	787b      	ldrb	r3, [r7, #1]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d36:	887a      	ldrh	r2, [r7, #2]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d3c:	e003      	b.n	8002d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d3e:	887b      	ldrh	r3, [r7, #2]
 8002d40:	041a      	lsls	r2, r3, #16
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	619a      	str	r2, [r3, #24]
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
	...

08002d54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e12b      	b.n	8002fbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7fe fcd2 	bl	8001724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2224      	movs	r2, #36	@ 0x24
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0201 	bic.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002da6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002db6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002db8:	f001 ffd2 	bl	8004d60 <HAL_RCC_GetPCLK1Freq>
 8002dbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	4a81      	ldr	r2, [pc, #516]	@ (8002fc8 <HAL_I2C_Init+0x274>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d807      	bhi.n	8002dd8 <HAL_I2C_Init+0x84>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4a80      	ldr	r2, [pc, #512]	@ (8002fcc <HAL_I2C_Init+0x278>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	bf94      	ite	ls
 8002dd0:	2301      	movls	r3, #1
 8002dd2:	2300      	movhi	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	e006      	b.n	8002de6 <HAL_I2C_Init+0x92>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4a7d      	ldr	r2, [pc, #500]	@ (8002fd0 <HAL_I2C_Init+0x27c>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	bf94      	ite	ls
 8002de0:	2301      	movls	r3, #1
 8002de2:	2300      	movhi	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e0e7      	b.n	8002fbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4a78      	ldr	r2, [pc, #480]	@ (8002fd4 <HAL_I2C_Init+0x280>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	0c9b      	lsrs	r3, r3, #18
 8002df8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	4a6a      	ldr	r2, [pc, #424]	@ (8002fc8 <HAL_I2C_Init+0x274>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d802      	bhi.n	8002e28 <HAL_I2C_Init+0xd4>
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	3301      	adds	r3, #1
 8002e26:	e009      	b.n	8002e3c <HAL_I2C_Init+0xe8>
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e2e:	fb02 f303 	mul.w	r3, r2, r3
 8002e32:	4a69      	ldr	r2, [pc, #420]	@ (8002fd8 <HAL_I2C_Init+0x284>)
 8002e34:	fba2 2303 	umull	r2, r3, r2, r3
 8002e38:	099b      	lsrs	r3, r3, #6
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	430b      	orrs	r3, r1
 8002e42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e4e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	495c      	ldr	r1, [pc, #368]	@ (8002fc8 <HAL_I2C_Init+0x274>)
 8002e58:	428b      	cmp	r3, r1
 8002e5a:	d819      	bhi.n	8002e90 <HAL_I2C_Init+0x13c>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1e59      	subs	r1, r3, #1
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e6a:	1c59      	adds	r1, r3, #1
 8002e6c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e70:	400b      	ands	r3, r1
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00a      	beq.n	8002e8c <HAL_I2C_Init+0x138>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1e59      	subs	r1, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e84:	3301      	adds	r3, #1
 8002e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e8a:	e051      	b.n	8002f30 <HAL_I2C_Init+0x1dc>
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	e04f      	b.n	8002f30 <HAL_I2C_Init+0x1dc>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d111      	bne.n	8002ebc <HAL_I2C_Init+0x168>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	1e58      	subs	r0, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6859      	ldr	r1, [r3, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	440b      	add	r3, r1
 8002ea6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	e012      	b.n	8002ee2 <HAL_I2C_Init+0x18e>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1e58      	subs	r0, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	0099      	lsls	r1, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_I2C_Init+0x196>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e022      	b.n	8002f30 <HAL_I2C_Init+0x1dc>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10e      	bne.n	8002f10 <HAL_I2C_Init+0x1bc>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	1e58      	subs	r0, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6859      	ldr	r1, [r3, #4]
 8002efa:	460b      	mov	r3, r1
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	440b      	add	r3, r1
 8002f00:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f04:	3301      	adds	r3, #1
 8002f06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f0e:	e00f      	b.n	8002f30 <HAL_I2C_Init+0x1dc>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1e58      	subs	r0, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6859      	ldr	r1, [r3, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	0099      	lsls	r1, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f26:	3301      	adds	r3, #1
 8002f28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	6809      	ldr	r1, [r1, #0]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69da      	ldr	r2, [r3, #28]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6911      	ldr	r1, [r2, #16]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	68d2      	ldr	r2, [r2, #12]
 8002f6a:	4311      	orrs	r1, r2
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	430b      	orrs	r3, r1
 8002f72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f042 0201 	orr.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	000186a0 	.word	0x000186a0
 8002fcc:	001e847f 	.word	0x001e847f
 8002fd0:	003d08ff 	.word	0x003d08ff
 8002fd4:	431bde83 	.word	0x431bde83
 8002fd8:	10624dd3 	.word	0x10624dd3

08002fdc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e101      	b.n	80031f2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d106      	bne.n	800300e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f008 fdbb 	bl	800bb84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2203      	movs	r2, #3
 8003012:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800301c:	d102      	bne.n	8003024 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f003 fe30 	bl	8006c8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	7c1a      	ldrb	r2, [r3, #16]
 8003036:	f88d 2000 	strb.w	r2, [sp]
 800303a:	3304      	adds	r3, #4
 800303c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800303e:	f003 fd0f 	bl	8006a60 <USB_CoreInit>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d005      	beq.n	8003054 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0ce      	b.n	80031f2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2100      	movs	r1, #0
 800305a:	4618      	mov	r0, r3
 800305c:	f003 fe28 	bl	8006cb0 <USB_SetCurrentMode>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2202      	movs	r2, #2
 800306a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e0bf      	b.n	80031f2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003072:	2300      	movs	r3, #0
 8003074:	73fb      	strb	r3, [r7, #15]
 8003076:	e04a      	b.n	800310e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003078:	7bfa      	ldrb	r2, [r7, #15]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	3315      	adds	r3, #21
 8003088:	2201      	movs	r2, #1
 800308a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800308c:	7bfa      	ldrb	r2, [r7, #15]
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	4613      	mov	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	3314      	adds	r3, #20
 800309c:	7bfa      	ldrb	r2, [r7, #15]
 800309e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80030a0:	7bfa      	ldrb	r2, [r7, #15]
 80030a2:	7bfb      	ldrb	r3, [r7, #15]
 80030a4:	b298      	uxth	r0, r3
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	332e      	adds	r3, #46	@ 0x2e
 80030b4:	4602      	mov	r2, r0
 80030b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030b8:	7bfa      	ldrb	r2, [r7, #15]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	3318      	adds	r3, #24
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030cc:	7bfa      	ldrb	r2, [r7, #15]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	331c      	adds	r3, #28
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	3320      	adds	r3, #32
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	3324      	adds	r3, #36	@ 0x24
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	3301      	adds	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	791b      	ldrb	r3, [r3, #4]
 8003112:	7bfa      	ldrb	r2, [r7, #15]
 8003114:	429a      	cmp	r2, r3
 8003116:	d3af      	bcc.n	8003078 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003118:	2300      	movs	r3, #0
 800311a:	73fb      	strb	r3, [r7, #15]
 800311c:	e044      	b.n	80031a8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800311e:	7bfa      	ldrb	r2, [r7, #15]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	4413      	add	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003134:	7bfa      	ldrb	r2, [r7, #15]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003146:	7bfa      	ldrb	r2, [r7, #15]
 8003148:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003160:	7bfa      	ldrb	r2, [r7, #15]
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	440b      	add	r3, r1
 800316e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003176:	7bfa      	ldrb	r2, [r7, #15]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800318c:	7bfa      	ldrb	r2, [r7, #15]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	00db      	lsls	r3, r3, #3
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	3301      	adds	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	791b      	ldrb	r3, [r3, #4]
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d3b5      	bcc.n	800311e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6818      	ldr	r0, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	7c1a      	ldrb	r2, [r3, #16]
 80031ba:	f88d 2000 	strb.w	r2, [sp]
 80031be:	3304      	adds	r3, #4
 80031c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031c2:	f003 fdc1 	bl	8006d48 <USB_DevInit>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e00c      	b.n	80031f2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f004 fe0b 	bl	8007e06 <USB_DevDisconnect>

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_PCD_Start+0x1c>
 8003212:	2302      	movs	r3, #2
 8003214:	e022      	b.n	800325c <HAL_PCD_Start+0x62>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800322e:	2b01      	cmp	r3, #1
 8003230:	d105      	bne.n	800323e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003236:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f003 fd12 	bl	8006c6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4618      	mov	r0, r3
 800324e:	f004 fdb9 	bl	8007dc4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003264:	b590      	push	{r4, r7, lr}
 8003266:	b08d      	sub	sp, #52	@ 0x34
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f004 fe77 	bl	8007f6e <USB_GetMode>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	f040 848c 	bne.w	8003ba0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f004 fddb 	bl	8007e48 <USB_ReadInterrupts>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 8482 	beq.w	8003b9e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	0a1b      	lsrs	r3, r3, #8
 80032a4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f004 fdc8 	bl	8007e48 <USB_ReadInterrupts>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d107      	bne.n	80032d2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695a      	ldr	r2, [r3, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f002 0202 	and.w	r2, r2, #2
 80032d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f004 fdb6 	bl	8007e48 <USB_ReadInterrupts>
 80032dc:	4603      	mov	r3, r0
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b10      	cmp	r3, #16
 80032e4:	d161      	bne.n	80033aa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699a      	ldr	r2, [r3, #24]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 0210 	bic.w	r2, r2, #16
 80032f4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80032f6:	6a3b      	ldr	r3, [r7, #32]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f003 020f 	and.w	r2, r3, #15
 8003302:	4613      	mov	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4413      	add	r3, r2
 8003312:	3304      	adds	r3, #4
 8003314:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	0c5b      	lsrs	r3, r3, #17
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	2b02      	cmp	r3, #2
 8003320:	d124      	bne.n	800336c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003328:	4013      	ands	r3, r2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d035      	beq.n	800339a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003338:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800333c:	b29b      	uxth	r3, r3
 800333e:	461a      	mov	r2, r3
 8003340:	6a38      	ldr	r0, [r7, #32]
 8003342:	f004 fbed 	bl	8007b20 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003352:	441a      	add	r2, r3
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	695a      	ldr	r2, [r3, #20]
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	091b      	lsrs	r3, r3, #4
 8003360:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003364:	441a      	add	r2, r3
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	615a      	str	r2, [r3, #20]
 800336a:	e016      	b.n	800339a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	0c5b      	lsrs	r3, r3, #17
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	2b06      	cmp	r3, #6
 8003376:	d110      	bne.n	800339a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800337e:	2208      	movs	r2, #8
 8003380:	4619      	mov	r1, r3
 8003382:	6a38      	ldr	r0, [r7, #32]
 8003384:	f004 fbcc 	bl	8007b20 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	695a      	ldr	r2, [r3, #20]
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	091b      	lsrs	r3, r3, #4
 8003390:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003394:	441a      	add	r2, r3
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699a      	ldr	r2, [r3, #24]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0210 	orr.w	r2, r2, #16
 80033a8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f004 fd4a 	bl	8007e48 <USB_ReadInterrupts>
 80033b4:	4603      	mov	r3, r0
 80033b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033ba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80033be:	f040 80a7 	bne.w	8003510 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f004 fd4f 	bl	8007e6e <USB_ReadDevAllOutEpInterrupt>
 80033d0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80033d2:	e099      	b.n	8003508 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80033d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 808e 	beq.w	80034fc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	4611      	mov	r1, r2
 80033ea:	4618      	mov	r0, r3
 80033ec:	f004 fd73 	bl	8007ed6 <USB_ReadDevOutEPInterrupt>
 80033f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00c      	beq.n	8003416 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80033fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fe:	015a      	lsls	r2, r3, #5
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	4413      	add	r3, r2
 8003404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003408:	461a      	mov	r2, r3
 800340a:	2301      	movs	r3, #1
 800340c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800340e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fea3 	bl	800415c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00c      	beq.n	800343a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	4413      	add	r3, r2
 8003428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800342c:	461a      	mov	r2, r3
 800342e:	2308      	movs	r3, #8
 8003430:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003432:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 ff79 	bl	800432c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2b00      	cmp	r3, #0
 8003442:	d008      	beq.n	8003456 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	4413      	add	r3, r2
 800344c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003450:	461a      	mov	r2, r3
 8003452:	2310      	movs	r3, #16
 8003454:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d030      	beq.n	80034c2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003468:	2b80      	cmp	r3, #128	@ 0x80
 800346a:	d109      	bne.n	8003480 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	69fa      	ldr	r2, [r7, #28]
 8003476:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800347a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800347e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003482:	4613      	mov	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	3304      	adds	r3, #4
 8003494:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	78db      	ldrb	r3, [r3, #3]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d108      	bne.n	80034b0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2200      	movs	r2, #0
 80034a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80034a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	4619      	mov	r1, r3
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f008 fc70 	bl	800bd90 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80034b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b2:	015a      	lsls	r2, r3, #5
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034bc:	461a      	mov	r2, r3
 80034be:	2302      	movs	r3, #2
 80034c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f003 0320 	and.w	r3, r3, #32
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034d8:	461a      	mov	r2, r3
 80034da:	2320      	movs	r3, #32
 80034dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d009      	beq.n	80034fc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80034e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034f4:	461a      	mov	r2, r3
 80034f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034fa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80034fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fe:	3301      	adds	r3, #1
 8003500:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003504:	085b      	lsrs	r3, r3, #1
 8003506:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800350a:	2b00      	cmp	r3, #0
 800350c:	f47f af62 	bne.w	80033d4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f004 fc97 	bl	8007e48 <USB_ReadInterrupts>
 800351a:	4603      	mov	r3, r0
 800351c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003520:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003524:	f040 80db 	bne.w	80036de <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f004 fcb8 	bl	8007ea2 <USB_ReadDevAllInEpInterrupt>
 8003532:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003538:	e0cd      	b.n	80036d6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800353a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80c2 	beq.w	80036ca <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	4611      	mov	r1, r2
 8003550:	4618      	mov	r0, r3
 8003552:	f004 fcde 	bl	8007f12 <USB_ReadDevInEPInterrupt>
 8003556:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d057      	beq.n	8003612 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003564:	f003 030f 	and.w	r3, r3, #15
 8003568:	2201      	movs	r2, #1
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	43db      	mvns	r3, r3
 800357c:	69f9      	ldr	r1, [r7, #28]
 800357e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003582:	4013      	ands	r3, r2
 8003584:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003588:	015a      	lsls	r2, r3, #5
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	4413      	add	r3, r2
 800358e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003592:	461a      	mov	r2, r3
 8003594:	2301      	movs	r3, #1
 8003596:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	799b      	ldrb	r3, [r3, #6]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d132      	bne.n	8003606 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a4:	4613      	mov	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	3320      	adds	r3, #32
 80035b0:	6819      	ldr	r1, [r3, #0]
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b6:	4613      	mov	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4403      	add	r3, r0
 80035c0:	331c      	adds	r3, #28
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4419      	add	r1, r3
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ca:	4613      	mov	r3, r2
 80035cc:	00db      	lsls	r3, r3, #3
 80035ce:	4413      	add	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4403      	add	r3, r0
 80035d4:	3320      	adds	r3, #32
 80035d6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80035d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d113      	bne.n	8003606 <HAL_PCD_IRQHandler+0x3a2>
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035e2:	4613      	mov	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	3324      	adds	r3, #36	@ 0x24
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d108      	bne.n	8003606 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035fe:	461a      	mov	r2, r3
 8003600:	2101      	movs	r1, #1
 8003602:	f004 fce5 	bl	8007fd0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003608:	b2db      	uxtb	r3, r3
 800360a:	4619      	mov	r1, r3
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f008 fb3a 	bl	800bc86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f003 0308 	and.w	r3, r3, #8
 8003618:	2b00      	cmp	r3, #0
 800361a:	d008      	beq.n	800362e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800361c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003628:	461a      	mov	r2, r3
 800362a:	2308      	movs	r3, #8
 800362c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f003 0310 	and.w	r3, r3, #16
 8003634:	2b00      	cmp	r3, #0
 8003636:	d008      	beq.n	800364a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	4413      	add	r3, r2
 8003640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003644:	461a      	mov	r2, r3
 8003646:	2310      	movs	r3, #16
 8003648:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003650:	2b00      	cmp	r3, #0
 8003652:	d008      	beq.n	8003666 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	4413      	add	r3, r2
 800365c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003660:	461a      	mov	r2, r3
 8003662:	2340      	movs	r3, #64	@ 0x40
 8003664:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d023      	beq.n	80036b8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003670:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003672:	6a38      	ldr	r0, [r7, #32]
 8003674:	f003 fccc 	bl	8007010 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800367a:	4613      	mov	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	4413      	add	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	3310      	adds	r3, #16
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	4413      	add	r3, r2
 8003688:	3304      	adds	r3, #4
 800368a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	78db      	ldrb	r3, [r3, #3]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d108      	bne.n	80036a6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2200      	movs	r2, #0
 8003698:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369c:	b2db      	uxtb	r3, r3
 800369e:	4619      	mov	r1, r3
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f008 fb87 	bl	800bdb4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036b2:	461a      	mov	r2, r3
 80036b4:	2302      	movs	r3, #2
 80036b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fcbd 	bl	8004044 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	3301      	adds	r3, #1
 80036ce:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80036d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d2:	085b      	lsrs	r3, r3, #1
 80036d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80036d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f47f af2e 	bne.w	800353a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f004 fbb0 	bl	8007e48 <USB_ReadInterrupts>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80036ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036f2:	d122      	bne.n	800373a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003702:	f023 0301 	bic.w	r3, r3, #1
 8003706:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800370e:	2b01      	cmp	r3, #1
 8003710:	d108      	bne.n	8003724 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800371a:	2100      	movs	r1, #0
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 fea3 	bl	8004468 <HAL_PCDEx_LPM_Callback>
 8003722:	e002      	b.n	800372a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f008 fb25 	bl	800bd74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695a      	ldr	r2, [r3, #20]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003738:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f004 fb82 	bl	8007e48 <USB_ReadInterrupts>
 8003744:	4603      	mov	r3, r0
 8003746:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800374a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800374e:	d112      	bne.n	8003776 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b01      	cmp	r3, #1
 800375e:	d102      	bne.n	8003766 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f008 fae1 	bl	800bd28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003774:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f004 fb64 	bl	8007e48 <USB_ReadInterrupts>
 8003780:	4603      	mov	r3, r0
 8003782:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800378a:	f040 80b7 	bne.w	80038fc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	69fa      	ldr	r2, [r7, #28]
 8003798:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800379c:	f023 0301 	bic.w	r3, r3, #1
 80037a0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2110      	movs	r1, #16
 80037a8:	4618      	mov	r0, r3
 80037aa:	f003 fc31 	bl	8007010 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ae:	2300      	movs	r3, #0
 80037b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037b2:	e046      	b.n	8003842 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80037b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037c0:	461a      	mov	r2, r3
 80037c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80037c6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037d8:	0151      	lsls	r1, r2, #5
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	440a      	add	r2, r1
 80037de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80037e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037f4:	461a      	mov	r2, r3
 80037f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80037fa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800380c:	0151      	lsls	r1, r2, #5
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	440a      	add	r2, r1
 8003812:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003816:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800381a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800381c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800382c:	0151      	lsls	r1, r2, #5
 800382e:	69fa      	ldr	r2, [r7, #28]
 8003830:	440a      	add	r2, r1
 8003832:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003836:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800383a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800383c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800383e:	3301      	adds	r3, #1
 8003840:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	791b      	ldrb	r3, [r3, #4]
 8003846:	461a      	mov	r2, r3
 8003848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800384a:	4293      	cmp	r3, r2
 800384c:	d3b2      	bcc.n	80037b4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003854:	69db      	ldr	r3, [r3, #28]
 8003856:	69fa      	ldr	r2, [r7, #28]
 8003858:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800385c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003860:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	7bdb      	ldrb	r3, [r3, #15]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d016      	beq.n	8003898 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003870:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800387a:	f043 030b 	orr.w	r3, r3, #11
 800387e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388a:	69fa      	ldr	r2, [r7, #28]
 800388c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003890:	f043 030b 	orr.w	r3, r3, #11
 8003894:	6453      	str	r3, [r2, #68]	@ 0x44
 8003896:	e015      	b.n	80038c4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	69fa      	ldr	r2, [r7, #28]
 80038a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80038aa:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80038ae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038be:	f043 030b 	orr.w	r3, r3, #11
 80038c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038d2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80038d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6818      	ldr	r0, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038e6:	461a      	mov	r2, r3
 80038e8:	f004 fb72 	bl	8007fd0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80038fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f004 faa1 	bl	8007e48 <USB_ReadInterrupts>
 8003906:	4603      	mov	r3, r0
 8003908:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800390c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003910:	d123      	bne.n	800395a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f004 fb37 	bl	8007f8a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f003 fbee 	bl	8007102 <USB_GetDevSpeed>
 8003926:	4603      	mov	r3, r0
 8003928:	461a      	mov	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681c      	ldr	r4, [r3, #0]
 8003932:	f001 fa09 	bl	8004d48 <HAL_RCC_GetHCLKFreq>
 8003936:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800393c:	461a      	mov	r2, r3
 800393e:	4620      	mov	r0, r4
 8003940:	f003 f8f2 	bl	8006b28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f008 f9c6 	bl	800bcd6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003958:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f004 fa72 	bl	8007e48 <USB_ReadInterrupts>
 8003964:	4603      	mov	r3, r0
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b08      	cmp	r3, #8
 800396c:	d10a      	bne.n	8003984 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f008 f9a3 	bl	800bcba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695a      	ldr	r2, [r3, #20]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f002 0208 	and.w	r2, r2, #8
 8003982:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f004 fa5d 	bl	8007e48 <USB_ReadInterrupts>
 800398e:	4603      	mov	r3, r0
 8003990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003994:	2b80      	cmp	r3, #128	@ 0x80
 8003996:	d123      	bne.n	80039e0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039a4:	2301      	movs	r3, #1
 80039a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80039a8:	e014      	b.n	80039d4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d105      	bne.n	80039ce <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	4619      	mov	r1, r3
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fb0a 	bl	8003fe2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d0:	3301      	adds	r3, #1
 80039d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	791b      	ldrb	r3, [r3, #4]
 80039d8:	461a      	mov	r2, r3
 80039da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039dc:	4293      	cmp	r3, r2
 80039de:	d3e4      	bcc.n	80039aa <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f004 fa2f 	bl	8007e48 <USB_ReadInterrupts>
 80039ea:	4603      	mov	r3, r0
 80039ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039f4:	d13c      	bne.n	8003a70 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039f6:	2301      	movs	r3, #1
 80039f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80039fa:	e02b      	b.n	8003a54 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80039fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	3318      	adds	r3, #24
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d115      	bne.n	8003a4e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a22:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	da12      	bge.n	8003a4e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	3317      	adds	r3, #23
 8003a38:	2201      	movs	r2, #1
 8003a3a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	4619      	mov	r1, r3
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 faca 	bl	8003fe2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	3301      	adds	r3, #1
 8003a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	791b      	ldrb	r3, [r3, #4]
 8003a58:	461a      	mov	r2, r3
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d3cd      	bcc.n	80039fc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695a      	ldr	r2, [r3, #20]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003a6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f004 f9e7 	bl	8007e48 <USB_ReadInterrupts>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a84:	d156      	bne.n	8003b34 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a86:	2301      	movs	r3, #1
 8003a88:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a8a:	e045      	b.n	8003b18 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d12e      	bne.n	8003b12 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ab4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	da2b      	bge.n	8003b12 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003ac6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d121      	bne.n	8003b12 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	69fa      	ldr	r2, [r7, #28]
 8003b06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b0e:	6053      	str	r3, [r2, #4]
            break;
 8003b10:	e008      	b.n	8003b24 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b14:	3301      	adds	r3, #1
 8003b16:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	791b      	ldrb	r3, [r3, #4]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d3b3      	bcc.n	8003a8c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	695a      	ldr	r2, [r3, #20]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003b32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f004 f985 	bl	8007e48 <USB_ReadInterrupts>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003b44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b48:	d10a      	bne.n	8003b60 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f008 f944 	bl	800bdd8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695a      	ldr	r2, [r3, #20]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003b5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f004 f96f 	bl	8007e48 <USB_ReadInterrupts>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d115      	bne.n	8003ba0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f008 f934 	bl	800bdf4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6859      	ldr	r1, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	605a      	str	r2, [r3, #4]
 8003b9c:	e000      	b.n	8003ba0 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003b9e:	bf00      	nop
    }
  }
}
 8003ba0:	3734      	adds	r7, #52	@ 0x34
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd90      	pop	{r4, r7, pc}

08003ba6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b082      	sub	sp, #8
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d101      	bne.n	8003bc0 <HAL_PCD_SetAddress+0x1a>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	e012      	b.n	8003be6 <HAL_PCD_SetAddress+0x40>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	78fa      	ldrb	r2, [r7, #3]
 8003bcc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f004 f8ce 	bl	8007d78 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b084      	sub	sp, #16
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	4608      	mov	r0, r1
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	70fb      	strb	r3, [r7, #3]
 8003c00:	460b      	mov	r3, r1
 8003c02:	803b      	strh	r3, [r7, #0]
 8003c04:	4613      	mov	r3, r2
 8003c06:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	da0f      	bge.n	8003c34 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	f003 020f 	and.w	r2, r3, #15
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	3310      	adds	r3, #16
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	4413      	add	r3, r2
 8003c28:	3304      	adds	r3, #4
 8003c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	705a      	strb	r2, [r3, #1]
 8003c32:	e00f      	b.n	8003c54 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	f003 020f 	and.w	r2, r3, #15
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	4413      	add	r3, r2
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c54:	78fb      	ldrb	r3, [r7, #3]
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003c60:	883b      	ldrh	r3, [r7, #0]
 8003c62:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	78ba      	ldrb	r2, [r7, #2]
 8003c6e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	785b      	ldrb	r3, [r3, #1]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d004      	beq.n	8003c82 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c82:	78bb      	ldrb	r3, [r7, #2]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d102      	bne.n	8003c8e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d101      	bne.n	8003c9c <HAL_PCD_EP_Open+0xae>
 8003c98:	2302      	movs	r3, #2
 8003c9a:	e00e      	b.n	8003cba <HAL_PCD_EP_Open+0xcc>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68f9      	ldr	r1, [r7, #12]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f003 fa4e 	bl	800714c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003cb8:	7afb      	ldrb	r3, [r7, #11]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b084      	sub	sp, #16
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	da0f      	bge.n	8003cf6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cd6:	78fb      	ldrb	r3, [r7, #3]
 8003cd8:	f003 020f 	and.w	r2, r3, #15
 8003cdc:	4613      	mov	r3, r2
 8003cde:	00db      	lsls	r3, r3, #3
 8003ce0:	4413      	add	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	3310      	adds	r3, #16
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	4413      	add	r3, r2
 8003cea:	3304      	adds	r3, #4
 8003cec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	705a      	strb	r2, [r3, #1]
 8003cf4:	e00f      	b.n	8003d16 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cf6:	78fb      	ldrb	r3, [r7, #3]
 8003cf8:	f003 020f 	and.w	r2, r3, #15
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	4413      	add	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d16:	78fb      	ldrb	r3, [r7, #3]
 8003d18:	f003 030f 	and.w	r3, r3, #15
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_PCD_EP_Close+0x6e>
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e00e      	b.n	8003d4e <HAL_PCD_EP_Close+0x8c>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68f9      	ldr	r1, [r7, #12]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f003 fa8c 	bl	800725c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b086      	sub	sp, #24
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	603b      	str	r3, [r7, #0]
 8003d62:	460b      	mov	r3, r1
 8003d64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d66:	7afb      	ldrb	r3, [r7, #11]
 8003d68:	f003 020f 	and.w	r2, r3, #15
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2200      	movs	r2, #0
 8003d96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d98:	7afb      	ldrb	r3, [r7, #11]
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	799b      	ldrb	r3, [r3, #6]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d102      	bne.n	8003db2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	799b      	ldrb	r3, [r3, #6]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	6979      	ldr	r1, [r7, #20]
 8003dbe:	f003 fb29 	bl	8007414 <USB_EPStartXfer>

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	f003 020f 	and.w	r2, r3, #15
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003dee:	681b      	ldr	r3, [r3, #0]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	607a      	str	r2, [r7, #4]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e0c:	7afb      	ldrb	r3, [r7, #11]
 8003e0e:	f003 020f 	and.w	r2, r3, #15
 8003e12:	4613      	mov	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	3310      	adds	r3, #16
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	3304      	adds	r3, #4
 8003e22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	683a      	ldr	r2, [r7, #0]
 8003e2e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	2200      	movs	r2, #0
 8003e34:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e3c:	7afb      	ldrb	r3, [r7, #11]
 8003e3e:	f003 030f 	and.w	r3, r3, #15
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	799b      	ldrb	r3, [r3, #6]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d102      	bne.n	8003e56 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	799b      	ldrb	r3, [r3, #6]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	6979      	ldr	r1, [r7, #20]
 8003e62:	f003 fad7 	bl	8007414 <USB_EPStartXfer>

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	7912      	ldrb	r2, [r2, #4]
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d901      	bls.n	8003e8e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e04f      	b.n	8003f2e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	da0f      	bge.n	8003eb6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e96:	78fb      	ldrb	r3, [r7, #3]
 8003e98:	f003 020f 	and.w	r2, r3, #15
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	3310      	adds	r3, #16
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3304      	adds	r3, #4
 8003eac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	705a      	strb	r2, [r3, #1]
 8003eb4:	e00d      	b.n	8003ed2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003eb6:	78fa      	ldrb	r2, [r7, #3]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	3304      	adds	r3, #4
 8003eca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <HAL_PCD_EP_SetStall+0x82>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e01d      	b.n	8003f2e <HAL_PCD_EP_SetStall+0xbe>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68f9      	ldr	r1, [r7, #12]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f003 fe65 	bl	8007bd0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d109      	bne.n	8003f24 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	7999      	ldrb	r1, [r3, #6]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f004 f856 	bl	8007fd0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b084      	sub	sp, #16
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
 8003f3e:	460b      	mov	r3, r1
 8003f40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f42:	78fb      	ldrb	r3, [r7, #3]
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	7912      	ldrb	r2, [r2, #4]
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d901      	bls.n	8003f54 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e042      	b.n	8003fda <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	da0f      	bge.n	8003f7c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f5c:	78fb      	ldrb	r3, [r7, #3]
 8003f5e:	f003 020f 	and.w	r2, r3, #15
 8003f62:	4613      	mov	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	3310      	adds	r3, #16
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	4413      	add	r3, r2
 8003f70:	3304      	adds	r3, #4
 8003f72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	705a      	strb	r2, [r3, #1]
 8003f7a:	e00f      	b.n	8003f9c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f7c:	78fb      	ldrb	r3, [r7, #3]
 8003f7e:	f003 020f 	and.w	r2, r3, #15
 8003f82:	4613      	mov	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	4413      	add	r3, r2
 8003f92:	3304      	adds	r3, #4
 8003f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fa2:	78fb      	ldrb	r3, [r7, #3]
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_PCD_EP_ClrStall+0x86>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e00e      	b.n	8003fda <HAL_PCD_EP_ClrStall+0xa4>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68f9      	ldr	r1, [r7, #12]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f003 fe6e 	bl	8007cac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	460b      	mov	r3, r1
 8003fec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003fee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	da0c      	bge.n	8004010 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ff6:	78fb      	ldrb	r3, [r7, #3]
 8003ff8:	f003 020f 	and.w	r2, r3, #15
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4413      	add	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	3310      	adds	r3, #16
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	4413      	add	r3, r2
 800400a:	3304      	adds	r3, #4
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	e00c      	b.n	800402a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	f003 020f 	and.w	r2, r3, #15
 8004016:	4613      	mov	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	4413      	add	r3, r2
 8004026:	3304      	adds	r3, #4
 8004028:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68f9      	ldr	r1, [r7, #12]
 8004030:	4618      	mov	r0, r3
 8004032:	f003 fc8d 	bl	8007950 <USB_EPStopXfer>
 8004036:	4603      	mov	r3, r0
 8004038:	72fb      	strb	r3, [r7, #11]

  return ret;
 800403a:	7afb      	ldrb	r3, [r7, #11]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08a      	sub	sp, #40	@ 0x28
 8004048:	af02      	add	r7, sp, #8
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	4613      	mov	r3, r2
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	4413      	add	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	3310      	adds	r3, #16
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	4413      	add	r3, r2
 8004068:	3304      	adds	r3, #4
 800406a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	695a      	ldr	r2, [r3, #20]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	429a      	cmp	r2, r3
 8004076:	d901      	bls.n	800407c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e06b      	b.n	8004154 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	691a      	ldr	r2, [r3, #16]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	69fa      	ldr	r2, [r7, #28]
 800408e:	429a      	cmp	r2, r3
 8004090:	d902      	bls.n	8004098 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	3303      	adds	r3, #3
 800409c:	089b      	lsrs	r3, r3, #2
 800409e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040a0:	e02a      	b.n	80040f8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d902      	bls.n	80040be <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	3303      	adds	r3, #3
 80040c2:	089b      	lsrs	r3, r3, #2
 80040c4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	68d9      	ldr	r1, [r3, #12]
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	4603      	mov	r3, r0
 80040da:	6978      	ldr	r0, [r7, #20]
 80040dc:	f003 fce2 	bl	8007aa4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	441a      	add	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	695a      	ldr	r2, [r3, #20]
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	441a      	add	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	429a      	cmp	r2, r3
 800410c:	d809      	bhi.n	8004122 <PCD_WriteEmptyTxFifo+0xde>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	695a      	ldr	r2, [r3, #20]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004116:	429a      	cmp	r2, r3
 8004118:	d203      	bcs.n	8004122 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1bf      	bne.n	80040a2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	429a      	cmp	r2, r3
 800412c:	d811      	bhi.n	8004152 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	2201      	movs	r2, #1
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004142:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	43db      	mvns	r3, r3
 8004148:	6939      	ldr	r1, [r7, #16]
 800414a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800414e:	4013      	ands	r3, r2
 8004150:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3720      	adds	r7, #32
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	333c      	adds	r3, #60	@ 0x3c
 8004174:	3304      	adds	r3, #4
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	799b      	ldrb	r3, [r3, #6]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d17b      	bne.n	800428a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f003 0308 	and.w	r3, r3, #8
 8004198:	2b00      	cmp	r3, #0
 800419a:	d015      	beq.n	80041c8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	4a61      	ldr	r2, [pc, #388]	@ (8004324 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	f240 80b9 	bls.w	8004318 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 80b3 	beq.w	8004318 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041be:	461a      	mov	r2, r3
 80041c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041c4:	6093      	str	r3, [r2, #8]
 80041c6:	e0a7      	b.n	8004318 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d009      	beq.n	80041e6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041de:	461a      	mov	r2, r3
 80041e0:	2320      	movs	r3, #32
 80041e2:	6093      	str	r3, [r2, #8]
 80041e4:	e098      	b.n	8004318 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f040 8093 	bne.w	8004318 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	4a4b      	ldr	r2, [pc, #300]	@ (8004324 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d90f      	bls.n	800421a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004210:	461a      	mov	r2, r3
 8004212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004216:	6093      	str	r3, [r2, #8]
 8004218:	e07e      	b.n	8004318 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800421a:	683a      	ldr	r2, [r7, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	4413      	add	r3, r2
 800422c:	3304      	adds	r3, #4
 800422e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a1a      	ldr	r2, [r3, #32]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	0159      	lsls	r1, r3, #5
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	440b      	add	r3, r1
 800423c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004246:	1ad2      	subs	r2, r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d114      	bne.n	800427c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d109      	bne.n	800426e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6818      	ldr	r0, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004264:	461a      	mov	r2, r3
 8004266:	2101      	movs	r1, #1
 8004268:	f003 feb2 	bl	8007fd0 <USB_EP0_OutStart>
 800426c:	e006      	b.n	800427c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	441a      	add	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	b2db      	uxtb	r3, r3
 8004280:	4619      	mov	r1, r3
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f007 fce4 	bl	800bc50 <HAL_PCD_DataOutStageCallback>
 8004288:	e046      	b.n	8004318 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	4a26      	ldr	r2, [pc, #152]	@ (8004328 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d124      	bne.n	80042dc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a8:	461a      	mov	r2, r3
 80042aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ae:	6093      	str	r3, [r2, #8]
 80042b0:	e032      	b.n	8004318 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d008      	beq.n	80042ce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042c8:	461a      	mov	r2, r3
 80042ca:	2320      	movs	r3, #32
 80042cc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	4619      	mov	r1, r3
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f007 fcbb 	bl	800bc50 <HAL_PCD_DataOutStageCallback>
 80042da:	e01d      	b.n	8004318 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d114      	bne.n	800430c <PCD_EP_OutXfrComplete_int+0x1b0>
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	4613      	mov	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d108      	bne.n	800430c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004304:	461a      	mov	r2, r3
 8004306:	2100      	movs	r1, #0
 8004308:	f003 fe62 	bl	8007fd0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	b2db      	uxtb	r3, r3
 8004310:	4619      	mov	r1, r3
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f007 fc9c 	bl	800bc50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3720      	adds	r7, #32
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	4f54300a 	.word	0x4f54300a
 8004328:	4f54310a 	.word	0x4f54310a

0800432c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	333c      	adds	r3, #60	@ 0x3c
 8004344:	3304      	adds	r3, #4
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4a15      	ldr	r2, [pc, #84]	@ (80043b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d90e      	bls.n	8004380 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004368:	2b00      	cmp	r3, #0
 800436a:	d009      	beq.n	8004380 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	4413      	add	r3, r2
 8004374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004378:	461a      	mov	r2, r3
 800437a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800437e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f007 fc53 	bl	800bc2c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4a0a      	ldr	r2, [pc, #40]	@ (80043b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d90c      	bls.n	80043a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	799b      	ldrb	r3, [r3, #6]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d108      	bne.n	80043a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043a0:	461a      	mov	r2, r3
 80043a2:	2101      	movs	r1, #1
 80043a4:	f003 fe14 	bl	8007fd0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	4f54300a 	.word	0x4f54300a

080043b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	70fb      	strb	r3, [r7, #3]
 80043c4:	4613      	mov	r3, r2
 80043c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80043d0:	78fb      	ldrb	r3, [r7, #3]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d107      	bne.n	80043e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80043d6:	883b      	ldrh	r3, [r7, #0]
 80043d8:	0419      	lsls	r1, r3, #16
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80043e4:	e028      	b.n	8004438 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ec:	0c1b      	lsrs	r3, r3, #16
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	4413      	add	r3, r2
 80043f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043f4:	2300      	movs	r3, #0
 80043f6:	73fb      	strb	r3, [r7, #15]
 80043f8:	e00d      	b.n	8004416 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	7bfb      	ldrb	r3, [r7, #15]
 8004400:	3340      	adds	r3, #64	@ 0x40
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	0c1b      	lsrs	r3, r3, #16
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	4413      	add	r3, r2
 800440e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	3301      	adds	r3, #1
 8004414:	73fb      	strb	r3, [r7, #15]
 8004416:	7bfa      	ldrb	r2, [r7, #15]
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	3b01      	subs	r3, #1
 800441c:	429a      	cmp	r2, r3
 800441e:	d3ec      	bcc.n	80043fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004420:	883b      	ldrh	r3, [r7, #0]
 8004422:	0418      	lsls	r0, r3, #16
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6819      	ldr	r1, [r3, #0]
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	3b01      	subs	r3, #1
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	4302      	orrs	r2, r0
 8004430:	3340      	adds	r3, #64	@ 0x40
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	460b      	mov	r3, r1
 8004450:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	887a      	ldrh	r2, [r7, #2]
 8004458:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e267      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d075      	beq.n	800458a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800449e:	4b88      	ldr	r3, [pc, #544]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d00c      	beq.n	80044c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044aa:	4b85      	ldr	r3, [pc, #532]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d112      	bne.n	80044dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044b6:	4b82      	ldr	r3, [pc, #520]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044c2:	d10b      	bne.n	80044dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c4:	4b7e      	ldr	r3, [pc, #504]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d05b      	beq.n	8004588 <HAL_RCC_OscConfig+0x108>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d157      	bne.n	8004588 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e242      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044e4:	d106      	bne.n	80044f4 <HAL_RCC_OscConfig+0x74>
 80044e6:	4b76      	ldr	r3, [pc, #472]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a75      	ldr	r2, [pc, #468]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 80044ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044f0:	6013      	str	r3, [r2, #0]
 80044f2:	e01d      	b.n	8004530 <HAL_RCC_OscConfig+0xb0>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044fc:	d10c      	bne.n	8004518 <HAL_RCC_OscConfig+0x98>
 80044fe:	4b70      	ldr	r3, [pc, #448]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a6f      	ldr	r2, [pc, #444]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 8004504:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	4b6d      	ldr	r3, [pc, #436]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a6c      	ldr	r2, [pc, #432]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 8004510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	e00b      	b.n	8004530 <HAL_RCC_OscConfig+0xb0>
 8004518:	4b69      	ldr	r3, [pc, #420]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a68      	ldr	r2, [pc, #416]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 800451e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	4b66      	ldr	r3, [pc, #408]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a65      	ldr	r2, [pc, #404]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 800452a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800452e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d013      	beq.n	8004560 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004538:	f7fd fe20 	bl	800217c <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004540:	f7fd fe1c 	bl	800217c <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b64      	cmp	r3, #100	@ 0x64
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e207      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004552:	4b5b      	ldr	r3, [pc, #364]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0f0      	beq.n	8004540 <HAL_RCC_OscConfig+0xc0>
 800455e:	e014      	b.n	800458a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004560:	f7fd fe0c 	bl	800217c <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004568:	f7fd fe08 	bl	800217c <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b64      	cmp	r3, #100	@ 0x64
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e1f3      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800457a:	4b51      	ldr	r3, [pc, #324]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0xe8>
 8004586:	e000      	b.n	800458a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d063      	beq.n	800465e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004596:	4b4a      	ldr	r3, [pc, #296]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 030c 	and.w	r3, r3, #12
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00b      	beq.n	80045ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045a2:	4b47      	ldr	r3, [pc, #284]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d11c      	bne.n	80045e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045ae:	4b44      	ldr	r3, [pc, #272]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d116      	bne.n	80045e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ba:	4b41      	ldr	r3, [pc, #260]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d005      	beq.n	80045d2 <HAL_RCC_OscConfig+0x152>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d001      	beq.n	80045d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e1c7      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d2:	4b3b      	ldr	r3, [pc, #236]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	4937      	ldr	r1, [pc, #220]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045e6:	e03a      	b.n	800465e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d020      	beq.n	8004632 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045f0:	4b34      	ldr	r3, [pc, #208]	@ (80046c4 <HAL_RCC_OscConfig+0x244>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f6:	f7fd fdc1 	bl	800217c <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045fe:	f7fd fdbd 	bl	800217c <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e1a8      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004610:	4b2b      	ldr	r3, [pc, #172]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f0      	beq.n	80045fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800461c:	4b28      	ldr	r3, [pc, #160]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	4925      	ldr	r1, [pc, #148]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 800462c:	4313      	orrs	r3, r2
 800462e:	600b      	str	r3, [r1, #0]
 8004630:	e015      	b.n	800465e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004632:	4b24      	ldr	r3, [pc, #144]	@ (80046c4 <HAL_RCC_OscConfig+0x244>)
 8004634:	2200      	movs	r2, #0
 8004636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004638:	f7fd fda0 	bl	800217c <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004640:	f7fd fd9c 	bl	800217c <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e187      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004652:	4b1b      	ldr	r3, [pc, #108]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1f0      	bne.n	8004640 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b00      	cmp	r3, #0
 8004668:	d036      	beq.n	80046d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d016      	beq.n	80046a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004672:	4b15      	ldr	r3, [pc, #84]	@ (80046c8 <HAL_RCC_OscConfig+0x248>)
 8004674:	2201      	movs	r2, #1
 8004676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004678:	f7fd fd80 	bl	800217c <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004680:	f7fd fd7c 	bl	800217c <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e167      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004692:	4b0b      	ldr	r3, [pc, #44]	@ (80046c0 <HAL_RCC_OscConfig+0x240>)
 8004694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d0f0      	beq.n	8004680 <HAL_RCC_OscConfig+0x200>
 800469e:	e01b      	b.n	80046d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046a0:	4b09      	ldr	r3, [pc, #36]	@ (80046c8 <HAL_RCC_OscConfig+0x248>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a6:	f7fd fd69 	bl	800217c <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046ac:	e00e      	b.n	80046cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ae:	f7fd fd65 	bl	800217c <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d907      	bls.n	80046cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e150      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
 80046c0:	40023800 	.word	0x40023800
 80046c4:	42470000 	.word	0x42470000
 80046c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046cc:	4b88      	ldr	r3, [pc, #544]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 80046ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1ea      	bne.n	80046ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 8097 	beq.w	8004814 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046e6:	2300      	movs	r3, #0
 80046e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ea:	4b81      	ldr	r3, [pc, #516]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10f      	bne.n	8004716 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046f6:	2300      	movs	r3, #0
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	4b7d      	ldr	r3, [pc, #500]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fe:	4a7c      	ldr	r2, [pc, #496]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 8004700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004704:	6413      	str	r3, [r2, #64]	@ 0x40
 8004706:	4b7a      	ldr	r3, [pc, #488]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800470e:	60bb      	str	r3, [r7, #8]
 8004710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004712:	2301      	movs	r3, #1
 8004714:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004716:	4b77      	ldr	r3, [pc, #476]	@ (80048f4 <HAL_RCC_OscConfig+0x474>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800471e:	2b00      	cmp	r3, #0
 8004720:	d118      	bne.n	8004754 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004722:	4b74      	ldr	r3, [pc, #464]	@ (80048f4 <HAL_RCC_OscConfig+0x474>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a73      	ldr	r2, [pc, #460]	@ (80048f4 <HAL_RCC_OscConfig+0x474>)
 8004728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800472c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800472e:	f7fd fd25 	bl	800217c <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004734:	e008      	b.n	8004748 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004736:	f7fd fd21 	bl	800217c <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d901      	bls.n	8004748 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e10c      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004748:	4b6a      	ldr	r3, [pc, #424]	@ (80048f4 <HAL_RCC_OscConfig+0x474>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004750:	2b00      	cmp	r3, #0
 8004752:	d0f0      	beq.n	8004736 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d106      	bne.n	800476a <HAL_RCC_OscConfig+0x2ea>
 800475c:	4b64      	ldr	r3, [pc, #400]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 800475e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004760:	4a63      	ldr	r2, [pc, #396]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 8004762:	f043 0301 	orr.w	r3, r3, #1
 8004766:	6713      	str	r3, [r2, #112]	@ 0x70
 8004768:	e01c      	b.n	80047a4 <HAL_RCC_OscConfig+0x324>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b05      	cmp	r3, #5
 8004770:	d10c      	bne.n	800478c <HAL_RCC_OscConfig+0x30c>
 8004772:	4b5f      	ldr	r3, [pc, #380]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 8004774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004776:	4a5e      	ldr	r2, [pc, #376]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 8004778:	f043 0304 	orr.w	r3, r3, #4
 800477c:	6713      	str	r3, [r2, #112]	@ 0x70
 800477e:	4b5c      	ldr	r3, [pc, #368]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 8004780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004782:	4a5b      	ldr	r2, [pc, #364]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 8004784:	f043 0301 	orr.w	r3, r3, #1
 8004788:	6713      	str	r3, [r2, #112]	@ 0x70
 800478a:	e00b      	b.n	80047a4 <HAL_RCC_OscConfig+0x324>
 800478c:	4b58      	ldr	r3, [pc, #352]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 800478e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004790:	4a57      	ldr	r2, [pc, #348]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 8004792:	f023 0301 	bic.w	r3, r3, #1
 8004796:	6713      	str	r3, [r2, #112]	@ 0x70
 8004798:	4b55      	ldr	r3, [pc, #340]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 800479a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479c:	4a54      	ldr	r2, [pc, #336]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 800479e:	f023 0304 	bic.w	r3, r3, #4
 80047a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d015      	beq.n	80047d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ac:	f7fd fce6 	bl	800217c <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047b2:	e00a      	b.n	80047ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b4:	f7fd fce2 	bl	800217c <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e0cb      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ca:	4b49      	ldr	r3, [pc, #292]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 80047cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ce:	f003 0302 	and.w	r3, r3, #2
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0ee      	beq.n	80047b4 <HAL_RCC_OscConfig+0x334>
 80047d6:	e014      	b.n	8004802 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d8:	f7fd fcd0 	bl	800217c <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047de:	e00a      	b.n	80047f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e0:	f7fd fccc 	bl	800217c <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e0b5      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047f6:	4b3e      	ldr	r3, [pc, #248]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 80047f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1ee      	bne.n	80047e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004802:	7dfb      	ldrb	r3, [r7, #23]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d105      	bne.n	8004814 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004808:	4b39      	ldr	r3, [pc, #228]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 800480a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480c:	4a38      	ldr	r2, [pc, #224]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 800480e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004812:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 80a1 	beq.w	8004960 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800481e:	4b34      	ldr	r3, [pc, #208]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 030c 	and.w	r3, r3, #12
 8004826:	2b08      	cmp	r3, #8
 8004828:	d05c      	beq.n	80048e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d141      	bne.n	80048b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004832:	4b31      	ldr	r3, [pc, #196]	@ (80048f8 <HAL_RCC_OscConfig+0x478>)
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004838:	f7fd fca0 	bl	800217c <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004840:	f7fd fc9c 	bl	800217c <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e087      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004852:	4b27      	ldr	r3, [pc, #156]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f0      	bne.n	8004840 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69da      	ldr	r2, [r3, #28]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486c:	019b      	lsls	r3, r3, #6
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004874:	085b      	lsrs	r3, r3, #1
 8004876:	3b01      	subs	r3, #1
 8004878:	041b      	lsls	r3, r3, #16
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004880:	061b      	lsls	r3, r3, #24
 8004882:	491b      	ldr	r1, [pc, #108]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 8004884:	4313      	orrs	r3, r2
 8004886:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004888:	4b1b      	ldr	r3, [pc, #108]	@ (80048f8 <HAL_RCC_OscConfig+0x478>)
 800488a:	2201      	movs	r2, #1
 800488c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488e:	f7fd fc75 	bl	800217c <HAL_GetTick>
 8004892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004896:	f7fd fc71 	bl	800217c <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e05c      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048a8:	4b11      	ldr	r3, [pc, #68]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0f0      	beq.n	8004896 <HAL_RCC_OscConfig+0x416>
 80048b4:	e054      	b.n	8004960 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b6:	4b10      	ldr	r3, [pc, #64]	@ (80048f8 <HAL_RCC_OscConfig+0x478>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048bc:	f7fd fc5e 	bl	800217c <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c4:	f7fd fc5a 	bl	800217c <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e045      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d6:	4b06      	ldr	r3, [pc, #24]	@ (80048f0 <HAL_RCC_OscConfig+0x470>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0x444>
 80048e2:	e03d      	b.n	8004960 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d107      	bne.n	80048fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e038      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
 80048f0:	40023800 	.word	0x40023800
 80048f4:	40007000 	.word	0x40007000
 80048f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048fc:	4b1b      	ldr	r3, [pc, #108]	@ (800496c <HAL_RCC_OscConfig+0x4ec>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d028      	beq.n	800495c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004914:	429a      	cmp	r2, r3
 8004916:	d121      	bne.n	800495c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004922:	429a      	cmp	r2, r3
 8004924:	d11a      	bne.n	800495c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800492c:	4013      	ands	r3, r2
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004932:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004934:	4293      	cmp	r3, r2
 8004936:	d111      	bne.n	800495c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004942:	085b      	lsrs	r3, r3, #1
 8004944:	3b01      	subs	r3, #1
 8004946:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004948:	429a      	cmp	r2, r3
 800494a:	d107      	bne.n	800495c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004956:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004958:	429a      	cmp	r2, r3
 800495a:	d001      	beq.n	8004960 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e000      	b.n	8004962 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40023800 	.word	0x40023800

08004970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e0cc      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004984:	4b68      	ldr	r3, [pc, #416]	@ (8004b28 <HAL_RCC_ClockConfig+0x1b8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d90c      	bls.n	80049ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004992:	4b65      	ldr	r3, [pc, #404]	@ (8004b28 <HAL_RCC_ClockConfig+0x1b8>)
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	b2d2      	uxtb	r2, r2
 8004998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800499a:	4b63      	ldr	r3, [pc, #396]	@ (8004b28 <HAL_RCC_ClockConfig+0x1b8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	683a      	ldr	r2, [r7, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d001      	beq.n	80049ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e0b8      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d020      	beq.n	80049fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049c4:	4b59      	ldr	r3, [pc, #356]	@ (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	4a58      	ldr	r2, [pc, #352]	@ (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 80049ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049dc:	4b53      	ldr	r3, [pc, #332]	@ (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	4a52      	ldr	r2, [pc, #328]	@ (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049e8:	4b50      	ldr	r3, [pc, #320]	@ (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	494d      	ldr	r1, [pc, #308]	@ (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d044      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d107      	bne.n	8004a1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0e:	4b47      	ldr	r3, [pc, #284]	@ (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d119      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e07f      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d003      	beq.n	8004a2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	d107      	bne.n	8004a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a2e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e06f      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e067      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a4e:	4b37      	ldr	r3, [pc, #220]	@ (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f023 0203 	bic.w	r2, r3, #3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	4934      	ldr	r1, [pc, #208]	@ (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a60:	f7fd fb8c 	bl	800217c <HAL_GetTick>
 8004a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a66:	e00a      	b.n	8004a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a68:	f7fd fb88 	bl	800217c <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e04f      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7e:	4b2b      	ldr	r3, [pc, #172]	@ (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 020c 	and.w	r2, r3, #12
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d1eb      	bne.n	8004a68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a90:	4b25      	ldr	r3, [pc, #148]	@ (8004b28 <HAL_RCC_ClockConfig+0x1b8>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d20c      	bcs.n	8004ab8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9e:	4b22      	ldr	r3, [pc, #136]	@ (8004b28 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	b2d2      	uxtb	r2, r2
 8004aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa6:	4b20      	ldr	r3, [pc, #128]	@ (8004b28 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d001      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e032      	b.n	8004b1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d008      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ac4:	4b19      	ldr	r3, [pc, #100]	@ (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	4916      	ldr	r1, [pc, #88]	@ (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0308 	and.w	r3, r3, #8
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d009      	beq.n	8004af6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ae2:	4b12      	ldr	r3, [pc, #72]	@ (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	490e      	ldr	r1, [pc, #56]	@ (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004af6:	f000 f821 	bl	8004b3c <HAL_RCC_GetSysClockFreq>
 8004afa:	4602      	mov	r2, r0
 8004afc:	4b0b      	ldr	r3, [pc, #44]	@ (8004b2c <HAL_RCC_ClockConfig+0x1bc>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	091b      	lsrs	r3, r3, #4
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	490a      	ldr	r1, [pc, #40]	@ (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 8004b08:	5ccb      	ldrb	r3, [r1, r3]
 8004b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0e:	4a09      	ldr	r2, [pc, #36]	@ (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b12:	4b09      	ldr	r3, [pc, #36]	@ (8004b38 <HAL_RCC_ClockConfig+0x1c8>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fd faec 	bl	80020f4 <HAL_InitTick>

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40023c00 	.word	0x40023c00
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	0800c2c0 	.word	0x0800c2c0
 8004b34:	2000000c 	.word	0x2000000c
 8004b38:	20000010 	.word	0x20000010

08004b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b40:	b094      	sub	sp, #80	@ 0x50
 8004b42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b54:	4b79      	ldr	r3, [pc, #484]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 030c 	and.w	r3, r3, #12
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d00d      	beq.n	8004b7c <HAL_RCC_GetSysClockFreq+0x40>
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	f200 80e1 	bhi.w	8004d28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d002      	beq.n	8004b70 <HAL_RCC_GetSysClockFreq+0x34>
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d003      	beq.n	8004b76 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b6e:	e0db      	b.n	8004d28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b70:	4b73      	ldr	r3, [pc, #460]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b72:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b74:	e0db      	b.n	8004d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b76:	4b73      	ldr	r3, [pc, #460]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b78:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b7a:	e0d8      	b.n	8004d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b7c:	4b6f      	ldr	r3, [pc, #444]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b84:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b86:	4b6d      	ldr	r3, [pc, #436]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d063      	beq.n	8004c5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b92:	4b6a      	ldr	r3, [pc, #424]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	099b      	lsrs	r3, r3, #6
 8004b98:	2200      	movs	r2, #0
 8004b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b9c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ba4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004baa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bae:	4622      	mov	r2, r4
 8004bb0:	462b      	mov	r3, r5
 8004bb2:	f04f 0000 	mov.w	r0, #0
 8004bb6:	f04f 0100 	mov.w	r1, #0
 8004bba:	0159      	lsls	r1, r3, #5
 8004bbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bc0:	0150      	lsls	r0, r2, #5
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4621      	mov	r1, r4
 8004bc8:	1a51      	subs	r1, r2, r1
 8004bca:	6139      	str	r1, [r7, #16]
 8004bcc:	4629      	mov	r1, r5
 8004bce:	eb63 0301 	sbc.w	r3, r3, r1
 8004bd2:	617b      	str	r3, [r7, #20]
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004be0:	4659      	mov	r1, fp
 8004be2:	018b      	lsls	r3, r1, #6
 8004be4:	4651      	mov	r1, sl
 8004be6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bea:	4651      	mov	r1, sl
 8004bec:	018a      	lsls	r2, r1, #6
 8004bee:	4651      	mov	r1, sl
 8004bf0:	ebb2 0801 	subs.w	r8, r2, r1
 8004bf4:	4659      	mov	r1, fp
 8004bf6:	eb63 0901 	sbc.w	r9, r3, r1
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c0e:	4690      	mov	r8, r2
 8004c10:	4699      	mov	r9, r3
 8004c12:	4623      	mov	r3, r4
 8004c14:	eb18 0303 	adds.w	r3, r8, r3
 8004c18:	60bb      	str	r3, [r7, #8]
 8004c1a:	462b      	mov	r3, r5
 8004c1c:	eb49 0303 	adc.w	r3, r9, r3
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c2e:	4629      	mov	r1, r5
 8004c30:	024b      	lsls	r3, r1, #9
 8004c32:	4621      	mov	r1, r4
 8004c34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c38:	4621      	mov	r1, r4
 8004c3a:	024a      	lsls	r2, r1, #9
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c42:	2200      	movs	r2, #0
 8004c44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c4c:	f7fb fabc 	bl	80001c8 <__aeabi_uldivmod>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4613      	mov	r3, r2
 8004c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c58:	e058      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c5a:	4b38      	ldr	r3, [pc, #224]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	099b      	lsrs	r3, r3, #6
 8004c60:	2200      	movs	r2, #0
 8004c62:	4618      	mov	r0, r3
 8004c64:	4611      	mov	r1, r2
 8004c66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c6a:	623b      	str	r3, [r7, #32]
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c74:	4642      	mov	r2, r8
 8004c76:	464b      	mov	r3, r9
 8004c78:	f04f 0000 	mov.w	r0, #0
 8004c7c:	f04f 0100 	mov.w	r1, #0
 8004c80:	0159      	lsls	r1, r3, #5
 8004c82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c86:	0150      	lsls	r0, r2, #5
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4641      	mov	r1, r8
 8004c8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c92:	4649      	mov	r1, r9
 8004c94:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ca4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ca8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cac:	ebb2 040a 	subs.w	r4, r2, sl
 8004cb0:	eb63 050b 	sbc.w	r5, r3, fp
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	00eb      	lsls	r3, r5, #3
 8004cbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cc2:	00e2      	lsls	r2, r4, #3
 8004cc4:	4614      	mov	r4, r2
 8004cc6:	461d      	mov	r5, r3
 8004cc8:	4643      	mov	r3, r8
 8004cca:	18e3      	adds	r3, r4, r3
 8004ccc:	603b      	str	r3, [r7, #0]
 8004cce:	464b      	mov	r3, r9
 8004cd0:	eb45 0303 	adc.w	r3, r5, r3
 8004cd4:	607b      	str	r3, [r7, #4]
 8004cd6:	f04f 0200 	mov.w	r2, #0
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ce2:	4629      	mov	r1, r5
 8004ce4:	028b      	lsls	r3, r1, #10
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cec:	4621      	mov	r1, r4
 8004cee:	028a      	lsls	r2, r1, #10
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	61bb      	str	r3, [r7, #24]
 8004cfa:	61fa      	str	r2, [r7, #28]
 8004cfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d00:	f7fb fa62 	bl	80001c8 <__aeabi_uldivmod>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4613      	mov	r3, r2
 8004d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d3c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	0c1b      	lsrs	r3, r3, #16
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	3301      	adds	r3, #1
 8004d18:	005b      	lsls	r3, r3, #1
 8004d1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d26:	e002      	b.n	8004d2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d28:	4b05      	ldr	r3, [pc, #20]	@ (8004d40 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3750      	adds	r7, #80	@ 0x50
 8004d34:	46bd      	mov	sp, r7
 8004d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d3a:	bf00      	nop
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	00f42400 	.word	0x00f42400
 8004d44:	007a1200 	.word	0x007a1200

08004d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d4c:	4b03      	ldr	r3, [pc, #12]	@ (8004d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	2000000c 	.word	0x2000000c

08004d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d64:	f7ff fff0 	bl	8004d48 <HAL_RCC_GetHCLKFreq>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	4b05      	ldr	r3, [pc, #20]	@ (8004d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	0a9b      	lsrs	r3, r3, #10
 8004d70:	f003 0307 	and.w	r3, r3, #7
 8004d74:	4903      	ldr	r1, [pc, #12]	@ (8004d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d76:	5ccb      	ldrb	r3, [r1, r3]
 8004d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	40023800 	.word	0x40023800
 8004d84:	0800c2d0 	.word	0x0800c2d0

08004d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d8c:	f7ff ffdc 	bl	8004d48 <HAL_RCC_GetHCLKFreq>
 8004d90:	4602      	mov	r2, r0
 8004d92:	4b05      	ldr	r3, [pc, #20]	@ (8004da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	0b5b      	lsrs	r3, r3, #13
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	4903      	ldr	r1, [pc, #12]	@ (8004dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d9e:	5ccb      	ldrb	r3, [r1, r3]
 8004da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40023800 	.word	0x40023800
 8004dac:	0800c2d0 	.word	0x0800c2d0

08004db0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e07b      	b.n	8004eba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d108      	bne.n	8004ddc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dd2:	d009      	beq.n	8004de8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	61da      	str	r2, [r3, #28]
 8004dda:	e005      	b.n	8004de8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fc fcd6 	bl	80017b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e6c:	ea42 0103 	orr.w	r1, r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e74:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	0c1b      	lsrs	r3, r3, #16
 8004e86:	f003 0104 	and.w	r1, r3, #4
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8e:	f003 0210 	and.w	r2, r3, #16
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	69da      	ldr	r2, [r3, #28]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ea8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d101      	bne.n	8004ed4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e041      	b.n	8004f58 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eda:	b2db      	uxtb	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d106      	bne.n	8004eee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7fc fe79 	bl	8001be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	3304      	adds	r3, #4
 8004efe:	4619      	mov	r1, r3
 8004f00:	4610      	mov	r0, r2
 8004f02:	f000 fb3b 	bl	800557c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e041      	b.n	8004ff6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d106      	bne.n	8004f8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7fc fdf2 	bl	8001b70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	f000 faec 	bl	800557c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d109      	bne.n	8005024 <HAL_TIM_PWM_Start+0x24>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b01      	cmp	r3, #1
 800501a:	bf14      	ite	ne
 800501c:	2301      	movne	r3, #1
 800501e:	2300      	moveq	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	e022      	b.n	800506a <HAL_TIM_PWM_Start+0x6a>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	2b04      	cmp	r3, #4
 8005028:	d109      	bne.n	800503e <HAL_TIM_PWM_Start+0x3e>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b01      	cmp	r3, #1
 8005034:	bf14      	ite	ne
 8005036:	2301      	movne	r3, #1
 8005038:	2300      	moveq	r3, #0
 800503a:	b2db      	uxtb	r3, r3
 800503c:	e015      	b.n	800506a <HAL_TIM_PWM_Start+0x6a>
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b08      	cmp	r3, #8
 8005042:	d109      	bne.n	8005058 <HAL_TIM_PWM_Start+0x58>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	bf14      	ite	ne
 8005050:	2301      	movne	r3, #1
 8005052:	2300      	moveq	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	e008      	b.n	800506a <HAL_TIM_PWM_Start+0x6a>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b01      	cmp	r3, #1
 8005062:	bf14      	ite	ne
 8005064:	2301      	movne	r3, #1
 8005066:	2300      	moveq	r3, #0
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e07c      	b.n	800516c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d104      	bne.n	8005082 <HAL_TIM_PWM_Start+0x82>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005080:	e013      	b.n	80050aa <HAL_TIM_PWM_Start+0xaa>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b04      	cmp	r3, #4
 8005086:	d104      	bne.n	8005092 <HAL_TIM_PWM_Start+0x92>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005090:	e00b      	b.n	80050aa <HAL_TIM_PWM_Start+0xaa>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b08      	cmp	r3, #8
 8005096:	d104      	bne.n	80050a2 <HAL_TIM_PWM_Start+0xa2>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050a0:	e003      	b.n	80050aa <HAL_TIM_PWM_Start+0xaa>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2202      	movs	r2, #2
 80050a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2201      	movs	r2, #1
 80050b0:	6839      	ldr	r1, [r7, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fcbe 	bl	8005a34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a2d      	ldr	r2, [pc, #180]	@ (8005174 <HAL_TIM_PWM_Start+0x174>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d004      	beq.n	80050cc <HAL_TIM_PWM_Start+0xcc>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a2c      	ldr	r2, [pc, #176]	@ (8005178 <HAL_TIM_PWM_Start+0x178>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d101      	bne.n	80050d0 <HAL_TIM_PWM_Start+0xd0>
 80050cc:	2301      	movs	r3, #1
 80050ce:	e000      	b.n	80050d2 <HAL_TIM_PWM_Start+0xd2>
 80050d0:	2300      	movs	r3, #0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d007      	beq.n	80050e6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a22      	ldr	r2, [pc, #136]	@ (8005174 <HAL_TIM_PWM_Start+0x174>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d022      	beq.n	8005136 <HAL_TIM_PWM_Start+0x136>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050f8:	d01d      	beq.n	8005136 <HAL_TIM_PWM_Start+0x136>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a1f      	ldr	r2, [pc, #124]	@ (800517c <HAL_TIM_PWM_Start+0x17c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d018      	beq.n	8005136 <HAL_TIM_PWM_Start+0x136>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a1d      	ldr	r2, [pc, #116]	@ (8005180 <HAL_TIM_PWM_Start+0x180>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d013      	beq.n	8005136 <HAL_TIM_PWM_Start+0x136>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a1c      	ldr	r2, [pc, #112]	@ (8005184 <HAL_TIM_PWM_Start+0x184>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00e      	beq.n	8005136 <HAL_TIM_PWM_Start+0x136>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a16      	ldr	r2, [pc, #88]	@ (8005178 <HAL_TIM_PWM_Start+0x178>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d009      	beq.n	8005136 <HAL_TIM_PWM_Start+0x136>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a18      	ldr	r2, [pc, #96]	@ (8005188 <HAL_TIM_PWM_Start+0x188>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d004      	beq.n	8005136 <HAL_TIM_PWM_Start+0x136>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a16      	ldr	r2, [pc, #88]	@ (800518c <HAL_TIM_PWM_Start+0x18c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d111      	bne.n	800515a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b06      	cmp	r3, #6
 8005146:	d010      	beq.n	800516a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f042 0201 	orr.w	r2, r2, #1
 8005156:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005158:	e007      	b.n	800516a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f042 0201 	orr.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40010000 	.word	0x40010000
 8005178:	40010400 	.word	0x40010400
 800517c:	40000400 	.word	0x40000400
 8005180:	40000800 	.word	0x40000800
 8005184:	40000c00 	.word	0x40000c00
 8005188:	40014000 	.word	0x40014000
 800518c:	40001800 	.word	0x40001800

08005190 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e097      	b.n	80052d4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d106      	bne.n	80051be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7fc fb63 	bl	8001884 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2202      	movs	r2, #2
 80051c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6812      	ldr	r2, [r2, #0]
 80051d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051d4:	f023 0307 	bic.w	r3, r3, #7
 80051d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	3304      	adds	r3, #4
 80051e2:	4619      	mov	r1, r3
 80051e4:	4610      	mov	r0, r2
 80051e6:	f000 f9c9 	bl	800557c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005212:	f023 0303 	bic.w	r3, r3, #3
 8005216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	021b      	lsls	r3, r3, #8
 8005222:	4313      	orrs	r3, r2
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005230:	f023 030c 	bic.w	r3, r3, #12
 8005234:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800523c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005240:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68da      	ldr	r2, [r3, #12]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	021b      	lsls	r3, r3, #8
 800524c:	4313      	orrs	r3, r2
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	4313      	orrs	r3, r2
 8005252:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	011a      	lsls	r2, r3, #4
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	031b      	lsls	r3, r3, #12
 8005260:	4313      	orrs	r3, r2
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800526e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005276:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	011b      	lsls	r3, r3, #4
 8005282:	4313      	orrs	r3, r2
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3718      	adds	r7, #24
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005304:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d110      	bne.n	800532e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800530c:	7bfb      	ldrb	r3, [r7, #15]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d102      	bne.n	8005318 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005312:	7b7b      	ldrb	r3, [r7, #13]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d001      	beq.n	800531c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e069      	b.n	80053f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2202      	movs	r2, #2
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2202      	movs	r2, #2
 8005328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800532c:	e031      	b.n	8005392 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b04      	cmp	r3, #4
 8005332:	d110      	bne.n	8005356 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005334:	7bbb      	ldrb	r3, [r7, #14]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d102      	bne.n	8005340 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800533a:	7b3b      	ldrb	r3, [r7, #12]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d001      	beq.n	8005344 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e055      	b.n	80053f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005354:	e01d      	b.n	8005392 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005356:	7bfb      	ldrb	r3, [r7, #15]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d108      	bne.n	800536e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800535c:	7bbb      	ldrb	r3, [r7, #14]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d105      	bne.n	800536e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005362:	7b7b      	ldrb	r3, [r7, #13]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d102      	bne.n	800536e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005368:	7b3b      	ldrb	r3, [r7, #12]
 800536a:	2b01      	cmp	r3, #1
 800536c:	d001      	beq.n	8005372 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e03e      	b.n	80053f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2202      	movs	r2, #2
 8005376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2202      	movs	r2, #2
 800537e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2202      	movs	r2, #2
 8005386:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2202      	movs	r2, #2
 800538e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <HAL_TIM_Encoder_Start+0xc4>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2b04      	cmp	r3, #4
 800539c:	d008      	beq.n	80053b0 <HAL_TIM_Encoder_Start+0xd4>
 800539e:	e00f      	b.n	80053c0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2201      	movs	r2, #1
 80053a6:	2100      	movs	r1, #0
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 fb43 	bl	8005a34 <TIM_CCxChannelCmd>
      break;
 80053ae:	e016      	b.n	80053de <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2201      	movs	r2, #1
 80053b6:	2104      	movs	r1, #4
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fb3b 	bl	8005a34 <TIM_CCxChannelCmd>
      break;
 80053be:	e00e      	b.n	80053de <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2201      	movs	r2, #1
 80053c6:	2100      	movs	r1, #0
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 fb33 	bl	8005a34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2201      	movs	r2, #1
 80053d4:	2104      	movs	r1, #4
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 fb2c 	bl	8005a34 <TIM_CCxChannelCmd>
      break;
 80053dc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 0201 	orr.w	r2, r2, #1
 80053ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005404:	2300      	movs	r3, #0
 8005406:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800540e:	2b01      	cmp	r3, #1
 8005410:	d101      	bne.n	8005416 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005412:	2302      	movs	r3, #2
 8005414:	e0ae      	b.n	8005574 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b0c      	cmp	r3, #12
 8005422:	f200 809f 	bhi.w	8005564 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005426:	a201      	add	r2, pc, #4	@ (adr r2, 800542c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542c:	08005461 	.word	0x08005461
 8005430:	08005565 	.word	0x08005565
 8005434:	08005565 	.word	0x08005565
 8005438:	08005565 	.word	0x08005565
 800543c:	080054a1 	.word	0x080054a1
 8005440:	08005565 	.word	0x08005565
 8005444:	08005565 	.word	0x08005565
 8005448:	08005565 	.word	0x08005565
 800544c:	080054e3 	.word	0x080054e3
 8005450:	08005565 	.word	0x08005565
 8005454:	08005565 	.word	0x08005565
 8005458:	08005565 	.word	0x08005565
 800545c:	08005523 	.word	0x08005523
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68b9      	ldr	r1, [r7, #8]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 f934 	bl	80056d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f042 0208 	orr.w	r2, r2, #8
 800547a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f022 0204 	bic.w	r2, r2, #4
 800548a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6999      	ldr	r1, [r3, #24]
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	691a      	ldr	r2, [r3, #16]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	619a      	str	r2, [r3, #24]
      break;
 800549e:	e064      	b.n	800556a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68b9      	ldr	r1, [r7, #8]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 f984 	bl	80057b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699a      	ldr	r2, [r3, #24]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	699a      	ldr	r2, [r3, #24]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6999      	ldr	r1, [r3, #24]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	021a      	lsls	r2, r3, #8
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	430a      	orrs	r2, r1
 80054de:	619a      	str	r2, [r3, #24]
      break;
 80054e0:	e043      	b.n	800556a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68b9      	ldr	r1, [r7, #8]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f000 f9d9 	bl	80058a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69da      	ldr	r2, [r3, #28]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f042 0208 	orr.w	r2, r2, #8
 80054fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69da      	ldr	r2, [r3, #28]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0204 	bic.w	r2, r2, #4
 800550c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69d9      	ldr	r1, [r3, #28]
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	691a      	ldr	r2, [r3, #16]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	61da      	str	r2, [r3, #28]
      break;
 8005520:	e023      	b.n	800556a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68b9      	ldr	r1, [r7, #8]
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fa2d 	bl	8005988 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69da      	ldr	r2, [r3, #28]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800553c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69da      	ldr	r2, [r3, #28]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800554c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69d9      	ldr	r1, [r3, #28]
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	021a      	lsls	r2, r3, #8
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	61da      	str	r2, [r3, #28]
      break;
 8005562:	e002      	b.n	800556a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	75fb      	strb	r3, [r7, #23]
      break;
 8005568:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005572:	7dfb      	ldrb	r3, [r7, #23]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a46      	ldr	r2, [pc, #280]	@ (80056a8 <TIM_Base_SetConfig+0x12c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d013      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800559a:	d00f      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a43      	ldr	r2, [pc, #268]	@ (80056ac <TIM_Base_SetConfig+0x130>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d00b      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a42      	ldr	r2, [pc, #264]	@ (80056b0 <TIM_Base_SetConfig+0x134>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d007      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a41      	ldr	r2, [pc, #260]	@ (80056b4 <TIM_Base_SetConfig+0x138>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d003      	beq.n	80055bc <TIM_Base_SetConfig+0x40>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a40      	ldr	r2, [pc, #256]	@ (80056b8 <TIM_Base_SetConfig+0x13c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d108      	bne.n	80055ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a35      	ldr	r2, [pc, #212]	@ (80056a8 <TIM_Base_SetConfig+0x12c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d02b      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055dc:	d027      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a32      	ldr	r2, [pc, #200]	@ (80056ac <TIM_Base_SetConfig+0x130>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d023      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a31      	ldr	r2, [pc, #196]	@ (80056b0 <TIM_Base_SetConfig+0x134>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d01f      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a30      	ldr	r2, [pc, #192]	@ (80056b4 <TIM_Base_SetConfig+0x138>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d01b      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a2f      	ldr	r2, [pc, #188]	@ (80056b8 <TIM_Base_SetConfig+0x13c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d017      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a2e      	ldr	r2, [pc, #184]	@ (80056bc <TIM_Base_SetConfig+0x140>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d013      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a2d      	ldr	r2, [pc, #180]	@ (80056c0 <TIM_Base_SetConfig+0x144>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d00f      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a2c      	ldr	r2, [pc, #176]	@ (80056c4 <TIM_Base_SetConfig+0x148>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d00b      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a2b      	ldr	r2, [pc, #172]	@ (80056c8 <TIM_Base_SetConfig+0x14c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d007      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a2a      	ldr	r2, [pc, #168]	@ (80056cc <TIM_Base_SetConfig+0x150>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d003      	beq.n	800562e <TIM_Base_SetConfig+0xb2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a29      	ldr	r2, [pc, #164]	@ (80056d0 <TIM_Base_SetConfig+0x154>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d108      	bne.n	8005640 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	4313      	orrs	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a10      	ldr	r2, [pc, #64]	@ (80056a8 <TIM_Base_SetConfig+0x12c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_Base_SetConfig+0xf8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a12      	ldr	r2, [pc, #72]	@ (80056b8 <TIM_Base_SetConfig+0x13c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d103      	bne.n	800567c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	691a      	ldr	r2, [r3, #16]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b01      	cmp	r3, #1
 800568c:	d105      	bne.n	800569a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f023 0201 	bic.w	r2, r3, #1
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	611a      	str	r2, [r3, #16]
  }
}
 800569a:	bf00      	nop
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	40010000 	.word	0x40010000
 80056ac:	40000400 	.word	0x40000400
 80056b0:	40000800 	.word	0x40000800
 80056b4:	40000c00 	.word	0x40000c00
 80056b8:	40010400 	.word	0x40010400
 80056bc:	40014000 	.word	0x40014000
 80056c0:	40014400 	.word	0x40014400
 80056c4:	40014800 	.word	0x40014800
 80056c8:	40001800 	.word	0x40001800
 80056cc:	40001c00 	.word	0x40001c00
 80056d0:	40002000 	.word	0x40002000

080056d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	f023 0201 	bic.w	r2, r3, #1
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0303 	bic.w	r3, r3, #3
 800570a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	4313      	orrs	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f023 0302 	bic.w	r3, r3, #2
 800571c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a20      	ldr	r2, [pc, #128]	@ (80057ac <TIM_OC1_SetConfig+0xd8>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d003      	beq.n	8005738 <TIM_OC1_SetConfig+0x64>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a1f      	ldr	r2, [pc, #124]	@ (80057b0 <TIM_OC1_SetConfig+0xdc>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d10c      	bne.n	8005752 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 0308 	bic.w	r3, r3, #8
 800573e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f023 0304 	bic.w	r3, r3, #4
 8005750:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a15      	ldr	r2, [pc, #84]	@ (80057ac <TIM_OC1_SetConfig+0xd8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d003      	beq.n	8005762 <TIM_OC1_SetConfig+0x8e>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a14      	ldr	r2, [pc, #80]	@ (80057b0 <TIM_OC1_SetConfig+0xdc>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d111      	bne.n	8005786 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685a      	ldr	r2, [r3, #4]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	697a      	ldr	r2, [r7, #20]
 800579e:	621a      	str	r2, [r3, #32]
}
 80057a0:	bf00      	nop
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	40010000 	.word	0x40010000
 80057b0:	40010400 	.word	0x40010400

080057b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	f023 0210 	bic.w	r2, r3, #16
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f023 0320 	bic.w	r3, r3, #32
 80057fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	011b      	lsls	r3, r3, #4
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a22      	ldr	r2, [pc, #136]	@ (8005898 <TIM_OC2_SetConfig+0xe4>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d003      	beq.n	800581c <TIM_OC2_SetConfig+0x68>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a21      	ldr	r2, [pc, #132]	@ (800589c <TIM_OC2_SetConfig+0xe8>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d10d      	bne.n	8005838 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	011b      	lsls	r3, r3, #4
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	4313      	orrs	r3, r2
 800582e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005836:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a17      	ldr	r2, [pc, #92]	@ (8005898 <TIM_OC2_SetConfig+0xe4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d003      	beq.n	8005848 <TIM_OC2_SetConfig+0x94>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a16      	ldr	r2, [pc, #88]	@ (800589c <TIM_OC2_SetConfig+0xe8>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d113      	bne.n	8005870 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800584e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005856:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	693a      	ldr	r2, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	621a      	str	r2, [r3, #32]
}
 800588a:	bf00      	nop
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40010000 	.word	0x40010000
 800589c:	40010400 	.word	0x40010400

080058a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0303 	bic.w	r3, r3, #3
 80058d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	021b      	lsls	r3, r3, #8
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a21      	ldr	r2, [pc, #132]	@ (8005980 <TIM_OC3_SetConfig+0xe0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d003      	beq.n	8005906 <TIM_OC3_SetConfig+0x66>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a20      	ldr	r2, [pc, #128]	@ (8005984 <TIM_OC3_SetConfig+0xe4>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d10d      	bne.n	8005922 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800590c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a16      	ldr	r2, [pc, #88]	@ (8005980 <TIM_OC3_SetConfig+0xe0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d003      	beq.n	8005932 <TIM_OC3_SetConfig+0x92>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a15      	ldr	r2, [pc, #84]	@ (8005984 <TIM_OC3_SetConfig+0xe4>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d113      	bne.n	800595a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	011b      	lsls	r3, r3, #4
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	4313      	orrs	r3, r2
 800594c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4313      	orrs	r3, r2
 8005958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	621a      	str	r2, [r3, #32]
}
 8005974:	bf00      	nop
 8005976:	371c      	adds	r7, #28
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	40010000 	.word	0x40010000
 8005984:	40010400 	.word	0x40010400

08005988 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a1b      	ldr	r3, [r3, #32]
 800599c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	021b      	lsls	r3, r3, #8
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	031b      	lsls	r3, r3, #12
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a12      	ldr	r2, [pc, #72]	@ (8005a2c <TIM_OC4_SetConfig+0xa4>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d003      	beq.n	80059f0 <TIM_OC4_SetConfig+0x68>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a11      	ldr	r2, [pc, #68]	@ (8005a30 <TIM_OC4_SetConfig+0xa8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d109      	bne.n	8005a04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	019b      	lsls	r3, r3, #6
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	621a      	str	r2, [r3, #32]
}
 8005a1e:	bf00      	nop
 8005a20:	371c      	adds	r7, #28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	40010000 	.word	0x40010000
 8005a30:	40010400 	.word	0x40010400

08005a34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f003 031f 	and.w	r3, r3, #31
 8005a46:	2201      	movs	r2, #1
 8005a48:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a1a      	ldr	r2, [r3, #32]
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	43db      	mvns	r3, r3
 8005a56:	401a      	ands	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a1a      	ldr	r2, [r3, #32]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f003 031f 	and.w	r3, r3, #31
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	621a      	str	r2, [r3, #32]
}
 8005a72:	bf00      	nop
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
	...

08005a80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e05a      	b.n	8005b4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005abe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a21      	ldr	r2, [pc, #132]	@ (8005b5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d022      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ae4:	d01d      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1d      	ldr	r2, [pc, #116]	@ (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d018      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a1b      	ldr	r2, [pc, #108]	@ (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d013      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1a      	ldr	r2, [pc, #104]	@ (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d00e      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a18      	ldr	r2, [pc, #96]	@ (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d009      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a17      	ldr	r2, [pc, #92]	@ (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d004      	beq.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a15      	ldr	r2, [pc, #84]	@ (8005b74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d10c      	bne.n	8005b3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40010000 	.word	0x40010000
 8005b60:	40000400 	.word	0x40000400
 8005b64:	40000800 	.word	0x40000800
 8005b68:	40000c00 	.word	0x40000c00
 8005b6c:	40010400 	.word	0x40010400
 8005b70:	40014000 	.word	0x40014000
 8005b74:	40001800 	.word	0x40001800

08005b78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e042      	b.n	8005c10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d106      	bne.n	8005ba4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fc f980 	bl	8001ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2224      	movs	r2, #36	@ 0x24
 8005ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fcdb 	bl	8006578 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	691a      	ldr	r2, [r3, #16]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695a      	ldr	r2, [r3, #20]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005be0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68da      	ldr	r2, [r3, #12]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005bf0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	4613      	mov	r3, r2
 8005c24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b20      	cmp	r3, #32
 8005c30:	d112      	bne.n	8005c58 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d002      	beq.n	8005c3e <HAL_UART_Receive_IT+0x26>
 8005c38:	88fb      	ldrh	r3, [r7, #6]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e00b      	b.n	8005c5a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c48:	88fb      	ldrh	r3, [r7, #6]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	68b9      	ldr	r1, [r7, #8]
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 faba 	bl	80061c8 <UART_Start_Receive_IT>
 8005c54:	4603      	mov	r3, r0
 8005c56:	e000      	b.n	8005c5a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005c58:	2302      	movs	r3, #2
  }
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3710      	adds	r7, #16
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
	...

08005c64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b0ba      	sub	sp, #232	@ 0xe8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005c90:	2300      	movs	r3, #0
 8005c92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c9a:	f003 030f 	and.w	r3, r3, #15
 8005c9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005ca2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10f      	bne.n	8005cca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cae:	f003 0320 	and.w	r3, r3, #32
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d009      	beq.n	8005cca <HAL_UART_IRQHandler+0x66>
 8005cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fb99 	bl	80063fa <UART_Receive_IT>
      return;
 8005cc8:	e25b      	b.n	8006182 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005cca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f000 80de 	beq.w	8005e90 <HAL_UART_IRQHandler+0x22c>
 8005cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d106      	bne.n	8005cee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ce4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 80d1 	beq.w	8005e90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00b      	beq.n	8005d12 <HAL_UART_IRQHandler+0xae>
 8005cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d0a:	f043 0201 	orr.w	r2, r3, #1
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d16:	f003 0304 	and.w	r3, r3, #4
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00b      	beq.n	8005d36 <HAL_UART_IRQHandler+0xd2>
 8005d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d005      	beq.n	8005d36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d2e:	f043 0202 	orr.w	r2, r3, #2
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00b      	beq.n	8005d5a <HAL_UART_IRQHandler+0xf6>
 8005d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d005      	beq.n	8005d5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d52:	f043 0204 	orr.w	r2, r3, #4
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d011      	beq.n	8005d8a <HAL_UART_IRQHandler+0x126>
 8005d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d105      	bne.n	8005d7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d005      	beq.n	8005d8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d82:	f043 0208 	orr.w	r2, r3, #8
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 81f2 	beq.w	8006178 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d98:	f003 0320 	and.w	r3, r3, #32
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d008      	beq.n	8005db2 <HAL_UART_IRQHandler+0x14e>
 8005da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005da4:	f003 0320 	and.w	r3, r3, #32
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fb24 	bl	80063fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dbc:	2b40      	cmp	r3, #64	@ 0x40
 8005dbe:	bf0c      	ite	eq
 8005dc0:	2301      	moveq	r3, #1
 8005dc2:	2300      	movne	r3, #0
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dce:	f003 0308 	and.w	r3, r3, #8
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d103      	bne.n	8005dde <HAL_UART_IRQHandler+0x17a>
 8005dd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d04f      	beq.n	8005e7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fa2c 	bl	800623c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dee:	2b40      	cmp	r3, #64	@ 0x40
 8005df0:	d141      	bne.n	8005e76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3314      	adds	r3, #20
 8005df8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e00:	e853 3f00 	ldrex	r3, [r3]
 8005e04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005e08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	3314      	adds	r3, #20
 8005e1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005e1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005e22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005e2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005e2e:	e841 2300 	strex	r3, r2, [r1]
 8005e32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005e36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1d9      	bne.n	8005df2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d013      	beq.n	8005e6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e4a:	4a7e      	ldr	r2, [pc, #504]	@ (8006044 <HAL_UART_IRQHandler+0x3e0>)
 8005e4c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fc fda5 	bl	80029a2 <HAL_DMA_Abort_IT>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d016      	beq.n	8005e8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005e68:	4610      	mov	r0, r2
 8005e6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e6c:	e00e      	b.n	8005e8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f994 	bl	800619c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e74:	e00a      	b.n	8005e8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f990 	bl	800619c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e7c:	e006      	b.n	8005e8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f98c 	bl	800619c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005e8a:	e175      	b.n	8006178 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e8c:	bf00      	nop
    return;
 8005e8e:	e173      	b.n	8006178 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	f040 814f 	bne.w	8006138 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e9e:	f003 0310 	and.w	r3, r3, #16
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 8148 	beq.w	8006138 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eac:	f003 0310 	and.w	r3, r3, #16
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 8141 	beq.w	8006138 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60bb      	str	r3, [r7, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	60bb      	str	r3, [r7, #8]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	60bb      	str	r3, [r7, #8]
 8005eca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed6:	2b40      	cmp	r3, #64	@ 0x40
 8005ed8:	f040 80b6 	bne.w	8006048 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ee8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 8145 	beq.w	800617c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ef6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005efa:	429a      	cmp	r2, r3
 8005efc:	f080 813e 	bcs.w	800617c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f12:	f000 8088 	beq.w	8006026 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	330c      	adds	r3, #12
 8005f1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005f2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	330c      	adds	r3, #12
 8005f3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005f42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005f4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005f5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1d9      	bne.n	8005f16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	3314      	adds	r3, #20
 8005f68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f6c:	e853 3f00 	ldrex	r3, [r3]
 8005f70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005f72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f74:	f023 0301 	bic.w	r3, r3, #1
 8005f78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3314      	adds	r3, #20
 8005f82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005f86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005f8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005f8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005f92:	e841 2300 	strex	r3, r2, [r1]
 8005f96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005f98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1e1      	bne.n	8005f62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3314      	adds	r3, #20
 8005fa4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005fae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3314      	adds	r3, #20
 8005fbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005fc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005fc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005fc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005fca:	e841 2300 	strex	r3, r2, [r1]
 8005fce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005fd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e3      	bne.n	8005f9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	330c      	adds	r3, #12
 8005fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fee:	e853 3f00 	ldrex	r3, [r3]
 8005ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ff4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ff6:	f023 0310 	bic.w	r3, r3, #16
 8005ffa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	330c      	adds	r3, #12
 8006004:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006008:	65ba      	str	r2, [r7, #88]	@ 0x58
 800600a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800600e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e3      	bne.n	8005fe4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006020:	4618      	mov	r0, r3
 8006022:	f7fc fc4e 	bl	80028c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2202      	movs	r2, #2
 800602a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006034:	b29b      	uxth	r3, r3
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	b29b      	uxth	r3, r3
 800603a:	4619      	mov	r1, r3
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f8b7 	bl	80061b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006042:	e09b      	b.n	800617c <HAL_UART_IRQHandler+0x518>
 8006044:	08006303 	.word	0x08006303
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006050:	b29b      	uxth	r3, r3
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800605c:	b29b      	uxth	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 808e 	beq.w	8006180 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006064:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 8089 	beq.w	8006180 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	330c      	adds	r3, #12
 8006074:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800607e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006080:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006084:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	330c      	adds	r3, #12
 800608e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006092:	647a      	str	r2, [r7, #68]	@ 0x44
 8006094:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006096:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006098:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1e3      	bne.n	800606e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3314      	adds	r3, #20
 80060ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	623b      	str	r3, [r7, #32]
   return(result);
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	f023 0301 	bic.w	r3, r3, #1
 80060bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3314      	adds	r3, #20
 80060c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80060ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80060cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060d2:	e841 2300 	strex	r3, r2, [r1]
 80060d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80060d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1e3      	bne.n	80060a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	330c      	adds	r3, #12
 80060f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	e853 3f00 	ldrex	r3, [r3]
 80060fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f023 0310 	bic.w	r3, r3, #16
 8006102:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	330c      	adds	r3, #12
 800610c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006110:	61fa      	str	r2, [r7, #28]
 8006112:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006114:	69b9      	ldr	r1, [r7, #24]
 8006116:	69fa      	ldr	r2, [r7, #28]
 8006118:	e841 2300 	strex	r3, r2, [r1]
 800611c:	617b      	str	r3, [r7, #20]
   return(result);
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1e3      	bne.n	80060ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800612a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800612e:	4619      	mov	r1, r3
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f83d 	bl	80061b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006136:	e023      	b.n	8006180 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800613c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006140:	2b00      	cmp	r3, #0
 8006142:	d009      	beq.n	8006158 <HAL_UART_IRQHandler+0x4f4>
 8006144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f8ea 	bl	800632a <UART_Transmit_IT>
    return;
 8006156:	e014      	b.n	8006182 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800615c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00e      	beq.n	8006182 <HAL_UART_IRQHandler+0x51e>
 8006164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800616c:	2b00      	cmp	r3, #0
 800616e:	d008      	beq.n	8006182 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f92a 	bl	80063ca <UART_EndTransmit_IT>
    return;
 8006176:	e004      	b.n	8006182 <HAL_UART_IRQHandler+0x51e>
    return;
 8006178:	bf00      	nop
 800617a:	e002      	b.n	8006182 <HAL_UART_IRQHandler+0x51e>
      return;
 800617c:	bf00      	nop
 800617e:	e000      	b.n	8006182 <HAL_UART_IRQHandler+0x51e>
      return;
 8006180:	bf00      	nop
  }
}
 8006182:	37e8      	adds	r7, #232	@ 0xe8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	460b      	mov	r3, r1
 80061ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	4613      	mov	r3, r2
 80061d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	88fa      	ldrh	r2, [r7, #6]
 80061e0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	88fa      	ldrh	r2, [r7, #6]
 80061e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2222      	movs	r2, #34	@ 0x22
 80061f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d007      	beq.n	800620e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68da      	ldr	r2, [r3, #12]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800620c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	695a      	ldr	r2, [r3, #20]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f042 0201 	orr.w	r2, r2, #1
 800621c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68da      	ldr	r2, [r3, #12]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f042 0220 	orr.w	r2, r2, #32
 800622c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800623c:	b480      	push	{r7}
 800623e:	b095      	sub	sp, #84	@ 0x54
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	330c      	adds	r3, #12
 800624a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800624e:	e853 3f00 	ldrex	r3, [r3]
 8006252:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006256:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800625a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	330c      	adds	r3, #12
 8006262:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006264:	643a      	str	r2, [r7, #64]	@ 0x40
 8006266:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006268:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800626a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800626c:	e841 2300 	strex	r3, r2, [r1]
 8006270:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006274:	2b00      	cmp	r3, #0
 8006276:	d1e5      	bne.n	8006244 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3314      	adds	r3, #20
 800627e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	e853 3f00 	ldrex	r3, [r3]
 8006286:	61fb      	str	r3, [r7, #28]
   return(result);
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	f023 0301 	bic.w	r3, r3, #1
 800628e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3314      	adds	r3, #20
 8006296:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006298:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800629a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800629e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062a0:	e841 2300 	strex	r3, r2, [r1]
 80062a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e5      	bne.n	8006278 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d119      	bne.n	80062e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	330c      	adds	r3, #12
 80062ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	e853 3f00 	ldrex	r3, [r3]
 80062c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f023 0310 	bic.w	r3, r3, #16
 80062ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	330c      	adds	r3, #12
 80062d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062d4:	61ba      	str	r2, [r7, #24]
 80062d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d8:	6979      	ldr	r1, [r7, #20]
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	e841 2300 	strex	r3, r2, [r1]
 80062e0:	613b      	str	r3, [r7, #16]
   return(result);
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1e5      	bne.n	80062b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80062f6:	bf00      	nop
 80062f8:	3754      	adds	r7, #84	@ 0x54
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b084      	sub	sp, #16
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800630e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f7ff ff3d 	bl	800619c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006322:	bf00      	nop
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800632a:	b480      	push	{r7}
 800632c:	b085      	sub	sp, #20
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b21      	cmp	r3, #33	@ 0x21
 800633c:	d13e      	bne.n	80063bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006346:	d114      	bne.n	8006372 <UART_Transmit_IT+0x48>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d110      	bne.n	8006372 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006364:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	1c9a      	adds	r2, r3, #2
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	621a      	str	r2, [r3, #32]
 8006370:	e008      	b.n	8006384 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	1c59      	adds	r1, r3, #1
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	6211      	str	r1, [r2, #32]
 800637c:	781a      	ldrb	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006388:	b29b      	uxth	r3, r3
 800638a:	3b01      	subs	r3, #1
 800638c:	b29b      	uxth	r3, r3
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	4619      	mov	r1, r3
 8006392:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10f      	bne.n	80063b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68da      	ldr	r2, [r3, #12]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80063a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80063b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	e000      	b.n	80063be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063bc:	2302      	movs	r3, #2
  }
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b082      	sub	sp, #8
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2220      	movs	r2, #32
 80063e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7ff fecc 	bl	8006188 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b08c      	sub	sp, #48	@ 0x30
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b22      	cmp	r3, #34	@ 0x22
 800640c:	f040 80ae 	bne.w	800656c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006418:	d117      	bne.n	800644a <UART_Receive_IT+0x50>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d113      	bne.n	800644a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006422:	2300      	movs	r3, #0
 8006424:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800642a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	b29b      	uxth	r3, r3
 8006434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006438:	b29a      	uxth	r2, r3
 800643a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006442:	1c9a      	adds	r2, r3, #2
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	629a      	str	r2, [r3, #40]	@ 0x28
 8006448:	e026      	b.n	8006498 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800644e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006450:	2300      	movs	r3, #0
 8006452:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800645c:	d007      	beq.n	800646e <UART_Receive_IT+0x74>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d10a      	bne.n	800647c <UART_Receive_IT+0x82>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d106      	bne.n	800647c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	b2da      	uxtb	r2, r3
 8006476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	e008      	b.n	800648e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	b2db      	uxtb	r3, r3
 8006484:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006488:	b2da      	uxtb	r2, r3
 800648a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800648c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800649c:	b29b      	uxth	r3, r3
 800649e:	3b01      	subs	r3, #1
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	4619      	mov	r1, r3
 80064a6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d15d      	bne.n	8006568 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 0220 	bic.w	r2, r2, #32
 80064ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80064ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	695a      	ldr	r2, [r3, #20]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0201 	bic.w	r2, r2, #1
 80064da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d135      	bne.n	800655e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	330c      	adds	r3, #12
 80064fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	e853 3f00 	ldrex	r3, [r3]
 8006506:	613b      	str	r3, [r7, #16]
   return(result);
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f023 0310 	bic.w	r3, r3, #16
 800650e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	330c      	adds	r3, #12
 8006516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006518:	623a      	str	r2, [r7, #32]
 800651a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651c:	69f9      	ldr	r1, [r7, #28]
 800651e:	6a3a      	ldr	r2, [r7, #32]
 8006520:	e841 2300 	strex	r3, r2, [r1]
 8006524:	61bb      	str	r3, [r7, #24]
   return(result);
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e5      	bne.n	80064f8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0310 	and.w	r3, r3, #16
 8006536:	2b10      	cmp	r3, #16
 8006538:	d10a      	bne.n	8006550 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800653a:	2300      	movs	r3, #0
 800653c:	60fb      	str	r3, [r7, #12]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	60fb      	str	r3, [r7, #12]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	60fb      	str	r3, [r7, #12]
 800654e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7ff fe2a 	bl	80061b0 <HAL_UARTEx_RxEventCallback>
 800655c:	e002      	b.n	8006564 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7fa fff2 	bl	8001548 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006564:	2300      	movs	r3, #0
 8006566:	e002      	b.n	800656e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	e000      	b.n	800656e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800656c:	2302      	movs	r3, #2
  }
}
 800656e:	4618      	mov	r0, r3
 8006570:	3730      	adds	r7, #48	@ 0x30
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
	...

08006578 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800657c:	b0c0      	sub	sp, #256	@ 0x100
 800657e:	af00      	add	r7, sp, #0
 8006580:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006594:	68d9      	ldr	r1, [r3, #12]
 8006596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	ea40 0301 	orr.w	r3, r0, r1
 80065a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a6:	689a      	ldr	r2, [r3, #8]
 80065a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	431a      	orrs	r2, r3
 80065b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b4:	695b      	ldr	r3, [r3, #20]
 80065b6:	431a      	orrs	r2, r3
 80065b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	4313      	orrs	r3, r2
 80065c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80065d0:	f021 010c 	bic.w	r1, r1, #12
 80065d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80065de:	430b      	orrs	r3, r1
 80065e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80065ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f2:	6999      	ldr	r1, [r3, #24]
 80065f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	ea40 0301 	orr.w	r3, r0, r1
 80065fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	4b8f      	ldr	r3, [pc, #572]	@ (8006844 <UART_SetConfig+0x2cc>)
 8006608:	429a      	cmp	r2, r3
 800660a:	d005      	beq.n	8006618 <UART_SetConfig+0xa0>
 800660c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	4b8d      	ldr	r3, [pc, #564]	@ (8006848 <UART_SetConfig+0x2d0>)
 8006614:	429a      	cmp	r2, r3
 8006616:	d104      	bne.n	8006622 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006618:	f7fe fbb6 	bl	8004d88 <HAL_RCC_GetPCLK2Freq>
 800661c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006620:	e003      	b.n	800662a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006622:	f7fe fb9d 	bl	8004d60 <HAL_RCC_GetPCLK1Freq>
 8006626:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800662a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006634:	f040 810c 	bne.w	8006850 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800663c:	2200      	movs	r2, #0
 800663e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006642:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006646:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800664a:	4622      	mov	r2, r4
 800664c:	462b      	mov	r3, r5
 800664e:	1891      	adds	r1, r2, r2
 8006650:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006652:	415b      	adcs	r3, r3
 8006654:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006656:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800665a:	4621      	mov	r1, r4
 800665c:	eb12 0801 	adds.w	r8, r2, r1
 8006660:	4629      	mov	r1, r5
 8006662:	eb43 0901 	adc.w	r9, r3, r1
 8006666:	f04f 0200 	mov.w	r2, #0
 800666a:	f04f 0300 	mov.w	r3, #0
 800666e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006672:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006676:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800667a:	4690      	mov	r8, r2
 800667c:	4699      	mov	r9, r3
 800667e:	4623      	mov	r3, r4
 8006680:	eb18 0303 	adds.w	r3, r8, r3
 8006684:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006688:	462b      	mov	r3, r5
 800668a:	eb49 0303 	adc.w	r3, r9, r3
 800668e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800669e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80066a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80066a6:	460b      	mov	r3, r1
 80066a8:	18db      	adds	r3, r3, r3
 80066aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80066ac:	4613      	mov	r3, r2
 80066ae:	eb42 0303 	adc.w	r3, r2, r3
 80066b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80066b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80066b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80066bc:	f7f9 fd84 	bl	80001c8 <__aeabi_uldivmod>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4b61      	ldr	r3, [pc, #388]	@ (800684c <UART_SetConfig+0x2d4>)
 80066c6:	fba3 2302 	umull	r2, r3, r3, r2
 80066ca:	095b      	lsrs	r3, r3, #5
 80066cc:	011c      	lsls	r4, r3, #4
 80066ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066d2:	2200      	movs	r2, #0
 80066d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80066d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80066dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80066e0:	4642      	mov	r2, r8
 80066e2:	464b      	mov	r3, r9
 80066e4:	1891      	adds	r1, r2, r2
 80066e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80066e8:	415b      	adcs	r3, r3
 80066ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80066f0:	4641      	mov	r1, r8
 80066f2:	eb12 0a01 	adds.w	sl, r2, r1
 80066f6:	4649      	mov	r1, r9
 80066f8:	eb43 0b01 	adc.w	fp, r3, r1
 80066fc:	f04f 0200 	mov.w	r2, #0
 8006700:	f04f 0300 	mov.w	r3, #0
 8006704:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006708:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800670c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006710:	4692      	mov	sl, r2
 8006712:	469b      	mov	fp, r3
 8006714:	4643      	mov	r3, r8
 8006716:	eb1a 0303 	adds.w	r3, sl, r3
 800671a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800671e:	464b      	mov	r3, r9
 8006720:	eb4b 0303 	adc.w	r3, fp, r3
 8006724:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006734:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006738:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800673c:	460b      	mov	r3, r1
 800673e:	18db      	adds	r3, r3, r3
 8006740:	643b      	str	r3, [r7, #64]	@ 0x40
 8006742:	4613      	mov	r3, r2
 8006744:	eb42 0303 	adc.w	r3, r2, r3
 8006748:	647b      	str	r3, [r7, #68]	@ 0x44
 800674a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800674e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006752:	f7f9 fd39 	bl	80001c8 <__aeabi_uldivmod>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4611      	mov	r1, r2
 800675c:	4b3b      	ldr	r3, [pc, #236]	@ (800684c <UART_SetConfig+0x2d4>)
 800675e:	fba3 2301 	umull	r2, r3, r3, r1
 8006762:	095b      	lsrs	r3, r3, #5
 8006764:	2264      	movs	r2, #100	@ 0x64
 8006766:	fb02 f303 	mul.w	r3, r2, r3
 800676a:	1acb      	subs	r3, r1, r3
 800676c:	00db      	lsls	r3, r3, #3
 800676e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006772:	4b36      	ldr	r3, [pc, #216]	@ (800684c <UART_SetConfig+0x2d4>)
 8006774:	fba3 2302 	umull	r2, r3, r3, r2
 8006778:	095b      	lsrs	r3, r3, #5
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006780:	441c      	add	r4, r3
 8006782:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006786:	2200      	movs	r2, #0
 8006788:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800678c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006790:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006794:	4642      	mov	r2, r8
 8006796:	464b      	mov	r3, r9
 8006798:	1891      	adds	r1, r2, r2
 800679a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800679c:	415b      	adcs	r3, r3
 800679e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80067a4:	4641      	mov	r1, r8
 80067a6:	1851      	adds	r1, r2, r1
 80067a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80067aa:	4649      	mov	r1, r9
 80067ac:	414b      	adcs	r3, r1
 80067ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80067b0:	f04f 0200 	mov.w	r2, #0
 80067b4:	f04f 0300 	mov.w	r3, #0
 80067b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80067bc:	4659      	mov	r1, fp
 80067be:	00cb      	lsls	r3, r1, #3
 80067c0:	4651      	mov	r1, sl
 80067c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067c6:	4651      	mov	r1, sl
 80067c8:	00ca      	lsls	r2, r1, #3
 80067ca:	4610      	mov	r0, r2
 80067cc:	4619      	mov	r1, r3
 80067ce:	4603      	mov	r3, r0
 80067d0:	4642      	mov	r2, r8
 80067d2:	189b      	adds	r3, r3, r2
 80067d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067d8:	464b      	mov	r3, r9
 80067da:	460a      	mov	r2, r1
 80067dc:	eb42 0303 	adc.w	r3, r2, r3
 80067e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80067f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80067f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80067f8:	460b      	mov	r3, r1
 80067fa:	18db      	adds	r3, r3, r3
 80067fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067fe:	4613      	mov	r3, r2
 8006800:	eb42 0303 	adc.w	r3, r2, r3
 8006804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006806:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800680a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800680e:	f7f9 fcdb 	bl	80001c8 <__aeabi_uldivmod>
 8006812:	4602      	mov	r2, r0
 8006814:	460b      	mov	r3, r1
 8006816:	4b0d      	ldr	r3, [pc, #52]	@ (800684c <UART_SetConfig+0x2d4>)
 8006818:	fba3 1302 	umull	r1, r3, r3, r2
 800681c:	095b      	lsrs	r3, r3, #5
 800681e:	2164      	movs	r1, #100	@ 0x64
 8006820:	fb01 f303 	mul.w	r3, r1, r3
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	00db      	lsls	r3, r3, #3
 8006828:	3332      	adds	r3, #50	@ 0x32
 800682a:	4a08      	ldr	r2, [pc, #32]	@ (800684c <UART_SetConfig+0x2d4>)
 800682c:	fba2 2303 	umull	r2, r3, r2, r3
 8006830:	095b      	lsrs	r3, r3, #5
 8006832:	f003 0207 	and.w	r2, r3, #7
 8006836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4422      	add	r2, r4
 800683e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006840:	e106      	b.n	8006a50 <UART_SetConfig+0x4d8>
 8006842:	bf00      	nop
 8006844:	40011000 	.word	0x40011000
 8006848:	40011400 	.word	0x40011400
 800684c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006854:	2200      	movs	r2, #0
 8006856:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800685a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800685e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006862:	4642      	mov	r2, r8
 8006864:	464b      	mov	r3, r9
 8006866:	1891      	adds	r1, r2, r2
 8006868:	6239      	str	r1, [r7, #32]
 800686a:	415b      	adcs	r3, r3
 800686c:	627b      	str	r3, [r7, #36]	@ 0x24
 800686e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006872:	4641      	mov	r1, r8
 8006874:	1854      	adds	r4, r2, r1
 8006876:	4649      	mov	r1, r9
 8006878:	eb43 0501 	adc.w	r5, r3, r1
 800687c:	f04f 0200 	mov.w	r2, #0
 8006880:	f04f 0300 	mov.w	r3, #0
 8006884:	00eb      	lsls	r3, r5, #3
 8006886:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800688a:	00e2      	lsls	r2, r4, #3
 800688c:	4614      	mov	r4, r2
 800688e:	461d      	mov	r5, r3
 8006890:	4643      	mov	r3, r8
 8006892:	18e3      	adds	r3, r4, r3
 8006894:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006898:	464b      	mov	r3, r9
 800689a:	eb45 0303 	adc.w	r3, r5, r3
 800689e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80068a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80068b2:	f04f 0200 	mov.w	r2, #0
 80068b6:	f04f 0300 	mov.w	r3, #0
 80068ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80068be:	4629      	mov	r1, r5
 80068c0:	008b      	lsls	r3, r1, #2
 80068c2:	4621      	mov	r1, r4
 80068c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068c8:	4621      	mov	r1, r4
 80068ca:	008a      	lsls	r2, r1, #2
 80068cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80068d0:	f7f9 fc7a 	bl	80001c8 <__aeabi_uldivmod>
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
 80068d8:	4b60      	ldr	r3, [pc, #384]	@ (8006a5c <UART_SetConfig+0x4e4>)
 80068da:	fba3 2302 	umull	r2, r3, r3, r2
 80068de:	095b      	lsrs	r3, r3, #5
 80068e0:	011c      	lsls	r4, r3, #4
 80068e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068e6:	2200      	movs	r2, #0
 80068e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80068f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80068f4:	4642      	mov	r2, r8
 80068f6:	464b      	mov	r3, r9
 80068f8:	1891      	adds	r1, r2, r2
 80068fa:	61b9      	str	r1, [r7, #24]
 80068fc:	415b      	adcs	r3, r3
 80068fe:	61fb      	str	r3, [r7, #28]
 8006900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006904:	4641      	mov	r1, r8
 8006906:	1851      	adds	r1, r2, r1
 8006908:	6139      	str	r1, [r7, #16]
 800690a:	4649      	mov	r1, r9
 800690c:	414b      	adcs	r3, r1
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	f04f 0200 	mov.w	r2, #0
 8006914:	f04f 0300 	mov.w	r3, #0
 8006918:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800691c:	4659      	mov	r1, fp
 800691e:	00cb      	lsls	r3, r1, #3
 8006920:	4651      	mov	r1, sl
 8006922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006926:	4651      	mov	r1, sl
 8006928:	00ca      	lsls	r2, r1, #3
 800692a:	4610      	mov	r0, r2
 800692c:	4619      	mov	r1, r3
 800692e:	4603      	mov	r3, r0
 8006930:	4642      	mov	r2, r8
 8006932:	189b      	adds	r3, r3, r2
 8006934:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006938:	464b      	mov	r3, r9
 800693a:	460a      	mov	r2, r1
 800693c:	eb42 0303 	adc.w	r3, r2, r3
 8006940:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800694e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006950:	f04f 0200 	mov.w	r2, #0
 8006954:	f04f 0300 	mov.w	r3, #0
 8006958:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800695c:	4649      	mov	r1, r9
 800695e:	008b      	lsls	r3, r1, #2
 8006960:	4641      	mov	r1, r8
 8006962:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006966:	4641      	mov	r1, r8
 8006968:	008a      	lsls	r2, r1, #2
 800696a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800696e:	f7f9 fc2b 	bl	80001c8 <__aeabi_uldivmod>
 8006972:	4602      	mov	r2, r0
 8006974:	460b      	mov	r3, r1
 8006976:	4611      	mov	r1, r2
 8006978:	4b38      	ldr	r3, [pc, #224]	@ (8006a5c <UART_SetConfig+0x4e4>)
 800697a:	fba3 2301 	umull	r2, r3, r3, r1
 800697e:	095b      	lsrs	r3, r3, #5
 8006980:	2264      	movs	r2, #100	@ 0x64
 8006982:	fb02 f303 	mul.w	r3, r2, r3
 8006986:	1acb      	subs	r3, r1, r3
 8006988:	011b      	lsls	r3, r3, #4
 800698a:	3332      	adds	r3, #50	@ 0x32
 800698c:	4a33      	ldr	r2, [pc, #204]	@ (8006a5c <UART_SetConfig+0x4e4>)
 800698e:	fba2 2303 	umull	r2, r3, r2, r3
 8006992:	095b      	lsrs	r3, r3, #5
 8006994:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006998:	441c      	add	r4, r3
 800699a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800699e:	2200      	movs	r2, #0
 80069a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80069a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80069a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80069a8:	4642      	mov	r2, r8
 80069aa:	464b      	mov	r3, r9
 80069ac:	1891      	adds	r1, r2, r2
 80069ae:	60b9      	str	r1, [r7, #8]
 80069b0:	415b      	adcs	r3, r3
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069b8:	4641      	mov	r1, r8
 80069ba:	1851      	adds	r1, r2, r1
 80069bc:	6039      	str	r1, [r7, #0]
 80069be:	4649      	mov	r1, r9
 80069c0:	414b      	adcs	r3, r1
 80069c2:	607b      	str	r3, [r7, #4]
 80069c4:	f04f 0200 	mov.w	r2, #0
 80069c8:	f04f 0300 	mov.w	r3, #0
 80069cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069d0:	4659      	mov	r1, fp
 80069d2:	00cb      	lsls	r3, r1, #3
 80069d4:	4651      	mov	r1, sl
 80069d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069da:	4651      	mov	r1, sl
 80069dc:	00ca      	lsls	r2, r1, #3
 80069de:	4610      	mov	r0, r2
 80069e0:	4619      	mov	r1, r3
 80069e2:	4603      	mov	r3, r0
 80069e4:	4642      	mov	r2, r8
 80069e6:	189b      	adds	r3, r3, r2
 80069e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069ea:	464b      	mov	r3, r9
 80069ec:	460a      	mov	r2, r1
 80069ee:	eb42 0303 	adc.w	r3, r2, r3
 80069f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80069fe:	667a      	str	r2, [r7, #100]	@ 0x64
 8006a00:	f04f 0200 	mov.w	r2, #0
 8006a04:	f04f 0300 	mov.w	r3, #0
 8006a08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006a0c:	4649      	mov	r1, r9
 8006a0e:	008b      	lsls	r3, r1, #2
 8006a10:	4641      	mov	r1, r8
 8006a12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a16:	4641      	mov	r1, r8
 8006a18:	008a      	lsls	r2, r1, #2
 8006a1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006a1e:	f7f9 fbd3 	bl	80001c8 <__aeabi_uldivmod>
 8006a22:	4602      	mov	r2, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	4b0d      	ldr	r3, [pc, #52]	@ (8006a5c <UART_SetConfig+0x4e4>)
 8006a28:	fba3 1302 	umull	r1, r3, r3, r2
 8006a2c:	095b      	lsrs	r3, r3, #5
 8006a2e:	2164      	movs	r1, #100	@ 0x64
 8006a30:	fb01 f303 	mul.w	r3, r1, r3
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	011b      	lsls	r3, r3, #4
 8006a38:	3332      	adds	r3, #50	@ 0x32
 8006a3a:	4a08      	ldr	r2, [pc, #32]	@ (8006a5c <UART_SetConfig+0x4e4>)
 8006a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a40:	095b      	lsrs	r3, r3, #5
 8006a42:	f003 020f 	and.w	r2, r3, #15
 8006a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4422      	add	r2, r4
 8006a4e:	609a      	str	r2, [r3, #8]
}
 8006a50:	bf00      	nop
 8006a52:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006a56:	46bd      	mov	sp, r7
 8006a58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a5c:	51eb851f 	.word	0x51eb851f

08006a60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a60:	b084      	sub	sp, #16
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b084      	sub	sp, #16
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	f107 001c 	add.w	r0, r7, #28
 8006a6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a72:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d123      	bne.n	8006ac2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a7e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006a8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006aa2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d105      	bne.n	8006ab6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f001 fae8 	bl	800808c <USB_CoreReset>
 8006abc:	4603      	mov	r3, r0
 8006abe:	73fb      	strb	r3, [r7, #15]
 8006ac0:	e01b      	b.n	8006afa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f001 fadc 	bl	800808c <USB_CoreReset>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ad8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d106      	bne.n	8006aee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	639a      	str	r2, [r3, #56]	@ 0x38
 8006aec:	e005      	b.n	8006afa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006afa:	7fbb      	ldrb	r3, [r7, #30]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d10b      	bne.n	8006b18 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	f043 0206 	orr.w	r2, r3, #6
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f043 0220 	orr.w	r2, r3, #32
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b24:	b004      	add	sp, #16
 8006b26:	4770      	bx	lr

08006b28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	4613      	mov	r3, r2
 8006b34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006b36:	79fb      	ldrb	r3, [r7, #7]
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d165      	bne.n	8006c08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	4a41      	ldr	r2, [pc, #260]	@ (8006c44 <USB_SetTurnaroundTime+0x11c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d906      	bls.n	8006b52 <USB_SetTurnaroundTime+0x2a>
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4a40      	ldr	r2, [pc, #256]	@ (8006c48 <USB_SetTurnaroundTime+0x120>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d202      	bcs.n	8006b52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006b4c:	230f      	movs	r3, #15
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	e062      	b.n	8006c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	4a3c      	ldr	r2, [pc, #240]	@ (8006c48 <USB_SetTurnaroundTime+0x120>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d306      	bcc.n	8006b68 <USB_SetTurnaroundTime+0x40>
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	4a3b      	ldr	r2, [pc, #236]	@ (8006c4c <USB_SetTurnaroundTime+0x124>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d202      	bcs.n	8006b68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006b62:	230e      	movs	r3, #14
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	e057      	b.n	8006c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	4a38      	ldr	r2, [pc, #224]	@ (8006c4c <USB_SetTurnaroundTime+0x124>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d306      	bcc.n	8006b7e <USB_SetTurnaroundTime+0x56>
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	4a37      	ldr	r2, [pc, #220]	@ (8006c50 <USB_SetTurnaroundTime+0x128>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d202      	bcs.n	8006b7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006b78:	230d      	movs	r3, #13
 8006b7a:	617b      	str	r3, [r7, #20]
 8006b7c:	e04c      	b.n	8006c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	4a33      	ldr	r2, [pc, #204]	@ (8006c50 <USB_SetTurnaroundTime+0x128>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d306      	bcc.n	8006b94 <USB_SetTurnaroundTime+0x6c>
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	4a32      	ldr	r2, [pc, #200]	@ (8006c54 <USB_SetTurnaroundTime+0x12c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d802      	bhi.n	8006b94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006b8e:	230c      	movs	r3, #12
 8006b90:	617b      	str	r3, [r7, #20]
 8006b92:	e041      	b.n	8006c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	4a2f      	ldr	r2, [pc, #188]	@ (8006c54 <USB_SetTurnaroundTime+0x12c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d906      	bls.n	8006baa <USB_SetTurnaroundTime+0x82>
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	4a2e      	ldr	r2, [pc, #184]	@ (8006c58 <USB_SetTurnaroundTime+0x130>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d802      	bhi.n	8006baa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006ba4:	230b      	movs	r3, #11
 8006ba6:	617b      	str	r3, [r7, #20]
 8006ba8:	e036      	b.n	8006c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	4a2a      	ldr	r2, [pc, #168]	@ (8006c58 <USB_SetTurnaroundTime+0x130>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d906      	bls.n	8006bc0 <USB_SetTurnaroundTime+0x98>
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	4a29      	ldr	r2, [pc, #164]	@ (8006c5c <USB_SetTurnaroundTime+0x134>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d802      	bhi.n	8006bc0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006bba:	230a      	movs	r3, #10
 8006bbc:	617b      	str	r3, [r7, #20]
 8006bbe:	e02b      	b.n	8006c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	4a26      	ldr	r2, [pc, #152]	@ (8006c5c <USB_SetTurnaroundTime+0x134>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d906      	bls.n	8006bd6 <USB_SetTurnaroundTime+0xae>
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	4a25      	ldr	r2, [pc, #148]	@ (8006c60 <USB_SetTurnaroundTime+0x138>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d202      	bcs.n	8006bd6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006bd0:	2309      	movs	r3, #9
 8006bd2:	617b      	str	r3, [r7, #20]
 8006bd4:	e020      	b.n	8006c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	4a21      	ldr	r2, [pc, #132]	@ (8006c60 <USB_SetTurnaroundTime+0x138>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d306      	bcc.n	8006bec <USB_SetTurnaroundTime+0xc4>
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	4a20      	ldr	r2, [pc, #128]	@ (8006c64 <USB_SetTurnaroundTime+0x13c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d802      	bhi.n	8006bec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006be6:	2308      	movs	r3, #8
 8006be8:	617b      	str	r3, [r7, #20]
 8006bea:	e015      	b.n	8006c18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	4a1d      	ldr	r2, [pc, #116]	@ (8006c64 <USB_SetTurnaroundTime+0x13c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d906      	bls.n	8006c02 <USB_SetTurnaroundTime+0xda>
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8006c68 <USB_SetTurnaroundTime+0x140>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d202      	bcs.n	8006c02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006bfc:	2307      	movs	r3, #7
 8006bfe:	617b      	str	r3, [r7, #20]
 8006c00:	e00a      	b.n	8006c18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006c02:	2306      	movs	r3, #6
 8006c04:	617b      	str	r3, [r7, #20]
 8006c06:	e007      	b.n	8006c18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006c08:	79fb      	ldrb	r3, [r7, #7]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d102      	bne.n	8006c14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006c0e:	2309      	movs	r3, #9
 8006c10:	617b      	str	r3, [r7, #20]
 8006c12:	e001      	b.n	8006c18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006c14:	2309      	movs	r3, #9
 8006c16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	68da      	ldr	r2, [r3, #12]
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	029b      	lsls	r3, r3, #10
 8006c2c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006c30:	431a      	orrs	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	371c      	adds	r7, #28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	00d8acbf 	.word	0x00d8acbf
 8006c48:	00e4e1c0 	.word	0x00e4e1c0
 8006c4c:	00f42400 	.word	0x00f42400
 8006c50:	01067380 	.word	0x01067380
 8006c54:	011a499f 	.word	0x011a499f
 8006c58:	01312cff 	.word	0x01312cff
 8006c5c:	014ca43f 	.word	0x014ca43f
 8006c60:	016e3600 	.word	0x016e3600
 8006c64:	01a6ab1f 	.word	0x01a6ab1f
 8006c68:	01e84800 	.word	0x01e84800

08006c6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f043 0201 	orr.w	r2, r3, #1
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b083      	sub	sp, #12
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f023 0201 	bic.w	r2, r3, #1
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	460b      	mov	r3, r1
 8006cba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d115      	bne.n	8006cfe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006cde:	200a      	movs	r0, #10
 8006ce0:	f7fb fa58 	bl	8002194 <HAL_Delay>
      ms += 10U;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	330a      	adds	r3, #10
 8006ce8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f001 f93f 	bl	8007f6e <USB_GetMode>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d01e      	beq.n	8006d34 <USB_SetCurrentMode+0x84>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2bc7      	cmp	r3, #199	@ 0xc7
 8006cfa:	d9f0      	bls.n	8006cde <USB_SetCurrentMode+0x2e>
 8006cfc:	e01a      	b.n	8006d34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006cfe:	78fb      	ldrb	r3, [r7, #3]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d115      	bne.n	8006d30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d10:	200a      	movs	r0, #10
 8006d12:	f7fb fa3f 	bl	8002194 <HAL_Delay>
      ms += 10U;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	330a      	adds	r3, #10
 8006d1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f001 f926 	bl	8007f6e <USB_GetMode>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d005      	beq.n	8006d34 <USB_SetCurrentMode+0x84>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d2c:	d9f0      	bls.n	8006d10 <USB_SetCurrentMode+0x60>
 8006d2e:	e001      	b.n	8006d34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e005      	b.n	8006d40 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2bc8      	cmp	r3, #200	@ 0xc8
 8006d38:	d101      	bne.n	8006d3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d48:	b084      	sub	sp, #16
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b086      	sub	sp, #24
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d62:	2300      	movs	r3, #0
 8006d64:	613b      	str	r3, [r7, #16]
 8006d66:	e009      	b.n	8006d7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	3340      	adds	r3, #64	@ 0x40
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	4413      	add	r3, r2
 8006d72:	2200      	movs	r2, #0
 8006d74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	613b      	str	r3, [r7, #16]
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	2b0e      	cmp	r3, #14
 8006d80:	d9f2      	bls.n	8006d68 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d82:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d11c      	bne.n	8006dc4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d98:	f043 0302 	orr.w	r3, r3, #2
 8006d9c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006da2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dae:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dba:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	639a      	str	r2, [r3, #56]	@ 0x38
 8006dc2:	e00b      	b.n	8006ddc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006de2:	461a      	mov	r2, r3
 8006de4:	2300      	movs	r3, #0
 8006de6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006de8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d10d      	bne.n	8006e0c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006df0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d104      	bne.n	8006e02 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006df8:	2100      	movs	r1, #0
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f968 	bl	80070d0 <USB_SetDevSpeed>
 8006e00:	e008      	b.n	8006e14 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e02:	2101      	movs	r1, #1
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f963 	bl	80070d0 <USB_SetDevSpeed>
 8006e0a:	e003      	b.n	8006e14 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e0c:	2103      	movs	r1, #3
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f95e 	bl	80070d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e14:	2110      	movs	r1, #16
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f8fa 	bl	8007010 <USB_FlushTxFifo>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f924 	bl	8007074 <USB_FlushRxFifo>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	2300      	movs	r3, #0
 8006e40:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e48:	461a      	mov	r2, r3
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e54:	461a      	mov	r2, r3
 8006e56:	2300      	movs	r3, #0
 8006e58:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	613b      	str	r3, [r7, #16]
 8006e5e:	e043      	b.n	8006ee8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e76:	d118      	bne.n	8006eaa <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10a      	bne.n	8006e94 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	015a      	lsls	r2, r3, #5
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	4413      	add	r3, r2
 8006e86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006e90:	6013      	str	r3, [r2, #0]
 8006e92:	e013      	b.n	8006ebc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006ea6:	6013      	str	r3, [r2, #0]
 8006ea8:	e008      	b.n	8006ebc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	2300      	movs	r3, #0
 8006eba:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec8:	461a      	mov	r2, r3
 8006eca:	2300      	movs	r3, #0
 8006ecc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eda:	461a      	mov	r2, r3
 8006edc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006ee0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	613b      	str	r3, [r7, #16]
 8006ee8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006eec:	461a      	mov	r2, r3
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d3b5      	bcc.n	8006e60 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	613b      	str	r3, [r7, #16]
 8006ef8:	e043      	b.n	8006f82 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	015a      	lsls	r2, r3, #5
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	4413      	add	r3, r2
 8006f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f10:	d118      	bne.n	8006f44 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10a      	bne.n	8006f2e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	015a      	lsls	r2, r3, #5
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f24:	461a      	mov	r2, r3
 8006f26:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	e013      	b.n	8006f56 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006f40:	6013      	str	r3, [r2, #0]
 8006f42:	e008      	b.n	8006f56 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f50:	461a      	mov	r2, r3
 8006f52:	2300      	movs	r3, #0
 8006f54:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f62:	461a      	mov	r2, r3
 8006f64:	2300      	movs	r3, #0
 8006f66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f74:	461a      	mov	r2, r3
 8006f76:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006f7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	613b      	str	r3, [r7, #16]
 8006f82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006f86:	461a      	mov	r2, r3
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d3b5      	bcc.n	8006efa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006f9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fa0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006fae:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fb0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d105      	bne.n	8006fc4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	f043 0210 	orr.w	r2, r3, #16
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	699a      	ldr	r2, [r3, #24]
 8006fc8:	4b10      	ldr	r3, [pc, #64]	@ (800700c <USB_DevInit+0x2c4>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006fd0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d005      	beq.n	8006fe4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	f043 0208 	orr.w	r2, r3, #8
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006fe4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d107      	bne.n	8006ffc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ff4:	f043 0304 	orr.w	r3, r3, #4
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007008:	b004      	add	sp, #16
 800700a:	4770      	bx	lr
 800700c:	803c3800 	.word	0x803c3800

08007010 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800701a:	2300      	movs	r3, #0
 800701c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3301      	adds	r3, #1
 8007022:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800702a:	d901      	bls.n	8007030 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800702c:	2303      	movs	r3, #3
 800702e:	e01b      	b.n	8007068 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	daf2      	bge.n	800701e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007038:	2300      	movs	r3, #0
 800703a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	019b      	lsls	r3, r3, #6
 8007040:	f043 0220 	orr.w	r2, r3, #32
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3301      	adds	r3, #1
 800704c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007054:	d901      	bls.n	800705a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e006      	b.n	8007068 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	f003 0320 	and.w	r3, r3, #32
 8007062:	2b20      	cmp	r3, #32
 8007064:	d0f0      	beq.n	8007048 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800707c:	2300      	movs	r3, #0
 800707e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	3301      	adds	r3, #1
 8007084:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800708c:	d901      	bls.n	8007092 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e018      	b.n	80070c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	daf2      	bge.n	8007080 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2210      	movs	r2, #16
 80070a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	3301      	adds	r3, #1
 80070a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070b0:	d901      	bls.n	80070b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e006      	b.n	80070c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	f003 0310 	and.w	r3, r3, #16
 80070be:	2b10      	cmp	r3, #16
 80070c0:	d0f0      	beq.n	80070a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3714      	adds	r7, #20
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	460b      	mov	r3, r1
 80070da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	78fb      	ldrb	r3, [r7, #3]
 80070ea:	68f9      	ldr	r1, [r7, #12]
 80070ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80070f0:	4313      	orrs	r3, r2
 80070f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3714      	adds	r7, #20
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr

08007102 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007102:	b480      	push	{r7}
 8007104:	b087      	sub	sp, #28
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f003 0306 	and.w	r3, r3, #6
 800711a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d102      	bne.n	8007128 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007122:	2300      	movs	r3, #0
 8007124:	75fb      	strb	r3, [r7, #23]
 8007126:	e00a      	b.n	800713e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2b02      	cmp	r3, #2
 800712c:	d002      	beq.n	8007134 <USB_GetDevSpeed+0x32>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b06      	cmp	r3, #6
 8007132:	d102      	bne.n	800713a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007134:	2302      	movs	r3, #2
 8007136:	75fb      	strb	r3, [r7, #23]
 8007138:	e001      	b.n	800713e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800713a:	230f      	movs	r3, #15
 800713c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800713e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007140:	4618      	mov	r0, r3
 8007142:	371c      	adds	r7, #28
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	785b      	ldrb	r3, [r3, #1]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d13a      	bne.n	80071de <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800716e:	69da      	ldr	r2, [r3, #28]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	f003 030f 	and.w	r3, r3, #15
 8007178:	2101      	movs	r1, #1
 800717a:	fa01 f303 	lsl.w	r3, r1, r3
 800717e:	b29b      	uxth	r3, r3
 8007180:	68f9      	ldr	r1, [r7, #12]
 8007182:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007186:	4313      	orrs	r3, r2
 8007188:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	4413      	add	r3, r2
 8007192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800719c:	2b00      	cmp	r3, #0
 800719e:	d155      	bne.n	800724c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	015a      	lsls	r2, r3, #5
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4413      	add	r3, r2
 80071a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	791b      	ldrb	r3, [r3, #4]
 80071ba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071bc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	059b      	lsls	r3, r3, #22
 80071c2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80071c4:	4313      	orrs	r3, r2
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	0151      	lsls	r1, r2, #5
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	440a      	add	r2, r1
 80071ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80071d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071da:	6013      	str	r3, [r2, #0]
 80071dc:	e036      	b.n	800724c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071e4:	69da      	ldr	r2, [r3, #28]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	f003 030f 	and.w	r3, r3, #15
 80071ee:	2101      	movs	r1, #1
 80071f0:	fa01 f303 	lsl.w	r3, r1, r3
 80071f4:	041b      	lsls	r3, r3, #16
 80071f6:	68f9      	ldr	r1, [r7, #12]
 80071f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071fc:	4313      	orrs	r3, r2
 80071fe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4413      	add	r3, r2
 8007208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d11a      	bne.n	800724c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	4413      	add	r3, r2
 800721e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	791b      	ldrb	r3, [r3, #4]
 8007230:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007232:	430b      	orrs	r3, r1
 8007234:	4313      	orrs	r3, r2
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	0151      	lsls	r1, r2, #5
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	440a      	add	r2, r1
 800723e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007242:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007246:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800724a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
	...

0800725c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	785b      	ldrb	r3, [r3, #1]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d161      	bne.n	800733c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	015a      	lsls	r2, r3, #5
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4413      	add	r3, r2
 8007280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800728a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800728e:	d11f      	bne.n	80072d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4413      	add	r3, r2
 8007298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	0151      	lsls	r1, r2, #5
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	440a      	add	r2, r1
 80072a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80072ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	015a      	lsls	r2, r3, #5
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4413      	add	r3, r2
 80072b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	0151      	lsls	r1, r2, #5
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	440a      	add	r2, r1
 80072c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	f003 030f 	and.w	r3, r3, #15
 80072e0:	2101      	movs	r1, #1
 80072e2:	fa01 f303 	lsl.w	r3, r1, r3
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	43db      	mvns	r3, r3
 80072ea:	68f9      	ldr	r1, [r7, #12]
 80072ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80072f0:	4013      	ands	r3, r2
 80072f2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072fa:	69da      	ldr	r2, [r3, #28]
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	f003 030f 	and.w	r3, r3, #15
 8007304:	2101      	movs	r1, #1
 8007306:	fa01 f303 	lsl.w	r3, r1, r3
 800730a:	b29b      	uxth	r3, r3
 800730c:	43db      	mvns	r3, r3
 800730e:	68f9      	ldr	r1, [r7, #12]
 8007310:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007314:	4013      	ands	r3, r2
 8007316:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	0159      	lsls	r1, r3, #5
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	440b      	add	r3, r1
 800732e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007332:	4619      	mov	r1, r3
 8007334:	4b35      	ldr	r3, [pc, #212]	@ (800740c <USB_DeactivateEndpoint+0x1b0>)
 8007336:	4013      	ands	r3, r2
 8007338:	600b      	str	r3, [r1, #0]
 800733a:	e060      	b.n	80073fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800734e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007352:	d11f      	bne.n	8007394 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	0151      	lsls	r1, r2, #5
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	440a      	add	r2, r1
 800736a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800736e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007372:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68ba      	ldr	r2, [r7, #8]
 8007384:	0151      	lsls	r1, r2, #5
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	440a      	add	r2, r1
 800738a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800738e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007392:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800739a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	f003 030f 	and.w	r3, r3, #15
 80073a4:	2101      	movs	r1, #1
 80073a6:	fa01 f303 	lsl.w	r3, r1, r3
 80073aa:	041b      	lsls	r3, r3, #16
 80073ac:	43db      	mvns	r3, r3
 80073ae:	68f9      	ldr	r1, [r7, #12]
 80073b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073b4:	4013      	ands	r3, r2
 80073b6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073be:	69da      	ldr	r2, [r3, #28]
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	f003 030f 	and.w	r3, r3, #15
 80073c8:	2101      	movs	r1, #1
 80073ca:	fa01 f303 	lsl.w	r3, r1, r3
 80073ce:	041b      	lsls	r3, r3, #16
 80073d0:	43db      	mvns	r3, r3
 80073d2:	68f9      	ldr	r1, [r7, #12]
 80073d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80073d8:	4013      	ands	r3, r2
 80073da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	0159      	lsls	r1, r3, #5
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	440b      	add	r3, r1
 80073f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073f6:	4619      	mov	r1, r3
 80073f8:	4b05      	ldr	r3, [pc, #20]	@ (8007410 <USB_DeactivateEndpoint+0x1b4>)
 80073fa:	4013      	ands	r3, r2
 80073fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	ec337800 	.word	0xec337800
 8007410:	eff37800 	.word	0xeff37800

08007414 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08a      	sub	sp, #40	@ 0x28
 8007418:	af02      	add	r7, sp, #8
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	4613      	mov	r3, r2
 8007420:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	785b      	ldrb	r3, [r3, #1]
 8007430:	2b01      	cmp	r3, #1
 8007432:	f040 817f 	bne.w	8007734 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d132      	bne.n	80074a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	015a      	lsls	r2, r3, #5
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	4413      	add	r3, r2
 8007446:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	0151      	lsls	r1, r2, #5
 8007450:	69fa      	ldr	r2, [r7, #28]
 8007452:	440a      	add	r2, r1
 8007454:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007458:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800745c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007460:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	4413      	add	r3, r2
 800746a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	0151      	lsls	r1, r2, #5
 8007474:	69fa      	ldr	r2, [r7, #28]
 8007476:	440a      	add	r2, r1
 8007478:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800747c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007480:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	015a      	lsls	r2, r3, #5
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	4413      	add	r3, r2
 800748a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	0151      	lsls	r1, r2, #5
 8007494:	69fa      	ldr	r2, [r7, #28]
 8007496:	440a      	add	r2, r1
 8007498:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800749c:	0cdb      	lsrs	r3, r3, #19
 800749e:	04db      	lsls	r3, r3, #19
 80074a0:	6113      	str	r3, [r2, #16]
 80074a2:	e097      	b.n	80075d4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	015a      	lsls	r2, r3, #5
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	4413      	add	r3, r2
 80074ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	0151      	lsls	r1, r2, #5
 80074b6:	69fa      	ldr	r2, [r7, #28]
 80074b8:	440a      	add	r2, r1
 80074ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074be:	0cdb      	lsrs	r3, r3, #19
 80074c0:	04db      	lsls	r3, r3, #19
 80074c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	69ba      	ldr	r2, [r7, #24]
 80074d4:	0151      	lsls	r1, r2, #5
 80074d6:	69fa      	ldr	r2, [r7, #28]
 80074d8:	440a      	add	r2, r1
 80074da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074de:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80074e2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80074e6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d11a      	bne.n	8007524 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	691a      	ldr	r2, [r3, #16]
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d903      	bls.n	8007502 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	689a      	ldr	r2, [r3, #8]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	015a      	lsls	r2, r3, #5
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	4413      	add	r3, r2
 800750a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800750e:	691b      	ldr	r3, [r3, #16]
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	0151      	lsls	r1, r2, #5
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	440a      	add	r2, r1
 8007518:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800751c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007520:	6113      	str	r3, [r2, #16]
 8007522:	e044      	b.n	80075ae <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	691a      	ldr	r2, [r3, #16]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	4413      	add	r3, r2
 800752e:	1e5a      	subs	r2, r3, #1
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	fbb2 f3f3 	udiv	r3, r2, r3
 8007538:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	015a      	lsls	r2, r3, #5
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	4413      	add	r3, r2
 8007542:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007546:	691a      	ldr	r2, [r3, #16]
 8007548:	8afb      	ldrh	r3, [r7, #22]
 800754a:	04d9      	lsls	r1, r3, #19
 800754c:	4ba4      	ldr	r3, [pc, #656]	@ (80077e0 <USB_EPStartXfer+0x3cc>)
 800754e:	400b      	ands	r3, r1
 8007550:	69b9      	ldr	r1, [r7, #24]
 8007552:	0148      	lsls	r0, r1, #5
 8007554:	69f9      	ldr	r1, [r7, #28]
 8007556:	4401      	add	r1, r0
 8007558:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800755c:	4313      	orrs	r3, r2
 800755e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	791b      	ldrb	r3, [r3, #4]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d122      	bne.n	80075ae <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	4413      	add	r3, r2
 8007570:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	69ba      	ldr	r2, [r7, #24]
 8007578:	0151      	lsls	r1, r2, #5
 800757a:	69fa      	ldr	r2, [r7, #28]
 800757c:	440a      	add	r2, r1
 800757e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007582:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007586:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	4413      	add	r3, r2
 8007590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007594:	691a      	ldr	r2, [r3, #16]
 8007596:	8afb      	ldrh	r3, [r7, #22]
 8007598:	075b      	lsls	r3, r3, #29
 800759a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800759e:	69b9      	ldr	r1, [r7, #24]
 80075a0:	0148      	lsls	r0, r1, #5
 80075a2:	69f9      	ldr	r1, [r7, #28]
 80075a4:	4401      	add	r1, r0
 80075a6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80075aa:	4313      	orrs	r3, r2
 80075ac:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	015a      	lsls	r2, r3, #5
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	4413      	add	r3, r2
 80075b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ba:	691a      	ldr	r2, [r3, #16]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075c4:	69b9      	ldr	r1, [r7, #24]
 80075c6:	0148      	lsls	r0, r1, #5
 80075c8:	69f9      	ldr	r1, [r7, #28]
 80075ca:	4401      	add	r1, r0
 80075cc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80075d0:	4313      	orrs	r3, r2
 80075d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80075d4:	79fb      	ldrb	r3, [r7, #7]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d14b      	bne.n	8007672 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d009      	beq.n	80075f6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ee:	461a      	mov	r2, r3
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	69db      	ldr	r3, [r3, #28]
 80075f4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	791b      	ldrb	r3, [r3, #4]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d128      	bne.n	8007650 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800760a:	2b00      	cmp	r3, #0
 800760c:	d110      	bne.n	8007630 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	4413      	add	r3, r2
 8007616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	69ba      	ldr	r2, [r7, #24]
 800761e:	0151      	lsls	r1, r2, #5
 8007620:	69fa      	ldr	r2, [r7, #28]
 8007622:	440a      	add	r2, r1
 8007624:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007628:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800762c:	6013      	str	r3, [r2, #0]
 800762e:	e00f      	b.n	8007650 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	015a      	lsls	r2, r3, #5
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	4413      	add	r3, r2
 8007638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	0151      	lsls	r1, r2, #5
 8007642:	69fa      	ldr	r2, [r7, #28]
 8007644:	440a      	add	r2, r1
 8007646:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800764a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800764e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	015a      	lsls	r2, r3, #5
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	4413      	add	r3, r2
 8007658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	0151      	lsls	r1, r2, #5
 8007662:	69fa      	ldr	r2, [r7, #28]
 8007664:	440a      	add	r2, r1
 8007666:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800766a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800766e:	6013      	str	r3, [r2, #0]
 8007670:	e166      	b.n	8007940 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	015a      	lsls	r2, r3, #5
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	4413      	add	r3, r2
 800767a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	69ba      	ldr	r2, [r7, #24]
 8007682:	0151      	lsls	r1, r2, #5
 8007684:	69fa      	ldr	r2, [r7, #28]
 8007686:	440a      	add	r2, r1
 8007688:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800768c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007690:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	791b      	ldrb	r3, [r3, #4]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d015      	beq.n	80076c6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 814e 	beq.w	8007940 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	f003 030f 	and.w	r3, r3, #15
 80076b4:	2101      	movs	r1, #1
 80076b6:	fa01 f303 	lsl.w	r3, r1, r3
 80076ba:	69f9      	ldr	r1, [r7, #28]
 80076bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80076c0:	4313      	orrs	r3, r2
 80076c2:	634b      	str	r3, [r1, #52]	@ 0x34
 80076c4:	e13c      	b.n	8007940 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d110      	bne.n	80076f8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	015a      	lsls	r2, r3, #5
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	4413      	add	r3, r2
 80076de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	69ba      	ldr	r2, [r7, #24]
 80076e6:	0151      	lsls	r1, r2, #5
 80076e8:	69fa      	ldr	r2, [r7, #28]
 80076ea:	440a      	add	r2, r1
 80076ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80076f0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	e00f      	b.n	8007718 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	015a      	lsls	r2, r3, #5
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	4413      	add	r3, r2
 8007700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	69ba      	ldr	r2, [r7, #24]
 8007708:	0151      	lsls	r1, r2, #5
 800770a:	69fa      	ldr	r2, [r7, #28]
 800770c:	440a      	add	r2, r1
 800770e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007712:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007716:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	68d9      	ldr	r1, [r3, #12]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	781a      	ldrb	r2, [r3, #0]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	b298      	uxth	r0, r3
 8007726:	79fb      	ldrb	r3, [r7, #7]
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	4603      	mov	r3, r0
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 f9b9 	bl	8007aa4 <USB_WritePacket>
 8007732:	e105      	b.n	8007940 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	015a      	lsls	r2, r3, #5
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	4413      	add	r3, r2
 800773c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	69ba      	ldr	r2, [r7, #24]
 8007744:	0151      	lsls	r1, r2, #5
 8007746:	69fa      	ldr	r2, [r7, #28]
 8007748:	440a      	add	r2, r1
 800774a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800774e:	0cdb      	lsrs	r3, r3, #19
 8007750:	04db      	lsls	r3, r3, #19
 8007752:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	0151      	lsls	r1, r2, #5
 8007766:	69fa      	ldr	r2, [r7, #28]
 8007768:	440a      	add	r2, r1
 800776a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800776e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007772:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007776:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d132      	bne.n	80077e4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	689a      	ldr	r2, [r3, #8]
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	689a      	ldr	r2, [r3, #8]
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	015a      	lsls	r2, r3, #5
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	4413      	add	r3, r2
 800779e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077a2:	691a      	ldr	r2, [r3, #16]
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	6a1b      	ldr	r3, [r3, #32]
 80077a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077ac:	69b9      	ldr	r1, [r7, #24]
 80077ae:	0148      	lsls	r0, r1, #5
 80077b0:	69f9      	ldr	r1, [r7, #28]
 80077b2:	4401      	add	r1, r0
 80077b4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80077b8:	4313      	orrs	r3, r2
 80077ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	015a      	lsls	r2, r3, #5
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	4413      	add	r3, r2
 80077c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	69ba      	ldr	r2, [r7, #24]
 80077cc:	0151      	lsls	r1, r2, #5
 80077ce:	69fa      	ldr	r2, [r7, #28]
 80077d0:	440a      	add	r2, r1
 80077d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80077d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80077da:	6113      	str	r3, [r2, #16]
 80077dc:	e062      	b.n	80078a4 <USB_EPStartXfer+0x490>
 80077de:	bf00      	nop
 80077e0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	691b      	ldr	r3, [r3, #16]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d123      	bne.n	8007834 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077f8:	691a      	ldr	r2, [r3, #16]
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007802:	69b9      	ldr	r1, [r7, #24]
 8007804:	0148      	lsls	r0, r1, #5
 8007806:	69f9      	ldr	r1, [r7, #28]
 8007808:	4401      	add	r1, r0
 800780a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800780e:	4313      	orrs	r3, r2
 8007810:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	015a      	lsls	r2, r3, #5
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	4413      	add	r3, r2
 800781a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	69ba      	ldr	r2, [r7, #24]
 8007822:	0151      	lsls	r1, r2, #5
 8007824:	69fa      	ldr	r2, [r7, #28]
 8007826:	440a      	add	r2, r1
 8007828:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800782c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007830:	6113      	str	r3, [r2, #16]
 8007832:	e037      	b.n	80078a4 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	691a      	ldr	r2, [r3, #16]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	4413      	add	r3, r2
 800783e:	1e5a      	subs	r2, r3, #1
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	fbb2 f3f3 	udiv	r3, r2, r3
 8007848:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	8afa      	ldrh	r2, [r7, #22]
 8007850:	fb03 f202 	mul.w	r2, r3, r2
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	4413      	add	r3, r2
 8007860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007864:	691a      	ldr	r2, [r3, #16]
 8007866:	8afb      	ldrh	r3, [r7, #22]
 8007868:	04d9      	lsls	r1, r3, #19
 800786a:	4b38      	ldr	r3, [pc, #224]	@ (800794c <USB_EPStartXfer+0x538>)
 800786c:	400b      	ands	r3, r1
 800786e:	69b9      	ldr	r1, [r7, #24]
 8007870:	0148      	lsls	r0, r1, #5
 8007872:	69f9      	ldr	r1, [r7, #28]
 8007874:	4401      	add	r1, r0
 8007876:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800787a:	4313      	orrs	r3, r2
 800787c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	015a      	lsls	r2, r3, #5
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	4413      	add	r3, r2
 8007886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800788a:	691a      	ldr	r2, [r3, #16]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007894:	69b9      	ldr	r1, [r7, #24]
 8007896:	0148      	lsls	r0, r1, #5
 8007898:	69f9      	ldr	r1, [r7, #28]
 800789a:	4401      	add	r1, r0
 800789c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80078a0:	4313      	orrs	r3, r2
 80078a2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80078a4:	79fb      	ldrb	r3, [r7, #7]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d10d      	bne.n	80078c6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d009      	beq.n	80078c6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	68d9      	ldr	r1, [r3, #12]
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	015a      	lsls	r2, r3, #5
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	4413      	add	r3, r2
 80078be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078c2:	460a      	mov	r2, r1
 80078c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	791b      	ldrb	r3, [r3, #4]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d128      	bne.n	8007920 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d110      	bne.n	8007900 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	015a      	lsls	r2, r3, #5
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	69ba      	ldr	r2, [r7, #24]
 80078ee:	0151      	lsls	r1, r2, #5
 80078f0:	69fa      	ldr	r2, [r7, #28]
 80078f2:	440a      	add	r2, r1
 80078f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80078fc:	6013      	str	r3, [r2, #0]
 80078fe:	e00f      	b.n	8007920 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	4413      	add	r3, r2
 8007908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	0151      	lsls	r1, r2, #5
 8007912:	69fa      	ldr	r2, [r7, #28]
 8007914:	440a      	add	r2, r1
 8007916:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800791a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800791e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	015a      	lsls	r2, r3, #5
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	4413      	add	r3, r2
 8007928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69ba      	ldr	r2, [r7, #24]
 8007930:	0151      	lsls	r1, r2, #5
 8007932:	69fa      	ldr	r2, [r7, #28]
 8007934:	440a      	add	r2, r1
 8007936:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800793a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800793e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3720      	adds	r7, #32
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	1ff80000 	.word	0x1ff80000

08007950 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007950:	b480      	push	{r7}
 8007952:	b087      	sub	sp, #28
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	785b      	ldrb	r3, [r3, #1]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d14a      	bne.n	8007a04 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	4413      	add	r3, r2
 8007978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007982:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007986:	f040 8086 	bne.w	8007a96 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	683a      	ldr	r2, [r7, #0]
 800799c:	7812      	ldrb	r2, [r2, #0]
 800799e:	0151      	lsls	r1, r2, #5
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	440a      	add	r2, r1
 80079a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80079ac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	015a      	lsls	r2, r3, #5
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	7812      	ldrb	r2, [r2, #0]
 80079c2:	0151      	lsls	r1, r2, #5
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	440a      	add	r2, r1
 80079c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80079cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	3301      	adds	r3, #1
 80079d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80079de:	4293      	cmp	r3, r2
 80079e0:	d902      	bls.n	80079e8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	75fb      	strb	r3, [r7, #23]
          break;
 80079e6:	e056      	b.n	8007a96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	015a      	lsls	r2, r3, #5
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	4413      	add	r3, r2
 80079f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a00:	d0e7      	beq.n	80079d2 <USB_EPStopXfer+0x82>
 8007a02:	e048      	b.n	8007a96 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a1c:	d13b      	bne.n	8007a96 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	7812      	ldrb	r2, [r2, #0]
 8007a32:	0151      	lsls	r1, r2, #5
 8007a34:	693a      	ldr	r2, [r7, #16]
 8007a36:	440a      	add	r2, r1
 8007a38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a3c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a40:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	7812      	ldrb	r2, [r2, #0]
 8007a56:	0151      	lsls	r1, r2, #5
 8007a58:	693a      	ldr	r2, [r7, #16]
 8007a5a:	440a      	add	r2, r1
 8007a5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d902      	bls.n	8007a7c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	75fb      	strb	r3, [r7, #23]
          break;
 8007a7a:	e00c      	b.n	8007a96 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	015a      	lsls	r2, r3, #5
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	4413      	add	r3, r2
 8007a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a94:	d0e7      	beq.n	8007a66 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	371c      	adds	r7, #28
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b089      	sub	sp, #36	@ 0x24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	60b9      	str	r1, [r7, #8]
 8007aae:	4611      	mov	r1, r2
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	71fb      	strb	r3, [r7, #7]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007ac2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d123      	bne.n	8007b12 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007aca:	88bb      	ldrh	r3, [r7, #4]
 8007acc:	3303      	adds	r3, #3
 8007ace:	089b      	lsrs	r3, r3, #2
 8007ad0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	61bb      	str	r3, [r7, #24]
 8007ad6:	e018      	b.n	8007b0a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ad8:	79fb      	ldrb	r3, [r7, #7]
 8007ada:	031a      	lsls	r2, r3, #12
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	4413      	add	r3, r2
 8007ae0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	3301      	adds	r3, #1
 8007af0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	3301      	adds	r3, #1
 8007af6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	3301      	adds	r3, #1
 8007afc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	3301      	adds	r3, #1
 8007b02:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	3301      	adds	r3, #1
 8007b08:	61bb      	str	r3, [r7, #24]
 8007b0a:	69ba      	ldr	r2, [r7, #24]
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d3e2      	bcc.n	8007ad8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3724      	adds	r7, #36	@ 0x24
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b08b      	sub	sp, #44	@ 0x2c
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007b36:	88fb      	ldrh	r3, [r7, #6]
 8007b38:	089b      	lsrs	r3, r3, #2
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007b3e:	88fb      	ldrh	r3, [r7, #6]
 8007b40:	f003 0303 	and.w	r3, r3, #3
 8007b44:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007b46:	2300      	movs	r3, #0
 8007b48:	623b      	str	r3, [r7, #32]
 8007b4a:	e014      	b.n	8007b76 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b56:	601a      	str	r2, [r3, #0]
    pDest++;
 8007b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b60:	3301      	adds	r3, #1
 8007b62:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b66:	3301      	adds	r3, #1
 8007b68:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6c:	3301      	adds	r3, #1
 8007b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	3301      	adds	r3, #1
 8007b74:	623b      	str	r3, [r7, #32]
 8007b76:	6a3a      	ldr	r2, [r7, #32]
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d3e6      	bcc.n	8007b4c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007b7e:	8bfb      	ldrh	r3, [r7, #30]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d01e      	beq.n	8007bc2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007b84:	2300      	movs	r3, #0
 8007b86:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007b8e:	461a      	mov	r2, r3
 8007b90:	f107 0310 	add.w	r3, r7, #16
 8007b94:	6812      	ldr	r2, [r2, #0]
 8007b96:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	6a3b      	ldr	r3, [r7, #32]
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	00db      	lsls	r3, r3, #3
 8007ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba8:	701a      	strb	r2, [r3, #0]
      i++;
 8007baa:	6a3b      	ldr	r3, [r7, #32]
 8007bac:	3301      	adds	r3, #1
 8007bae:	623b      	str	r3, [r7, #32]
      pDest++;
 8007bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007bb6:	8bfb      	ldrh	r3, [r7, #30]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007bbc:	8bfb      	ldrh	r3, [r7, #30]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d1ea      	bne.n	8007b98 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	372c      	adds	r7, #44	@ 0x2c
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	785b      	ldrb	r3, [r3, #1]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d12c      	bne.n	8007c46 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	015a      	lsls	r2, r3, #5
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	db12      	blt.n	8007c24 <USB_EPSetStall+0x54>
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00f      	beq.n	8007c24 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	015a      	lsls	r2, r3, #5
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	0151      	lsls	r1, r2, #5
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	440a      	add	r2, r1
 8007c1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c1e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007c22:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	015a      	lsls	r2, r3, #5
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	0151      	lsls	r1, r2, #5
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	440a      	add	r2, r1
 8007c3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c3e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c42:	6013      	str	r3, [r2, #0]
 8007c44:	e02b      	b.n	8007c9e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	db12      	blt.n	8007c7e <USB_EPSetStall+0xae>
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00f      	beq.n	8007c7e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	015a      	lsls	r2, r3, #5
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	4413      	add	r3, r2
 8007c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68ba      	ldr	r2, [r7, #8]
 8007c6e:	0151      	lsls	r1, r2, #5
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	440a      	add	r2, r1
 8007c74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c78:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007c7c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	015a      	lsls	r2, r3, #5
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	4413      	add	r3, r2
 8007c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	0151      	lsls	r1, r2, #5
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	440a      	add	r2, r1
 8007c94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c9c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3714      	adds	r7, #20
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b085      	sub	sp, #20
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	785b      	ldrb	r3, [r3, #1]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d128      	bne.n	8007d1a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	0151      	lsls	r1, r2, #5
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	440a      	add	r2, r1
 8007cde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ce2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ce6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	791b      	ldrb	r3, [r3, #4]
 8007cec:	2b03      	cmp	r3, #3
 8007cee:	d003      	beq.n	8007cf8 <USB_EPClearStall+0x4c>
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	791b      	ldrb	r3, [r3, #4]
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d138      	bne.n	8007d6a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	0151      	lsls	r1, r2, #5
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	440a      	add	r2, r1
 8007d0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d16:	6013      	str	r3, [r2, #0]
 8007d18:	e027      	b.n	8007d6a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	015a      	lsls	r2, r3, #5
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	4413      	add	r3, r2
 8007d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	0151      	lsls	r1, r2, #5
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	440a      	add	r2, r1
 8007d30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d34:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d38:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	791b      	ldrb	r3, [r3, #4]
 8007d3e:	2b03      	cmp	r3, #3
 8007d40:	d003      	beq.n	8007d4a <USB_EPClearStall+0x9e>
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	791b      	ldrb	r3, [r3, #4]
 8007d46:	2b02      	cmp	r3, #2
 8007d48:	d10f      	bne.n	8007d6a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	015a      	lsls	r2, r3, #5
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	4413      	add	r3, r2
 8007d52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	0151      	lsls	r1, r2, #5
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	440a      	add	r2, r1
 8007d60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d68:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3714      	adds	r7, #20
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	460b      	mov	r3, r1
 8007d82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d96:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007d9a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	78fb      	ldrb	r3, [r7, #3]
 8007da6:	011b      	lsls	r3, r3, #4
 8007da8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007dac:	68f9      	ldr	r1, [r7, #12]
 8007dae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007db2:	4313      	orrs	r3, r2
 8007db4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3714      	adds	r7, #20
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007dde:	f023 0303 	bic.w	r3, r3, #3
 8007de2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007df2:	f023 0302 	bic.w	r3, r3, #2
 8007df6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b085      	sub	sp, #20
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007e20:	f023 0303 	bic.w	r3, r3, #3
 8007e24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e34:	f043 0302 	orr.w	r3, r3, #2
 8007e38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3714      	adds	r7, #20
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b085      	sub	sp, #20
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	695b      	ldr	r3, [r3, #20]
 8007e54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e60:	68fb      	ldr	r3, [r7, #12]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3714      	adds	r7, #20
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b085      	sub	sp, #20
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	4013      	ands	r3, r2
 8007e90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	0c1b      	lsrs	r3, r3, #16
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b085      	sub	sp, #20
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ebe:	69db      	ldr	r3, [r3, #28]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	b29b      	uxth	r3, r3
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007ed6:	b480      	push	{r7}
 8007ed8:	b085      	sub	sp, #20
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	460b      	mov	r3, r1
 8007ee0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007ee6:	78fb      	ldrb	r3, [r7, #3]
 8007ee8:	015a      	lsls	r2, r3, #5
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	4413      	add	r3, r2
 8007eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007efc:	695b      	ldr	r3, [r3, #20]
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	4013      	ands	r3, r2
 8007f02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f04:	68bb      	ldr	r3, [r7, #8]
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3714      	adds	r7, #20
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr

08007f12 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007f12:	b480      	push	{r7}
 8007f14:	b087      	sub	sp, #28
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f34:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007f36:	78fb      	ldrb	r3, [r7, #3]
 8007f38:	f003 030f 	and.w	r3, r3, #15
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f42:	01db      	lsls	r3, r3, #7
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007f4c:	78fb      	ldrb	r3, [r7, #3]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f58:	689b      	ldr	r3, [r3, #8]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007f60:	68bb      	ldr	r3, [r7, #8]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	371c      	adds	r7, #28
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b083      	sub	sp, #12
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	f003 0301 	and.w	r3, r3, #1
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	370c      	adds	r7, #12
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b085      	sub	sp, #20
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fa4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007fa8:	f023 0307 	bic.w	r3, r3, #7
 8007fac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b087      	sub	sp, #28
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	607a      	str	r2, [r7, #4]
 8007fdc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	333c      	adds	r3, #60	@ 0x3c
 8007fe6:	3304      	adds	r3, #4
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	4a26      	ldr	r2, [pc, #152]	@ (8008088 <USB_EP0_OutStart+0xb8>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d90a      	bls.n	800800a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008000:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008004:	d101      	bne.n	800800a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	e037      	b.n	800807a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008010:	461a      	mov	r2, r3
 8008012:	2300      	movs	r3, #0
 8008014:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008024:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008028:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008038:	f043 0318 	orr.w	r3, r3, #24
 800803c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800804c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008050:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008052:	7afb      	ldrb	r3, [r7, #11]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d10f      	bne.n	8008078 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800805e:	461a      	mov	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	697a      	ldr	r2, [r7, #20]
 800806e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008072:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008076:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	371c      	adds	r7, #28
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	4f54300a 	.word	0x4f54300a

0800808c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008094:	2300      	movs	r3, #0
 8008096:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	3301      	adds	r3, #1
 800809c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080a4:	d901      	bls.n	80080aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e01b      	b.n	80080e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	daf2      	bge.n	8008098 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80080b2:	2300      	movs	r3, #0
 80080b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	f043 0201 	orr.w	r2, r3, #1
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	3301      	adds	r3, #1
 80080c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080ce:	d901      	bls.n	80080d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e006      	b.n	80080e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	f003 0301 	and.w	r3, r3, #1
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d0f0      	beq.n	80080c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
	...

080080f0 <Motor_setup_LF>:
char* IN_RF;
char* IN_RB;
char* IN_EXTRA1;
char* IN_EXTRA2;

void Motor_setup_LF(TIM_HandleTypeDef *_TIM_14_CH1 ,TIM_HandleTypeDef *_TIM_5  ,char* _IN_LF){
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
	//Motor_setup_LF(PWM_TIM ,Encoder_TIM   ,IN_LF);

	LF_PWM = _TIM_14_CH1;
 80080fc:	4a0f      	ldr	r2, [pc, #60]	@ (800813c <Motor_setup_LF+0x4c>)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	6013      	str	r3, [r2, #0]
	EN_LF      = _TIM_5;
 8008102:	4a0f      	ldr	r2, [pc, #60]	@ (8008140 <Motor_setup_LF+0x50>)
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(LF_PWM, TIM_CHANNEL_1);       //PWM
 8008108:	4b0c      	ldr	r3, [pc, #48]	@ (800813c <Motor_setup_LF+0x4c>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2100      	movs	r1, #0
 800810e:	4618      	mov	r0, r3
 8008110:	f7fc ff76 	bl	8005000 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_LF , TIM_CHANNEL_ALL);     //Encoder
 8008114:	4b0a      	ldr	r3, [pc, #40]	@ (8008140 <Motor_setup_LF+0x50>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	213c      	movs	r1, #60	@ 0x3c
 800811a:	4618      	mov	r0, r3
 800811c:	f7fd f8de 	bl	80052dc <HAL_TIM_Encoder_Start>

	IN_LF = _IN_LF;
 8008120:	4a08      	ldr	r2, [pc, #32]	@ (8008144 <Motor_setup_LF+0x54>)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6013      	str	r3, [r2, #0]

	DutyCycle_LF_MAX = (LF_PWM->Init.Period);
 8008126:	4b05      	ldr	r3, [pc, #20]	@ (800813c <Motor_setup_LF+0x4c>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	b21a      	sxth	r2, r3
 800812e:	4b06      	ldr	r3, [pc, #24]	@ (8008148 <Motor_setup_LF+0x58>)
 8008130:	801a      	strh	r2, [r3, #0]

}
 8008132:	bf00      	nop
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	2000066c 	.word	0x2000066c
 8008140:	20000654 	.word	0x20000654
 8008144:	20000690 	.word	0x20000690
 8008148:	20000684 	.word	0x20000684

0800814c <Motor_setup_LB>:

void Motor_setup_LB(TIM_HandleTypeDef *_TIM_12_CH1 ,TIM_HandleTypeDef *_TIM_1  ,char* _IN_LB){
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
    //Motor_setup_LB(PWM_TIM ,Encoder_TIM  ,IN1_LB ,IN2_LB);

	LB_PWM = _TIM_12_CH1;
 8008158:	4a0f      	ldr	r2, [pc, #60]	@ (8008198 <Motor_setup_LB+0x4c>)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6013      	str	r3, [r2, #0]
	EN_LB      = _TIM_1;
 800815e:	4a0f      	ldr	r2, [pc, #60]	@ (800819c <Motor_setup_LB+0x50>)
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(LB_PWM, TIM_CHANNEL_1);       //PWM
 8008164:	4b0c      	ldr	r3, [pc, #48]	@ (8008198 <Motor_setup_LB+0x4c>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2100      	movs	r1, #0
 800816a:	4618      	mov	r0, r3
 800816c:	f7fc ff48 	bl	8005000 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_LB , TIM_CHANNEL_ALL);     //Encoder
 8008170:	4b0a      	ldr	r3, [pc, #40]	@ (800819c <Motor_setup_LB+0x50>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	213c      	movs	r1, #60	@ 0x3c
 8008176:	4618      	mov	r0, r3
 8008178:	f7fd f8b0 	bl	80052dc <HAL_TIM_Encoder_Start>

	IN_LB = _IN_LB;
 800817c:	4a08      	ldr	r2, [pc, #32]	@ (80081a0 <Motor_setup_LB+0x54>)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6013      	str	r3, [r2, #0]

	DutyCycle_LB_MAX = (LB_PWM->Init.Period);
 8008182:	4b05      	ldr	r3, [pc, #20]	@ (8008198 <Motor_setup_LB+0x4c>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	b21a      	sxth	r2, r3
 800818a:	4b06      	ldr	r3, [pc, #24]	@ (80081a4 <Motor_setup_LB+0x58>)
 800818c:	801a      	strh	r2, [r3, #0]

}
 800818e:	bf00      	nop
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	20000670 	.word	0x20000670
 800819c:	20000658 	.word	0x20000658
 80081a0:	20000694 	.word	0x20000694
 80081a4:	20000686 	.word	0x20000686

080081a8 <Motor_setup_RF>:

void Motor_setup_RF(TIM_HandleTypeDef *_TIM_11_CH1  ,TIM_HandleTypeDef *_TIM_8  ,char* _IN_RF){
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
    //Motor_setup_RF(PWM_TIM ,Encoder_TIM   ,IN1_RF ,IN2_RF);

	RF_PWM = _TIM_11_CH1;
 80081b4:	4a0f      	ldr	r2, [pc, #60]	@ (80081f4 <Motor_setup_RF+0x4c>)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6013      	str	r3, [r2, #0]
	EN_RF  = _TIM_8;
 80081ba:	4a0f      	ldr	r2, [pc, #60]	@ (80081f8 <Motor_setup_RF+0x50>)
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(RF_PWM, TIM_CHANNEL_1);           //PWM
 80081c0:	4b0c      	ldr	r3, [pc, #48]	@ (80081f4 <Motor_setup_RF+0x4c>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2100      	movs	r1, #0
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fc ff1a 	bl	8005000 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_RF , TIM_CHANNEL_ALL);     //Encoder
 80081cc:	4b0a      	ldr	r3, [pc, #40]	@ (80081f8 <Motor_setup_RF+0x50>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	213c      	movs	r1, #60	@ 0x3c
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fd f882 	bl	80052dc <HAL_TIM_Encoder_Start>

	IN_RF = _IN_RF;
 80081d8:	4a08      	ldr	r2, [pc, #32]	@ (80081fc <Motor_setup_RF+0x54>)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6013      	str	r3, [r2, #0]

	DutyCycle_RF_MAX = (RF_PWM->Init.Period);
 80081de:	4b05      	ldr	r3, [pc, #20]	@ (80081f4 <Motor_setup_RF+0x4c>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	b21a      	sxth	r2, r3
 80081e6:	4b06      	ldr	r3, [pc, #24]	@ (8008200 <Motor_setup_RF+0x58>)
 80081e8:	801a      	strh	r2, [r3, #0]

}
 80081ea:	bf00      	nop
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	20000674 	.word	0x20000674
 80081f8:	2000065c 	.word	0x2000065c
 80081fc:	20000698 	.word	0x20000698
 8008200:	20000688 	.word	0x20000688

08008204 <Motor_setup_RB>:

void Motor_setup_RB(TIM_HandleTypeDef *_TIM_12_CH2   ,TIM_HandleTypeDef *_TIM_4 ,char* _IN_RB){
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	RB_PWM = _TIM_12_CH2;
 8008210:	4a0f      	ldr	r2, [pc, #60]	@ (8008250 <Motor_setup_RB+0x4c>)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6013      	str	r3, [r2, #0]
	EN_RB  = _TIM_4;
 8008216:	4a0f      	ldr	r2, [pc, #60]	@ (8008254 <Motor_setup_RB+0x50>)
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(RB_PWM, TIM_CHANNEL_2);            //PWM
 800821c:	4b0c      	ldr	r3, [pc, #48]	@ (8008250 <Motor_setup_RB+0x4c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2104      	movs	r1, #4
 8008222:	4618      	mov	r0, r3
 8008224:	f7fc feec 	bl	8005000 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_RB , TIM_CHANNEL_ALL);      //Encoder
 8008228:	4b0a      	ldr	r3, [pc, #40]	@ (8008254 <Motor_setup_RB+0x50>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	213c      	movs	r1, #60	@ 0x3c
 800822e:	4618      	mov	r0, r3
 8008230:	f7fd f854 	bl	80052dc <HAL_TIM_Encoder_Start>

	IN_RB = _IN_RB;
 8008234:	4a08      	ldr	r2, [pc, #32]	@ (8008258 <Motor_setup_RB+0x54>)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6013      	str	r3, [r2, #0]

	DutyCycle_RB_MAX = (RB_PWM->Init.Period);
 800823a:	4b05      	ldr	r3, [pc, #20]	@ (8008250 <Motor_setup_RB+0x4c>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	b21a      	sxth	r2, r3
 8008242:	4b06      	ldr	r3, [pc, #24]	@ (800825c <Motor_setup_RB+0x58>)
 8008244:	801a      	strh	r2, [r3, #0]

}
 8008246:	bf00      	nop
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20000678 	.word	0x20000678
 8008254:	20000660 	.word	0x20000660
 8008258:	2000069c 	.word	0x2000069c
 800825c:	2000068a 	.word	0x2000068a

08008260 <Motor_setup_EXTRA1>:

void Motor_setup_EXTRA1(TIM_HandleTypeDef *_TIM_9_CH1  ,TIM_HandleTypeDef *_TIM_3  ,char* _IN_EXTRA1){
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	EXTRA1_PWM = _TIM_9_CH1;
 800826c:	4a0f      	ldr	r2, [pc, #60]	@ (80082ac <Motor_setup_EXTRA1+0x4c>)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6013      	str	r3, [r2, #0]
	EN_X  = _TIM_3;
 8008272:	4a0f      	ldr	r2, [pc, #60]	@ (80082b0 <Motor_setup_EXTRA1+0x50>)
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(EXTRA1_PWM, TIM_CHANNEL_1);            //PWM
 8008278:	4b0c      	ldr	r3, [pc, #48]	@ (80082ac <Motor_setup_EXTRA1+0x4c>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2100      	movs	r1, #0
 800827e:	4618      	mov	r0, r3
 8008280:	f7fc febe 	bl	8005000 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_X , TIM_CHANNEL_ALL);      //Encoder
 8008284:	4b0a      	ldr	r3, [pc, #40]	@ (80082b0 <Motor_setup_EXTRA1+0x50>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	213c      	movs	r1, #60	@ 0x3c
 800828a:	4618      	mov	r0, r3
 800828c:	f7fd f826 	bl	80052dc <HAL_TIM_Encoder_Start>

	IN_EXTRA1 = _IN_EXTRA1;
 8008290:	4a08      	ldr	r2, [pc, #32]	@ (80082b4 <Motor_setup_EXTRA1+0x54>)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6013      	str	r3, [r2, #0]

	DutyCycle_EXTRA1_MAX = (EXTRA1_PWM->Init.Period);
 8008296:	4b05      	ldr	r3, [pc, #20]	@ (80082ac <Motor_setup_EXTRA1+0x4c>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	b21a      	sxth	r2, r3
 800829e:	4b06      	ldr	r3, [pc, #24]	@ (80082b8 <Motor_setup_EXTRA1+0x58>)
 80082a0:	801a      	strh	r2, [r3, #0]

}
 80082a2:	bf00      	nop
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	2000067c 	.word	0x2000067c
 80082b0:	20000664 	.word	0x20000664
 80082b4:	200006a0 	.word	0x200006a0
 80082b8:	2000068c 	.word	0x2000068c

080082bc <Motor_setup_EXTRA2>:

void Motor_setup_EXTRA2(TIM_HandleTypeDef *_TIM_10_CH1  ,TIM_HandleTypeDef *_TIM_2 ,char* _IN_EXTRA2){
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	EXTRA2_PWM = _TIM_10_CH1;
 80082c8:	4a0f      	ldr	r2, [pc, #60]	@ (8008308 <Motor_setup_EXTRA2+0x4c>)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6013      	str	r3, [r2, #0]
	EN_Y  = _TIM_2;
 80082ce:	4a0f      	ldr	r2, [pc, #60]	@ (800830c <Motor_setup_EXTRA2+0x50>)
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(EXTRA2_PWM, TIM_CHANNEL_1);            //PWM
 80082d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008308 <Motor_setup_EXTRA2+0x4c>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2100      	movs	r1, #0
 80082da:	4618      	mov	r0, r3
 80082dc:	f7fc fe90 	bl	8005000 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_Y , TIM_CHANNEL_ALL);      //Encoder
 80082e0:	4b0a      	ldr	r3, [pc, #40]	@ (800830c <Motor_setup_EXTRA2+0x50>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	213c      	movs	r1, #60	@ 0x3c
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fc fff8 	bl	80052dc <HAL_TIM_Encoder_Start>

	IN_EXTRA2 = _IN_EXTRA2;
 80082ec:	4a08      	ldr	r2, [pc, #32]	@ (8008310 <Motor_setup_EXTRA2+0x54>)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6013      	str	r3, [r2, #0]

	DutyCycle_EXTRA2_MAX = (EXTRA2_PWM->Init.Period);
 80082f2:	4b05      	ldr	r3, [pc, #20]	@ (8008308 <Motor_setup_EXTRA2+0x4c>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	b21a      	sxth	r2, r3
 80082fa:	4b06      	ldr	r3, [pc, #24]	@ (8008314 <Motor_setup_EXTRA2+0x58>)
 80082fc:	801a      	strh	r2, [r3, #0]

}
 80082fe:	bf00      	nop
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	20000680 	.word	0x20000680
 800830c:	20000668 	.word	0x20000668
 8008310:	200006a4 	.word	0x200006a4
 8008314:	2000068e 	.word	0x2000068e

08008318 <getCount>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////PID///////////////////////////////////////////////////////////////

int16_t getCount(TIM_HandleTypeDef *TIM){
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
	int16_t count = ((int16_t)(TIM->Instance->CNT));
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008326:	81fb      	strh	r3, [r7, #14]

	return count;
 8008328:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3714      	adds	r7, #20
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <Setup_CPR>:

float _RPM[6] = {0 ,0 ,0 ,0 ,0 ,0}; //Speed   //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

uint16_t CPR = 68;

void Setup_CPR(uint16_t _CPR){
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	4603      	mov	r3, r0
 8008340:	80fb      	strh	r3, [r7, #6]
	CPR = _CPR;
 8008342:	4a04      	ldr	r2, [pc, #16]	@ (8008354 <Setup_CPR+0x1c>)
 8008344:	88fb      	ldrh	r3, [r7, #6]
 8008346:	8013      	strh	r3, [r2, #0]
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	20000018 	.word	0x20000018

08008358 <Setup_Gear_Ratio>:

uint16_t Gear_Ratio = 48;

void Setup_Gear_Ratio(uint16_t _Gear_Ratio){
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	4603      	mov	r3, r0
 8008360:	80fb      	strh	r3, [r7, #6]
	Gear_Ratio = _Gear_Ratio;
 8008362:	4a04      	ldr	r2, [pc, #16]	@ (8008374 <Setup_Gear_Ratio+0x1c>)
 8008364:	88fb      	ldrh	r3, [r7, #6]
 8008366:	8013      	strh	r3, [r2, #0]
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	2000001a 	.word	0x2000001a

08008378 <Setup_frequency_Motor>:

void Setup_frequency_Motor(uint16_t freq){
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	4603      	mov	r3, r0
 8008380:	80fb      	strh	r3, [r7, #6]
	_freq = freq;
 8008382:	4a04      	ldr	r2, [pc, #16]	@ (8008394 <Setup_frequency_Motor+0x1c>)
 8008384:	88fb      	ldrh	r3, [r7, #6]
 8008386:	8013      	strh	r3, [r2, #0]
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	20000016 	.word	0x20000016

08008398 <getRad_s_to_RPM>:
	float Rad_s = RPM * 0.10472f;

	return Rad_s;
}

float getRad_s_to_RPM(float Rad_s){
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	ed87 0a01 	vstr	s0, [r7, #4]
	float RPM__ = Rad_s * 9.549297f;
 80083a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80083a6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80083c8 <getRad_s_to_RPM+0x30>
 80083aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80083ae:	edc7 7a03 	vstr	s15, [r7, #12]

	return RPM__;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	ee07 3a90 	vmov	s15, r3
}
 80083b8:	eeb0 0a67 	vmov.f32	s0, s15
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	4118c9ec 	.word	0x4118c9ec

080083cc <getRPM_TIM_Wheel>:

float getRPM_TIM_Wheel(TIM_HandleTypeDef *TIM ,uint8_t _Wheel){
 80083cc:	b590      	push	{r4, r7, lr}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	460b      	mov	r3, r1
 80083d6:	70fb      	strb	r3, [r7, #3]
	Present_Count[_Wheel] = (int16_t)getCount(TIM);
 80083d8:	78fc      	ldrb	r4, [r7, #3]
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7ff ff9c 	bl	8008318 <getCount>
 80083e0:	4603      	mov	r3, r0
 80083e2:	461a      	mov	r2, r3
 80083e4:	4b29      	ldr	r3, [pc, #164]	@ (800848c <getRPM_TIM_Wheel+0xc0>)
 80083e6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	// V = count/t = count*freq
	_RPM[_Wheel] = (float)((int16_t)(Present_Count[_Wheel] - Past_Count[_Wheel]) * _freq);
 80083ea:	78fb      	ldrb	r3, [r7, #3]
 80083ec:	4a27      	ldr	r2, [pc, #156]	@ (800848c <getRPM_TIM_Wheel+0xc0>)
 80083ee:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80083f2:	b29a      	uxth	r2, r3
 80083f4:	78fb      	ldrb	r3, [r7, #3]
 80083f6:	4926      	ldr	r1, [pc, #152]	@ (8008490 <getRPM_TIM_Wheel+0xc4>)
 80083f8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	b29b      	uxth	r3, r3
 8008402:	b21b      	sxth	r3, r3
 8008404:	461a      	mov	r2, r3
 8008406:	4b23      	ldr	r3, [pc, #140]	@ (8008494 <getRPM_TIM_Wheel+0xc8>)
 8008408:	881b      	ldrh	r3, [r3, #0]
 800840a:	fb03 f202 	mul.w	r2, r3, r2
 800840e:	78fb      	ldrb	r3, [r7, #3]
 8008410:	ee07 2a90 	vmov	s15, r2
 8008414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008418:	4a1f      	ldr	r2, [pc, #124]	@ (8008498 <getRPM_TIM_Wheel+0xcc>)
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	edc3 7a00 	vstr	s15, [r3]
	_RPM[_Wheel] = (float)(((_RPM[_Wheel]* 60.0f)/CPR )/Gear_Ratio);
 8008422:	78fb      	ldrb	r3, [r7, #3]
 8008424:	4a1c      	ldr	r2, [pc, #112]	@ (8008498 <getRPM_TIM_Wheel+0xcc>)
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	edd3 7a00 	vldr	s15, [r3]
 800842e:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800849c <getRPM_TIM_Wheel+0xd0>
 8008432:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008436:	4b1a      	ldr	r3, [pc, #104]	@ (80084a0 <getRPM_TIM_Wheel+0xd4>)
 8008438:	881b      	ldrh	r3, [r3, #0]
 800843a:	ee07 3a90 	vmov	s15, r3
 800843e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008442:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008446:	4b17      	ldr	r3, [pc, #92]	@ (80084a4 <getRPM_TIM_Wheel+0xd8>)
 8008448:	881b      	ldrh	r3, [r3, #0]
 800844a:	ee07 3a90 	vmov	s15, r3
 800844e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008452:	78fb      	ldrb	r3, [r7, #3]
 8008454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008458:	4a0f      	ldr	r2, [pc, #60]	@ (8008498 <getRPM_TIM_Wheel+0xcc>)
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4413      	add	r3, r2
 800845e:	edc3 7a00 	vstr	s15, [r3]

	Past_Count[_Wheel] = Present_Count[_Wheel];
 8008462:	78fa      	ldrb	r2, [r7, #3]
 8008464:	78fb      	ldrb	r3, [r7, #3]
 8008466:	4909      	ldr	r1, [pc, #36]	@ (800848c <getRPM_TIM_Wheel+0xc0>)
 8008468:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800846c:	4a08      	ldr	r2, [pc, #32]	@ (8008490 <getRPM_TIM_Wheel+0xc4>)
 800846e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return _RPM[_Wheel];
 8008472:	78fb      	ldrb	r3, [r7, #3]
 8008474:	4a08      	ldr	r2, [pc, #32]	@ (8008498 <getRPM_TIM_Wheel+0xcc>)
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	ee07 3a90 	vmov	s15, r3
}
 8008480:	eeb0 0a67 	vmov.f32	s0, s15
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	bd90      	pop	{r4, r7, pc}
 800848a:	bf00      	nop
 800848c:	200006a8 	.word	0x200006a8
 8008490:	200006b4 	.word	0x200006b4
 8008494:	20000016 	.word	0x20000016
 8008498:	200006c0 	.word	0x200006c0
 800849c:	42700000 	.word	0x42700000
 80084a0:	20000018 	.word	0x20000018
 80084a4:	2000001a 	.word	0x2000001a

080084a8 <Setup_PID_LF>:

float min_speed[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2
float max_speed[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2


void Setup_PID_LF(float Kp_LF ,float Ki_LF ,float Kd_LF ,float min_speed_LF ,float max_speed_LF){
 80084a8:	b480      	push	{r7}
 80084aa:	b087      	sub	sp, #28
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	ed87 0a05 	vstr	s0, [r7, #20]
 80084b2:	edc7 0a04 	vstr	s1, [r7, #16]
 80084b6:	ed87 1a03 	vstr	s2, [r7, #12]
 80084ba:	edc7 1a02 	vstr	s3, [r7, #8]
 80084be:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[0] = Kp_LF;
 80084c2:	4a0a      	ldr	r2, [pc, #40]	@ (80084ec <Setup_PID_LF+0x44>)
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	6013      	str	r3, [r2, #0]
	Ki_Wheel[0] = Ki_LF;
 80084c8:	4a09      	ldr	r2, [pc, #36]	@ (80084f0 <Setup_PID_LF+0x48>)
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	6013      	str	r3, [r2, #0]
	Kd_Wheel[0] = Kd_LF;
 80084ce:	4a09      	ldr	r2, [pc, #36]	@ (80084f4 <Setup_PID_LF+0x4c>)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6013      	str	r3, [r2, #0]

	min_speed[0] = min_speed_LF;
 80084d4:	4a08      	ldr	r2, [pc, #32]	@ (80084f8 <Setup_PID_LF+0x50>)
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	6013      	str	r3, [r2, #0]
	max_speed[0] = max_speed_LF;
 80084da:	4a08      	ldr	r2, [pc, #32]	@ (80084fc <Setup_PID_LF+0x54>)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6013      	str	r3, [r2, #0]
}
 80084e0:	bf00      	nop
 80084e2:	371c      	adds	r7, #28
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr
 80084ec:	200006d8 	.word	0x200006d8
 80084f0:	200006f0 	.word	0x200006f0
 80084f4:	20000708 	.word	0x20000708
 80084f8:	20000720 	.word	0x20000720
 80084fc:	20000738 	.word	0x20000738

08008500 <Setup_PID_LB>:

void Setup_PID_LB(float Kp_LB ,float Ki_LB ,float Kd_LB ,float min_speed_LB ,float max_speed_LB){
 8008500:	b480      	push	{r7}
 8008502:	b087      	sub	sp, #28
 8008504:	af00      	add	r7, sp, #0
 8008506:	ed87 0a05 	vstr	s0, [r7, #20]
 800850a:	edc7 0a04 	vstr	s1, [r7, #16]
 800850e:	ed87 1a03 	vstr	s2, [r7, #12]
 8008512:	edc7 1a02 	vstr	s3, [r7, #8]
 8008516:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[1] = Kp_LB;
 800851a:	4a0a      	ldr	r2, [pc, #40]	@ (8008544 <Setup_PID_LB+0x44>)
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	6053      	str	r3, [r2, #4]
	Ki_Wheel[1] = Ki_LB;
 8008520:	4a09      	ldr	r2, [pc, #36]	@ (8008548 <Setup_PID_LB+0x48>)
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	6053      	str	r3, [r2, #4]
	Kd_Wheel[1] = Kd_LB;
 8008526:	4a09      	ldr	r2, [pc, #36]	@ (800854c <Setup_PID_LB+0x4c>)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6053      	str	r3, [r2, #4]

	min_speed[1] = min_speed_LB;
 800852c:	4a08      	ldr	r2, [pc, #32]	@ (8008550 <Setup_PID_LB+0x50>)
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	6053      	str	r3, [r2, #4]
	max_speed[1] = max_speed_LB;
 8008532:	4a08      	ldr	r2, [pc, #32]	@ (8008554 <Setup_PID_LB+0x54>)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6053      	str	r3, [r2, #4]
}
 8008538:	bf00      	nop
 800853a:	371c      	adds	r7, #28
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr
 8008544:	200006d8 	.word	0x200006d8
 8008548:	200006f0 	.word	0x200006f0
 800854c:	20000708 	.word	0x20000708
 8008550:	20000720 	.word	0x20000720
 8008554:	20000738 	.word	0x20000738

08008558 <Setup_PID_RF>:

void Setup_PID_RF(float Kp_RF ,float Ki_RF ,float Kd_RF ,float min_speed_RF ,float max_speed_RF){
 8008558:	b480      	push	{r7}
 800855a:	b087      	sub	sp, #28
 800855c:	af00      	add	r7, sp, #0
 800855e:	ed87 0a05 	vstr	s0, [r7, #20]
 8008562:	edc7 0a04 	vstr	s1, [r7, #16]
 8008566:	ed87 1a03 	vstr	s2, [r7, #12]
 800856a:	edc7 1a02 	vstr	s3, [r7, #8]
 800856e:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[2] = Kp_RF;
 8008572:	4a0a      	ldr	r2, [pc, #40]	@ (800859c <Setup_PID_RF+0x44>)
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	6093      	str	r3, [r2, #8]
	Ki_Wheel[2] = Ki_RF;
 8008578:	4a09      	ldr	r2, [pc, #36]	@ (80085a0 <Setup_PID_RF+0x48>)
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	6093      	str	r3, [r2, #8]
	Kd_Wheel[2] = Kd_RF;
 800857e:	4a09      	ldr	r2, [pc, #36]	@ (80085a4 <Setup_PID_RF+0x4c>)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6093      	str	r3, [r2, #8]

	min_speed[2] = min_speed_RF;
 8008584:	4a08      	ldr	r2, [pc, #32]	@ (80085a8 <Setup_PID_RF+0x50>)
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	6093      	str	r3, [r2, #8]
	max_speed[2] = max_speed_RF;
 800858a:	4a08      	ldr	r2, [pc, #32]	@ (80085ac <Setup_PID_RF+0x54>)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6093      	str	r3, [r2, #8]
}
 8008590:	bf00      	nop
 8008592:	371c      	adds	r7, #28
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	200006d8 	.word	0x200006d8
 80085a0:	200006f0 	.word	0x200006f0
 80085a4:	20000708 	.word	0x20000708
 80085a8:	20000720 	.word	0x20000720
 80085ac:	20000738 	.word	0x20000738

080085b0 <Setup_PID_RB>:

void Setup_PID_RB(float Kp_RB ,float Ki_RB ,float Kd_RB ,float min_speed_RB ,float max_speed_RB){
 80085b0:	b480      	push	{r7}
 80085b2:	b087      	sub	sp, #28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	ed87 0a05 	vstr	s0, [r7, #20]
 80085ba:	edc7 0a04 	vstr	s1, [r7, #16]
 80085be:	ed87 1a03 	vstr	s2, [r7, #12]
 80085c2:	edc7 1a02 	vstr	s3, [r7, #8]
 80085c6:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[3] = Kp_RB;
 80085ca:	4a0a      	ldr	r2, [pc, #40]	@ (80085f4 <Setup_PID_RB+0x44>)
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	60d3      	str	r3, [r2, #12]
	Ki_Wheel[3] = Ki_RB;
 80085d0:	4a09      	ldr	r2, [pc, #36]	@ (80085f8 <Setup_PID_RB+0x48>)
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	60d3      	str	r3, [r2, #12]
	Kd_Wheel[3] = Kd_RB;
 80085d6:	4a09      	ldr	r2, [pc, #36]	@ (80085fc <Setup_PID_RB+0x4c>)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	60d3      	str	r3, [r2, #12]

	min_speed[3] = min_speed_RB;
 80085dc:	4a08      	ldr	r2, [pc, #32]	@ (8008600 <Setup_PID_RB+0x50>)
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	60d3      	str	r3, [r2, #12]
	max_speed[3] = max_speed_RB;
 80085e2:	4a08      	ldr	r2, [pc, #32]	@ (8008604 <Setup_PID_RB+0x54>)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	60d3      	str	r3, [r2, #12]
}
 80085e8:	bf00      	nop
 80085ea:	371c      	adds	r7, #28
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	200006d8 	.word	0x200006d8
 80085f8:	200006f0 	.word	0x200006f0
 80085fc:	20000708 	.word	0x20000708
 8008600:	20000720 	.word	0x20000720
 8008604:	20000738 	.word	0x20000738

08008608 <PID_Speed>:

float Past_Error[6]   = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float Output_PID[6]    = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float PID_Speed(float _Setpoint ,int16_t RPM ,uint8_t _Wheel){
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	ed87 0a01 	vstr	s0, [r7, #4]
 8008612:	4603      	mov	r3, r0
 8008614:	460a      	mov	r2, r1
 8008616:	807b      	strh	r3, [r7, #2]
 8008618:	4613      	mov	r3, r2
 800861a:	707b      	strb	r3, [r7, #1]
//	  case 4 : getRPM_TIM_Wheel(EN_X ,EXTRA1 ); break;
//	  case 5 : getRPM_TIM_Wheel(EN_Y ,EXTRA2 ); break;
//	}

//	Error_Speed[_Wheel] = _Setpoint-_RPM[_Wheel];
	Error_Speed[_Wheel] = _Setpoint-RPM;
 800861c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008620:	ee07 3a90 	vmov	s15, r3
 8008624:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008628:	787b      	ldrb	r3, [r7, #1]
 800862a:	ed97 7a01 	vldr	s14, [r7, #4]
 800862e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008632:	4a41      	ldr	r2, [pc, #260]	@ (8008738 <PID_Speed+0x130>)
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	4413      	add	r3, r2
 8008638:	edc3 7a00 	vstr	s15, [r3]

	Proportional[_Wheel] = Error_Speed[_Wheel];
 800863c:	787a      	ldrb	r2, [r7, #1]
 800863e:	787b      	ldrb	r3, [r7, #1]
 8008640:	493d      	ldr	r1, [pc, #244]	@ (8008738 <PID_Speed+0x130>)
 8008642:	0092      	lsls	r2, r2, #2
 8008644:	440a      	add	r2, r1
 8008646:	6812      	ldr	r2, [r2, #0]
 8008648:	493c      	ldr	r1, [pc, #240]	@ (800873c <PID_Speed+0x134>)
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	440b      	add	r3, r1
 800864e:	601a      	str	r2, [r3, #0]
	Integnator[_Wheel]   += Error_Speed[_Wheel];
 8008650:	787b      	ldrb	r3, [r7, #1]
 8008652:	4a3b      	ldr	r2, [pc, #236]	@ (8008740 <PID_Speed+0x138>)
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4413      	add	r3, r2
 8008658:	ed93 7a00 	vldr	s14, [r3]
 800865c:	787b      	ldrb	r3, [r7, #1]
 800865e:	4a36      	ldr	r2, [pc, #216]	@ (8008738 <PID_Speed+0x130>)
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	edd3 7a00 	vldr	s15, [r3]
 8008668:	787b      	ldrb	r3, [r7, #1]
 800866a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800866e:	4a34      	ldr	r2, [pc, #208]	@ (8008740 <PID_Speed+0x138>)
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4413      	add	r3, r2
 8008674:	edc3 7a00 	vstr	s15, [r3]
	Derivative[_Wheel]   = Error_Speed[_Wheel] - Past_Error[_Wheel];
 8008678:	787b      	ldrb	r3, [r7, #1]
 800867a:	4a2f      	ldr	r2, [pc, #188]	@ (8008738 <PID_Speed+0x130>)
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	4413      	add	r3, r2
 8008680:	ed93 7a00 	vldr	s14, [r3]
 8008684:	787b      	ldrb	r3, [r7, #1]
 8008686:	4a2f      	ldr	r2, [pc, #188]	@ (8008744 <PID_Speed+0x13c>)
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	edd3 7a00 	vldr	s15, [r3]
 8008690:	787b      	ldrb	r3, [r7, #1]
 8008692:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008696:	4a2c      	ldr	r2, [pc, #176]	@ (8008748 <PID_Speed+0x140>)
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	edc3 7a00 	vstr	s15, [r3]

	Past_Error[_Wheel] = Error_Speed[_Wheel];
 80086a0:	787a      	ldrb	r2, [r7, #1]
 80086a2:	787b      	ldrb	r3, [r7, #1]
 80086a4:	4924      	ldr	r1, [pc, #144]	@ (8008738 <PID_Speed+0x130>)
 80086a6:	0092      	lsls	r2, r2, #2
 80086a8:	440a      	add	r2, r1
 80086aa:	6812      	ldr	r2, [r2, #0]
 80086ac:	4925      	ldr	r1, [pc, #148]	@ (8008744 <PID_Speed+0x13c>)
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	440b      	add	r3, r1
 80086b2:	601a      	str	r2, [r3, #0]

	Output_PID[_Wheel]  = (float)((Proportional[_Wheel]*Kp_Wheel[_Wheel]) + (Integnator[_Wheel]*Ki_Wheel[_Wheel]) + (Derivative[_Wheel]*Kd_Wheel[_Wheel]));
 80086b4:	787b      	ldrb	r3, [r7, #1]
 80086b6:	4a21      	ldr	r2, [pc, #132]	@ (800873c <PID_Speed+0x134>)
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4413      	add	r3, r2
 80086bc:	ed93 7a00 	vldr	s14, [r3]
 80086c0:	787b      	ldrb	r3, [r7, #1]
 80086c2:	4a22      	ldr	r2, [pc, #136]	@ (800874c <PID_Speed+0x144>)
 80086c4:	009b      	lsls	r3, r3, #2
 80086c6:	4413      	add	r3, r2
 80086c8:	edd3 7a00 	vldr	s15, [r3]
 80086cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80086d0:	787b      	ldrb	r3, [r7, #1]
 80086d2:	4a1b      	ldr	r2, [pc, #108]	@ (8008740 <PID_Speed+0x138>)
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	4413      	add	r3, r2
 80086d8:	edd3 6a00 	vldr	s13, [r3]
 80086dc:	787b      	ldrb	r3, [r7, #1]
 80086de:	4a1c      	ldr	r2, [pc, #112]	@ (8008750 <PID_Speed+0x148>)
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	4413      	add	r3, r2
 80086e4:	edd3 7a00 	vldr	s15, [r3]
 80086e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80086f0:	787b      	ldrb	r3, [r7, #1]
 80086f2:	4a15      	ldr	r2, [pc, #84]	@ (8008748 <PID_Speed+0x140>)
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	edd3 6a00 	vldr	s13, [r3]
 80086fc:	787b      	ldrb	r3, [r7, #1]
 80086fe:	4a15      	ldr	r2, [pc, #84]	@ (8008754 <PID_Speed+0x14c>)
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	4413      	add	r3, r2
 8008704:	edd3 7a00 	vldr	s15, [r3]
 8008708:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800870c:	787b      	ldrb	r3, [r7, #1]
 800870e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008712:	4a11      	ldr	r2, [pc, #68]	@ (8008758 <PID_Speed+0x150>)
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	edc3 7a00 	vstr	s15, [r3]


	return Output_PID[_Wheel];
 800871c:	787b      	ldrb	r3, [r7, #1]
 800871e:	4a0e      	ldr	r2, [pc, #56]	@ (8008758 <PID_Speed+0x150>)
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4413      	add	r3, r2
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	ee07 3a90 	vmov	s15, r3
}
 800872a:	eeb0 0a67 	vmov.f32	s0, s15
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	20000750 	.word	0x20000750
 800873c:	20000768 	.word	0x20000768
 8008740:	20000780 	.word	0x20000780
 8008744:	200007b0 	.word	0x200007b0
 8008748:	20000798 	.word	0x20000798
 800874c:	200006d8 	.word	0x200006d8
 8008750:	200006f0 	.word	0x200006f0
 8008754:	20000708 	.word	0x20000708
 8008758:	200007c8 	.word	0x200007c8

0800875c <Motor_DutyCycle_LF>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////Motor////////////////////////////////////////////////////////////////////
void Motor_DutyCycle_LF(int16_t DutyCycle_LF){
 800875c:	b580      	push	{r7, lr}
 800875e:	b082      	sub	sp, #8
 8008760:	af00      	add	r7, sp, #0
 8008762:	4603      	mov	r3, r0
 8008764:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_LF > DutyCycle_LF_MAX) {
 8008766:	4b26      	ldr	r3, [pc, #152]	@ (8008800 <Motor_DutyCycle_LF+0xa4>)
 8008768:	f9b3 3000 	ldrsh.w	r3, [r3]
 800876c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008770:	429a      	cmp	r2, r3
 8008772:	dd03      	ble.n	800877c <Motor_DutyCycle_LF+0x20>
	    DutyCycle_LF = DutyCycle_LF_MAX;
 8008774:	4b22      	ldr	r3, [pc, #136]	@ (8008800 <Motor_DutyCycle_LF+0xa4>)
 8008776:	881b      	ldrh	r3, [r3, #0]
 8008778:	80fb      	strh	r3, [r7, #6]
 800877a:	e00e      	b.n	800879a <Motor_DutyCycle_LF+0x3e>
	} else if (DutyCycle_LF < -DutyCycle_LF_MAX) {
 800877c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008780:	4b1f      	ldr	r3, [pc, #124]	@ (8008800 <Motor_DutyCycle_LF+0xa4>)
 8008782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008786:	425b      	negs	r3, r3
 8008788:	429a      	cmp	r2, r3
 800878a:	da06      	bge.n	800879a <Motor_DutyCycle_LF+0x3e>
		DutyCycle_LF = -DutyCycle_LF_MAX;
 800878c:	4b1c      	ldr	r3, [pc, #112]	@ (8008800 <Motor_DutyCycle_LF+0xa4>)
 800878e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008792:	b29b      	uxth	r3, r3
 8008794:	425b      	negs	r3, r3
 8008796:	b29b      	uxth	r3, r3
 8008798:	80fb      	strh	r3, [r7, #6]
	}

	LF_PWM->Instance->CCR1 = (DutyCycle_LF > 0) ? (int16_t)DutyCycle_LF : (DutyCycle_LF_MAX + (int16_t)DutyCycle_LF);
 800879a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	dd02      	ble.n	80087a8 <Motor_DutyCycle_LF+0x4c>
 80087a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80087a6:	e006      	b.n	80087b6 <Motor_DutyCycle_LF+0x5a>
 80087a8:	4b15      	ldr	r3, [pc, #84]	@ (8008800 <Motor_DutyCycle_LF+0xa4>)
 80087aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087ae:	461a      	mov	r2, r3
 80087b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80087b4:	4413      	add	r3, r2
 80087b6:	4a13      	ldr	r2, [pc, #76]	@ (8008804 <Motor_DutyCycle_LF+0xa8>)
 80087b8:	6812      	ldr	r2, [r2, #0]
 80087ba:	6812      	ldr	r2, [r2, #0]
 80087bc:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_LF , (DutyCycle_LF < 0) ? 1 : 0);
 80087be:	4b12      	ldr	r3, [pc, #72]	@ (8008808 <Motor_DutyCycle_LF+0xac>)
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80087c6:	13db      	asrs	r3, r3, #15
 80087c8:	b21b      	sxth	r3, r3
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	f003 0301 	and.w	r3, r3, #1
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	4619      	mov	r1, r3
 80087d4:	4610      	mov	r0, r2
 80087d6:	f000 fba1 	bl	8008f1c <digitalWrite>

	if(DutyCycle_LF == 0){
 80087da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d10a      	bne.n	80087f8 <Motor_DutyCycle_LF+0x9c>
	   LF_PWM->Instance->CCR1 = 0;
 80087e2:	4b08      	ldr	r3, [pc, #32]	@ (8008804 <Motor_DutyCycle_LF+0xa8>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2200      	movs	r2, #0
 80087ea:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_LF ,0);
 80087ec:	4b06      	ldr	r3, [pc, #24]	@ (8008808 <Motor_DutyCycle_LF+0xac>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	2100      	movs	r1, #0
 80087f2:	4618      	mov	r0, r3
 80087f4:	f000 fb92 	bl	8008f1c <digitalWrite>
	}
}
 80087f8:	bf00      	nop
 80087fa:	3708      	adds	r7, #8
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	20000684 	.word	0x20000684
 8008804:	2000066c 	.word	0x2000066c
 8008808:	20000690 	.word	0x20000690

0800880c <Motor_DutyCycle_LB>:

void Motor_DutyCycle_LB(int16_t DutyCycle_LB){
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	4603      	mov	r3, r0
 8008814:	80fb      	strh	r3, [r7, #6]
	DutyCycle_LB = -DutyCycle_LB;
 8008816:	88fb      	ldrh	r3, [r7, #6]
 8008818:	425b      	negs	r3, r3
 800881a:	b29b      	uxth	r3, r3
 800881c:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_LB > DutyCycle_LB_MAX) {
 800881e:	4b26      	ldr	r3, [pc, #152]	@ (80088b8 <Motor_DutyCycle_LB+0xac>)
 8008820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008824:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008828:	429a      	cmp	r2, r3
 800882a:	dd03      	ble.n	8008834 <Motor_DutyCycle_LB+0x28>
		DutyCycle_LB = DutyCycle_LB_MAX;
 800882c:	4b22      	ldr	r3, [pc, #136]	@ (80088b8 <Motor_DutyCycle_LB+0xac>)
 800882e:	881b      	ldrh	r3, [r3, #0]
 8008830:	80fb      	strh	r3, [r7, #6]
 8008832:	e00e      	b.n	8008852 <Motor_DutyCycle_LB+0x46>
	} else if (DutyCycle_LB < -DutyCycle_LB_MAX) {
 8008834:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008838:	4b1f      	ldr	r3, [pc, #124]	@ (80088b8 <Motor_DutyCycle_LB+0xac>)
 800883a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800883e:	425b      	negs	r3, r3
 8008840:	429a      	cmp	r2, r3
 8008842:	da06      	bge.n	8008852 <Motor_DutyCycle_LB+0x46>
		DutyCycle_LB = -DutyCycle_LB_MAX;
 8008844:	4b1c      	ldr	r3, [pc, #112]	@ (80088b8 <Motor_DutyCycle_LB+0xac>)
 8008846:	f9b3 3000 	ldrsh.w	r3, [r3]
 800884a:	b29b      	uxth	r3, r3
 800884c:	425b      	negs	r3, r3
 800884e:	b29b      	uxth	r3, r3
 8008850:	80fb      	strh	r3, [r7, #6]
	}

	LB_PWM->Instance->CCR1 = (DutyCycle_LB > 0) ? (int16_t)DutyCycle_LB : (DutyCycle_LB_MAX + (int16_t)DutyCycle_LB);
 8008852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008856:	2b00      	cmp	r3, #0
 8008858:	dd02      	ble.n	8008860 <Motor_DutyCycle_LB+0x54>
 800885a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800885e:	e006      	b.n	800886e <Motor_DutyCycle_LB+0x62>
 8008860:	4b15      	ldr	r3, [pc, #84]	@ (80088b8 <Motor_DutyCycle_LB+0xac>)
 8008862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008866:	461a      	mov	r2, r3
 8008868:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800886c:	4413      	add	r3, r2
 800886e:	4a13      	ldr	r2, [pc, #76]	@ (80088bc <Motor_DutyCycle_LB+0xb0>)
 8008870:	6812      	ldr	r2, [r2, #0]
 8008872:	6812      	ldr	r2, [r2, #0]
 8008874:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_LB , (DutyCycle_LB < 0) ? 1 : 0);
 8008876:	4b12      	ldr	r3, [pc, #72]	@ (80088c0 <Motor_DutyCycle_LB+0xb4>)
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800887e:	13db      	asrs	r3, r3, #15
 8008880:	b21b      	sxth	r3, r3
 8008882:	b2db      	uxtb	r3, r3
 8008884:	f003 0301 	and.w	r3, r3, #1
 8008888:	b2db      	uxtb	r3, r3
 800888a:	4619      	mov	r1, r3
 800888c:	4610      	mov	r0, r2
 800888e:	f000 fb45 	bl	8008f1c <digitalWrite>

	if(DutyCycle_LB == 0){
 8008892:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10a      	bne.n	80088b0 <Motor_DutyCycle_LB+0xa4>
	   LB_PWM->Instance->CCR1 = 0;
 800889a:	4b08      	ldr	r3, [pc, #32]	@ (80088bc <Motor_DutyCycle_LB+0xb0>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2200      	movs	r2, #0
 80088a2:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_LB ,0);
 80088a4:	4b06      	ldr	r3, [pc, #24]	@ (80088c0 <Motor_DutyCycle_LB+0xb4>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2100      	movs	r1, #0
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 fb36 	bl	8008f1c <digitalWrite>
	}
}
 80088b0:	bf00      	nop
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	20000686 	.word	0x20000686
 80088bc:	20000670 	.word	0x20000670
 80088c0:	20000694 	.word	0x20000694

080088c4 <Motor_DutyCycle_RF>:

void Motor_DutyCycle_RF(int16_t DutyCycle_RF){
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	4603      	mov	r3, r0
 80088cc:	80fb      	strh	r3, [r7, #6]
	DutyCycle_RF = -DutyCycle_RF;
 80088ce:	88fb      	ldrh	r3, [r7, #6]
 80088d0:	425b      	negs	r3, r3
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_RF > DutyCycle_RF_MAX) {
 80088d6:	4b26      	ldr	r3, [pc, #152]	@ (8008970 <Motor_DutyCycle_RF+0xac>)
 80088d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	dd03      	ble.n	80088ec <Motor_DutyCycle_RF+0x28>
		DutyCycle_RF = DutyCycle_RF_MAX;
 80088e4:	4b22      	ldr	r3, [pc, #136]	@ (8008970 <Motor_DutyCycle_RF+0xac>)
 80088e6:	881b      	ldrh	r3, [r3, #0]
 80088e8:	80fb      	strh	r3, [r7, #6]
 80088ea:	e00e      	b.n	800890a <Motor_DutyCycle_RF+0x46>
	} else if (DutyCycle_RF < -DutyCycle_RF_MAX) {
 80088ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80088f0:	4b1f      	ldr	r3, [pc, #124]	@ (8008970 <Motor_DutyCycle_RF+0xac>)
 80088f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088f6:	425b      	negs	r3, r3
 80088f8:	429a      	cmp	r2, r3
 80088fa:	da06      	bge.n	800890a <Motor_DutyCycle_RF+0x46>
		DutyCycle_RF = -DutyCycle_RF_MAX;
 80088fc:	4b1c      	ldr	r3, [pc, #112]	@ (8008970 <Motor_DutyCycle_RF+0xac>)
 80088fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008902:	b29b      	uxth	r3, r3
 8008904:	425b      	negs	r3, r3
 8008906:	b29b      	uxth	r3, r3
 8008908:	80fb      	strh	r3, [r7, #6]
	}

	RF_PWM->Instance->CCR1 = (DutyCycle_RF > 0) ? (int16_t)DutyCycle_RF : (DutyCycle_RF_MAX + (int16_t)DutyCycle_RF);
 800890a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800890e:	2b00      	cmp	r3, #0
 8008910:	dd02      	ble.n	8008918 <Motor_DutyCycle_RF+0x54>
 8008912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008916:	e006      	b.n	8008926 <Motor_DutyCycle_RF+0x62>
 8008918:	4b15      	ldr	r3, [pc, #84]	@ (8008970 <Motor_DutyCycle_RF+0xac>)
 800891a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800891e:	461a      	mov	r2, r3
 8008920:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008924:	4413      	add	r3, r2
 8008926:	4a13      	ldr	r2, [pc, #76]	@ (8008974 <Motor_DutyCycle_RF+0xb0>)
 8008928:	6812      	ldr	r2, [r2, #0]
 800892a:	6812      	ldr	r2, [r2, #0]
 800892c:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_RF , (DutyCycle_RF < 0) ? 1 : 0);
 800892e:	4b12      	ldr	r3, [pc, #72]	@ (8008978 <Motor_DutyCycle_RF+0xb4>)
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008936:	13db      	asrs	r3, r3, #15
 8008938:	b21b      	sxth	r3, r3
 800893a:	b2db      	uxtb	r3, r3
 800893c:	f003 0301 	and.w	r3, r3, #1
 8008940:	b2db      	uxtb	r3, r3
 8008942:	4619      	mov	r1, r3
 8008944:	4610      	mov	r0, r2
 8008946:	f000 fae9 	bl	8008f1c <digitalWrite>

	if(DutyCycle_RF == 0){
 800894a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10a      	bne.n	8008968 <Motor_DutyCycle_RF+0xa4>
	   RF_PWM->Instance->CCR1 = 0;
 8008952:	4b08      	ldr	r3, [pc, #32]	@ (8008974 <Motor_DutyCycle_RF+0xb0>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2200      	movs	r2, #0
 800895a:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_RF ,0);
 800895c:	4b06      	ldr	r3, [pc, #24]	@ (8008978 <Motor_DutyCycle_RF+0xb4>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2100      	movs	r1, #0
 8008962:	4618      	mov	r0, r3
 8008964:	f000 fada 	bl	8008f1c <digitalWrite>
	}
}
 8008968:	bf00      	nop
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	20000688 	.word	0x20000688
 8008974:	20000674 	.word	0x20000674
 8008978:	20000698 	.word	0x20000698

0800897c <Motor_DutyCycle_RB>:

void Motor_DutyCycle_RB(int16_t DutyCycle_RB){
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	4603      	mov	r3, r0
 8008984:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_RB > DutyCycle_RB_MAX) {
 8008986:	4b26      	ldr	r3, [pc, #152]	@ (8008a20 <Motor_DutyCycle_RB+0xa4>)
 8008988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800898c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008990:	429a      	cmp	r2, r3
 8008992:	dd03      	ble.n	800899c <Motor_DutyCycle_RB+0x20>
		DutyCycle_RB = DutyCycle_RB_MAX;
 8008994:	4b22      	ldr	r3, [pc, #136]	@ (8008a20 <Motor_DutyCycle_RB+0xa4>)
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	80fb      	strh	r3, [r7, #6]
 800899a:	e00e      	b.n	80089ba <Motor_DutyCycle_RB+0x3e>
	} else if (DutyCycle_RB < -DutyCycle_RB_MAX) {
 800899c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80089a0:	4b1f      	ldr	r3, [pc, #124]	@ (8008a20 <Motor_DutyCycle_RB+0xa4>)
 80089a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089a6:	425b      	negs	r3, r3
 80089a8:	429a      	cmp	r2, r3
 80089aa:	da06      	bge.n	80089ba <Motor_DutyCycle_RB+0x3e>
	    DutyCycle_RB = -DutyCycle_RB_MAX;
 80089ac:	4b1c      	ldr	r3, [pc, #112]	@ (8008a20 <Motor_DutyCycle_RB+0xa4>)
 80089ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	425b      	negs	r3, r3
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	80fb      	strh	r3, [r7, #6]
	}

	RB_PWM->Instance->CCR2 = (DutyCycle_RB > 0) ? (int16_t)DutyCycle_RB : (DutyCycle_RB_MAX + (int16_t)DutyCycle_RB);
 80089ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	dd02      	ble.n	80089c8 <Motor_DutyCycle_RB+0x4c>
 80089c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80089c6:	e006      	b.n	80089d6 <Motor_DutyCycle_RB+0x5a>
 80089c8:	4b15      	ldr	r3, [pc, #84]	@ (8008a20 <Motor_DutyCycle_RB+0xa4>)
 80089ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089ce:	461a      	mov	r2, r3
 80089d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80089d4:	4413      	add	r3, r2
 80089d6:	4a13      	ldr	r2, [pc, #76]	@ (8008a24 <Motor_DutyCycle_RB+0xa8>)
 80089d8:	6812      	ldr	r2, [r2, #0]
 80089da:	6812      	ldr	r2, [r2, #0]
 80089dc:	6393      	str	r3, [r2, #56]	@ 0x38

	digitalWrite(IN_RB , (DutyCycle_RB < 0) ? 1 : 0);
 80089de:	4b12      	ldr	r3, [pc, #72]	@ (8008a28 <Motor_DutyCycle_RB+0xac>)
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80089e6:	13db      	asrs	r3, r3, #15
 80089e8:	b21b      	sxth	r3, r3
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	f003 0301 	and.w	r3, r3, #1
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	4619      	mov	r1, r3
 80089f4:	4610      	mov	r0, r2
 80089f6:	f000 fa91 	bl	8008f1c <digitalWrite>

	if(DutyCycle_RB == 0){
 80089fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10a      	bne.n	8008a18 <Motor_DutyCycle_RB+0x9c>
	    RB_PWM->Instance->CCR2 = 0;
 8008a02:	4b08      	ldr	r3, [pc, #32]	@ (8008a24 <Motor_DutyCycle_RB+0xa8>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	639a      	str	r2, [r3, #56]	@ 0x38
		digitalWrite(IN_RB ,0);
 8008a0c:	4b06      	ldr	r3, [pc, #24]	@ (8008a28 <Motor_DutyCycle_RB+0xac>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2100      	movs	r1, #0
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 fa82 	bl	8008f1c <digitalWrite>
	}
}
 8008a18:	bf00      	nop
 8008a1a:	3708      	adds	r7, #8
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	2000068a 	.word	0x2000068a
 8008a24:	20000678 	.word	0x20000678
 8008a28:	2000069c 	.word	0x2000069c

08008a2c <Motor_DutyCycle_EXTRA1>:

void Motor_DutyCycle_EXTRA1(int16_t DutyCycle_EXTRA1){
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	4603      	mov	r3, r0
 8008a34:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_EXTRA1 > DutyCycle_EXTRA1_MAX) {
 8008a36:	4b26      	ldr	r3, [pc, #152]	@ (8008ad0 <Motor_DutyCycle_EXTRA1+0xa4>)
 8008a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a3c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	dd03      	ble.n	8008a4c <Motor_DutyCycle_EXTRA1+0x20>
		DutyCycle_EXTRA1 = DutyCycle_EXTRA1_MAX;
 8008a44:	4b22      	ldr	r3, [pc, #136]	@ (8008ad0 <Motor_DutyCycle_EXTRA1+0xa4>)
 8008a46:	881b      	ldrh	r3, [r3, #0]
 8008a48:	80fb      	strh	r3, [r7, #6]
 8008a4a:	e00e      	b.n	8008a6a <Motor_DutyCycle_EXTRA1+0x3e>
	} else if (DutyCycle_EXTRA1 < -DutyCycle_EXTRA1_MAX) {
 8008a4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008a50:	4b1f      	ldr	r3, [pc, #124]	@ (8008ad0 <Motor_DutyCycle_EXTRA1+0xa4>)
 8008a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a56:	425b      	negs	r3, r3
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	da06      	bge.n	8008a6a <Motor_DutyCycle_EXTRA1+0x3e>
		DutyCycle_EXTRA1 = -DutyCycle_EXTRA1_MAX;
 8008a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8008ad0 <Motor_DutyCycle_EXTRA1+0xa4>)
 8008a5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	425b      	negs	r3, r3
 8008a66:	b29b      	uxth	r3, r3
 8008a68:	80fb      	strh	r3, [r7, #6]
	}

	EXTRA1_PWM->Instance->CCR1 = (DutyCycle_EXTRA1 > 0) ? (int16_t)DutyCycle_EXTRA1 : (DutyCycle_EXTRA1_MAX + (int16_t)DutyCycle_EXTRA1);
 8008a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	dd02      	ble.n	8008a78 <Motor_DutyCycle_EXTRA1+0x4c>
 8008a72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a76:	e006      	b.n	8008a86 <Motor_DutyCycle_EXTRA1+0x5a>
 8008a78:	4b15      	ldr	r3, [pc, #84]	@ (8008ad0 <Motor_DutyCycle_EXTRA1+0xa4>)
 8008a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a84:	4413      	add	r3, r2
 8008a86:	4a13      	ldr	r2, [pc, #76]	@ (8008ad4 <Motor_DutyCycle_EXTRA1+0xa8>)
 8008a88:	6812      	ldr	r2, [r2, #0]
 8008a8a:	6812      	ldr	r2, [r2, #0]
 8008a8c:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_EXTRA1 , (DutyCycle_EXTRA1 < 0) ? 1 : 0);
 8008a8e:	4b12      	ldr	r3, [pc, #72]	@ (8008ad8 <Motor_DutyCycle_EXTRA1+0xac>)
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008a96:	13db      	asrs	r3, r3, #15
 8008a98:	b21b      	sxth	r3, r3
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	f003 0301 	and.w	r3, r3, #1
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	f000 fa39 	bl	8008f1c <digitalWrite>

	if(DutyCycle_EXTRA1 == 0){
 8008aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10a      	bne.n	8008ac8 <Motor_DutyCycle_EXTRA1+0x9c>
		EXTRA1_PWM->Instance->CCR1 = 0;
 8008ab2:	4b08      	ldr	r3, [pc, #32]	@ (8008ad4 <Motor_DutyCycle_EXTRA1+0xa8>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	635a      	str	r2, [r3, #52]	@ 0x34
	    digitalWrite(IN_EXTRA1 ,0);
 8008abc:	4b06      	ldr	r3, [pc, #24]	@ (8008ad8 <Motor_DutyCycle_EXTRA1+0xac>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f000 fa2a 	bl	8008f1c <digitalWrite>
	}
}
 8008ac8:	bf00      	nop
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	2000068c 	.word	0x2000068c
 8008ad4:	2000067c 	.word	0x2000067c
 8008ad8:	200006a0 	.word	0x200006a0

08008adc <Motor_DutyCycle_EXTRA2>:

void Motor_DutyCycle_EXTRA2(int16_t DutyCycle_EXTRA2){
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_EXTRA2 > DutyCycle_EXTRA2_MAX) {
 8008ae6:	4b26      	ldr	r3, [pc, #152]	@ (8008b80 <Motor_DutyCycle_EXTRA2+0xa4>)
 8008ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008aec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	dd03      	ble.n	8008afc <Motor_DutyCycle_EXTRA2+0x20>
		DutyCycle_EXTRA2 = DutyCycle_EXTRA2_MAX;
 8008af4:	4b22      	ldr	r3, [pc, #136]	@ (8008b80 <Motor_DutyCycle_EXTRA2+0xa4>)
 8008af6:	881b      	ldrh	r3, [r3, #0]
 8008af8:	80fb      	strh	r3, [r7, #6]
 8008afa:	e00e      	b.n	8008b1a <Motor_DutyCycle_EXTRA2+0x3e>
	} else if (DutyCycle_EXTRA2 < -DutyCycle_EXTRA2_MAX) {
 8008afc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008b00:	4b1f      	ldr	r3, [pc, #124]	@ (8008b80 <Motor_DutyCycle_EXTRA2+0xa4>)
 8008b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b06:	425b      	negs	r3, r3
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	da06      	bge.n	8008b1a <Motor_DutyCycle_EXTRA2+0x3e>
		DutyCycle_EXTRA2 = -DutyCycle_EXTRA2_MAX;
 8008b0c:	4b1c      	ldr	r3, [pc, #112]	@ (8008b80 <Motor_DutyCycle_EXTRA2+0xa4>)
 8008b0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	425b      	negs	r3, r3
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	80fb      	strh	r3, [r7, #6]
	}

	EXTRA2_PWM->Instance->CCR1 = (DutyCycle_EXTRA2 > 0) ? (int16_t)DutyCycle_EXTRA2 : (DutyCycle_EXTRA2_MAX + (int16_t)DutyCycle_EXTRA2);
 8008b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	dd02      	ble.n	8008b28 <Motor_DutyCycle_EXTRA2+0x4c>
 8008b22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b26:	e006      	b.n	8008b36 <Motor_DutyCycle_EXTRA2+0x5a>
 8008b28:	4b15      	ldr	r3, [pc, #84]	@ (8008b80 <Motor_DutyCycle_EXTRA2+0xa4>)
 8008b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b34:	4413      	add	r3, r2
 8008b36:	4a13      	ldr	r2, [pc, #76]	@ (8008b84 <Motor_DutyCycle_EXTRA2+0xa8>)
 8008b38:	6812      	ldr	r2, [r2, #0]
 8008b3a:	6812      	ldr	r2, [r2, #0]
 8008b3c:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_EXTRA2 , (DutyCycle_EXTRA2 < 0) ? 1 : 0);
 8008b3e:	4b12      	ldr	r3, [pc, #72]	@ (8008b88 <Motor_DutyCycle_EXTRA2+0xac>)
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b46:	13db      	asrs	r3, r3, #15
 8008b48:	b21b      	sxth	r3, r3
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	f003 0301 	and.w	r3, r3, #1
 8008b50:	b2db      	uxtb	r3, r3
 8008b52:	4619      	mov	r1, r3
 8008b54:	4610      	mov	r0, r2
 8008b56:	f000 f9e1 	bl	8008f1c <digitalWrite>

	if(DutyCycle_EXTRA2 == 0){
 8008b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10a      	bne.n	8008b78 <Motor_DutyCycle_EXTRA2+0x9c>
	     EXTRA2_PWM->Instance->CCR1 = 0;
 8008b62:	4b08      	ldr	r3, [pc, #32]	@ (8008b84 <Motor_DutyCycle_EXTRA2+0xa8>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	635a      	str	r2, [r3, #52]	@ 0x34
		 digitalWrite(IN_EXTRA2 ,0);
 8008b6c:	4b06      	ldr	r3, [pc, #24]	@ (8008b88 <Motor_DutyCycle_EXTRA2+0xac>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2100      	movs	r1, #0
 8008b72:	4618      	mov	r0, r3
 8008b74:	f000 f9d2 	bl	8008f1c <digitalWrite>
	}
}
 8008b78:	bf00      	nop
 8008b7a:	3708      	adds	r7, #8
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	2000068e 	.word	0x2000068e
 8008b84:	20000680 	.word	0x20000680
 8008b88:	200006a4 	.word	0x200006a4

08008b8c <Motor_Speed_LF>:

int16_t Duty_Cycle[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float Motor_Speed_LF(int16_t RPM_INPUT ,float RPM_LF){
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	4603      	mov	r3, r0
 8008b94:	ed87 0a00 	vstr	s0, [r7]
 8008b98:	80fb      	strh	r3, [r7, #6]
	if (RPM_LF > max_speed[0]) {
 8008b9a:	4b30      	ldr	r3, [pc, #192]	@ (8008c5c <Motor_Speed_LF+0xd0>)
 8008b9c:	edd3 7a00 	vldr	s15, [r3]
 8008ba0:	ed97 7a00 	vldr	s14, [r7]
 8008ba4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ba8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bac:	dd03      	ble.n	8008bb6 <Motor_Speed_LF+0x2a>
	   RPM_LF = max_speed[0];
 8008bae:	4b2b      	ldr	r3, [pc, #172]	@ (8008c5c <Motor_Speed_LF+0xd0>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	603b      	str	r3, [r7, #0]
 8008bb4:	e012      	b.n	8008bdc <Motor_Speed_LF+0x50>
	} else if (RPM_LF < -max_speed[0]) {
 8008bb6:	4b29      	ldr	r3, [pc, #164]	@ (8008c5c <Motor_Speed_LF+0xd0>)
 8008bb8:	edd3 7a00 	vldr	s15, [r3]
 8008bbc:	eef1 7a67 	vneg.f32	s15, s15
 8008bc0:	ed97 7a00 	vldr	s14, [r7]
 8008bc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bcc:	d506      	bpl.n	8008bdc <Motor_Speed_LF+0x50>
	   RPM_LF = -max_speed[0];
 8008bce:	4b23      	ldr	r3, [pc, #140]	@ (8008c5c <Motor_Speed_LF+0xd0>)
 8008bd0:	edd3 7a00 	vldr	s15, [r3]
 8008bd4:	eef1 7a67 	vneg.f32	s15, s15
 8008bd8:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_LF , 0);
 8008bdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008be0:	ee07 3a90 	vmov	s15, r3
 8008be4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008be8:	edd7 7a00 	vldr	s15, [r7]
 8008bec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008bf0:	ee17 3a90 	vmov	r3, s15
 8008bf4:	b21b      	sxth	r3, r3
 8008bf6:	2100      	movs	r1, #0
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	eeb0 0a47 	vmov.f32	s0, s14
 8008bfe:	f7ff fd03 	bl	8008608 <PID_Speed>

	Duty_Cycle[0] = (int16_t)((Output_PID[0] / ((float)(max_speed[0] - min_speed[0]))) * DutyCycle_LF_MAX);
 8008c02:	4b17      	ldr	r3, [pc, #92]	@ (8008c60 <Motor_Speed_LF+0xd4>)
 8008c04:	edd3 6a00 	vldr	s13, [r3]
 8008c08:	4b14      	ldr	r3, [pc, #80]	@ (8008c5c <Motor_Speed_LF+0xd0>)
 8008c0a:	ed93 7a00 	vldr	s14, [r3]
 8008c0e:	4b15      	ldr	r3, [pc, #84]	@ (8008c64 <Motor_Speed_LF+0xd8>)
 8008c10:	edd3 7a00 	vldr	s15, [r3]
 8008c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c1c:	4b12      	ldr	r3, [pc, #72]	@ (8008c68 <Motor_Speed_LF+0xdc>)
 8008c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c22:	ee07 3a90 	vmov	s15, r3
 8008c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008c32:	ee17 3a90 	vmov	r3, s15
 8008c36:	b21a      	sxth	r2, r3
 8008c38:	4b0c      	ldr	r3, [pc, #48]	@ (8008c6c <Motor_Speed_LF+0xe0>)
 8008c3a:	801a      	strh	r2, [r3, #0]

	Motor_DutyCycle_LF(Duty_Cycle[0]);
 8008c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8008c6c <Motor_Speed_LF+0xe0>)
 8008c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7ff fd8a 	bl	800875c <Motor_DutyCycle_LF>

//	return _RPM[0];
	return Output_PID[0];
 8008c48:	4b05      	ldr	r3, [pc, #20]	@ (8008c60 <Motor_Speed_LF+0xd4>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	ee07 3a90 	vmov	s15, r3
}
 8008c50:	eeb0 0a67 	vmov.f32	s0, s15
 8008c54:	3708      	adds	r7, #8
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	20000738 	.word	0x20000738
 8008c60:	200007c8 	.word	0x200007c8
 8008c64:	20000720 	.word	0x20000720
 8008c68:	20000684 	.word	0x20000684
 8008c6c:	200007e0 	.word	0x200007e0

08008c70 <Motor_Speed_LB>:

float Motor_Speed_LB(int16_t RPM_INPUT ,float RPM_LB){
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	4603      	mov	r3, r0
 8008c78:	ed87 0a00 	vstr	s0, [r7]
 8008c7c:	80fb      	strh	r3, [r7, #6]
	if (RPM_LB > max_speed[1]) {
 8008c7e:	4b30      	ldr	r3, [pc, #192]	@ (8008d40 <Motor_Speed_LB+0xd0>)
 8008c80:	edd3 7a01 	vldr	s15, [r3, #4]
 8008c84:	ed97 7a00 	vldr	s14, [r7]
 8008c88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c90:	dd03      	ble.n	8008c9a <Motor_Speed_LB+0x2a>
	   RPM_LB = max_speed[1];
 8008c92:	4b2b      	ldr	r3, [pc, #172]	@ (8008d40 <Motor_Speed_LB+0xd0>)
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	603b      	str	r3, [r7, #0]
 8008c98:	e012      	b.n	8008cc0 <Motor_Speed_LB+0x50>
	} else if (RPM_LB < -max_speed[1]) {
 8008c9a:	4b29      	ldr	r3, [pc, #164]	@ (8008d40 <Motor_Speed_LB+0xd0>)
 8008c9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008ca0:	eef1 7a67 	vneg.f32	s15, s15
 8008ca4:	ed97 7a00 	vldr	s14, [r7]
 8008ca8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cb0:	d506      	bpl.n	8008cc0 <Motor_Speed_LB+0x50>
	   RPM_LB = -max_speed[1];
 8008cb2:	4b23      	ldr	r3, [pc, #140]	@ (8008d40 <Motor_Speed_LB+0xd0>)
 8008cb4:	edd3 7a01 	vldr	s15, [r3, #4]
 8008cb8:	eef1 7a67 	vneg.f32	s15, s15
 8008cbc:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_LB ,1);
 8008cc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cc4:	ee07 3a90 	vmov	s15, r3
 8008cc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008ccc:	edd7 7a00 	vldr	s15, [r7]
 8008cd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008cd4:	ee17 3a90 	vmov	r3, s15
 8008cd8:	b21b      	sxth	r3, r3
 8008cda:	2101      	movs	r1, #1
 8008cdc:	4618      	mov	r0, r3
 8008cde:	eeb0 0a47 	vmov.f32	s0, s14
 8008ce2:	f7ff fc91 	bl	8008608 <PID_Speed>

	Duty_Cycle[1] = (int16_t)((Output_PID[1]/((float)(max_speed[1] - min_speed[1]))) * DutyCycle_LB_MAX);
 8008ce6:	4b17      	ldr	r3, [pc, #92]	@ (8008d44 <Motor_Speed_LB+0xd4>)
 8008ce8:	edd3 6a01 	vldr	s13, [r3, #4]
 8008cec:	4b14      	ldr	r3, [pc, #80]	@ (8008d40 <Motor_Speed_LB+0xd0>)
 8008cee:	ed93 7a01 	vldr	s14, [r3, #4]
 8008cf2:	4b15      	ldr	r3, [pc, #84]	@ (8008d48 <Motor_Speed_LB+0xd8>)
 8008cf4:	edd3 7a01 	vldr	s15, [r3, #4]
 8008cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d00:	4b12      	ldr	r3, [pc, #72]	@ (8008d4c <Motor_Speed_LB+0xdc>)
 8008d02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d06:	ee07 3a90 	vmov	s15, r3
 8008d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d16:	ee17 3a90 	vmov	r3, s15
 8008d1a:	b21a      	sxth	r2, r3
 8008d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8008d50 <Motor_Speed_LB+0xe0>)
 8008d1e:	805a      	strh	r2, [r3, #2]

	Motor_DutyCycle_LB(Duty_Cycle[1]);
 8008d20:	4b0b      	ldr	r3, [pc, #44]	@ (8008d50 <Motor_Speed_LB+0xe0>)
 8008d22:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7ff fd70 	bl	800880c <Motor_DutyCycle_LB>

//	return _RPM[1];
	return Output_PID[1];
 8008d2c:	4b05      	ldr	r3, [pc, #20]	@ (8008d44 <Motor_Speed_LB+0xd4>)
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	ee07 3a90 	vmov	s15, r3
}
 8008d34:	eeb0 0a67 	vmov.f32	s0, s15
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	20000738 	.word	0x20000738
 8008d44:	200007c8 	.word	0x200007c8
 8008d48:	20000720 	.word	0x20000720
 8008d4c:	20000686 	.word	0x20000686
 8008d50:	200007e0 	.word	0x200007e0

08008d54 <Motor_Speed_RF>:

float Motor_Speed_RF(int16_t RPM_INPUT ,float RPM_RF){
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	ed87 0a00 	vstr	s0, [r7]
 8008d60:	80fb      	strh	r3, [r7, #6]
	if (RPM_RF > max_speed[2]) {
 8008d62:	4b30      	ldr	r3, [pc, #192]	@ (8008e24 <Motor_Speed_RF+0xd0>)
 8008d64:	edd3 7a02 	vldr	s15, [r3, #8]
 8008d68:	ed97 7a00 	vldr	s14, [r7]
 8008d6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d74:	dd03      	ble.n	8008d7e <Motor_Speed_RF+0x2a>
	   RPM_RF = max_speed[2];
 8008d76:	4b2b      	ldr	r3, [pc, #172]	@ (8008e24 <Motor_Speed_RF+0xd0>)
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	603b      	str	r3, [r7, #0]
 8008d7c:	e012      	b.n	8008da4 <Motor_Speed_RF+0x50>
	} else if (RPM_RF < -max_speed[2]) {
 8008d7e:	4b29      	ldr	r3, [pc, #164]	@ (8008e24 <Motor_Speed_RF+0xd0>)
 8008d80:	edd3 7a02 	vldr	s15, [r3, #8]
 8008d84:	eef1 7a67 	vneg.f32	s15, s15
 8008d88:	ed97 7a00 	vldr	s14, [r7]
 8008d8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d94:	d506      	bpl.n	8008da4 <Motor_Speed_RF+0x50>
	   RPM_RF = -max_speed[2];
 8008d96:	4b23      	ldr	r3, [pc, #140]	@ (8008e24 <Motor_Speed_RF+0xd0>)
 8008d98:	edd3 7a02 	vldr	s15, [r3, #8]
 8008d9c:	eef1 7a67 	vneg.f32	s15, s15
 8008da0:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_RF ,2);
 8008da4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008da8:	ee07 3a90 	vmov	s15, r3
 8008dac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008db0:	edd7 7a00 	vldr	s15, [r7]
 8008db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008db8:	ee17 3a90 	vmov	r3, s15
 8008dbc:	b21b      	sxth	r3, r3
 8008dbe:	2102      	movs	r1, #2
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	eeb0 0a47 	vmov.f32	s0, s14
 8008dc6:	f7ff fc1f 	bl	8008608 <PID_Speed>

	Duty_Cycle[2] = (int16_t)((Output_PID[2]/((float)(max_speed[2] - min_speed[2]))) * DutyCycle_RF_MAX);
 8008dca:	4b17      	ldr	r3, [pc, #92]	@ (8008e28 <Motor_Speed_RF+0xd4>)
 8008dcc:	edd3 6a02 	vldr	s13, [r3, #8]
 8008dd0:	4b14      	ldr	r3, [pc, #80]	@ (8008e24 <Motor_Speed_RF+0xd0>)
 8008dd2:	ed93 7a02 	vldr	s14, [r3, #8]
 8008dd6:	4b15      	ldr	r3, [pc, #84]	@ (8008e2c <Motor_Speed_RF+0xd8>)
 8008dd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8008ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008de0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008de4:	4b12      	ldr	r3, [pc, #72]	@ (8008e30 <Motor_Speed_RF+0xdc>)
 8008de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008df6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008dfa:	ee17 3a90 	vmov	r3, s15
 8008dfe:	b21a      	sxth	r2, r3
 8008e00:	4b0c      	ldr	r3, [pc, #48]	@ (8008e34 <Motor_Speed_RF+0xe0>)
 8008e02:	809a      	strh	r2, [r3, #4]

	Motor_DutyCycle_RF(Duty_Cycle[2]);
 8008e04:	4b0b      	ldr	r3, [pc, #44]	@ (8008e34 <Motor_Speed_RF+0xe0>)
 8008e06:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff fd5a 	bl	80088c4 <Motor_DutyCycle_RF>

//	return _RPM[2];
	return Output_PID[2];
 8008e10:	4b05      	ldr	r3, [pc, #20]	@ (8008e28 <Motor_Speed_RF+0xd4>)
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	ee07 3a90 	vmov	s15, r3
}
 8008e18:	eeb0 0a67 	vmov.f32	s0, s15
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	20000738 	.word	0x20000738
 8008e28:	200007c8 	.word	0x200007c8
 8008e2c:	20000720 	.word	0x20000720
 8008e30:	20000688 	.word	0x20000688
 8008e34:	200007e0 	.word	0x200007e0

08008e38 <Motor_Speed_RB>:

float Motor_Speed_RB(int16_t RPM_INPUT ,float RPM_RB){
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b082      	sub	sp, #8
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	4603      	mov	r3, r0
 8008e40:	ed87 0a00 	vstr	s0, [r7]
 8008e44:	80fb      	strh	r3, [r7, #6]
	if (RPM_RB > max_speed[3]) {
 8008e46:	4b30      	ldr	r3, [pc, #192]	@ (8008f08 <Motor_Speed_RB+0xd0>)
 8008e48:	edd3 7a03 	vldr	s15, [r3, #12]
 8008e4c:	ed97 7a00 	vldr	s14, [r7]
 8008e50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e58:	dd03      	ble.n	8008e62 <Motor_Speed_RB+0x2a>
		RPM_RB = max_speed[3];
 8008e5a:	4b2b      	ldr	r3, [pc, #172]	@ (8008f08 <Motor_Speed_RB+0xd0>)
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	603b      	str	r3, [r7, #0]
 8008e60:	e012      	b.n	8008e88 <Motor_Speed_RB+0x50>
	} else if (RPM_RB < -max_speed[3]) {
 8008e62:	4b29      	ldr	r3, [pc, #164]	@ (8008f08 <Motor_Speed_RB+0xd0>)
 8008e64:	edd3 7a03 	vldr	s15, [r3, #12]
 8008e68:	eef1 7a67 	vneg.f32	s15, s15
 8008e6c:	ed97 7a00 	vldr	s14, [r7]
 8008e70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e78:	d506      	bpl.n	8008e88 <Motor_Speed_RB+0x50>
		RPM_RB = -max_speed[3];
 8008e7a:	4b23      	ldr	r3, [pc, #140]	@ (8008f08 <Motor_Speed_RB+0xd0>)
 8008e7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8008e80:	eef1 7a67 	vneg.f32	s15, s15
 8008e84:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_RB ,3);
 8008e88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e8c:	ee07 3a90 	vmov	s15, r3
 8008e90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008e94:	edd7 7a00 	vldr	s15, [r7]
 8008e98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e9c:	ee17 3a90 	vmov	r3, s15
 8008ea0:	b21b      	sxth	r3, r3
 8008ea2:	2103      	movs	r1, #3
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	eeb0 0a47 	vmov.f32	s0, s14
 8008eaa:	f7ff fbad 	bl	8008608 <PID_Speed>

	Duty_Cycle[3] = (int16_t)((Output_PID[3]/((float)(max_speed[3] - min_speed[3]))) * DutyCycle_RB_MAX);
 8008eae:	4b17      	ldr	r3, [pc, #92]	@ (8008f0c <Motor_Speed_RB+0xd4>)
 8008eb0:	edd3 6a03 	vldr	s13, [r3, #12]
 8008eb4:	4b14      	ldr	r3, [pc, #80]	@ (8008f08 <Motor_Speed_RB+0xd0>)
 8008eb6:	ed93 7a03 	vldr	s14, [r3, #12]
 8008eba:	4b15      	ldr	r3, [pc, #84]	@ (8008f10 <Motor_Speed_RB+0xd8>)
 8008ebc:	edd3 7a03 	vldr	s15, [r3, #12]
 8008ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ec4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ec8:	4b12      	ldr	r3, [pc, #72]	@ (8008f14 <Motor_Speed_RB+0xdc>)
 8008eca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ece:	ee07 3a90 	vmov	s15, r3
 8008ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008eda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ede:	ee17 3a90 	vmov	r3, s15
 8008ee2:	b21a      	sxth	r2, r3
 8008ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8008f18 <Motor_Speed_RB+0xe0>)
 8008ee6:	80da      	strh	r2, [r3, #6]

	Motor_DutyCycle_RB(Duty_Cycle[3]);
 8008ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8008f18 <Motor_Speed_RB+0xe0>)
 8008eea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7ff fd44 	bl	800897c <Motor_DutyCycle_RB>

//	return _RPM[3];
	return Output_PID[3];
 8008ef4:	4b05      	ldr	r3, [pc, #20]	@ (8008f0c <Motor_Speed_RB+0xd4>)
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	ee07 3a90 	vmov	s15, r3
}
 8008efc:	eeb0 0a67 	vmov.f32	s0, s15
 8008f00:	3708      	adds	r7, #8
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	20000738 	.word	0x20000738
 8008f0c:	200007c8 	.word	0x200007c8
 8008f10:	20000720 	.word	0x20000720
 8008f14:	2000068a 	.word	0x2000068a
 8008f18:	200007e0 	.word	0x200007e0

08008f1c <digitalWrite>:

//	return _RPM[5];
	return Output_PID[5];
}

void digitalWrite(char* _PIN , uint8_t vlue){
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	460b      	mov	r3, r1
 8008f26:	70fb      	strb	r3, [r7, #3]
	uint8_t PIN = (_PIN[2] - '0') * 10 + (_PIN[3] - '0');
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3302      	adds	r3, #2
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	3b30      	subs	r3, #48	@ 0x30
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	461a      	mov	r2, r3
 8008f34:	0092      	lsls	r2, r2, #2
 8008f36:	4413      	add	r3, r2
 8008f38:	005b      	lsls	r3, r3, #1
 8008f3a:	b2da      	uxtb	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	3303      	adds	r3, #3
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	4413      	add	r3, r2
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	3b30      	subs	r3, #48	@ 0x30
 8008f48:	73fb      	strb	r3, [r7, #15]

	if (_PIN[1] == 'A') {
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	3301      	adds	r3, #1
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	2b41      	cmp	r3, #65	@ 0x41
 8008f52:	f040 809f 	bne.w	8009094 <digitalWrite+0x178>
	        switch (PIN) {
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
 8008f58:	2b0f      	cmp	r3, #15
 8008f5a:	f200 833f 	bhi.w	80095dc <digitalWrite+0x6c0>
 8008f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f64 <digitalWrite+0x48>)
 8008f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f64:	08008fa5 	.word	0x08008fa5
 8008f68:	08008fb3 	.word	0x08008fb3
 8008f6c:	08008fc1 	.word	0x08008fc1
 8008f70:	08008fcf 	.word	0x08008fcf
 8008f74:	08008fdd 	.word	0x08008fdd
 8008f78:	08008feb 	.word	0x08008feb
 8008f7c:	08008ff9 	.word	0x08008ff9
 8008f80:	08009007 	.word	0x08009007
 8008f84:	08009015 	.word	0x08009015
 8008f88:	08009025 	.word	0x08009025
 8008f8c:	08009035 	.word	0x08009035
 8008f90:	08009045 	.word	0x08009045
 8008f94:	08009055 	.word	0x08009055
 8008f98:	08009065 	.word	0x08009065
 8008f9c:	08009075 	.word	0x08009075
 8008fa0:	08009085 	.word	0x08009085
	            case 0: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, vlue); break;
 8008fa4:	78fb      	ldrb	r3, [r7, #3]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	2101      	movs	r1, #1
 8008faa:	48bd      	ldr	r0, [pc, #756]	@ (80092a0 <digitalWrite+0x384>)
 8008fac:	f7f9 feb8 	bl	8002d20 <HAL_GPIO_WritePin>
 8008fb0:	e314      	b.n	80095dc <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, vlue); break;
 8008fb2:	78fb      	ldrb	r3, [r7, #3]
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	2102      	movs	r1, #2
 8008fb8:	48b9      	ldr	r0, [pc, #740]	@ (80092a0 <digitalWrite+0x384>)
 8008fba:	f7f9 feb1 	bl	8002d20 <HAL_GPIO_WritePin>
 8008fbe:	e30d      	b.n	80095dc <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, vlue); break;
 8008fc0:	78fb      	ldrb	r3, [r7, #3]
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	2104      	movs	r1, #4
 8008fc6:	48b6      	ldr	r0, [pc, #728]	@ (80092a0 <digitalWrite+0x384>)
 8008fc8:	f7f9 feaa 	bl	8002d20 <HAL_GPIO_WritePin>
 8008fcc:	e306      	b.n	80095dc <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, vlue); break;
 8008fce:	78fb      	ldrb	r3, [r7, #3]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	2108      	movs	r1, #8
 8008fd4:	48b2      	ldr	r0, [pc, #712]	@ (80092a0 <digitalWrite+0x384>)
 8008fd6:	f7f9 fea3 	bl	8002d20 <HAL_GPIO_WritePin>
 8008fda:	e2ff      	b.n	80095dc <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, vlue); break;
 8008fdc:	78fb      	ldrb	r3, [r7, #3]
 8008fde:	461a      	mov	r2, r3
 8008fe0:	2110      	movs	r1, #16
 8008fe2:	48af      	ldr	r0, [pc, #700]	@ (80092a0 <digitalWrite+0x384>)
 8008fe4:	f7f9 fe9c 	bl	8002d20 <HAL_GPIO_WritePin>
 8008fe8:	e2f8      	b.n	80095dc <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, vlue); break;
 8008fea:	78fb      	ldrb	r3, [r7, #3]
 8008fec:	461a      	mov	r2, r3
 8008fee:	2120      	movs	r1, #32
 8008ff0:	48ab      	ldr	r0, [pc, #684]	@ (80092a0 <digitalWrite+0x384>)
 8008ff2:	f7f9 fe95 	bl	8002d20 <HAL_GPIO_WritePin>
 8008ff6:	e2f1      	b.n	80095dc <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, vlue); break;
 8008ff8:	78fb      	ldrb	r3, [r7, #3]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	2140      	movs	r1, #64	@ 0x40
 8008ffe:	48a8      	ldr	r0, [pc, #672]	@ (80092a0 <digitalWrite+0x384>)
 8009000:	f7f9 fe8e 	bl	8002d20 <HAL_GPIO_WritePin>
 8009004:	e2ea      	b.n	80095dc <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, vlue); break;
 8009006:	78fb      	ldrb	r3, [r7, #3]
 8009008:	461a      	mov	r2, r3
 800900a:	2180      	movs	r1, #128	@ 0x80
 800900c:	48a4      	ldr	r0, [pc, #656]	@ (80092a0 <digitalWrite+0x384>)
 800900e:	f7f9 fe87 	bl	8002d20 <HAL_GPIO_WritePin>
 8009012:	e2e3      	b.n	80095dc <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, vlue); break;
 8009014:	78fb      	ldrb	r3, [r7, #3]
 8009016:	461a      	mov	r2, r3
 8009018:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800901c:	48a0      	ldr	r0, [pc, #640]	@ (80092a0 <digitalWrite+0x384>)
 800901e:	f7f9 fe7f 	bl	8002d20 <HAL_GPIO_WritePin>
 8009022:	e2db      	b.n	80095dc <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, vlue); break;
 8009024:	78fb      	ldrb	r3, [r7, #3]
 8009026:	461a      	mov	r2, r3
 8009028:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800902c:	489c      	ldr	r0, [pc, #624]	@ (80092a0 <digitalWrite+0x384>)
 800902e:	f7f9 fe77 	bl	8002d20 <HAL_GPIO_WritePin>
 8009032:	e2d3      	b.n	80095dc <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, vlue); break;
 8009034:	78fb      	ldrb	r3, [r7, #3]
 8009036:	461a      	mov	r2, r3
 8009038:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800903c:	4898      	ldr	r0, [pc, #608]	@ (80092a0 <digitalWrite+0x384>)
 800903e:	f7f9 fe6f 	bl	8002d20 <HAL_GPIO_WritePin>
 8009042:	e2cb      	b.n	80095dc <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, vlue); break;
 8009044:	78fb      	ldrb	r3, [r7, #3]
 8009046:	461a      	mov	r2, r3
 8009048:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800904c:	4894      	ldr	r0, [pc, #592]	@ (80092a0 <digitalWrite+0x384>)
 800904e:	f7f9 fe67 	bl	8002d20 <HAL_GPIO_WritePin>
 8009052:	e2c3      	b.n	80095dc <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, vlue); break;
 8009054:	78fb      	ldrb	r3, [r7, #3]
 8009056:	461a      	mov	r2, r3
 8009058:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800905c:	4890      	ldr	r0, [pc, #576]	@ (80092a0 <digitalWrite+0x384>)
 800905e:	f7f9 fe5f 	bl	8002d20 <HAL_GPIO_WritePin>
 8009062:	e2bb      	b.n	80095dc <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, vlue); break;
 8009064:	78fb      	ldrb	r3, [r7, #3]
 8009066:	461a      	mov	r2, r3
 8009068:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800906c:	488c      	ldr	r0, [pc, #560]	@ (80092a0 <digitalWrite+0x384>)
 800906e:	f7f9 fe57 	bl	8002d20 <HAL_GPIO_WritePin>
 8009072:	e2b3      	b.n	80095dc <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, vlue); break;
 8009074:	78fb      	ldrb	r3, [r7, #3]
 8009076:	461a      	mov	r2, r3
 8009078:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800907c:	4888      	ldr	r0, [pc, #544]	@ (80092a0 <digitalWrite+0x384>)
 800907e:	f7f9 fe4f 	bl	8002d20 <HAL_GPIO_WritePin>
 8009082:	e2ab      	b.n	80095dc <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, vlue); break;
 8009084:	78fb      	ldrb	r3, [r7, #3]
 8009086:	461a      	mov	r2, r3
 8009088:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800908c:	4884      	ldr	r0, [pc, #528]	@ (80092a0 <digitalWrite+0x384>)
 800908e:	f7f9 fe47 	bl	8002d20 <HAL_GPIO_WritePin>
 8009092:	e2a3      	b.n	80095dc <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'B') {
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	3301      	adds	r3, #1
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	2b42      	cmp	r3, #66	@ 0x42
 800909c:	f040 80a0 	bne.w	80091e0 <digitalWrite+0x2c4>
	        switch (PIN) {
 80090a0:	7bfb      	ldrb	r3, [r7, #15]
 80090a2:	2b0f      	cmp	r3, #15
 80090a4:	f200 829a 	bhi.w	80095dc <digitalWrite+0x6c0>
 80090a8:	a201      	add	r2, pc, #4	@ (adr r2, 80090b0 <digitalWrite+0x194>)
 80090aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ae:	bf00      	nop
 80090b0:	080090f1 	.word	0x080090f1
 80090b4:	080090ff 	.word	0x080090ff
 80090b8:	0800910d 	.word	0x0800910d
 80090bc:	0800911b 	.word	0x0800911b
 80090c0:	08009129 	.word	0x08009129
 80090c4:	08009137 	.word	0x08009137
 80090c8:	08009145 	.word	0x08009145
 80090cc:	08009153 	.word	0x08009153
 80090d0:	08009161 	.word	0x08009161
 80090d4:	08009171 	.word	0x08009171
 80090d8:	08009181 	.word	0x08009181
 80090dc:	08009191 	.word	0x08009191
 80090e0:	080091a1 	.word	0x080091a1
 80090e4:	080091b1 	.word	0x080091b1
 80090e8:	080091c1 	.word	0x080091c1
 80090ec:	080091d1 	.word	0x080091d1
	            case 0: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, vlue); break;
 80090f0:	78fb      	ldrb	r3, [r7, #3]
 80090f2:	461a      	mov	r2, r3
 80090f4:	2101      	movs	r1, #1
 80090f6:	486b      	ldr	r0, [pc, #428]	@ (80092a4 <digitalWrite+0x388>)
 80090f8:	f7f9 fe12 	bl	8002d20 <HAL_GPIO_WritePin>
 80090fc:	e26e      	b.n	80095dc <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, vlue); break;
 80090fe:	78fb      	ldrb	r3, [r7, #3]
 8009100:	461a      	mov	r2, r3
 8009102:	2102      	movs	r1, #2
 8009104:	4867      	ldr	r0, [pc, #412]	@ (80092a4 <digitalWrite+0x388>)
 8009106:	f7f9 fe0b 	bl	8002d20 <HAL_GPIO_WritePin>
 800910a:	e267      	b.n	80095dc <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, vlue); break;
 800910c:	78fb      	ldrb	r3, [r7, #3]
 800910e:	461a      	mov	r2, r3
 8009110:	2104      	movs	r1, #4
 8009112:	4864      	ldr	r0, [pc, #400]	@ (80092a4 <digitalWrite+0x388>)
 8009114:	f7f9 fe04 	bl	8002d20 <HAL_GPIO_WritePin>
 8009118:	e260      	b.n	80095dc <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, vlue); break;
 800911a:	78fb      	ldrb	r3, [r7, #3]
 800911c:	461a      	mov	r2, r3
 800911e:	2108      	movs	r1, #8
 8009120:	4860      	ldr	r0, [pc, #384]	@ (80092a4 <digitalWrite+0x388>)
 8009122:	f7f9 fdfd 	bl	8002d20 <HAL_GPIO_WritePin>
 8009126:	e259      	b.n	80095dc <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, vlue); break;
 8009128:	78fb      	ldrb	r3, [r7, #3]
 800912a:	461a      	mov	r2, r3
 800912c:	2110      	movs	r1, #16
 800912e:	485d      	ldr	r0, [pc, #372]	@ (80092a4 <digitalWrite+0x388>)
 8009130:	f7f9 fdf6 	bl	8002d20 <HAL_GPIO_WritePin>
 8009134:	e252      	b.n	80095dc <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, vlue); break;
 8009136:	78fb      	ldrb	r3, [r7, #3]
 8009138:	461a      	mov	r2, r3
 800913a:	2120      	movs	r1, #32
 800913c:	4859      	ldr	r0, [pc, #356]	@ (80092a4 <digitalWrite+0x388>)
 800913e:	f7f9 fdef 	bl	8002d20 <HAL_GPIO_WritePin>
 8009142:	e24b      	b.n	80095dc <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, vlue); break;
 8009144:	78fb      	ldrb	r3, [r7, #3]
 8009146:	461a      	mov	r2, r3
 8009148:	2140      	movs	r1, #64	@ 0x40
 800914a:	4856      	ldr	r0, [pc, #344]	@ (80092a4 <digitalWrite+0x388>)
 800914c:	f7f9 fde8 	bl	8002d20 <HAL_GPIO_WritePin>
 8009150:	e244      	b.n	80095dc <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, vlue); break;
 8009152:	78fb      	ldrb	r3, [r7, #3]
 8009154:	461a      	mov	r2, r3
 8009156:	2180      	movs	r1, #128	@ 0x80
 8009158:	4852      	ldr	r0, [pc, #328]	@ (80092a4 <digitalWrite+0x388>)
 800915a:	f7f9 fde1 	bl	8002d20 <HAL_GPIO_WritePin>
 800915e:	e23d      	b.n	80095dc <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, vlue); break;
 8009160:	78fb      	ldrb	r3, [r7, #3]
 8009162:	461a      	mov	r2, r3
 8009164:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009168:	484e      	ldr	r0, [pc, #312]	@ (80092a4 <digitalWrite+0x388>)
 800916a:	f7f9 fdd9 	bl	8002d20 <HAL_GPIO_WritePin>
 800916e:	e235      	b.n	80095dc <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, vlue); break;
 8009170:	78fb      	ldrb	r3, [r7, #3]
 8009172:	461a      	mov	r2, r3
 8009174:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009178:	484a      	ldr	r0, [pc, #296]	@ (80092a4 <digitalWrite+0x388>)
 800917a:	f7f9 fdd1 	bl	8002d20 <HAL_GPIO_WritePin>
 800917e:	e22d      	b.n	80095dc <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, vlue); break;
 8009180:	78fb      	ldrb	r3, [r7, #3]
 8009182:	461a      	mov	r2, r3
 8009184:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009188:	4846      	ldr	r0, [pc, #280]	@ (80092a4 <digitalWrite+0x388>)
 800918a:	f7f9 fdc9 	bl	8002d20 <HAL_GPIO_WritePin>
 800918e:	e225      	b.n	80095dc <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, vlue); break;
 8009190:	78fb      	ldrb	r3, [r7, #3]
 8009192:	461a      	mov	r2, r3
 8009194:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009198:	4842      	ldr	r0, [pc, #264]	@ (80092a4 <digitalWrite+0x388>)
 800919a:	f7f9 fdc1 	bl	8002d20 <HAL_GPIO_WritePin>
 800919e:	e21d      	b.n	80095dc <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, vlue); break;
 80091a0:	78fb      	ldrb	r3, [r7, #3]
 80091a2:	461a      	mov	r2, r3
 80091a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80091a8:	483e      	ldr	r0, [pc, #248]	@ (80092a4 <digitalWrite+0x388>)
 80091aa:	f7f9 fdb9 	bl	8002d20 <HAL_GPIO_WritePin>
 80091ae:	e215      	b.n	80095dc <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, vlue); break;
 80091b0:	78fb      	ldrb	r3, [r7, #3]
 80091b2:	461a      	mov	r2, r3
 80091b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80091b8:	483a      	ldr	r0, [pc, #232]	@ (80092a4 <digitalWrite+0x388>)
 80091ba:	f7f9 fdb1 	bl	8002d20 <HAL_GPIO_WritePin>
 80091be:	e20d      	b.n	80095dc <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, vlue); break;
 80091c0:	78fb      	ldrb	r3, [r7, #3]
 80091c2:	461a      	mov	r2, r3
 80091c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80091c8:	4836      	ldr	r0, [pc, #216]	@ (80092a4 <digitalWrite+0x388>)
 80091ca:	f7f9 fda9 	bl	8002d20 <HAL_GPIO_WritePin>
 80091ce:	e205      	b.n	80095dc <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, vlue); break;
 80091d0:	78fb      	ldrb	r3, [r7, #3]
 80091d2:	461a      	mov	r2, r3
 80091d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80091d8:	4832      	ldr	r0, [pc, #200]	@ (80092a4 <digitalWrite+0x388>)
 80091da:	f7f9 fda1 	bl	8002d20 <HAL_GPIO_WritePin>
 80091de:	e1fd      	b.n	80095dc <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'C') {
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	3301      	adds	r3, #1
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	2b43      	cmp	r3, #67	@ 0x43
 80091e8:	f040 80a7 	bne.w	800933a <digitalWrite+0x41e>
	        switch (PIN) {
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
 80091ee:	2b0f      	cmp	r3, #15
 80091f0:	f200 81f4 	bhi.w	80095dc <digitalWrite+0x6c0>
 80091f4:	a201      	add	r2, pc, #4	@ (adr r2, 80091fc <digitalWrite+0x2e0>)
 80091f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fa:	bf00      	nop
 80091fc:	0800923d 	.word	0x0800923d
 8009200:	0800924b 	.word	0x0800924b
 8009204:	08009259 	.word	0x08009259
 8009208:	08009267 	.word	0x08009267
 800920c:	08009275 	.word	0x08009275
 8009210:	08009283 	.word	0x08009283
 8009214:	08009291 	.word	0x08009291
 8009218:	080092ad 	.word	0x080092ad
 800921c:	080092bb 	.word	0x080092bb
 8009220:	080092cb 	.word	0x080092cb
 8009224:	080092db 	.word	0x080092db
 8009228:	080092eb 	.word	0x080092eb
 800922c:	080092fb 	.word	0x080092fb
 8009230:	0800930b 	.word	0x0800930b
 8009234:	0800931b 	.word	0x0800931b
 8009238:	0800932b 	.word	0x0800932b
	            case 0: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, vlue); break;
 800923c:	78fb      	ldrb	r3, [r7, #3]
 800923e:	461a      	mov	r2, r3
 8009240:	2101      	movs	r1, #1
 8009242:	4819      	ldr	r0, [pc, #100]	@ (80092a8 <digitalWrite+0x38c>)
 8009244:	f7f9 fd6c 	bl	8002d20 <HAL_GPIO_WritePin>
 8009248:	e1c8      	b.n	80095dc <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, vlue); break;
 800924a:	78fb      	ldrb	r3, [r7, #3]
 800924c:	461a      	mov	r2, r3
 800924e:	2102      	movs	r1, #2
 8009250:	4815      	ldr	r0, [pc, #84]	@ (80092a8 <digitalWrite+0x38c>)
 8009252:	f7f9 fd65 	bl	8002d20 <HAL_GPIO_WritePin>
 8009256:	e1c1      	b.n	80095dc <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, vlue); break;
 8009258:	78fb      	ldrb	r3, [r7, #3]
 800925a:	461a      	mov	r2, r3
 800925c:	2104      	movs	r1, #4
 800925e:	4812      	ldr	r0, [pc, #72]	@ (80092a8 <digitalWrite+0x38c>)
 8009260:	f7f9 fd5e 	bl	8002d20 <HAL_GPIO_WritePin>
 8009264:	e1ba      	b.n	80095dc <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, vlue); break;
 8009266:	78fb      	ldrb	r3, [r7, #3]
 8009268:	461a      	mov	r2, r3
 800926a:	2108      	movs	r1, #8
 800926c:	480e      	ldr	r0, [pc, #56]	@ (80092a8 <digitalWrite+0x38c>)
 800926e:	f7f9 fd57 	bl	8002d20 <HAL_GPIO_WritePin>
 8009272:	e1b3      	b.n	80095dc <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, vlue); break;
 8009274:	78fb      	ldrb	r3, [r7, #3]
 8009276:	461a      	mov	r2, r3
 8009278:	2110      	movs	r1, #16
 800927a:	480b      	ldr	r0, [pc, #44]	@ (80092a8 <digitalWrite+0x38c>)
 800927c:	f7f9 fd50 	bl	8002d20 <HAL_GPIO_WritePin>
 8009280:	e1ac      	b.n	80095dc <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, vlue); break;
 8009282:	78fb      	ldrb	r3, [r7, #3]
 8009284:	461a      	mov	r2, r3
 8009286:	2120      	movs	r1, #32
 8009288:	4807      	ldr	r0, [pc, #28]	@ (80092a8 <digitalWrite+0x38c>)
 800928a:	f7f9 fd49 	bl	8002d20 <HAL_GPIO_WritePin>
 800928e:	e1a5      	b.n	80095dc <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, vlue); break;
 8009290:	78fb      	ldrb	r3, [r7, #3]
 8009292:	461a      	mov	r2, r3
 8009294:	2140      	movs	r1, #64	@ 0x40
 8009296:	4804      	ldr	r0, [pc, #16]	@ (80092a8 <digitalWrite+0x38c>)
 8009298:	f7f9 fd42 	bl	8002d20 <HAL_GPIO_WritePin>
 800929c:	e19e      	b.n	80095dc <digitalWrite+0x6c0>
 800929e:	bf00      	nop
 80092a0:	40020000 	.word	0x40020000
 80092a4:	40020400 	.word	0x40020400
 80092a8:	40020800 	.word	0x40020800
	            case 7: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, vlue); break;
 80092ac:	78fb      	ldrb	r3, [r7, #3]
 80092ae:	461a      	mov	r2, r3
 80092b0:	2180      	movs	r1, #128	@ 0x80
 80092b2:	48bb      	ldr	r0, [pc, #748]	@ (80095a0 <digitalWrite+0x684>)
 80092b4:	f7f9 fd34 	bl	8002d20 <HAL_GPIO_WritePin>
 80092b8:	e190      	b.n	80095dc <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, vlue); break;
 80092ba:	78fb      	ldrb	r3, [r7, #3]
 80092bc:	461a      	mov	r2, r3
 80092be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80092c2:	48b7      	ldr	r0, [pc, #732]	@ (80095a0 <digitalWrite+0x684>)
 80092c4:	f7f9 fd2c 	bl	8002d20 <HAL_GPIO_WritePin>
 80092c8:	e188      	b.n	80095dc <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, vlue); break;
 80092ca:	78fb      	ldrb	r3, [r7, #3]
 80092cc:	461a      	mov	r2, r3
 80092ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80092d2:	48b3      	ldr	r0, [pc, #716]	@ (80095a0 <digitalWrite+0x684>)
 80092d4:	f7f9 fd24 	bl	8002d20 <HAL_GPIO_WritePin>
 80092d8:	e180      	b.n	80095dc <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, vlue); break;
 80092da:	78fb      	ldrb	r3, [r7, #3]
 80092dc:	461a      	mov	r2, r3
 80092de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80092e2:	48af      	ldr	r0, [pc, #700]	@ (80095a0 <digitalWrite+0x684>)
 80092e4:	f7f9 fd1c 	bl	8002d20 <HAL_GPIO_WritePin>
 80092e8:	e178      	b.n	80095dc <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, vlue); break;
 80092ea:	78fb      	ldrb	r3, [r7, #3]
 80092ec:	461a      	mov	r2, r3
 80092ee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80092f2:	48ab      	ldr	r0, [pc, #684]	@ (80095a0 <digitalWrite+0x684>)
 80092f4:	f7f9 fd14 	bl	8002d20 <HAL_GPIO_WritePin>
 80092f8:	e170      	b.n	80095dc <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, vlue); break;
 80092fa:	78fb      	ldrb	r3, [r7, #3]
 80092fc:	461a      	mov	r2, r3
 80092fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009302:	48a7      	ldr	r0, [pc, #668]	@ (80095a0 <digitalWrite+0x684>)
 8009304:	f7f9 fd0c 	bl	8002d20 <HAL_GPIO_WritePin>
 8009308:	e168      	b.n	80095dc <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, vlue); break;
 800930a:	78fb      	ldrb	r3, [r7, #3]
 800930c:	461a      	mov	r2, r3
 800930e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009312:	48a3      	ldr	r0, [pc, #652]	@ (80095a0 <digitalWrite+0x684>)
 8009314:	f7f9 fd04 	bl	8002d20 <HAL_GPIO_WritePin>
 8009318:	e160      	b.n	80095dc <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, vlue); break;
 800931a:	78fb      	ldrb	r3, [r7, #3]
 800931c:	461a      	mov	r2, r3
 800931e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009322:	489f      	ldr	r0, [pc, #636]	@ (80095a0 <digitalWrite+0x684>)
 8009324:	f7f9 fcfc 	bl	8002d20 <HAL_GPIO_WritePin>
 8009328:	e158      	b.n	80095dc <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, vlue); break;
 800932a:	78fb      	ldrb	r3, [r7, #3]
 800932c:	461a      	mov	r2, r3
 800932e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009332:	489b      	ldr	r0, [pc, #620]	@ (80095a0 <digitalWrite+0x684>)
 8009334:	f7f9 fcf4 	bl	8002d20 <HAL_GPIO_WritePin>
 8009338:	e150      	b.n	80095dc <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'D') {
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	3301      	adds	r3, #1
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	2b44      	cmp	r3, #68	@ 0x44
 8009342:	f040 809f 	bne.w	8009484 <digitalWrite+0x568>
	        switch (PIN) {
 8009346:	7bfb      	ldrb	r3, [r7, #15]
 8009348:	2b0f      	cmp	r3, #15
 800934a:	f200 8147 	bhi.w	80095dc <digitalWrite+0x6c0>
 800934e:	a201      	add	r2, pc, #4	@ (adr r2, 8009354 <digitalWrite+0x438>)
 8009350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009354:	08009395 	.word	0x08009395
 8009358:	080093a3 	.word	0x080093a3
 800935c:	080093b1 	.word	0x080093b1
 8009360:	080093bf 	.word	0x080093bf
 8009364:	080093cd 	.word	0x080093cd
 8009368:	080093db 	.word	0x080093db
 800936c:	080093e9 	.word	0x080093e9
 8009370:	080093f7 	.word	0x080093f7
 8009374:	08009405 	.word	0x08009405
 8009378:	08009415 	.word	0x08009415
 800937c:	08009425 	.word	0x08009425
 8009380:	08009435 	.word	0x08009435
 8009384:	08009445 	.word	0x08009445
 8009388:	08009455 	.word	0x08009455
 800938c:	08009465 	.word	0x08009465
 8009390:	08009475 	.word	0x08009475
	            case 0: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, vlue); break;
 8009394:	78fb      	ldrb	r3, [r7, #3]
 8009396:	461a      	mov	r2, r3
 8009398:	2101      	movs	r1, #1
 800939a:	4882      	ldr	r0, [pc, #520]	@ (80095a4 <digitalWrite+0x688>)
 800939c:	f7f9 fcc0 	bl	8002d20 <HAL_GPIO_WritePin>
 80093a0:	e11c      	b.n	80095dc <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, vlue); break;
 80093a2:	78fb      	ldrb	r3, [r7, #3]
 80093a4:	461a      	mov	r2, r3
 80093a6:	2102      	movs	r1, #2
 80093a8:	487e      	ldr	r0, [pc, #504]	@ (80095a4 <digitalWrite+0x688>)
 80093aa:	f7f9 fcb9 	bl	8002d20 <HAL_GPIO_WritePin>
 80093ae:	e115      	b.n	80095dc <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, vlue); break;
 80093b0:	78fb      	ldrb	r3, [r7, #3]
 80093b2:	461a      	mov	r2, r3
 80093b4:	2104      	movs	r1, #4
 80093b6:	487b      	ldr	r0, [pc, #492]	@ (80095a4 <digitalWrite+0x688>)
 80093b8:	f7f9 fcb2 	bl	8002d20 <HAL_GPIO_WritePin>
 80093bc:	e10e      	b.n	80095dc <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, vlue); break;
 80093be:	78fb      	ldrb	r3, [r7, #3]
 80093c0:	461a      	mov	r2, r3
 80093c2:	2108      	movs	r1, #8
 80093c4:	4877      	ldr	r0, [pc, #476]	@ (80095a4 <digitalWrite+0x688>)
 80093c6:	f7f9 fcab 	bl	8002d20 <HAL_GPIO_WritePin>
 80093ca:	e107      	b.n	80095dc <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, vlue); break;
 80093cc:	78fb      	ldrb	r3, [r7, #3]
 80093ce:	461a      	mov	r2, r3
 80093d0:	2110      	movs	r1, #16
 80093d2:	4874      	ldr	r0, [pc, #464]	@ (80095a4 <digitalWrite+0x688>)
 80093d4:	f7f9 fca4 	bl	8002d20 <HAL_GPIO_WritePin>
 80093d8:	e100      	b.n	80095dc <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, vlue); break;
 80093da:	78fb      	ldrb	r3, [r7, #3]
 80093dc:	461a      	mov	r2, r3
 80093de:	2120      	movs	r1, #32
 80093e0:	4870      	ldr	r0, [pc, #448]	@ (80095a4 <digitalWrite+0x688>)
 80093e2:	f7f9 fc9d 	bl	8002d20 <HAL_GPIO_WritePin>
 80093e6:	e0f9      	b.n	80095dc <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, vlue); break;
 80093e8:	78fb      	ldrb	r3, [r7, #3]
 80093ea:	461a      	mov	r2, r3
 80093ec:	2140      	movs	r1, #64	@ 0x40
 80093ee:	486d      	ldr	r0, [pc, #436]	@ (80095a4 <digitalWrite+0x688>)
 80093f0:	f7f9 fc96 	bl	8002d20 <HAL_GPIO_WritePin>
 80093f4:	e0f2      	b.n	80095dc <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, vlue); break;
 80093f6:	78fb      	ldrb	r3, [r7, #3]
 80093f8:	461a      	mov	r2, r3
 80093fa:	2180      	movs	r1, #128	@ 0x80
 80093fc:	4869      	ldr	r0, [pc, #420]	@ (80095a4 <digitalWrite+0x688>)
 80093fe:	f7f9 fc8f 	bl	8002d20 <HAL_GPIO_WritePin>
 8009402:	e0eb      	b.n	80095dc <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, vlue); break;
 8009404:	78fb      	ldrb	r3, [r7, #3]
 8009406:	461a      	mov	r2, r3
 8009408:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800940c:	4865      	ldr	r0, [pc, #404]	@ (80095a4 <digitalWrite+0x688>)
 800940e:	f7f9 fc87 	bl	8002d20 <HAL_GPIO_WritePin>
 8009412:	e0e3      	b.n	80095dc <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, vlue); break;
 8009414:	78fb      	ldrb	r3, [r7, #3]
 8009416:	461a      	mov	r2, r3
 8009418:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800941c:	4861      	ldr	r0, [pc, #388]	@ (80095a4 <digitalWrite+0x688>)
 800941e:	f7f9 fc7f 	bl	8002d20 <HAL_GPIO_WritePin>
 8009422:	e0db      	b.n	80095dc <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, vlue); break;
 8009424:	78fb      	ldrb	r3, [r7, #3]
 8009426:	461a      	mov	r2, r3
 8009428:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800942c:	485d      	ldr	r0, [pc, #372]	@ (80095a4 <digitalWrite+0x688>)
 800942e:	f7f9 fc77 	bl	8002d20 <HAL_GPIO_WritePin>
 8009432:	e0d3      	b.n	80095dc <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, vlue); break;
 8009434:	78fb      	ldrb	r3, [r7, #3]
 8009436:	461a      	mov	r2, r3
 8009438:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800943c:	4859      	ldr	r0, [pc, #356]	@ (80095a4 <digitalWrite+0x688>)
 800943e:	f7f9 fc6f 	bl	8002d20 <HAL_GPIO_WritePin>
 8009442:	e0cb      	b.n	80095dc <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, vlue); break;
 8009444:	78fb      	ldrb	r3, [r7, #3]
 8009446:	461a      	mov	r2, r3
 8009448:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800944c:	4855      	ldr	r0, [pc, #340]	@ (80095a4 <digitalWrite+0x688>)
 800944e:	f7f9 fc67 	bl	8002d20 <HAL_GPIO_WritePin>
 8009452:	e0c3      	b.n	80095dc <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, vlue); break;
 8009454:	78fb      	ldrb	r3, [r7, #3]
 8009456:	461a      	mov	r2, r3
 8009458:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800945c:	4851      	ldr	r0, [pc, #324]	@ (80095a4 <digitalWrite+0x688>)
 800945e:	f7f9 fc5f 	bl	8002d20 <HAL_GPIO_WritePin>
 8009462:	e0bb      	b.n	80095dc <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, vlue); break;
 8009464:	78fb      	ldrb	r3, [r7, #3]
 8009466:	461a      	mov	r2, r3
 8009468:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800946c:	484d      	ldr	r0, [pc, #308]	@ (80095a4 <digitalWrite+0x688>)
 800946e:	f7f9 fc57 	bl	8002d20 <HAL_GPIO_WritePin>
 8009472:	e0b3      	b.n	80095dc <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, vlue); break;
 8009474:	78fb      	ldrb	r3, [r7, #3]
 8009476:	461a      	mov	r2, r3
 8009478:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800947c:	4849      	ldr	r0, [pc, #292]	@ (80095a4 <digitalWrite+0x688>)
 800947e:	f7f9 fc4f 	bl	8002d20 <HAL_GPIO_WritePin>
 8009482:	e0ab      	b.n	80095dc <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'E') {
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	3301      	adds	r3, #1
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	2b45      	cmp	r3, #69	@ 0x45
 800948c:	f040 80a6 	bne.w	80095dc <digitalWrite+0x6c0>
	        switch (PIN) {
 8009490:	7bfb      	ldrb	r3, [r7, #15]
 8009492:	2b0f      	cmp	r3, #15
 8009494:	f200 80a2 	bhi.w	80095dc <digitalWrite+0x6c0>
 8009498:	a201      	add	r2, pc, #4	@ (adr r2, 80094a0 <digitalWrite+0x584>)
 800949a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800949e:	bf00      	nop
 80094a0:	080094e1 	.word	0x080094e1
 80094a4:	080094ef 	.word	0x080094ef
 80094a8:	080094fd 	.word	0x080094fd
 80094ac:	0800950b 	.word	0x0800950b
 80094b0:	08009519 	.word	0x08009519
 80094b4:	08009527 	.word	0x08009527
 80094b8:	08009535 	.word	0x08009535
 80094bc:	08009543 	.word	0x08009543
 80094c0:	08009551 	.word	0x08009551
 80094c4:	08009561 	.word	0x08009561
 80094c8:	08009571 	.word	0x08009571
 80094cc:	08009581 	.word	0x08009581
 80094d0:	08009591 	.word	0x08009591
 80094d4:	080095ad 	.word	0x080095ad
 80094d8:	080095bd 	.word	0x080095bd
 80094dc:	080095cd 	.word	0x080095cd
	            case 0: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, vlue); break;
 80094e0:	78fb      	ldrb	r3, [r7, #3]
 80094e2:	461a      	mov	r2, r3
 80094e4:	2101      	movs	r1, #1
 80094e6:	4830      	ldr	r0, [pc, #192]	@ (80095a8 <digitalWrite+0x68c>)
 80094e8:	f7f9 fc1a 	bl	8002d20 <HAL_GPIO_WritePin>
 80094ec:	e076      	b.n	80095dc <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, vlue); break;
 80094ee:	78fb      	ldrb	r3, [r7, #3]
 80094f0:	461a      	mov	r2, r3
 80094f2:	2102      	movs	r1, #2
 80094f4:	482c      	ldr	r0, [pc, #176]	@ (80095a8 <digitalWrite+0x68c>)
 80094f6:	f7f9 fc13 	bl	8002d20 <HAL_GPIO_WritePin>
 80094fa:	e06f      	b.n	80095dc <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, vlue); break;
 80094fc:	78fb      	ldrb	r3, [r7, #3]
 80094fe:	461a      	mov	r2, r3
 8009500:	2104      	movs	r1, #4
 8009502:	4829      	ldr	r0, [pc, #164]	@ (80095a8 <digitalWrite+0x68c>)
 8009504:	f7f9 fc0c 	bl	8002d20 <HAL_GPIO_WritePin>
 8009508:	e068      	b.n	80095dc <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, vlue); break;
 800950a:	78fb      	ldrb	r3, [r7, #3]
 800950c:	461a      	mov	r2, r3
 800950e:	2108      	movs	r1, #8
 8009510:	4825      	ldr	r0, [pc, #148]	@ (80095a8 <digitalWrite+0x68c>)
 8009512:	f7f9 fc05 	bl	8002d20 <HAL_GPIO_WritePin>
 8009516:	e061      	b.n	80095dc <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, vlue); break;
 8009518:	78fb      	ldrb	r3, [r7, #3]
 800951a:	461a      	mov	r2, r3
 800951c:	2110      	movs	r1, #16
 800951e:	4822      	ldr	r0, [pc, #136]	@ (80095a8 <digitalWrite+0x68c>)
 8009520:	f7f9 fbfe 	bl	8002d20 <HAL_GPIO_WritePin>
 8009524:	e05a      	b.n	80095dc <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, vlue); break;
 8009526:	78fb      	ldrb	r3, [r7, #3]
 8009528:	461a      	mov	r2, r3
 800952a:	2120      	movs	r1, #32
 800952c:	481e      	ldr	r0, [pc, #120]	@ (80095a8 <digitalWrite+0x68c>)
 800952e:	f7f9 fbf7 	bl	8002d20 <HAL_GPIO_WritePin>
 8009532:	e053      	b.n	80095dc <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, vlue); break;
 8009534:	78fb      	ldrb	r3, [r7, #3]
 8009536:	461a      	mov	r2, r3
 8009538:	2140      	movs	r1, #64	@ 0x40
 800953a:	481b      	ldr	r0, [pc, #108]	@ (80095a8 <digitalWrite+0x68c>)
 800953c:	f7f9 fbf0 	bl	8002d20 <HAL_GPIO_WritePin>
 8009540:	e04c      	b.n	80095dc <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, vlue); break;
 8009542:	78fb      	ldrb	r3, [r7, #3]
 8009544:	461a      	mov	r2, r3
 8009546:	2180      	movs	r1, #128	@ 0x80
 8009548:	4817      	ldr	r0, [pc, #92]	@ (80095a8 <digitalWrite+0x68c>)
 800954a:	f7f9 fbe9 	bl	8002d20 <HAL_GPIO_WritePin>
 800954e:	e045      	b.n	80095dc <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, vlue); break;
 8009550:	78fb      	ldrb	r3, [r7, #3]
 8009552:	461a      	mov	r2, r3
 8009554:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009558:	4813      	ldr	r0, [pc, #76]	@ (80095a8 <digitalWrite+0x68c>)
 800955a:	f7f9 fbe1 	bl	8002d20 <HAL_GPIO_WritePin>
 800955e:	e03d      	b.n	80095dc <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, vlue); break;
 8009560:	78fb      	ldrb	r3, [r7, #3]
 8009562:	461a      	mov	r2, r3
 8009564:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009568:	480f      	ldr	r0, [pc, #60]	@ (80095a8 <digitalWrite+0x68c>)
 800956a:	f7f9 fbd9 	bl	8002d20 <HAL_GPIO_WritePin>
 800956e:	e035      	b.n	80095dc <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, vlue); break;
 8009570:	78fb      	ldrb	r3, [r7, #3]
 8009572:	461a      	mov	r2, r3
 8009574:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009578:	480b      	ldr	r0, [pc, #44]	@ (80095a8 <digitalWrite+0x68c>)
 800957a:	f7f9 fbd1 	bl	8002d20 <HAL_GPIO_WritePin>
 800957e:	e02d      	b.n	80095dc <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, vlue); break;
 8009580:	78fb      	ldrb	r3, [r7, #3]
 8009582:	461a      	mov	r2, r3
 8009584:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009588:	4807      	ldr	r0, [pc, #28]	@ (80095a8 <digitalWrite+0x68c>)
 800958a:	f7f9 fbc9 	bl	8002d20 <HAL_GPIO_WritePin>
 800958e:	e025      	b.n	80095dc <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, vlue); break;
 8009590:	78fb      	ldrb	r3, [r7, #3]
 8009592:	461a      	mov	r2, r3
 8009594:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009598:	4803      	ldr	r0, [pc, #12]	@ (80095a8 <digitalWrite+0x68c>)
 800959a:	f7f9 fbc1 	bl	8002d20 <HAL_GPIO_WritePin>
 800959e:	e01d      	b.n	80095dc <digitalWrite+0x6c0>
 80095a0:	40020800 	.word	0x40020800
 80095a4:	40020c00 	.word	0x40020c00
 80095a8:	40021000 	.word	0x40021000
	            case 13: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, vlue); break;
 80095ac:	78fb      	ldrb	r3, [r7, #3]
 80095ae:	461a      	mov	r2, r3
 80095b0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80095b4:	480b      	ldr	r0, [pc, #44]	@ (80095e4 <digitalWrite+0x6c8>)
 80095b6:	f7f9 fbb3 	bl	8002d20 <HAL_GPIO_WritePin>
 80095ba:	e00f      	b.n	80095dc <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, vlue); break;
 80095bc:	78fb      	ldrb	r3, [r7, #3]
 80095be:	461a      	mov	r2, r3
 80095c0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80095c4:	4807      	ldr	r0, [pc, #28]	@ (80095e4 <digitalWrite+0x6c8>)
 80095c6:	f7f9 fbab 	bl	8002d20 <HAL_GPIO_WritePin>
 80095ca:	e007      	b.n	80095dc <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, vlue); break;
 80095cc:	78fb      	ldrb	r3, [r7, #3]
 80095ce:	461a      	mov	r2, r3
 80095d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80095d4:	4803      	ldr	r0, [pc, #12]	@ (80095e4 <digitalWrite+0x6c8>)
 80095d6:	f7f9 fba3 	bl	8002d20 <HAL_GPIO_WritePin>
 80095da:	bf00      	nop
	        }
	    }
}
 80095dc:	bf00      	nop
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	40021000 	.word	0x40021000

080095e8 <Setup_Forward_Kinematic>:

float _Lx;
float _Ly;
float _Radius_wheel;

void Setup_Forward_Kinematic(float Lx ,float Ly ,float Radius_wheel){
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	ed87 0a03 	vstr	s0, [r7, #12]
 80095f2:	edc7 0a02 	vstr	s1, [r7, #8]
 80095f6:	ed87 1a01 	vstr	s2, [r7, #4]
	_Lx = Lx;
 80095fa:	4a07      	ldr	r2, [pc, #28]	@ (8009618 <Setup_Forward_Kinematic+0x30>)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	6013      	str	r3, [r2, #0]
	_Ly = Ly;
 8009600:	4a06      	ldr	r2, [pc, #24]	@ (800961c <Setup_Forward_Kinematic+0x34>)
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	6013      	str	r3, [r2, #0]
	_Radius_wheel = Radius_wheel;
 8009606:	4a06      	ldr	r2, [pc, #24]	@ (8009620 <Setup_Forward_Kinematic+0x38>)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6013      	str	r3, [r2, #0]
}
 800960c:	bf00      	nop
 800960e:	3714      	adds	r7, #20
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr
 8009618:	200007ec 	.word	0x200007ec
 800961c:	200007f0 	.word	0x200007f0
 8009620:	200007f4 	.word	0x200007f4

08009624 <Setup_frequency_Forward_Kinematic>:

float _Pos_X = 0.0f;
float _Pos_Y = 0.0f;
float _Pos_Z = 0.0f;

void Setup_frequency_Forward_Kinematic(uint8_t freq){
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	4603      	mov	r3, r0
 800962c:	71fb      	strb	r3, [r7, #7]
	__freq = freq;
 800962e:	4a04      	ldr	r2, [pc, #16]	@ (8009640 <Setup_frequency_Forward_Kinematic+0x1c>)
 8009630:	79fb      	ldrb	r3, [r7, #7]
 8009632:	7013      	strb	r3, [r2, #0]
}
 8009634:	bf00      	nop
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr
 8009640:	2000001c 	.word	0x2000001c

08009644 <Setup_Inverse_Kinematic>:

float Lx_;
float Ly_;
float Radius_wheel_;

void Setup_Inverse_Kinematic(float Lx ,float Ly ,float Radius_wheel){
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	ed87 0a03 	vstr	s0, [r7, #12]
 800964e:	edc7 0a02 	vstr	s1, [r7, #8]
 8009652:	ed87 1a01 	vstr	s2, [r7, #4]
	Lx_ = Lx;
 8009656:	4a07      	ldr	r2, [pc, #28]	@ (8009674 <Setup_Inverse_Kinematic+0x30>)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6013      	str	r3, [r2, #0]
	Ly_ = Ly;
 800965c:	4a06      	ldr	r2, [pc, #24]	@ (8009678 <Setup_Inverse_Kinematic+0x34>)
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	6013      	str	r3, [r2, #0]
	Radius_wheel_ = Radius_wheel;
 8009662:	4a06      	ldr	r2, [pc, #24]	@ (800967c <Setup_Inverse_Kinematic+0x38>)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6013      	str	r3, [r2, #0]
}
 8009668:	bf00      	nop
 800966a:	3714      	adds	r7, #20
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr
 8009674:	200007f8 	.word	0x200007f8
 8009678:	200007fc 	.word	0x200007fc
 800967c:	20000800 	.word	0x20000800

08009680 <Inverse_Kinematic>:
float w_LF = 0.0f;
float w_LB = 0.0f;
float w_RF = 0.0f;
float w_RB = 0.0f;

void Inverse_Kinematic(float Vx ,float Vy ,float wz){
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	ed87 0a03 	vstr	s0, [r7, #12]
 800968a:	edc7 0a02 	vstr	s1, [r7, #8]
 800968e:	ed87 1a01 	vstr	s2, [r7, #4]
	w_LF = (Vx - Vy - (Lx_ +Ly_)*wz)/Radius_wheel_;
 8009692:	ed97 7a03 	vldr	s14, [r7, #12]
 8009696:	edd7 7a02 	vldr	s15, [r7, #8]
 800969a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800969e:	4b3a      	ldr	r3, [pc, #232]	@ (8009788 <Inverse_Kinematic+0x108>)
 80096a0:	edd3 6a00 	vldr	s13, [r3]
 80096a4:	4b39      	ldr	r3, [pc, #228]	@ (800978c <Inverse_Kinematic+0x10c>)
 80096a6:	edd3 7a00 	vldr	s15, [r3]
 80096aa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80096ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80096b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096b6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80096ba:	4b35      	ldr	r3, [pc, #212]	@ (8009790 <Inverse_Kinematic+0x110>)
 80096bc:	ed93 7a00 	vldr	s14, [r3]
 80096c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096c4:	4b33      	ldr	r3, [pc, #204]	@ (8009794 <Inverse_Kinematic+0x114>)
 80096c6:	edc3 7a00 	vstr	s15, [r3]
	w_RF = -(Vx + Vy + (Lx_ +Ly_)*wz)/Radius_wheel_;
 80096ca:	ed97 7a03 	vldr	s14, [r7, #12]
 80096ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80096d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80096d6:	4b2c      	ldr	r3, [pc, #176]	@ (8009788 <Inverse_Kinematic+0x108>)
 80096d8:	edd3 6a00 	vldr	s13, [r3]
 80096dc:	4b2b      	ldr	r3, [pc, #172]	@ (800978c <Inverse_Kinematic+0x10c>)
 80096de:	edd3 7a00 	vldr	s15, [r3]
 80096e2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80096e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80096ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096f2:	eef1 6a67 	vneg.f32	s13, s15
 80096f6:	4b26      	ldr	r3, [pc, #152]	@ (8009790 <Inverse_Kinematic+0x110>)
 80096f8:	ed93 7a00 	vldr	s14, [r3]
 80096fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009700:	4b25      	ldr	r3, [pc, #148]	@ (8009798 <Inverse_Kinematic+0x118>)
 8009702:	edc3 7a00 	vstr	s15, [r3]
	w_LB = (Vx + Vy - (Lx_ +Ly_)*wz)/Radius_wheel_;
 8009706:	ed97 7a03 	vldr	s14, [r7, #12]
 800970a:	edd7 7a02 	vldr	s15, [r7, #8]
 800970e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009712:	4b1d      	ldr	r3, [pc, #116]	@ (8009788 <Inverse_Kinematic+0x108>)
 8009714:	edd3 6a00 	vldr	s13, [r3]
 8009718:	4b1c      	ldr	r3, [pc, #112]	@ (800978c <Inverse_Kinematic+0x10c>)
 800971a:	edd3 7a00 	vldr	s15, [r3]
 800971e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009722:	edd7 7a01 	vldr	s15, [r7, #4]
 8009726:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800972a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800972e:	4b18      	ldr	r3, [pc, #96]	@ (8009790 <Inverse_Kinematic+0x110>)
 8009730:	ed93 7a00 	vldr	s14, [r3]
 8009734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009738:	4b18      	ldr	r3, [pc, #96]	@ (800979c <Inverse_Kinematic+0x11c>)
 800973a:	edc3 7a00 	vstr	s15, [r3]
	w_RB = -(Vx - Vy + (Lx_ +Ly_)*wz)/Radius_wheel_;
 800973e:	ed97 7a03 	vldr	s14, [r7, #12]
 8009742:	edd7 7a02 	vldr	s15, [r7, #8]
 8009746:	ee37 7a67 	vsub.f32	s14, s14, s15
 800974a:	4b0f      	ldr	r3, [pc, #60]	@ (8009788 <Inverse_Kinematic+0x108>)
 800974c:	edd3 6a00 	vldr	s13, [r3]
 8009750:	4b0e      	ldr	r3, [pc, #56]	@ (800978c <Inverse_Kinematic+0x10c>)
 8009752:	edd3 7a00 	vldr	s15, [r3]
 8009756:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800975a:	edd7 7a01 	vldr	s15, [r7, #4]
 800975e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009766:	eef1 6a67 	vneg.f32	s13, s15
 800976a:	4b09      	ldr	r3, [pc, #36]	@ (8009790 <Inverse_Kinematic+0x110>)
 800976c:	ed93 7a00 	vldr	s14, [r3]
 8009770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009774:	4b0a      	ldr	r3, [pc, #40]	@ (80097a0 <Inverse_Kinematic+0x120>)
 8009776:	edc3 7a00 	vstr	s15, [r3]
}
 800977a:	bf00      	nop
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	200007f8 	.word	0x200007f8
 800978c:	200007fc 	.word	0x200007fc
 8009790:	20000800 	.word	0x20000800
 8009794:	20000804 	.word	0x20000804
 8009798:	2000080c 	.word	0x2000080c
 800979c:	20000808 	.word	0x20000808
 80097a0:	20000810 	.word	0x20000810

080097a4 <get_w_LF>:

float get_w_LF(){
 80097a4:	b480      	push	{r7}
 80097a6:	af00      	add	r7, sp, #0
	return w_LF;
 80097a8:	4b04      	ldr	r3, [pc, #16]	@ (80097bc <get_w_LF+0x18>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	ee07 3a90 	vmov	s15, r3
}
 80097b0:	eeb0 0a67 	vmov.f32	s0, s15
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr
 80097bc:	20000804 	.word	0x20000804

080097c0 <get_w_LB>:

float get_w_LB(){
 80097c0:	b480      	push	{r7}
 80097c2:	af00      	add	r7, sp, #0
	return w_LB;
 80097c4:	4b04      	ldr	r3, [pc, #16]	@ (80097d8 <get_w_LB+0x18>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	ee07 3a90 	vmov	s15, r3
}
 80097cc:	eeb0 0a67 	vmov.f32	s0, s15
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr
 80097d8:	20000808 	.word	0x20000808

080097dc <get_w_RF>:

float get_w_RF(){
 80097dc:	b480      	push	{r7}
 80097de:	af00      	add	r7, sp, #0
	return w_RF;
 80097e0:	4b04      	ldr	r3, [pc, #16]	@ (80097f4 <get_w_RF+0x18>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	ee07 3a90 	vmov	s15, r3
}
 80097e8:	eeb0 0a67 	vmov.f32	s0, s15
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr
 80097f4:	2000080c 	.word	0x2000080c

080097f8 <get_w_RB>:

float get_w_RB(){
 80097f8:	b480      	push	{r7}
 80097fa:	af00      	add	r7, sp, #0
	return w_RB;
 80097fc:	4b04      	ldr	r3, [pc, #16]	@ (8009810 <get_w_RB+0x18>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	ee07 3a90 	vmov	s15, r3
}
 8009804:	eeb0 0a67 	vmov.f32	s0, s15
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	20000810 	.word	0x20000810

08009814 <map>:

float map(float value, float fromLow, float fromHigh, float toLow, float toHigh) {
 8009814:	b480      	push	{r7}
 8009816:	b087      	sub	sp, #28
 8009818:	af00      	add	r7, sp, #0
 800981a:	ed87 0a05 	vstr	s0, [r7, #20]
 800981e:	edc7 0a04 	vstr	s1, [r7, #16]
 8009822:	ed87 1a03 	vstr	s2, [r7, #12]
 8009826:	edc7 1a02 	vstr	s3, [r7, #8]
 800982a:	ed87 2a01 	vstr	s4, [r7, #4]
    return toLow + (toHigh - toLow) * ((value - fromLow) / (fromHigh - fromLow));
 800982e:	ed97 7a01 	vldr	s14, [r7, #4]
 8009832:	edd7 7a02 	vldr	s15, [r7, #8]
 8009836:	ee37 7a67 	vsub.f32	s14, s14, s15
 800983a:	edd7 6a05 	vldr	s13, [r7, #20]
 800983e:	edd7 7a04 	vldr	s15, [r7, #16]
 8009842:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8009846:	edd7 6a03 	vldr	s13, [r7, #12]
 800984a:	edd7 7a04 	vldr	s15, [r7, #16]
 800984e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009852:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8009856:	ee27 7a27 	vmul.f32	s14, s14, s15
 800985a:	edd7 7a02 	vldr	s15, [r7, #8]
 800985e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8009862:	eeb0 0a67 	vmov.f32	s0, s15
 8009866:	371c      	adds	r7, #28
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800987c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009880:	f002 fc50 	bl	800c124 <USBD_static_malloc>
 8009884:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d109      	bne.n	80098a0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	32b0      	adds	r2, #176	@ 0xb0
 8009896:	2100      	movs	r1, #0
 8009898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800989c:	2302      	movs	r3, #2
 800989e:	e0d4      	b.n	8009a4a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80098a0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80098a4:	2100      	movs	r1, #0
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f002 fc80 	bl	800c1ac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	32b0      	adds	r2, #176	@ 0xb0
 80098b6:	68f9      	ldr	r1, [r7, #12]
 80098b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	32b0      	adds	r2, #176	@ 0xb0
 80098c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	7c1b      	ldrb	r3, [r3, #16]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d138      	bne.n	800994a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80098d8:	4b5e      	ldr	r3, [pc, #376]	@ (8009a54 <USBD_CDC_Init+0x1e4>)
 80098da:	7819      	ldrb	r1, [r3, #0]
 80098dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80098e0:	2202      	movs	r2, #2
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f002 fafb 	bl	800bede <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80098e8:	4b5a      	ldr	r3, [pc, #360]	@ (8009a54 <USBD_CDC_Init+0x1e4>)
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	f003 020f 	and.w	r2, r3, #15
 80098f0:	6879      	ldr	r1, [r7, #4]
 80098f2:	4613      	mov	r3, r2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4413      	add	r3, r2
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	440b      	add	r3, r1
 80098fc:	3324      	adds	r3, #36	@ 0x24
 80098fe:	2201      	movs	r2, #1
 8009900:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009902:	4b55      	ldr	r3, [pc, #340]	@ (8009a58 <USBD_CDC_Init+0x1e8>)
 8009904:	7819      	ldrb	r1, [r3, #0]
 8009906:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800990a:	2202      	movs	r2, #2
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f002 fae6 	bl	800bede <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009912:	4b51      	ldr	r3, [pc, #324]	@ (8009a58 <USBD_CDC_Init+0x1e8>)
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	f003 020f 	and.w	r2, r3, #15
 800991a:	6879      	ldr	r1, [r7, #4]
 800991c:	4613      	mov	r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4413      	add	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	440b      	add	r3, r1
 8009926:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800992a:	2201      	movs	r2, #1
 800992c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800992e:	4b4b      	ldr	r3, [pc, #300]	@ (8009a5c <USBD_CDC_Init+0x1ec>)
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	f003 020f 	and.w	r2, r3, #15
 8009936:	6879      	ldr	r1, [r7, #4]
 8009938:	4613      	mov	r3, r2
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	4413      	add	r3, r2
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	440b      	add	r3, r1
 8009942:	3326      	adds	r3, #38	@ 0x26
 8009944:	2210      	movs	r2, #16
 8009946:	801a      	strh	r2, [r3, #0]
 8009948:	e035      	b.n	80099b6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800994a:	4b42      	ldr	r3, [pc, #264]	@ (8009a54 <USBD_CDC_Init+0x1e4>)
 800994c:	7819      	ldrb	r1, [r3, #0]
 800994e:	2340      	movs	r3, #64	@ 0x40
 8009950:	2202      	movs	r2, #2
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f002 fac3 	bl	800bede <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009958:	4b3e      	ldr	r3, [pc, #248]	@ (8009a54 <USBD_CDC_Init+0x1e4>)
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	f003 020f 	and.w	r2, r3, #15
 8009960:	6879      	ldr	r1, [r7, #4]
 8009962:	4613      	mov	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4413      	add	r3, r2
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	440b      	add	r3, r1
 800996c:	3324      	adds	r3, #36	@ 0x24
 800996e:	2201      	movs	r2, #1
 8009970:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009972:	4b39      	ldr	r3, [pc, #228]	@ (8009a58 <USBD_CDC_Init+0x1e8>)
 8009974:	7819      	ldrb	r1, [r3, #0]
 8009976:	2340      	movs	r3, #64	@ 0x40
 8009978:	2202      	movs	r2, #2
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f002 faaf 	bl	800bede <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009980:	4b35      	ldr	r3, [pc, #212]	@ (8009a58 <USBD_CDC_Init+0x1e8>)
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	f003 020f 	and.w	r2, r3, #15
 8009988:	6879      	ldr	r1, [r7, #4]
 800998a:	4613      	mov	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4413      	add	r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	440b      	add	r3, r1
 8009994:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009998:	2201      	movs	r2, #1
 800999a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800999c:	4b2f      	ldr	r3, [pc, #188]	@ (8009a5c <USBD_CDC_Init+0x1ec>)
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	f003 020f 	and.w	r2, r3, #15
 80099a4:	6879      	ldr	r1, [r7, #4]
 80099a6:	4613      	mov	r3, r2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	009b      	lsls	r3, r3, #2
 80099ae:	440b      	add	r3, r1
 80099b0:	3326      	adds	r3, #38	@ 0x26
 80099b2:	2210      	movs	r2, #16
 80099b4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80099b6:	4b29      	ldr	r3, [pc, #164]	@ (8009a5c <USBD_CDC_Init+0x1ec>)
 80099b8:	7819      	ldrb	r1, [r3, #0]
 80099ba:	2308      	movs	r3, #8
 80099bc:	2203      	movs	r2, #3
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f002 fa8d 	bl	800bede <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80099c4:	4b25      	ldr	r3, [pc, #148]	@ (8009a5c <USBD_CDC_Init+0x1ec>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	f003 020f 	and.w	r2, r3, #15
 80099cc:	6879      	ldr	r1, [r7, #4]
 80099ce:	4613      	mov	r3, r2
 80099d0:	009b      	lsls	r3, r3, #2
 80099d2:	4413      	add	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	440b      	add	r3, r1
 80099d8:	3324      	adds	r3, #36	@ 0x24
 80099da:	2201      	movs	r2, #1
 80099dc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2200      	movs	r2, #0
 80099e2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	33b0      	adds	r3, #176	@ 0xb0
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4413      	add	r3, r2
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d101      	bne.n	8009a18 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009a14:	2302      	movs	r3, #2
 8009a16:	e018      	b.n	8009a4a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	7c1b      	ldrb	r3, [r3, #16]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10a      	bne.n	8009a36 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a20:	4b0d      	ldr	r3, [pc, #52]	@ (8009a58 <USBD_CDC_Init+0x1e8>)
 8009a22:	7819      	ldrb	r1, [r3, #0]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009a2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f002 fb44 	bl	800c0bc <USBD_LL_PrepareReceive>
 8009a34:	e008      	b.n	8009a48 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009a36:	4b08      	ldr	r3, [pc, #32]	@ (8009a58 <USBD_CDC_Init+0x1e8>)
 8009a38:	7819      	ldrb	r1, [r3, #0]
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009a40:	2340      	movs	r3, #64	@ 0x40
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f002 fb3a 	bl	800c0bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009a48:	2300      	movs	r3, #0
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	200000a7 	.word	0x200000a7
 8009a58:	200000a8 	.word	0x200000a8
 8009a5c:	200000a9 	.word	0x200000a9

08009a60 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8009b58 <USBD_CDC_DeInit+0xf8>)
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	4619      	mov	r1, r3
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f002 fa59 	bl	800bf2a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009a78:	4b37      	ldr	r3, [pc, #220]	@ (8009b58 <USBD_CDC_DeInit+0xf8>)
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	f003 020f 	and.w	r2, r3, #15
 8009a80:	6879      	ldr	r1, [r7, #4]
 8009a82:	4613      	mov	r3, r2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4413      	add	r3, r2
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	440b      	add	r3, r1
 8009a8c:	3324      	adds	r3, #36	@ 0x24
 8009a8e:	2200      	movs	r2, #0
 8009a90:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009a92:	4b32      	ldr	r3, [pc, #200]	@ (8009b5c <USBD_CDC_DeInit+0xfc>)
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f002 fa46 	bl	800bf2a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009a9e:	4b2f      	ldr	r3, [pc, #188]	@ (8009b5c <USBD_CDC_DeInit+0xfc>)
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	f003 020f 	and.w	r2, r3, #15
 8009aa6:	6879      	ldr	r1, [r7, #4]
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	440b      	add	r3, r1
 8009ab2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009aba:	4b29      	ldr	r3, [pc, #164]	@ (8009b60 <USBD_CDC_DeInit+0x100>)
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	4619      	mov	r1, r3
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f002 fa32 	bl	800bf2a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009ac6:	4b26      	ldr	r3, [pc, #152]	@ (8009b60 <USBD_CDC_DeInit+0x100>)
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	f003 020f 	and.w	r2, r3, #15
 8009ace:	6879      	ldr	r1, [r7, #4]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4413      	add	r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	440b      	add	r3, r1
 8009ada:	3324      	adds	r3, #36	@ 0x24
 8009adc:	2200      	movs	r2, #0
 8009ade:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8009b60 <USBD_CDC_DeInit+0x100>)
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	f003 020f 	and.w	r2, r3, #15
 8009ae8:	6879      	ldr	r1, [r7, #4]
 8009aea:	4613      	mov	r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	440b      	add	r3, r1
 8009af4:	3326      	adds	r3, #38	@ 0x26
 8009af6:	2200      	movs	r2, #0
 8009af8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	32b0      	adds	r2, #176	@ 0xb0
 8009b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d01f      	beq.n	8009b4c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	33b0      	adds	r3, #176	@ 0xb0
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	32b0      	adds	r2, #176	@ 0xb0
 8009b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f002 fb06 	bl	800c140 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	32b0      	adds	r2, #176	@ 0xb0
 8009b3e:	2100      	movs	r1, #0
 8009b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	200000a7 	.word	0x200000a7
 8009b5c:	200000a8 	.word	0x200000a8
 8009b60:	200000a9 	.word	0x200000a9

08009b64 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
 8009b6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	32b0      	adds	r2, #176	@ 0xb0
 8009b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b7c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009b82:	2300      	movs	r3, #0
 8009b84:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b86:	2300      	movs	r3, #0
 8009b88:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d101      	bne.n	8009b94 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009b90:	2303      	movs	r3, #3
 8009b92:	e0bf      	b.n	8009d14 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d050      	beq.n	8009c42 <USBD_CDC_Setup+0xde>
 8009ba0:	2b20      	cmp	r3, #32
 8009ba2:	f040 80af 	bne.w	8009d04 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	88db      	ldrh	r3, [r3, #6]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d03a      	beq.n	8009c24 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	b25b      	sxtb	r3, r3
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	da1b      	bge.n	8009bf0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	33b0      	adds	r3, #176	@ 0xb0
 8009bc2:	009b      	lsls	r3, r3, #2
 8009bc4:	4413      	add	r3, r2
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	683a      	ldr	r2, [r7, #0]
 8009bcc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009bce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009bd0:	683a      	ldr	r2, [r7, #0]
 8009bd2:	88d2      	ldrh	r2, [r2, #6]
 8009bd4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	88db      	ldrh	r3, [r3, #6]
 8009bda:	2b07      	cmp	r3, #7
 8009bdc:	bf28      	it	cs
 8009bde:	2307      	movcs	r3, #7
 8009be0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	89fa      	ldrh	r2, [r7, #14]
 8009be6:	4619      	mov	r1, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f001 fd53 	bl	800b694 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009bee:	e090      	b.n	8009d12 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	785a      	ldrb	r2, [r3, #1]
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	88db      	ldrh	r3, [r3, #6]
 8009bfe:	2b3f      	cmp	r3, #63	@ 0x3f
 8009c00:	d803      	bhi.n	8009c0a <USBD_CDC_Setup+0xa6>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	88db      	ldrh	r3, [r3, #6]
 8009c06:	b2da      	uxtb	r2, r3
 8009c08:	e000      	b.n	8009c0c <USBD_CDC_Setup+0xa8>
 8009c0a:	2240      	movs	r2, #64	@ 0x40
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009c12:	6939      	ldr	r1, [r7, #16]
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f001 fd65 	bl	800b6ec <USBD_CtlPrepareRx>
      break;
 8009c22:	e076      	b.n	8009d12 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	33b0      	adds	r3, #176	@ 0xb0
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4413      	add	r3, r2
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	683a      	ldr	r2, [r7, #0]
 8009c38:	7850      	ldrb	r0, [r2, #1]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	6839      	ldr	r1, [r7, #0]
 8009c3e:	4798      	blx	r3
      break;
 8009c40:	e067      	b.n	8009d12 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	785b      	ldrb	r3, [r3, #1]
 8009c46:	2b0b      	cmp	r3, #11
 8009c48:	d851      	bhi.n	8009cee <USBD_CDC_Setup+0x18a>
 8009c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8009c50 <USBD_CDC_Setup+0xec>)
 8009c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c50:	08009c81 	.word	0x08009c81
 8009c54:	08009cfd 	.word	0x08009cfd
 8009c58:	08009cef 	.word	0x08009cef
 8009c5c:	08009cef 	.word	0x08009cef
 8009c60:	08009cef 	.word	0x08009cef
 8009c64:	08009cef 	.word	0x08009cef
 8009c68:	08009cef 	.word	0x08009cef
 8009c6c:	08009cef 	.word	0x08009cef
 8009c70:	08009cef 	.word	0x08009cef
 8009c74:	08009cef 	.word	0x08009cef
 8009c78:	08009cab 	.word	0x08009cab
 8009c7c:	08009cd5 	.word	0x08009cd5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	2b03      	cmp	r3, #3
 8009c8a:	d107      	bne.n	8009c9c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009c8c:	f107 030a 	add.w	r3, r7, #10
 8009c90:	2202      	movs	r2, #2
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f001 fcfd 	bl	800b694 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009c9a:	e032      	b.n	8009d02 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009c9c:	6839      	ldr	r1, [r7, #0]
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f001 fc7b 	bl	800b59a <USBD_CtlError>
            ret = USBD_FAIL;
 8009ca4:	2303      	movs	r3, #3
 8009ca6:	75fb      	strb	r3, [r7, #23]
          break;
 8009ca8:	e02b      	b.n	8009d02 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	2b03      	cmp	r3, #3
 8009cb4:	d107      	bne.n	8009cc6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009cb6:	f107 030d 	add.w	r3, r7, #13
 8009cba:	2201      	movs	r2, #1
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f001 fce8 	bl	800b694 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009cc4:	e01d      	b.n	8009d02 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009cc6:	6839      	ldr	r1, [r7, #0]
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f001 fc66 	bl	800b59a <USBD_CtlError>
            ret = USBD_FAIL;
 8009cce:	2303      	movs	r3, #3
 8009cd0:	75fb      	strb	r3, [r7, #23]
          break;
 8009cd2:	e016      	b.n	8009d02 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	2b03      	cmp	r3, #3
 8009cde:	d00f      	beq.n	8009d00 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009ce0:	6839      	ldr	r1, [r7, #0]
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f001 fc59 	bl	800b59a <USBD_CtlError>
            ret = USBD_FAIL;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009cec:	e008      	b.n	8009d00 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009cee:	6839      	ldr	r1, [r7, #0]
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f001 fc52 	bl	800b59a <USBD_CtlError>
          ret = USBD_FAIL;
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	75fb      	strb	r3, [r7, #23]
          break;
 8009cfa:	e002      	b.n	8009d02 <USBD_CDC_Setup+0x19e>
          break;
 8009cfc:	bf00      	nop
 8009cfe:	e008      	b.n	8009d12 <USBD_CDC_Setup+0x1ae>
          break;
 8009d00:	bf00      	nop
      }
      break;
 8009d02:	e006      	b.n	8009d12 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009d04:	6839      	ldr	r1, [r7, #0]
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f001 fc47 	bl	800b59a <USBD_CtlError>
      ret = USBD_FAIL;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	75fb      	strb	r3, [r7, #23]
      break;
 8009d10:	bf00      	nop
  }

  return (uint8_t)ret;
 8009d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3718      	adds	r7, #24
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	460b      	mov	r3, r1
 8009d26:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009d2e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	32b0      	adds	r2, #176	@ 0xb0
 8009d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d101      	bne.n	8009d46 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009d42:	2303      	movs	r3, #3
 8009d44:	e065      	b.n	8009e12 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	32b0      	adds	r2, #176	@ 0xb0
 8009d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d54:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009d56:	78fb      	ldrb	r3, [r7, #3]
 8009d58:	f003 020f 	and.w	r2, r3, #15
 8009d5c:	6879      	ldr	r1, [r7, #4]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4413      	add	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	440b      	add	r3, r1
 8009d68:	3318      	adds	r3, #24
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d02f      	beq.n	8009dd0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009d70:	78fb      	ldrb	r3, [r7, #3]
 8009d72:	f003 020f 	and.w	r2, r3, #15
 8009d76:	6879      	ldr	r1, [r7, #4]
 8009d78:	4613      	mov	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	4413      	add	r3, r2
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	440b      	add	r3, r1
 8009d82:	3318      	adds	r3, #24
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	78fb      	ldrb	r3, [r7, #3]
 8009d88:	f003 010f 	and.w	r1, r3, #15
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	460b      	mov	r3, r1
 8009d90:	00db      	lsls	r3, r3, #3
 8009d92:	440b      	add	r3, r1
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	4403      	add	r3, r0
 8009d98:	331c      	adds	r3, #28
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009da0:	fb01 f303 	mul.w	r3, r1, r3
 8009da4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d112      	bne.n	8009dd0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009daa:	78fb      	ldrb	r3, [r7, #3]
 8009dac:	f003 020f 	and.w	r2, r3, #15
 8009db0:	6879      	ldr	r1, [r7, #4]
 8009db2:	4613      	mov	r3, r2
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	4413      	add	r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	440b      	add	r3, r1
 8009dbc:	3318      	adds	r3, #24
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009dc2:	78f9      	ldrb	r1, [r7, #3]
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f002 f956 	bl	800c07a <USBD_LL_Transmit>
 8009dce:	e01f      	b.n	8009e10 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	33b0      	adds	r3, #176	@ 0xb0
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4413      	add	r3, r2
 8009de6:	685b      	ldr	r3, [r3, #4]
 8009de8:	691b      	ldr	r3, [r3, #16]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d010      	beq.n	8009e10 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009df4:	687a      	ldr	r2, [r7, #4]
 8009df6:	33b0      	adds	r3, #176	@ 0xb0
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	4413      	add	r3, r2
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009e06:	68ba      	ldr	r2, [r7, #8]
 8009e08:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009e0c:	78fa      	ldrb	r2, [r7, #3]
 8009e0e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b084      	sub	sp, #16
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
 8009e22:	460b      	mov	r3, r1
 8009e24:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	32b0      	adds	r2, #176	@ 0xb0
 8009e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e34:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	32b0      	adds	r2, #176	@ 0xb0
 8009e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d101      	bne.n	8009e4c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009e48:	2303      	movs	r3, #3
 8009e4a:	e01a      	b.n	8009e82 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009e4c:	78fb      	ldrb	r3, [r7, #3]
 8009e4e:	4619      	mov	r1, r3
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f002 f954 	bl	800c0fe <USBD_LL_GetRxDataSize>
 8009e56:	4602      	mov	r2, r0
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	33b0      	adds	r3, #176	@ 0xb0
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	4413      	add	r3, r2
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009e7c:	4611      	mov	r1, r2
 8009e7e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}

08009e8a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009e8a:	b580      	push	{r7, lr}
 8009e8c:	b084      	sub	sp, #16
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	32b0      	adds	r2, #176	@ 0xb0
 8009e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ea0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d101      	bne.n	8009eac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009ea8:	2303      	movs	r3, #3
 8009eaa:	e024      	b.n	8009ef6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	33b0      	adds	r3, #176	@ 0xb0
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	4413      	add	r3, r2
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d019      	beq.n	8009ef4 <USBD_CDC_EP0_RxReady+0x6a>
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009ec6:	2bff      	cmp	r3, #255	@ 0xff
 8009ec8:	d014      	beq.n	8009ef4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	33b0      	adds	r3, #176	@ 0xb0
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	4413      	add	r3, r2
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	68fa      	ldr	r2, [r7, #12]
 8009ede:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009ee2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009eea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	22ff      	movs	r2, #255	@ 0xff
 8009ef0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3710      	adds	r7, #16
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
	...

08009f00 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b086      	sub	sp, #24
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009f08:	2182      	movs	r1, #130	@ 0x82
 8009f0a:	4818      	ldr	r0, [pc, #96]	@ (8009f6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f0c:	f000 fd0f 	bl	800a92e <USBD_GetEpDesc>
 8009f10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009f12:	2101      	movs	r1, #1
 8009f14:	4815      	ldr	r0, [pc, #84]	@ (8009f6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f16:	f000 fd0a 	bl	800a92e <USBD_GetEpDesc>
 8009f1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f1c:	2181      	movs	r1, #129	@ 0x81
 8009f1e:	4813      	ldr	r0, [pc, #76]	@ (8009f6c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009f20:	f000 fd05 	bl	800a92e <USBD_GetEpDesc>
 8009f24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d002      	beq.n	8009f32 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	2210      	movs	r2, #16
 8009f30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d006      	beq.n	8009f46 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f40:	711a      	strb	r2, [r3, #4]
 8009f42:	2200      	movs	r2, #0
 8009f44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d006      	beq.n	8009f5a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009f54:	711a      	strb	r2, [r3, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2243      	movs	r2, #67	@ 0x43
 8009f5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009f60:	4b02      	ldr	r3, [pc, #8]	@ (8009f6c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3718      	adds	r7, #24
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	20000064 	.word	0x20000064

08009f70 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b086      	sub	sp, #24
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009f78:	2182      	movs	r1, #130	@ 0x82
 8009f7a:	4818      	ldr	r0, [pc, #96]	@ (8009fdc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f7c:	f000 fcd7 	bl	800a92e <USBD_GetEpDesc>
 8009f80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009f82:	2101      	movs	r1, #1
 8009f84:	4815      	ldr	r0, [pc, #84]	@ (8009fdc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f86:	f000 fcd2 	bl	800a92e <USBD_GetEpDesc>
 8009f8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009f8c:	2181      	movs	r1, #129	@ 0x81
 8009f8e:	4813      	ldr	r0, [pc, #76]	@ (8009fdc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009f90:	f000 fccd 	bl	800a92e <USBD_GetEpDesc>
 8009f94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009f96:	697b      	ldr	r3, [r7, #20]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d002      	beq.n	8009fa2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	2210      	movs	r2, #16
 8009fa0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d006      	beq.n	8009fb6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	2200      	movs	r2, #0
 8009fac:	711a      	strb	r2, [r3, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f042 0202 	orr.w	r2, r2, #2
 8009fb4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d006      	beq.n	8009fca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	711a      	strb	r2, [r3, #4]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f042 0202 	orr.w	r2, r2, #2
 8009fc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2243      	movs	r2, #67	@ 0x43
 8009fce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009fd0:	4b02      	ldr	r3, [pc, #8]	@ (8009fdc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	20000064 	.word	0x20000064

08009fe0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009fe8:	2182      	movs	r1, #130	@ 0x82
 8009fea:	4818      	ldr	r0, [pc, #96]	@ (800a04c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009fec:	f000 fc9f 	bl	800a92e <USBD_GetEpDesc>
 8009ff0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ff2:	2101      	movs	r1, #1
 8009ff4:	4815      	ldr	r0, [pc, #84]	@ (800a04c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009ff6:	f000 fc9a 	bl	800a92e <USBD_GetEpDesc>
 8009ffa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009ffc:	2181      	movs	r1, #129	@ 0x81
 8009ffe:	4813      	ldr	r0, [pc, #76]	@ (800a04c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a000:	f000 fc95 	bl	800a92e <USBD_GetEpDesc>
 800a004:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d002      	beq.n	800a012 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	2210      	movs	r2, #16
 800a010:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d006      	beq.n	800a026 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a020:	711a      	strb	r2, [r3, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d006      	beq.n	800a03a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2200      	movs	r2, #0
 800a030:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a034:	711a      	strb	r2, [r3, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2243      	movs	r2, #67	@ 0x43
 800a03e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a040:	4b02      	ldr	r3, [pc, #8]	@ (800a04c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a042:	4618      	mov	r0, r3
 800a044:	3718      	adds	r7, #24
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	20000064 	.word	0x20000064

0800a050 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	220a      	movs	r2, #10
 800a05c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a05e:	4b03      	ldr	r3, [pc, #12]	@ (800a06c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a060:	4618      	mov	r0, r3
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr
 800a06c:	20000020 	.word	0x20000020

0800a070 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d101      	bne.n	800a084 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a080:	2303      	movs	r3, #3
 800a082:	e009      	b.n	800a098 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	33b0      	adds	r3, #176	@ 0xb0
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4413      	add	r3, r2
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a096:	2300      	movs	r3, #0
}
 800a098:	4618      	mov	r0, r3
 800a09a:	370c      	adds	r7, #12
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	32b0      	adds	r2, #176	@ 0xb0
 800a0ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0be:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d101      	bne.n	800a0ca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a0c6:	2303      	movs	r3, #3
 800a0c8:	e008      	b.n	800a0dc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a0ca:	697b      	ldr	r3, [r7, #20]
 800a0cc:	68ba      	ldr	r2, [r7, #8]
 800a0ce:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	371c      	adds	r7, #28
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	32b0      	adds	r2, #176	@ 0xb0
 800a0fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a100:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d101      	bne.n	800a10c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a108:	2303      	movs	r3, #3
 800a10a:	e004      	b.n	800a116 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	683a      	ldr	r2, [r7, #0]
 800a110:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3714      	adds	r7, #20
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
	...

0800a124 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b084      	sub	sp, #16
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	32b0      	adds	r2, #176	@ 0xb0
 800a136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a13a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	32b0      	adds	r2, #176	@ 0xb0
 800a146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d101      	bne.n	800a152 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a14e:	2303      	movs	r3, #3
 800a150:	e018      	b.n	800a184 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	7c1b      	ldrb	r3, [r3, #16]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d10a      	bne.n	800a170 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a15a:	4b0c      	ldr	r3, [pc, #48]	@ (800a18c <USBD_CDC_ReceivePacket+0x68>)
 800a15c:	7819      	ldrb	r1, [r3, #0]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a164:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f001 ffa7 	bl	800c0bc <USBD_LL_PrepareReceive>
 800a16e:	e008      	b.n	800a182 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a170:	4b06      	ldr	r3, [pc, #24]	@ (800a18c <USBD_CDC_ReceivePacket+0x68>)
 800a172:	7819      	ldrb	r1, [r3, #0]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a17a:	2340      	movs	r3, #64	@ 0x40
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f001 ff9d 	bl	800c0bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}
 800a18c:	200000a8 	.word	0x200000a8

0800a190 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b086      	sub	sp, #24
 800a194:	af00      	add	r7, sp, #0
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	4613      	mov	r3, r2
 800a19c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e01f      	b.n	800a1e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d003      	beq.n	800a1ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	68ba      	ldr	r2, [r7, #8]
 800a1ca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	79fa      	ldrb	r2, [r7, #7]
 800a1da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f001 fe17 	bl	800be10 <USBD_LL_Init>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a1e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3718      	adds	r7, #24
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d101      	bne.n	800a208 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a204:	2303      	movs	r3, #3
 800a206:	e025      	b.n	800a254 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	683a      	ldr	r2, [r7, #0]
 800a20c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	32ae      	adds	r2, #174	@ 0xae
 800a21a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a21e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00f      	beq.n	800a244 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	32ae      	adds	r2, #174	@ 0xae
 800a22e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a234:	f107 020e 	add.w	r2, r7, #14
 800a238:	4610      	mov	r0, r2
 800a23a:	4798      	blx	r3
 800a23c:	4602      	mov	r2, r0
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a24a:	1c5a      	adds	r2, r3, #1
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f001 fe1f 	bl	800bea8 <USBD_LL_Start>
 800a26a:	4603      	mov	r3, r0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3708      	adds	r7, #8
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a274:	b480      	push	{r7}
 800a276:	b083      	sub	sp, #12
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a27c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a27e:	4618      	mov	r0, r3
 800a280:	370c      	adds	r7, #12
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b084      	sub	sp, #16
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
 800a292:	460b      	mov	r3, r1
 800a294:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a296:	2300      	movs	r3, #0
 800a298:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d009      	beq.n	800a2b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	78fa      	ldrb	r2, [r7, #3]
 800a2ae:	4611      	mov	r1, r2
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	4798      	blx	r3
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b084      	sub	sp, #16
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	78fa      	ldrb	r2, [r7, #3]
 800a2dc:	4611      	mov	r1, r2
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	4798      	blx	r3
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d001      	beq.n	800a2ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a2e8:	2303      	movs	r3, #3
 800a2ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a2ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}

0800a2f6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a2f6:	b580      	push	{r7, lr}
 800a2f8:	b084      	sub	sp, #16
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
 800a2fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a306:	6839      	ldr	r1, [r7, #0]
 800a308:	4618      	mov	r0, r3
 800a30a:	f001 f90c 	bl	800b526 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2201      	movs	r2, #1
 800a312:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a31c:	461a      	mov	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a32a:	f003 031f 	and.w	r3, r3, #31
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d01a      	beq.n	800a368 <USBD_LL_SetupStage+0x72>
 800a332:	2b02      	cmp	r3, #2
 800a334:	d822      	bhi.n	800a37c <USBD_LL_SetupStage+0x86>
 800a336:	2b00      	cmp	r3, #0
 800a338:	d002      	beq.n	800a340 <USBD_LL_SetupStage+0x4a>
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d00a      	beq.n	800a354 <USBD_LL_SetupStage+0x5e>
 800a33e:	e01d      	b.n	800a37c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a346:	4619      	mov	r1, r3
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f000 fb63 	bl	800aa14 <USBD_StdDevReq>
 800a34e:	4603      	mov	r3, r0
 800a350:	73fb      	strb	r3, [r7, #15]
      break;
 800a352:	e020      	b.n	800a396 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a35a:	4619      	mov	r1, r3
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 fbcb 	bl	800aaf8 <USBD_StdItfReq>
 800a362:	4603      	mov	r3, r0
 800a364:	73fb      	strb	r3, [r7, #15]
      break;
 800a366:	e016      	b.n	800a396 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a36e:	4619      	mov	r1, r3
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fc2d 	bl	800abd0 <USBD_StdEPReq>
 800a376:	4603      	mov	r3, r0
 800a378:	73fb      	strb	r3, [r7, #15]
      break;
 800a37a:	e00c      	b.n	800a396 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a382:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a386:	b2db      	uxtb	r3, r3
 800a388:	4619      	mov	r1, r3
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f001 fdec 	bl	800bf68 <USBD_LL_StallEP>
 800a390:	4603      	mov	r3, r0
 800a392:	73fb      	strb	r3, [r7, #15]
      break;
 800a394:	bf00      	nop
  }

  return ret;
 800a396:	7bfb      	ldrb	r3, [r7, #15]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3710      	adds	r7, #16
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	607a      	str	r2, [r7, #4]
 800a3ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a3b2:	7afb      	ldrb	r3, [r7, #11]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d16e      	bne.n	800a496 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a3be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a3c6:	2b03      	cmp	r3, #3
 800a3c8:	f040 8098 	bne.w	800a4fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	689a      	ldr	r2, [r3, #8]
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d913      	bls.n	800a400 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	689a      	ldr	r2, [r3, #8]
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	1ad2      	subs	r2, r2, r3
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	68da      	ldr	r2, [r3, #12]
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	bf28      	it	cs
 800a3f2:	4613      	movcs	r3, r2
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	6879      	ldr	r1, [r7, #4]
 800a3f8:	68f8      	ldr	r0, [r7, #12]
 800a3fa:	f001 f994 	bl	800b726 <USBD_CtlContinueRx>
 800a3fe:	e07d      	b.n	800a4fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a406:	f003 031f 	and.w	r3, r3, #31
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d014      	beq.n	800a438 <USBD_LL_DataOutStage+0x98>
 800a40e:	2b02      	cmp	r3, #2
 800a410:	d81d      	bhi.n	800a44e <USBD_LL_DataOutStage+0xae>
 800a412:	2b00      	cmp	r3, #0
 800a414:	d002      	beq.n	800a41c <USBD_LL_DataOutStage+0x7c>
 800a416:	2b01      	cmp	r3, #1
 800a418:	d003      	beq.n	800a422 <USBD_LL_DataOutStage+0x82>
 800a41a:	e018      	b.n	800a44e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a41c:	2300      	movs	r3, #0
 800a41e:	75bb      	strb	r3, [r7, #22]
            break;
 800a420:	e018      	b.n	800a454 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a428:	b2db      	uxtb	r3, r3
 800a42a:	4619      	mov	r1, r3
 800a42c:	68f8      	ldr	r0, [r7, #12]
 800a42e:	f000 fa64 	bl	800a8fa <USBD_CoreFindIF>
 800a432:	4603      	mov	r3, r0
 800a434:	75bb      	strb	r3, [r7, #22]
            break;
 800a436:	e00d      	b.n	800a454 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	4619      	mov	r1, r3
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f000 fa66 	bl	800a914 <USBD_CoreFindEP>
 800a448:	4603      	mov	r3, r0
 800a44a:	75bb      	strb	r3, [r7, #22]
            break;
 800a44c:	e002      	b.n	800a454 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a44e:	2300      	movs	r3, #0
 800a450:	75bb      	strb	r3, [r7, #22]
            break;
 800a452:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a454:	7dbb      	ldrb	r3, [r7, #22]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d119      	bne.n	800a48e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a460:	b2db      	uxtb	r3, r3
 800a462:	2b03      	cmp	r3, #3
 800a464:	d113      	bne.n	800a48e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a466:	7dba      	ldrb	r2, [r7, #22]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	32ae      	adds	r2, #174	@ 0xae
 800a46c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00b      	beq.n	800a48e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a476:	7dba      	ldrb	r2, [r7, #22]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a47e:	7dba      	ldrb	r2, [r7, #22]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	32ae      	adds	r2, #174	@ 0xae
 800a484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f001 f95a 	bl	800b748 <USBD_CtlSendStatus>
 800a494:	e032      	b.n	800a4fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a496:	7afb      	ldrb	r3, [r7, #11]
 800a498:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	4619      	mov	r1, r3
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f000 fa37 	bl	800a914 <USBD_CoreFindEP>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4aa:	7dbb      	ldrb	r3, [r7, #22]
 800a4ac:	2bff      	cmp	r3, #255	@ 0xff
 800a4ae:	d025      	beq.n	800a4fc <USBD_LL_DataOutStage+0x15c>
 800a4b0:	7dbb      	ldrb	r3, [r7, #22]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d122      	bne.n	800a4fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4bc:	b2db      	uxtb	r3, r3
 800a4be:	2b03      	cmp	r3, #3
 800a4c0:	d117      	bne.n	800a4f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a4c2:	7dba      	ldrb	r2, [r7, #22]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	32ae      	adds	r2, #174	@ 0xae
 800a4c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4cc:	699b      	ldr	r3, [r3, #24]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00f      	beq.n	800a4f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a4d2:	7dba      	ldrb	r2, [r7, #22]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a4da:	7dba      	ldrb	r2, [r7, #22]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	32ae      	adds	r2, #174	@ 0xae
 800a4e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4e4:	699b      	ldr	r3, [r3, #24]
 800a4e6:	7afa      	ldrb	r2, [r7, #11]
 800a4e8:	4611      	mov	r1, r2
 800a4ea:	68f8      	ldr	r0, [r7, #12]
 800a4ec:	4798      	blx	r3
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a4f2:	7dfb      	ldrb	r3, [r7, #23]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d001      	beq.n	800a4fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a4f8:	7dfb      	ldrb	r3, [r7, #23]
 800a4fa:	e000      	b.n	800a4fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3718      	adds	r7, #24
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b086      	sub	sp, #24
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	60f8      	str	r0, [r7, #12]
 800a50e:	460b      	mov	r3, r1
 800a510:	607a      	str	r2, [r7, #4]
 800a512:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a514:	7afb      	ldrb	r3, [r7, #11]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d16f      	bne.n	800a5fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	3314      	adds	r3, #20
 800a51e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a526:	2b02      	cmp	r3, #2
 800a528:	d15a      	bne.n	800a5e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	689a      	ldr	r2, [r3, #8]
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	429a      	cmp	r2, r3
 800a534:	d914      	bls.n	800a560 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	689a      	ldr	r2, [r3, #8]
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	1ad2      	subs	r2, r2, r3
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	461a      	mov	r2, r3
 800a54a:	6879      	ldr	r1, [r7, #4]
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f001 f8bc 	bl	800b6ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a552:	2300      	movs	r3, #0
 800a554:	2200      	movs	r2, #0
 800a556:	2100      	movs	r1, #0
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f001 fdaf 	bl	800c0bc <USBD_LL_PrepareReceive>
 800a55e:	e03f      	b.n	800a5e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	68da      	ldr	r2, [r3, #12]
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d11c      	bne.n	800a5a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	685a      	ldr	r2, [r3, #4]
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a574:	429a      	cmp	r2, r3
 800a576:	d316      	bcc.n	800a5a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	685a      	ldr	r2, [r3, #4]
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a582:	429a      	cmp	r2, r3
 800a584:	d20f      	bcs.n	800a5a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a586:	2200      	movs	r2, #0
 800a588:	2100      	movs	r1, #0
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f001 f89d 	bl	800b6ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a598:	2300      	movs	r3, #0
 800a59a:	2200      	movs	r2, #0
 800a59c:	2100      	movs	r1, #0
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	f001 fd8c 	bl	800c0bc <USBD_LL_PrepareReceive>
 800a5a4:	e01c      	b.n	800a5e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	2b03      	cmp	r3, #3
 800a5b0:	d10f      	bne.n	800a5d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d009      	beq.n	800a5d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5d2:	2180      	movs	r1, #128	@ 0x80
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f001 fcc7 	bl	800bf68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f001 f8c7 	bl	800b76e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d03a      	beq.n	800a660 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f7ff fe42 	bl	800a274 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a5f8:	e032      	b.n	800a660 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a5fa:	7afb      	ldrb	r3, [r7, #11]
 800a5fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a600:	b2db      	uxtb	r3, r3
 800a602:	4619      	mov	r1, r3
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f000 f985 	bl	800a914 <USBD_CoreFindEP>
 800a60a:	4603      	mov	r3, r0
 800a60c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a60e:	7dfb      	ldrb	r3, [r7, #23]
 800a610:	2bff      	cmp	r3, #255	@ 0xff
 800a612:	d025      	beq.n	800a660 <USBD_LL_DataInStage+0x15a>
 800a614:	7dfb      	ldrb	r3, [r7, #23]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d122      	bne.n	800a660 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a620:	b2db      	uxtb	r3, r3
 800a622:	2b03      	cmp	r3, #3
 800a624:	d11c      	bne.n	800a660 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a626:	7dfa      	ldrb	r2, [r7, #23]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	32ae      	adds	r2, #174	@ 0xae
 800a62c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a630:	695b      	ldr	r3, [r3, #20]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d014      	beq.n	800a660 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a636:	7dfa      	ldrb	r2, [r7, #23]
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a63e:	7dfa      	ldrb	r2, [r7, #23]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	32ae      	adds	r2, #174	@ 0xae
 800a644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a648:	695b      	ldr	r3, [r3, #20]
 800a64a:	7afa      	ldrb	r2, [r7, #11]
 800a64c:	4611      	mov	r1, r2
 800a64e:	68f8      	ldr	r0, [r7, #12]
 800a650:	4798      	blx	r3
 800a652:	4603      	mov	r3, r0
 800a654:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a656:	7dbb      	ldrb	r3, [r7, #22]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a65c:	7dbb      	ldrb	r3, [r7, #22]
 800a65e:	e000      	b.n	800a662 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3718      	adds	r7, #24
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b084      	sub	sp, #16
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a672:	2300      	movs	r3, #0
 800a674:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2201      	movs	r2, #1
 800a67a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d014      	beq.n	800a6d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d00e      	beq.n	800a6d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	687a      	ldr	r2, [r7, #4]
 800a6bc:	6852      	ldr	r2, [r2, #4]
 800a6be:	b2d2      	uxtb	r2, r2
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	4798      	blx	r3
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d001      	beq.n	800a6d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a6cc:	2303      	movs	r3, #3
 800a6ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6d0:	2340      	movs	r3, #64	@ 0x40
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f001 fc01 	bl	800bede <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2201      	movs	r2, #1
 800a6e0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2240      	movs	r2, #64	@ 0x40
 800a6e8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6ec:	2340      	movs	r3, #64	@ 0x40
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	2180      	movs	r1, #128	@ 0x80
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f001 fbf3 	bl	800bede <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2240      	movs	r2, #64	@ 0x40
 800a702:	621a      	str	r2, [r3, #32]

  return ret;
 800a704:	7bfb      	ldrb	r3, [r7, #15]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a70e:	b480      	push	{r7}
 800a710:	b083      	sub	sp, #12
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
 800a716:	460b      	mov	r3, r1
 800a718:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	78fa      	ldrb	r2, [r7, #3]
 800a71e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	370c      	adds	r7, #12
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr

0800a72e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a72e:	b480      	push	{r7}
 800a730:	b083      	sub	sp, #12
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	2b04      	cmp	r3, #4
 800a740:	d006      	beq.n	800a750 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a748:	b2da      	uxtb	r2, r3
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2204      	movs	r2, #4
 800a754:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	370c      	adds	r7, #12
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a766:	b480      	push	{r7}
 800a768:	b083      	sub	sp, #12
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a774:	b2db      	uxtb	r3, r3
 800a776:	2b04      	cmp	r3, #4
 800a778:	d106      	bne.n	800a788 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a780:	b2da      	uxtb	r2, r3
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a788:	2300      	movs	r3, #0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	370c      	adds	r7, #12
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr

0800a796 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a796:	b580      	push	{r7, lr}
 800a798:	b082      	sub	sp, #8
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	2b03      	cmp	r3, #3
 800a7a8:	d110      	bne.n	800a7cc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d00b      	beq.n	800a7cc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7ba:	69db      	ldr	r3, [r3, #28]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d005      	beq.n	800a7cc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7c6:	69db      	ldr	r3, [r3, #28]
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3708      	adds	r7, #8
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b082      	sub	sp, #8
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
 800a7de:	460b      	mov	r3, r1
 800a7e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	32ae      	adds	r2, #174	@ 0xae
 800a7ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d101      	bne.n	800a7f8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a7f4:	2303      	movs	r3, #3
 800a7f6:	e01c      	b.n	800a832 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	2b03      	cmp	r3, #3
 800a802:	d115      	bne.n	800a830 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	32ae      	adds	r2, #174	@ 0xae
 800a80e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a812:	6a1b      	ldr	r3, [r3, #32]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00b      	beq.n	800a830 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	32ae      	adds	r2, #174	@ 0xae
 800a822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a826:	6a1b      	ldr	r3, [r3, #32]
 800a828:	78fa      	ldrb	r2, [r7, #3]
 800a82a:	4611      	mov	r1, r2
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	3708      	adds	r7, #8
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b082      	sub	sp, #8
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	460b      	mov	r3, r1
 800a844:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	32ae      	adds	r2, #174	@ 0xae
 800a850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d101      	bne.n	800a85c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a858:	2303      	movs	r3, #3
 800a85a:	e01c      	b.n	800a896 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a862:	b2db      	uxtb	r3, r3
 800a864:	2b03      	cmp	r3, #3
 800a866:	d115      	bne.n	800a894 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	32ae      	adds	r2, #174	@ 0xae
 800a872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00b      	beq.n	800a894 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	32ae      	adds	r2, #174	@ 0xae
 800a886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a88a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a88c:	78fa      	ldrb	r2, [r7, #3]
 800a88e:	4611      	mov	r1, r2
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a894:	2300      	movs	r3, #0
}
 800a896:	4618      	mov	r0, r3
 800a898:	3708      	adds	r7, #8
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a89e:	b480      	push	{r7}
 800a8a0:	b083      	sub	sp, #12
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	370c      	adds	r7, #12
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr

0800a8b4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b084      	sub	sp, #16
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a8bc:	2300      	movs	r3, #0
 800a8be:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d00e      	beq.n	800a8f0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	6852      	ldr	r2, [r2, #4]
 800a8de:	b2d2      	uxtb	r2, r2
 800a8e0:	4611      	mov	r1, r2
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	4798      	blx	r3
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d001      	beq.n	800a8f0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a8f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	b083      	sub	sp, #12
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	460b      	mov	r3, r1
 800a904:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a906:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a908:	4618      	mov	r0, r3
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	460b      	mov	r3, r1
 800a91e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a920:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a922:	4618      	mov	r0, r3
 800a924:	370c      	adds	r7, #12
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr

0800a92e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a92e:	b580      	push	{r7, lr}
 800a930:	b086      	sub	sp, #24
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	460b      	mov	r3, r1
 800a938:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a942:	2300      	movs	r3, #0
 800a944:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	885b      	ldrh	r3, [r3, #2]
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	68fa      	ldr	r2, [r7, #12]
 800a94e:	7812      	ldrb	r2, [r2, #0]
 800a950:	4293      	cmp	r3, r2
 800a952:	d91f      	bls.n	800a994 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a95a:	e013      	b.n	800a984 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a95c:	f107 030a 	add.w	r3, r7, #10
 800a960:	4619      	mov	r1, r3
 800a962:	6978      	ldr	r0, [r7, #20]
 800a964:	f000 f81b 	bl	800a99e <USBD_GetNextDesc>
 800a968:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	785b      	ldrb	r3, [r3, #1]
 800a96e:	2b05      	cmp	r3, #5
 800a970:	d108      	bne.n	800a984 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a972:	697b      	ldr	r3, [r7, #20]
 800a974:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	789b      	ldrb	r3, [r3, #2]
 800a97a:	78fa      	ldrb	r2, [r7, #3]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d008      	beq.n	800a992 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a980:	2300      	movs	r3, #0
 800a982:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	885b      	ldrh	r3, [r3, #2]
 800a988:	b29a      	uxth	r2, r3
 800a98a:	897b      	ldrh	r3, [r7, #10]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d8e5      	bhi.n	800a95c <USBD_GetEpDesc+0x2e>
 800a990:	e000      	b.n	800a994 <USBD_GetEpDesc+0x66>
          break;
 800a992:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a994:	693b      	ldr	r3, [r7, #16]
}
 800a996:	4618      	mov	r0, r3
 800a998:	3718      	adds	r7, #24
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}

0800a99e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a99e:	b480      	push	{r7}
 800a9a0:	b085      	sub	sp, #20
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	881b      	ldrh	r3, [r3, #0]
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	7812      	ldrb	r2, [r2, #0]
 800a9b4:	4413      	add	r3, r2
 800a9b6:	b29a      	uxth	r2, r3
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	781b      	ldrb	r3, [r3, #0]
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	4413      	add	r3, r2
 800a9c6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3714      	adds	r7, #20
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr

0800a9d6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a9d6:	b480      	push	{r7}
 800a9d8:	b087      	sub	sp, #28
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a9f4:	8a3b      	ldrh	r3, [r7, #16]
 800a9f6:	021b      	lsls	r3, r3, #8
 800a9f8:	b21a      	sxth	r2, r3
 800a9fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	b21b      	sxth	r3, r3
 800aa02:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aa04:	89fb      	ldrh	r3, [r7, #14]
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	371c      	adds	r7, #28
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
	...

0800aa14 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800aa2a:	2b40      	cmp	r3, #64	@ 0x40
 800aa2c:	d005      	beq.n	800aa3a <USBD_StdDevReq+0x26>
 800aa2e:	2b40      	cmp	r3, #64	@ 0x40
 800aa30:	d857      	bhi.n	800aae2 <USBD_StdDevReq+0xce>
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00f      	beq.n	800aa56 <USBD_StdDevReq+0x42>
 800aa36:	2b20      	cmp	r3, #32
 800aa38:	d153      	bne.n	800aae2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	32ae      	adds	r2, #174	@ 0xae
 800aa44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	6839      	ldr	r1, [r7, #0]
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	4798      	blx	r3
 800aa50:	4603      	mov	r3, r0
 800aa52:	73fb      	strb	r3, [r7, #15]
      break;
 800aa54:	e04a      	b.n	800aaec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	785b      	ldrb	r3, [r3, #1]
 800aa5a:	2b09      	cmp	r3, #9
 800aa5c:	d83b      	bhi.n	800aad6 <USBD_StdDevReq+0xc2>
 800aa5e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa64 <USBD_StdDevReq+0x50>)
 800aa60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa64:	0800aab9 	.word	0x0800aab9
 800aa68:	0800aacd 	.word	0x0800aacd
 800aa6c:	0800aad7 	.word	0x0800aad7
 800aa70:	0800aac3 	.word	0x0800aac3
 800aa74:	0800aad7 	.word	0x0800aad7
 800aa78:	0800aa97 	.word	0x0800aa97
 800aa7c:	0800aa8d 	.word	0x0800aa8d
 800aa80:	0800aad7 	.word	0x0800aad7
 800aa84:	0800aaaf 	.word	0x0800aaaf
 800aa88:	0800aaa1 	.word	0x0800aaa1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fa3c 	bl	800af0c <USBD_GetDescriptor>
          break;
 800aa94:	e024      	b.n	800aae0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aa96:	6839      	ldr	r1, [r7, #0]
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 fba1 	bl	800b1e0 <USBD_SetAddress>
          break;
 800aa9e:	e01f      	b.n	800aae0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aaa0:	6839      	ldr	r1, [r7, #0]
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 fbe0 	bl	800b268 <USBD_SetConfig>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	73fb      	strb	r3, [r7, #15]
          break;
 800aaac:	e018      	b.n	800aae0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aaae:	6839      	ldr	r1, [r7, #0]
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 fc83 	bl	800b3bc <USBD_GetConfig>
          break;
 800aab6:	e013      	b.n	800aae0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aab8:	6839      	ldr	r1, [r7, #0]
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 fcb4 	bl	800b428 <USBD_GetStatus>
          break;
 800aac0:	e00e      	b.n	800aae0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aac2:	6839      	ldr	r1, [r7, #0]
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 fce3 	bl	800b490 <USBD_SetFeature>
          break;
 800aaca:	e009      	b.n	800aae0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aacc:	6839      	ldr	r1, [r7, #0]
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 fd07 	bl	800b4e2 <USBD_ClrFeature>
          break;
 800aad4:	e004      	b.n	800aae0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800aad6:	6839      	ldr	r1, [r7, #0]
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 fd5e 	bl	800b59a <USBD_CtlError>
          break;
 800aade:	bf00      	nop
      }
      break;
 800aae0:	e004      	b.n	800aaec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800aae2:	6839      	ldr	r1, [r7, #0]
 800aae4:	6878      	ldr	r0, [r7, #4]
 800aae6:	f000 fd58 	bl	800b59a <USBD_CtlError>
      break;
 800aaea:	bf00      	nop
  }

  return ret;
 800aaec:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop

0800aaf8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab02:	2300      	movs	r3, #0
 800ab04:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab0e:	2b40      	cmp	r3, #64	@ 0x40
 800ab10:	d005      	beq.n	800ab1e <USBD_StdItfReq+0x26>
 800ab12:	2b40      	cmp	r3, #64	@ 0x40
 800ab14:	d852      	bhi.n	800abbc <USBD_StdItfReq+0xc4>
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d001      	beq.n	800ab1e <USBD_StdItfReq+0x26>
 800ab1a:	2b20      	cmp	r3, #32
 800ab1c:	d14e      	bne.n	800abbc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	3b01      	subs	r3, #1
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d840      	bhi.n	800abae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	889b      	ldrh	r3, [r3, #4]
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d836      	bhi.n	800aba4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	889b      	ldrh	r3, [r3, #4]
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f7ff fedb 	bl	800a8fa <USBD_CoreFindIF>
 800ab44:	4603      	mov	r3, r0
 800ab46:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab48:	7bbb      	ldrb	r3, [r7, #14]
 800ab4a:	2bff      	cmp	r3, #255	@ 0xff
 800ab4c:	d01d      	beq.n	800ab8a <USBD_StdItfReq+0x92>
 800ab4e:	7bbb      	ldrb	r3, [r7, #14]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d11a      	bne.n	800ab8a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ab54:	7bba      	ldrb	r2, [r7, #14]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	32ae      	adds	r2, #174	@ 0xae
 800ab5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab5e:	689b      	ldr	r3, [r3, #8]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d00f      	beq.n	800ab84 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ab64:	7bba      	ldrb	r2, [r7, #14]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ab6c:	7bba      	ldrb	r2, [r7, #14]
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	32ae      	adds	r2, #174	@ 0xae
 800ab72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	6839      	ldr	r1, [r7, #0]
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	4798      	blx	r3
 800ab7e:	4603      	mov	r3, r0
 800ab80:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ab82:	e004      	b.n	800ab8e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ab84:	2303      	movs	r3, #3
 800ab86:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ab88:	e001      	b.n	800ab8e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	88db      	ldrh	r3, [r3, #6]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d110      	bne.n	800abb8 <USBD_StdItfReq+0xc0>
 800ab96:	7bfb      	ldrb	r3, [r7, #15]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10d      	bne.n	800abb8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 fdd3 	bl	800b748 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aba2:	e009      	b.n	800abb8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800aba4:	6839      	ldr	r1, [r7, #0]
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 fcf7 	bl	800b59a <USBD_CtlError>
          break;
 800abac:	e004      	b.n	800abb8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800abae:	6839      	ldr	r1, [r7, #0]
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 fcf2 	bl	800b59a <USBD_CtlError>
          break;
 800abb6:	e000      	b.n	800abba <USBD_StdItfReq+0xc2>
          break;
 800abb8:	bf00      	nop
      }
      break;
 800abba:	e004      	b.n	800abc6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800abbc:	6839      	ldr	r1, [r7, #0]
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 fceb 	bl	800b59a <USBD_CtlError>
      break;
 800abc4:	bf00      	nop
  }

  return ret;
 800abc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	889b      	ldrh	r3, [r3, #4]
 800abe2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800abec:	2b40      	cmp	r3, #64	@ 0x40
 800abee:	d007      	beq.n	800ac00 <USBD_StdEPReq+0x30>
 800abf0:	2b40      	cmp	r3, #64	@ 0x40
 800abf2:	f200 817f 	bhi.w	800aef4 <USBD_StdEPReq+0x324>
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d02a      	beq.n	800ac50 <USBD_StdEPReq+0x80>
 800abfa:	2b20      	cmp	r3, #32
 800abfc:	f040 817a 	bne.w	800aef4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ac00:	7bbb      	ldrb	r3, [r7, #14]
 800ac02:	4619      	mov	r1, r3
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f7ff fe85 	bl	800a914 <USBD_CoreFindEP>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac0e:	7b7b      	ldrb	r3, [r7, #13]
 800ac10:	2bff      	cmp	r3, #255	@ 0xff
 800ac12:	f000 8174 	beq.w	800aefe <USBD_StdEPReq+0x32e>
 800ac16:	7b7b      	ldrb	r3, [r7, #13]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f040 8170 	bne.w	800aefe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ac1e:	7b7a      	ldrb	r2, [r7, #13]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ac26:	7b7a      	ldrb	r2, [r7, #13]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	32ae      	adds	r2, #174	@ 0xae
 800ac2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	f000 8163 	beq.w	800aefe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ac38:	7b7a      	ldrb	r2, [r7, #13]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	32ae      	adds	r2, #174	@ 0xae
 800ac3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac42:	689b      	ldr	r3, [r3, #8]
 800ac44:	6839      	ldr	r1, [r7, #0]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	4798      	blx	r3
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ac4e:	e156      	b.n	800aefe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	785b      	ldrb	r3, [r3, #1]
 800ac54:	2b03      	cmp	r3, #3
 800ac56:	d008      	beq.n	800ac6a <USBD_StdEPReq+0x9a>
 800ac58:	2b03      	cmp	r3, #3
 800ac5a:	f300 8145 	bgt.w	800aee8 <USBD_StdEPReq+0x318>
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	f000 809b 	beq.w	800ad9a <USBD_StdEPReq+0x1ca>
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d03c      	beq.n	800ace2 <USBD_StdEPReq+0x112>
 800ac68:	e13e      	b.n	800aee8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	d002      	beq.n	800ac7c <USBD_StdEPReq+0xac>
 800ac76:	2b03      	cmp	r3, #3
 800ac78:	d016      	beq.n	800aca8 <USBD_StdEPReq+0xd8>
 800ac7a:	e02c      	b.n	800acd6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac7c:	7bbb      	ldrb	r3, [r7, #14]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00d      	beq.n	800ac9e <USBD_StdEPReq+0xce>
 800ac82:	7bbb      	ldrb	r3, [r7, #14]
 800ac84:	2b80      	cmp	r3, #128	@ 0x80
 800ac86:	d00a      	beq.n	800ac9e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac88:	7bbb      	ldrb	r3, [r7, #14]
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f001 f96b 	bl	800bf68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac92:	2180      	movs	r1, #128	@ 0x80
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f001 f967 	bl	800bf68 <USBD_LL_StallEP>
 800ac9a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac9c:	e020      	b.n	800ace0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ac9e:	6839      	ldr	r1, [r7, #0]
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 fc7a 	bl	800b59a <USBD_CtlError>
              break;
 800aca6:	e01b      	b.n	800ace0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	885b      	ldrh	r3, [r3, #2]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d10e      	bne.n	800acce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800acb0:	7bbb      	ldrb	r3, [r7, #14]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00b      	beq.n	800acce <USBD_StdEPReq+0xfe>
 800acb6:	7bbb      	ldrb	r3, [r7, #14]
 800acb8:	2b80      	cmp	r3, #128	@ 0x80
 800acba:	d008      	beq.n	800acce <USBD_StdEPReq+0xfe>
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	88db      	ldrh	r3, [r3, #6]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d104      	bne.n	800acce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800acc4:	7bbb      	ldrb	r3, [r7, #14]
 800acc6:	4619      	mov	r1, r3
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f001 f94d 	bl	800bf68 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fd3a 	bl	800b748 <USBD_CtlSendStatus>

              break;
 800acd4:	e004      	b.n	800ace0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800acd6:	6839      	ldr	r1, [r7, #0]
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 fc5e 	bl	800b59a <USBD_CtlError>
              break;
 800acde:	bf00      	nop
          }
          break;
 800ace0:	e107      	b.n	800aef2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	2b02      	cmp	r3, #2
 800acec:	d002      	beq.n	800acf4 <USBD_StdEPReq+0x124>
 800acee:	2b03      	cmp	r3, #3
 800acf0:	d016      	beq.n	800ad20 <USBD_StdEPReq+0x150>
 800acf2:	e04b      	b.n	800ad8c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acf4:	7bbb      	ldrb	r3, [r7, #14]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d00d      	beq.n	800ad16 <USBD_StdEPReq+0x146>
 800acfa:	7bbb      	ldrb	r3, [r7, #14]
 800acfc:	2b80      	cmp	r3, #128	@ 0x80
 800acfe:	d00a      	beq.n	800ad16 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad00:	7bbb      	ldrb	r3, [r7, #14]
 800ad02:	4619      	mov	r1, r3
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f001 f92f 	bl	800bf68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad0a:	2180      	movs	r1, #128	@ 0x80
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f001 f92b 	bl	800bf68 <USBD_LL_StallEP>
 800ad12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ad14:	e040      	b.n	800ad98 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ad16:	6839      	ldr	r1, [r7, #0]
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 fc3e 	bl	800b59a <USBD_CtlError>
              break;
 800ad1e:	e03b      	b.n	800ad98 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	885b      	ldrh	r3, [r3, #2]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d136      	bne.n	800ad96 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ad28:	7bbb      	ldrb	r3, [r7, #14]
 800ad2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d004      	beq.n	800ad3c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ad32:	7bbb      	ldrb	r3, [r7, #14]
 800ad34:	4619      	mov	r1, r3
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f001 f935 	bl	800bfa6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 fd03 	bl	800b748 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ad42:	7bbb      	ldrb	r3, [r7, #14]
 800ad44:	4619      	mov	r1, r3
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f7ff fde4 	bl	800a914 <USBD_CoreFindEP>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad50:	7b7b      	ldrb	r3, [r7, #13]
 800ad52:	2bff      	cmp	r3, #255	@ 0xff
 800ad54:	d01f      	beq.n	800ad96 <USBD_StdEPReq+0x1c6>
 800ad56:	7b7b      	ldrb	r3, [r7, #13]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d11c      	bne.n	800ad96 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ad5c:	7b7a      	ldrb	r2, [r7, #13]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ad64:	7b7a      	ldrb	r2, [r7, #13]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	32ae      	adds	r2, #174	@ 0xae
 800ad6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d010      	beq.n	800ad96 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ad74:	7b7a      	ldrb	r2, [r7, #13]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	32ae      	adds	r2, #174	@ 0xae
 800ad7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	6839      	ldr	r1, [r7, #0]
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	4798      	blx	r3
 800ad86:	4603      	mov	r3, r0
 800ad88:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ad8a:	e004      	b.n	800ad96 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ad8c:	6839      	ldr	r1, [r7, #0]
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f000 fc03 	bl	800b59a <USBD_CtlError>
              break;
 800ad94:	e000      	b.n	800ad98 <USBD_StdEPReq+0x1c8>
              break;
 800ad96:	bf00      	nop
          }
          break;
 800ad98:	e0ab      	b.n	800aef2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	d002      	beq.n	800adac <USBD_StdEPReq+0x1dc>
 800ada6:	2b03      	cmp	r3, #3
 800ada8:	d032      	beq.n	800ae10 <USBD_StdEPReq+0x240>
 800adaa:	e097      	b.n	800aedc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800adac:	7bbb      	ldrb	r3, [r7, #14]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d007      	beq.n	800adc2 <USBD_StdEPReq+0x1f2>
 800adb2:	7bbb      	ldrb	r3, [r7, #14]
 800adb4:	2b80      	cmp	r3, #128	@ 0x80
 800adb6:	d004      	beq.n	800adc2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800adb8:	6839      	ldr	r1, [r7, #0]
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fbed 	bl	800b59a <USBD_CtlError>
                break;
 800adc0:	e091      	b.n	800aee6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800adc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	da0b      	bge.n	800ade2 <USBD_StdEPReq+0x212>
 800adca:	7bbb      	ldrb	r3, [r7, #14]
 800adcc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800add0:	4613      	mov	r3, r2
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	4413      	add	r3, r2
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	3310      	adds	r3, #16
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	4413      	add	r3, r2
 800adde:	3304      	adds	r3, #4
 800ade0:	e00b      	b.n	800adfa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ade2:	7bbb      	ldrb	r3, [r7, #14]
 800ade4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ade8:	4613      	mov	r3, r2
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	4413      	add	r3, r2
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800adf4:	687a      	ldr	r2, [r7, #4]
 800adf6:	4413      	add	r3, r2
 800adf8:	3304      	adds	r3, #4
 800adfa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	2200      	movs	r2, #0
 800ae00:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	2202      	movs	r2, #2
 800ae06:	4619      	mov	r1, r3
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 fc43 	bl	800b694 <USBD_CtlSendData>
              break;
 800ae0e:	e06a      	b.n	800aee6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ae10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	da11      	bge.n	800ae3c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ae18:	7bbb      	ldrb	r3, [r7, #14]
 800ae1a:	f003 020f 	and.w	r2, r3, #15
 800ae1e:	6879      	ldr	r1, [r7, #4]
 800ae20:	4613      	mov	r3, r2
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	4413      	add	r3, r2
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	440b      	add	r3, r1
 800ae2a:	3324      	adds	r3, #36	@ 0x24
 800ae2c:	881b      	ldrh	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d117      	bne.n	800ae62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ae32:	6839      	ldr	r1, [r7, #0]
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 fbb0 	bl	800b59a <USBD_CtlError>
                  break;
 800ae3a:	e054      	b.n	800aee6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ae3c:	7bbb      	ldrb	r3, [r7, #14]
 800ae3e:	f003 020f 	and.w	r2, r3, #15
 800ae42:	6879      	ldr	r1, [r7, #4]
 800ae44:	4613      	mov	r3, r2
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	4413      	add	r3, r2
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	440b      	add	r3, r1
 800ae4e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae52:	881b      	ldrh	r3, [r3, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d104      	bne.n	800ae62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ae58:	6839      	ldr	r1, [r7, #0]
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fb9d 	bl	800b59a <USBD_CtlError>
                  break;
 800ae60:	e041      	b.n	800aee6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	da0b      	bge.n	800ae82 <USBD_StdEPReq+0x2b2>
 800ae6a:	7bbb      	ldrb	r3, [r7, #14]
 800ae6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae70:	4613      	mov	r3, r2
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	4413      	add	r3, r2
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	3310      	adds	r3, #16
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	3304      	adds	r3, #4
 800ae80:	e00b      	b.n	800ae9a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ae82:	7bbb      	ldrb	r3, [r7, #14]
 800ae84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae88:	4613      	mov	r3, r2
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	4413      	add	r3, r2
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	4413      	add	r3, r2
 800ae98:	3304      	adds	r3, #4
 800ae9a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ae9c:	7bbb      	ldrb	r3, [r7, #14]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d002      	beq.n	800aea8 <USBD_StdEPReq+0x2d8>
 800aea2:	7bbb      	ldrb	r3, [r7, #14]
 800aea4:	2b80      	cmp	r3, #128	@ 0x80
 800aea6:	d103      	bne.n	800aeb0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	601a      	str	r2, [r3, #0]
 800aeae:	e00e      	b.n	800aece <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aeb0:	7bbb      	ldrb	r3, [r7, #14]
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f001 f895 	bl	800bfe4 <USBD_LL_IsStallEP>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d003      	beq.n	800aec8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	2201      	movs	r2, #1
 800aec4:	601a      	str	r2, [r3, #0]
 800aec6:	e002      	b.n	800aece <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	2200      	movs	r2, #0
 800aecc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	2202      	movs	r2, #2
 800aed2:	4619      	mov	r1, r3
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 fbdd 	bl	800b694 <USBD_CtlSendData>
              break;
 800aeda:	e004      	b.n	800aee6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800aedc:	6839      	ldr	r1, [r7, #0]
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 fb5b 	bl	800b59a <USBD_CtlError>
              break;
 800aee4:	bf00      	nop
          }
          break;
 800aee6:	e004      	b.n	800aef2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800aee8:	6839      	ldr	r1, [r7, #0]
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 fb55 	bl	800b59a <USBD_CtlError>
          break;
 800aef0:	bf00      	nop
      }
      break;
 800aef2:	e005      	b.n	800af00 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aef4:	6839      	ldr	r1, [r7, #0]
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 fb4f 	bl	800b59a <USBD_CtlError>
      break;
 800aefc:	e000      	b.n	800af00 <USBD_StdEPReq+0x330>
      break;
 800aefe:	bf00      	nop
  }

  return ret;
 800af00:	7bfb      	ldrb	r3, [r7, #15]
}
 800af02:	4618      	mov	r0, r3
 800af04:	3710      	adds	r7, #16
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
	...

0800af0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af16:	2300      	movs	r3, #0
 800af18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800af1a:	2300      	movs	r3, #0
 800af1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800af1e:	2300      	movs	r3, #0
 800af20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	885b      	ldrh	r3, [r3, #2]
 800af26:	0a1b      	lsrs	r3, r3, #8
 800af28:	b29b      	uxth	r3, r3
 800af2a:	3b01      	subs	r3, #1
 800af2c:	2b06      	cmp	r3, #6
 800af2e:	f200 8128 	bhi.w	800b182 <USBD_GetDescriptor+0x276>
 800af32:	a201      	add	r2, pc, #4	@ (adr r2, 800af38 <USBD_GetDescriptor+0x2c>)
 800af34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af38:	0800af55 	.word	0x0800af55
 800af3c:	0800af6d 	.word	0x0800af6d
 800af40:	0800afad 	.word	0x0800afad
 800af44:	0800b183 	.word	0x0800b183
 800af48:	0800b183 	.word	0x0800b183
 800af4c:	0800b123 	.word	0x0800b123
 800af50:	0800b14f 	.word	0x0800b14f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	7c12      	ldrb	r2, [r2, #16]
 800af60:	f107 0108 	add.w	r1, r7, #8
 800af64:	4610      	mov	r0, r2
 800af66:	4798      	blx	r3
 800af68:	60f8      	str	r0, [r7, #12]
      break;
 800af6a:	e112      	b.n	800b192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	7c1b      	ldrb	r3, [r3, #16]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d10d      	bne.n	800af90 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af7c:	f107 0208 	add.w	r2, r7, #8
 800af80:	4610      	mov	r0, r2
 800af82:	4798      	blx	r3
 800af84:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	3301      	adds	r3, #1
 800af8a:	2202      	movs	r2, #2
 800af8c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800af8e:	e100      	b.n	800b192 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af98:	f107 0208 	add.w	r2, r7, #8
 800af9c:	4610      	mov	r0, r2
 800af9e:	4798      	blx	r3
 800afa0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	3301      	adds	r3, #1
 800afa6:	2202      	movs	r2, #2
 800afa8:	701a      	strb	r2, [r3, #0]
      break;
 800afaa:	e0f2      	b.n	800b192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	885b      	ldrh	r3, [r3, #2]
 800afb0:	b2db      	uxtb	r3, r3
 800afb2:	2b05      	cmp	r3, #5
 800afb4:	f200 80ac 	bhi.w	800b110 <USBD_GetDescriptor+0x204>
 800afb8:	a201      	add	r2, pc, #4	@ (adr r2, 800afc0 <USBD_GetDescriptor+0xb4>)
 800afba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afbe:	bf00      	nop
 800afc0:	0800afd9 	.word	0x0800afd9
 800afc4:	0800b00d 	.word	0x0800b00d
 800afc8:	0800b041 	.word	0x0800b041
 800afcc:	0800b075 	.word	0x0800b075
 800afd0:	0800b0a9 	.word	0x0800b0a9
 800afd4:	0800b0dd 	.word	0x0800b0dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00b      	beq.n	800affc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	7c12      	ldrb	r2, [r2, #16]
 800aff0:	f107 0108 	add.w	r1, r7, #8
 800aff4:	4610      	mov	r0, r2
 800aff6:	4798      	blx	r3
 800aff8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800affa:	e091      	b.n	800b120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800affc:	6839      	ldr	r1, [r7, #0]
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 facb 	bl	800b59a <USBD_CtlError>
            err++;
 800b004:	7afb      	ldrb	r3, [r7, #11]
 800b006:	3301      	adds	r3, #1
 800b008:	72fb      	strb	r3, [r7, #11]
          break;
 800b00a:	e089      	b.n	800b120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00b      	beq.n	800b030 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	7c12      	ldrb	r2, [r2, #16]
 800b024:	f107 0108 	add.w	r1, r7, #8
 800b028:	4610      	mov	r0, r2
 800b02a:	4798      	blx	r3
 800b02c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b02e:	e077      	b.n	800b120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b030:	6839      	ldr	r1, [r7, #0]
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 fab1 	bl	800b59a <USBD_CtlError>
            err++;
 800b038:	7afb      	ldrb	r3, [r7, #11]
 800b03a:	3301      	adds	r3, #1
 800b03c:	72fb      	strb	r3, [r7, #11]
          break;
 800b03e:	e06f      	b.n	800b120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d00b      	beq.n	800b064 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	7c12      	ldrb	r2, [r2, #16]
 800b058:	f107 0108 	add.w	r1, r7, #8
 800b05c:	4610      	mov	r0, r2
 800b05e:	4798      	blx	r3
 800b060:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b062:	e05d      	b.n	800b120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b064:	6839      	ldr	r1, [r7, #0]
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 fa97 	bl	800b59a <USBD_CtlError>
            err++;
 800b06c:	7afb      	ldrb	r3, [r7, #11]
 800b06e:	3301      	adds	r3, #1
 800b070:	72fb      	strb	r3, [r7, #11]
          break;
 800b072:	e055      	b.n	800b120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b07a:	691b      	ldr	r3, [r3, #16]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00b      	beq.n	800b098 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b086:	691b      	ldr	r3, [r3, #16]
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	7c12      	ldrb	r2, [r2, #16]
 800b08c:	f107 0108 	add.w	r1, r7, #8
 800b090:	4610      	mov	r0, r2
 800b092:	4798      	blx	r3
 800b094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b096:	e043      	b.n	800b120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b098:	6839      	ldr	r1, [r7, #0]
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 fa7d 	bl	800b59a <USBD_CtlError>
            err++;
 800b0a0:	7afb      	ldrb	r3, [r7, #11]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	72fb      	strb	r3, [r7, #11]
          break;
 800b0a6:	e03b      	b.n	800b120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0ae:	695b      	ldr	r3, [r3, #20]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d00b      	beq.n	800b0cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0ba:	695b      	ldr	r3, [r3, #20]
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	7c12      	ldrb	r2, [r2, #16]
 800b0c0:	f107 0108 	add.w	r1, r7, #8
 800b0c4:	4610      	mov	r0, r2
 800b0c6:	4798      	blx	r3
 800b0c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0ca:	e029      	b.n	800b120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b0cc:	6839      	ldr	r1, [r7, #0]
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 fa63 	bl	800b59a <USBD_CtlError>
            err++;
 800b0d4:	7afb      	ldrb	r3, [r7, #11]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	72fb      	strb	r3, [r7, #11]
          break;
 800b0da:	e021      	b.n	800b120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0e2:	699b      	ldr	r3, [r3, #24]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d00b      	beq.n	800b100 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0ee:	699b      	ldr	r3, [r3, #24]
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	7c12      	ldrb	r2, [r2, #16]
 800b0f4:	f107 0108 	add.w	r1, r7, #8
 800b0f8:	4610      	mov	r0, r2
 800b0fa:	4798      	blx	r3
 800b0fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0fe:	e00f      	b.n	800b120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b100:	6839      	ldr	r1, [r7, #0]
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 fa49 	bl	800b59a <USBD_CtlError>
            err++;
 800b108:	7afb      	ldrb	r3, [r7, #11]
 800b10a:	3301      	adds	r3, #1
 800b10c:	72fb      	strb	r3, [r7, #11]
          break;
 800b10e:	e007      	b.n	800b120 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b110:	6839      	ldr	r1, [r7, #0]
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 fa41 	bl	800b59a <USBD_CtlError>
          err++;
 800b118:	7afb      	ldrb	r3, [r7, #11]
 800b11a:	3301      	adds	r3, #1
 800b11c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b11e:	bf00      	nop
      }
      break;
 800b120:	e037      	b.n	800b192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	7c1b      	ldrb	r3, [r3, #16]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d109      	bne.n	800b13e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b132:	f107 0208 	add.w	r2, r7, #8
 800b136:	4610      	mov	r0, r2
 800b138:	4798      	blx	r3
 800b13a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b13c:	e029      	b.n	800b192 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b13e:	6839      	ldr	r1, [r7, #0]
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 fa2a 	bl	800b59a <USBD_CtlError>
        err++;
 800b146:	7afb      	ldrb	r3, [r7, #11]
 800b148:	3301      	adds	r3, #1
 800b14a:	72fb      	strb	r3, [r7, #11]
      break;
 800b14c:	e021      	b.n	800b192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	7c1b      	ldrb	r3, [r3, #16]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d10d      	bne.n	800b172 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b15c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b15e:	f107 0208 	add.w	r2, r7, #8
 800b162:	4610      	mov	r0, r2
 800b164:	4798      	blx	r3
 800b166:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	3301      	adds	r3, #1
 800b16c:	2207      	movs	r2, #7
 800b16e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b170:	e00f      	b.n	800b192 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b172:	6839      	ldr	r1, [r7, #0]
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 fa10 	bl	800b59a <USBD_CtlError>
        err++;
 800b17a:	7afb      	ldrb	r3, [r7, #11]
 800b17c:	3301      	adds	r3, #1
 800b17e:	72fb      	strb	r3, [r7, #11]
      break;
 800b180:	e007      	b.n	800b192 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b182:	6839      	ldr	r1, [r7, #0]
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 fa08 	bl	800b59a <USBD_CtlError>
      err++;
 800b18a:	7afb      	ldrb	r3, [r7, #11]
 800b18c:	3301      	adds	r3, #1
 800b18e:	72fb      	strb	r3, [r7, #11]
      break;
 800b190:	bf00      	nop
  }

  if (err != 0U)
 800b192:	7afb      	ldrb	r3, [r7, #11]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d11e      	bne.n	800b1d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	88db      	ldrh	r3, [r3, #6]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d016      	beq.n	800b1ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b1a0:	893b      	ldrh	r3, [r7, #8]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d00e      	beq.n	800b1c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	88da      	ldrh	r2, [r3, #6]
 800b1aa:	893b      	ldrh	r3, [r7, #8]
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	bf28      	it	cs
 800b1b0:	4613      	movcs	r3, r2
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b1b6:	893b      	ldrh	r3, [r7, #8]
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	68f9      	ldr	r1, [r7, #12]
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 fa69 	bl	800b694 <USBD_CtlSendData>
 800b1c2:	e009      	b.n	800b1d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b1c4:	6839      	ldr	r1, [r7, #0]
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 f9e7 	bl	800b59a <USBD_CtlError>
 800b1cc:	e004      	b.n	800b1d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 faba 	bl	800b748 <USBD_CtlSendStatus>
 800b1d4:	e000      	b.n	800b1d8 <USBD_GetDescriptor+0x2cc>
    return;
 800b1d6:	bf00      	nop
  }
}
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop

0800b1e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	889b      	ldrh	r3, [r3, #4]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d131      	bne.n	800b256 <USBD_SetAddress+0x76>
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	88db      	ldrh	r3, [r3, #6]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d12d      	bne.n	800b256 <USBD_SetAddress+0x76>
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	885b      	ldrh	r3, [r3, #2]
 800b1fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800b200:	d829      	bhi.n	800b256 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	885b      	ldrh	r3, [r3, #2]
 800b206:	b2db      	uxtb	r3, r3
 800b208:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b20c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b214:	b2db      	uxtb	r3, r3
 800b216:	2b03      	cmp	r3, #3
 800b218:	d104      	bne.n	800b224 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b21a:	6839      	ldr	r1, [r7, #0]
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 f9bc 	bl	800b59a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b222:	e01d      	b.n	800b260 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	7bfa      	ldrb	r2, [r7, #15]
 800b228:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b22c:	7bfb      	ldrb	r3, [r7, #15]
 800b22e:	4619      	mov	r1, r3
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 ff03 	bl	800c03c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f000 fa86 	bl	800b748 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b23c:	7bfb      	ldrb	r3, [r7, #15]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d004      	beq.n	800b24c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2202      	movs	r2, #2
 800b246:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b24a:	e009      	b.n	800b260 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2201      	movs	r2, #1
 800b250:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b254:	e004      	b.n	800b260 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b256:	6839      	ldr	r1, [r7, #0]
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 f99e 	bl	800b59a <USBD_CtlError>
  }
}
 800b25e:	bf00      	nop
 800b260:	bf00      	nop
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}

0800b268 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b084      	sub	sp, #16
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b272:	2300      	movs	r3, #0
 800b274:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	885b      	ldrh	r3, [r3, #2]
 800b27a:	b2da      	uxtb	r2, r3
 800b27c:	4b4e      	ldr	r3, [pc, #312]	@ (800b3b8 <USBD_SetConfig+0x150>)
 800b27e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b280:	4b4d      	ldr	r3, [pc, #308]	@ (800b3b8 <USBD_SetConfig+0x150>)
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	2b01      	cmp	r3, #1
 800b286:	d905      	bls.n	800b294 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b288:	6839      	ldr	r1, [r7, #0]
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f985 	bl	800b59a <USBD_CtlError>
    return USBD_FAIL;
 800b290:	2303      	movs	r3, #3
 800b292:	e08c      	b.n	800b3ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	2b02      	cmp	r3, #2
 800b29e:	d002      	beq.n	800b2a6 <USBD_SetConfig+0x3e>
 800b2a0:	2b03      	cmp	r3, #3
 800b2a2:	d029      	beq.n	800b2f8 <USBD_SetConfig+0x90>
 800b2a4:	e075      	b.n	800b392 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b2a6:	4b44      	ldr	r3, [pc, #272]	@ (800b3b8 <USBD_SetConfig+0x150>)
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d020      	beq.n	800b2f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b2ae:	4b42      	ldr	r3, [pc, #264]	@ (800b3b8 <USBD_SetConfig+0x150>)
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b2b8:	4b3f      	ldr	r3, [pc, #252]	@ (800b3b8 <USBD_SetConfig+0x150>)
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	4619      	mov	r1, r3
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f7fe ffe3 	bl	800a28a <USBD_SetClassConfig>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b2c8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d008      	beq.n	800b2e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b2ce:	6839      	ldr	r1, [r7, #0]
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 f962 	bl	800b59a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2202      	movs	r2, #2
 800b2da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b2de:	e065      	b.n	800b3ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 fa31 	bl	800b748 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2203      	movs	r2, #3
 800b2ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b2ee:	e05d      	b.n	800b3ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 fa29 	bl	800b748 <USBD_CtlSendStatus>
      break;
 800b2f6:	e059      	b.n	800b3ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b2f8:	4b2f      	ldr	r3, [pc, #188]	@ (800b3b8 <USBD_SetConfig+0x150>)
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d112      	bne.n	800b326 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2202      	movs	r2, #2
 800b304:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b308:	4b2b      	ldr	r3, [pc, #172]	@ (800b3b8 <USBD_SetConfig+0x150>)
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	461a      	mov	r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b312:	4b29      	ldr	r3, [pc, #164]	@ (800b3b8 <USBD_SetConfig+0x150>)
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	4619      	mov	r1, r3
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f7fe ffd2 	bl	800a2c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 fa12 	bl	800b748 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b324:	e042      	b.n	800b3ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b326:	4b24      	ldr	r3, [pc, #144]	@ (800b3b8 <USBD_SetConfig+0x150>)
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	461a      	mov	r2, r3
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	429a      	cmp	r2, r3
 800b332:	d02a      	beq.n	800b38a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	4619      	mov	r1, r3
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f7fe ffc0 	bl	800a2c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b342:	4b1d      	ldr	r3, [pc, #116]	@ (800b3b8 <USBD_SetConfig+0x150>)
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	461a      	mov	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b34c:	4b1a      	ldr	r3, [pc, #104]	@ (800b3b8 <USBD_SetConfig+0x150>)
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	4619      	mov	r1, r3
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f7fe ff99 	bl	800a28a <USBD_SetClassConfig>
 800b358:	4603      	mov	r3, r0
 800b35a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b35c:	7bfb      	ldrb	r3, [r7, #15]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00f      	beq.n	800b382 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b362:	6839      	ldr	r1, [r7, #0]
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 f918 	bl	800b59a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	4619      	mov	r1, r3
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f7fe ffa5 	bl	800a2c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2202      	movs	r2, #2
 800b37c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b380:	e014      	b.n	800b3ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 f9e0 	bl	800b748 <USBD_CtlSendStatus>
      break;
 800b388:	e010      	b.n	800b3ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 f9dc 	bl	800b748 <USBD_CtlSendStatus>
      break;
 800b390:	e00c      	b.n	800b3ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b392:	6839      	ldr	r1, [r7, #0]
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f000 f900 	bl	800b59a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b39a:	4b07      	ldr	r3, [pc, #28]	@ (800b3b8 <USBD_SetConfig+0x150>)
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	4619      	mov	r1, r3
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f7fe ff8e 	bl	800a2c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b3a6:	2303      	movs	r3, #3
 800b3a8:	73fb      	strb	r3, [r7, #15]
      break;
 800b3aa:	bf00      	nop
  }

  return ret;
 800b3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	20000841 	.word	0x20000841

0800b3bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	88db      	ldrh	r3, [r3, #6]
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d004      	beq.n	800b3d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b3ce:	6839      	ldr	r1, [r7, #0]
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 f8e2 	bl	800b59a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b3d6:	e023      	b.n	800b420 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	2b02      	cmp	r3, #2
 800b3e2:	dc02      	bgt.n	800b3ea <USBD_GetConfig+0x2e>
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	dc03      	bgt.n	800b3f0 <USBD_GetConfig+0x34>
 800b3e8:	e015      	b.n	800b416 <USBD_GetConfig+0x5a>
 800b3ea:	2b03      	cmp	r3, #3
 800b3ec:	d00b      	beq.n	800b406 <USBD_GetConfig+0x4a>
 800b3ee:	e012      	b.n	800b416 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	3308      	adds	r3, #8
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 f948 	bl	800b694 <USBD_CtlSendData>
        break;
 800b404:	e00c      	b.n	800b420 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	3304      	adds	r3, #4
 800b40a:	2201      	movs	r2, #1
 800b40c:	4619      	mov	r1, r3
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 f940 	bl	800b694 <USBD_CtlSendData>
        break;
 800b414:	e004      	b.n	800b420 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b416:	6839      	ldr	r1, [r7, #0]
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 f8be 	bl	800b59a <USBD_CtlError>
        break;
 800b41e:	bf00      	nop
}
 800b420:	bf00      	nop
 800b422:	3708      	adds	r7, #8
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b082      	sub	sp, #8
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	3b01      	subs	r3, #1
 800b43c:	2b02      	cmp	r3, #2
 800b43e:	d81e      	bhi.n	800b47e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	88db      	ldrh	r3, [r3, #6]
 800b444:	2b02      	cmp	r3, #2
 800b446:	d004      	beq.n	800b452 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b448:	6839      	ldr	r1, [r7, #0]
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f8a5 	bl	800b59a <USBD_CtlError>
        break;
 800b450:	e01a      	b.n	800b488 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2201      	movs	r2, #1
 800b456:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d005      	beq.n	800b46e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	f043 0202 	orr.w	r2, r3, #2
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	330c      	adds	r3, #12
 800b472:	2202      	movs	r2, #2
 800b474:	4619      	mov	r1, r3
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f000 f90c 	bl	800b694 <USBD_CtlSendData>
      break;
 800b47c:	e004      	b.n	800b488 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b47e:	6839      	ldr	r1, [r7, #0]
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 f88a 	bl	800b59a <USBD_CtlError>
      break;
 800b486:	bf00      	nop
  }
}
 800b488:	bf00      	nop
 800b48a:	3708      	adds	r7, #8
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	885b      	ldrh	r3, [r3, #2]
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d107      	bne.n	800b4b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 f94c 	bl	800b748 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b4b0:	e013      	b.n	800b4da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	885b      	ldrh	r3, [r3, #2]
 800b4b6:	2b02      	cmp	r3, #2
 800b4b8:	d10b      	bne.n	800b4d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	889b      	ldrh	r3, [r3, #4]
 800b4be:	0a1b      	lsrs	r3, r3, #8
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	b2da      	uxtb	r2, r3
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 f93c 	bl	800b748 <USBD_CtlSendStatus>
}
 800b4d0:	e003      	b.n	800b4da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b4d2:	6839      	ldr	r1, [r7, #0]
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 f860 	bl	800b59a <USBD_CtlError>
}
 800b4da:	bf00      	nop
 800b4dc:	3708      	adds	r7, #8
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}

0800b4e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4e2:	b580      	push	{r7, lr}
 800b4e4:	b082      	sub	sp, #8
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
 800b4ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	3b01      	subs	r3, #1
 800b4f6:	2b02      	cmp	r3, #2
 800b4f8:	d80b      	bhi.n	800b512 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	885b      	ldrh	r3, [r3, #2]
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d10c      	bne.n	800b51c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2200      	movs	r2, #0
 800b506:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 f91c 	bl	800b748 <USBD_CtlSendStatus>
      }
      break;
 800b510:	e004      	b.n	800b51c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b512:	6839      	ldr	r1, [r7, #0]
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 f840 	bl	800b59a <USBD_CtlError>
      break;
 800b51a:	e000      	b.n	800b51e <USBD_ClrFeature+0x3c>
      break;
 800b51c:	bf00      	nop
  }
}
 800b51e:	bf00      	nop
 800b520:	3708      	adds	r7, #8
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}

0800b526 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b526:	b580      	push	{r7, lr}
 800b528:	b084      	sub	sp, #16
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
 800b52e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	781a      	ldrb	r2, [r3, #0]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	3301      	adds	r3, #1
 800b540:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	781a      	ldrb	r2, [r3, #0]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	3301      	adds	r3, #1
 800b54e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	f7ff fa40 	bl	800a9d6 <SWAPBYTE>
 800b556:	4603      	mov	r3, r0
 800b558:	461a      	mov	r2, r3
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	3301      	adds	r3, #1
 800b562:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	3301      	adds	r3, #1
 800b568:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	f7ff fa33 	bl	800a9d6 <SWAPBYTE>
 800b570:	4603      	mov	r3, r0
 800b572:	461a      	mov	r2, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	3301      	adds	r3, #1
 800b57c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	3301      	adds	r3, #1
 800b582:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b584:	68f8      	ldr	r0, [r7, #12]
 800b586:	f7ff fa26 	bl	800a9d6 <SWAPBYTE>
 800b58a:	4603      	mov	r3, r0
 800b58c:	461a      	mov	r2, r3
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	80da      	strh	r2, [r3, #6]
}
 800b592:	bf00      	nop
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}

0800b59a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b082      	sub	sp, #8
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
 800b5a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5a4:	2180      	movs	r1, #128	@ 0x80
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 fcde 	bl	800bf68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b5ac:	2100      	movs	r1, #0
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 fcda 	bl	800bf68 <USBD_LL_StallEP>
}
 800b5b4:	bf00      	nop
 800b5b6:	3708      	adds	r7, #8
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b086      	sub	sp, #24
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	60b9      	str	r1, [r7, #8]
 800b5c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d042      	beq.n	800b658 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b5d6:	6938      	ldr	r0, [r7, #16]
 800b5d8:	f000 f842 	bl	800b660 <USBD_GetLen>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	3301      	adds	r3, #1
 800b5e0:	005b      	lsls	r3, r3, #1
 800b5e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5e6:	d808      	bhi.n	800b5fa <USBD_GetString+0x3e>
 800b5e8:	6938      	ldr	r0, [r7, #16]
 800b5ea:	f000 f839 	bl	800b660 <USBD_GetLen>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	005b      	lsls	r3, r3, #1
 800b5f6:	b29a      	uxth	r2, r3
 800b5f8:	e001      	b.n	800b5fe <USBD_GetString+0x42>
 800b5fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b602:	7dfb      	ldrb	r3, [r7, #23]
 800b604:	68ba      	ldr	r2, [r7, #8]
 800b606:	4413      	add	r3, r2
 800b608:	687a      	ldr	r2, [r7, #4]
 800b60a:	7812      	ldrb	r2, [r2, #0]
 800b60c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b60e:	7dfb      	ldrb	r3, [r7, #23]
 800b610:	3301      	adds	r3, #1
 800b612:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b614:	7dfb      	ldrb	r3, [r7, #23]
 800b616:	68ba      	ldr	r2, [r7, #8]
 800b618:	4413      	add	r3, r2
 800b61a:	2203      	movs	r2, #3
 800b61c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b61e:	7dfb      	ldrb	r3, [r7, #23]
 800b620:	3301      	adds	r3, #1
 800b622:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b624:	e013      	b.n	800b64e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b626:	7dfb      	ldrb	r3, [r7, #23]
 800b628:	68ba      	ldr	r2, [r7, #8]
 800b62a:	4413      	add	r3, r2
 800b62c:	693a      	ldr	r2, [r7, #16]
 800b62e:	7812      	ldrb	r2, [r2, #0]
 800b630:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	3301      	adds	r3, #1
 800b636:	613b      	str	r3, [r7, #16]
    idx++;
 800b638:	7dfb      	ldrb	r3, [r7, #23]
 800b63a:	3301      	adds	r3, #1
 800b63c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b63e:	7dfb      	ldrb	r3, [r7, #23]
 800b640:	68ba      	ldr	r2, [r7, #8]
 800b642:	4413      	add	r3, r2
 800b644:	2200      	movs	r2, #0
 800b646:	701a      	strb	r2, [r3, #0]
    idx++;
 800b648:	7dfb      	ldrb	r3, [r7, #23]
 800b64a:	3301      	adds	r3, #1
 800b64c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	781b      	ldrb	r3, [r3, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d1e7      	bne.n	800b626 <USBD_GetString+0x6a>
 800b656:	e000      	b.n	800b65a <USBD_GetString+0x9e>
    return;
 800b658:	bf00      	nop
  }
}
 800b65a:	3718      	adds	r7, #24
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b660:	b480      	push	{r7}
 800b662:	b085      	sub	sp, #20
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b668:	2300      	movs	r3, #0
 800b66a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b670:	e005      	b.n	800b67e <USBD_GetLen+0x1e>
  {
    len++;
 800b672:	7bfb      	ldrb	r3, [r7, #15]
 800b674:	3301      	adds	r3, #1
 800b676:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	3301      	adds	r3, #1
 800b67c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d1f5      	bne.n	800b672 <USBD_GetLen+0x12>
  }

  return len;
 800b686:	7bfb      	ldrb	r3, [r7, #15]
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3714      	adds	r7, #20
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2202      	movs	r2, #2
 800b6a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	687a      	ldr	r2, [r7, #4]
 800b6ac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	68ba      	ldr	r2, [r7, #8]
 800b6b8:	2100      	movs	r1, #0
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f000 fcdd 	bl	800c07a <USBD_LL_Transmit>

  return USBD_OK;
 800b6c0:	2300      	movs	r3, #0
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3710      	adds	r7, #16
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b084      	sub	sp, #16
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	60f8      	str	r0, [r7, #12]
 800b6d2:	60b9      	str	r1, [r7, #8]
 800b6d4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	68ba      	ldr	r2, [r7, #8]
 800b6da:	2100      	movs	r1, #0
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f000 fccc 	bl	800c07a <USBD_LL_Transmit>

  return USBD_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3710      	adds	r7, #16
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2203      	movs	r2, #3
 800b6fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	687a      	ldr	r2, [r7, #4]
 800b704:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	68ba      	ldr	r2, [r7, #8]
 800b714:	2100      	movs	r1, #0
 800b716:	68f8      	ldr	r0, [r7, #12]
 800b718:	f000 fcd0 	bl	800c0bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b71c:	2300      	movs	r3, #0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3710      	adds	r7, #16
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}

0800b726 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b726:	b580      	push	{r7, lr}
 800b728:	b084      	sub	sp, #16
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	60f8      	str	r0, [r7, #12]
 800b72e:	60b9      	str	r1, [r7, #8]
 800b730:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	68ba      	ldr	r2, [r7, #8]
 800b736:	2100      	movs	r1, #0
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f000 fcbf 	bl	800c0bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3710      	adds	r7, #16
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2204      	movs	r2, #4
 800b754:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b758:	2300      	movs	r3, #0
 800b75a:	2200      	movs	r2, #0
 800b75c:	2100      	movs	r1, #0
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 fc8b 	bl	800c07a <USBD_LL_Transmit>

  return USBD_OK;
 800b764:	2300      	movs	r3, #0
}
 800b766:	4618      	mov	r0, r3
 800b768:	3708      	adds	r7, #8
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}

0800b76e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b76e:	b580      	push	{r7, lr}
 800b770:	b082      	sub	sp, #8
 800b772:	af00      	add	r7, sp, #0
 800b774:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2205      	movs	r2, #5
 800b77a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b77e:	2300      	movs	r3, #0
 800b780:	2200      	movs	r2, #0
 800b782:	2100      	movs	r1, #0
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 fc99 	bl	800c0bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b798:	2200      	movs	r2, #0
 800b79a:	4912      	ldr	r1, [pc, #72]	@ (800b7e4 <MX_USB_DEVICE_Init+0x50>)
 800b79c:	4812      	ldr	r0, [pc, #72]	@ (800b7e8 <MX_USB_DEVICE_Init+0x54>)
 800b79e:	f7fe fcf7 	bl	800a190 <USBD_Init>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d001      	beq.n	800b7ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b7a8:	f7f5 ff2e 	bl	8001608 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b7ac:	490f      	ldr	r1, [pc, #60]	@ (800b7ec <MX_USB_DEVICE_Init+0x58>)
 800b7ae:	480e      	ldr	r0, [pc, #56]	@ (800b7e8 <MX_USB_DEVICE_Init+0x54>)
 800b7b0:	f7fe fd1e 	bl	800a1f0 <USBD_RegisterClass>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d001      	beq.n	800b7be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b7ba:	f7f5 ff25 	bl	8001608 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b7be:	490c      	ldr	r1, [pc, #48]	@ (800b7f0 <MX_USB_DEVICE_Init+0x5c>)
 800b7c0:	4809      	ldr	r0, [pc, #36]	@ (800b7e8 <MX_USB_DEVICE_Init+0x54>)
 800b7c2:	f7fe fc55 	bl	800a070 <USBD_CDC_RegisterInterface>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d001      	beq.n	800b7d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b7cc:	f7f5 ff1c 	bl	8001608 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b7d0:	4805      	ldr	r0, [pc, #20]	@ (800b7e8 <MX_USB_DEVICE_Init+0x54>)
 800b7d2:	f7fe fd43 	bl	800a25c <USBD_Start>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d001      	beq.n	800b7e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b7dc:	f7f5 ff14 	bl	8001608 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b7e0:	bf00      	nop
 800b7e2:	bd80      	pop	{r7, pc}
 800b7e4:	200000c0 	.word	0x200000c0
 800b7e8:	20000844 	.word	0x20000844
 800b7ec:	2000002c 	.word	0x2000002c
 800b7f0:	200000ac 	.word	0x200000ac

0800b7f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	4905      	ldr	r1, [pc, #20]	@ (800b810 <CDC_Init_FS+0x1c>)
 800b7fc:	4805      	ldr	r0, [pc, #20]	@ (800b814 <CDC_Init_FS+0x20>)
 800b7fe:	f7fe fc51 	bl	800a0a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b802:	4905      	ldr	r1, [pc, #20]	@ (800b818 <CDC_Init_FS+0x24>)
 800b804:	4803      	ldr	r0, [pc, #12]	@ (800b814 <CDC_Init_FS+0x20>)
 800b806:	f7fe fc6f 	bl	800a0e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b80a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	20001324 	.word	0x20001324
 800b814:	20000844 	.word	0x20000844
 800b818:	20000b24 	.word	0x20000b24

0800b81c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b81c:	b480      	push	{r7}
 800b81e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b820:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b822:	4618      	mov	r0, r3
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b083      	sub	sp, #12
 800b830:	af00      	add	r7, sp, #0
 800b832:	4603      	mov	r3, r0
 800b834:	6039      	str	r1, [r7, #0]
 800b836:	71fb      	strb	r3, [r7, #7]
 800b838:	4613      	mov	r3, r2
 800b83a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b83c:	79fb      	ldrb	r3, [r7, #7]
 800b83e:	2b23      	cmp	r3, #35	@ 0x23
 800b840:	d84a      	bhi.n	800b8d8 <CDC_Control_FS+0xac>
 800b842:	a201      	add	r2, pc, #4	@ (adr r2, 800b848 <CDC_Control_FS+0x1c>)
 800b844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b848:	0800b8d9 	.word	0x0800b8d9
 800b84c:	0800b8d9 	.word	0x0800b8d9
 800b850:	0800b8d9 	.word	0x0800b8d9
 800b854:	0800b8d9 	.word	0x0800b8d9
 800b858:	0800b8d9 	.word	0x0800b8d9
 800b85c:	0800b8d9 	.word	0x0800b8d9
 800b860:	0800b8d9 	.word	0x0800b8d9
 800b864:	0800b8d9 	.word	0x0800b8d9
 800b868:	0800b8d9 	.word	0x0800b8d9
 800b86c:	0800b8d9 	.word	0x0800b8d9
 800b870:	0800b8d9 	.word	0x0800b8d9
 800b874:	0800b8d9 	.word	0x0800b8d9
 800b878:	0800b8d9 	.word	0x0800b8d9
 800b87c:	0800b8d9 	.word	0x0800b8d9
 800b880:	0800b8d9 	.word	0x0800b8d9
 800b884:	0800b8d9 	.word	0x0800b8d9
 800b888:	0800b8d9 	.word	0x0800b8d9
 800b88c:	0800b8d9 	.word	0x0800b8d9
 800b890:	0800b8d9 	.word	0x0800b8d9
 800b894:	0800b8d9 	.word	0x0800b8d9
 800b898:	0800b8d9 	.word	0x0800b8d9
 800b89c:	0800b8d9 	.word	0x0800b8d9
 800b8a0:	0800b8d9 	.word	0x0800b8d9
 800b8a4:	0800b8d9 	.word	0x0800b8d9
 800b8a8:	0800b8d9 	.word	0x0800b8d9
 800b8ac:	0800b8d9 	.word	0x0800b8d9
 800b8b0:	0800b8d9 	.word	0x0800b8d9
 800b8b4:	0800b8d9 	.word	0x0800b8d9
 800b8b8:	0800b8d9 	.word	0x0800b8d9
 800b8bc:	0800b8d9 	.word	0x0800b8d9
 800b8c0:	0800b8d9 	.word	0x0800b8d9
 800b8c4:	0800b8d9 	.word	0x0800b8d9
 800b8c8:	0800b8d9 	.word	0x0800b8d9
 800b8cc:	0800b8d9 	.word	0x0800b8d9
 800b8d0:	0800b8d9 	.word	0x0800b8d9
 800b8d4:	0800b8d9 	.word	0x0800b8d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b8d8:	bf00      	nop
  }

  return (USBD_OK);
 800b8da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b8f2:	6879      	ldr	r1, [r7, #4]
 800b8f4:	480e      	ldr	r0, [pc, #56]	@ (800b930 <CDC_Receive_FS+0x48>)
 800b8f6:	f7fe fbf7 	bl	800a0e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b8fa:	480d      	ldr	r0, [pc, #52]	@ (800b930 <CDC_Receive_FS+0x48>)
 800b8fc:	f7fe fc12 	bl	800a124 <USBD_CDC_ReceivePacket>

  //https://controllerstech.com/send-and-receive-data-to-pc-without-uart-stm32-usb-com/

  uint8_t len = (uint8_t) *Len;
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	73fb      	strb	r3, [r7, #15]

    if(len == ROS_COMM_RX_SIZE){
 800b906:	7bfb      	ldrb	r3, [r7, #15]
 800b908:	2b0d      	cmp	r3, #13
 800b90a:	d105      	bne.n	800b918 <CDC_Receive_FS+0x30>
	  memcpy((uint8_t *)&rbc_Packet_t, Buf, len);  // copy the data to the buffer
 800b90c:	7bfb      	ldrb	r3, [r7, #15]
 800b90e:	461a      	mov	r2, r3
 800b910:	6879      	ldr	r1, [r7, #4]
 800b912:	4808      	ldr	r0, [pc, #32]	@ (800b934 <CDC_Receive_FS+0x4c>)
 800b914:	f000 fc76 	bl	800c204 <memcpy>
    }

    rx_flag = 1;
 800b918:	4b07      	ldr	r3, [pc, #28]	@ (800b938 <CDC_Receive_FS+0x50>)
 800b91a:	2201      	movs	r2, #1
 800b91c:	701a      	strb	r2, [r3, #0]
    tx_flag = 0;
 800b91e:	4b07      	ldr	r3, [pc, #28]	@ (800b93c <CDC_Receive_FS+0x54>)
 800b920:	2200      	movs	r2, #0
 800b922:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800b924:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b926:	4618      	mov	r0, r3
 800b928:	3710      	adds	r7, #16
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	20000844 	.word	0x20000844
 800b934:	20000814 	.word	0x20000814
 800b938:	20000b20 	.word	0x20000b20
 800b93c:	200000aa 	.word	0x200000aa

0800b940 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b940:	b480      	push	{r7}
 800b942:	b087      	sub	sp, #28
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	4613      	mov	r3, r2
 800b94c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b94e:	2300      	movs	r3, #0
 800b950:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b952:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b956:	4618      	mov	r0, r3
 800b958:	371c      	adds	r7, #28
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr
	...

0800b964 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b964:	b480      	push	{r7}
 800b966:	b083      	sub	sp, #12
 800b968:	af00      	add	r7, sp, #0
 800b96a:	4603      	mov	r3, r0
 800b96c:	6039      	str	r1, [r7, #0]
 800b96e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	2212      	movs	r2, #18
 800b974:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b976:	4b03      	ldr	r3, [pc, #12]	@ (800b984 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b978:	4618      	mov	r0, r3
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr
 800b984:	200000dc 	.word	0x200000dc

0800b988 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	4603      	mov	r3, r0
 800b990:	6039      	str	r1, [r7, #0]
 800b992:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	2204      	movs	r2, #4
 800b998:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b99a:	4b03      	ldr	r3, [pc, #12]	@ (800b9a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	370c      	adds	r7, #12
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr
 800b9a8:	200000f0 	.word	0x200000f0

0800b9ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	6039      	str	r1, [r7, #0]
 800b9b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b9b8:	79fb      	ldrb	r3, [r7, #7]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d105      	bne.n	800b9ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b9be:	683a      	ldr	r2, [r7, #0]
 800b9c0:	4907      	ldr	r1, [pc, #28]	@ (800b9e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b9c2:	4808      	ldr	r0, [pc, #32]	@ (800b9e4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b9c4:	f7ff fdfa 	bl	800b5bc <USBD_GetString>
 800b9c8:	e004      	b.n	800b9d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b9ca:	683a      	ldr	r2, [r7, #0]
 800b9cc:	4904      	ldr	r1, [pc, #16]	@ (800b9e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b9ce:	4805      	ldr	r0, [pc, #20]	@ (800b9e4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b9d0:	f7ff fdf4 	bl	800b5bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9d4:	4b02      	ldr	r3, [pc, #8]	@ (800b9e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3708      	adds	r7, #8
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
 800b9de:	bf00      	nop
 800b9e0:	20001b24 	.word	0x20001b24
 800b9e4:	0800c278 	.word	0x0800c278

0800b9e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	6039      	str	r1, [r7, #0]
 800b9f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b9f4:	683a      	ldr	r2, [r7, #0]
 800b9f6:	4904      	ldr	r1, [pc, #16]	@ (800ba08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b9f8:	4804      	ldr	r0, [pc, #16]	@ (800ba0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b9fa:	f7ff fddf 	bl	800b5bc <USBD_GetString>
  return USBD_StrDesc;
 800b9fe:	4b02      	ldr	r3, [pc, #8]	@ (800ba08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3708      	adds	r7, #8
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	20001b24 	.word	0x20001b24
 800ba0c:	0800c290 	.word	0x0800c290

0800ba10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	4603      	mov	r3, r0
 800ba18:	6039      	str	r1, [r7, #0]
 800ba1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	221a      	movs	r2, #26
 800ba20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ba22:	f000 f843 	bl	800baac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ba26:	4b02      	ldr	r3, [pc, #8]	@ (800ba30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3708      	adds	r7, #8
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	200000f4 	.word	0x200000f4

0800ba34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	6039      	str	r1, [r7, #0]
 800ba3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ba40:	79fb      	ldrb	r3, [r7, #7]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d105      	bne.n	800ba52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba46:	683a      	ldr	r2, [r7, #0]
 800ba48:	4907      	ldr	r1, [pc, #28]	@ (800ba68 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba4a:	4808      	ldr	r0, [pc, #32]	@ (800ba6c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ba4c:	f7ff fdb6 	bl	800b5bc <USBD_GetString>
 800ba50:	e004      	b.n	800ba5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba52:	683a      	ldr	r2, [r7, #0]
 800ba54:	4904      	ldr	r1, [pc, #16]	@ (800ba68 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba56:	4805      	ldr	r0, [pc, #20]	@ (800ba6c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ba58:	f7ff fdb0 	bl	800b5bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba5c:	4b02      	ldr	r3, [pc, #8]	@ (800ba68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3708      	adds	r7, #8
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}
 800ba66:	bf00      	nop
 800ba68:	20001b24 	.word	0x20001b24
 800ba6c:	0800c2a4 	.word	0x0800c2a4

0800ba70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	4603      	mov	r3, r0
 800ba78:	6039      	str	r1, [r7, #0]
 800ba7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba7c:	79fb      	ldrb	r3, [r7, #7]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d105      	bne.n	800ba8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ba82:	683a      	ldr	r2, [r7, #0]
 800ba84:	4907      	ldr	r1, [pc, #28]	@ (800baa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ba86:	4808      	ldr	r0, [pc, #32]	@ (800baa8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ba88:	f7ff fd98 	bl	800b5bc <USBD_GetString>
 800ba8c:	e004      	b.n	800ba98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ba8e:	683a      	ldr	r2, [r7, #0]
 800ba90:	4904      	ldr	r1, [pc, #16]	@ (800baa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ba92:	4805      	ldr	r0, [pc, #20]	@ (800baa8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ba94:	f7ff fd92 	bl	800b5bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba98:	4b02      	ldr	r3, [pc, #8]	@ (800baa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3708      	adds	r7, #8
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	20001b24 	.word	0x20001b24
 800baa8:	0800c2b0 	.word	0x0800c2b0

0800baac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bab2:	4b0f      	ldr	r3, [pc, #60]	@ (800baf0 <Get_SerialNum+0x44>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bab8:	4b0e      	ldr	r3, [pc, #56]	@ (800baf4 <Get_SerialNum+0x48>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800babe:	4b0e      	ldr	r3, [pc, #56]	@ (800baf8 <Get_SerialNum+0x4c>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bac4:	68fa      	ldr	r2, [r7, #12]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	4413      	add	r3, r2
 800baca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d009      	beq.n	800bae6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bad2:	2208      	movs	r2, #8
 800bad4:	4909      	ldr	r1, [pc, #36]	@ (800bafc <Get_SerialNum+0x50>)
 800bad6:	68f8      	ldr	r0, [r7, #12]
 800bad8:	f000 f814 	bl	800bb04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800badc:	2204      	movs	r2, #4
 800bade:	4908      	ldr	r1, [pc, #32]	@ (800bb00 <Get_SerialNum+0x54>)
 800bae0:	68b8      	ldr	r0, [r7, #8]
 800bae2:	f000 f80f 	bl	800bb04 <IntToUnicode>
  }
}
 800bae6:	bf00      	nop
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	1fff7a10 	.word	0x1fff7a10
 800baf4:	1fff7a14 	.word	0x1fff7a14
 800baf8:	1fff7a18 	.word	0x1fff7a18
 800bafc:	200000f6 	.word	0x200000f6
 800bb00:	20000106 	.word	0x20000106

0800bb04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b087      	sub	sp, #28
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	4613      	mov	r3, r2
 800bb10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bb12:	2300      	movs	r3, #0
 800bb14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bb16:	2300      	movs	r3, #0
 800bb18:	75fb      	strb	r3, [r7, #23]
 800bb1a:	e027      	b.n	800bb6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	0f1b      	lsrs	r3, r3, #28
 800bb20:	2b09      	cmp	r3, #9
 800bb22:	d80b      	bhi.n	800bb3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	0f1b      	lsrs	r3, r3, #28
 800bb28:	b2da      	uxtb	r2, r3
 800bb2a:	7dfb      	ldrb	r3, [r7, #23]
 800bb2c:	005b      	lsls	r3, r3, #1
 800bb2e:	4619      	mov	r1, r3
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	440b      	add	r3, r1
 800bb34:	3230      	adds	r2, #48	@ 0x30
 800bb36:	b2d2      	uxtb	r2, r2
 800bb38:	701a      	strb	r2, [r3, #0]
 800bb3a:	e00a      	b.n	800bb52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	0f1b      	lsrs	r3, r3, #28
 800bb40:	b2da      	uxtb	r2, r3
 800bb42:	7dfb      	ldrb	r3, [r7, #23]
 800bb44:	005b      	lsls	r3, r3, #1
 800bb46:	4619      	mov	r1, r3
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	440b      	add	r3, r1
 800bb4c:	3237      	adds	r2, #55	@ 0x37
 800bb4e:	b2d2      	uxtb	r2, r2
 800bb50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	011b      	lsls	r3, r3, #4
 800bb56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bb58:	7dfb      	ldrb	r3, [r7, #23]
 800bb5a:	005b      	lsls	r3, r3, #1
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	68ba      	ldr	r2, [r7, #8]
 800bb60:	4413      	add	r3, r2
 800bb62:	2200      	movs	r2, #0
 800bb64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bb66:	7dfb      	ldrb	r3, [r7, #23]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	75fb      	strb	r3, [r7, #23]
 800bb6c:	7dfa      	ldrb	r2, [r7, #23]
 800bb6e:	79fb      	ldrb	r3, [r7, #7]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d3d3      	bcc.n	800bb1c <IntToUnicode+0x18>
  }
}
 800bb74:	bf00      	nop
 800bb76:	bf00      	nop
 800bb78:	371c      	adds	r7, #28
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr
	...

0800bb84 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b08a      	sub	sp, #40	@ 0x28
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bb8c:	f107 0314 	add.w	r3, r7, #20
 800bb90:	2200      	movs	r2, #0
 800bb92:	601a      	str	r2, [r3, #0]
 800bb94:	605a      	str	r2, [r3, #4]
 800bb96:	609a      	str	r2, [r3, #8]
 800bb98:	60da      	str	r2, [r3, #12]
 800bb9a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bba4:	d13a      	bne.n	800bc1c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bba6:	2300      	movs	r3, #0
 800bba8:	613b      	str	r3, [r7, #16]
 800bbaa:	4b1e      	ldr	r3, [pc, #120]	@ (800bc24 <HAL_PCD_MspInit+0xa0>)
 800bbac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbae:	4a1d      	ldr	r2, [pc, #116]	@ (800bc24 <HAL_PCD_MspInit+0xa0>)
 800bbb0:	f043 0301 	orr.w	r3, r3, #1
 800bbb4:	6313      	str	r3, [r2, #48]	@ 0x30
 800bbb6:	4b1b      	ldr	r3, [pc, #108]	@ (800bc24 <HAL_PCD_MspInit+0xa0>)
 800bbb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbba:	f003 0301 	and.w	r3, r3, #1
 800bbbe:	613b      	str	r3, [r7, #16]
 800bbc0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bbc2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800bbc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbc8:	2302      	movs	r3, #2
 800bbca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bbd0:	2303      	movs	r3, #3
 800bbd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bbd4:	230a      	movs	r3, #10
 800bbd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bbd8:	f107 0314 	add.w	r3, r7, #20
 800bbdc:	4619      	mov	r1, r3
 800bbde:	4812      	ldr	r0, [pc, #72]	@ (800bc28 <HAL_PCD_MspInit+0xa4>)
 800bbe0:	f7f6 ff02 	bl	80029e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bbe4:	4b0f      	ldr	r3, [pc, #60]	@ (800bc24 <HAL_PCD_MspInit+0xa0>)
 800bbe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbe8:	4a0e      	ldr	r2, [pc, #56]	@ (800bc24 <HAL_PCD_MspInit+0xa0>)
 800bbea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbee:	6353      	str	r3, [r2, #52]	@ 0x34
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	60fb      	str	r3, [r7, #12]
 800bbf4:	4b0b      	ldr	r3, [pc, #44]	@ (800bc24 <HAL_PCD_MspInit+0xa0>)
 800bbf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbf8:	4a0a      	ldr	r2, [pc, #40]	@ (800bc24 <HAL_PCD_MspInit+0xa0>)
 800bbfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bbfe:	6453      	str	r3, [r2, #68]	@ 0x44
 800bc00:	4b08      	ldr	r3, [pc, #32]	@ (800bc24 <HAL_PCD_MspInit+0xa0>)
 800bc02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc08:	60fb      	str	r3, [r7, #12]
 800bc0a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	2100      	movs	r1, #0
 800bc10:	2043      	movs	r0, #67	@ 0x43
 800bc12:	f7f6 fe20 	bl	8002856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bc16:	2043      	movs	r0, #67	@ 0x43
 800bc18:	f7f6 fe39 	bl	800288e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bc1c:	bf00      	nop
 800bc1e:	3728      	adds	r7, #40	@ 0x28
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	40023800 	.word	0x40023800
 800bc28:	40020000 	.word	0x40020000

0800bc2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bc40:	4619      	mov	r1, r3
 800bc42:	4610      	mov	r0, r2
 800bc44:	f7fe fb57 	bl	800a2f6 <USBD_LL_SetupStage>
}
 800bc48:	bf00      	nop
 800bc4a:	3708      	adds	r7, #8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	460b      	mov	r3, r1
 800bc5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bc62:	78fa      	ldrb	r2, [r7, #3]
 800bc64:	6879      	ldr	r1, [r7, #4]
 800bc66:	4613      	mov	r3, r2
 800bc68:	00db      	lsls	r3, r3, #3
 800bc6a:	4413      	add	r3, r2
 800bc6c:	009b      	lsls	r3, r3, #2
 800bc6e:	440b      	add	r3, r1
 800bc70:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bc74:	681a      	ldr	r2, [r3, #0]
 800bc76:	78fb      	ldrb	r3, [r7, #3]
 800bc78:	4619      	mov	r1, r3
 800bc7a:	f7fe fb91 	bl	800a3a0 <USBD_LL_DataOutStage>
}
 800bc7e:	bf00      	nop
 800bc80:	3708      	adds	r7, #8
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b082      	sub	sp, #8
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
 800bc8e:	460b      	mov	r3, r1
 800bc90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bc98:	78fa      	ldrb	r2, [r7, #3]
 800bc9a:	6879      	ldr	r1, [r7, #4]
 800bc9c:	4613      	mov	r3, r2
 800bc9e:	00db      	lsls	r3, r3, #3
 800bca0:	4413      	add	r3, r2
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	440b      	add	r3, r1
 800bca6:	3320      	adds	r3, #32
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	78fb      	ldrb	r3, [r7, #3]
 800bcac:	4619      	mov	r1, r3
 800bcae:	f7fe fc2a 	bl	800a506 <USBD_LL_DataInStage>
}
 800bcb2:	bf00      	nop
 800bcb4:	3708      	adds	r7, #8
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}

0800bcba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b082      	sub	sp, #8
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7fe fd64 	bl	800a796 <USBD_LL_SOF>
}
 800bcce:	bf00      	nop
 800bcd0:	3708      	adds	r7, #8
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcd6:	b580      	push	{r7, lr}
 800bcd8:	b084      	sub	sp, #16
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bcde:	2301      	movs	r3, #1
 800bce0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	79db      	ldrb	r3, [r3, #7]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d102      	bne.n	800bcf0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bcea:	2300      	movs	r3, #0
 800bcec:	73fb      	strb	r3, [r7, #15]
 800bcee:	e008      	b.n	800bd02 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	79db      	ldrb	r3, [r3, #7]
 800bcf4:	2b02      	cmp	r3, #2
 800bcf6:	d102      	bne.n	800bcfe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	73fb      	strb	r3, [r7, #15]
 800bcfc:	e001      	b.n	800bd02 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bcfe:	f7f5 fc83 	bl	8001608 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd08:	7bfa      	ldrb	r2, [r7, #15]
 800bd0a:	4611      	mov	r1, r2
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7fe fcfe 	bl	800a70e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7fe fca6 	bl	800a66a <USBD_LL_Reset>
}
 800bd1e:	bf00      	nop
 800bd20:	3710      	adds	r7, #16
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
	...

0800bd28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fe fcf9 	bl	800a72e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	6812      	ldr	r2, [r2, #0]
 800bd4a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bd4e:	f043 0301 	orr.w	r3, r3, #1
 800bd52:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	7adb      	ldrb	r3, [r3, #11]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d005      	beq.n	800bd68 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd5c:	4b04      	ldr	r3, [pc, #16]	@ (800bd70 <HAL_PCD_SuspendCallback+0x48>)
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	4a03      	ldr	r2, [pc, #12]	@ (800bd70 <HAL_PCD_SuspendCallback+0x48>)
 800bd62:	f043 0306 	orr.w	r3, r3, #6
 800bd66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bd68:	bf00      	nop
 800bd6a:	3708      	adds	r7, #8
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	e000ed00 	.word	0xe000ed00

0800bd74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b082      	sub	sp, #8
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bd82:	4618      	mov	r0, r3
 800bd84:	f7fe fcef 	bl	800a766 <USBD_LL_Resume>
}
 800bd88:	bf00      	nop
 800bd8a:	3708      	adds	r7, #8
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	460b      	mov	r3, r1
 800bd9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bda2:	78fa      	ldrb	r2, [r7, #3]
 800bda4:	4611      	mov	r1, r2
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7fe fd47 	bl	800a83a <USBD_LL_IsoOUTIncomplete>
}
 800bdac:	bf00      	nop
 800bdae:	3708      	adds	r7, #8
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b082      	sub	sp, #8
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bdc6:	78fa      	ldrb	r2, [r7, #3]
 800bdc8:	4611      	mov	r1, r2
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fe fd03 	bl	800a7d6 <USBD_LL_IsoINIncomplete>
}
 800bdd0:	bf00      	nop
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7fe fd59 	bl	800a89e <USBD_LL_DevConnected>
}
 800bdec:	bf00      	nop
 800bdee:	3708      	adds	r7, #8
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be02:	4618      	mov	r0, r3
 800be04:	f7fe fd56 	bl	800a8b4 <USBD_LL_DevDisconnected>
}
 800be08:	bf00      	nop
 800be0a:	3708      	adds	r7, #8
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d13c      	bne.n	800be9a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800be20:	4a20      	ldr	r2, [pc, #128]	@ (800bea4 <USBD_LL_Init+0x94>)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	4a1e      	ldr	r2, [pc, #120]	@ (800bea4 <USBD_LL_Init+0x94>)
 800be2c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800be30:	4b1c      	ldr	r3, [pc, #112]	@ (800bea4 <USBD_LL_Init+0x94>)
 800be32:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800be36:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800be38:	4b1a      	ldr	r3, [pc, #104]	@ (800bea4 <USBD_LL_Init+0x94>)
 800be3a:	2204      	movs	r2, #4
 800be3c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800be3e:	4b19      	ldr	r3, [pc, #100]	@ (800bea4 <USBD_LL_Init+0x94>)
 800be40:	2202      	movs	r2, #2
 800be42:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800be44:	4b17      	ldr	r3, [pc, #92]	@ (800bea4 <USBD_LL_Init+0x94>)
 800be46:	2200      	movs	r2, #0
 800be48:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800be4a:	4b16      	ldr	r3, [pc, #88]	@ (800bea4 <USBD_LL_Init+0x94>)
 800be4c:	2202      	movs	r2, #2
 800be4e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800be50:	4b14      	ldr	r3, [pc, #80]	@ (800bea4 <USBD_LL_Init+0x94>)
 800be52:	2200      	movs	r2, #0
 800be54:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800be56:	4b13      	ldr	r3, [pc, #76]	@ (800bea4 <USBD_LL_Init+0x94>)
 800be58:	2200      	movs	r2, #0
 800be5a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800be5c:	4b11      	ldr	r3, [pc, #68]	@ (800bea4 <USBD_LL_Init+0x94>)
 800be5e:	2200      	movs	r2, #0
 800be60:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800be62:	4b10      	ldr	r3, [pc, #64]	@ (800bea4 <USBD_LL_Init+0x94>)
 800be64:	2200      	movs	r2, #0
 800be66:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800be68:	4b0e      	ldr	r3, [pc, #56]	@ (800bea4 <USBD_LL_Init+0x94>)
 800be6a:	2200      	movs	r2, #0
 800be6c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800be6e:	480d      	ldr	r0, [pc, #52]	@ (800bea4 <USBD_LL_Init+0x94>)
 800be70:	f7f7 f8b4 	bl	8002fdc <HAL_PCD_Init>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d001      	beq.n	800be7e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800be7a:	f7f5 fbc5 	bl	8001608 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800be7e:	2180      	movs	r1, #128	@ 0x80
 800be80:	4808      	ldr	r0, [pc, #32]	@ (800bea4 <USBD_LL_Init+0x94>)
 800be82:	f7f8 fae0 	bl	8004446 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800be86:	2240      	movs	r2, #64	@ 0x40
 800be88:	2100      	movs	r1, #0
 800be8a:	4806      	ldr	r0, [pc, #24]	@ (800bea4 <USBD_LL_Init+0x94>)
 800be8c:	f7f8 fa94 	bl	80043b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800be90:	2280      	movs	r2, #128	@ 0x80
 800be92:	2101      	movs	r1, #1
 800be94:	4803      	ldr	r0, [pc, #12]	@ (800bea4 <USBD_LL_Init+0x94>)
 800be96:	f7f8 fa8f 	bl	80043b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800be9a:	2300      	movs	r3, #0
}
 800be9c:	4618      	mov	r0, r3
 800be9e:	3708      	adds	r7, #8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}
 800bea4:	20001d24 	.word	0x20001d24

0800bea8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b084      	sub	sp, #16
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beb4:	2300      	movs	r3, #0
 800beb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7f7 f99b 	bl	80031fa <HAL_PCD_Start>
 800bec4:	4603      	mov	r3, r0
 800bec6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bec8:	7bfb      	ldrb	r3, [r7, #15]
 800beca:	4618      	mov	r0, r3
 800becc:	f000 f942 	bl	800c154 <USBD_Get_USB_Status>
 800bed0:	4603      	mov	r3, r0
 800bed2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bed4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3710      	adds	r7, #16
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}

0800bede <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bede:	b580      	push	{r7, lr}
 800bee0:	b084      	sub	sp, #16
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
 800bee6:	4608      	mov	r0, r1
 800bee8:	4611      	mov	r1, r2
 800beea:	461a      	mov	r2, r3
 800beec:	4603      	mov	r3, r0
 800beee:	70fb      	strb	r3, [r7, #3]
 800bef0:	460b      	mov	r3, r1
 800bef2:	70bb      	strb	r3, [r7, #2]
 800bef4:	4613      	mov	r3, r2
 800bef6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bef8:	2300      	movs	r3, #0
 800befa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bf06:	78bb      	ldrb	r3, [r7, #2]
 800bf08:	883a      	ldrh	r2, [r7, #0]
 800bf0a:	78f9      	ldrb	r1, [r7, #3]
 800bf0c:	f7f7 fe6f 	bl	8003bee <HAL_PCD_EP_Open>
 800bf10:	4603      	mov	r3, r0
 800bf12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf14:	7bfb      	ldrb	r3, [r7, #15]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f000 f91c 	bl	800c154 <USBD_Get_USB_Status>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf20:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3710      	adds	r7, #16
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	b084      	sub	sp, #16
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
 800bf32:	460b      	mov	r3, r1
 800bf34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf36:	2300      	movs	r3, #0
 800bf38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf44:	78fa      	ldrb	r2, [r7, #3]
 800bf46:	4611      	mov	r1, r2
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f7f7 feba 	bl	8003cc2 <HAL_PCD_EP_Close>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf52:	7bfb      	ldrb	r3, [r7, #15]
 800bf54:	4618      	mov	r0, r3
 800bf56:	f000 f8fd 	bl	800c154 <USBD_Get_USB_Status>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3710      	adds	r7, #16
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}

0800bf68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b084      	sub	sp, #16
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	460b      	mov	r3, r1
 800bf72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf74:	2300      	movs	r3, #0
 800bf76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bf82:	78fa      	ldrb	r2, [r7, #3]
 800bf84:	4611      	mov	r1, r2
 800bf86:	4618      	mov	r0, r3
 800bf88:	f7f7 ff72 	bl	8003e70 <HAL_PCD_EP_SetStall>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf90:	7bfb      	ldrb	r3, [r7, #15]
 800bf92:	4618      	mov	r0, r3
 800bf94:	f000 f8de 	bl	800c154 <USBD_Get_USB_Status>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3710      	adds	r7, #16
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b084      	sub	sp, #16
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
 800bfae:	460b      	mov	r3, r1
 800bfb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bfc0:	78fa      	ldrb	r2, [r7, #3]
 800bfc2:	4611      	mov	r1, r2
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7f7 ffb6 	bl	8003f36 <HAL_PCD_EP_ClrStall>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfce:	7bfb      	ldrb	r3, [r7, #15]
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f000 f8bf 	bl	800c154 <USBD_Get_USB_Status>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfda:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3710      	adds	r7, #16
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b085      	sub	sp, #20
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	460b      	mov	r3, r1
 800bfee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bff6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	da0b      	bge.n	800c018 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c000:	78fb      	ldrb	r3, [r7, #3]
 800c002:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c006:	68f9      	ldr	r1, [r7, #12]
 800c008:	4613      	mov	r3, r2
 800c00a:	00db      	lsls	r3, r3, #3
 800c00c:	4413      	add	r3, r2
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	440b      	add	r3, r1
 800c012:	3316      	adds	r3, #22
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	e00b      	b.n	800c030 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c018:	78fb      	ldrb	r3, [r7, #3]
 800c01a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c01e:	68f9      	ldr	r1, [r7, #12]
 800c020:	4613      	mov	r3, r2
 800c022:	00db      	lsls	r3, r3, #3
 800c024:	4413      	add	r3, r2
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	440b      	add	r3, r1
 800c02a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c02e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c030:	4618      	mov	r0, r3
 800c032:	3714      	adds	r7, #20
 800c034:	46bd      	mov	sp, r7
 800c036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03a:	4770      	bx	lr

0800c03c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	460b      	mov	r3, r1
 800c046:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c048:	2300      	movs	r3, #0
 800c04a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c04c:	2300      	movs	r3, #0
 800c04e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c056:	78fa      	ldrb	r2, [r7, #3]
 800c058:	4611      	mov	r1, r2
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7f7 fda3 	bl	8003ba6 <HAL_PCD_SetAddress>
 800c060:	4603      	mov	r3, r0
 800c062:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c064:	7bfb      	ldrb	r3, [r7, #15]
 800c066:	4618      	mov	r0, r3
 800c068:	f000 f874 	bl	800c154 <USBD_Get_USB_Status>
 800c06c:	4603      	mov	r3, r0
 800c06e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c070:	7bbb      	ldrb	r3, [r7, #14]
}
 800c072:	4618      	mov	r0, r3
 800c074:	3710      	adds	r7, #16
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}

0800c07a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c07a:	b580      	push	{r7, lr}
 800c07c:	b086      	sub	sp, #24
 800c07e:	af00      	add	r7, sp, #0
 800c080:	60f8      	str	r0, [r7, #12]
 800c082:	607a      	str	r2, [r7, #4]
 800c084:	603b      	str	r3, [r7, #0]
 800c086:	460b      	mov	r3, r1
 800c088:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c08a:	2300      	movs	r3, #0
 800c08c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c08e:	2300      	movs	r3, #0
 800c090:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c098:	7af9      	ldrb	r1, [r7, #11]
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	f7f7 fead 	bl	8003dfc <HAL_PCD_EP_Transmit>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0a6:	7dfb      	ldrb	r3, [r7, #23]
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f000 f853 	bl	800c154 <USBD_Get_USB_Status>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c0b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3718      	adds	r7, #24
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b086      	sub	sp, #24
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	60f8      	str	r0, [r7, #12]
 800c0c4:	607a      	str	r2, [r7, #4]
 800c0c6:	603b      	str	r3, [r7, #0]
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c0da:	7af9      	ldrb	r1, [r7, #11]
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	f7f7 fe39 	bl	8003d56 <HAL_PCD_EP_Receive>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0e8:	7dfb      	ldrb	r3, [r7, #23]
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f000 f832 	bl	800c154 <USBD_Get_USB_Status>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c0f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3718      	adds	r7, #24
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}

0800c0fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b082      	sub	sp, #8
 800c102:	af00      	add	r7, sp, #0
 800c104:	6078      	str	r0, [r7, #4]
 800c106:	460b      	mov	r3, r1
 800c108:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c110:	78fa      	ldrb	r2, [r7, #3]
 800c112:	4611      	mov	r1, r2
 800c114:	4618      	mov	r0, r3
 800c116:	f7f7 fe59 	bl	8003dcc <HAL_PCD_EP_GetRxCount>
 800c11a:	4603      	mov	r3, r0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c12c:	4b03      	ldr	r3, [pc, #12]	@ (800c13c <USBD_static_malloc+0x18>)
}
 800c12e:	4618      	mov	r0, r3
 800c130:	370c      	adds	r7, #12
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop
 800c13c:	20002208 	.word	0x20002208

0800c140 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c140:	b480      	push	{r7}
 800c142:	b083      	sub	sp, #12
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]

}
 800c148:	bf00      	nop
 800c14a:	370c      	adds	r7, #12
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr

0800c154 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c154:	b480      	push	{r7}
 800c156:	b085      	sub	sp, #20
 800c158:	af00      	add	r7, sp, #0
 800c15a:	4603      	mov	r3, r0
 800c15c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c15e:	2300      	movs	r3, #0
 800c160:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c162:	79fb      	ldrb	r3, [r7, #7]
 800c164:	2b03      	cmp	r3, #3
 800c166:	d817      	bhi.n	800c198 <USBD_Get_USB_Status+0x44>
 800c168:	a201      	add	r2, pc, #4	@ (adr r2, 800c170 <USBD_Get_USB_Status+0x1c>)
 800c16a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c16e:	bf00      	nop
 800c170:	0800c181 	.word	0x0800c181
 800c174:	0800c187 	.word	0x0800c187
 800c178:	0800c18d 	.word	0x0800c18d
 800c17c:	0800c193 	.word	0x0800c193
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c180:	2300      	movs	r3, #0
 800c182:	73fb      	strb	r3, [r7, #15]
    break;
 800c184:	e00b      	b.n	800c19e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c186:	2303      	movs	r3, #3
 800c188:	73fb      	strb	r3, [r7, #15]
    break;
 800c18a:	e008      	b.n	800c19e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c18c:	2301      	movs	r3, #1
 800c18e:	73fb      	strb	r3, [r7, #15]
    break;
 800c190:	e005      	b.n	800c19e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c192:	2303      	movs	r3, #3
 800c194:	73fb      	strb	r3, [r7, #15]
    break;
 800c196:	e002      	b.n	800c19e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c198:	2303      	movs	r3, #3
 800c19a:	73fb      	strb	r3, [r7, #15]
    break;
 800c19c:	bf00      	nop
  }
  return usb_status;
 800c19e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	3714      	adds	r7, #20
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr

0800c1ac <memset>:
 800c1ac:	4402      	add	r2, r0
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d100      	bne.n	800c1b6 <memset+0xa>
 800c1b4:	4770      	bx	lr
 800c1b6:	f803 1b01 	strb.w	r1, [r3], #1
 800c1ba:	e7f9      	b.n	800c1b0 <memset+0x4>

0800c1bc <__libc_init_array>:
 800c1bc:	b570      	push	{r4, r5, r6, lr}
 800c1be:	4d0d      	ldr	r5, [pc, #52]	@ (800c1f4 <__libc_init_array+0x38>)
 800c1c0:	4c0d      	ldr	r4, [pc, #52]	@ (800c1f8 <__libc_init_array+0x3c>)
 800c1c2:	1b64      	subs	r4, r4, r5
 800c1c4:	10a4      	asrs	r4, r4, #2
 800c1c6:	2600      	movs	r6, #0
 800c1c8:	42a6      	cmp	r6, r4
 800c1ca:	d109      	bne.n	800c1e0 <__libc_init_array+0x24>
 800c1cc:	4d0b      	ldr	r5, [pc, #44]	@ (800c1fc <__libc_init_array+0x40>)
 800c1ce:	4c0c      	ldr	r4, [pc, #48]	@ (800c200 <__libc_init_array+0x44>)
 800c1d0:	f000 f826 	bl	800c220 <_init>
 800c1d4:	1b64      	subs	r4, r4, r5
 800c1d6:	10a4      	asrs	r4, r4, #2
 800c1d8:	2600      	movs	r6, #0
 800c1da:	42a6      	cmp	r6, r4
 800c1dc:	d105      	bne.n	800c1ea <__libc_init_array+0x2e>
 800c1de:	bd70      	pop	{r4, r5, r6, pc}
 800c1e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1e4:	4798      	blx	r3
 800c1e6:	3601      	adds	r6, #1
 800c1e8:	e7ee      	b.n	800c1c8 <__libc_init_array+0xc>
 800c1ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1ee:	4798      	blx	r3
 800c1f0:	3601      	adds	r6, #1
 800c1f2:	e7f2      	b.n	800c1da <__libc_init_array+0x1e>
 800c1f4:	0800c2e0 	.word	0x0800c2e0
 800c1f8:	0800c2e0 	.word	0x0800c2e0
 800c1fc:	0800c2e0 	.word	0x0800c2e0
 800c200:	0800c2e4 	.word	0x0800c2e4

0800c204 <memcpy>:
 800c204:	440a      	add	r2, r1
 800c206:	4291      	cmp	r1, r2
 800c208:	f100 33ff 	add.w	r3, r0, #4294967295
 800c20c:	d100      	bne.n	800c210 <memcpy+0xc>
 800c20e:	4770      	bx	lr
 800c210:	b510      	push	{r4, lr}
 800c212:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c216:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c21a:	4291      	cmp	r1, r2
 800c21c:	d1f9      	bne.n	800c212 <memcpy+0xe>
 800c21e:	bd10      	pop	{r4, pc}

0800c220 <_init>:
 800c220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c222:	bf00      	nop
 800c224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c226:	bc08      	pop	{r3}
 800c228:	469e      	mov	lr, r3
 800c22a:	4770      	bx	lr

0800c22c <_fini>:
 800c22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c22e:	bf00      	nop
 800c230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c232:	bc08      	pop	{r3}
 800c234:	469e      	mov	lr, r3
 800c236:	4770      	bx	lr
