
Ro_Bo_Rho.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0a0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800d228  0800d228  0000e228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2c8  0800d2c8  0000f110  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2c8  0800d2c8  0000e2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2d0  0800d2d0  0000f110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2d0  0800d2d0  0000e2d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d2d4  0800d2d4  0000e2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  0800d2d8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f110  2**0
                  CONTENTS
 10 .bss          00002330  20000110  20000110  0000f110  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002440  20002440  0000f110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f110  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f284  00000000  00000000  0000f140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000479f  00000000  00000000  0002e3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bf0  00000000  00000000  00032b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015c9  00000000  00000000  00034758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000276e3  00000000  00000000  00035d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024e9e  00000000  00000000  0005d404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e166b  00000000  00000000  000822a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016390d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000076d8  00000000  00000000  00163950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  0016b028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000110 	.word	0x20000110
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d210 	.word	0x0800d210

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000114 	.word	0x20000114
 80001c4:	0800d210 	.word	0x0800d210

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f001 fe00 	bl	80020c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 fa3e 	bl	8000940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 ff88 	bl	80013d8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004c8:	f000 fbb2 	bl	8000c30 <MX_TIM2_Init>
  MX_TIM4_Init();
 80004cc:	f000 fc58 	bl	8000d80 <MX_TIM4_Init>
  MX_ADC1_Init();
 80004d0:	f000 faa0 	bl	8000a14 <MX_ADC1_Init>
  MX_SPI2_Init();
 80004d4:	f000 fb1e 	bl	8000b14 <MX_SPI2_Init>
  MX_TIM1_Init();
 80004d8:	f000 fb52 	bl	8000b80 <MX_TIM1_Init>
  MX_TIM8_Init();
 80004dc:	f000 fcf8 	bl	8000ed0 <MX_TIM8_Init>
  MX_TIM9_Init();
 80004e0:	f000 fd4e 	bl	8000f80 <MX_TIM9_Init>
  MX_TIM10_Init();
 80004e4:	f000 fd9c 	bl	8001020 <MX_TIM10_Init>
  MX_TIM11_Init();
 80004e8:	f000 fde8 	bl	80010bc <MX_TIM11_Init>
  MX_TIM12_Init();
 80004ec:	f000 fe34 	bl	8001158 <MX_TIM12_Init>
  MX_TIM13_Init();
 80004f0:	f000 fe82 	bl	80011f8 <MX_TIM13_Init>
  MX_TIM14_Init();
 80004f4:	f000 fece 	bl	8001294 <MX_TIM14_Init>
  MX_USART2_UART_Init();
 80004f8:	f000 ff44 	bl	8001384 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80004fc:	f00c f942 	bl	800c784 <MX_USB_DEVICE_Init>
  MX_UART4_Init();
 8000500:	f000 ff16 	bl	8001330 <MX_UART4_Init>
  MX_I2C2_Init();
 8000504:	f000 fad8 	bl	8000ab8 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000508:	f000 fbe6 	bl	8000cd8 <MX_TIM3_Init>
  MX_TIM5_Init();
 800050c:	f000 fc8c 	bl	8000e28 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
   Motor_setup_LF(&htim14   ,&htim5    ,"PC05");
 8000510:	4ac3      	ldr	r2, [pc, #780]	@ (8000820 <main+0x368>)
 8000512:	49c4      	ldr	r1, [pc, #784]	@ (8000824 <main+0x36c>)
 8000514:	48c4      	ldr	r0, [pc, #784]	@ (8000828 <main+0x370>)
 8000516:	f008 fcd3 	bl	8008ec0 <Motor_setup_LF>
   Motor_setup_LB(&htim12   ,&htim1    ,"PE12");
 800051a:	4ac4      	ldr	r2, [pc, #784]	@ (800082c <main+0x374>)
 800051c:	49c4      	ldr	r1, [pc, #784]	@ (8000830 <main+0x378>)
 800051e:	48c5      	ldr	r0, [pc, #788]	@ (8000834 <main+0x37c>)
 8000520:	f008 fcfc 	bl	8008f1c <Motor_setup_LB>
   Motor_setup_RF(&htim11   ,&htim8    ,"PE01");
 8000524:	4ac4      	ldr	r2, [pc, #784]	@ (8000838 <main+0x380>)
 8000526:	49c5      	ldr	r1, [pc, #788]	@ (800083c <main+0x384>)
 8000528:	48c5      	ldr	r0, [pc, #788]	@ (8000840 <main+0x388>)
 800052a:	f008 fd25 	bl	8008f78 <Motor_setup_RF>
   Motor_setup_RB(&htim12   ,&htim4    ,"PD09");
 800052e:	4ac5      	ldr	r2, [pc, #788]	@ (8000844 <main+0x38c>)
 8000530:	49c5      	ldr	r1, [pc, #788]	@ (8000848 <main+0x390>)
 8000532:	48c0      	ldr	r0, [pc, #768]	@ (8000834 <main+0x37c>)
 8000534:	f008 fd4e 	bl	8008fd4 <Motor_setup_RB>
   Motor_setup_EXTRA1(&htim9,&htim3    ,"PC13");
 8000538:	4ac4      	ldr	r2, [pc, #784]	@ (800084c <main+0x394>)
 800053a:	49c5      	ldr	r1, [pc, #788]	@ (8000850 <main+0x398>)
 800053c:	48c5      	ldr	r0, [pc, #788]	@ (8000854 <main+0x39c>)
 800053e:	f008 fd77 	bl	8009030 <Motor_setup_EXTRA1>
   Motor_setup_EXTRA2(&htim10,&htim2   ,"PE00");
 8000542:	4ac5      	ldr	r2, [pc, #788]	@ (8000858 <main+0x3a0>)
 8000544:	49c5      	ldr	r1, [pc, #788]	@ (800085c <main+0x3a4>)
 8000546:	48c6      	ldr	r0, [pc, #792]	@ (8000860 <main+0x3a8>)
 8000548:	f008 fda0 	bl	800908c <Motor_setup_EXTRA2>

   Setup_Gear_Ratio(27);
 800054c:	201b      	movs	r0, #27
 800054e:	f008 fdeb 	bl	8009128 <Setup_Gear_Ratio>
   Setup_CPR(68);
 8000552:	2044      	movs	r0, #68	@ 0x44
 8000554:	f008 fdd8 	bl	8009108 <Setup_CPR>
   Setup_frequency_Motor(100);
 8000558:	2064      	movs	r0, #100	@ 0x64
 800055a:	f008 fdf5 	bl	8009148 <Setup_frequency_Motor>

   Setup_PID_LF(1.0 ,0.0 ,0.1 ,0 ,280);
 800055e:	ed9f 2ac1 	vldr	s4, [pc, #772]	@ 8000864 <main+0x3ac>
 8000562:	eddf 1ac1 	vldr	s3, [pc, #772]	@ 8000868 <main+0x3b0>
 8000566:	ed9f 1ac1 	vldr	s2, [pc, #772]	@ 800086c <main+0x3b4>
 800056a:	eddf 0abf 	vldr	s1, [pc, #764]	@ 8000868 <main+0x3b0>
 800056e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000572:	f008 fe81 	bl	8009278 <Setup_PID_LF>
   Setup_PID_LB(1.0 ,0.0 ,0.1 ,0 ,280);
 8000576:	ed9f 2abb 	vldr	s4, [pc, #748]	@ 8000864 <main+0x3ac>
 800057a:	eddf 1abb 	vldr	s3, [pc, #748]	@ 8000868 <main+0x3b0>
 800057e:	ed9f 1abb 	vldr	s2, [pc, #748]	@ 800086c <main+0x3b4>
 8000582:	eddf 0ab9 	vldr	s1, [pc, #740]	@ 8000868 <main+0x3b0>
 8000586:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800058a:	f008 fea1 	bl	80092d0 <Setup_PID_LB>
   Setup_PID_RF(1.0 ,0.0 ,0.1 ,0 ,280);
 800058e:	ed9f 2ab5 	vldr	s4, [pc, #724]	@ 8000864 <main+0x3ac>
 8000592:	eddf 1ab5 	vldr	s3, [pc, #724]	@ 8000868 <main+0x3b0>
 8000596:	ed9f 1ab5 	vldr	s2, [pc, #724]	@ 800086c <main+0x3b4>
 800059a:	eddf 0ab3 	vldr	s1, [pc, #716]	@ 8000868 <main+0x3b0>
 800059e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80005a2:	f008 fec1 	bl	8009328 <Setup_PID_RF>
   Setup_PID_RB(1.0 ,0.0 ,0.1 ,0 ,280);
 80005a6:	ed9f 2aaf 	vldr	s4, [pc, #700]	@ 8000864 <main+0x3ac>
 80005aa:	eddf 1aaf 	vldr	s3, [pc, #700]	@ 8000868 <main+0x3b0>
 80005ae:	ed9f 1aaf 	vldr	s2, [pc, #700]	@ 800086c <main+0x3b4>
 80005b2:	eddf 0aad 	vldr	s1, [pc, #692]	@ 8000868 <main+0x3b0>
 80005b6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80005ba:	f008 fee1 	bl	8009380 <Setup_PID_RB>
//   Setup_PID_EXTRA1(0.5 ,0.1 ,0 ,0 ,280);
//   Setup_PID_EXTRA2(0.5 ,0.1 ,0 ,0 ,280);

   Setup_frequency_Forward_Kinematic(100);
 80005be:	2064      	movs	r0, #100	@ 0x64
 80005c0:	f009 ff18 	bl	800a3f4 <Setup_frequency_Forward_Kinematic>
   Setup_Forward_Kinematic(0.23f ,0.23f ,0.06f);
 80005c4:	ed9f 1aaa 	vldr	s2, [pc, #680]	@ 8000870 <main+0x3b8>
 80005c8:	eddf 0aaa 	vldr	s1, [pc, #680]	@ 8000874 <main+0x3bc>
 80005cc:	ed9f 0aa9 	vldr	s0, [pc, #676]	@ 8000874 <main+0x3bc>
 80005d0:	f009 fef2 	bl	800a3b8 <Setup_Forward_Kinematic>

   Setup_Inverse_Kinematic(0.23f ,0.23f ,0.06f);
 80005d4:	ed9f 1aa6 	vldr	s2, [pc, #664]	@ 8000870 <main+0x3b8>
 80005d8:	eddf 0aa6 	vldr	s1, [pc, #664]	@ 8000874 <main+0x3bc>
 80005dc:	ed9f 0aa5 	vldr	s0, [pc, #660]	@ 8000874 <main+0x3bc>
 80005e0:	f009 ff18 	bl	800a414 <Setup_Inverse_Kinematic>

   //UAST2 esp_s3_zero to STM32
   HAL_UART_Receive_IT(&huart2, (uint8_t *)&Str_PS2, sizeof(Str_PS2));
 80005e4:	2212      	movs	r2, #18
 80005e6:	49a4      	ldr	r1, [pc, #656]	@ (8000878 <main+0x3c0>)
 80005e8:	48a4      	ldr	r0, [pc, #656]	@ (800087c <main+0x3c4>)
 80005ea:	f006 f9fd 	bl	80069e8 <HAL_UART_Receive_IT>

   Setup_MPU6050(&hi2c2);
 80005ee:	48a4      	ldr	r0, [pc, #656]	@ (8000880 <main+0x3c8>)
 80005f0:	f00a f826 	bl	800a640 <Setup_MPU6050>
    /* USER CODE BEGIN 3 */

//	  CDC_Transmit_FS((uint8_t*)RPM ,6);
//	  HAL_Delay(1000);

	  if((uwTick - PastTime) > 10){
 80005f4:	4ba3      	ldr	r3, [pc, #652]	@ (8000884 <main+0x3cc>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4aa3      	ldr	r2, [pc, #652]	@ (8000888 <main+0x3d0>)
 80005fa:	6812      	ldr	r2, [r2, #0]
 80005fc:	1a9b      	subs	r3, r3, r2
 80005fe:	2b0a      	cmp	r3, #10
 8000600:	d9f8      	bls.n	80005f4 <main+0x13c>
         if(Str_PS2.seting[1] == 1){
 8000602:	4b9d      	ldr	r3, [pc, #628]	@ (8000878 <main+0x3c0>)
 8000604:	7b5b      	ldrb	r3, [r3, #13]
 8000606:	2b01      	cmp	r3, #1
 8000608:	f040 8179 	bne.w	80008fe <main+0x446>
//		 addr = Scan_I2C(&hi2c2);

		 ReadMPU6050();
 800060c:	f00a f87c 	bl	800a708 <ReadMPU6050>
//	    count[2] = getCount(&htim8);
//	    count[3] = getCount(&htim4);
//	    count[4] = getCount(&htim2);
//	    count[5] = getCount(&htim3);

	    RPM[0] = getRPM_TIM_Wheel(&htim5 ,LF);
 8000610:	2100      	movs	r1, #0
 8000612:	4884      	ldr	r0, [pc, #528]	@ (8000824 <main+0x36c>)
 8000614:	f008 fdc2 	bl	800919c <getRPM_TIM_Wheel>
 8000618:	eef0 7a40 	vmov.f32	s15, s0
 800061c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000620:	ee17 3a90 	vmov	r3, s15
 8000624:	b21a      	sxth	r2, r3
 8000626:	4b99      	ldr	r3, [pc, #612]	@ (800088c <main+0x3d4>)
 8000628:	801a      	strh	r2, [r3, #0]
	    RPM[1] = -getRPM_TIM_Wheel(&htim1 ,LB);
 800062a:	2101      	movs	r1, #1
 800062c:	4880      	ldr	r0, [pc, #512]	@ (8000830 <main+0x378>)
 800062e:	f008 fdb5 	bl	800919c <getRPM_TIM_Wheel>
 8000632:	eef0 7a40 	vmov.f32	s15, s0
 8000636:	eef1 7a67 	vneg.f32	s15, s15
 800063a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800063e:	ee17 3a90 	vmov	r3, s15
 8000642:	b21a      	sxth	r2, r3
 8000644:	4b91      	ldr	r3, [pc, #580]	@ (800088c <main+0x3d4>)
 8000646:	805a      	strh	r2, [r3, #2]
	    RPM[2] = getRPM_TIM_Wheel(&htim8 ,RF);
 8000648:	2102      	movs	r1, #2
 800064a:	487c      	ldr	r0, [pc, #496]	@ (800083c <main+0x384>)
 800064c:	f008 fda6 	bl	800919c <getRPM_TIM_Wheel>
 8000650:	eef0 7a40 	vmov.f32	s15, s0
 8000654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000658:	ee17 3a90 	vmov	r3, s15
 800065c:	b21a      	sxth	r2, r3
 800065e:	4b8b      	ldr	r3, [pc, #556]	@ (800088c <main+0x3d4>)
 8000660:	809a      	strh	r2, [r3, #4]
	    RPM[3] = getRPM_TIM_Wheel(&htim4 ,RB);
 8000662:	2103      	movs	r1, #3
 8000664:	4878      	ldr	r0, [pc, #480]	@ (8000848 <main+0x390>)
 8000666:	f008 fd99 	bl	800919c <getRPM_TIM_Wheel>
 800066a:	eef0 7a40 	vmov.f32	s15, s0
 800066e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000672:	ee17 3a90 	vmov	r3, s15
 8000676:	b21a      	sxth	r2, r3
 8000678:	4b84      	ldr	r3, [pc, #528]	@ (800088c <main+0x3d4>)
 800067a:	80da      	strh	r2, [r3, #6]
//	    RPM[5] = getRPM_TIM_Wheel(&htim2 ,EXTRA2);

//		Odometry_Forward_Kinematic(getRPM_to_Rad_s(RPM[0]), getRPM_to_Rad_s(RPM[1]), getRPM_to_Rad_s(RPM[2]), getRPM_to_Rad_s(RPM[3]));
//		x = get_Vz();

	    Inverse_Kinematic(Vx ,Vy ,Vz);
 800067c:	4b84      	ldr	r3, [pc, #528]	@ (8000890 <main+0x3d8>)
 800067e:	edd3 7a00 	vldr	s15, [r3]
 8000682:	4b84      	ldr	r3, [pc, #528]	@ (8000894 <main+0x3dc>)
 8000684:	ed93 7a00 	vldr	s14, [r3]
 8000688:	4b83      	ldr	r3, [pc, #524]	@ (8000898 <main+0x3e0>)
 800068a:	edd3 6a00 	vldr	s13, [r3]
 800068e:	eeb0 1a66 	vmov.f32	s2, s13
 8000692:	eef0 0a47 	vmov.f32	s1, s14
 8000696:	eeb0 0a67 	vmov.f32	s0, s15
 800069a:	f009 fed9 	bl	800a450 <Inverse_Kinematic>

	    PID[0] = Motor_Speed_LF(getRad_s_to_RPM(get_w_LF()) ,RPM[0]);
 800069e:	f009 ff69 	bl	800a574 <get_w_LF>
 80006a2:	eef0 7a40 	vmov.f32	s15, s0
 80006a6:	eeb0 0a67 	vmov.f32	s0, s15
 80006aa:	f008 fd5d 	bl	8009168 <getRad_s_to_RPM>
 80006ae:	eef0 7a40 	vmov.f32	s15, s0
 80006b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006b6:	ee17 3a90 	vmov	r3, s15
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	4a73      	ldr	r2, [pc, #460]	@ (800088c <main+0x3d4>)
 80006be:	f9b2 2000 	ldrsh.w	r2, [r2]
 80006c2:	ee07 2a90 	vmov	s15, r2
 80006c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ca:	eeb0 0a67 	vmov.f32	s0, s15
 80006ce:	4618      	mov	r0, r3
 80006d0:	f009 f944 	bl	800995c <Motor_Speed_LF>
 80006d4:	eef0 7a40 	vmov.f32	s15, s0
 80006d8:	4b70      	ldr	r3, [pc, #448]	@ (800089c <main+0x3e4>)
 80006da:	edc3 7a00 	vstr	s15, [r3]
	    PID[1] = Motor_Speed_LB(getRad_s_to_RPM(get_w_LB()) ,RPM[1]);
 80006de:	f009 ff57 	bl	800a590 <get_w_LB>
 80006e2:	eef0 7a40 	vmov.f32	s15, s0
 80006e6:	eeb0 0a67 	vmov.f32	s0, s15
 80006ea:	f008 fd3d 	bl	8009168 <getRad_s_to_RPM>
 80006ee:	eef0 7a40 	vmov.f32	s15, s0
 80006f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006f6:	ee17 3a90 	vmov	r3, s15
 80006fa:	b21b      	sxth	r3, r3
 80006fc:	4a63      	ldr	r2, [pc, #396]	@ (800088c <main+0x3d4>)
 80006fe:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000702:	ee07 2a90 	vmov	s15, r2
 8000706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800070a:	eeb0 0a67 	vmov.f32	s0, s15
 800070e:	4618      	mov	r0, r3
 8000710:	f009 f996 	bl	8009a40 <Motor_Speed_LB>
 8000714:	eef0 7a40 	vmov.f32	s15, s0
 8000718:	4b60      	ldr	r3, [pc, #384]	@ (800089c <main+0x3e4>)
 800071a:	edc3 7a01 	vstr	s15, [r3, #4]
	    PID[2] = Motor_Speed_RF(getRad_s_to_RPM(get_w_RF()) ,RPM[2]);
 800071e:	f009 ff45 	bl	800a5ac <get_w_RF>
 8000722:	eef0 7a40 	vmov.f32	s15, s0
 8000726:	eeb0 0a67 	vmov.f32	s0, s15
 800072a:	f008 fd1d 	bl	8009168 <getRad_s_to_RPM>
 800072e:	eef0 7a40 	vmov.f32	s15, s0
 8000732:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000736:	ee17 3a90 	vmov	r3, s15
 800073a:	b21b      	sxth	r3, r3
 800073c:	4a53      	ldr	r2, [pc, #332]	@ (800088c <main+0x3d4>)
 800073e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000742:	ee07 2a90 	vmov	s15, r2
 8000746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800074a:	eeb0 0a67 	vmov.f32	s0, s15
 800074e:	4618      	mov	r0, r3
 8000750:	f009 f9e8 	bl	8009b24 <Motor_Speed_RF>
 8000754:	eef0 7a40 	vmov.f32	s15, s0
 8000758:	4b50      	ldr	r3, [pc, #320]	@ (800089c <main+0x3e4>)
 800075a:	edc3 7a02 	vstr	s15, [r3, #8]
	    PID[3] = Motor_Speed_RB(getRad_s_to_RPM(get_w_RB()) ,RPM[3]);
 800075e:	f009 ff33 	bl	800a5c8 <get_w_RB>
 8000762:	eef0 7a40 	vmov.f32	s15, s0
 8000766:	eeb0 0a67 	vmov.f32	s0, s15
 800076a:	f008 fcfd 	bl	8009168 <getRad_s_to_RPM>
 800076e:	eef0 7a40 	vmov.f32	s15, s0
 8000772:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000776:	ee17 3a90 	vmov	r3, s15
 800077a:	b21b      	sxth	r3, r3
 800077c:	4a43      	ldr	r2, [pc, #268]	@ (800088c <main+0x3d4>)
 800077e:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8000782:	ee07 2a90 	vmov	s15, r2
 8000786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800078a:	eeb0 0a67 	vmov.f32	s0, s15
 800078e:	4618      	mov	r0, r3
 8000790:	f009 fa3a 	bl	8009c08 <Motor_Speed_RB>
 8000794:	eef0 7a40 	vmov.f32	s15, s0
 8000798:	4b40      	ldr	r3, [pc, #256]	@ (800089c <main+0x3e4>)
 800079a:	edc3 7a03 	vstr	s15, [r3, #12]
//	    PID[1] = Motor_Speed_LB(-180 ,RPM[1]);
//	    PID[2] = Motor_Speed_RF(-180 ,RPM[2]);
//	    PID[3] = Motor_Speed_RB(-180 ,RPM[3]);


	    if ((Str_PS2.attack[2] == 1) && (lastButtonState_load_Ball == 0)) {
 800079e:	4b36      	ldr	r3, [pc, #216]	@ (8000878 <main+0x3c0>)
 80007a0:	799b      	ldrb	r3, [r3, #6]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d113      	bne.n	80007ce <main+0x316>
 80007a6:	4b3e      	ldr	r3, [pc, #248]	@ (80008a0 <main+0x3e8>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d10f      	bne.n	80007ce <main+0x316>
	    	status_load_Ball = !status_load_Ball;
 80007ae:	4b3d      	ldr	r3, [pc, #244]	@ (80008a4 <main+0x3ec>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	bf0c      	ite	eq
 80007b6:	2301      	moveq	r3, #1
 80007b8:	2300      	movne	r3, #0
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	461a      	mov	r2, r3
 80007be:	4b39      	ldr	r3, [pc, #228]	@ (80008a4 <main+0x3ec>)
 80007c0:	701a      	strb	r2, [r3, #0]
	        digitalWrite("PE10", status_load_Ball);
 80007c2:	4b38      	ldr	r3, [pc, #224]	@ (80008a4 <main+0x3ec>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	4619      	mov	r1, r3
 80007c8:	4837      	ldr	r0, [pc, #220]	@ (80008a8 <main+0x3f0>)
 80007ca:	f009 fa8f 	bl	8009cec <digitalWrite>
	    }
	    lastButtonState_load_Ball = Str_PS2.attack[2];
 80007ce:	4b2a      	ldr	r3, [pc, #168]	@ (8000878 <main+0x3c0>)
 80007d0:	799a      	ldrb	r2, [r3, #6]
 80007d2:	4b33      	ldr	r3, [pc, #204]	@ (80008a0 <main+0x3e8>)
 80007d4:	701a      	strb	r2, [r3, #0]

	    if ((Str_PS2.attack[1] == 1) && (lastButtonState_re_Ball == 0)) {
 80007d6:	4b28      	ldr	r3, [pc, #160]	@ (8000878 <main+0x3c0>)
 80007d8:	795b      	ldrb	r3, [r3, #5]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d113      	bne.n	8000806 <main+0x34e>
 80007de:	4b33      	ldr	r3, [pc, #204]	@ (80008ac <main+0x3f4>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d10f      	bne.n	8000806 <main+0x34e>
	    	status_re_Ball = !status_re_Ball;
 80007e6:	4b32      	ldr	r3, [pc, #200]	@ (80008b0 <main+0x3f8>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	bf0c      	ite	eq
 80007ee:	2301      	moveq	r3, #1
 80007f0:	2300      	movne	r3, #0
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b2e      	ldr	r3, [pc, #184]	@ (80008b0 <main+0x3f8>)
 80007f8:	701a      	strb	r2, [r3, #0]
	   	    digitalWrite("PE08", status_re_Ball);
 80007fa:	4b2d      	ldr	r3, [pc, #180]	@ (80008b0 <main+0x3f8>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	4619      	mov	r1, r3
 8000800:	482c      	ldr	r0, [pc, #176]	@ (80008b4 <main+0x3fc>)
 8000802:	f009 fa73 	bl	8009cec <digitalWrite>
	   	 }
	    lastButtonState_re_Ball = Str_PS2.attack[1];
 8000806:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <main+0x3c0>)
 8000808:	795a      	ldrb	r2, [r3, #5]
 800080a:	4b28      	ldr	r3, [pc, #160]	@ (80008ac <main+0x3f4>)
 800080c:	701a      	strb	r2, [r3, #0]


	   	 if(Str_PS2.attack[5] == 1){
 800080e:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <main+0x3c0>)
 8000810:	7a5b      	ldrb	r3, [r3, #9]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d152      	bne.n	80008bc <main+0x404>
	   	    Motor_DutyCycle_EXTRA1(-2000);
 8000816:	4828      	ldr	r0, [pc, #160]	@ (80008b8 <main+0x400>)
 8000818:	f008 fff0 	bl	80097fc <Motor_DutyCycle_EXTRA1>
 800081c:	e05a      	b.n	80008d4 <main+0x41c>
 800081e:	bf00      	nop
 8000820:	0800d228 	.word	0x0800d228
 8000824:	20000340 	.word	0x20000340
 8000828:	20000538 	.word	0x20000538
 800082c:	0800d230 	.word	0x0800d230
 8000830:	20000220 	.word	0x20000220
 8000834:	200004a8 	.word	0x200004a8
 8000838:	0800d238 	.word	0x0800d238
 800083c:	20000388 	.word	0x20000388
 8000840:	20000460 	.word	0x20000460
 8000844:	0800d240 	.word	0x0800d240
 8000848:	200002f8 	.word	0x200002f8
 800084c:	0800d248 	.word	0x0800d248
 8000850:	200002b0 	.word	0x200002b0
 8000854:	200003d0 	.word	0x200003d0
 8000858:	0800d250 	.word	0x0800d250
 800085c:	20000268 	.word	0x20000268
 8000860:	20000418 	.word	0x20000418
 8000864:	438c0000 	.word	0x438c0000
 8000868:	00000000 	.word	0x00000000
 800086c:	3dcccccd 	.word	0x3dcccccd
 8000870:	3d75c28f 	.word	0x3d75c28f
 8000874:	3e6b851f 	.word	0x3e6b851f
 8000878:	20000638 	.word	0x20000638
 800087c:	200005c8 	.word	0x200005c8
 8000880:	20000174 	.word	0x20000174
 8000884:	20000650 	.word	0x20000650
 8000888:	2000061c 	.word	0x2000061c
 800088c:	20000000 	.word	0x20000000
 8000890:	20000610 	.word	0x20000610
 8000894:	20000614 	.word	0x20000614
 8000898:	20000618 	.word	0x20000618
 800089c:	20000620 	.word	0x20000620
 80008a0:	2000064c 	.word	0x2000064c
 80008a4:	2000064a 	.word	0x2000064a
 80008a8:	0800d258 	.word	0x0800d258
 80008ac:	2000064d 	.word	0x2000064d
 80008b0:	2000064b 	.word	0x2000064b
 80008b4:	0800d260 	.word	0x0800d260
 80008b8:	fffff830 	.word	0xfffff830
	   	 }else if(Str_PS2.attack[7] == 1){
 80008bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <main+0x478>)
 80008be:	7adb      	ldrb	r3, [r3, #11]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d104      	bne.n	80008ce <main+0x416>
	   	    Motor_DutyCycle_EXTRA1(2000);
 80008c4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80008c8:	f008 ff98 	bl	80097fc <Motor_DutyCycle_EXTRA1>
 80008cc:	e002      	b.n	80008d4 <main+0x41c>
	   	 }else{
	   		Motor_DutyCycle_EXTRA1(0);
 80008ce:	2000      	movs	r0, #0
 80008d0:	f008 ff94 	bl	80097fc <Motor_DutyCycle_EXTRA1>
	   	 }


	   	 if(Str_PS2.attack[3] == 1){
 80008d4:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <main+0x478>)
 80008d6:	79db      	ldrb	r3, [r3, #7]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d104      	bne.n	80008e6 <main+0x42e>
	   	    Motor_DutyCycle_EXTRA2(4000);
 80008dc:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80008e0:	f008 ffe4 	bl	80098ac <Motor_DutyCycle_EXTRA2>
 80008e4:	e01d      	b.n	8000922 <main+0x46a>
	   	 }else if(Str_PS2.attack[0] == 1){
 80008e6:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <main+0x478>)
 80008e8:	791b      	ldrb	r3, [r3, #4]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d103      	bne.n	80008f6 <main+0x43e>
		   	Motor_DutyCycle_EXTRA2(-4000);
 80008ee:	4811      	ldr	r0, [pc, #68]	@ (8000934 <main+0x47c>)
 80008f0:	f008 ffdc 	bl	80098ac <Motor_DutyCycle_EXTRA2>
 80008f4:	e015      	b.n	8000922 <main+0x46a>
		 }else{
	   		Motor_DutyCycle_EXTRA2(0);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f008 ffd8 	bl	80098ac <Motor_DutyCycle_EXTRA2>
 80008fc:	e011      	b.n	8000922 <main+0x46a>
	   	 }

         }else{
        	 Motor_DutyCycle_LF(0);
 80008fe:	2000      	movs	r0, #0
 8000900:	f008 fe14 	bl	800952c <Motor_DutyCycle_LF>
        	 Motor_DutyCycle_LB(0);
 8000904:	2000      	movs	r0, #0
 8000906:	f008 fe69 	bl	80095dc <Motor_DutyCycle_LB>
        	 Motor_DutyCycle_RF(0);
 800090a:	2000      	movs	r0, #0
 800090c:	f008 fec2 	bl	8009694 <Motor_DutyCycle_RF>
        	 Motor_DutyCycle_RB(0);
 8000910:	2000      	movs	r0, #0
 8000912:	f008 ff1b 	bl	800974c <Motor_DutyCycle_RB>
        	 Motor_DutyCycle_EXTRA1(0);
 8000916:	2000      	movs	r0, #0
 8000918:	f008 ff70 	bl	80097fc <Motor_DutyCycle_EXTRA1>
        	 Motor_DutyCycle_EXTRA2(0);
 800091c:	2000      	movs	r0, #0
 800091e:	f008 ffc5 	bl	80098ac <Motor_DutyCycle_EXTRA2>
         }
	    PastTime = uwTick;
 8000922:	4b05      	ldr	r3, [pc, #20]	@ (8000938 <main+0x480>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	461a      	mov	r2, r3
 8000928:	4b04      	ldr	r3, [pc, #16]	@ (800093c <main+0x484>)
 800092a:	601a      	str	r2, [r3, #0]
	  if((uwTick - PastTime) > 10){
 800092c:	e662      	b.n	80005f4 <main+0x13c>
 800092e:	bf00      	nop
 8000930:	20000638 	.word	0x20000638
 8000934:	fffff060 	.word	0xfffff060
 8000938:	20000650 	.word	0x20000650
 800093c:	2000061c 	.word	0x2000061c

08000940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b094      	sub	sp, #80	@ 0x50
 8000944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000946:	f107 0320 	add.w	r3, r7, #32
 800094a:	2230      	movs	r2, #48	@ 0x30
 800094c:	2100      	movs	r1, #0
 800094e:	4618      	mov	r0, r3
 8000950:	f00c fc24 	bl	800d19c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000964:	2300      	movs	r3, #0
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	4b28      	ldr	r3, [pc, #160]	@ (8000a0c <SystemClock_Config+0xcc>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096c:	4a27      	ldr	r2, [pc, #156]	@ (8000a0c <SystemClock_Config+0xcc>)
 800096e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000972:	6413      	str	r3, [r2, #64]	@ 0x40
 8000974:	4b25      	ldr	r3, [pc, #148]	@ (8000a0c <SystemClock_Config+0xcc>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	4b22      	ldr	r3, [pc, #136]	@ (8000a10 <SystemClock_Config+0xd0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a21      	ldr	r2, [pc, #132]	@ (8000a10 <SystemClock_Config+0xd0>)
 800098a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	4b1f      	ldr	r3, [pc, #124]	@ (8000a10 <SystemClock_Config+0xd0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800099c:	2301      	movs	r3, #1
 800099e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a6:	2302      	movs	r3, #2
 80009a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 7;
 80009b0:	2307      	movs	r3, #7
 80009b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ba:	2304      	movs	r3, #4
 80009bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80009be:	2308      	movs	r3, #8
 80009c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	f107 0320 	add.w	r3, r7, #32
 80009c6:	4618      	mov	r0, r3
 80009c8:	f004 fc42 	bl	8005250 <HAL_RCC_OscConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009d2:	f000 fe21 	bl	8001618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009da:	2302      	movs	r3, #2
 80009dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	2103      	movs	r1, #3
 80009f4:	4618      	mov	r0, r3
 80009f6:	f004 fea3 	bl	8005740 <HAL_RCC_ClockConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a00:	f000 fe0a 	bl	8001618 <Error_Handler>
  }
}
 8000a04:	bf00      	nop
 8000a06:	3750      	adds	r7, #80	@ 0x50
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40007000 	.word	0x40007000

08000a14 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a26:	4b21      	ldr	r3, [pc, #132]	@ (8000aac <MX_ADC1_Init+0x98>)
 8000a28:	4a21      	ldr	r2, [pc, #132]	@ (8000ab0 <MX_ADC1_Init+0x9c>)
 8000a2a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000aac <MX_ADC1_Init+0x98>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a32:	4b1e      	ldr	r3, [pc, #120]	@ (8000aac <MX_ADC1_Init+0x98>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a38:	4b1c      	ldr	r3, [pc, #112]	@ (8000aac <MX_ADC1_Init+0x98>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000aac <MX_ADC1_Init+0x98>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a44:	4b19      	ldr	r3, [pc, #100]	@ (8000aac <MX_ADC1_Init+0x98>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a4c:	4b17      	ldr	r3, [pc, #92]	@ (8000aac <MX_ADC1_Init+0x98>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a52:	4b16      	ldr	r3, [pc, #88]	@ (8000aac <MX_ADC1_Init+0x98>)
 8000a54:	4a17      	ldr	r2, [pc, #92]	@ (8000ab4 <MX_ADC1_Init+0xa0>)
 8000a56:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a58:	4b14      	ldr	r3, [pc, #80]	@ (8000aac <MX_ADC1_Init+0x98>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <MX_ADC1_Init+0x98>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a64:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <MX_ADC1_Init+0x98>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <MX_ADC1_Init+0x98>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a72:	480e      	ldr	r0, [pc, #56]	@ (8000aac <MX_ADC1_Init+0x98>)
 8000a74:	f001 fbba 	bl	80021ec <HAL_ADC_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000a7e:	f000 fdcb 	bl	8001618 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a82:	2304      	movs	r3, #4
 8000a84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a86:	2301      	movs	r3, #1
 8000a88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a8e:	463b      	mov	r3, r7
 8000a90:	4619      	mov	r1, r3
 8000a92:	4806      	ldr	r0, [pc, #24]	@ (8000aac <MX_ADC1_Init+0x98>)
 8000a94:	f001 fbee 	bl	8002274 <HAL_ADC_ConfigChannel>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000a9e:	f000 fdbb 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	2000012c 	.word	0x2000012c
 8000ab0:	40012000 	.word	0x40012000
 8000ab4:	0f000001 	.word	0x0f000001

08000ab8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000abc:	4b12      	ldr	r3, [pc, #72]	@ (8000b08 <MX_I2C2_Init+0x50>)
 8000abe:	4a13      	ldr	r2, [pc, #76]	@ (8000b0c <MX_I2C2_Init+0x54>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <MX_I2C2_Init+0x50>)
 8000ac4:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <MX_I2C2_Init+0x58>)
 8000ac6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b08 <MX_I2C2_Init+0x50>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <MX_I2C2_Init+0x50>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <MX_I2C2_Init+0x50>)
 8000ad6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ada:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b08 <MX_I2C2_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <MX_I2C2_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	@ (8000b08 <MX_I2C2_Init+0x50>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aee:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <MX_I2C2_Init+0x50>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000af4:	4804      	ldr	r0, [pc, #16]	@ (8000b08 <MX_I2C2_Init+0x50>)
 8000af6:	f002 f935 	bl	8002d64 <HAL_I2C_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b00:	f000 fd8a 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000174 	.word	0x20000174
 8000b0c:	40005800 	.word	0x40005800
 8000b10:	00061a80 	.word	0x00061a80

08000b14 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b18:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <MX_SPI2_Init+0x64>)
 8000b1a:	4a18      	ldr	r2, [pc, #96]	@ (8000b7c <MX_SPI2_Init+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b1e:	4b16      	ldr	r3, [pc, #88]	@ (8000b78 <MX_SPI2_Init+0x64>)
 8000b20:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b26:	4b14      	ldr	r3, [pc, #80]	@ (8000b78 <MX_SPI2_Init+0x64>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <MX_SPI2_Init+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b32:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <MX_SPI2_Init+0x64>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	@ (8000b78 <MX_SPI2_Init+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <MX_SPI2_Init+0x64>)
 8000b40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b44:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b46:	4b0c      	ldr	r3, [pc, #48]	@ (8000b78 <MX_SPI2_Init+0x64>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <MX_SPI2_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b52:	4b09      	ldr	r3, [pc, #36]	@ (8000b78 <MX_SPI2_Init+0x64>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b58:	4b07      	ldr	r3, [pc, #28]	@ (8000b78 <MX_SPI2_Init+0x64>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <MX_SPI2_Init+0x64>)
 8000b60:	220a      	movs	r2, #10
 8000b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b64:	4804      	ldr	r0, [pc, #16]	@ (8000b78 <MX_SPI2_Init+0x64>)
 8000b66:	f005 f80b 	bl	8005b80 <HAL_SPI_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b70:	f000 fd52 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200001c8 	.word	0x200001c8
 8000b7c:	40003800 	.word	0x40003800

08000b80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08c      	sub	sp, #48	@ 0x30
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	2224      	movs	r2, #36	@ 0x24
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f00c fb04 	bl	800d19c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b9c:	4b22      	ldr	r3, [pc, #136]	@ (8000c28 <MX_TIM1_Init+0xa8>)
 8000b9e:	4a23      	ldr	r2, [pc, #140]	@ (8000c2c <MX_TIM1_Init+0xac>)
 8000ba0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ba2:	4b21      	ldr	r3, [pc, #132]	@ (8000c28 <MX_TIM1_Init+0xa8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <MX_TIM1_Init+0xa8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bae:	4b1e      	ldr	r3, [pc, #120]	@ (8000c28 <MX_TIM1_Init+0xa8>)
 8000bb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bb4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <MX_TIM1_Init+0xa8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c28 <MX_TIM1_Init+0xa8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc2:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <MX_TIM1_Init+0xa8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000be0:	2301      	movs	r3, #1
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480d      	ldr	r0, [pc, #52]	@ (8000c28 <MX_TIM1_Init+0xa8>)
 8000bf4:	f005 f9b4 	bl	8005f60 <HAL_TIM_Encoder_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000bfe:	f000 fd0b 	bl	8001618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4806      	ldr	r0, [pc, #24]	@ (8000c28 <MX_TIM1_Init+0xa8>)
 8000c10:	f005 fe1e 	bl	8006850 <HAL_TIMEx_MasterConfigSynchronization>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000c1a:	f000 fcfd 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	3730      	adds	r7, #48	@ 0x30
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000220 	.word	0x20000220
 8000c2c:	40010000 	.word	0x40010000

08000c30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08c      	sub	sp, #48	@ 0x30
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c36:	f107 030c 	add.w	r3, r7, #12
 8000c3a:	2224      	movs	r2, #36	@ 0x24
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f00c faac 	bl	800d19c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c4c:	4b21      	ldr	r3, [pc, #132]	@ (8000cd4 <MX_TIM2_Init+0xa4>)
 8000c4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c54:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd4 <MX_TIM2_Init+0xa4>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd4 <MX_TIM2_Init+0xa4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c60:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd4 <MX_TIM2_Init+0xa4>)
 8000c62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd4 <MX_TIM2_Init+0xa4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6e:	4b19      	ldr	r3, [pc, #100]	@ (8000cd4 <MX_TIM2_Init+0xa4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c74:	2303      	movs	r3, #3
 8000c76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480d      	ldr	r0, [pc, #52]	@ (8000cd4 <MX_TIM2_Init+0xa4>)
 8000ca0:	f005 f95e 	bl	8005f60 <HAL_TIM_Encoder_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000caa:	f000 fcb5 	bl	8001618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4806      	ldr	r0, [pc, #24]	@ (8000cd4 <MX_TIM2_Init+0xa4>)
 8000cbc:	f005 fdc8 	bl	8006850 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000cc6:	f000 fca7 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	3730      	adds	r7, #48	@ 0x30
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000268 	.word	0x20000268

08000cd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08c      	sub	sp, #48	@ 0x30
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	2224      	movs	r2, #36	@ 0x24
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f00c fa58 	bl	800d19c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cf4:	4b20      	ldr	r3, [pc, #128]	@ (8000d78 <MX_TIM3_Init+0xa0>)
 8000cf6:	4a21      	ldr	r2, [pc, #132]	@ (8000d7c <MX_TIM3_Init+0xa4>)
 8000cf8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8000d78 <MX_TIM3_Init+0xa0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d00:	4b1d      	ldr	r3, [pc, #116]	@ (8000d78 <MX_TIM3_Init+0xa0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d06:	4b1c      	ldr	r3, [pc, #112]	@ (8000d78 <MX_TIM3_Init+0xa0>)
 8000d08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000d78 <MX_TIM3_Init+0xa0>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d14:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <MX_TIM3_Init+0xa0>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d22:	2301      	movs	r3, #1
 8000d24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d32:	2301      	movs	r3, #1
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d3e:	f107 030c 	add.w	r3, r7, #12
 8000d42:	4619      	mov	r1, r3
 8000d44:	480c      	ldr	r0, [pc, #48]	@ (8000d78 <MX_TIM3_Init+0xa0>)
 8000d46:	f005 f90b 	bl	8005f60 <HAL_TIM_Encoder_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000d50:	f000 fc62 	bl	8001618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	@ (8000d78 <MX_TIM3_Init+0xa0>)
 8000d62:	f005 fd75 	bl	8006850 <HAL_TIMEx_MasterConfigSynchronization>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000d6c:	f000 fc54 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	3730      	adds	r7, #48	@ 0x30
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200002b0 	.word	0x200002b0
 8000d7c:	40000400 	.word	0x40000400

08000d80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08c      	sub	sp, #48	@ 0x30
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	2224      	movs	r2, #36	@ 0x24
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f00c fa04 	bl	800d19c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d9c:	4b20      	ldr	r3, [pc, #128]	@ (8000e20 <MX_TIM4_Init+0xa0>)
 8000d9e:	4a21      	ldr	r2, [pc, #132]	@ (8000e24 <MX_TIM4_Init+0xa4>)
 8000da0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000da2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e20 <MX_TIM4_Init+0xa0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e20 <MX_TIM4_Init+0xa0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000dae:	4b1c      	ldr	r3, [pc, #112]	@ (8000e20 <MX_TIM4_Init+0xa0>)
 8000db0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000db4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <MX_TIM4_Init+0xa0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbc:	4b18      	ldr	r3, [pc, #96]	@ (8000e20 <MX_TIM4_Init+0xa0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	4619      	mov	r1, r3
 8000dec:	480c      	ldr	r0, [pc, #48]	@ (8000e20 <MX_TIM4_Init+0xa0>)
 8000dee:	f005 f8b7 	bl	8005f60 <HAL_TIM_Encoder_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000df8:	f000 fc0e 	bl	8001618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <MX_TIM4_Init+0xa0>)
 8000e0a:	f005 fd21 	bl	8006850 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000e14:	f000 fc00 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	3730      	adds	r7, #48	@ 0x30
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	200002f8 	.word	0x200002f8
 8000e24:	40000800 	.word	0x40000800

08000e28 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	@ 0x30
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	2224      	movs	r2, #36	@ 0x24
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f00c f9b0 	bl	800d19c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e44:	4b20      	ldr	r3, [pc, #128]	@ (8000ec8 <MX_TIM5_Init+0xa0>)
 8000e46:	4a21      	ldr	r2, [pc, #132]	@ (8000ecc <MX_TIM5_Init+0xa4>)
 8000e48:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec8 <MX_TIM5_Init+0xa0>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e50:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec8 <MX_TIM5_Init+0xa0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000e56:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec8 <MX_TIM5_Init+0xa0>)
 8000e58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e5c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec8 <MX_TIM5_Init+0xa0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e64:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <MX_TIM5_Init+0xa0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e72:	2301      	movs	r3, #1
 8000e74:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e82:	2301      	movs	r3, #1
 8000e84:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	4619      	mov	r1, r3
 8000e94:	480c      	ldr	r0, [pc, #48]	@ (8000ec8 <MX_TIM5_Init+0xa0>)
 8000e96:	f005 f863 	bl	8005f60 <HAL_TIM_Encoder_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000ea0:	f000 fbba 	bl	8001618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <MX_TIM5_Init+0xa0>)
 8000eb2:	f005 fccd 	bl	8006850 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000ebc:	f000 fbac 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	3730      	adds	r7, #48	@ 0x30
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000340 	.word	0x20000340
 8000ecc:	40000c00 	.word	0x40000c00

08000ed0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08c      	sub	sp, #48	@ 0x30
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	2224      	movs	r2, #36	@ 0x24
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f00c f95c 	bl	800d19c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000eec:	4b22      	ldr	r3, [pc, #136]	@ (8000f78 <MX_TIM8_Init+0xa8>)
 8000eee:	4a23      	ldr	r2, [pc, #140]	@ (8000f7c <MX_TIM8_Init+0xac>)
 8000ef0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000ef2:	4b21      	ldr	r3, [pc, #132]	@ (8000f78 <MX_TIM8_Init+0xa8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f78 <MX_TIM8_Init+0xa8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000efe:	4b1e      	ldr	r3, [pc, #120]	@ (8000f78 <MX_TIM8_Init+0xa8>)
 8000f00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f04:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f06:	4b1c      	ldr	r3, [pc, #112]	@ (8000f78 <MX_TIM8_Init+0xa8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <MX_TIM8_Init+0xa8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f12:	4b19      	ldr	r3, [pc, #100]	@ (8000f78 <MX_TIM8_Init+0xa8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f20:	2301      	movs	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f30:	2301      	movs	r3, #1
 8000f32:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	4619      	mov	r1, r3
 8000f42:	480d      	ldr	r0, [pc, #52]	@ (8000f78 <MX_TIM8_Init+0xa8>)
 8000f44:	f005 f80c 	bl	8005f60 <HAL_TIM_Encoder_Init>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8000f4e:	f000 fb63 	bl	8001618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4806      	ldr	r0, [pc, #24]	@ (8000f78 <MX_TIM8_Init+0xa8>)
 8000f60:	f005 fc76 	bl	8006850 <HAL_TIMEx_MasterConfigSynchronization>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8000f6a:	f000 fb55 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	3730      	adds	r7, #48	@ 0x30
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000388 	.word	0x20000388
 8000f7c:	40010400 	.word	0x40010400

08000f80 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f86:	1d3b      	adds	r3, r7, #4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
 8000f94:	615a      	str	r2, [r3, #20]
 8000f96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000f98:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <MX_TIM9_Init+0x98>)
 8000f9a:	4a20      	ldr	r2, [pc, #128]	@ (800101c <MX_TIM9_Init+0x9c>)
 8000f9c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 2-1;
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001018 <MX_TIM9_Init+0x98>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8001018 <MX_TIM9_Init+0x98>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4096-1;
 8000faa:	4b1b      	ldr	r3, [pc, #108]	@ (8001018 <MX_TIM9_Init+0x98>)
 8000fac:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000fb0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb2:	4b19      	ldr	r3, [pc, #100]	@ (8001018 <MX_TIM9_Init+0x98>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb8:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <MX_TIM9_Init+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000fbe:	4816      	ldr	r0, [pc, #88]	@ (8001018 <MX_TIM9_Init+0x98>)
 8000fc0:	f004 feb6 	bl	8005d30 <HAL_TIM_PWM_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8000fca:	f000 fb25 	bl	8001618 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fce:	2360      	movs	r3, #96	@ 0x60
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480c      	ldr	r0, [pc, #48]	@ (8001018 <MX_TIM9_Init+0x98>)
 8000fe6:	f005 f8ef 	bl	80061c8 <HAL_TIM_PWM_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8000ff0:	f000 fb12 	bl	8001618 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4807      	ldr	r0, [pc, #28]	@ (8001018 <MX_TIM9_Init+0x98>)
 8000ffc:	f005 f8e4 	bl	80061c8 <HAL_TIM_PWM_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001006:	f000 fb07 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800100a:	4803      	ldr	r0, [pc, #12]	@ (8001018 <MX_TIM9_Init+0x98>)
 800100c:	f000 fe54 	bl	8001cb8 <HAL_TIM_MspPostInit>

}
 8001010:	bf00      	nop
 8001012:	3720      	adds	r7, #32
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200003d0 	.word	0x200003d0
 800101c:	40014000 	.word	0x40014000

08001020 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
 8001034:	615a      	str	r2, [r3, #20]
 8001036:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001038:	4b1e      	ldr	r3, [pc, #120]	@ (80010b4 <MX_TIM10_Init+0x94>)
 800103a:	4a1f      	ldr	r2, [pc, #124]	@ (80010b8 <MX_TIM10_Init+0x98>)
 800103c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 2-1;
 800103e:	4b1d      	ldr	r3, [pc, #116]	@ (80010b4 <MX_TIM10_Init+0x94>)
 8001040:	2201      	movs	r2, #1
 8001042:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001044:	4b1b      	ldr	r3, [pc, #108]	@ (80010b4 <MX_TIM10_Init+0x94>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4096-1;
 800104a:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <MX_TIM10_Init+0x94>)
 800104c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001050:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001052:	4b18      	ldr	r3, [pc, #96]	@ (80010b4 <MX_TIM10_Init+0x94>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001058:	4b16      	ldr	r3, [pc, #88]	@ (80010b4 <MX_TIM10_Init+0x94>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800105e:	4815      	ldr	r0, [pc, #84]	@ (80010b4 <MX_TIM10_Init+0x94>)
 8001060:	f004 fe17 	bl	8005c92 <HAL_TIM_Base_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800106a:	f000 fad5 	bl	8001618 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800106e:	4811      	ldr	r0, [pc, #68]	@ (80010b4 <MX_TIM10_Init+0x94>)
 8001070:	f004 fe5e 	bl	8005d30 <HAL_TIM_PWM_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800107a:	f000 facd 	bl	8001618 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800107e:	2360      	movs	r3, #96	@ 0x60
 8001080:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2200      	movs	r2, #0
 8001092:	4619      	mov	r1, r3
 8001094:	4807      	ldr	r0, [pc, #28]	@ (80010b4 <MX_TIM10_Init+0x94>)
 8001096:	f005 f897 	bl	80061c8 <HAL_TIM_PWM_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80010a0:	f000 faba 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80010a4:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <MX_TIM10_Init+0x94>)
 80010a6:	f000 fe07 	bl	8001cb8 <HAL_TIM_MspPostInit>

}
 80010aa:	bf00      	nop
 80010ac:	3720      	adds	r7, #32
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000418 	.word	0x20000418
 80010b8:	40014400 	.word	0x40014400

080010bc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
 80010d0:	615a      	str	r2, [r3, #20]
 80010d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80010d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <MX_TIM11_Init+0x94>)
 80010d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001154 <MX_TIM11_Init+0x98>)
 80010d8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 2-1;
 80010da:	4b1d      	ldr	r3, [pc, #116]	@ (8001150 <MX_TIM11_Init+0x94>)
 80010dc:	2201      	movs	r2, #1
 80010de:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001150 <MX_TIM11_Init+0x94>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 4096-1;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <MX_TIM11_Init+0x94>)
 80010e8:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80010ec:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ee:	4b18      	ldr	r3, [pc, #96]	@ (8001150 <MX_TIM11_Init+0x94>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f4:	4b16      	ldr	r3, [pc, #88]	@ (8001150 <MX_TIM11_Init+0x94>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80010fa:	4815      	ldr	r0, [pc, #84]	@ (8001150 <MX_TIM11_Init+0x94>)
 80010fc:	f004 fdc9 	bl	8005c92 <HAL_TIM_Base_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001106:	f000 fa87 	bl	8001618 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800110a:	4811      	ldr	r0, [pc, #68]	@ (8001150 <MX_TIM11_Init+0x94>)
 800110c:	f004 fe10 	bl	8005d30 <HAL_TIM_PWM_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001116:	f000 fa7f 	bl	8001618 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800111a:	2360      	movs	r3, #96	@ 0x60
 800111c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	2200      	movs	r2, #0
 800112e:	4619      	mov	r1, r3
 8001130:	4807      	ldr	r0, [pc, #28]	@ (8001150 <MX_TIM11_Init+0x94>)
 8001132:	f005 f849 	bl	80061c8 <HAL_TIM_PWM_ConfigChannel>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 800113c:	f000 fa6c 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001140:	4803      	ldr	r0, [pc, #12]	@ (8001150 <MX_TIM11_Init+0x94>)
 8001142:	f000 fdb9 	bl	8001cb8 <HAL_TIM_MspPostInit>

}
 8001146:	bf00      	nop
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000460 	.word	0x20000460
 8001154:	40014800 	.word	0x40014800

08001158 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
 800116c:	615a      	str	r2, [r3, #20]
 800116e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001170:	4b1f      	ldr	r3, [pc, #124]	@ (80011f0 <MX_TIM12_Init+0x98>)
 8001172:	4a20      	ldr	r2, [pc, #128]	@ (80011f4 <MX_TIM12_Init+0x9c>)
 8001174:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 2-1;
 8001176:	4b1e      	ldr	r3, [pc, #120]	@ (80011f0 <MX_TIM12_Init+0x98>)
 8001178:	2201      	movs	r2, #1
 800117a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117c:	4b1c      	ldr	r3, [pc, #112]	@ (80011f0 <MX_TIM12_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 4096-1;
 8001182:	4b1b      	ldr	r3, [pc, #108]	@ (80011f0 <MX_TIM12_Init+0x98>)
 8001184:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001188:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118a:	4b19      	ldr	r3, [pc, #100]	@ (80011f0 <MX_TIM12_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001190:	4b17      	ldr	r3, [pc, #92]	@ (80011f0 <MX_TIM12_Init+0x98>)
 8001192:	2200      	movs	r2, #0
 8001194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001196:	4816      	ldr	r0, [pc, #88]	@ (80011f0 <MX_TIM12_Init+0x98>)
 8001198:	f004 fdca 	bl	8005d30 <HAL_TIM_PWM_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80011a2:	f000 fa39 	bl	8001618 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a6:	2360      	movs	r3, #96	@ 0x60
 80011a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2200      	movs	r2, #0
 80011ba:	4619      	mov	r1, r3
 80011bc:	480c      	ldr	r0, [pc, #48]	@ (80011f0 <MX_TIM12_Init+0x98>)
 80011be:	f005 f803 	bl	80061c8 <HAL_TIM_PWM_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80011c8:	f000 fa26 	bl	8001618 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2204      	movs	r2, #4
 80011d0:	4619      	mov	r1, r3
 80011d2:	4807      	ldr	r0, [pc, #28]	@ (80011f0 <MX_TIM12_Init+0x98>)
 80011d4:	f004 fff8 	bl	80061c8 <HAL_TIM_PWM_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 80011de:	f000 fa1b 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80011e2:	4803      	ldr	r0, [pc, #12]	@ (80011f0 <MX_TIM12_Init+0x98>)
 80011e4:	f000 fd68 	bl	8001cb8 <HAL_TIM_MspPostInit>

}
 80011e8:	bf00      	nop
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200004a8 	.word	0x200004a8
 80011f4:	40001800 	.word	0x40001800

080011f8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80011fe:	1d3b      	adds	r3, r7, #4
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
 800120c:	615a      	str	r2, [r3, #20]
 800120e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001210:	4b1e      	ldr	r3, [pc, #120]	@ (800128c <MX_TIM13_Init+0x94>)
 8001212:	4a1f      	ldr	r2, [pc, #124]	@ (8001290 <MX_TIM13_Init+0x98>)
 8001214:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 2-1;
 8001216:	4b1d      	ldr	r3, [pc, #116]	@ (800128c <MX_TIM13_Init+0x94>)
 8001218:	2201      	movs	r2, #1
 800121a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121c:	4b1b      	ldr	r3, [pc, #108]	@ (800128c <MX_TIM13_Init+0x94>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 4096-1;
 8001222:	4b1a      	ldr	r3, [pc, #104]	@ (800128c <MX_TIM13_Init+0x94>)
 8001224:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001228:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122a:	4b18      	ldr	r3, [pc, #96]	@ (800128c <MX_TIM13_Init+0x94>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001230:	4b16      	ldr	r3, [pc, #88]	@ (800128c <MX_TIM13_Init+0x94>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001236:	4815      	ldr	r0, [pc, #84]	@ (800128c <MX_TIM13_Init+0x94>)
 8001238:	f004 fd2b 	bl	8005c92 <HAL_TIM_Base_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001242:	f000 f9e9 	bl	8001618 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001246:	4811      	ldr	r0, [pc, #68]	@ (800128c <MX_TIM13_Init+0x94>)
 8001248:	f004 fd72 	bl	8005d30 <HAL_TIM_PWM_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001252:	f000 f9e1 	bl	8001618 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001256:	2360      	movs	r3, #96	@ 0x60
 8001258:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2200      	movs	r2, #0
 800126a:	4619      	mov	r1, r3
 800126c:	4807      	ldr	r0, [pc, #28]	@ (800128c <MX_TIM13_Init+0x94>)
 800126e:	f004 ffab 	bl	80061c8 <HAL_TIM_PWM_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001278:	f000 f9ce 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800127c:	4803      	ldr	r0, [pc, #12]	@ (800128c <MX_TIM13_Init+0x94>)
 800127e:	f000 fd1b 	bl	8001cb8 <HAL_TIM_MspPostInit>

}
 8001282:	bf00      	nop
 8001284:	3720      	adds	r7, #32
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200004f0 	.word	0x200004f0
 8001290:	40001c00 	.word	0x40001c00

08001294 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
 80012a8:	615a      	str	r2, [r3, #20]
 80012aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80012ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001328 <MX_TIM14_Init+0x94>)
 80012ae:	4a1f      	ldr	r2, [pc, #124]	@ (800132c <MX_TIM14_Init+0x98>)
 80012b0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 2-1;
 80012b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001328 <MX_TIM14_Init+0x94>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <MX_TIM14_Init+0x94>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4096-1;
 80012be:	4b1a      	ldr	r3, [pc, #104]	@ (8001328 <MX_TIM14_Init+0x94>)
 80012c0:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80012c4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c6:	4b18      	ldr	r3, [pc, #96]	@ (8001328 <MX_TIM14_Init+0x94>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012cc:	4b16      	ldr	r3, [pc, #88]	@ (8001328 <MX_TIM14_Init+0x94>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80012d2:	4815      	ldr	r0, [pc, #84]	@ (8001328 <MX_TIM14_Init+0x94>)
 80012d4:	f004 fcdd 	bl	8005c92 <HAL_TIM_Base_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80012de:	f000 f99b 	bl	8001618 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80012e2:	4811      	ldr	r0, [pc, #68]	@ (8001328 <MX_TIM14_Init+0x94>)
 80012e4:	f004 fd24 	bl	8005d30 <HAL_TIM_PWM_Init>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80012ee:	f000 f993 	bl	8001618 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f2:	2360      	movs	r3, #96	@ 0x60
 80012f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2200      	movs	r2, #0
 8001306:	4619      	mov	r1, r3
 8001308:	4807      	ldr	r0, [pc, #28]	@ (8001328 <MX_TIM14_Init+0x94>)
 800130a:	f004 ff5d 	bl	80061c8 <HAL_TIM_PWM_ConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001314:	f000 f980 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001318:	4803      	ldr	r0, [pc, #12]	@ (8001328 <MX_TIM14_Init+0x94>)
 800131a:	f000 fccd 	bl	8001cb8 <HAL_TIM_MspPostInit>

}
 800131e:	bf00      	nop
 8001320:	3720      	adds	r7, #32
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000538 	.word	0x20000538
 800132c:	40002000 	.word	0x40002000

08001330 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <MX_UART4_Init+0x4c>)
 8001336:	4a12      	ldr	r2, [pc, #72]	@ (8001380 <MX_UART4_Init+0x50>)
 8001338:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <MX_UART4_Init+0x4c>)
 800133c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001340:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <MX_UART4_Init+0x4c>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001348:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <MX_UART4_Init+0x4c>)
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800134e:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <MX_UART4_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001354:	4b09      	ldr	r3, [pc, #36]	@ (800137c <MX_UART4_Init+0x4c>)
 8001356:	220c      	movs	r2, #12
 8001358:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135a:	4b08      	ldr	r3, [pc, #32]	@ (800137c <MX_UART4_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001360:	4b06      	ldr	r3, [pc, #24]	@ (800137c <MX_UART4_Init+0x4c>)
 8001362:	2200      	movs	r2, #0
 8001364:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001366:	4805      	ldr	r0, [pc, #20]	@ (800137c <MX_UART4_Init+0x4c>)
 8001368:	f005 faee 	bl	8006948 <HAL_UART_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001372:	f000 f951 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000580 	.word	0x20000580
 8001380:	40004c00 	.word	0x40004c00

08001384 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <MX_USART2_UART_Init+0x4c>)
 800138a:	4a12      	ldr	r2, [pc, #72]	@ (80013d4 <MX_USART2_UART_Init+0x50>)
 800138c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800138e:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <MX_USART2_UART_Init+0x4c>)
 8001390:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001396:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <MX_USART2_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <MX_USART2_UART_Init+0x4c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013a2:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013aa:	2204      	movs	r2, #4
 80013ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ae:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ba:	4805      	ldr	r0, [pc, #20]	@ (80013d0 <MX_USART2_UART_Init+0x4c>)
 80013bc:	f005 fac4 	bl	8006948 <HAL_UART_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013c6:	f000 f927 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200005c8 	.word	0x200005c8
 80013d4:	40004400 	.word	0x40004400

080013d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08c      	sub	sp, #48	@ 0x30
 80013dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	4b54      	ldr	r3, [pc, #336]	@ (8001544 <MX_GPIO_Init+0x16c>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f6:	4a53      	ldr	r2, [pc, #332]	@ (8001544 <MX_GPIO_Init+0x16c>)
 80013f8:	f043 0310 	orr.w	r3, r3, #16
 80013fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fe:	4b51      	ldr	r3, [pc, #324]	@ (8001544 <MX_GPIO_Init+0x16c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	61bb      	str	r3, [r7, #24]
 8001408:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	4b4d      	ldr	r3, [pc, #308]	@ (8001544 <MX_GPIO_Init+0x16c>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a4c      	ldr	r2, [pc, #304]	@ (8001544 <MX_GPIO_Init+0x16c>)
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b4a      	ldr	r3, [pc, #296]	@ (8001544 <MX_GPIO_Init+0x16c>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	4b46      	ldr	r3, [pc, #280]	@ (8001544 <MX_GPIO_Init+0x16c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	4a45      	ldr	r2, [pc, #276]	@ (8001544 <MX_GPIO_Init+0x16c>)
 8001430:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001434:	6313      	str	r3, [r2, #48]	@ 0x30
 8001436:	4b43      	ldr	r3, [pc, #268]	@ (8001544 <MX_GPIO_Init+0x16c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b3f      	ldr	r3, [pc, #252]	@ (8001544 <MX_GPIO_Init+0x16c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	4a3e      	ldr	r2, [pc, #248]	@ (8001544 <MX_GPIO_Init+0x16c>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6313      	str	r3, [r2, #48]	@ 0x30
 8001452:	4b3c      	ldr	r3, [pc, #240]	@ (8001544 <MX_GPIO_Init+0x16c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b38      	ldr	r3, [pc, #224]	@ (8001544 <MX_GPIO_Init+0x16c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	4a37      	ldr	r2, [pc, #220]	@ (8001544 <MX_GPIO_Init+0x16c>)
 8001468:	f043 0302 	orr.w	r3, r3, #2
 800146c:	6313      	str	r3, [r2, #48]	@ 0x30
 800146e:	4b35      	ldr	r3, [pc, #212]	@ (8001544 <MX_GPIO_Init+0x16c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	4b31      	ldr	r3, [pc, #196]	@ (8001544 <MX_GPIO_Init+0x16c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	4a30      	ldr	r2, [pc, #192]	@ (8001544 <MX_GPIO_Init+0x16c>)
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	6313      	str	r3, [r2, #48]	@ 0x30
 800148a:	4b2e      	ldr	r3, [pc, #184]	@ (8001544 <MX_GPIO_Init+0x16c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CE_1_Pin|CE_2_Pin|GPIO_PIN_7|GPIO_PIN_8
 8001496:	2200      	movs	r2, #0
 8001498:	f24b 518f 	movw	r1, #46479	@ 0xb58f
 800149c:	482a      	ldr	r0, [pc, #168]	@ (8001548 <MX_GPIO_Init+0x170>)
 800149e:	f001 fc47 	bl	8002d30 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|LB_DIGI_R_Pin|GPIO_PIN_13|GPIO_PIN_15
                          |EXTRA2_DIGI_R_Pin|RF_DIGI_R_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EXTRA1_DIGI_R_Pin|LF_DIGI_R_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	f242 0120 	movw	r1, #8224	@ 0x2020
 80014a8:	4828      	ldr	r0, [pc, #160]	@ (800154c <MX_GPIO_Init+0x174>)
 80014aa:	f001 fc41 	bl	8002d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	2101      	movs	r1, #1
 80014b2:	4827      	ldr	r0, [pc, #156]	@ (8001550 <MX_GPIO_Init+0x178>)
 80014b4:	f001 fc3c 	bl	8002d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RB_DIGI_R_GPIO_Port, RB_DIGI_R_Pin, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014be:	4825      	ldr	r0, [pc, #148]	@ (8001554 <MX_GPIO_Init+0x17c>)
 80014c0:	f001 fc36 	bl	8002d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CE_1_Pin CE_2_Pin PE7 PE8
                           PE10 LB_DIGI_R_Pin PE13 PE15
                           EXTRA2_DIGI_R_Pin RF_DIGI_R_Pin */
  GPIO_InitStruct.Pin = CE_1_Pin|CE_2_Pin|GPIO_PIN_7|GPIO_PIN_8
 80014c4:	f24b 538f 	movw	r3, #46479	@ 0xb58f
 80014c8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|LB_DIGI_R_Pin|GPIO_PIN_13|GPIO_PIN_15
                          |EXTRA2_DIGI_R_Pin|RF_DIGI_R_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ca:	2301      	movs	r3, #1
 80014cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ce:	2300      	movs	r3, #0
 80014d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014d6:	f107 031c 	add.w	r3, r7, #28
 80014da:	4619      	mov	r1, r3
 80014dc:	481a      	ldr	r0, [pc, #104]	@ (8001548 <MX_GPIO_Init+0x170>)
 80014de:	f001 fa8b 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTRA1_DIGI_R_Pin LF_DIGI_R_Pin */
  GPIO_InitStruct.Pin = EXTRA1_DIGI_R_Pin|LF_DIGI_R_Pin;
 80014e2:	f242 0320 	movw	r3, #8224	@ 0x2020
 80014e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e8:	2301      	movs	r3, #1
 80014ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	4814      	ldr	r0, [pc, #80]	@ (800154c <MX_GPIO_Init+0x174>)
 80014fc:	f001 fa7c 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001500:	2301      	movs	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	2301      	movs	r3, #1
 8001506:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	4619      	mov	r1, r3
 8001516:	480e      	ldr	r0, [pc, #56]	@ (8001550 <MX_GPIO_Init+0x178>)
 8001518:	f001 fa6e 	bl	80029f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RB_DIGI_R_Pin */
  GPIO_InitStruct.Pin = RB_DIGI_R_Pin;
 800151c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RB_DIGI_R_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4619      	mov	r1, r3
 8001534:	4807      	ldr	r0, [pc, #28]	@ (8001554 <MX_GPIO_Init+0x17c>)
 8001536:	f001 fa5f 	bl	80029f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800153a:	bf00      	nop
 800153c:	3730      	adds	r7, #48	@ 0x30
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	40021000 	.word	0x40021000
 800154c:	40020800 	.word	0x40020800
 8001550:	40020400 	.word	0x40020400
 8001554:	40020c00 	.word	0x40020c00

08001558 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2,(uint8_t *)&Str_PS2, sizeof(Str_PS2));
 8001560:	2212      	movs	r2, #18
 8001562:	4926      	ldr	r1, [pc, #152]	@ (80015fc <HAL_UART_RxCpltCallback+0xa4>)
 8001564:	4826      	ldr	r0, [pc, #152]	@ (8001600 <HAL_UART_RxCpltCallback+0xa8>)
 8001566:	f005 fa3f 	bl	80069e8 <HAL_UART_Receive_IT>

//	Vx = map(Joy[1], 0.0f, 255.0f, -128.0f, 127.0f);
//	Vy = map(Joy[0], 0.0f, 255.0f, -128.0f, 127.0f);
//	Vz = map(Joy[3], 0.0f, 255.0f, -128.0f, 127.0f);

	Vx = map(Str_PS2.stickValues[1], 0.0f, 255.0f, 2.0f, -2.0f);
 800156a:	4b24      	ldr	r3, [pc, #144]	@ (80015fc <HAL_UART_RxCpltCallback+0xa4>)
 800156c:	7bdb      	ldrb	r3, [r3, #15]
 800156e:	ee07 3a90 	vmov	s15, r3
 8001572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001576:	eeb8 2a00 	vmov.f32	s4, #128	@ 0xc0000000 -2.0
 800157a:	eef0 1a00 	vmov.f32	s3, #0	@ 0x40000000  2.0
 800157e:	ed9f 1a21 	vldr	s2, [pc, #132]	@ 8001604 <HAL_UART_RxCpltCallback+0xac>
 8001582:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8001608 <HAL_UART_RxCpltCallback+0xb0>
 8001586:	eeb0 0a67 	vmov.f32	s0, s15
 800158a:	f009 f82b 	bl	800a5e4 <map>
 800158e:	eef0 7a40 	vmov.f32	s15, s0
 8001592:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <HAL_UART_RxCpltCallback+0xb4>)
 8001594:	edc3 7a00 	vstr	s15, [r3]
	Vy = map(Str_PS2.stickValues[0], 0.0f, 255.0f, 2.0f, -2.0f);
 8001598:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <HAL_UART_RxCpltCallback+0xa4>)
 800159a:	7b9b      	ldrb	r3, [r3, #14]
 800159c:	ee07 3a90 	vmov	s15, r3
 80015a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a4:	eeb8 2a00 	vmov.f32	s4, #128	@ 0xc0000000 -2.0
 80015a8:	eef0 1a00 	vmov.f32	s3, #0	@ 0x40000000  2.0
 80015ac:	ed9f 1a15 	vldr	s2, [pc, #84]	@ 8001604 <HAL_UART_RxCpltCallback+0xac>
 80015b0:	eddf 0a15 	vldr	s1, [pc, #84]	@ 8001608 <HAL_UART_RxCpltCallback+0xb0>
 80015b4:	eeb0 0a67 	vmov.f32	s0, s15
 80015b8:	f009 f814 	bl	800a5e4 <map>
 80015bc:	eef0 7a40 	vmov.f32	s15, s0
 80015c0:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <HAL_UART_RxCpltCallback+0xb8>)
 80015c2:	edc3 7a00 	vstr	s15, [r3]
	Vz = map(Str_PS2.stickValues[3], 0.0f, 255.0f, 4.0f, -4.0f);
 80015c6:	4b0d      	ldr	r3, [pc, #52]	@ (80015fc <HAL_UART_RxCpltCallback+0xa4>)
 80015c8:	7c5b      	ldrb	r3, [r3, #17]
 80015ca:	ee07 3a90 	vmov	s15, r3
 80015ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015d2:	eeb9 2a00 	vmov.f32	s4, #144	@ 0xc0800000 -4.0
 80015d6:	eef1 1a00 	vmov.f32	s3, #16	@ 0x40800000  4.0
 80015da:	ed9f 1a0a 	vldr	s2, [pc, #40]	@ 8001604 <HAL_UART_RxCpltCallback+0xac>
 80015de:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8001608 <HAL_UART_RxCpltCallback+0xb0>
 80015e2:	eeb0 0a67 	vmov.f32	s0, s15
 80015e6:	f008 fffd 	bl	800a5e4 <map>
 80015ea:	eef0 7a40 	vmov.f32	s15, s0
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <HAL_UART_RxCpltCallback+0xbc>)
 80015f0:	edc3 7a00 	vstr	s15, [r3]
}
 80015f4:	bf00      	nop
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000638 	.word	0x20000638
 8001600:	200005c8 	.word	0x200005c8
 8001604:	437f0000 	.word	0x437f0000
 8001608:	00000000 	.word	0x00000000
 800160c:	20000610 	.word	0x20000610
 8001610:	20000614 	.word	0x20000614
 8001614:	20000618 	.word	0x20000618

08001618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800161c:	b672      	cpsid	i
}
 800161e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <Error_Handler+0x8>

08001624 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <HAL_MspInit+0x4c>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001632:	4a0f      	ldr	r2, [pc, #60]	@ (8001670 <HAL_MspInit+0x4c>)
 8001634:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001638:	6453      	str	r3, [r2, #68]	@ 0x44
 800163a:	4b0d      	ldr	r3, [pc, #52]	@ (8001670 <HAL_MspInit+0x4c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <HAL_MspInit+0x4c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	4a08      	ldr	r2, [pc, #32]	@ (8001670 <HAL_MspInit+0x4c>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001654:	6413      	str	r3, [r2, #64]	@ 0x40
 8001656:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <HAL_MspInit+0x4c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800

08001674 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	@ 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a24      	ldr	r2, [pc, #144]	@ (8001724 <HAL_ADC_MspInit+0xb0>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d141      	bne.n	800171a <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	4b23      	ldr	r3, [pc, #140]	@ (8001728 <HAL_ADC_MspInit+0xb4>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800169e:	4a22      	ldr	r2, [pc, #136]	@ (8001728 <HAL_ADC_MspInit+0xb4>)
 80016a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016a6:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <HAL_ADC_MspInit+0xb4>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001728 <HAL_ADC_MspInit+0xb4>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001728 <HAL_ADC_MspInit+0xb4>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c2:	4b19      	ldr	r3, [pc, #100]	@ (8001728 <HAL_ADC_MspInit+0xb4>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <HAL_ADC_MspInit+0xb4>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4a14      	ldr	r2, [pc, #80]	@ (8001728 <HAL_ADC_MspInit+0xb4>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4b12      	ldr	r3, [pc, #72]	@ (8001728 <HAL_ADC_MspInit+0xb4>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016ea:	2303      	movs	r3, #3
 80016ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016ee:	2303      	movs	r3, #3
 80016f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	480b      	ldr	r0, [pc, #44]	@ (800172c <HAL_ADC_MspInit+0xb8>)
 80016fe:	f001 f97b 	bl	80029f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001702:	2330      	movs	r3, #48	@ 0x30
 8001704:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001706:	2303      	movs	r3, #3
 8001708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	4806      	ldr	r0, [pc, #24]	@ (8001730 <HAL_ADC_MspInit+0xbc>)
 8001716:	f001 f96f 	bl	80029f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	@ 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40012000 	.word	0x40012000
 8001728:	40023800 	.word	0x40023800
 800172c:	40020800 	.word	0x40020800
 8001730:	40020000 	.word	0x40020000

08001734 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	@ 0x28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a19      	ldr	r2, [pc, #100]	@ (80017b8 <HAL_I2C_MspInit+0x84>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d12c      	bne.n	80017b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	4b18      	ldr	r3, [pc, #96]	@ (80017bc <HAL_I2C_MspInit+0x88>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a17      	ldr	r2, [pc, #92]	@ (80017bc <HAL_I2C_MspInit+0x88>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
 8001766:	4b15      	ldr	r3, [pc, #84]	@ (80017bc <HAL_I2C_MspInit+0x88>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001772:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001776:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001778:	2312      	movs	r3, #18
 800177a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001784:	2304      	movs	r3, #4
 8001786:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	480c      	ldr	r0, [pc, #48]	@ (80017c0 <HAL_I2C_MspInit+0x8c>)
 8001790:	f001 f932 	bl	80029f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <HAL_I2C_MspInit+0x88>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179c:	4a07      	ldr	r2, [pc, #28]	@ (80017bc <HAL_I2C_MspInit+0x88>)
 800179e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a4:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <HAL_I2C_MspInit+0x88>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017b0:	bf00      	nop
 80017b2:	3728      	adds	r7, #40	@ 0x28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40005800 	.word	0x40005800
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40020400 	.word	0x40020400

080017c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08a      	sub	sp, #40	@ 0x28
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a28      	ldr	r2, [pc, #160]	@ (8001884 <HAL_SPI_MspInit+0xc0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d14a      	bne.n	800187c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	4b27      	ldr	r3, [pc, #156]	@ (8001888 <HAL_SPI_MspInit+0xc4>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	4a26      	ldr	r2, [pc, #152]	@ (8001888 <HAL_SPI_MspInit+0xc4>)
 80017f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017f6:	4b24      	ldr	r3, [pc, #144]	@ (8001888 <HAL_SPI_MspInit+0xc4>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b20      	ldr	r3, [pc, #128]	@ (8001888 <HAL_SPI_MspInit+0xc4>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	4a1f      	ldr	r2, [pc, #124]	@ (8001888 <HAL_SPI_MspInit+0xc4>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	6313      	str	r3, [r2, #48]	@ 0x30
 8001812:	4b1d      	ldr	r3, [pc, #116]	@ (8001888 <HAL_SPI_MspInit+0xc4>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	4b19      	ldr	r3, [pc, #100]	@ (8001888 <HAL_SPI_MspInit+0xc4>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	4a18      	ldr	r2, [pc, #96]	@ (8001888 <HAL_SPI_MspInit+0xc4>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	6313      	str	r3, [r2, #48]	@ 0x30
 800182e:	4b16      	ldr	r3, [pc, #88]	@ (8001888 <HAL_SPI_MspInit+0xc4>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800183a:	230c      	movs	r3, #12
 800183c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001846:	2303      	movs	r3, #3
 8001848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800184a:	2305      	movs	r3, #5
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4619      	mov	r1, r3
 8001854:	480d      	ldr	r0, [pc, #52]	@ (800188c <HAL_SPI_MspInit+0xc8>)
 8001856:	f001 f8cf 	bl	80029f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800185a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800185e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800186c:	2305      	movs	r3, #5
 800186e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	4806      	ldr	r0, [pc, #24]	@ (8001890 <HAL_SPI_MspInit+0xcc>)
 8001878:	f001 f8be 	bl	80029f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800187c:	bf00      	nop
 800187e:	3728      	adds	r7, #40	@ 0x28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40003800 	.word	0x40003800
 8001888:	40023800 	.word	0x40023800
 800188c:	40020800 	.word	0x40020800
 8001890:	40020400 	.word	0x40020400

08001894 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b094      	sub	sp, #80	@ 0x50
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a8c      	ldr	r2, [pc, #560]	@ (8001ae4 <HAL_TIM_Encoder_MspInit+0x250>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d12d      	bne.n	8001912 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018ba:	4b8b      	ldr	r3, [pc, #556]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	4a8a      	ldr	r2, [pc, #552]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018c6:	4b88      	ldr	r3, [pc, #544]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80018d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80018d6:	4b84      	ldr	r3, [pc, #528]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a83      	ldr	r2, [pc, #524]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018dc:	f043 0310 	orr.w	r3, r3, #16
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b81      	ldr	r3, [pc, #516]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80018ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80018ee:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80018f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018f8:	2302      	movs	r3, #2
 80018fa:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fc:	2303      	movs	r3, #3
 80018fe:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001900:	2301      	movs	r3, #1
 8001902:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001904:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001908:	4619      	mov	r1, r3
 800190a:	4878      	ldr	r0, [pc, #480]	@ (8001aec <HAL_TIM_Encoder_MspInit+0x258>)
 800190c:	f001 f874 	bl	80029f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001910:	e12b      	b.n	8001b6a <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM2)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800191a:	d14b      	bne.n	80019b4 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800191c:	2300      	movs	r3, #0
 800191e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001920:	4b71      	ldr	r3, [pc, #452]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001924:	4a70      	ldr	r2, [pc, #448]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6413      	str	r3, [r2, #64]	@ 0x40
 800192c:	4b6e      	ldr	r3, [pc, #440]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 800192e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	633b      	str	r3, [r7, #48]	@ 0x30
 8001936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	2300      	movs	r3, #0
 800193a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800193c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001940:	4a69      	ldr	r2, [pc, #420]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6313      	str	r3, [r2, #48]	@ 0x30
 8001948:	4b67      	ldr	r3, [pc, #412]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001954:	2300      	movs	r3, #0
 8001956:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001958:	4b63      	ldr	r3, [pc, #396]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195c:	4a62      	ldr	r2, [pc, #392]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 800195e:	f043 0302 	orr.w	r3, r3, #2
 8001962:	6313      	str	r3, [r2, #48]	@ 0x30
 8001964:	4b60      	ldr	r3, [pc, #384]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800196e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = EN_X_A_Pin;
 8001970:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001974:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001982:	2301      	movs	r3, #1
 8001984:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(EN_X_A_GPIO_Port, &GPIO_InitStruct);
 8001986:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800198a:	4619      	mov	r1, r3
 800198c:	4858      	ldr	r0, [pc, #352]	@ (8001af0 <HAL_TIM_Encoder_MspInit+0x25c>)
 800198e:	f001 f833 	bl	80029f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EN_X_B_Pin;
 8001992:	2308      	movs	r3, #8
 8001994:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019a2:	2301      	movs	r3, #1
 80019a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(EN_X_B_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80019aa:	4619      	mov	r1, r3
 80019ac:	4851      	ldr	r0, [pc, #324]	@ (8001af4 <HAL_TIM_Encoder_MspInit+0x260>)
 80019ae:	f001 f823 	bl	80029f8 <HAL_GPIO_Init>
}
 80019b2:	e0da      	b.n	8001b6a <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM3)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a4f      	ldr	r2, [pc, #316]	@ (8001af8 <HAL_TIM_Encoder_MspInit+0x264>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d12c      	bne.n	8001a18 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019c2:	4b49      	ldr	r3, [pc, #292]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	4a48      	ldr	r2, [pc, #288]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ce:	4b46      	ldr	r3, [pc, #280]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80019d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
 80019de:	4b42      	ldr	r3, [pc, #264]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	4a41      	ldr	r2, [pc, #260]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ea:	4b3f      	ldr	r3, [pc, #252]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	623b      	str	r3, [r7, #32]
 80019f4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = EN_Y_A_Pin|EN_Y_B_Pin;
 80019f6:	2330      	movs	r3, #48	@ 0x30
 80019f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019fe:	2302      	movs	r3, #2
 8001a00:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a06:	2302      	movs	r3, #2
 8001a08:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4838      	ldr	r0, [pc, #224]	@ (8001af4 <HAL_TIM_Encoder_MspInit+0x260>)
 8001a12:	f000 fff1 	bl	80029f8 <HAL_GPIO_Init>
}
 8001a16:	e0a8      	b.n	8001b6a <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM4)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a37      	ldr	r2, [pc, #220]	@ (8001afc <HAL_TIM_Encoder_MspInit+0x268>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d12d      	bne.n	8001a7e <HAL_TIM_Encoder_MspInit+0x1ea>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
 8001a26:	4b30      	ldr	r3, [pc, #192]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	4a2f      	ldr	r2, [pc, #188]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a2c:	f043 0304 	orr.w	r3, r3, #4
 8001a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a32:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	61fb      	str	r3, [r7, #28]
 8001a3c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	4b29      	ldr	r3, [pc, #164]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	4a28      	ldr	r2, [pc, #160]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a48:	f043 0308 	orr.w	r3, r3, #8
 8001a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	61bb      	str	r3, [r7, #24]
 8001a58:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001a5a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a70:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001a74:	4619      	mov	r1, r3
 8001a76:	4822      	ldr	r0, [pc, #136]	@ (8001b00 <HAL_TIM_Encoder_MspInit+0x26c>)
 8001a78:	f000 ffbe 	bl	80029f8 <HAL_GPIO_Init>
}
 8001a7c:	e075      	b.n	8001b6a <HAL_TIM_Encoder_MspInit+0x2d6>
  else if(htim_encoder->Instance==TIM5)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a20      	ldr	r2, [pc, #128]	@ (8001b04 <HAL_TIM_Encoder_MspInit+0x270>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d13f      	bne.n	8001b08 <HAL_TIM_Encoder_MspInit+0x274>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	4a15      	ldr	r2, [pc, #84]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a92:	f043 0308 	orr.w	r3, r3, #8
 8001a96:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a98:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	617b      	str	r3, [r7, #20]
 8001aa2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aac:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <HAL_TIM_Encoder_MspInit+0x254>)
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4805      	ldr	r0, [pc, #20]	@ (8001af0 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001adc:	f000 ff8c 	bl	80029f8 <HAL_GPIO_Init>
}
 8001ae0:	e043      	b.n	8001b6a <HAL_TIM_Encoder_MspInit+0x2d6>
 8001ae2:	bf00      	nop
 8001ae4:	40010000 	.word	0x40010000
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40020000 	.word	0x40020000
 8001af4:	40020400 	.word	0x40020400
 8001af8:	40000400 	.word	0x40000400
 8001afc:	40000800 	.word	0x40000800
 8001b00:	40020c00 	.word	0x40020c00
 8001b04:	40000c00 	.word	0x40000c00
  else if(htim_encoder->Instance==TIM8)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a19      	ldr	r2, [pc, #100]	@ (8001b74 <HAL_TIM_Encoder_MspInit+0x2e0>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d12b      	bne.n	8001b6a <HAL_TIM_Encoder_MspInit+0x2d6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b18      	ldr	r3, [pc, #96]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1a:	4a17      	ldr	r2, [pc, #92]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b22:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	4a10      	ldr	r2, [pc, #64]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001b38:	f043 0304 	orr.w	r3, r3, #4
 8001b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b78 <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	f003 0304 	and.w	r3, r3, #4
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b4a:	23c0      	movs	r3, #192	@ 0xc0
 8001b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b52:	2302      	movs	r3, #2
 8001b54:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b56:	2303      	movs	r3, #3
 8001b58:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001b62:	4619      	mov	r1, r3
 8001b64:	4805      	ldr	r0, [pc, #20]	@ (8001b7c <HAL_TIM_Encoder_MspInit+0x2e8>)
 8001b66:	f000 ff47 	bl	80029f8 <HAL_GPIO_Init>
}
 8001b6a:	bf00      	nop
 8001b6c:	3750      	adds	r7, #80	@ 0x50
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40010400 	.word	0x40010400
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020800 	.word	0x40020800

08001b80 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a15      	ldr	r2, [pc, #84]	@ (8001be4 <HAL_TIM_PWM_MspInit+0x64>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d10e      	bne.n	8001bb0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b14      	ldr	r3, [pc, #80]	@ (8001be8 <HAL_TIM_PWM_MspInit+0x68>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	4a13      	ldr	r2, [pc, #76]	@ (8001be8 <HAL_TIM_PWM_MspInit+0x68>)
 8001b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba2:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <HAL_TIM_PWM_MspInit+0x68>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001bae:	e012      	b.n	8001bd6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bec <HAL_TIM_PWM_MspInit+0x6c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d10d      	bne.n	8001bd6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <HAL_TIM_PWM_MspInit+0x68>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	4a09      	ldr	r2, [pc, #36]	@ (8001be8 <HAL_TIM_PWM_MspInit+0x68>)
 8001bc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bca:	4b07      	ldr	r3, [pc, #28]	@ (8001be8 <HAL_TIM_PWM_MspInit+0x68>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	40014000 	.word	0x40014000
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40001800 	.word	0x40001800

08001bf0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b087      	sub	sp, #28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a29      	ldr	r2, [pc, #164]	@ (8001ca4 <HAL_TIM_Base_MspInit+0xb4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d10e      	bne.n	8001c20 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	4b28      	ldr	r3, [pc, #160]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0a:	4a27      	ldr	r2, [pc, #156]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c12:	4b25      	ldr	r3, [pc, #148]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001c1e:	e03a      	b.n	8001c96 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM11)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a21      	ldr	r2, [pc, #132]	@ (8001cac <HAL_TIM_Base_MspInit+0xbc>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d10e      	bne.n	8001c48 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]
}
 8001c46:	e026      	b.n	8001c96 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM13)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a18      	ldr	r2, [pc, #96]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d10e      	bne.n	8001c70 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b14      	ldr	r3, [pc, #80]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	4a13      	ldr	r2, [pc, #76]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c62:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
}
 8001c6e:	e012      	b.n	8001c96 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM14)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb4 <HAL_TIM_Base_MspInit+0xc4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d10d      	bne.n	8001c96 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	4a09      	ldr	r2, [pc, #36]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ca8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
}
 8001c96:	bf00      	nop
 8001c98:	371c      	adds	r7, #28
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40014400 	.word	0x40014400
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40014800 	.word	0x40014800
 8001cb0:	40001c00 	.word	0x40001c00
 8001cb4:	40002000 	.word	0x40002000

08001cb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08e      	sub	sp, #56	@ 0x38
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a6d      	ldr	r2, [pc, #436]	@ (8001e8c <HAL_TIM_MspPostInit+0x1d4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d11e      	bne.n	8001d18 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
 8001cde:	4b6c      	ldr	r3, [pc, #432]	@ (8001e90 <HAL_TIM_MspPostInit+0x1d8>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	4a6b      	ldr	r2, [pc, #428]	@ (8001e90 <HAL_TIM_MspPostInit+0x1d8>)
 8001ce4:	f043 0310 	orr.w	r3, r3, #16
 8001ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cea:	4b69      	ldr	r3, [pc, #420]	@ (8001e90 <HAL_TIM_MspPostInit+0x1d8>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	623b      	str	r3, [r7, #32]
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = EXTRA1_PWM_L_Pin|SERVO_1_Pin;
 8001cf6:	2360      	movs	r3, #96	@ 0x60
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001d06:	2303      	movs	r3, #3
 8001d08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4860      	ldr	r0, [pc, #384]	@ (8001e94 <HAL_TIM_MspPostInit+0x1dc>)
 8001d12:	f000 fe71 	bl	80029f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001d16:	e0b5      	b.n	8001e84 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM10)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a5e      	ldr	r2, [pc, #376]	@ (8001e98 <HAL_TIM_MspPostInit+0x1e0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d11f      	bne.n	8001d62 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	4b5a      	ldr	r3, [pc, #360]	@ (8001e90 <HAL_TIM_MspPostInit+0x1d8>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	4a59      	ldr	r2, [pc, #356]	@ (8001e90 <HAL_TIM_MspPostInit+0x1d8>)
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d32:	4b57      	ldr	r3, [pc, #348]	@ (8001e90 <HAL_TIM_MspPostInit+0x1d8>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	61fb      	str	r3, [r7, #28]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = EXTRA2_PWM_L_Pin;
 8001d3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001d50:	2303      	movs	r3, #3
 8001d52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(EXTRA2_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4850      	ldr	r0, [pc, #320]	@ (8001e9c <HAL_TIM_MspPostInit+0x1e4>)
 8001d5c:	f000 fe4c 	bl	80029f8 <HAL_GPIO_Init>
}
 8001d60:	e090      	b.n	8001e84 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM11)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a4e      	ldr	r2, [pc, #312]	@ (8001ea0 <HAL_TIM_MspPostInit+0x1e8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d11f      	bne.n	8001dac <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
 8001d70:	4b47      	ldr	r3, [pc, #284]	@ (8001e90 <HAL_TIM_MspPostInit+0x1d8>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d74:	4a46      	ldr	r2, [pc, #280]	@ (8001e90 <HAL_TIM_MspPostInit+0x1d8>)
 8001d76:	f043 0302 	orr.w	r3, r3, #2
 8001d7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7c:	4b44      	ldr	r3, [pc, #272]	@ (8001e90 <HAL_TIM_MspPostInit+0x1d8>)
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RF_PWM_L_Pin;
 8001d88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RF_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001d9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001da2:	4619      	mov	r1, r3
 8001da4:	483d      	ldr	r0, [pc, #244]	@ (8001e9c <HAL_TIM_MspPostInit+0x1e4>)
 8001da6:	f000 fe27 	bl	80029f8 <HAL_GPIO_Init>
}
 8001daa:	e06b      	b.n	8001e84 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM12)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a3c      	ldr	r2, [pc, #240]	@ (8001ea4 <HAL_TIM_MspPostInit+0x1ec>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d11f      	bne.n	8001df6 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	4b35      	ldr	r3, [pc, #212]	@ (8001e90 <HAL_TIM_MspPostInit+0x1d8>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	4a34      	ldr	r2, [pc, #208]	@ (8001e90 <HAL_TIM_MspPostInit+0x1d8>)
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc6:	4b32      	ldr	r3, [pc, #200]	@ (8001e90 <HAL_TIM_MspPostInit+0x1d8>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LB_PWM_L_Pin|RB_PWM_L_Pin;
 8001dd2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2300      	movs	r3, #0
 8001de2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001de4:	2309      	movs	r3, #9
 8001de6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dec:	4619      	mov	r1, r3
 8001dee:	482b      	ldr	r0, [pc, #172]	@ (8001e9c <HAL_TIM_MspPostInit+0x1e4>)
 8001df0:	f000 fe02 	bl	80029f8 <HAL_GPIO_Init>
}
 8001df4:	e046      	b.n	8001e84 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM13)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a2b      	ldr	r2, [pc, #172]	@ (8001ea8 <HAL_TIM_MspPostInit+0x1f0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d11e      	bne.n	8001e3e <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e00:	2300      	movs	r3, #0
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	4b22      	ldr	r3, [pc, #136]	@ (8001e90 <HAL_TIM_MspPostInit+0x1d8>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e08:	4a21      	ldr	r2, [pc, #132]	@ (8001e90 <HAL_TIM_MspPostInit+0x1d8>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e10:	4b1f      	ldr	r3, [pc, #124]	@ (8001e90 <HAL_TIM_MspPostInit+0x1d8>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO_2_Pin;
 8001e1c:	2340      	movs	r3, #64	@ 0x40
 8001e1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001e2c:	2309      	movs	r3, #9
 8001e2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(SERVO_2_GPIO_Port, &GPIO_InitStruct);
 8001e30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e34:	4619      	mov	r1, r3
 8001e36:	481d      	ldr	r0, [pc, #116]	@ (8001eac <HAL_TIM_MspPostInit+0x1f4>)
 8001e38:	f000 fdde 	bl	80029f8 <HAL_GPIO_Init>
}
 8001e3c:	e022      	b.n	8001e84 <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM14)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a1b      	ldr	r2, [pc, #108]	@ (8001eb0 <HAL_TIM_MspPostInit+0x1f8>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d11d      	bne.n	8001e84 <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	4b10      	ldr	r3, [pc, #64]	@ (8001e90 <HAL_TIM_MspPostInit+0x1d8>)
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e50:	4a0f      	ldr	r2, [pc, #60]	@ (8001e90 <HAL_TIM_MspPostInit+0x1d8>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e58:	4b0d      	ldr	r3, [pc, #52]	@ (8001e90 <HAL_TIM_MspPostInit+0x1d8>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LF_PWM_L_Pin;
 8001e64:	2380      	movs	r3, #128	@ 0x80
 8001e66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001e74:	2309      	movs	r3, #9
 8001e76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LF_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	480b      	ldr	r0, [pc, #44]	@ (8001eac <HAL_TIM_MspPostInit+0x1f4>)
 8001e80:	f000 fdba 	bl	80029f8 <HAL_GPIO_Init>
}
 8001e84:	bf00      	nop
 8001e86:	3738      	adds	r7, #56	@ 0x38
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40014000 	.word	0x40014000
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40014400 	.word	0x40014400
 8001e9c:	40020400 	.word	0x40020400
 8001ea0:	40014800 	.word	0x40014800
 8001ea4:	40001800 	.word	0x40001800
 8001ea8:	40001c00 	.word	0x40001c00
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	40002000 	.word	0x40002000

08001eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08c      	sub	sp, #48	@ 0x30
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 031c 	add.w	r3, r7, #28
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a36      	ldr	r2, [pc, #216]	@ (8001fac <HAL_UART_MspInit+0xf8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d12d      	bne.n	8001f32 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
 8001eda:	4b35      	ldr	r3, [pc, #212]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	4a34      	ldr	r2, [pc, #208]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001ee0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ee4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ee6:	4b32      	ldr	r3, [pc, #200]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001eee:	61bb      	str	r3, [r7, #24]
 8001ef0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	4a2d      	ldr	r2, [pc, #180]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001efc:	f043 0304 	orr.w	r3, r3, #4
 8001f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f02:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f0e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f20:	2308      	movs	r3, #8
 8001f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f24:	f107 031c 	add.w	r3, r7, #28
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4822      	ldr	r0, [pc, #136]	@ (8001fb4 <HAL_UART_MspInit+0x100>)
 8001f2c:	f000 fd64 	bl	80029f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f30:	e038      	b.n	8001fa4 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a20      	ldr	r2, [pc, #128]	@ (8001fb8 <HAL_UART_MspInit+0x104>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d133      	bne.n	8001fa4 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	4a1a      	ldr	r2, [pc, #104]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001f46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f4c:	4b18      	ldr	r3, [pc, #96]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	4b14      	ldr	r3, [pc, #80]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f60:	4a13      	ldr	r2, [pc, #76]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f68:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <HAL_UART_MspInit+0xfc>)
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f74:	230c      	movs	r3, #12
 8001f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f80:	2303      	movs	r3, #3
 8001f82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f84:	2307      	movs	r3, #7
 8001f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f88:	f107 031c 	add.w	r3, r7, #28
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	480b      	ldr	r0, [pc, #44]	@ (8001fbc <HAL_UART_MspInit+0x108>)
 8001f90:	f000 fd32 	bl	80029f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2100      	movs	r1, #0
 8001f98:	2026      	movs	r0, #38	@ 0x26
 8001f9a:	f000 fc64 	bl	8002866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f9e:	2026      	movs	r0, #38	@ 0x26
 8001fa0:	f000 fc7d 	bl	800289e <HAL_NVIC_EnableIRQ>
}
 8001fa4:	bf00      	nop
 8001fa6:	3730      	adds	r7, #48	@ 0x30
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40004c00 	.word	0x40004c00
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40020800 	.word	0x40020800
 8001fb8:	40004400 	.word	0x40004400
 8001fbc:	40020000 	.word	0x40020000

08001fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <NMI_Handler+0x4>

08001fc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fcc:	bf00      	nop
 8001fce:	e7fd      	b.n	8001fcc <HardFault_Handler+0x4>

08001fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <MemManage_Handler+0x4>

08001fd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <BusFault_Handler+0x4>

08001fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <UsageFault_Handler+0x4>

08001fe8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002016:	f000 f8a5 	bl	8002164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002024:	4802      	ldr	r0, [pc, #8]	@ (8002030 <USART2_IRQHandler+0x10>)
 8002026:	f004 fd05 	bl	8006a34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200005c8 	.word	0x200005c8

08002034 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002038:	4802      	ldr	r0, [pc, #8]	@ (8002044 <OTG_FS_IRQHandler+0x10>)
 800203a:	f001 fffb 	bl	8004034 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20001d3c 	.word	0x20001d3c

08002048 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800204c:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <SystemInit+0x20>)
 800204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002052:	4a05      	ldr	r2, [pc, #20]	@ (8002068 <SystemInit+0x20>)
 8002054:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002058:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <Reset_Handler>:
 800206c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020a4 <LoopFillZerobss+0xe>
 8002070:	f7ff ffea 	bl	8002048 <SystemInit>
 8002074:	480c      	ldr	r0, [pc, #48]	@ (80020a8 <LoopFillZerobss+0x12>)
 8002076:	490d      	ldr	r1, [pc, #52]	@ (80020ac <LoopFillZerobss+0x16>)
 8002078:	4a0d      	ldr	r2, [pc, #52]	@ (80020b0 <LoopFillZerobss+0x1a>)
 800207a:	2300      	movs	r3, #0
 800207c:	e002      	b.n	8002084 <LoopCopyDataInit>

0800207e <CopyDataInit>:
 800207e:	58d4      	ldr	r4, [r2, r3]
 8002080:	50c4      	str	r4, [r0, r3]
 8002082:	3304      	adds	r3, #4

08002084 <LoopCopyDataInit>:
 8002084:	18c4      	adds	r4, r0, r3
 8002086:	428c      	cmp	r4, r1
 8002088:	d3f9      	bcc.n	800207e <CopyDataInit>
 800208a:	4a0a      	ldr	r2, [pc, #40]	@ (80020b4 <LoopFillZerobss+0x1e>)
 800208c:	4c0a      	ldr	r4, [pc, #40]	@ (80020b8 <LoopFillZerobss+0x22>)
 800208e:	2300      	movs	r3, #0
 8002090:	e001      	b.n	8002096 <LoopFillZerobss>

08002092 <FillZerobss>:
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	3204      	adds	r2, #4

08002096 <LoopFillZerobss>:
 8002096:	42a2      	cmp	r2, r4
 8002098:	d3fb      	bcc.n	8002092 <FillZerobss>
 800209a:	f00b f887 	bl	800d1ac <__libc_init_array>
 800209e:	f7fe fa0b 	bl	80004b8 <main>
 80020a2:	4770      	bx	lr
 80020a4:	20020000 	.word	0x20020000
 80020a8:	20000000 	.word	0x20000000
 80020ac:	20000110 	.word	0x20000110
 80020b0:	0800d2d8 	.word	0x0800d2d8
 80020b4:	20000110 	.word	0x20000110
 80020b8:	20002440 	.word	0x20002440

080020bc <ADC_IRQHandler>:
 80020bc:	e7fe      	b.n	80020bc <ADC_IRQHandler>
	...

080020c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002100 <HAL_Init+0x40>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002100 <HAL_Init+0x40>)
 80020ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <HAL_Init+0x40>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002100 <HAL_Init+0x40>)
 80020d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020dc:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <HAL_Init+0x40>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a07      	ldr	r2, [pc, #28]	@ (8002100 <HAL_Init+0x40>)
 80020e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020e8:	2003      	movs	r0, #3
 80020ea:	f000 fbb1 	bl	8002850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ee:	200f      	movs	r0, #15
 80020f0:	f000 f808 	bl	8002104 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020f4:	f7ff fa96 	bl	8001624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40023c00 	.word	0x40023c00

08002104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800210c:	4b12      	ldr	r3, [pc, #72]	@ (8002158 <HAL_InitTick+0x54>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b12      	ldr	r3, [pc, #72]	@ (800215c <HAL_InitTick+0x58>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	4619      	mov	r1, r3
 8002116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800211a:	fbb3 f3f1 	udiv	r3, r3, r1
 800211e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002122:	4618      	mov	r0, r3
 8002124:	f000 fbc9 	bl	80028ba <HAL_SYSTICK_Config>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e00e      	b.n	8002150 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b0f      	cmp	r3, #15
 8002136:	d80a      	bhi.n	800214e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002138:	2200      	movs	r2, #0
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	f04f 30ff 	mov.w	r0, #4294967295
 8002140:	f000 fb91 	bl	8002866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002144:	4a06      	ldr	r2, [pc, #24]	@ (8002160 <HAL_InitTick+0x5c>)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	e000      	b.n	8002150 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	2000000c 	.word	0x2000000c
 800215c:	20000014 	.word	0x20000014
 8002160:	20000010 	.word	0x20000010

08002164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002168:	4b06      	ldr	r3, [pc, #24]	@ (8002184 <HAL_IncTick+0x20>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	4b06      	ldr	r3, [pc, #24]	@ (8002188 <HAL_IncTick+0x24>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4413      	add	r3, r2
 8002174:	4a04      	ldr	r2, [pc, #16]	@ (8002188 <HAL_IncTick+0x24>)
 8002176:	6013      	str	r3, [r2, #0]
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	20000014 	.word	0x20000014
 8002188:	20000650 	.word	0x20000650

0800218c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return uwTick;
 8002190:	4b03      	ldr	r3, [pc, #12]	@ (80021a0 <HAL_GetTick+0x14>)
 8002192:	681b      	ldr	r3, [r3, #0]
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20000650 	.word	0x20000650

080021a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021ac:	f7ff ffee 	bl	800218c <HAL_GetTick>
 80021b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021bc:	d005      	beq.n	80021ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021be:	4b0a      	ldr	r3, [pc, #40]	@ (80021e8 <HAL_Delay+0x44>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	461a      	mov	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4413      	add	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021ca:	bf00      	nop
 80021cc:	f7ff ffde 	bl	800218c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d8f7      	bhi.n	80021cc <HAL_Delay+0x28>
  {
  }
}
 80021dc:	bf00      	nop
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000014 	.word	0x20000014

080021ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f4:	2300      	movs	r3, #0
 80021f6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e033      	b.n	800226a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002206:	2b00      	cmp	r3, #0
 8002208:	d109      	bne.n	800221e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff fa32 	bl	8001674 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b00      	cmp	r3, #0
 8002228:	d118      	bne.n	800225c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002232:	f023 0302 	bic.w	r3, r3, #2
 8002236:	f043 0202 	orr.w	r2, r3, #2
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f93a 	bl	80024b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224e:	f023 0303 	bic.w	r3, r3, #3
 8002252:	f043 0201 	orr.w	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	641a      	str	r2, [r3, #64]	@ 0x40
 800225a:	e001      	b.n	8002260 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002268:	7bfb      	ldrb	r3, [r7, #15]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002288:	2b01      	cmp	r3, #1
 800228a:	d101      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x1c>
 800228c:	2302      	movs	r3, #2
 800228e:	e105      	b.n	800249c <HAL_ADC_ConfigChannel+0x228>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b09      	cmp	r3, #9
 800229e:	d925      	bls.n	80022ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68d9      	ldr	r1, [r3, #12]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	3b1e      	subs	r3, #30
 80022b6:	2207      	movs	r2, #7
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	43da      	mvns	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	400a      	ands	r2, r1
 80022c4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68d9      	ldr	r1, [r3, #12]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	4618      	mov	r0, r3
 80022d8:	4603      	mov	r3, r0
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	4403      	add	r3, r0
 80022de:	3b1e      	subs	r3, #30
 80022e0:	409a      	lsls	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	e022      	b.n	8002332 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6919      	ldr	r1, [r3, #16]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	4613      	mov	r3, r2
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	4413      	add	r3, r2
 8002300:	2207      	movs	r2, #7
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43da      	mvns	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	400a      	ands	r2, r1
 800230e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6919      	ldr	r1, [r3, #16]
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	b29b      	uxth	r3, r3
 8002320:	4618      	mov	r0, r3
 8002322:	4603      	mov	r3, r0
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4403      	add	r3, r0
 8002328:	409a      	lsls	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b06      	cmp	r3, #6
 8002338:	d824      	bhi.n	8002384 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	3b05      	subs	r3, #5
 800234c:	221f      	movs	r2, #31
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43da      	mvns	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	400a      	ands	r2, r1
 800235a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	b29b      	uxth	r3, r3
 8002368:	4618      	mov	r0, r3
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	3b05      	subs	r3, #5
 8002376:	fa00 f203 	lsl.w	r2, r0, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	635a      	str	r2, [r3, #52]	@ 0x34
 8002382:	e04c      	b.n	800241e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b0c      	cmp	r3, #12
 800238a:	d824      	bhi.n	80023d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	3b23      	subs	r3, #35	@ 0x23
 800239e:	221f      	movs	r2, #31
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	43da      	mvns	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	400a      	ands	r2, r1
 80023ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	4618      	mov	r0, r3
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	3b23      	subs	r3, #35	@ 0x23
 80023c8:	fa00 f203 	lsl.w	r2, r0, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	430a      	orrs	r2, r1
 80023d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80023d4:	e023      	b.n	800241e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	3b41      	subs	r3, #65	@ 0x41
 80023e8:	221f      	movs	r2, #31
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	400a      	ands	r2, r1
 80023f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	b29b      	uxth	r3, r3
 8002404:	4618      	mov	r0, r3
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	3b41      	subs	r3, #65	@ 0x41
 8002412:	fa00 f203 	lsl.w	r2, r0, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800241e:	4b22      	ldr	r3, [pc, #136]	@ (80024a8 <HAL_ADC_ConfigChannel+0x234>)
 8002420:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a21      	ldr	r2, [pc, #132]	@ (80024ac <HAL_ADC_ConfigChannel+0x238>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d109      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x1cc>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b12      	cmp	r3, #18
 8002432:	d105      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a19      	ldr	r2, [pc, #100]	@ (80024ac <HAL_ADC_ConfigChannel+0x238>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d123      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x21e>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b10      	cmp	r3, #16
 8002450:	d003      	beq.n	800245a <HAL_ADC_ConfigChannel+0x1e6>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2b11      	cmp	r3, #17
 8002458:	d11b      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b10      	cmp	r3, #16
 800246c:	d111      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800246e:	4b10      	ldr	r3, [pc, #64]	@ (80024b0 <HAL_ADC_ConfigChannel+0x23c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a10      	ldr	r2, [pc, #64]	@ (80024b4 <HAL_ADC_ConfigChannel+0x240>)
 8002474:	fba2 2303 	umull	r2, r3, r2, r3
 8002478:	0c9a      	lsrs	r2, r3, #18
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002484:	e002      	b.n	800248c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	3b01      	subs	r3, #1
 800248a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1f9      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	40012300 	.word	0x40012300
 80024ac:	40012000 	.word	0x40012000
 80024b0:	2000000c 	.word	0x2000000c
 80024b4:	431bde83 	.word	0x431bde83

080024b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024c0:	4b79      	ldr	r3, [pc, #484]	@ (80026a8 <ADC_Init+0x1f0>)
 80024c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	431a      	orrs	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6859      	ldr	r1, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	021a      	lsls	r2, r3, #8
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002510:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6859      	ldr	r1, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002532:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6899      	ldr	r1, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68da      	ldr	r2, [r3, #12]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254a:	4a58      	ldr	r2, [pc, #352]	@ (80026ac <ADC_Init+0x1f4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d022      	beq.n	8002596 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800255e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6899      	ldr	r1, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002580:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	6899      	ldr	r1, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	e00f      	b.n	80025b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0202 	bic.w	r2, r2, #2
 80025c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6899      	ldr	r1, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	7e1b      	ldrb	r3, [r3, #24]
 80025d0:	005a      	lsls	r2, r3, #1
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d01b      	beq.n	800261c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002602:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6859      	ldr	r1, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800260e:	3b01      	subs	r3, #1
 8002610:	035a      	lsls	r2, r3, #13
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	605a      	str	r2, [r3, #4]
 800261a:	e007      	b.n	800262c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800262a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800263a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	3b01      	subs	r3, #1
 8002648:	051a      	lsls	r2, r3, #20
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	689a      	ldr	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002660:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6899      	ldr	r1, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800266e:	025a      	lsls	r2, r3, #9
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689a      	ldr	r2, [r3, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002686:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6899      	ldr	r1, [r3, #8]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	029a      	lsls	r2, r3, #10
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	609a      	str	r2, [r3, #8]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	40012300 	.word	0x40012300
 80026ac:	0f000001 	.word	0x0f000001

080026b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c0:	4b0c      	ldr	r3, [pc, #48]	@ (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026cc:	4013      	ands	r3, r2
 80026ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026e2:	4a04      	ldr	r2, [pc, #16]	@ (80026f4 <__NVIC_SetPriorityGrouping+0x44>)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	60d3      	str	r3, [r2, #12]
}
 80026e8:	bf00      	nop
 80026ea:	3714      	adds	r7, #20
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026fc:	4b04      	ldr	r3, [pc, #16]	@ (8002710 <__NVIC_GetPriorityGrouping+0x18>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	0a1b      	lsrs	r3, r3, #8
 8002702:	f003 0307 	and.w	r3, r3, #7
}
 8002706:	4618      	mov	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	e000ed00 	.word	0xe000ed00

08002714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800271e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002722:	2b00      	cmp	r3, #0
 8002724:	db0b      	blt.n	800273e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	f003 021f 	and.w	r2, r3, #31
 800272c:	4907      	ldr	r1, [pc, #28]	@ (800274c <__NVIC_EnableIRQ+0x38>)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	2001      	movs	r0, #1
 8002736:	fa00 f202 	lsl.w	r2, r0, r2
 800273a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	e000e100 	.word	0xe000e100

08002750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002760:	2b00      	cmp	r3, #0
 8002762:	db0a      	blt.n	800277a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	490c      	ldr	r1, [pc, #48]	@ (800279c <__NVIC_SetPriority+0x4c>)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	0112      	lsls	r2, r2, #4
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	440b      	add	r3, r1
 8002774:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002778:	e00a      	b.n	8002790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4908      	ldr	r1, [pc, #32]	@ (80027a0 <__NVIC_SetPriority+0x50>)
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	3b04      	subs	r3, #4
 8002788:	0112      	lsls	r2, r2, #4
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	440b      	add	r3, r1
 800278e:	761a      	strb	r2, [r3, #24]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000e100 	.word	0xe000e100
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	@ 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f1c3 0307 	rsb	r3, r3, #7
 80027be:	2b04      	cmp	r3, #4
 80027c0:	bf28      	it	cs
 80027c2:	2304      	movcs	r3, #4
 80027c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3304      	adds	r3, #4
 80027ca:	2b06      	cmp	r3, #6
 80027cc:	d902      	bls.n	80027d4 <NVIC_EncodePriority+0x30>
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3b03      	subs	r3, #3
 80027d2:	e000      	b.n	80027d6 <NVIC_EncodePriority+0x32>
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d8:	f04f 32ff 	mov.w	r2, #4294967295
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43da      	mvns	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	401a      	ands	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ec:	f04f 31ff 	mov.w	r1, #4294967295
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	43d9      	mvns	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027fc:	4313      	orrs	r3, r2
         );
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3724      	adds	r7, #36	@ 0x24
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800281c:	d301      	bcc.n	8002822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800281e:	2301      	movs	r3, #1
 8002820:	e00f      	b.n	8002842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002822:	4a0a      	ldr	r2, [pc, #40]	@ (800284c <SysTick_Config+0x40>)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3b01      	subs	r3, #1
 8002828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800282a:	210f      	movs	r1, #15
 800282c:	f04f 30ff 	mov.w	r0, #4294967295
 8002830:	f7ff ff8e 	bl	8002750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002834:	4b05      	ldr	r3, [pc, #20]	@ (800284c <SysTick_Config+0x40>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800283a:	4b04      	ldr	r3, [pc, #16]	@ (800284c <SysTick_Config+0x40>)
 800283c:	2207      	movs	r2, #7
 800283e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	e000e010 	.word	0xe000e010

08002850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff ff29 	bl	80026b0 <__NVIC_SetPriorityGrouping>
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002866:	b580      	push	{r7, lr}
 8002868:	b086      	sub	sp, #24
 800286a:	af00      	add	r7, sp, #0
 800286c:	4603      	mov	r3, r0
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002878:	f7ff ff3e 	bl	80026f8 <__NVIC_GetPriorityGrouping>
 800287c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	6978      	ldr	r0, [r7, #20]
 8002884:	f7ff ff8e 	bl	80027a4 <NVIC_EncodePriority>
 8002888:	4602      	mov	r2, r0
 800288a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff ff5d 	bl	8002750 <__NVIC_SetPriority>
}
 8002896:	bf00      	nop
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b082      	sub	sp, #8
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	4603      	mov	r3, r0
 80028a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff31 	bl	8002714 <__NVIC_EnableIRQ>
}
 80028b2:	bf00      	nop
 80028b4:	3708      	adds	r7, #8
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b082      	sub	sp, #8
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff ffa2 	bl	800280c <SysTick_Config>
 80028c8:	4603      	mov	r3, r0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028de:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028e0:	f7ff fc54 	bl	800218c <HAL_GetTick>
 80028e4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d008      	beq.n	8002904 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2280      	movs	r2, #128	@ 0x80
 80028f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e052      	b.n	80029aa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0216 	bic.w	r2, r2, #22
 8002912:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695a      	ldr	r2, [r3, #20]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002922:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002928:	2b00      	cmp	r3, #0
 800292a:	d103      	bne.n	8002934 <HAL_DMA_Abort+0x62>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002930:	2b00      	cmp	r3, #0
 8002932:	d007      	beq.n	8002944 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0208 	bic.w	r2, r2, #8
 8002942:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002954:	e013      	b.n	800297e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002956:	f7ff fc19 	bl	800218c <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b05      	cmp	r3, #5
 8002962:	d90c      	bls.n	800297e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2220      	movs	r2, #32
 8002968:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2203      	movs	r2, #3
 800296e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e015      	b.n	80029aa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1e4      	bne.n	8002956 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002990:	223f      	movs	r2, #63	@ 0x3f
 8002992:	409a      	lsls	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d004      	beq.n	80029d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2280      	movs	r2, #128	@ 0x80
 80029ca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e00c      	b.n	80029ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2205      	movs	r2, #5
 80029d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
	...

080029f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b089      	sub	sp, #36	@ 0x24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
 8002a12:	e16b      	b.n	8002cec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a14:	2201      	movs	r2, #1
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4013      	ands	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	f040 815a 	bne.w	8002ce6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d005      	beq.n	8002a4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d130      	bne.n	8002aac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	005b      	lsls	r3, r3, #1
 8002a54:	2203      	movs	r2, #3
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a80:	2201      	movs	r2, #1
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 0201 	and.w	r2, r3, #1
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d017      	beq.n	8002ae8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d123      	bne.n	8002b3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	08da      	lsrs	r2, r3, #3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3208      	adds	r2, #8
 8002afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	220f      	movs	r2, #15
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	08da      	lsrs	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3208      	adds	r2, #8
 8002b36:	69b9      	ldr	r1, [r7, #24]
 8002b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	2203      	movs	r2, #3
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 0203 	and.w	r2, r3, #3
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80b4 	beq.w	8002ce6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	4b60      	ldr	r3, [pc, #384]	@ (8002d04 <HAL_GPIO_Init+0x30c>)
 8002b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b86:	4a5f      	ldr	r2, [pc, #380]	@ (8002d04 <HAL_GPIO_Init+0x30c>)
 8002b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b8e:	4b5d      	ldr	r3, [pc, #372]	@ (8002d04 <HAL_GPIO_Init+0x30c>)
 8002b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b9a:	4a5b      	ldr	r2, [pc, #364]	@ (8002d08 <HAL_GPIO_Init+0x310>)
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	089b      	lsrs	r3, r3, #2
 8002ba0:	3302      	adds	r3, #2
 8002ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f003 0303 	and.w	r3, r3, #3
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	220f      	movs	r2, #15
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a52      	ldr	r2, [pc, #328]	@ (8002d0c <HAL_GPIO_Init+0x314>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d02b      	beq.n	8002c1e <HAL_GPIO_Init+0x226>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a51      	ldr	r2, [pc, #324]	@ (8002d10 <HAL_GPIO_Init+0x318>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d025      	beq.n	8002c1a <HAL_GPIO_Init+0x222>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a50      	ldr	r2, [pc, #320]	@ (8002d14 <HAL_GPIO_Init+0x31c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d01f      	beq.n	8002c16 <HAL_GPIO_Init+0x21e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a4f      	ldr	r2, [pc, #316]	@ (8002d18 <HAL_GPIO_Init+0x320>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d019      	beq.n	8002c12 <HAL_GPIO_Init+0x21a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a4e      	ldr	r2, [pc, #312]	@ (8002d1c <HAL_GPIO_Init+0x324>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <HAL_GPIO_Init+0x216>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a4d      	ldr	r2, [pc, #308]	@ (8002d20 <HAL_GPIO_Init+0x328>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00d      	beq.n	8002c0a <HAL_GPIO_Init+0x212>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a4c      	ldr	r2, [pc, #304]	@ (8002d24 <HAL_GPIO_Init+0x32c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d007      	beq.n	8002c06 <HAL_GPIO_Init+0x20e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a4b      	ldr	r2, [pc, #300]	@ (8002d28 <HAL_GPIO_Init+0x330>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d101      	bne.n	8002c02 <HAL_GPIO_Init+0x20a>
 8002bfe:	2307      	movs	r3, #7
 8002c00:	e00e      	b.n	8002c20 <HAL_GPIO_Init+0x228>
 8002c02:	2308      	movs	r3, #8
 8002c04:	e00c      	b.n	8002c20 <HAL_GPIO_Init+0x228>
 8002c06:	2306      	movs	r3, #6
 8002c08:	e00a      	b.n	8002c20 <HAL_GPIO_Init+0x228>
 8002c0a:	2305      	movs	r3, #5
 8002c0c:	e008      	b.n	8002c20 <HAL_GPIO_Init+0x228>
 8002c0e:	2304      	movs	r3, #4
 8002c10:	e006      	b.n	8002c20 <HAL_GPIO_Init+0x228>
 8002c12:	2303      	movs	r3, #3
 8002c14:	e004      	b.n	8002c20 <HAL_GPIO_Init+0x228>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e002      	b.n	8002c20 <HAL_GPIO_Init+0x228>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <HAL_GPIO_Init+0x228>
 8002c1e:	2300      	movs	r3, #0
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	f002 0203 	and.w	r2, r2, #3
 8002c26:	0092      	lsls	r2, r2, #2
 8002c28:	4093      	lsls	r3, r2
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c30:	4935      	ldr	r1, [pc, #212]	@ (8002d08 <HAL_GPIO_Init+0x310>)
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	089b      	lsrs	r3, r3, #2
 8002c36:	3302      	adds	r3, #2
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d2c <HAL_GPIO_Init+0x334>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c62:	4a32      	ldr	r2, [pc, #200]	@ (8002d2c <HAL_GPIO_Init+0x334>)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c68:	4b30      	ldr	r3, [pc, #192]	@ (8002d2c <HAL_GPIO_Init+0x334>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c8c:	4a27      	ldr	r2, [pc, #156]	@ (8002d2c <HAL_GPIO_Init+0x334>)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c92:	4b26      	ldr	r3, [pc, #152]	@ (8002d2c <HAL_GPIO_Init+0x334>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d2c <HAL_GPIO_Init+0x334>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d2c <HAL_GPIO_Init+0x334>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ce0:	4a12      	ldr	r2, [pc, #72]	@ (8002d2c <HAL_GPIO_Init+0x334>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	2b0f      	cmp	r3, #15
 8002cf0:	f67f ae90 	bls.w	8002a14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3724      	adds	r7, #36	@ 0x24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	40020000 	.word	0x40020000
 8002d10:	40020400 	.word	0x40020400
 8002d14:	40020800 	.word	0x40020800
 8002d18:	40020c00 	.word	0x40020c00
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40021400 	.word	0x40021400
 8002d24:	40021800 	.word	0x40021800
 8002d28:	40021c00 	.word	0x40021c00
 8002d2c:	40013c00 	.word	0x40013c00

08002d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	807b      	strh	r3, [r7, #2]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d40:	787b      	ldrb	r3, [r7, #1]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d46:	887a      	ldrh	r2, [r7, #2]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d4c:	e003      	b.n	8002d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d4e:	887b      	ldrh	r3, [r7, #2]
 8002d50:	041a      	lsls	r2, r3, #16
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	619a      	str	r2, [r3, #24]
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
	...

08002d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e12b      	b.n	8002fce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fe fcd2 	bl	8001734 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2224      	movs	r2, #36	@ 0x24
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0201 	bic.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002db6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dc8:	f002 feb2 	bl	8005b30 <HAL_RCC_GetPCLK1Freq>
 8002dcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	4a81      	ldr	r2, [pc, #516]	@ (8002fd8 <HAL_I2C_Init+0x274>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d807      	bhi.n	8002de8 <HAL_I2C_Init+0x84>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4a80      	ldr	r2, [pc, #512]	@ (8002fdc <HAL_I2C_Init+0x278>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	bf94      	ite	ls
 8002de0:	2301      	movls	r3, #1
 8002de2:	2300      	movhi	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e006      	b.n	8002df6 <HAL_I2C_Init+0x92>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4a7d      	ldr	r2, [pc, #500]	@ (8002fe0 <HAL_I2C_Init+0x27c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	bf94      	ite	ls
 8002df0:	2301      	movls	r3, #1
 8002df2:	2300      	movhi	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0e7      	b.n	8002fce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4a78      	ldr	r2, [pc, #480]	@ (8002fe4 <HAL_I2C_Init+0x280>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	0c9b      	lsrs	r3, r3, #18
 8002e08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4a6a      	ldr	r2, [pc, #424]	@ (8002fd8 <HAL_I2C_Init+0x274>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d802      	bhi.n	8002e38 <HAL_I2C_Init+0xd4>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	3301      	adds	r3, #1
 8002e36:	e009      	b.n	8002e4c <HAL_I2C_Init+0xe8>
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e3e:	fb02 f303 	mul.w	r3, r2, r3
 8002e42:	4a69      	ldr	r2, [pc, #420]	@ (8002fe8 <HAL_I2C_Init+0x284>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	099b      	lsrs	r3, r3, #6
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	430b      	orrs	r3, r1
 8002e52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	495c      	ldr	r1, [pc, #368]	@ (8002fd8 <HAL_I2C_Init+0x274>)
 8002e68:	428b      	cmp	r3, r1
 8002e6a:	d819      	bhi.n	8002ea0 <HAL_I2C_Init+0x13c>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1e59      	subs	r1, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e7a:	1c59      	adds	r1, r3, #1
 8002e7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e80:	400b      	ands	r3, r1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_I2C_Init+0x138>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1e59      	subs	r1, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e94:	3301      	adds	r3, #1
 8002e96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9a:	e051      	b.n	8002f40 <HAL_I2C_Init+0x1dc>
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	e04f      	b.n	8002f40 <HAL_I2C_Init+0x1dc>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d111      	bne.n	8002ecc <HAL_I2C_Init+0x168>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	1e58      	subs	r0, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	440b      	add	r3, r1
 8002eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eba:	3301      	adds	r3, #1
 8002ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf0c      	ite	eq
 8002ec4:	2301      	moveq	r3, #1
 8002ec6:	2300      	movne	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	e012      	b.n	8002ef2 <HAL_I2C_Init+0x18e>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	1e58      	subs	r0, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6859      	ldr	r1, [r3, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	0099      	lsls	r1, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_I2C_Init+0x196>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e022      	b.n	8002f40 <HAL_I2C_Init+0x1dc>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10e      	bne.n	8002f20 <HAL_I2C_Init+0x1bc>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1e58      	subs	r0, r3, #1
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6859      	ldr	r1, [r3, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	440b      	add	r3, r1
 8002f10:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f14:	3301      	adds	r3, #1
 8002f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f1e:	e00f      	b.n	8002f40 <HAL_I2C_Init+0x1dc>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1e58      	subs	r0, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	0099      	lsls	r1, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f36:	3301      	adds	r3, #1
 8002f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	6809      	ldr	r1, [r1, #0]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69da      	ldr	r2, [r3, #28]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6911      	ldr	r1, [r2, #16]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	68d2      	ldr	r2, [r2, #12]
 8002f7a:	4311      	orrs	r1, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6812      	ldr	r2, [r2, #0]
 8002f80:	430b      	orrs	r3, r1
 8002f82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	000186a0 	.word	0x000186a0
 8002fdc:	001e847f 	.word	0x001e847f
 8002fe0:	003d08ff 	.word	0x003d08ff
 8002fe4:	431bde83 	.word	0x431bde83
 8002fe8:	10624dd3 	.word	0x10624dd3

08002fec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b088      	sub	sp, #32
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	4608      	mov	r0, r1
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	817b      	strh	r3, [r7, #10]
 8002ffe:	460b      	mov	r3, r1
 8003000:	813b      	strh	r3, [r7, #8]
 8003002:	4613      	mov	r3, r2
 8003004:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003006:	f7ff f8c1 	bl	800218c <HAL_GetTick>
 800300a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b20      	cmp	r3, #32
 8003016:	f040 80d9 	bne.w	80031cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	2319      	movs	r3, #25
 8003020:	2201      	movs	r2, #1
 8003022:	496d      	ldr	r1, [pc, #436]	@ (80031d8 <HAL_I2C_Mem_Write+0x1ec>)
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 fc8b 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003030:	2302      	movs	r3, #2
 8003032:	e0cc      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_I2C_Mem_Write+0x56>
 800303e:	2302      	movs	r3, #2
 8003040:	e0c5      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b01      	cmp	r3, #1
 8003056:	d007      	beq.n	8003068 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0201 	orr.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003076:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2221      	movs	r2, #33	@ 0x21
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2240      	movs	r2, #64	@ 0x40
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a3a      	ldr	r2, [r7, #32]
 8003092:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003098:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4a4d      	ldr	r2, [pc, #308]	@ (80031dc <HAL_I2C_Mem_Write+0x1f0>)
 80030a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030aa:	88f8      	ldrh	r0, [r7, #6]
 80030ac:	893a      	ldrh	r2, [r7, #8]
 80030ae:	8979      	ldrh	r1, [r7, #10]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	4603      	mov	r3, r0
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 fac2 	bl	8003644 <I2C_RequestMemoryWrite>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d052      	beq.n	800316c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e081      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ca:	697a      	ldr	r2, [r7, #20]
 80030cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 fd50 	bl	8003b74 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00d      	beq.n	80030f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d107      	bne.n	80030f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e06b      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fa:	781a      	ldrb	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800311c:	b29b      	uxth	r3, r3
 800311e:	3b01      	subs	r3, #1
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b04      	cmp	r3, #4
 8003132:	d11b      	bne.n	800316c <HAL_I2C_Mem_Write+0x180>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003138:	2b00      	cmp	r3, #0
 800313a:	d017      	beq.n	800316c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	781a      	ldrb	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003156:	3b01      	subs	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1aa      	bne.n	80030ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 fd43 	bl	8003c04 <I2C_WaitOnBTFFlagUntilTimeout>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00d      	beq.n	80031a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003188:	2b04      	cmp	r3, #4
 800318a:	d107      	bne.n	800319c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800319a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e016      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	e000      	b.n	80031ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031cc:	2302      	movs	r3, #2
  }
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	00100002 	.word	0x00100002
 80031dc:	ffff0000 	.word	0xffff0000

080031e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08c      	sub	sp, #48	@ 0x30
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	4608      	mov	r0, r1
 80031ea:	4611      	mov	r1, r2
 80031ec:	461a      	mov	r2, r3
 80031ee:	4603      	mov	r3, r0
 80031f0:	817b      	strh	r3, [r7, #10]
 80031f2:	460b      	mov	r3, r1
 80031f4:	813b      	strh	r3, [r7, #8]
 80031f6:	4613      	mov	r3, r2
 80031f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031fa:	f7fe ffc7 	bl	800218c <HAL_GetTick>
 80031fe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b20      	cmp	r3, #32
 800320a:	f040 8214 	bne.w	8003636 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003210:	9300      	str	r3, [sp, #0]
 8003212:	2319      	movs	r3, #25
 8003214:	2201      	movs	r2, #1
 8003216:	497b      	ldr	r1, [pc, #492]	@ (8003404 <HAL_I2C_Mem_Read+0x224>)
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 fb91 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003224:	2302      	movs	r3, #2
 8003226:	e207      	b.n	8003638 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_I2C_Mem_Read+0x56>
 8003232:	2302      	movs	r3, #2
 8003234:	e200      	b.n	8003638 <HAL_I2C_Mem_Read+0x458>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d007      	beq.n	800325c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0201 	orr.w	r2, r2, #1
 800325a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800326a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2222      	movs	r2, #34	@ 0x22
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2240      	movs	r2, #64	@ 0x40
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003286:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800328c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4a5b      	ldr	r2, [pc, #364]	@ (8003408 <HAL_I2C_Mem_Read+0x228>)
 800329c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800329e:	88f8      	ldrh	r0, [r7, #6]
 80032a0:	893a      	ldrh	r2, [r7, #8]
 80032a2:	8979      	ldrh	r1, [r7, #10]
 80032a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a6:	9301      	str	r3, [sp, #4]
 80032a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	4603      	mov	r3, r0
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 fa5e 	bl	8003770 <I2C_RequestMemoryRead>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e1bc      	b.n	8003638 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d113      	bne.n	80032ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c6:	2300      	movs	r3, #0
 80032c8:	623b      	str	r3, [r7, #32]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	695b      	ldr	r3, [r3, #20]
 80032d0:	623b      	str	r3, [r7, #32]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	623b      	str	r3, [r7, #32]
 80032da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e190      	b.n	8003610 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d11b      	bne.n	800332e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003304:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003306:	2300      	movs	r3, #0
 8003308:	61fb      	str	r3, [r7, #28]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	e170      	b.n	8003610 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003332:	2b02      	cmp	r3, #2
 8003334:	d11b      	bne.n	800336e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003344:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003354:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	e150      	b.n	8003610 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	617b      	str	r3, [r7, #20]
 8003382:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003384:	e144      	b.n	8003610 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338a:	2b03      	cmp	r3, #3
 800338c:	f200 80f1 	bhi.w	8003572 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003394:	2b01      	cmp	r3, #1
 8003396:	d123      	bne.n	80033e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800339a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 fc79 	bl	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e145      	b.n	8003638 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29a      	uxth	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033de:	e117      	b.n	8003610 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d14e      	bne.n	8003486 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ee:	2200      	movs	r2, #0
 80033f0:	4906      	ldr	r1, [pc, #24]	@ (800340c <HAL_I2C_Mem_Read+0x22c>)
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 faa4 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d008      	beq.n	8003410 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e11a      	b.n	8003638 <HAL_I2C_Mem_Read+0x458>
 8003402:	bf00      	nop
 8003404:	00100002 	.word	0x00100002
 8003408:	ffff0000 	.word	0xffff0000
 800340c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800341e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691a      	ldr	r2, [r3, #16]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003432:	1c5a      	adds	r2, r3, #1
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800343c:	3b01      	subs	r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003448:	b29b      	uxth	r3, r3
 800344a:	3b01      	subs	r3, #1
 800344c:	b29a      	uxth	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346e:	3b01      	subs	r3, #1
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800347a:	b29b      	uxth	r3, r3
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003484:	e0c4      	b.n	8003610 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800348c:	2200      	movs	r2, #0
 800348e:	496c      	ldr	r1, [pc, #432]	@ (8003640 <HAL_I2C_Mem_Read+0x460>)
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fa55 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0cb      	b.n	8003638 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691a      	ldr	r2, [r3, #16]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ba:	b2d2      	uxtb	r2, r2
 80034bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d8:	b29b      	uxth	r3, r3
 80034da:	3b01      	subs	r3, #1
 80034dc:	b29a      	uxth	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e8:	2200      	movs	r2, #0
 80034ea:	4955      	ldr	r1, [pc, #340]	@ (8003640 <HAL_I2C_Mem_Read+0x460>)
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 fa27 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e09d      	b.n	8003638 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800350a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691a      	ldr	r2, [r3, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003534:	b29b      	uxth	r3, r3
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003570:	e04e      	b.n	8003610 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003574:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fb8c 	bl	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e058      	b.n	8003638 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d124      	bne.n	8003610 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d107      	bne.n	80035de <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035dc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	691a      	ldr	r2, [r3, #16]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003614:	2b00      	cmp	r3, #0
 8003616:	f47f aeb6 	bne.w	8003386 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003632:	2300      	movs	r3, #0
 8003634:	e000      	b.n	8003638 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003636:	2302      	movs	r3, #2
  }
}
 8003638:	4618      	mov	r0, r3
 800363a:	3728      	adds	r7, #40	@ 0x28
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	00010004 	.word	0x00010004

08003644 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af02      	add	r7, sp, #8
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	4608      	mov	r0, r1
 800364e:	4611      	mov	r1, r2
 8003650:	461a      	mov	r2, r3
 8003652:	4603      	mov	r3, r0
 8003654:	817b      	strh	r3, [r7, #10]
 8003656:	460b      	mov	r3, r1
 8003658:	813b      	strh	r3, [r7, #8]
 800365a:	4613      	mov	r3, r2
 800365c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800366c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	2200      	movs	r2, #0
 8003676:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f960 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00d      	beq.n	80036a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003694:	d103      	bne.n	800369e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800369c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e05f      	b.n	8003762 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036a2:	897b      	ldrh	r3, [r7, #10]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	461a      	mov	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80036b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b4:	6a3a      	ldr	r2, [r7, #32]
 80036b6:	492d      	ldr	r1, [pc, #180]	@ (800376c <I2C_RequestMemoryWrite+0x128>)
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 f9bb 	bl	8003a34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e04c      	b.n	8003762 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e0:	6a39      	ldr	r1, [r7, #32]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fa46 	bl	8003b74 <I2C_WaitOnTXEFlagUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00d      	beq.n	800370a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d107      	bne.n	8003706 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003704:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e02b      	b.n	8003762 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800370a:	88fb      	ldrh	r3, [r7, #6]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d105      	bne.n	800371c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003710:	893b      	ldrh	r3, [r7, #8]
 8003712:	b2da      	uxtb	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	611a      	str	r2, [r3, #16]
 800371a:	e021      	b.n	8003760 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800371c:	893b      	ldrh	r3, [r7, #8]
 800371e:	0a1b      	lsrs	r3, r3, #8
 8003720:	b29b      	uxth	r3, r3
 8003722:	b2da      	uxtb	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800372a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800372c:	6a39      	ldr	r1, [r7, #32]
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 fa20 	bl	8003b74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00d      	beq.n	8003756 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	2b04      	cmp	r3, #4
 8003740:	d107      	bne.n	8003752 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003750:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e005      	b.n	8003762 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003756:	893b      	ldrh	r3, [r7, #8]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	00010002 	.word	0x00010002

08003770 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b088      	sub	sp, #32
 8003774:	af02      	add	r7, sp, #8
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	4608      	mov	r0, r1
 800377a:	4611      	mov	r1, r2
 800377c:	461a      	mov	r2, r3
 800377e:	4603      	mov	r3, r0
 8003780:	817b      	strh	r3, [r7, #10]
 8003782:	460b      	mov	r3, r1
 8003784:	813b      	strh	r3, [r7, #8]
 8003786:	4613      	mov	r3, r2
 8003788:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003798:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 f8c2 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d00d      	beq.n	80037de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037d0:	d103      	bne.n	80037da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e0aa      	b.n	8003934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037de:	897b      	ldrh	r3, [r7, #10]
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	461a      	mov	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80037ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f0:	6a3a      	ldr	r2, [r7, #32]
 80037f2:	4952      	ldr	r1, [pc, #328]	@ (800393c <I2C_RequestMemoryRead+0x1cc>)
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f91d 	bl	8003a34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e097      	b.n	8003934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	617b      	str	r3, [r7, #20]
 8003818:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800381a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800381c:	6a39      	ldr	r1, [r7, #32]
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 f9a8 	bl	8003b74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00d      	beq.n	8003846 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382e:	2b04      	cmp	r3, #4
 8003830:	d107      	bne.n	8003842 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003840:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e076      	b.n	8003934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003846:	88fb      	ldrh	r3, [r7, #6]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d105      	bne.n	8003858 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800384c:	893b      	ldrh	r3, [r7, #8]
 800384e:	b2da      	uxtb	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	611a      	str	r2, [r3, #16]
 8003856:	e021      	b.n	800389c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003858:	893b      	ldrh	r3, [r7, #8]
 800385a:	0a1b      	lsrs	r3, r3, #8
 800385c:	b29b      	uxth	r3, r3
 800385e:	b2da      	uxtb	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003868:	6a39      	ldr	r1, [r7, #32]
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 f982 	bl	8003b74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00d      	beq.n	8003892 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	2b04      	cmp	r3, #4
 800387c:	d107      	bne.n	800388e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800388c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e050      	b.n	8003934 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003892:	893b      	ldrh	r3, [r7, #8]
 8003894:	b2da      	uxtb	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800389c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800389e:	6a39      	ldr	r1, [r7, #32]
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 f967 	bl	8003b74 <I2C_WaitOnTXEFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00d      	beq.n	80038c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d107      	bne.n	80038c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e035      	b.n	8003934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	6a3b      	ldr	r3, [r7, #32]
 80038de:	2200      	movs	r2, #0
 80038e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 f82b 	bl	8003940 <I2C_WaitOnFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00d      	beq.n	800390c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038fe:	d103      	bne.n	8003908 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003906:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e013      	b.n	8003934 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800390c:	897b      	ldrh	r3, [r7, #10]
 800390e:	b2db      	uxtb	r3, r3
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	b2da      	uxtb	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800391c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391e:	6a3a      	ldr	r2, [r7, #32]
 8003920:	4906      	ldr	r1, [pc, #24]	@ (800393c <I2C_RequestMemoryRead+0x1cc>)
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f886 	bl	8003a34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	00010002 	.word	0x00010002

08003940 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	603b      	str	r3, [r7, #0]
 800394c:	4613      	mov	r3, r2
 800394e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003950:	e048      	b.n	80039e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003958:	d044      	beq.n	80039e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395a:	f7fe fc17 	bl	800218c <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d302      	bcc.n	8003970 <I2C_WaitOnFlagUntilTimeout+0x30>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d139      	bne.n	80039e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	0c1b      	lsrs	r3, r3, #16
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b01      	cmp	r3, #1
 8003978:	d10d      	bne.n	8003996 <I2C_WaitOnFlagUntilTimeout+0x56>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	43da      	mvns	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	4013      	ands	r3, r2
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	e00c      	b.n	80039b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	43da      	mvns	r2, r3
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	4013      	ands	r3, r2
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf0c      	ite	eq
 80039a8:	2301      	moveq	r3, #1
 80039aa:	2300      	movne	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	461a      	mov	r2, r3
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d116      	bne.n	80039e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d0:	f043 0220 	orr.w	r2, r3, #32
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e023      	b.n	8003a2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	0c1b      	lsrs	r3, r3, #16
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d10d      	bne.n	8003a0a <I2C_WaitOnFlagUntilTimeout+0xca>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	43da      	mvns	r2, r3
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	4013      	ands	r3, r2
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	bf0c      	ite	eq
 8003a00:	2301      	moveq	r3, #1
 8003a02:	2300      	movne	r3, #0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	461a      	mov	r2, r3
 8003a08:	e00c      	b.n	8003a24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	43da      	mvns	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	4013      	ands	r3, r2
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bf0c      	ite	eq
 8003a1c:	2301      	moveq	r3, #1
 8003a1e:	2300      	movne	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d093      	beq.n	8003952 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a42:	e071      	b.n	8003b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a52:	d123      	bne.n	8003a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a88:	f043 0204 	orr.w	r2, r3, #4
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e067      	b.n	8003b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa2:	d041      	beq.n	8003b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa4:	f7fe fb72 	bl	800218c <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d302      	bcc.n	8003aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d136      	bne.n	8003b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	0c1b      	lsrs	r3, r3, #16
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d10c      	bne.n	8003ade <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	43da      	mvns	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bf14      	ite	ne
 8003ad6:	2301      	movne	r3, #1
 8003ad8:	2300      	moveq	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	e00b      	b.n	8003af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	43da      	mvns	r2, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bf14      	ite	ne
 8003af0:	2301      	movne	r3, #1
 8003af2:	2300      	moveq	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d016      	beq.n	8003b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	f043 0220 	orr.w	r2, r3, #32
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e021      	b.n	8003b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	0c1b      	lsrs	r3, r3, #16
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d10c      	bne.n	8003b4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	43da      	mvns	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	bf14      	ite	ne
 8003b44:	2301      	movne	r3, #1
 8003b46:	2300      	moveq	r3, #0
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	e00b      	b.n	8003b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	43da      	mvns	r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4013      	ands	r3, r2
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	bf14      	ite	ne
 8003b5e:	2301      	movne	r3, #1
 8003b60:	2300      	moveq	r3, #0
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f47f af6d 	bne.w	8003a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b80:	e034      	b.n	8003bec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 f8e3 	bl	8003d4e <I2C_IsAcknowledgeFailed>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e034      	b.n	8003bfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b98:	d028      	beq.n	8003bec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9a:	f7fe faf7 	bl	800218c <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d302      	bcc.n	8003bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d11d      	bne.n	8003bec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bba:	2b80      	cmp	r3, #128	@ 0x80
 8003bbc:	d016      	beq.n	8003bec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd8:	f043 0220 	orr.w	r2, r3, #32
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e007      	b.n	8003bfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bf6:	2b80      	cmp	r3, #128	@ 0x80
 8003bf8:	d1c3      	bne.n	8003b82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c10:	e034      	b.n	8003c7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f89b 	bl	8003d4e <I2C_IsAcknowledgeFailed>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e034      	b.n	8003c8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c28:	d028      	beq.n	8003c7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2a:	f7fe faaf 	bl	800218c <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d302      	bcc.n	8003c40 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d11d      	bne.n	8003c7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d016      	beq.n	8003c7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c68:	f043 0220 	orr.w	r2, r3, #32
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e007      	b.n	8003c8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f003 0304 	and.w	r3, r3, #4
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d1c3      	bne.n	8003c12 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ca0:	e049      	b.n	8003d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	f003 0310 	and.w	r3, r3, #16
 8003cac:	2b10      	cmp	r3, #16
 8003cae:	d119      	bne.n	8003ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0210 	mvn.w	r2, #16
 8003cb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e030      	b.n	8003d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce4:	f7fe fa52 	bl	800218c <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d302      	bcc.n	8003cfa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d11d      	bne.n	8003d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d04:	2b40      	cmp	r3, #64	@ 0x40
 8003d06:	d016      	beq.n	8003d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d22:	f043 0220 	orr.w	r2, r3, #32
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e007      	b.n	8003d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d40:	2b40      	cmp	r3, #64	@ 0x40
 8003d42:	d1ae      	bne.n	8003ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d64:	d11b      	bne.n	8003d9e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d6e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8a:	f043 0204 	orr.w	r2, r3, #4
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e101      	b.n	8003fc2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d106      	bne.n	8003dde <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f008 fecb 	bl	800cb74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2203      	movs	r2, #3
 8003de2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dec:	d102      	bne.n	8003df4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f003 fe30 	bl	8007a5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	7c1a      	ldrb	r2, [r3, #16]
 8003e06:	f88d 2000 	strb.w	r2, [sp]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e0e:	f003 fd0f 	bl	8007830 <USB_CoreInit>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d005      	beq.n	8003e24 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e0ce      	b.n	8003fc2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2100      	movs	r1, #0
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f003 fe28 	bl	8007a80 <USB_SetCurrentMode>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d005      	beq.n	8003e42 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2202      	movs	r2, #2
 8003e3a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e0bf      	b.n	8003fc2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e42:	2300      	movs	r3, #0
 8003e44:	73fb      	strb	r3, [r7, #15]
 8003e46:	e04a      	b.n	8003ede <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003e48:	7bfa      	ldrb	r2, [r7, #15]
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	3315      	adds	r3, #21
 8003e58:	2201      	movs	r2, #1
 8003e5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e5c:	7bfa      	ldrb	r2, [r7, #15]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	3314      	adds	r3, #20
 8003e6c:	7bfa      	ldrb	r2, [r7, #15]
 8003e6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e70:	7bfa      	ldrb	r2, [r7, #15]
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	b298      	uxth	r0, r3
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	332e      	adds	r3, #46	@ 0x2e
 8003e84:	4602      	mov	r2, r0
 8003e86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e88:	7bfa      	ldrb	r2, [r7, #15]
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	4413      	add	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	440b      	add	r3, r1
 8003e96:	3318      	adds	r3, #24
 8003e98:	2200      	movs	r2, #0
 8003e9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e9c:	7bfa      	ldrb	r2, [r7, #15]
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	331c      	adds	r3, #28
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003eb0:	7bfa      	ldrb	r2, [r7, #15]
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	3320      	adds	r3, #32
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ec4:	7bfa      	ldrb	r2, [r7, #15]
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	3324      	adds	r3, #36	@ 0x24
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
 8003eda:	3301      	adds	r3, #1
 8003edc:	73fb      	strb	r3, [r7, #15]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	791b      	ldrb	r3, [r3, #4]
 8003ee2:	7bfa      	ldrb	r2, [r7, #15]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d3af      	bcc.n	8003e48 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ee8:	2300      	movs	r3, #0
 8003eea:	73fb      	strb	r3, [r7, #15]
 8003eec:	e044      	b.n	8003f78 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003eee:	7bfa      	ldrb	r2, [r7, #15]
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003f00:	2200      	movs	r2, #0
 8003f02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003f04:	7bfa      	ldrb	r2, [r7, #15]
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003f16:	7bfa      	ldrb	r2, [r7, #15]
 8003f18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003f1a:	7bfa      	ldrb	r2, [r7, #15]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003f30:	7bfa      	ldrb	r2, [r7, #15]
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	4613      	mov	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	4413      	add	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	440b      	add	r3, r1
 8003f3e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003f46:	7bfa      	ldrb	r2, [r7, #15]
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	4413      	add	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	440b      	add	r3, r1
 8003f54:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f5c:	7bfa      	ldrb	r2, [r7, #15]
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	4613      	mov	r3, r2
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f72:	7bfb      	ldrb	r3, [r7, #15]
 8003f74:	3301      	adds	r3, #1
 8003f76:	73fb      	strb	r3, [r7, #15]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	791b      	ldrb	r3, [r3, #4]
 8003f7c:	7bfa      	ldrb	r2, [r7, #15]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d3b5      	bcc.n	8003eee <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6818      	ldr	r0, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	7c1a      	ldrb	r2, [r3, #16]
 8003f8a:	f88d 2000 	strb.w	r2, [sp]
 8003f8e:	3304      	adds	r3, #4
 8003f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f92:	f003 fdc1 	bl	8007b18 <USB_DevInit>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e00c      	b.n	8003fc2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f004 fe0b 	bl	8008bd6 <USB_DevDisconnect>

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_PCD_Start+0x1c>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e022      	b.n	800402c <HAL_PCD_Start+0x62>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d009      	beq.n	800400e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d105      	bne.n	800400e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004006:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f003 fd12 	bl	8007a3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f004 fdb9 	bl	8008b94 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004034:	b590      	push	{r4, r7, lr}
 8004036:	b08d      	sub	sp, #52	@ 0x34
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f004 fe77 	bl	8008d3e <USB_GetMode>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	f040 848c 	bne.w	8004970 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f004 fddb 	bl	8008c18 <USB_ReadInterrupts>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8482 	beq.w	800496e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	0a1b      	lsrs	r3, r3, #8
 8004074:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f004 fdc8 	bl	8008c18 <USB_ReadInterrupts>
 8004088:	4603      	mov	r3, r0
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b02      	cmp	r3, #2
 8004090:	d107      	bne.n	80040a2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695a      	ldr	r2, [r3, #20]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f002 0202 	and.w	r2, r2, #2
 80040a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f004 fdb6 	bl	8008c18 <USB_ReadInterrupts>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f003 0310 	and.w	r3, r3, #16
 80040b2:	2b10      	cmp	r3, #16
 80040b4:	d161      	bne.n	800417a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699a      	ldr	r2, [r3, #24]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0210 	bic.w	r2, r2, #16
 80040c4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	f003 020f 	and.w	r2, r3, #15
 80040d2:	4613      	mov	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	4413      	add	r3, r2
 80040e2:	3304      	adds	r3, #4
 80040e4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	0c5b      	lsrs	r3, r3, #17
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d124      	bne.n	800413c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80040f8:	4013      	ands	r3, r2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d035      	beq.n	800416a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	091b      	lsrs	r3, r3, #4
 8004106:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004108:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800410c:	b29b      	uxth	r3, r3
 800410e:	461a      	mov	r2, r3
 8004110:	6a38      	ldr	r0, [r7, #32]
 8004112:	f004 fbed 	bl	80088f0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	091b      	lsrs	r3, r3, #4
 800411e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004122:	441a      	add	r2, r3
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	695a      	ldr	r2, [r3, #20]
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	091b      	lsrs	r3, r3, #4
 8004130:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004134:	441a      	add	r2, r3
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	615a      	str	r2, [r3, #20]
 800413a:	e016      	b.n	800416a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	0c5b      	lsrs	r3, r3, #17
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	2b06      	cmp	r3, #6
 8004146:	d110      	bne.n	800416a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800414e:	2208      	movs	r2, #8
 8004150:	4619      	mov	r1, r3
 8004152:	6a38      	ldr	r0, [r7, #32]
 8004154:	f004 fbcc 	bl	80088f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	695a      	ldr	r2, [r3, #20]
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	091b      	lsrs	r3, r3, #4
 8004160:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004164:	441a      	add	r2, r3
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	699a      	ldr	r2, [r3, #24]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f042 0210 	orr.w	r2, r2, #16
 8004178:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4618      	mov	r0, r3
 8004180:	f004 fd4a 	bl	8008c18 <USB_ReadInterrupts>
 8004184:	4603      	mov	r3, r0
 8004186:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800418a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800418e:	f040 80a7 	bne.w	80042e0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4618      	mov	r0, r3
 800419c:	f004 fd4f 	bl	8008c3e <USB_ReadDevAllOutEpInterrupt>
 80041a0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80041a2:	e099      	b.n	80042d8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80041a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 808e 	beq.w	80042cc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	4611      	mov	r1, r2
 80041ba:	4618      	mov	r0, r3
 80041bc:	f004 fd73 	bl	8008ca6 <USB_ReadDevOutEPInterrupt>
 80041c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00c      	beq.n	80041e6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80041cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041d8:	461a      	mov	r2, r3
 80041da:	2301      	movs	r3, #1
 80041dc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80041de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 fea3 	bl	8004f2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f003 0308 	and.w	r3, r3, #8
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00c      	beq.n	800420a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80041f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041fc:	461a      	mov	r2, r3
 80041fe:	2308      	movs	r3, #8
 8004200:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004202:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 ff79 	bl	80050fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	f003 0310 	and.w	r3, r3, #16
 8004210:	2b00      	cmp	r3, #0
 8004212:	d008      	beq.n	8004226 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004220:	461a      	mov	r2, r3
 8004222:	2310      	movs	r3, #16
 8004224:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d030      	beq.n	8004292 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004238:	2b80      	cmp	r3, #128	@ 0x80
 800423a:	d109      	bne.n	8004250 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800424a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800424e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004252:	4613      	mov	r3, r2
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	4413      	add	r3, r2
 8004262:	3304      	adds	r3, #4
 8004264:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	78db      	ldrb	r3, [r3, #3]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d108      	bne.n	8004280 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2200      	movs	r2, #0
 8004272:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004276:	b2db      	uxtb	r3, r3
 8004278:	4619      	mov	r1, r3
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f008 fd80 	bl	800cd80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004282:	015a      	lsls	r2, r3, #5
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	4413      	add	r3, r2
 8004288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800428c:	461a      	mov	r2, r3
 800428e:	2302      	movs	r3, #2
 8004290:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f003 0320 	and.w	r3, r3, #32
 8004298:	2b00      	cmp	r3, #0
 800429a:	d008      	beq.n	80042ae <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800429c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a8:	461a      	mov	r2, r3
 80042aa:	2320      	movs	r3, #32
 80042ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d009      	beq.n	80042cc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80042b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042c4:	461a      	mov	r2, r3
 80042c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80042ca:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80042cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ce:	3301      	adds	r3, #1
 80042d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80042d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d4:	085b      	lsrs	r3, r3, #1
 80042d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80042d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f47f af62 	bne.w	80041a4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f004 fc97 	bl	8008c18 <USB_ReadInterrupts>
 80042ea:	4603      	mov	r3, r0
 80042ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042f0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042f4:	f040 80db 	bne.w	80044ae <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f004 fcb8 	bl	8008c72 <USB_ReadDevAllInEpInterrupt>
 8004302:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004308:	e0cd      	b.n	80044a6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800430a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80c2 	beq.w	800449a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	4611      	mov	r1, r2
 8004320:	4618      	mov	r0, r3
 8004322:	f004 fcde 	bl	8008ce2 <USB_ReadDevInEPInterrupt>
 8004326:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d057      	beq.n	80043e2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	f003 030f 	and.w	r3, r3, #15
 8004338:	2201      	movs	r2, #1
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004346:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	43db      	mvns	r3, r3
 800434c:	69f9      	ldr	r1, [r7, #28]
 800434e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004352:	4013      	ands	r3, r2
 8004354:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004362:	461a      	mov	r2, r3
 8004364:	2301      	movs	r3, #1
 8004366:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	799b      	ldrb	r3, [r3, #6]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d132      	bne.n	80043d6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004374:	4613      	mov	r3, r2
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	4413      	add	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	440b      	add	r3, r1
 800437e:	3320      	adds	r3, #32
 8004380:	6819      	ldr	r1, [r3, #0]
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004386:	4613      	mov	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4403      	add	r3, r0
 8004390:	331c      	adds	r3, #28
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4419      	add	r1, r3
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800439a:	4613      	mov	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	4413      	add	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4403      	add	r3, r0
 80043a4:	3320      	adds	r3, #32
 80043a6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80043a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d113      	bne.n	80043d6 <HAL_PCD_IRQHandler+0x3a2>
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b2:	4613      	mov	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	4413      	add	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	3324      	adds	r3, #36	@ 0x24
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d108      	bne.n	80043d6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6818      	ldr	r0, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043ce:	461a      	mov	r2, r3
 80043d0:	2101      	movs	r1, #1
 80043d2:	f004 fce5 	bl	8008da0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80043d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	4619      	mov	r1, r3
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f008 fc4a 	bl	800cc76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d008      	beq.n	80043fe <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80043ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043f8:	461a      	mov	r2, r3
 80043fa:	2308      	movs	r3, #8
 80043fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f003 0310 	and.w	r3, r3, #16
 8004404:	2b00      	cmp	r3, #0
 8004406:	d008      	beq.n	800441a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004414:	461a      	mov	r2, r3
 8004416:	2310      	movs	r3, #16
 8004418:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004430:	461a      	mov	r2, r3
 8004432:	2340      	movs	r3, #64	@ 0x40
 8004434:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f003 0302 	and.w	r3, r3, #2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d023      	beq.n	8004488 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004440:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004442:	6a38      	ldr	r0, [r7, #32]
 8004444:	f003 fccc 	bl	8007de0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004448:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800444a:	4613      	mov	r3, r2
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	4413      	add	r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	3310      	adds	r3, #16
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	4413      	add	r3, r2
 8004458:	3304      	adds	r3, #4
 800445a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	78db      	ldrb	r3, [r3, #3]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d108      	bne.n	8004476 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	2200      	movs	r2, #0
 8004468:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	b2db      	uxtb	r3, r3
 800446e:	4619      	mov	r1, r3
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f008 fc97 	bl	800cda4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	4413      	add	r3, r2
 800447e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004482:	461a      	mov	r2, r3
 8004484:	2302      	movs	r3, #2
 8004486:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004492:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 fcbd 	bl	8004e14 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	3301      	adds	r3, #1
 800449e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80044a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a2:	085b      	lsrs	r3, r3, #1
 80044a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80044a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f47f af2e 	bne.w	800430a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f004 fbb0 	bl	8008c18 <USB_ReadInterrupts>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044c2:	d122      	bne.n	800450a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044d2:	f023 0301 	bic.w	r3, r3, #1
 80044d6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d108      	bne.n	80044f4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80044ea:	2100      	movs	r1, #0
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fea3 	bl	8005238 <HAL_PCDEx_LPM_Callback>
 80044f2:	e002      	b.n	80044fa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f008 fc35 	bl	800cd64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695a      	ldr	r2, [r3, #20]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004508:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4618      	mov	r0, r3
 8004510:	f004 fb82 	bl	8008c18 <USB_ReadInterrupts>
 8004514:	4603      	mov	r3, r0
 8004516:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800451a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800451e:	d112      	bne.n	8004546 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b01      	cmp	r3, #1
 800452e:	d102      	bne.n	8004536 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f008 fbf1 	bl	800cd18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695a      	ldr	r2, [r3, #20]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004544:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f004 fb64 	bl	8008c18 <USB_ReadInterrupts>
 8004550:	4603      	mov	r3, r0
 8004552:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800455a:	f040 80b7 	bne.w	80046cc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800456c:	f023 0301 	bic.w	r3, r3, #1
 8004570:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2110      	movs	r1, #16
 8004578:	4618      	mov	r0, r3
 800457a:	f003 fc31 	bl	8007de0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800457e:	2300      	movs	r3, #0
 8004580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004582:	e046      	b.n	8004612 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004590:	461a      	mov	r2, r3
 8004592:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004596:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045a8:	0151      	lsls	r1, r2, #5
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	440a      	add	r2, r1
 80045ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045b2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80045b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80045b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045c4:	461a      	mov	r2, r3
 80045c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80045ca:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80045cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045dc:	0151      	lsls	r1, r2, #5
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	440a      	add	r2, r1
 80045e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80045ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80045ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045fc:	0151      	lsls	r1, r2, #5
 80045fe:	69fa      	ldr	r2, [r7, #28]
 8004600:	440a      	add	r2, r1
 8004602:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004606:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800460a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800460c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800460e:	3301      	adds	r3, #1
 8004610:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	791b      	ldrb	r3, [r3, #4]
 8004616:	461a      	mov	r2, r3
 8004618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800461a:	4293      	cmp	r3, r2
 800461c:	d3b2      	bcc.n	8004584 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800462c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004630:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	7bdb      	ldrb	r3, [r3, #15]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d016      	beq.n	8004668 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004640:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004644:	69fa      	ldr	r2, [r7, #28]
 8004646:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800464a:	f043 030b 	orr.w	r3, r3, #11
 800464e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800465a:	69fa      	ldr	r2, [r7, #28]
 800465c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004660:	f043 030b 	orr.w	r3, r3, #11
 8004664:	6453      	str	r3, [r2, #68]	@ 0x44
 8004666:	e015      	b.n	8004694 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	69fa      	ldr	r2, [r7, #28]
 8004672:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004676:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800467a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800467e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	69fa      	ldr	r2, [r7, #28]
 800468a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800468e:	f043 030b 	orr.w	r3, r3, #11
 8004692:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	69fa      	ldr	r2, [r7, #28]
 800469e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80046a2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80046a6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6818      	ldr	r0, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80046b6:	461a      	mov	r2, r3
 80046b8:	f004 fb72 	bl	8008da0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695a      	ldr	r2, [r3, #20]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80046ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f004 faa1 	bl	8008c18 <USB_ReadInterrupts>
 80046d6:	4603      	mov	r3, r0
 80046d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046e0:	d123      	bne.n	800472a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f004 fb37 	bl	8008d5a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f003 fbee 	bl	8007ed2 <USB_GetDevSpeed>
 80046f6:	4603      	mov	r3, r0
 80046f8:	461a      	mov	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681c      	ldr	r4, [r3, #0]
 8004702:	f001 fa09 	bl	8005b18 <HAL_RCC_GetHCLKFreq>
 8004706:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800470c:	461a      	mov	r2, r3
 800470e:	4620      	mov	r0, r4
 8004710:	f003 f8f2 	bl	80078f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f008 fad6 	bl	800ccc6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695a      	ldr	r2, [r3, #20]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004728:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f004 fa72 	bl	8008c18 <USB_ReadInterrupts>
 8004734:	4603      	mov	r3, r0
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b08      	cmp	r3, #8
 800473c:	d10a      	bne.n	8004754 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f008 fab3 	bl	800ccaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695a      	ldr	r2, [r3, #20]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f002 0208 	and.w	r2, r2, #8
 8004752:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f004 fa5d 	bl	8008c18 <USB_ReadInterrupts>
 800475e:	4603      	mov	r3, r0
 8004760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004764:	2b80      	cmp	r3, #128	@ 0x80
 8004766:	d123      	bne.n	80047b0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004774:	2301      	movs	r3, #1
 8004776:	627b      	str	r3, [r7, #36]	@ 0x24
 8004778:	e014      	b.n	80047a4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800477e:	4613      	mov	r3, r2
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d105      	bne.n	800479e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	b2db      	uxtb	r3, r3
 8004796:	4619      	mov	r1, r3
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 fb0a 	bl	8004db2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800479e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a0:	3301      	adds	r3, #1
 80047a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	791b      	ldrb	r3, [r3, #4]
 80047a8:	461a      	mov	r2, r3
 80047aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d3e4      	bcc.n	800477a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f004 fa2f 	bl	8008c18 <USB_ReadInterrupts>
 80047ba:	4603      	mov	r3, r0
 80047bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80047c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047c4:	d13c      	bne.n	8004840 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047c6:	2301      	movs	r3, #1
 80047c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ca:	e02b      	b.n	8004824 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80047cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047e0:	4613      	mov	r3, r2
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	4413      	add	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	3318      	adds	r3, #24
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d115      	bne.n	800481e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80047f2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	da12      	bge.n	800481e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047fc:	4613      	mov	r3, r2
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	3317      	adds	r3, #23
 8004808:	2201      	movs	r2, #1
 800480a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800480c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480e:	b2db      	uxtb	r3, r3
 8004810:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004814:	b2db      	uxtb	r3, r3
 8004816:	4619      	mov	r1, r3
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 faca 	bl	8004db2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800481e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004820:	3301      	adds	r3, #1
 8004822:	627b      	str	r3, [r7, #36]	@ 0x24
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	791b      	ldrb	r3, [r3, #4]
 8004828:	461a      	mov	r2, r3
 800482a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800482c:	4293      	cmp	r3, r2
 800482e:	d3cd      	bcc.n	80047cc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695a      	ldr	r2, [r3, #20]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800483e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f004 f9e7 	bl	8008c18 <USB_ReadInterrupts>
 800484a:	4603      	mov	r3, r0
 800484c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004850:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004854:	d156      	bne.n	8004904 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004856:	2301      	movs	r3, #1
 8004858:	627b      	str	r3, [r7, #36]	@ 0x24
 800485a:	e045      	b.n	80048e8 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800485c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004870:	4613      	mov	r3, r2
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	440b      	add	r3, r1
 800487a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d12e      	bne.n	80048e2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004884:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004886:	2b00      	cmp	r3, #0
 8004888:	da2b      	bge.n	80048e2 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004896:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800489a:	429a      	cmp	r2, r3
 800489c:	d121      	bne.n	80048e2 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800489e:	6879      	ldr	r1, [r7, #4]
 80048a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a2:	4613      	mov	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	4413      	add	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	440b      	add	r3, r1
 80048ac:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80048b0:	2201      	movs	r2, #1
 80048b2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80048bc:	6a3b      	ldr	r3, [r7, #32]
 80048be:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10a      	bne.n	80048e2 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	69fa      	ldr	r2, [r7, #28]
 80048d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048de:	6053      	str	r3, [r2, #4]
            break;
 80048e0:	e008      	b.n	80048f4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e4:	3301      	adds	r3, #1
 80048e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	791b      	ldrb	r3, [r3, #4]
 80048ec:	461a      	mov	r2, r3
 80048ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d3b3      	bcc.n	800485c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695a      	ldr	r2, [r3, #20]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004902:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f004 f985 	bl	8008c18 <USB_ReadInterrupts>
 800490e:	4603      	mov	r3, r0
 8004910:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004918:	d10a      	bne.n	8004930 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f008 fa54 	bl	800cdc8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695a      	ldr	r2, [r3, #20]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800492e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f004 f96f 	bl	8008c18 <USB_ReadInterrupts>
 800493a:	4603      	mov	r3, r0
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b04      	cmp	r3, #4
 8004942:	d115      	bne.n	8004970 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f008 fa44 	bl	800cde4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6859      	ldr	r1, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	430a      	orrs	r2, r1
 800496a:	605a      	str	r2, [r3, #4]
 800496c:	e000      	b.n	8004970 <HAL_PCD_IRQHandler+0x93c>
      return;
 800496e:	bf00      	nop
    }
  }
}
 8004970:	3734      	adds	r7, #52	@ 0x34
 8004972:	46bd      	mov	sp, r7
 8004974:	bd90      	pop	{r4, r7, pc}

08004976 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b082      	sub	sp, #8
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	460b      	mov	r3, r1
 8004980:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_PCD_SetAddress+0x1a>
 800498c:	2302      	movs	r3, #2
 800498e:	e012      	b.n	80049b6 <HAL_PCD_SetAddress+0x40>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	78fa      	ldrb	r2, [r7, #3]
 800499c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	78fa      	ldrb	r2, [r7, #3]
 80049a4:	4611      	mov	r1, r2
 80049a6:	4618      	mov	r0, r3
 80049a8:	f004 f8ce 	bl	8008b48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b084      	sub	sp, #16
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	4608      	mov	r0, r1
 80049c8:	4611      	mov	r1, r2
 80049ca:	461a      	mov	r2, r3
 80049cc:	4603      	mov	r3, r0
 80049ce:	70fb      	strb	r3, [r7, #3]
 80049d0:	460b      	mov	r3, r1
 80049d2:	803b      	strh	r3, [r7, #0]
 80049d4:	4613      	mov	r3, r2
 80049d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	da0f      	bge.n	8004a04 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	f003 020f 	and.w	r2, r3, #15
 80049ea:	4613      	mov	r3, r2
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	4413      	add	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	3310      	adds	r3, #16
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	4413      	add	r3, r2
 80049f8:	3304      	adds	r3, #4
 80049fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2201      	movs	r2, #1
 8004a00:	705a      	strb	r2, [r3, #1]
 8004a02:	e00f      	b.n	8004a24 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	f003 020f 	and.w	r2, r3, #15
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	4413      	add	r3, r2
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004a30:	883b      	ldrh	r3, [r7, #0]
 8004a32:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	78ba      	ldrb	r2, [r7, #2]
 8004a3e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	785b      	ldrb	r3, [r3, #1]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d004      	beq.n	8004a52 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a52:	78bb      	ldrb	r3, [r7, #2]
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d102      	bne.n	8004a5e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d101      	bne.n	8004a6c <HAL_PCD_EP_Open+0xae>
 8004a68:	2302      	movs	r3, #2
 8004a6a:	e00e      	b.n	8004a8a <HAL_PCD_EP_Open+0xcc>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68f9      	ldr	r1, [r7, #12]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f003 fa4e 	bl	8007f1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004a88:	7afb      	ldrb	r3, [r7, #11]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b084      	sub	sp, #16
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	460b      	mov	r3, r1
 8004a9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	da0f      	bge.n	8004ac6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004aa6:	78fb      	ldrb	r3, [r7, #3]
 8004aa8:	f003 020f 	and.w	r2, r3, #15
 8004aac:	4613      	mov	r3, r2
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	3310      	adds	r3, #16
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	4413      	add	r3, r2
 8004aba:	3304      	adds	r3, #4
 8004abc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	705a      	strb	r2, [r3, #1]
 8004ac4:	e00f      	b.n	8004ae6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	f003 020f 	and.w	r2, r3, #15
 8004acc:	4613      	mov	r3, r2
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	4413      	add	r3, r2
 8004adc:	3304      	adds	r3, #4
 8004ade:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ae6:	78fb      	ldrb	r3, [r7, #3]
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_PCD_EP_Close+0x6e>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e00e      	b.n	8004b1e <HAL_PCD_EP_Close+0x8c>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68f9      	ldr	r1, [r7, #12]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f003 fa8c 	bl	800802c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b086      	sub	sp, #24
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	607a      	str	r2, [r7, #4]
 8004b30:	603b      	str	r3, [r7, #0]
 8004b32:	460b      	mov	r3, r1
 8004b34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b36:	7afb      	ldrb	r3, [r7, #11]
 8004b38:	f003 020f 	and.w	r2, r3, #15
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	4413      	add	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2200      	movs	r2, #0
 8004b66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b68:	7afb      	ldrb	r3, [r7, #11]
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	799b      	ldrb	r3, [r3, #6]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d102      	bne.n	8004b82 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6818      	ldr	r0, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	799b      	ldrb	r3, [r3, #6]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	6979      	ldr	r1, [r7, #20]
 8004b8e:	f003 fb29 	bl	80081e4 <USB_EPStartXfer>

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004ba8:	78fb      	ldrb	r3, [r7, #3]
 8004baa:	f003 020f 	and.w	r2, r3, #15
 8004bae:	6879      	ldr	r1, [r7, #4]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	00db      	lsls	r3, r3, #3
 8004bb4:	4413      	add	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	440b      	add	r3, r1
 8004bba:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004bbe:	681b      	ldr	r3, [r3, #0]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	607a      	str	r2, [r7, #4]
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bdc:	7afb      	ldrb	r3, [r7, #11]
 8004bde:	f003 020f 	and.w	r2, r3, #15
 8004be2:	4613      	mov	r3, r2
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	4413      	add	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	3310      	adds	r3, #16
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	683a      	ldr	r2, [r7, #0]
 8004bfe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2200      	movs	r2, #0
 8004c04:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c0c:	7afb      	ldrb	r3, [r7, #11]
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	799b      	ldrb	r3, [r3, #6]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d102      	bne.n	8004c26 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	799b      	ldrb	r3, [r3, #6]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	6979      	ldr	r1, [r7, #20]
 8004c32:	f003 fad7 	bl	80081e4 <USB_EPStartXfer>

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004c4c:	78fb      	ldrb	r3, [r7, #3]
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	7912      	ldrb	r2, [r2, #4]
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d901      	bls.n	8004c5e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e04f      	b.n	8004cfe <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	da0f      	bge.n	8004c86 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c66:	78fb      	ldrb	r3, [r7, #3]
 8004c68:	f003 020f 	and.w	r2, r3, #15
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	4413      	add	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	3310      	adds	r3, #16
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	4413      	add	r3, r2
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2201      	movs	r2, #1
 8004c82:	705a      	strb	r2, [r3, #1]
 8004c84:	e00d      	b.n	8004ca2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c86:	78fa      	ldrb	r2, [r7, #3]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	4413      	add	r3, r2
 8004c98:	3304      	adds	r3, #4
 8004c9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d101      	bne.n	8004cc2 <HAL_PCD_EP_SetStall+0x82>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	e01d      	b.n	8004cfe <HAL_PCD_EP_SetStall+0xbe>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68f9      	ldr	r1, [r7, #12]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f003 fe65 	bl	80089a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d109      	bne.n	8004cf4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6818      	ldr	r0, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	7999      	ldrb	r1, [r3, #6]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f004 f856 	bl	8008da0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	460b      	mov	r3, r1
 8004d10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d12:	78fb      	ldrb	r3, [r7, #3]
 8004d14:	f003 030f 	and.w	r3, r3, #15
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	7912      	ldrb	r2, [r2, #4]
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d901      	bls.n	8004d24 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e042      	b.n	8004daa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	da0f      	bge.n	8004d4c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d2c:	78fb      	ldrb	r3, [r7, #3]
 8004d2e:	f003 020f 	and.w	r2, r3, #15
 8004d32:	4613      	mov	r3, r2
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	4413      	add	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	3310      	adds	r3, #16
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	4413      	add	r3, r2
 8004d40:	3304      	adds	r3, #4
 8004d42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2201      	movs	r2, #1
 8004d48:	705a      	strb	r2, [r3, #1]
 8004d4a:	e00f      	b.n	8004d6c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d4c:	78fb      	ldrb	r3, [r7, #3]
 8004d4e:	f003 020f 	and.w	r2, r3, #15
 8004d52:	4613      	mov	r3, r2
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	4413      	add	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	4413      	add	r3, r2
 8004d62:	3304      	adds	r3, #4
 8004d64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d72:	78fb      	ldrb	r3, [r7, #3]
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	b2da      	uxtb	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d101      	bne.n	8004d8c <HAL_PCD_EP_ClrStall+0x86>
 8004d88:	2302      	movs	r3, #2
 8004d8a:	e00e      	b.n	8004daa <HAL_PCD_EP_ClrStall+0xa4>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68f9      	ldr	r1, [r7, #12]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f003 fe6e 	bl	8008a7c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b084      	sub	sp, #16
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004dbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	da0c      	bge.n	8004de0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dc6:	78fb      	ldrb	r3, [r7, #3]
 8004dc8:	f003 020f 	and.w	r2, r3, #15
 8004dcc:	4613      	mov	r3, r2
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	3310      	adds	r3, #16
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	4413      	add	r3, r2
 8004dda:	3304      	adds	r3, #4
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	e00c      	b.n	8004dfa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	f003 020f 	and.w	r2, r3, #15
 8004de6:	4613      	mov	r3, r2
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	4413      	add	r3, r2
 8004df6:	3304      	adds	r3, #4
 8004df8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68f9      	ldr	r1, [r7, #12]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f003 fc8d 	bl	8008720 <USB_EPStopXfer>
 8004e06:	4603      	mov	r3, r0
 8004e08:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004e0a:	7afb      	ldrb	r3, [r7, #11]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08a      	sub	sp, #40	@ 0x28
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	3310      	adds	r3, #16
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	4413      	add	r3, r2
 8004e38:	3304      	adds	r3, #4
 8004e3a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	695a      	ldr	r2, [r3, #20]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d901      	bls.n	8004e4c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e06b      	b.n	8004f24 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	69fa      	ldr	r2, [r7, #28]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d902      	bls.n	8004e68 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	3303      	adds	r3, #3
 8004e6c:	089b      	lsrs	r3, r3, #2
 8004e6e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e70:	e02a      	b.n	8004ec8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	69fa      	ldr	r2, [r7, #28]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d902      	bls.n	8004e8e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	3303      	adds	r3, #3
 8004e92:	089b      	lsrs	r3, r3, #2
 8004e94:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	68d9      	ldr	r1, [r3, #12]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	6978      	ldr	r0, [r7, #20]
 8004eac:	f003 fce2 	bl	8008874 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	68da      	ldr	r2, [r3, #12]
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	441a      	add	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	695a      	ldr	r2, [r3, #20]
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	441a      	add	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d809      	bhi.n	8004ef2 <PCD_WriteEmptyTxFifo+0xde>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	695a      	ldr	r2, [r3, #20]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d203      	bcs.n	8004ef2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1bf      	bne.n	8004e72 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	691a      	ldr	r2, [r3, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d811      	bhi.n	8004f22 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	2201      	movs	r2, #1
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	43db      	mvns	r3, r3
 8004f18:	6939      	ldr	r1, [r7, #16]
 8004f1a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f1e:	4013      	ands	r3, r2
 8004f20:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3720      	adds	r7, #32
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	333c      	adds	r3, #60	@ 0x3c
 8004f44:	3304      	adds	r3, #4
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	799b      	ldrb	r3, [r3, #6]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d17b      	bne.n	800505a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d015      	beq.n	8004f98 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	4a61      	ldr	r2, [pc, #388]	@ (80050f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	f240 80b9 	bls.w	80050e8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f000 80b3 	beq.w	80050e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f94:	6093      	str	r3, [r2, #8]
 8004f96:	e0a7      	b.n	80050e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d009      	beq.n	8004fb6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fae:	461a      	mov	r2, r3
 8004fb0:	2320      	movs	r3, #32
 8004fb2:	6093      	str	r3, [r2, #8]
 8004fb4:	e098      	b.n	80050e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f040 8093 	bne.w	80050e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	4a4b      	ldr	r2, [pc, #300]	@ (80050f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d90f      	bls.n	8004fea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	015a      	lsls	r2, r3, #5
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	4413      	add	r3, r2
 8004fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fe6:	6093      	str	r3, [r2, #8]
 8004fe8:	e07e      	b.n	80050e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	4613      	mov	r3, r2
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6a1a      	ldr	r2, [r3, #32]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	0159      	lsls	r1, r3, #5
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	440b      	add	r3, r1
 800500c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005016:	1ad2      	subs	r2, r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d114      	bne.n	800504c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d109      	bne.n	800503e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6818      	ldr	r0, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005034:	461a      	mov	r2, r3
 8005036:	2101      	movs	r1, #1
 8005038:	f003 feb2 	bl	8008da0 <USB_EP0_OutStart>
 800503c:	e006      	b.n	800504c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	441a      	add	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	b2db      	uxtb	r3, r3
 8005050:	4619      	mov	r1, r3
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f007 fdf4 	bl	800cc40 <HAL_PCD_DataOutStageCallback>
 8005058:	e046      	b.n	80050e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	4a26      	ldr	r2, [pc, #152]	@ (80050f8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d124      	bne.n	80050ac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00a      	beq.n	8005082 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005078:	461a      	mov	r2, r3
 800507a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800507e:	6093      	str	r3, [r2, #8]
 8005080:	e032      	b.n	80050e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f003 0320 	and.w	r3, r3, #32
 8005088:	2b00      	cmp	r3, #0
 800508a:	d008      	beq.n	800509e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005098:	461a      	mov	r2, r3
 800509a:	2320      	movs	r3, #32
 800509c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	4619      	mov	r1, r3
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f007 fdcb 	bl	800cc40 <HAL_PCD_DataOutStageCallback>
 80050aa:	e01d      	b.n	80050e8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d114      	bne.n	80050dc <PCD_EP_OutXfrComplete_int+0x1b0>
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	4613      	mov	r3, r2
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	440b      	add	r3, r1
 80050c0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d108      	bne.n	80050dc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6818      	ldr	r0, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80050d4:	461a      	mov	r2, r3
 80050d6:	2100      	movs	r1, #0
 80050d8:	f003 fe62 	bl	8008da0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	4619      	mov	r1, r3
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f007 fdac 	bl	800cc40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3720      	adds	r7, #32
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	4f54300a 	.word	0x4f54300a
 80050f8:	4f54310a 	.word	0x4f54310a

080050fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	333c      	adds	r3, #60	@ 0x3c
 8005114:	3304      	adds	r3, #4
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4a15      	ldr	r2, [pc, #84]	@ (8005184 <PCD_EP_OutSetupPacket_int+0x88>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d90e      	bls.n	8005150 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005138:	2b00      	cmp	r3, #0
 800513a:	d009      	beq.n	8005150 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005148:	461a      	mov	r2, r3
 800514a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800514e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f007 fd63 	bl	800cc1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4a0a      	ldr	r2, [pc, #40]	@ (8005184 <PCD_EP_OutSetupPacket_int+0x88>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d90c      	bls.n	8005178 <PCD_EP_OutSetupPacket_int+0x7c>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	799b      	ldrb	r3, [r3, #6]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d108      	bne.n	8005178 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005170:	461a      	mov	r2, r3
 8005172:	2101      	movs	r1, #1
 8005174:	f003 fe14 	bl	8008da0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	4f54300a 	.word	0x4f54300a

08005188 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	70fb      	strb	r3, [r7, #3]
 8005194:	4613      	mov	r3, r2
 8005196:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d107      	bne.n	80051b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80051a6:	883b      	ldrh	r3, [r7, #0]
 80051a8:	0419      	lsls	r1, r3, #16
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	629a      	str	r2, [r3, #40]	@ 0x28
 80051b4:	e028      	b.n	8005208 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051bc:	0c1b      	lsrs	r3, r3, #16
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	4413      	add	r3, r2
 80051c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80051c4:	2300      	movs	r3, #0
 80051c6:	73fb      	strb	r3, [r7, #15]
 80051c8:	e00d      	b.n	80051e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	3340      	adds	r3, #64	@ 0x40
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	4413      	add	r3, r2
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	0c1b      	lsrs	r3, r3, #16
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	4413      	add	r3, r2
 80051de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	3301      	adds	r3, #1
 80051e4:	73fb      	strb	r3, [r7, #15]
 80051e6:	7bfa      	ldrb	r2, [r7, #15]
 80051e8:	78fb      	ldrb	r3, [r7, #3]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d3ec      	bcc.n	80051ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80051f0:	883b      	ldrh	r3, [r7, #0]
 80051f2:	0418      	lsls	r0, r3, #16
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6819      	ldr	r1, [r3, #0]
 80051f8:	78fb      	ldrb	r3, [r7, #3]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	4302      	orrs	r2, r0
 8005200:	3340      	adds	r3, #64	@ 0x40
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	460b      	mov	r3, r1
 8005220:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	887a      	ldrh	r2, [r7, #2]
 8005228:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	460b      	mov	r3, r1
 8005242:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e267      	b.n	8005732 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d075      	beq.n	800535a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800526e:	4b88      	ldr	r3, [pc, #544]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 030c 	and.w	r3, r3, #12
 8005276:	2b04      	cmp	r3, #4
 8005278:	d00c      	beq.n	8005294 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800527a:	4b85      	ldr	r3, [pc, #532]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005282:	2b08      	cmp	r3, #8
 8005284:	d112      	bne.n	80052ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005286:	4b82      	ldr	r3, [pc, #520]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800528e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005292:	d10b      	bne.n	80052ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005294:	4b7e      	ldr	r3, [pc, #504]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d05b      	beq.n	8005358 <HAL_RCC_OscConfig+0x108>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d157      	bne.n	8005358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e242      	b.n	8005732 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052b4:	d106      	bne.n	80052c4 <HAL_RCC_OscConfig+0x74>
 80052b6:	4b76      	ldr	r3, [pc, #472]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a75      	ldr	r2, [pc, #468]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 80052bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	e01d      	b.n	8005300 <HAL_RCC_OscConfig+0xb0>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052cc:	d10c      	bne.n	80052e8 <HAL_RCC_OscConfig+0x98>
 80052ce:	4b70      	ldr	r3, [pc, #448]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a6f      	ldr	r2, [pc, #444]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 80052d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	4b6d      	ldr	r3, [pc, #436]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a6c      	ldr	r2, [pc, #432]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 80052e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	e00b      	b.n	8005300 <HAL_RCC_OscConfig+0xb0>
 80052e8:	4b69      	ldr	r3, [pc, #420]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a68      	ldr	r2, [pc, #416]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 80052ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	4b66      	ldr	r3, [pc, #408]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a65      	ldr	r2, [pc, #404]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 80052fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d013      	beq.n	8005330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005308:	f7fc ff40 	bl	800218c <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005310:	f7fc ff3c 	bl	800218c <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b64      	cmp	r3, #100	@ 0x64
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e207      	b.n	8005732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005322:	4b5b      	ldr	r3, [pc, #364]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f0      	beq.n	8005310 <HAL_RCC_OscConfig+0xc0>
 800532e:	e014      	b.n	800535a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005330:	f7fc ff2c 	bl	800218c <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005338:	f7fc ff28 	bl	800218c <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b64      	cmp	r3, #100	@ 0x64
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e1f3      	b.n	8005732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800534a:	4b51      	ldr	r3, [pc, #324]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1f0      	bne.n	8005338 <HAL_RCC_OscConfig+0xe8>
 8005356:	e000      	b.n	800535a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d063      	beq.n	800542e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005366:	4b4a      	ldr	r3, [pc, #296]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 030c 	and.w	r3, r3, #12
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00b      	beq.n	800538a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005372:	4b47      	ldr	r3, [pc, #284]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800537a:	2b08      	cmp	r3, #8
 800537c:	d11c      	bne.n	80053b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800537e:	4b44      	ldr	r3, [pc, #272]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d116      	bne.n	80053b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800538a:	4b41      	ldr	r3, [pc, #260]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d005      	beq.n	80053a2 <HAL_RCC_OscConfig+0x152>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d001      	beq.n	80053a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e1c7      	b.n	8005732 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a2:	4b3b      	ldr	r3, [pc, #236]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	4937      	ldr	r1, [pc, #220]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053b6:	e03a      	b.n	800542e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d020      	beq.n	8005402 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053c0:	4b34      	ldr	r3, [pc, #208]	@ (8005494 <HAL_RCC_OscConfig+0x244>)
 80053c2:	2201      	movs	r2, #1
 80053c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c6:	f7fc fee1 	bl	800218c <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053cc:	e008      	b.n	80053e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053ce:	f7fc fedd 	bl	800218c <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e1a8      	b.n	8005732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053e0:	4b2b      	ldr	r3, [pc, #172]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d0f0      	beq.n	80053ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ec:	4b28      	ldr	r3, [pc, #160]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	4925      	ldr	r1, [pc, #148]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	600b      	str	r3, [r1, #0]
 8005400:	e015      	b.n	800542e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005402:	4b24      	ldr	r3, [pc, #144]	@ (8005494 <HAL_RCC_OscConfig+0x244>)
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005408:	f7fc fec0 	bl	800218c <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005410:	f7fc febc 	bl	800218c <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e187      	b.n	8005732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005422:	4b1b      	ldr	r3, [pc, #108]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1f0      	bne.n	8005410 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b00      	cmp	r3, #0
 8005438:	d036      	beq.n	80054a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d016      	beq.n	8005470 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005442:	4b15      	ldr	r3, [pc, #84]	@ (8005498 <HAL_RCC_OscConfig+0x248>)
 8005444:	2201      	movs	r2, #1
 8005446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005448:	f7fc fea0 	bl	800218c <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005450:	f7fc fe9c 	bl	800218c <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e167      	b.n	8005732 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005462:	4b0b      	ldr	r3, [pc, #44]	@ (8005490 <HAL_RCC_OscConfig+0x240>)
 8005464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0f0      	beq.n	8005450 <HAL_RCC_OscConfig+0x200>
 800546e:	e01b      	b.n	80054a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005470:	4b09      	ldr	r3, [pc, #36]	@ (8005498 <HAL_RCC_OscConfig+0x248>)
 8005472:	2200      	movs	r2, #0
 8005474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005476:	f7fc fe89 	bl	800218c <HAL_GetTick>
 800547a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800547c:	e00e      	b.n	800549c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800547e:	f7fc fe85 	bl	800218c <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d907      	bls.n	800549c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e150      	b.n	8005732 <HAL_RCC_OscConfig+0x4e2>
 8005490:	40023800 	.word	0x40023800
 8005494:	42470000 	.word	0x42470000
 8005498:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800549c:	4b88      	ldr	r3, [pc, #544]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 800549e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1ea      	bne.n	800547e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0304 	and.w	r3, r3, #4
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 8097 	beq.w	80055e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054b6:	2300      	movs	r3, #0
 80054b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ba:	4b81      	ldr	r3, [pc, #516]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 80054bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10f      	bne.n	80054e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054c6:	2300      	movs	r3, #0
 80054c8:	60bb      	str	r3, [r7, #8]
 80054ca:	4b7d      	ldr	r3, [pc, #500]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 80054cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ce:	4a7c      	ldr	r2, [pc, #496]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 80054d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80054d6:	4b7a      	ldr	r3, [pc, #488]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 80054d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054de:	60bb      	str	r3, [r7, #8]
 80054e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054e2:	2301      	movs	r3, #1
 80054e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e6:	4b77      	ldr	r3, [pc, #476]	@ (80056c4 <HAL_RCC_OscConfig+0x474>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d118      	bne.n	8005524 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054f2:	4b74      	ldr	r3, [pc, #464]	@ (80056c4 <HAL_RCC_OscConfig+0x474>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a73      	ldr	r2, [pc, #460]	@ (80056c4 <HAL_RCC_OscConfig+0x474>)
 80054f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054fe:	f7fc fe45 	bl	800218c <HAL_GetTick>
 8005502:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005504:	e008      	b.n	8005518 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005506:	f7fc fe41 	bl	800218c <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d901      	bls.n	8005518 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e10c      	b.n	8005732 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005518:	4b6a      	ldr	r3, [pc, #424]	@ (80056c4 <HAL_RCC_OscConfig+0x474>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0f0      	beq.n	8005506 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d106      	bne.n	800553a <HAL_RCC_OscConfig+0x2ea>
 800552c:	4b64      	ldr	r3, [pc, #400]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 800552e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005530:	4a63      	ldr	r2, [pc, #396]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 8005532:	f043 0301 	orr.w	r3, r3, #1
 8005536:	6713      	str	r3, [r2, #112]	@ 0x70
 8005538:	e01c      	b.n	8005574 <HAL_RCC_OscConfig+0x324>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	2b05      	cmp	r3, #5
 8005540:	d10c      	bne.n	800555c <HAL_RCC_OscConfig+0x30c>
 8005542:	4b5f      	ldr	r3, [pc, #380]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 8005544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005546:	4a5e      	ldr	r2, [pc, #376]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 8005548:	f043 0304 	orr.w	r3, r3, #4
 800554c:	6713      	str	r3, [r2, #112]	@ 0x70
 800554e:	4b5c      	ldr	r3, [pc, #368]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 8005550:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005552:	4a5b      	ldr	r2, [pc, #364]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 8005554:	f043 0301 	orr.w	r3, r3, #1
 8005558:	6713      	str	r3, [r2, #112]	@ 0x70
 800555a:	e00b      	b.n	8005574 <HAL_RCC_OscConfig+0x324>
 800555c:	4b58      	ldr	r3, [pc, #352]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 800555e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005560:	4a57      	ldr	r2, [pc, #348]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 8005562:	f023 0301 	bic.w	r3, r3, #1
 8005566:	6713      	str	r3, [r2, #112]	@ 0x70
 8005568:	4b55      	ldr	r3, [pc, #340]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 800556a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800556c:	4a54      	ldr	r2, [pc, #336]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 800556e:	f023 0304 	bic.w	r3, r3, #4
 8005572:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d015      	beq.n	80055a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557c:	f7fc fe06 	bl	800218c <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005582:	e00a      	b.n	800559a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005584:	f7fc fe02 	bl	800218c <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005592:	4293      	cmp	r3, r2
 8005594:	d901      	bls.n	800559a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e0cb      	b.n	8005732 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800559a:	4b49      	ldr	r3, [pc, #292]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 800559c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0ee      	beq.n	8005584 <HAL_RCC_OscConfig+0x334>
 80055a6:	e014      	b.n	80055d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055a8:	f7fc fdf0 	bl	800218c <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ae:	e00a      	b.n	80055c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055b0:	f7fc fdec 	bl	800218c <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055be:	4293      	cmp	r3, r2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e0b5      	b.n	8005732 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055c6:	4b3e      	ldr	r3, [pc, #248]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 80055c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1ee      	bne.n	80055b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055d2:	7dfb      	ldrb	r3, [r7, #23]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d105      	bne.n	80055e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055d8:	4b39      	ldr	r3, [pc, #228]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 80055da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055dc:	4a38      	ldr	r2, [pc, #224]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 80055de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 80a1 	beq.w	8005730 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055ee:	4b34      	ldr	r3, [pc, #208]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f003 030c 	and.w	r3, r3, #12
 80055f6:	2b08      	cmp	r3, #8
 80055f8:	d05c      	beq.n	80056b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d141      	bne.n	8005686 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005602:	4b31      	ldr	r3, [pc, #196]	@ (80056c8 <HAL_RCC_OscConfig+0x478>)
 8005604:	2200      	movs	r2, #0
 8005606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005608:	f7fc fdc0 	bl	800218c <HAL_GetTick>
 800560c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800560e:	e008      	b.n	8005622 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005610:	f7fc fdbc 	bl	800218c <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b02      	cmp	r3, #2
 800561c:	d901      	bls.n	8005622 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e087      	b.n	8005732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005622:	4b27      	ldr	r3, [pc, #156]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1f0      	bne.n	8005610 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69da      	ldr	r2, [r3, #28]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563c:	019b      	lsls	r3, r3, #6
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005644:	085b      	lsrs	r3, r3, #1
 8005646:	3b01      	subs	r3, #1
 8005648:	041b      	lsls	r3, r3, #16
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005650:	061b      	lsls	r3, r3, #24
 8005652:	491b      	ldr	r1, [pc, #108]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 8005654:	4313      	orrs	r3, r2
 8005656:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005658:	4b1b      	ldr	r3, [pc, #108]	@ (80056c8 <HAL_RCC_OscConfig+0x478>)
 800565a:	2201      	movs	r2, #1
 800565c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800565e:	f7fc fd95 	bl	800218c <HAL_GetTick>
 8005662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005664:	e008      	b.n	8005678 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005666:	f7fc fd91 	bl	800218c <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e05c      	b.n	8005732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005678:	4b11      	ldr	r3, [pc, #68]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d0f0      	beq.n	8005666 <HAL_RCC_OscConfig+0x416>
 8005684:	e054      	b.n	8005730 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005686:	4b10      	ldr	r3, [pc, #64]	@ (80056c8 <HAL_RCC_OscConfig+0x478>)
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800568c:	f7fc fd7e 	bl	800218c <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005694:	f7fc fd7a 	bl	800218c <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e045      	b.n	8005732 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056a6:	4b06      	ldr	r3, [pc, #24]	@ (80056c0 <HAL_RCC_OscConfig+0x470>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1f0      	bne.n	8005694 <HAL_RCC_OscConfig+0x444>
 80056b2:	e03d      	b.n	8005730 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d107      	bne.n	80056cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e038      	b.n	8005732 <HAL_RCC_OscConfig+0x4e2>
 80056c0:	40023800 	.word	0x40023800
 80056c4:	40007000 	.word	0x40007000
 80056c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056cc:	4b1b      	ldr	r3, [pc, #108]	@ (800573c <HAL_RCC_OscConfig+0x4ec>)
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d028      	beq.n	800572c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d121      	bne.n	800572c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d11a      	bne.n	800572c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80056fc:	4013      	ands	r3, r2
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005702:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005704:	4293      	cmp	r3, r2
 8005706:	d111      	bne.n	800572c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005712:	085b      	lsrs	r3, r3, #1
 8005714:	3b01      	subs	r3, #1
 8005716:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005718:	429a      	cmp	r2, r3
 800571a:	d107      	bne.n	800572c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005726:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005728:	429a      	cmp	r2, r3
 800572a:	d001      	beq.n	8005730 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e000      	b.n	8005732 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	40023800 	.word	0x40023800

08005740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e0cc      	b.n	80058ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005754:	4b68      	ldr	r3, [pc, #416]	@ (80058f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	683a      	ldr	r2, [r7, #0]
 800575e:	429a      	cmp	r2, r3
 8005760:	d90c      	bls.n	800577c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005762:	4b65      	ldr	r3, [pc, #404]	@ (80058f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800576a:	4b63      	ldr	r3, [pc, #396]	@ (80058f8 <HAL_RCC_ClockConfig+0x1b8>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0307 	and.w	r3, r3, #7
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	429a      	cmp	r2, r3
 8005776:	d001      	beq.n	800577c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e0b8      	b.n	80058ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b00      	cmp	r3, #0
 8005786:	d020      	beq.n	80057ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	d005      	beq.n	80057a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005794:	4b59      	ldr	r3, [pc, #356]	@ (80058fc <HAL_RCC_ClockConfig+0x1bc>)
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	4a58      	ldr	r2, [pc, #352]	@ (80058fc <HAL_RCC_ClockConfig+0x1bc>)
 800579a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800579e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0308 	and.w	r3, r3, #8
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d005      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057ac:	4b53      	ldr	r3, [pc, #332]	@ (80058fc <HAL_RCC_ClockConfig+0x1bc>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	4a52      	ldr	r2, [pc, #328]	@ (80058fc <HAL_RCC_ClockConfig+0x1bc>)
 80057b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80057b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057b8:	4b50      	ldr	r3, [pc, #320]	@ (80058fc <HAL_RCC_ClockConfig+0x1bc>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	494d      	ldr	r1, [pc, #308]	@ (80058fc <HAL_RCC_ClockConfig+0x1bc>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d044      	beq.n	8005860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d107      	bne.n	80057ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057de:	4b47      	ldr	r3, [pc, #284]	@ (80058fc <HAL_RCC_ClockConfig+0x1bc>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d119      	bne.n	800581e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e07f      	b.n	80058ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d003      	beq.n	80057fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d107      	bne.n	800580e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057fe:	4b3f      	ldr	r3, [pc, #252]	@ (80058fc <HAL_RCC_ClockConfig+0x1bc>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d109      	bne.n	800581e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e06f      	b.n	80058ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800580e:	4b3b      	ldr	r3, [pc, #236]	@ (80058fc <HAL_RCC_ClockConfig+0x1bc>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e067      	b.n	80058ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800581e:	4b37      	ldr	r3, [pc, #220]	@ (80058fc <HAL_RCC_ClockConfig+0x1bc>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f023 0203 	bic.w	r2, r3, #3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	4934      	ldr	r1, [pc, #208]	@ (80058fc <HAL_RCC_ClockConfig+0x1bc>)
 800582c:	4313      	orrs	r3, r2
 800582e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005830:	f7fc fcac 	bl	800218c <HAL_GetTick>
 8005834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005836:	e00a      	b.n	800584e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005838:	f7fc fca8 	bl	800218c <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005846:	4293      	cmp	r3, r2
 8005848:	d901      	bls.n	800584e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e04f      	b.n	80058ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800584e:	4b2b      	ldr	r3, [pc, #172]	@ (80058fc <HAL_RCC_ClockConfig+0x1bc>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 020c 	and.w	r2, r3, #12
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	429a      	cmp	r2, r3
 800585e:	d1eb      	bne.n	8005838 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005860:	4b25      	ldr	r3, [pc, #148]	@ (80058f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	429a      	cmp	r2, r3
 800586c:	d20c      	bcs.n	8005888 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800586e:	4b22      	ldr	r3, [pc, #136]	@ (80058f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	b2d2      	uxtb	r2, r2
 8005874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005876:	4b20      	ldr	r3, [pc, #128]	@ (80058f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	429a      	cmp	r2, r3
 8005882:	d001      	beq.n	8005888 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e032      	b.n	80058ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b00      	cmp	r3, #0
 8005892:	d008      	beq.n	80058a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005894:	4b19      	ldr	r3, [pc, #100]	@ (80058fc <HAL_RCC_ClockConfig+0x1bc>)
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	4916      	ldr	r1, [pc, #88]	@ (80058fc <HAL_RCC_ClockConfig+0x1bc>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0308 	and.w	r3, r3, #8
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d009      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058b2:	4b12      	ldr	r3, [pc, #72]	@ (80058fc <HAL_RCC_ClockConfig+0x1bc>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	490e      	ldr	r1, [pc, #56]	@ (80058fc <HAL_RCC_ClockConfig+0x1bc>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058c6:	f000 f821 	bl	800590c <HAL_RCC_GetSysClockFreq>
 80058ca:	4602      	mov	r2, r0
 80058cc:	4b0b      	ldr	r3, [pc, #44]	@ (80058fc <HAL_RCC_ClockConfig+0x1bc>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	091b      	lsrs	r3, r3, #4
 80058d2:	f003 030f 	and.w	r3, r3, #15
 80058d6:	490a      	ldr	r1, [pc, #40]	@ (8005900 <HAL_RCC_ClockConfig+0x1c0>)
 80058d8:	5ccb      	ldrb	r3, [r1, r3]
 80058da:	fa22 f303 	lsr.w	r3, r2, r3
 80058de:	4a09      	ldr	r2, [pc, #36]	@ (8005904 <HAL_RCC_ClockConfig+0x1c4>)
 80058e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80058e2:	4b09      	ldr	r3, [pc, #36]	@ (8005908 <HAL_RCC_ClockConfig+0x1c8>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fc fc0c 	bl	8002104 <HAL_InitTick>

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	40023c00 	.word	0x40023c00
 80058fc:	40023800 	.word	0x40023800
 8005900:	0800d2b0 	.word	0x0800d2b0
 8005904:	2000000c 	.word	0x2000000c
 8005908:	20000010 	.word	0x20000010

0800590c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800590c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005910:	b094      	sub	sp, #80	@ 0x50
 8005912:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005924:	4b79      	ldr	r3, [pc, #484]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 030c 	and.w	r3, r3, #12
 800592c:	2b08      	cmp	r3, #8
 800592e:	d00d      	beq.n	800594c <HAL_RCC_GetSysClockFreq+0x40>
 8005930:	2b08      	cmp	r3, #8
 8005932:	f200 80e1 	bhi.w	8005af8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005936:	2b00      	cmp	r3, #0
 8005938:	d002      	beq.n	8005940 <HAL_RCC_GetSysClockFreq+0x34>
 800593a:	2b04      	cmp	r3, #4
 800593c:	d003      	beq.n	8005946 <HAL_RCC_GetSysClockFreq+0x3a>
 800593e:	e0db      	b.n	8005af8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005940:	4b73      	ldr	r3, [pc, #460]	@ (8005b10 <HAL_RCC_GetSysClockFreq+0x204>)
 8005942:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005944:	e0db      	b.n	8005afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005946:	4b73      	ldr	r3, [pc, #460]	@ (8005b14 <HAL_RCC_GetSysClockFreq+0x208>)
 8005948:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800594a:	e0d8      	b.n	8005afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800594c:	4b6f      	ldr	r3, [pc, #444]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x200>)
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005954:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005956:	4b6d      	ldr	r3, [pc, #436]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d063      	beq.n	8005a2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005962:	4b6a      	ldr	r3, [pc, #424]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	099b      	lsrs	r3, r3, #6
 8005968:	2200      	movs	r2, #0
 800596a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800596c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800596e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005974:	633b      	str	r3, [r7, #48]	@ 0x30
 8005976:	2300      	movs	r3, #0
 8005978:	637b      	str	r3, [r7, #52]	@ 0x34
 800597a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800597e:	4622      	mov	r2, r4
 8005980:	462b      	mov	r3, r5
 8005982:	f04f 0000 	mov.w	r0, #0
 8005986:	f04f 0100 	mov.w	r1, #0
 800598a:	0159      	lsls	r1, r3, #5
 800598c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005990:	0150      	lsls	r0, r2, #5
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	4621      	mov	r1, r4
 8005998:	1a51      	subs	r1, r2, r1
 800599a:	6139      	str	r1, [r7, #16]
 800599c:	4629      	mov	r1, r5
 800599e:	eb63 0301 	sbc.w	r3, r3, r1
 80059a2:	617b      	str	r3, [r7, #20]
 80059a4:	f04f 0200 	mov.w	r2, #0
 80059a8:	f04f 0300 	mov.w	r3, #0
 80059ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059b0:	4659      	mov	r1, fp
 80059b2:	018b      	lsls	r3, r1, #6
 80059b4:	4651      	mov	r1, sl
 80059b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80059ba:	4651      	mov	r1, sl
 80059bc:	018a      	lsls	r2, r1, #6
 80059be:	4651      	mov	r1, sl
 80059c0:	ebb2 0801 	subs.w	r8, r2, r1
 80059c4:	4659      	mov	r1, fp
 80059c6:	eb63 0901 	sbc.w	r9, r3, r1
 80059ca:	f04f 0200 	mov.w	r2, #0
 80059ce:	f04f 0300 	mov.w	r3, #0
 80059d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059de:	4690      	mov	r8, r2
 80059e0:	4699      	mov	r9, r3
 80059e2:	4623      	mov	r3, r4
 80059e4:	eb18 0303 	adds.w	r3, r8, r3
 80059e8:	60bb      	str	r3, [r7, #8]
 80059ea:	462b      	mov	r3, r5
 80059ec:	eb49 0303 	adc.w	r3, r9, r3
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	f04f 0200 	mov.w	r2, #0
 80059f6:	f04f 0300 	mov.w	r3, #0
 80059fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059fe:	4629      	mov	r1, r5
 8005a00:	024b      	lsls	r3, r1, #9
 8005a02:	4621      	mov	r1, r4
 8005a04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005a08:	4621      	mov	r1, r4
 8005a0a:	024a      	lsls	r2, r1, #9
 8005a0c:	4610      	mov	r0, r2
 8005a0e:	4619      	mov	r1, r3
 8005a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a12:	2200      	movs	r2, #0
 8005a14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005a1c:	f7fa fbd4 	bl	80001c8 <__aeabi_uldivmod>
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4613      	mov	r3, r2
 8005a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a28:	e058      	b.n	8005adc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a2a:	4b38      	ldr	r3, [pc, #224]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	099b      	lsrs	r3, r3, #6
 8005a30:	2200      	movs	r2, #0
 8005a32:	4618      	mov	r0, r3
 8005a34:	4611      	mov	r1, r2
 8005a36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a3a:	623b      	str	r3, [r7, #32]
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a44:	4642      	mov	r2, r8
 8005a46:	464b      	mov	r3, r9
 8005a48:	f04f 0000 	mov.w	r0, #0
 8005a4c:	f04f 0100 	mov.w	r1, #0
 8005a50:	0159      	lsls	r1, r3, #5
 8005a52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a56:	0150      	lsls	r0, r2, #5
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4641      	mov	r1, r8
 8005a5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a62:	4649      	mov	r1, r9
 8005a64:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	f04f 0300 	mov.w	r3, #0
 8005a70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a7c:	ebb2 040a 	subs.w	r4, r2, sl
 8005a80:	eb63 050b 	sbc.w	r5, r3, fp
 8005a84:	f04f 0200 	mov.w	r2, #0
 8005a88:	f04f 0300 	mov.w	r3, #0
 8005a8c:	00eb      	lsls	r3, r5, #3
 8005a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a92:	00e2      	lsls	r2, r4, #3
 8005a94:	4614      	mov	r4, r2
 8005a96:	461d      	mov	r5, r3
 8005a98:	4643      	mov	r3, r8
 8005a9a:	18e3      	adds	r3, r4, r3
 8005a9c:	603b      	str	r3, [r7, #0]
 8005a9e:	464b      	mov	r3, r9
 8005aa0:	eb45 0303 	adc.w	r3, r5, r3
 8005aa4:	607b      	str	r3, [r7, #4]
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	f04f 0300 	mov.w	r3, #0
 8005aae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ab2:	4629      	mov	r1, r5
 8005ab4:	028b      	lsls	r3, r1, #10
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005abc:	4621      	mov	r1, r4
 8005abe:	028a      	lsls	r2, r1, #10
 8005ac0:	4610      	mov	r0, r2
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	61bb      	str	r3, [r7, #24]
 8005aca:	61fa      	str	r2, [r7, #28]
 8005acc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ad0:	f7fa fb7a 	bl	80001c8 <__aeabi_uldivmod>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	460b      	mov	r3, r1
 8005ad8:	4613      	mov	r3, r2
 8005ada:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005adc:	4b0b      	ldr	r3, [pc, #44]	@ (8005b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	0c1b      	lsrs	r3, r3, #16
 8005ae2:	f003 0303 	and.w	r3, r3, #3
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005aec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005aee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005af6:	e002      	b.n	8005afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005af8:	4b05      	ldr	r3, [pc, #20]	@ (8005b10 <HAL_RCC_GetSysClockFreq+0x204>)
 8005afa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005afe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3750      	adds	r7, #80	@ 0x50
 8005b04:	46bd      	mov	sp, r7
 8005b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b0a:	bf00      	nop
 8005b0c:	40023800 	.word	0x40023800
 8005b10:	00f42400 	.word	0x00f42400
 8005b14:	007a1200 	.word	0x007a1200

08005b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b1c:	4b03      	ldr	r3, [pc, #12]	@ (8005b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	2000000c 	.word	0x2000000c

08005b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b34:	f7ff fff0 	bl	8005b18 <HAL_RCC_GetHCLKFreq>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	4b05      	ldr	r3, [pc, #20]	@ (8005b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	0a9b      	lsrs	r3, r3, #10
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	4903      	ldr	r1, [pc, #12]	@ (8005b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b46:	5ccb      	ldrb	r3, [r1, r3]
 8005b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	40023800 	.word	0x40023800
 8005b54:	0800d2c0 	.word	0x0800d2c0

08005b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b5c:	f7ff ffdc 	bl	8005b18 <HAL_RCC_GetHCLKFreq>
 8005b60:	4602      	mov	r2, r0
 8005b62:	4b05      	ldr	r3, [pc, #20]	@ (8005b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	0b5b      	lsrs	r3, r3, #13
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	4903      	ldr	r1, [pc, #12]	@ (8005b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b6e:	5ccb      	ldrb	r3, [r1, r3]
 8005b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	0800d2c0 	.word	0x0800d2c0

08005b80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e07b      	b.n	8005c8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d108      	bne.n	8005bac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ba2:	d009      	beq.n	8005bb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	61da      	str	r2, [r3, #28]
 8005baa:	e005      	b.n	8005bb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d106      	bne.n	8005bd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7fb fdf6 	bl	80017c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	431a      	orrs	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c32:	431a      	orrs	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c3c:	ea42 0103 	orr.w	r1, r2, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c44:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	0c1b      	lsrs	r3, r3, #16
 8005c56:	f003 0104 	and.w	r1, r3, #4
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5e:	f003 0210 	and.w	r2, r3, #16
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	430a      	orrs	r2, r1
 8005c68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	69da      	ldr	r2, [r3, #28]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b082      	sub	sp, #8
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e041      	b.n	8005d28 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d106      	bne.n	8005cbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7fb ff99 	bl	8001bf0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	f000 fb3b 	bl	800634c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e041      	b.n	8005dc6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d106      	bne.n	8005d5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7fb ff12 	bl	8001b80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3304      	adds	r3, #4
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4610      	mov	r0, r2
 8005d70:	f000 faec 	bl	800634c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
	...

08005dd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d109      	bne.n	8005df4 <HAL_TIM_PWM_Start+0x24>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	bf14      	ite	ne
 8005dec:	2301      	movne	r3, #1
 8005dee:	2300      	moveq	r3, #0
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	e022      	b.n	8005e3a <HAL_TIM_PWM_Start+0x6a>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d109      	bne.n	8005e0e <HAL_TIM_PWM_Start+0x3e>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	bf14      	ite	ne
 8005e06:	2301      	movne	r3, #1
 8005e08:	2300      	moveq	r3, #0
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	e015      	b.n	8005e3a <HAL_TIM_PWM_Start+0x6a>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d109      	bne.n	8005e28 <HAL_TIM_PWM_Start+0x58>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	bf14      	ite	ne
 8005e20:	2301      	movne	r3, #1
 8005e22:	2300      	moveq	r3, #0
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	e008      	b.n	8005e3a <HAL_TIM_PWM_Start+0x6a>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	bf14      	ite	ne
 8005e34:	2301      	movne	r3, #1
 8005e36:	2300      	moveq	r3, #0
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e07c      	b.n	8005f3c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d104      	bne.n	8005e52 <HAL_TIM_PWM_Start+0x82>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e50:	e013      	b.n	8005e7a <HAL_TIM_PWM_Start+0xaa>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d104      	bne.n	8005e62 <HAL_TIM_PWM_Start+0x92>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e60:	e00b      	b.n	8005e7a <HAL_TIM_PWM_Start+0xaa>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d104      	bne.n	8005e72 <HAL_TIM_PWM_Start+0xa2>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e70:	e003      	b.n	8005e7a <HAL_TIM_PWM_Start+0xaa>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2202      	movs	r2, #2
 8005e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	6839      	ldr	r1, [r7, #0]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 fcbe 	bl	8006804 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a2d      	ldr	r2, [pc, #180]	@ (8005f44 <HAL_TIM_PWM_Start+0x174>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d004      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xcc>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a2c      	ldr	r2, [pc, #176]	@ (8005f48 <HAL_TIM_PWM_Start+0x178>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d101      	bne.n	8005ea0 <HAL_TIM_PWM_Start+0xd0>
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e000      	b.n	8005ea2 <HAL_TIM_PWM_Start+0xd2>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d007      	beq.n	8005eb6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005eb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a22      	ldr	r2, [pc, #136]	@ (8005f44 <HAL_TIM_PWM_Start+0x174>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d022      	beq.n	8005f06 <HAL_TIM_PWM_Start+0x136>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec8:	d01d      	beq.n	8005f06 <HAL_TIM_PWM_Start+0x136>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a1f      	ldr	r2, [pc, #124]	@ (8005f4c <HAL_TIM_PWM_Start+0x17c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d018      	beq.n	8005f06 <HAL_TIM_PWM_Start+0x136>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f50 <HAL_TIM_PWM_Start+0x180>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d013      	beq.n	8005f06 <HAL_TIM_PWM_Start+0x136>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a1c      	ldr	r2, [pc, #112]	@ (8005f54 <HAL_TIM_PWM_Start+0x184>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d00e      	beq.n	8005f06 <HAL_TIM_PWM_Start+0x136>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a16      	ldr	r2, [pc, #88]	@ (8005f48 <HAL_TIM_PWM_Start+0x178>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d009      	beq.n	8005f06 <HAL_TIM_PWM_Start+0x136>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a18      	ldr	r2, [pc, #96]	@ (8005f58 <HAL_TIM_PWM_Start+0x188>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d004      	beq.n	8005f06 <HAL_TIM_PWM_Start+0x136>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a16      	ldr	r2, [pc, #88]	@ (8005f5c <HAL_TIM_PWM_Start+0x18c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d111      	bne.n	8005f2a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f003 0307 	and.w	r3, r3, #7
 8005f10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b06      	cmp	r3, #6
 8005f16:	d010      	beq.n	8005f3a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0201 	orr.w	r2, r2, #1
 8005f26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f28:	e007      	b.n	8005f3a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f042 0201 	orr.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	40010000 	.word	0x40010000
 8005f48:	40010400 	.word	0x40010400
 8005f4c:	40000400 	.word	0x40000400
 8005f50:	40000800 	.word	0x40000800
 8005f54:	40000c00 	.word	0x40000c00
 8005f58:	40014000 	.word	0x40014000
 8005f5c:	40001800 	.word	0x40001800

08005f60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d101      	bne.n	8005f74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e097      	b.n	80060a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d106      	bne.n	8005f8e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7fb fc83 	bl	8001894 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2202      	movs	r2, #2
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6812      	ldr	r2, [r2, #0]
 8005fa0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fa4:	f023 0307 	bic.w	r3, r3, #7
 8005fa8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	3304      	adds	r3, #4
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	f000 f9c9 	bl	800634c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fe2:	f023 0303 	bic.w	r3, r3, #3
 8005fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	021b      	lsls	r3, r3, #8
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006000:	f023 030c 	bic.w	r3, r3, #12
 8006004:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800600c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006010:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	69db      	ldr	r3, [r3, #28]
 800601a:	021b      	lsls	r3, r3, #8
 800601c:	4313      	orrs	r3, r2
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	4313      	orrs	r3, r2
 8006022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	011a      	lsls	r2, r3, #4
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	031b      	lsls	r3, r3, #12
 8006030:	4313      	orrs	r3, r2
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	4313      	orrs	r3, r2
 8006036:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800603e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006046:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	011b      	lsls	r3, r3, #4
 8006052:	4313      	orrs	r3, r2
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4313      	orrs	r3, r2
 8006058:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3718      	adds	r7, #24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80060c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80060d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d110      	bne.n	80060fe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d102      	bne.n	80060e8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80060e2:	7b7b      	ldrb	r3, [r7, #13]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d001      	beq.n	80060ec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e069      	b.n	80061c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80060fc:	e031      	b.n	8006162 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b04      	cmp	r3, #4
 8006102:	d110      	bne.n	8006126 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006104:	7bbb      	ldrb	r3, [r7, #14]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d102      	bne.n	8006110 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800610a:	7b3b      	ldrb	r3, [r7, #12]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d001      	beq.n	8006114 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e055      	b.n	80061c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006124:	e01d      	b.n	8006162 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006126:	7bfb      	ldrb	r3, [r7, #15]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d108      	bne.n	800613e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800612c:	7bbb      	ldrb	r3, [r7, #14]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d105      	bne.n	800613e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006132:	7b7b      	ldrb	r3, [r7, #13]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d102      	bne.n	800613e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006138:	7b3b      	ldrb	r3, [r7, #12]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d001      	beq.n	8006142 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e03e      	b.n	80061c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2202      	movs	r2, #2
 8006146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2202      	movs	r2, #2
 800614e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2202      	movs	r2, #2
 8006156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2202      	movs	r2, #2
 800615e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <HAL_TIM_Encoder_Start+0xc4>
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b04      	cmp	r3, #4
 800616c:	d008      	beq.n	8006180 <HAL_TIM_Encoder_Start+0xd4>
 800616e:	e00f      	b.n	8006190 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2201      	movs	r2, #1
 8006176:	2100      	movs	r1, #0
 8006178:	4618      	mov	r0, r3
 800617a:	f000 fb43 	bl	8006804 <TIM_CCxChannelCmd>
      break;
 800617e:	e016      	b.n	80061ae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2201      	movs	r2, #1
 8006186:	2104      	movs	r1, #4
 8006188:	4618      	mov	r0, r3
 800618a:	f000 fb3b 	bl	8006804 <TIM_CCxChannelCmd>
      break;
 800618e:	e00e      	b.n	80061ae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2201      	movs	r2, #1
 8006196:	2100      	movs	r1, #0
 8006198:	4618      	mov	r0, r3
 800619a:	f000 fb33 	bl	8006804 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2201      	movs	r2, #1
 80061a4:	2104      	movs	r1, #4
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fb2c 	bl	8006804 <TIM_CCxChannelCmd>
      break;
 80061ac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f042 0201 	orr.w	r2, r2, #1
 80061bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061d4:	2300      	movs	r3, #0
 80061d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d101      	bne.n	80061e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061e2:	2302      	movs	r3, #2
 80061e4:	e0ae      	b.n	8006344 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2201      	movs	r2, #1
 80061ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2b0c      	cmp	r3, #12
 80061f2:	f200 809f 	bhi.w	8006334 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80061f6:	a201      	add	r2, pc, #4	@ (adr r2, 80061fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fc:	08006231 	.word	0x08006231
 8006200:	08006335 	.word	0x08006335
 8006204:	08006335 	.word	0x08006335
 8006208:	08006335 	.word	0x08006335
 800620c:	08006271 	.word	0x08006271
 8006210:	08006335 	.word	0x08006335
 8006214:	08006335 	.word	0x08006335
 8006218:	08006335 	.word	0x08006335
 800621c:	080062b3 	.word	0x080062b3
 8006220:	08006335 	.word	0x08006335
 8006224:	08006335 	.word	0x08006335
 8006228:	08006335 	.word	0x08006335
 800622c:	080062f3 	.word	0x080062f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68b9      	ldr	r1, [r7, #8]
 8006236:	4618      	mov	r0, r3
 8006238:	f000 f934 	bl	80064a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699a      	ldr	r2, [r3, #24]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f042 0208 	orr.w	r2, r2, #8
 800624a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f022 0204 	bic.w	r2, r2, #4
 800625a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6999      	ldr	r1, [r3, #24]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	691a      	ldr	r2, [r3, #16]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	619a      	str	r2, [r3, #24]
      break;
 800626e:	e064      	b.n	800633a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68b9      	ldr	r1, [r7, #8]
 8006276:	4618      	mov	r0, r3
 8006278:	f000 f984 	bl	8006584 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699a      	ldr	r2, [r3, #24]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800628a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800629a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6999      	ldr	r1, [r3, #24]
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	021a      	lsls	r2, r3, #8
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	430a      	orrs	r2, r1
 80062ae:	619a      	str	r2, [r3, #24]
      break;
 80062b0:	e043      	b.n	800633a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68b9      	ldr	r1, [r7, #8]
 80062b8:	4618      	mov	r0, r3
 80062ba:	f000 f9d9 	bl	8006670 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	69da      	ldr	r2, [r3, #28]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f042 0208 	orr.w	r2, r2, #8
 80062cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69da      	ldr	r2, [r3, #28]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f022 0204 	bic.w	r2, r2, #4
 80062dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	69d9      	ldr	r1, [r3, #28]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	691a      	ldr	r2, [r3, #16]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	61da      	str	r2, [r3, #28]
      break;
 80062f0:	e023      	b.n	800633a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68b9      	ldr	r1, [r7, #8]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fa2d 	bl	8006758 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69da      	ldr	r2, [r3, #28]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800630c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69da      	ldr	r2, [r3, #28]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800631c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	69d9      	ldr	r1, [r3, #28]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	021a      	lsls	r2, r3, #8
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	61da      	str	r2, [r3, #28]
      break;
 8006332:	e002      	b.n	800633a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	75fb      	strb	r3, [r7, #23]
      break;
 8006338:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006342:	7dfb      	ldrb	r3, [r7, #23]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3718      	adds	r7, #24
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a46      	ldr	r2, [pc, #280]	@ (8006478 <TIM_Base_SetConfig+0x12c>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d013      	beq.n	800638c <TIM_Base_SetConfig+0x40>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800636a:	d00f      	beq.n	800638c <TIM_Base_SetConfig+0x40>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a43      	ldr	r2, [pc, #268]	@ (800647c <TIM_Base_SetConfig+0x130>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d00b      	beq.n	800638c <TIM_Base_SetConfig+0x40>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a42      	ldr	r2, [pc, #264]	@ (8006480 <TIM_Base_SetConfig+0x134>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d007      	beq.n	800638c <TIM_Base_SetConfig+0x40>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a41      	ldr	r2, [pc, #260]	@ (8006484 <TIM_Base_SetConfig+0x138>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d003      	beq.n	800638c <TIM_Base_SetConfig+0x40>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a40      	ldr	r2, [pc, #256]	@ (8006488 <TIM_Base_SetConfig+0x13c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d108      	bne.n	800639e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a35      	ldr	r2, [pc, #212]	@ (8006478 <TIM_Base_SetConfig+0x12c>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d02b      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ac:	d027      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a32      	ldr	r2, [pc, #200]	@ (800647c <TIM_Base_SetConfig+0x130>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d023      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a31      	ldr	r2, [pc, #196]	@ (8006480 <TIM_Base_SetConfig+0x134>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d01f      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a30      	ldr	r2, [pc, #192]	@ (8006484 <TIM_Base_SetConfig+0x138>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d01b      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a2f      	ldr	r2, [pc, #188]	@ (8006488 <TIM_Base_SetConfig+0x13c>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d017      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a2e      	ldr	r2, [pc, #184]	@ (800648c <TIM_Base_SetConfig+0x140>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d013      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a2d      	ldr	r2, [pc, #180]	@ (8006490 <TIM_Base_SetConfig+0x144>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d00f      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a2c      	ldr	r2, [pc, #176]	@ (8006494 <TIM_Base_SetConfig+0x148>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00b      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a2b      	ldr	r2, [pc, #172]	@ (8006498 <TIM_Base_SetConfig+0x14c>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d007      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a2a      	ldr	r2, [pc, #168]	@ (800649c <TIM_Base_SetConfig+0x150>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d003      	beq.n	80063fe <TIM_Base_SetConfig+0xb2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a29      	ldr	r2, [pc, #164]	@ (80064a0 <TIM_Base_SetConfig+0x154>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d108      	bne.n	8006410 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a10      	ldr	r2, [pc, #64]	@ (8006478 <TIM_Base_SetConfig+0x12c>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d003      	beq.n	8006444 <TIM_Base_SetConfig+0xf8>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a12      	ldr	r2, [pc, #72]	@ (8006488 <TIM_Base_SetConfig+0x13c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d103      	bne.n	800644c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b01      	cmp	r3, #1
 800645c:	d105      	bne.n	800646a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	f023 0201 	bic.w	r2, r3, #1
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	611a      	str	r2, [r3, #16]
  }
}
 800646a:	bf00      	nop
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	40010000 	.word	0x40010000
 800647c:	40000400 	.word	0x40000400
 8006480:	40000800 	.word	0x40000800
 8006484:	40000c00 	.word	0x40000c00
 8006488:	40010400 	.word	0x40010400
 800648c:	40014000 	.word	0x40014000
 8006490:	40014400 	.word	0x40014400
 8006494:	40014800 	.word	0x40014800
 8006498:	40001800 	.word	0x40001800
 800649c:	40001c00 	.word	0x40001c00
 80064a0:	40002000 	.word	0x40002000

080064a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a1b      	ldr	r3, [r3, #32]
 80064b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a1b      	ldr	r3, [r3, #32]
 80064b8:	f023 0201 	bic.w	r2, r3, #1
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 0303 	bic.w	r3, r3, #3
 80064da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f023 0302 	bic.w	r3, r3, #2
 80064ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a20      	ldr	r2, [pc, #128]	@ (800657c <TIM_OC1_SetConfig+0xd8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d003      	beq.n	8006508 <TIM_OC1_SetConfig+0x64>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a1f      	ldr	r2, [pc, #124]	@ (8006580 <TIM_OC1_SetConfig+0xdc>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d10c      	bne.n	8006522 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f023 0308 	bic.w	r3, r3, #8
 800650e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	4313      	orrs	r3, r2
 8006518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f023 0304 	bic.w	r3, r3, #4
 8006520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a15      	ldr	r2, [pc, #84]	@ (800657c <TIM_OC1_SetConfig+0xd8>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d003      	beq.n	8006532 <TIM_OC1_SetConfig+0x8e>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a14      	ldr	r2, [pc, #80]	@ (8006580 <TIM_OC1_SetConfig+0xdc>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d111      	bne.n	8006556 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4313      	orrs	r3, r2
 800654a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4313      	orrs	r3, r2
 8006554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	621a      	str	r2, [r3, #32]
}
 8006570:	bf00      	nop
 8006572:	371c      	adds	r7, #28
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr
 800657c:	40010000 	.word	0x40010000
 8006580:	40010400 	.word	0x40010400

08006584 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006584:	b480      	push	{r7}
 8006586:	b087      	sub	sp, #28
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	f023 0210 	bic.w	r2, r3, #16
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	021b      	lsls	r3, r3, #8
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f023 0320 	bic.w	r3, r3, #32
 80065ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	011b      	lsls	r3, r3, #4
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	4313      	orrs	r3, r2
 80065da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a22      	ldr	r2, [pc, #136]	@ (8006668 <TIM_OC2_SetConfig+0xe4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d003      	beq.n	80065ec <TIM_OC2_SetConfig+0x68>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a21      	ldr	r2, [pc, #132]	@ (800666c <TIM_OC2_SetConfig+0xe8>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d10d      	bne.n	8006608 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	011b      	lsls	r3, r3, #4
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006606:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a17      	ldr	r2, [pc, #92]	@ (8006668 <TIM_OC2_SetConfig+0xe4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d003      	beq.n	8006618 <TIM_OC2_SetConfig+0x94>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a16      	ldr	r2, [pc, #88]	@ (800666c <TIM_OC2_SetConfig+0xe8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d113      	bne.n	8006640 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800661e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006626:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	4313      	orrs	r3, r2
 8006632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4313      	orrs	r3, r2
 800663e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	621a      	str	r2, [r3, #32]
}
 800665a:	bf00      	nop
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40010000 	.word	0x40010000
 800666c:	40010400 	.word	0x40010400

08006670 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a1b      	ldr	r3, [r3, #32]
 8006684:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800669e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f023 0303 	bic.w	r3, r3, #3
 80066a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	021b      	lsls	r3, r3, #8
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a21      	ldr	r2, [pc, #132]	@ (8006750 <TIM_OC3_SetConfig+0xe0>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d003      	beq.n	80066d6 <TIM_OC3_SetConfig+0x66>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a20      	ldr	r2, [pc, #128]	@ (8006754 <TIM_OC3_SetConfig+0xe4>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d10d      	bne.n	80066f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	021b      	lsls	r3, r3, #8
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a16      	ldr	r2, [pc, #88]	@ (8006750 <TIM_OC3_SetConfig+0xe0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d003      	beq.n	8006702 <TIM_OC3_SetConfig+0x92>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a15      	ldr	r2, [pc, #84]	@ (8006754 <TIM_OC3_SetConfig+0xe4>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d113      	bne.n	800672a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	011b      	lsls	r3, r3, #4
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4313      	orrs	r3, r2
 800671c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	011b      	lsls	r3, r3, #4
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	621a      	str	r2, [r3, #32]
}
 8006744:	bf00      	nop
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	40010000 	.word	0x40010000
 8006754:	40010400 	.word	0x40010400

08006758 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800678e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	021b      	lsls	r3, r3, #8
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	4313      	orrs	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	031b      	lsls	r3, r3, #12
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a12      	ldr	r2, [pc, #72]	@ (80067fc <TIM_OC4_SetConfig+0xa4>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d003      	beq.n	80067c0 <TIM_OC4_SetConfig+0x68>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a11      	ldr	r2, [pc, #68]	@ (8006800 <TIM_OC4_SetConfig+0xa8>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d109      	bne.n	80067d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	019b      	lsls	r3, r3, #6
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	621a      	str	r2, [r3, #32]
}
 80067ee:	bf00      	nop
 80067f0:	371c      	adds	r7, #28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	40010000 	.word	0x40010000
 8006800:	40010400 	.word	0x40010400

08006804 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006804:	b480      	push	{r7}
 8006806:	b087      	sub	sp, #28
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	f003 031f 	and.w	r3, r3, #31
 8006816:	2201      	movs	r2, #1
 8006818:	fa02 f303 	lsl.w	r3, r2, r3
 800681c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6a1a      	ldr	r2, [r3, #32]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	43db      	mvns	r3, r3
 8006826:	401a      	ands	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6a1a      	ldr	r2, [r3, #32]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	f003 031f 	and.w	r3, r3, #31
 8006836:	6879      	ldr	r1, [r7, #4]
 8006838:	fa01 f303 	lsl.w	r3, r1, r3
 800683c:	431a      	orrs	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	621a      	str	r2, [r3, #32]
}
 8006842:	bf00      	nop
 8006844:	371c      	adds	r7, #28
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
	...

08006850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006860:	2b01      	cmp	r3, #1
 8006862:	d101      	bne.n	8006868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006864:	2302      	movs	r3, #2
 8006866:	e05a      	b.n	800691e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800688e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a21      	ldr	r2, [pc, #132]	@ (800692c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d022      	beq.n	80068f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068b4:	d01d      	beq.n	80068f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a1d      	ldr	r2, [pc, #116]	@ (8006930 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d018      	beq.n	80068f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006934 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d013      	beq.n	80068f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a1a      	ldr	r2, [pc, #104]	@ (8006938 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d00e      	beq.n	80068f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a18      	ldr	r2, [pc, #96]	@ (800693c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d009      	beq.n	80068f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a17      	ldr	r2, [pc, #92]	@ (8006940 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d004      	beq.n	80068f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a15      	ldr	r2, [pc, #84]	@ (8006944 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d10c      	bne.n	800690c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	4313      	orrs	r3, r2
 8006902:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	40010000 	.word	0x40010000
 8006930:	40000400 	.word	0x40000400
 8006934:	40000800 	.word	0x40000800
 8006938:	40000c00 	.word	0x40000c00
 800693c:	40010400 	.word	0x40010400
 8006940:	40014000 	.word	0x40014000
 8006944:	40001800 	.word	0x40001800

08006948 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e042      	b.n	80069e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d106      	bne.n	8006974 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7fb faa0 	bl	8001eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2224      	movs	r2, #36	@ 0x24
 8006978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68da      	ldr	r2, [r3, #12]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800698a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 fcdb 	bl	8007348 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	691a      	ldr	r2, [r3, #16]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80069a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	695a      	ldr	r2, [r3, #20]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80069b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68da      	ldr	r2, [r3, #12]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80069c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2220      	movs	r2, #32
 80069d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3708      	adds	r7, #8
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	4613      	mov	r3, r2
 80069f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b20      	cmp	r3, #32
 8006a00:	d112      	bne.n	8006a28 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <HAL_UART_Receive_IT+0x26>
 8006a08:	88fb      	ldrh	r3, [r7, #6]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e00b      	b.n	8006a2a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a18:	88fb      	ldrh	r3, [r7, #6]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	68b9      	ldr	r1, [r7, #8]
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f000 faba 	bl	8006f98 <UART_Start_Receive_IT>
 8006a24:	4603      	mov	r3, r0
 8006a26:	e000      	b.n	8006a2a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006a28:	2302      	movs	r3, #2
  }
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
	...

08006a34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b0ba      	sub	sp, #232	@ 0xe8
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a6a:	f003 030f 	and.w	r3, r3, #15
 8006a6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006a72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10f      	bne.n	8006a9a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d009      	beq.n	8006a9a <HAL_UART_IRQHandler+0x66>
 8006a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a8a:	f003 0320 	and.w	r3, r3, #32
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fb99 	bl	80071ca <UART_Receive_IT>
      return;
 8006a98:	e25b      	b.n	8006f52 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006a9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 80de 	beq.w	8006c60 <HAL_UART_IRQHandler+0x22c>
 8006aa4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006aa8:	f003 0301 	and.w	r3, r3, #1
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d106      	bne.n	8006abe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ab4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 80d1 	beq.w	8006c60 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00b      	beq.n	8006ae2 <HAL_UART_IRQHandler+0xae>
 8006aca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d005      	beq.n	8006ae2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ada:	f043 0201 	orr.w	r2, r3, #1
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ae6:	f003 0304 	and.w	r3, r3, #4
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00b      	beq.n	8006b06 <HAL_UART_IRQHandler+0xd2>
 8006aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d005      	beq.n	8006b06 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006afe:	f043 0202 	orr.w	r2, r3, #2
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00b      	beq.n	8006b2a <HAL_UART_IRQHandler+0xf6>
 8006b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d005      	beq.n	8006b2a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b22:	f043 0204 	orr.w	r2, r3, #4
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b2e:	f003 0308 	and.w	r3, r3, #8
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d011      	beq.n	8006b5a <HAL_UART_IRQHandler+0x126>
 8006b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b3a:	f003 0320 	and.w	r3, r3, #32
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d105      	bne.n	8006b4e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d005      	beq.n	8006b5a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b52:	f043 0208 	orr.w	r2, r3, #8
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 81f2 	beq.w	8006f48 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b68:	f003 0320 	and.w	r3, r3, #32
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d008      	beq.n	8006b82 <HAL_UART_IRQHandler+0x14e>
 8006b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b74:	f003 0320 	and.w	r3, r3, #32
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d002      	beq.n	8006b82 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 fb24 	bl	80071ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	695b      	ldr	r3, [r3, #20]
 8006b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b8c:	2b40      	cmp	r3, #64	@ 0x40
 8006b8e:	bf0c      	ite	eq
 8006b90:	2301      	moveq	r3, #1
 8006b92:	2300      	movne	r3, #0
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b9e:	f003 0308 	and.w	r3, r3, #8
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d103      	bne.n	8006bae <HAL_UART_IRQHandler+0x17a>
 8006ba6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d04f      	beq.n	8006c4e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fa2c 	bl	800700c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bbe:	2b40      	cmp	r3, #64	@ 0x40
 8006bc0:	d141      	bne.n	8006c46 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3314      	adds	r3, #20
 8006bc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006bd0:	e853 3f00 	ldrex	r3, [r3]
 8006bd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006bd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006bdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006be0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	3314      	adds	r3, #20
 8006bea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006bee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006bfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006bfe:	e841 2300 	strex	r3, r2, [r1]
 8006c02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1d9      	bne.n	8006bc2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d013      	beq.n	8006c3e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c1a:	4a7e      	ldr	r2, [pc, #504]	@ (8006e14 <HAL_UART_IRQHandler+0x3e0>)
 8006c1c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fb fec5 	bl	80029b2 <HAL_DMA_Abort_IT>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d016      	beq.n	8006c5c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006c38:	4610      	mov	r0, r2
 8006c3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c3c:	e00e      	b.n	8006c5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f994 	bl	8006f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c44:	e00a      	b.n	8006c5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f990 	bl	8006f6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c4c:	e006      	b.n	8006c5c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 f98c 	bl	8006f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006c5a:	e175      	b.n	8006f48 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c5c:	bf00      	nop
    return;
 8006c5e:	e173      	b.n	8006f48 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	f040 814f 	bne.w	8006f08 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c6e:	f003 0310 	and.w	r3, r3, #16
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f000 8148 	beq.w	8006f08 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c7c:	f003 0310 	and.w	r3, r3, #16
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 8141 	beq.w	8006f08 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c86:	2300      	movs	r3, #0
 8006c88:	60bb      	str	r3, [r7, #8]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	60bb      	str	r3, [r7, #8]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	60bb      	str	r3, [r7, #8]
 8006c9a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ca6:	2b40      	cmp	r3, #64	@ 0x40
 8006ca8:	f040 80b6 	bne.w	8006e18 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cb8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 8145 	beq.w	8006f4c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006cc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	f080 813e 	bcs.w	8006f4c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006cd6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ce2:	f000 8088 	beq.w	8006df6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	330c      	adds	r3, #12
 8006cec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006cf4:	e853 3f00 	ldrex	r3, [r3]
 8006cf8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	330c      	adds	r3, #12
 8006d0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006d12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006d16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006d1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006d2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1d9      	bne.n	8006ce6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3314      	adds	r3, #20
 8006d38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d3c:	e853 3f00 	ldrex	r3, [r3]
 8006d40:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006d42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d44:	f023 0301 	bic.w	r3, r3, #1
 8006d48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3314      	adds	r3, #20
 8006d52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006d56:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006d5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006d5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006d62:	e841 2300 	strex	r3, r2, [r1]
 8006d66:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006d68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1e1      	bne.n	8006d32 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3314      	adds	r3, #20
 8006d74:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006d78:	e853 3f00 	ldrex	r3, [r3]
 8006d7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006d7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3314      	adds	r3, #20
 8006d8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006d92:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006d94:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d96:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006d98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006d9a:	e841 2300 	strex	r3, r2, [r1]
 8006d9e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006da0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d1e3      	bne.n	8006d6e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2220      	movs	r2, #32
 8006daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	330c      	adds	r3, #12
 8006dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006dbe:	e853 3f00 	ldrex	r3, [r3]
 8006dc2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006dc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006dc6:	f023 0310 	bic.w	r3, r3, #16
 8006dca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	330c      	adds	r3, #12
 8006dd4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006dd8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006dda:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ddc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006dde:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006de0:	e841 2300 	strex	r3, r2, [r1]
 8006de4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006de6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e3      	bne.n	8006db4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7fb fd6e 	bl	80028d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f8b7 	bl	8006f80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e12:	e09b      	b.n	8006f4c <HAL_UART_IRQHandler+0x518>
 8006e14:	080070d3 	.word	0x080070d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 808e 	beq.w	8006f50 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006e34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 8089 	beq.w	8006f50 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	330c      	adds	r3, #12
 8006e44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e48:	e853 3f00 	ldrex	r3, [r3]
 8006e4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	330c      	adds	r3, #12
 8006e5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006e62:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e6a:	e841 2300 	strex	r3, r2, [r1]
 8006e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1e3      	bne.n	8006e3e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3314      	adds	r3, #20
 8006e7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e80:	e853 3f00 	ldrex	r3, [r3]
 8006e84:	623b      	str	r3, [r7, #32]
   return(result);
 8006e86:	6a3b      	ldr	r3, [r7, #32]
 8006e88:	f023 0301 	bic.w	r3, r3, #1
 8006e8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3314      	adds	r3, #20
 8006e96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006e9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ea0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ea2:	e841 2300 	strex	r3, r2, [r1]
 8006ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1e3      	bne.n	8006e76 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	330c      	adds	r3, #12
 8006ec2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f023 0310 	bic.w	r3, r3, #16
 8006ed2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	330c      	adds	r3, #12
 8006edc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006ee0:	61fa      	str	r2, [r7, #28]
 8006ee2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee4:	69b9      	ldr	r1, [r7, #24]
 8006ee6:	69fa      	ldr	r2, [r7, #28]
 8006ee8:	e841 2300 	strex	r3, r2, [r1]
 8006eec:	617b      	str	r3, [r7, #20]
   return(result);
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1e3      	bne.n	8006ebc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006efa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006efe:	4619      	mov	r1, r3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f83d 	bl	8006f80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f06:	e023      	b.n	8006f50 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d009      	beq.n	8006f28 <HAL_UART_IRQHandler+0x4f4>
 8006f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 f8ea 	bl	80070fa <UART_Transmit_IT>
    return;
 8006f26:	e014      	b.n	8006f52 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00e      	beq.n	8006f52 <HAL_UART_IRQHandler+0x51e>
 8006f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d008      	beq.n	8006f52 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f92a 	bl	800719a <UART_EndTransmit_IT>
    return;
 8006f46:	e004      	b.n	8006f52 <HAL_UART_IRQHandler+0x51e>
    return;
 8006f48:	bf00      	nop
 8006f4a:	e002      	b.n	8006f52 <HAL_UART_IRQHandler+0x51e>
      return;
 8006f4c:	bf00      	nop
 8006f4e:	e000      	b.n	8006f52 <HAL_UART_IRQHandler+0x51e>
      return;
 8006f50:	bf00      	nop
  }
}
 8006f52:	37e8      	adds	r7, #232	@ 0xe8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	88fa      	ldrh	r2, [r7, #6]
 8006fb0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	88fa      	ldrh	r2, [r7, #6]
 8006fb6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2222      	movs	r2, #34	@ 0x22
 8006fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d007      	beq.n	8006fde <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68da      	ldr	r2, [r3, #12]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fdc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	695a      	ldr	r2, [r3, #20]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f042 0201 	orr.w	r2, r2, #1
 8006fec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68da      	ldr	r2, [r3, #12]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f042 0220 	orr.w	r2, r2, #32
 8006ffc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	3714      	adds	r7, #20
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800700c:	b480      	push	{r7}
 800700e:	b095      	sub	sp, #84	@ 0x54
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	330c      	adds	r3, #12
 800701a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800701e:	e853 3f00 	ldrex	r3, [r3]
 8007022:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007026:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800702a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	330c      	adds	r3, #12
 8007032:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007034:	643a      	str	r2, [r7, #64]	@ 0x40
 8007036:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007038:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800703a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800703c:	e841 2300 	strex	r3, r2, [r1]
 8007040:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1e5      	bne.n	8007014 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3314      	adds	r3, #20
 800704e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	6a3b      	ldr	r3, [r7, #32]
 8007052:	e853 3f00 	ldrex	r3, [r3]
 8007056:	61fb      	str	r3, [r7, #28]
   return(result);
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	f023 0301 	bic.w	r3, r3, #1
 800705e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3314      	adds	r3, #20
 8007066:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007068:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800706a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800706e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007070:	e841 2300 	strex	r3, r2, [r1]
 8007074:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1e5      	bne.n	8007048 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007080:	2b01      	cmp	r3, #1
 8007082:	d119      	bne.n	80070b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	330c      	adds	r3, #12
 800708a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	e853 3f00 	ldrex	r3, [r3]
 8007092:	60bb      	str	r3, [r7, #8]
   return(result);
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	f023 0310 	bic.w	r3, r3, #16
 800709a:	647b      	str	r3, [r7, #68]	@ 0x44
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	330c      	adds	r3, #12
 80070a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070a4:	61ba      	str	r2, [r7, #24]
 80070a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a8:	6979      	ldr	r1, [r7, #20]
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	e841 2300 	strex	r3, r2, [r1]
 80070b0:	613b      	str	r3, [r7, #16]
   return(result);
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1e5      	bne.n	8007084 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2220      	movs	r2, #32
 80070bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80070c6:	bf00      	nop
 80070c8:	3754      	adds	r7, #84	@ 0x54
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2200      	movs	r2, #0
 80070ea:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f7ff ff3d 	bl	8006f6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070f2:	bf00      	nop
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070fa:	b480      	push	{r7}
 80070fc:	b085      	sub	sp, #20
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b21      	cmp	r3, #33	@ 0x21
 800710c:	d13e      	bne.n	800718c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007116:	d114      	bne.n	8007142 <UART_Transmit_IT+0x48>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	691b      	ldr	r3, [r3, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d110      	bne.n	8007142 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	881b      	ldrh	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007134:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	1c9a      	adds	r2, r3, #2
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	621a      	str	r2, [r3, #32]
 8007140:	e008      	b.n	8007154 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	1c59      	adds	r1, r3, #1
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	6211      	str	r1, [r2, #32]
 800714c:	781a      	ldrb	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007158:	b29b      	uxth	r3, r3
 800715a:	3b01      	subs	r3, #1
 800715c:	b29b      	uxth	r3, r3
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	4619      	mov	r1, r3
 8007162:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10f      	bne.n	8007188 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68da      	ldr	r2, [r3, #12]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007176:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68da      	ldr	r2, [r3, #12]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007186:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	e000      	b.n	800718e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800718c:	2302      	movs	r3, #2
  }
}
 800718e:	4618      	mov	r0, r3
 8007190:	3714      	adds	r7, #20
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b082      	sub	sp, #8
 800719e:	af00      	add	r7, sp, #0
 80071a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68da      	ldr	r2, [r3, #12]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2220      	movs	r2, #32
 80071b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7ff fecc 	bl	8006f58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b08c      	sub	sp, #48	@ 0x30
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b22      	cmp	r3, #34	@ 0x22
 80071dc:	f040 80ae 	bne.w	800733c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071e8:	d117      	bne.n	800721a <UART_Receive_IT+0x50>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d113      	bne.n	800721a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071f2:	2300      	movs	r3, #0
 80071f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	b29b      	uxth	r3, r3
 8007204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007208:	b29a      	uxth	r2, r3
 800720a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007212:	1c9a      	adds	r2, r3, #2
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	629a      	str	r2, [r3, #40]	@ 0x28
 8007218:	e026      	b.n	8007268 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800721e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007220:	2300      	movs	r3, #0
 8007222:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800722c:	d007      	beq.n	800723e <UART_Receive_IT+0x74>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10a      	bne.n	800724c <UART_Receive_IT+0x82>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d106      	bne.n	800724c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	b2da      	uxtb	r2, r3
 8007246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007248:	701a      	strb	r2, [r3, #0]
 800724a:	e008      	b.n	800725e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	b2db      	uxtb	r3, r3
 8007254:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007258:	b2da      	uxtb	r2, r3
 800725a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800725c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800726c:	b29b      	uxth	r3, r3
 800726e:	3b01      	subs	r3, #1
 8007270:	b29b      	uxth	r3, r3
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	4619      	mov	r1, r3
 8007276:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007278:	2b00      	cmp	r3, #0
 800727a:	d15d      	bne.n	8007338 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68da      	ldr	r2, [r3, #12]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 0220 	bic.w	r2, r2, #32
 800728a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800729a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	695a      	ldr	r2, [r3, #20]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0201 	bic.w	r2, r2, #1
 80072aa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2220      	movs	r2, #32
 80072b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d135      	bne.n	800732e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	330c      	adds	r3, #12
 80072ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	e853 3f00 	ldrex	r3, [r3]
 80072d6:	613b      	str	r3, [r7, #16]
   return(result);
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	f023 0310 	bic.w	r3, r3, #16
 80072de:	627b      	str	r3, [r7, #36]	@ 0x24
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	330c      	adds	r3, #12
 80072e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072e8:	623a      	str	r2, [r7, #32]
 80072ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ec:	69f9      	ldr	r1, [r7, #28]
 80072ee:	6a3a      	ldr	r2, [r7, #32]
 80072f0:	e841 2300 	strex	r3, r2, [r1]
 80072f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1e5      	bne.n	80072c8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 0310 	and.w	r3, r3, #16
 8007306:	2b10      	cmp	r3, #16
 8007308:	d10a      	bne.n	8007320 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800730a:	2300      	movs	r3, #0
 800730c:	60fb      	str	r3, [r7, #12]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	60fb      	str	r3, [r7, #12]
 800731e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007324:	4619      	mov	r1, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7ff fe2a 	bl	8006f80 <HAL_UARTEx_RxEventCallback>
 800732c:	e002      	b.n	8007334 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7fa f912 	bl	8001558 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	e002      	b.n	800733e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	e000      	b.n	800733e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800733c:	2302      	movs	r3, #2
  }
}
 800733e:	4618      	mov	r0, r3
 8007340:	3730      	adds	r7, #48	@ 0x30
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
	...

08007348 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800734c:	b0c0      	sub	sp, #256	@ 0x100
 800734e:	af00      	add	r7, sp, #0
 8007350:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007364:	68d9      	ldr	r1, [r3, #12]
 8007366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	ea40 0301 	orr.w	r3, r0, r1
 8007370:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007376:	689a      	ldr	r2, [r3, #8]
 8007378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	431a      	orrs	r2, r3
 8007380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	431a      	orrs	r2, r3
 8007388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	4313      	orrs	r3, r2
 8007390:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80073a0:	f021 010c 	bic.w	r1, r1, #12
 80073a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80073ae:	430b      	orrs	r3, r1
 80073b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80073be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c2:	6999      	ldr	r1, [r3, #24]
 80073c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	ea40 0301 	orr.w	r3, r0, r1
 80073ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	4b8f      	ldr	r3, [pc, #572]	@ (8007614 <UART_SetConfig+0x2cc>)
 80073d8:	429a      	cmp	r2, r3
 80073da:	d005      	beq.n	80073e8 <UART_SetConfig+0xa0>
 80073dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	4b8d      	ldr	r3, [pc, #564]	@ (8007618 <UART_SetConfig+0x2d0>)
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d104      	bne.n	80073f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073e8:	f7fe fbb6 	bl	8005b58 <HAL_RCC_GetPCLK2Freq>
 80073ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80073f0:	e003      	b.n	80073fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073f2:	f7fe fb9d 	bl	8005b30 <HAL_RCC_GetPCLK1Freq>
 80073f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007404:	f040 810c 	bne.w	8007620 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800740c:	2200      	movs	r2, #0
 800740e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007412:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007416:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800741a:	4622      	mov	r2, r4
 800741c:	462b      	mov	r3, r5
 800741e:	1891      	adds	r1, r2, r2
 8007420:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007422:	415b      	adcs	r3, r3
 8007424:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007426:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800742a:	4621      	mov	r1, r4
 800742c:	eb12 0801 	adds.w	r8, r2, r1
 8007430:	4629      	mov	r1, r5
 8007432:	eb43 0901 	adc.w	r9, r3, r1
 8007436:	f04f 0200 	mov.w	r2, #0
 800743a:	f04f 0300 	mov.w	r3, #0
 800743e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800744a:	4690      	mov	r8, r2
 800744c:	4699      	mov	r9, r3
 800744e:	4623      	mov	r3, r4
 8007450:	eb18 0303 	adds.w	r3, r8, r3
 8007454:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007458:	462b      	mov	r3, r5
 800745a:	eb49 0303 	adc.w	r3, r9, r3
 800745e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800746e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007472:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007476:	460b      	mov	r3, r1
 8007478:	18db      	adds	r3, r3, r3
 800747a:	653b      	str	r3, [r7, #80]	@ 0x50
 800747c:	4613      	mov	r3, r2
 800747e:	eb42 0303 	adc.w	r3, r2, r3
 8007482:	657b      	str	r3, [r7, #84]	@ 0x54
 8007484:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007488:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800748c:	f7f8 fe9c 	bl	80001c8 <__aeabi_uldivmod>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4b61      	ldr	r3, [pc, #388]	@ (800761c <UART_SetConfig+0x2d4>)
 8007496:	fba3 2302 	umull	r2, r3, r3, r2
 800749a:	095b      	lsrs	r3, r3, #5
 800749c:	011c      	lsls	r4, r3, #4
 800749e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074a2:	2200      	movs	r2, #0
 80074a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80074a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80074ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80074b0:	4642      	mov	r2, r8
 80074b2:	464b      	mov	r3, r9
 80074b4:	1891      	adds	r1, r2, r2
 80074b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80074b8:	415b      	adcs	r3, r3
 80074ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80074c0:	4641      	mov	r1, r8
 80074c2:	eb12 0a01 	adds.w	sl, r2, r1
 80074c6:	4649      	mov	r1, r9
 80074c8:	eb43 0b01 	adc.w	fp, r3, r1
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	f04f 0300 	mov.w	r3, #0
 80074d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80074d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80074dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074e0:	4692      	mov	sl, r2
 80074e2:	469b      	mov	fp, r3
 80074e4:	4643      	mov	r3, r8
 80074e6:	eb1a 0303 	adds.w	r3, sl, r3
 80074ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80074ee:	464b      	mov	r3, r9
 80074f0:	eb4b 0303 	adc.w	r3, fp, r3
 80074f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80074f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007504:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007508:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800750c:	460b      	mov	r3, r1
 800750e:	18db      	adds	r3, r3, r3
 8007510:	643b      	str	r3, [r7, #64]	@ 0x40
 8007512:	4613      	mov	r3, r2
 8007514:	eb42 0303 	adc.w	r3, r2, r3
 8007518:	647b      	str	r3, [r7, #68]	@ 0x44
 800751a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800751e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007522:	f7f8 fe51 	bl	80001c8 <__aeabi_uldivmod>
 8007526:	4602      	mov	r2, r0
 8007528:	460b      	mov	r3, r1
 800752a:	4611      	mov	r1, r2
 800752c:	4b3b      	ldr	r3, [pc, #236]	@ (800761c <UART_SetConfig+0x2d4>)
 800752e:	fba3 2301 	umull	r2, r3, r3, r1
 8007532:	095b      	lsrs	r3, r3, #5
 8007534:	2264      	movs	r2, #100	@ 0x64
 8007536:	fb02 f303 	mul.w	r3, r2, r3
 800753a:	1acb      	subs	r3, r1, r3
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007542:	4b36      	ldr	r3, [pc, #216]	@ (800761c <UART_SetConfig+0x2d4>)
 8007544:	fba3 2302 	umull	r2, r3, r3, r2
 8007548:	095b      	lsrs	r3, r3, #5
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007550:	441c      	add	r4, r3
 8007552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007556:	2200      	movs	r2, #0
 8007558:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800755c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007560:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007564:	4642      	mov	r2, r8
 8007566:	464b      	mov	r3, r9
 8007568:	1891      	adds	r1, r2, r2
 800756a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800756c:	415b      	adcs	r3, r3
 800756e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007570:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007574:	4641      	mov	r1, r8
 8007576:	1851      	adds	r1, r2, r1
 8007578:	6339      	str	r1, [r7, #48]	@ 0x30
 800757a:	4649      	mov	r1, r9
 800757c:	414b      	adcs	r3, r1
 800757e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007580:	f04f 0200 	mov.w	r2, #0
 8007584:	f04f 0300 	mov.w	r3, #0
 8007588:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800758c:	4659      	mov	r1, fp
 800758e:	00cb      	lsls	r3, r1, #3
 8007590:	4651      	mov	r1, sl
 8007592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007596:	4651      	mov	r1, sl
 8007598:	00ca      	lsls	r2, r1, #3
 800759a:	4610      	mov	r0, r2
 800759c:	4619      	mov	r1, r3
 800759e:	4603      	mov	r3, r0
 80075a0:	4642      	mov	r2, r8
 80075a2:	189b      	adds	r3, r3, r2
 80075a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075a8:	464b      	mov	r3, r9
 80075aa:	460a      	mov	r2, r1
 80075ac:	eb42 0303 	adc.w	r3, r2, r3
 80075b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80075c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80075c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80075c8:	460b      	mov	r3, r1
 80075ca:	18db      	adds	r3, r3, r3
 80075cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075ce:	4613      	mov	r3, r2
 80075d0:	eb42 0303 	adc.w	r3, r2, r3
 80075d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80075da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80075de:	f7f8 fdf3 	bl	80001c8 <__aeabi_uldivmod>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	4b0d      	ldr	r3, [pc, #52]	@ (800761c <UART_SetConfig+0x2d4>)
 80075e8:	fba3 1302 	umull	r1, r3, r3, r2
 80075ec:	095b      	lsrs	r3, r3, #5
 80075ee:	2164      	movs	r1, #100	@ 0x64
 80075f0:	fb01 f303 	mul.w	r3, r1, r3
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	3332      	adds	r3, #50	@ 0x32
 80075fa:	4a08      	ldr	r2, [pc, #32]	@ (800761c <UART_SetConfig+0x2d4>)
 80075fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007600:	095b      	lsrs	r3, r3, #5
 8007602:	f003 0207 	and.w	r2, r3, #7
 8007606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4422      	add	r2, r4
 800760e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007610:	e106      	b.n	8007820 <UART_SetConfig+0x4d8>
 8007612:	bf00      	nop
 8007614:	40011000 	.word	0x40011000
 8007618:	40011400 	.word	0x40011400
 800761c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007624:	2200      	movs	r2, #0
 8007626:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800762a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800762e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007632:	4642      	mov	r2, r8
 8007634:	464b      	mov	r3, r9
 8007636:	1891      	adds	r1, r2, r2
 8007638:	6239      	str	r1, [r7, #32]
 800763a:	415b      	adcs	r3, r3
 800763c:	627b      	str	r3, [r7, #36]	@ 0x24
 800763e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007642:	4641      	mov	r1, r8
 8007644:	1854      	adds	r4, r2, r1
 8007646:	4649      	mov	r1, r9
 8007648:	eb43 0501 	adc.w	r5, r3, r1
 800764c:	f04f 0200 	mov.w	r2, #0
 8007650:	f04f 0300 	mov.w	r3, #0
 8007654:	00eb      	lsls	r3, r5, #3
 8007656:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800765a:	00e2      	lsls	r2, r4, #3
 800765c:	4614      	mov	r4, r2
 800765e:	461d      	mov	r5, r3
 8007660:	4643      	mov	r3, r8
 8007662:	18e3      	adds	r3, r4, r3
 8007664:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007668:	464b      	mov	r3, r9
 800766a:	eb45 0303 	adc.w	r3, r5, r3
 800766e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800767e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007682:	f04f 0200 	mov.w	r2, #0
 8007686:	f04f 0300 	mov.w	r3, #0
 800768a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800768e:	4629      	mov	r1, r5
 8007690:	008b      	lsls	r3, r1, #2
 8007692:	4621      	mov	r1, r4
 8007694:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007698:	4621      	mov	r1, r4
 800769a:	008a      	lsls	r2, r1, #2
 800769c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80076a0:	f7f8 fd92 	bl	80001c8 <__aeabi_uldivmod>
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	4b60      	ldr	r3, [pc, #384]	@ (800782c <UART_SetConfig+0x4e4>)
 80076aa:	fba3 2302 	umull	r2, r3, r3, r2
 80076ae:	095b      	lsrs	r3, r3, #5
 80076b0:	011c      	lsls	r4, r3, #4
 80076b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076b6:	2200      	movs	r2, #0
 80076b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80076bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80076c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80076c4:	4642      	mov	r2, r8
 80076c6:	464b      	mov	r3, r9
 80076c8:	1891      	adds	r1, r2, r2
 80076ca:	61b9      	str	r1, [r7, #24]
 80076cc:	415b      	adcs	r3, r3
 80076ce:	61fb      	str	r3, [r7, #28]
 80076d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076d4:	4641      	mov	r1, r8
 80076d6:	1851      	adds	r1, r2, r1
 80076d8:	6139      	str	r1, [r7, #16]
 80076da:	4649      	mov	r1, r9
 80076dc:	414b      	adcs	r3, r1
 80076de:	617b      	str	r3, [r7, #20]
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	f04f 0300 	mov.w	r3, #0
 80076e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076ec:	4659      	mov	r1, fp
 80076ee:	00cb      	lsls	r3, r1, #3
 80076f0:	4651      	mov	r1, sl
 80076f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076f6:	4651      	mov	r1, sl
 80076f8:	00ca      	lsls	r2, r1, #3
 80076fa:	4610      	mov	r0, r2
 80076fc:	4619      	mov	r1, r3
 80076fe:	4603      	mov	r3, r0
 8007700:	4642      	mov	r2, r8
 8007702:	189b      	adds	r3, r3, r2
 8007704:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007708:	464b      	mov	r3, r9
 800770a:	460a      	mov	r2, r1
 800770c:	eb42 0303 	adc.w	r3, r2, r3
 8007710:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800771e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007720:	f04f 0200 	mov.w	r2, #0
 8007724:	f04f 0300 	mov.w	r3, #0
 8007728:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800772c:	4649      	mov	r1, r9
 800772e:	008b      	lsls	r3, r1, #2
 8007730:	4641      	mov	r1, r8
 8007732:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007736:	4641      	mov	r1, r8
 8007738:	008a      	lsls	r2, r1, #2
 800773a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800773e:	f7f8 fd43 	bl	80001c8 <__aeabi_uldivmod>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	4611      	mov	r1, r2
 8007748:	4b38      	ldr	r3, [pc, #224]	@ (800782c <UART_SetConfig+0x4e4>)
 800774a:	fba3 2301 	umull	r2, r3, r3, r1
 800774e:	095b      	lsrs	r3, r3, #5
 8007750:	2264      	movs	r2, #100	@ 0x64
 8007752:	fb02 f303 	mul.w	r3, r2, r3
 8007756:	1acb      	subs	r3, r1, r3
 8007758:	011b      	lsls	r3, r3, #4
 800775a:	3332      	adds	r3, #50	@ 0x32
 800775c:	4a33      	ldr	r2, [pc, #204]	@ (800782c <UART_SetConfig+0x4e4>)
 800775e:	fba2 2303 	umull	r2, r3, r2, r3
 8007762:	095b      	lsrs	r3, r3, #5
 8007764:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007768:	441c      	add	r4, r3
 800776a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800776e:	2200      	movs	r2, #0
 8007770:	673b      	str	r3, [r7, #112]	@ 0x70
 8007772:	677a      	str	r2, [r7, #116]	@ 0x74
 8007774:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007778:	4642      	mov	r2, r8
 800777a:	464b      	mov	r3, r9
 800777c:	1891      	adds	r1, r2, r2
 800777e:	60b9      	str	r1, [r7, #8]
 8007780:	415b      	adcs	r3, r3
 8007782:	60fb      	str	r3, [r7, #12]
 8007784:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007788:	4641      	mov	r1, r8
 800778a:	1851      	adds	r1, r2, r1
 800778c:	6039      	str	r1, [r7, #0]
 800778e:	4649      	mov	r1, r9
 8007790:	414b      	adcs	r3, r1
 8007792:	607b      	str	r3, [r7, #4]
 8007794:	f04f 0200 	mov.w	r2, #0
 8007798:	f04f 0300 	mov.w	r3, #0
 800779c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80077a0:	4659      	mov	r1, fp
 80077a2:	00cb      	lsls	r3, r1, #3
 80077a4:	4651      	mov	r1, sl
 80077a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077aa:	4651      	mov	r1, sl
 80077ac:	00ca      	lsls	r2, r1, #3
 80077ae:	4610      	mov	r0, r2
 80077b0:	4619      	mov	r1, r3
 80077b2:	4603      	mov	r3, r0
 80077b4:	4642      	mov	r2, r8
 80077b6:	189b      	adds	r3, r3, r2
 80077b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077ba:	464b      	mov	r3, r9
 80077bc:	460a      	mov	r2, r1
 80077be:	eb42 0303 	adc.w	r3, r2, r3
 80077c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80077c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80077ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80077d0:	f04f 0200 	mov.w	r2, #0
 80077d4:	f04f 0300 	mov.w	r3, #0
 80077d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80077dc:	4649      	mov	r1, r9
 80077de:	008b      	lsls	r3, r1, #2
 80077e0:	4641      	mov	r1, r8
 80077e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077e6:	4641      	mov	r1, r8
 80077e8:	008a      	lsls	r2, r1, #2
 80077ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80077ee:	f7f8 fceb 	bl	80001c8 <__aeabi_uldivmod>
 80077f2:	4602      	mov	r2, r0
 80077f4:	460b      	mov	r3, r1
 80077f6:	4b0d      	ldr	r3, [pc, #52]	@ (800782c <UART_SetConfig+0x4e4>)
 80077f8:	fba3 1302 	umull	r1, r3, r3, r2
 80077fc:	095b      	lsrs	r3, r3, #5
 80077fe:	2164      	movs	r1, #100	@ 0x64
 8007800:	fb01 f303 	mul.w	r3, r1, r3
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	011b      	lsls	r3, r3, #4
 8007808:	3332      	adds	r3, #50	@ 0x32
 800780a:	4a08      	ldr	r2, [pc, #32]	@ (800782c <UART_SetConfig+0x4e4>)
 800780c:	fba2 2303 	umull	r2, r3, r2, r3
 8007810:	095b      	lsrs	r3, r3, #5
 8007812:	f003 020f 	and.w	r2, r3, #15
 8007816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4422      	add	r2, r4
 800781e:	609a      	str	r2, [r3, #8]
}
 8007820:	bf00      	nop
 8007822:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007826:	46bd      	mov	sp, r7
 8007828:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800782c:	51eb851f 	.word	0x51eb851f

08007830 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007830:	b084      	sub	sp, #16
 8007832:	b580      	push	{r7, lr}
 8007834:	b084      	sub	sp, #16
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	f107 001c 	add.w	r0, r7, #28
 800783e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007842:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007846:	2b01      	cmp	r3, #1
 8007848:	d123      	bne.n	8007892 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800784e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68db      	ldr	r3, [r3, #12]
 800785a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800785e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007872:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007876:	2b01      	cmp	r3, #1
 8007878:	d105      	bne.n	8007886 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f001 fae8 	bl	8008e5c <USB_CoreReset>
 800788c:	4603      	mov	r3, r0
 800788e:	73fb      	strb	r3, [r7, #15]
 8007890:	e01b      	b.n	80078ca <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f001 fadc 	bl	8008e5c <USB_CoreReset>
 80078a4:	4603      	mov	r3, r0
 80078a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80078a8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d106      	bne.n	80078be <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80078bc:	e005      	b.n	80078ca <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80078ca:	7fbb      	ldrb	r3, [r7, #30]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d10b      	bne.n	80078e8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	f043 0206 	orr.w	r2, r3, #6
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f043 0220 	orr.w	r2, r3, #32
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078f4:	b004      	add	sp, #16
 80078f6:	4770      	bx	lr

080078f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	4613      	mov	r3, r2
 8007904:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007906:	79fb      	ldrb	r3, [r7, #7]
 8007908:	2b02      	cmp	r3, #2
 800790a:	d165      	bne.n	80079d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	4a41      	ldr	r2, [pc, #260]	@ (8007a14 <USB_SetTurnaroundTime+0x11c>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d906      	bls.n	8007922 <USB_SetTurnaroundTime+0x2a>
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	4a40      	ldr	r2, [pc, #256]	@ (8007a18 <USB_SetTurnaroundTime+0x120>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d202      	bcs.n	8007922 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800791c:	230f      	movs	r3, #15
 800791e:	617b      	str	r3, [r7, #20]
 8007920:	e062      	b.n	80079e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	4a3c      	ldr	r2, [pc, #240]	@ (8007a18 <USB_SetTurnaroundTime+0x120>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d306      	bcc.n	8007938 <USB_SetTurnaroundTime+0x40>
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	4a3b      	ldr	r2, [pc, #236]	@ (8007a1c <USB_SetTurnaroundTime+0x124>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d202      	bcs.n	8007938 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007932:	230e      	movs	r3, #14
 8007934:	617b      	str	r3, [r7, #20]
 8007936:	e057      	b.n	80079e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	4a38      	ldr	r2, [pc, #224]	@ (8007a1c <USB_SetTurnaroundTime+0x124>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d306      	bcc.n	800794e <USB_SetTurnaroundTime+0x56>
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	4a37      	ldr	r2, [pc, #220]	@ (8007a20 <USB_SetTurnaroundTime+0x128>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d202      	bcs.n	800794e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007948:	230d      	movs	r3, #13
 800794a:	617b      	str	r3, [r7, #20]
 800794c:	e04c      	b.n	80079e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	4a33      	ldr	r2, [pc, #204]	@ (8007a20 <USB_SetTurnaroundTime+0x128>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d306      	bcc.n	8007964 <USB_SetTurnaroundTime+0x6c>
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	4a32      	ldr	r2, [pc, #200]	@ (8007a24 <USB_SetTurnaroundTime+0x12c>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d802      	bhi.n	8007964 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800795e:	230c      	movs	r3, #12
 8007960:	617b      	str	r3, [r7, #20]
 8007962:	e041      	b.n	80079e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	4a2f      	ldr	r2, [pc, #188]	@ (8007a24 <USB_SetTurnaroundTime+0x12c>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d906      	bls.n	800797a <USB_SetTurnaroundTime+0x82>
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	4a2e      	ldr	r2, [pc, #184]	@ (8007a28 <USB_SetTurnaroundTime+0x130>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d802      	bhi.n	800797a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007974:	230b      	movs	r3, #11
 8007976:	617b      	str	r3, [r7, #20]
 8007978:	e036      	b.n	80079e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	4a2a      	ldr	r2, [pc, #168]	@ (8007a28 <USB_SetTurnaroundTime+0x130>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d906      	bls.n	8007990 <USB_SetTurnaroundTime+0x98>
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	4a29      	ldr	r2, [pc, #164]	@ (8007a2c <USB_SetTurnaroundTime+0x134>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d802      	bhi.n	8007990 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800798a:	230a      	movs	r3, #10
 800798c:	617b      	str	r3, [r7, #20]
 800798e:	e02b      	b.n	80079e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	4a26      	ldr	r2, [pc, #152]	@ (8007a2c <USB_SetTurnaroundTime+0x134>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d906      	bls.n	80079a6 <USB_SetTurnaroundTime+0xae>
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	4a25      	ldr	r2, [pc, #148]	@ (8007a30 <USB_SetTurnaroundTime+0x138>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d202      	bcs.n	80079a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80079a0:	2309      	movs	r3, #9
 80079a2:	617b      	str	r3, [r7, #20]
 80079a4:	e020      	b.n	80079e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	4a21      	ldr	r2, [pc, #132]	@ (8007a30 <USB_SetTurnaroundTime+0x138>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d306      	bcc.n	80079bc <USB_SetTurnaroundTime+0xc4>
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	4a20      	ldr	r2, [pc, #128]	@ (8007a34 <USB_SetTurnaroundTime+0x13c>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d802      	bhi.n	80079bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80079b6:	2308      	movs	r3, #8
 80079b8:	617b      	str	r3, [r7, #20]
 80079ba:	e015      	b.n	80079e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	4a1d      	ldr	r2, [pc, #116]	@ (8007a34 <USB_SetTurnaroundTime+0x13c>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d906      	bls.n	80079d2 <USB_SetTurnaroundTime+0xda>
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	4a1c      	ldr	r2, [pc, #112]	@ (8007a38 <USB_SetTurnaroundTime+0x140>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d202      	bcs.n	80079d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80079cc:	2307      	movs	r3, #7
 80079ce:	617b      	str	r3, [r7, #20]
 80079d0:	e00a      	b.n	80079e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80079d2:	2306      	movs	r3, #6
 80079d4:	617b      	str	r3, [r7, #20]
 80079d6:	e007      	b.n	80079e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80079d8:	79fb      	ldrb	r3, [r7, #7]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d102      	bne.n	80079e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80079de:	2309      	movs	r3, #9
 80079e0:	617b      	str	r3, [r7, #20]
 80079e2:	e001      	b.n	80079e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80079e4:	2309      	movs	r3, #9
 80079e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	68da      	ldr	r2, [r3, #12]
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	029b      	lsls	r3, r3, #10
 80079fc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007a00:	431a      	orrs	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	371c      	adds	r7, #28
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	00d8acbf 	.word	0x00d8acbf
 8007a18:	00e4e1c0 	.word	0x00e4e1c0
 8007a1c:	00f42400 	.word	0x00f42400
 8007a20:	01067380 	.word	0x01067380
 8007a24:	011a499f 	.word	0x011a499f
 8007a28:	01312cff 	.word	0x01312cff
 8007a2c:	014ca43f 	.word	0x014ca43f
 8007a30:	016e3600 	.word	0x016e3600
 8007a34:	01a6ab1f 	.word	0x01a6ab1f
 8007a38:	01e84800 	.word	0x01e84800

08007a3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b083      	sub	sp, #12
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	f043 0201 	orr.w	r2, r3, #1
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	370c      	adds	r7, #12
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr

08007a5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	f023 0201 	bic.w	r2, r3, #1
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007a72:	2300      	movs	r3, #0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007a9c:	78fb      	ldrb	r3, [r7, #3]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d115      	bne.n	8007ace <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007aae:	200a      	movs	r0, #10
 8007ab0:	f7fa fb78 	bl	80021a4 <HAL_Delay>
      ms += 10U;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	330a      	adds	r3, #10
 8007ab8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f001 f93f 	bl	8008d3e <USB_GetMode>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d01e      	beq.n	8007b04 <USB_SetCurrentMode+0x84>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2bc7      	cmp	r3, #199	@ 0xc7
 8007aca:	d9f0      	bls.n	8007aae <USB_SetCurrentMode+0x2e>
 8007acc:	e01a      	b.n	8007b04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007ace:	78fb      	ldrb	r3, [r7, #3]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d115      	bne.n	8007b00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007ae0:	200a      	movs	r0, #10
 8007ae2:	f7fa fb5f 	bl	80021a4 <HAL_Delay>
      ms += 10U;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	330a      	adds	r3, #10
 8007aea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f001 f926 	bl	8008d3e <USB_GetMode>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d005      	beq.n	8007b04 <USB_SetCurrentMode+0x84>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2bc7      	cmp	r3, #199	@ 0xc7
 8007afc:	d9f0      	bls.n	8007ae0 <USB_SetCurrentMode+0x60>
 8007afe:	e001      	b.n	8007b04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e005      	b.n	8007b10 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2bc8      	cmp	r3, #200	@ 0xc8
 8007b08:	d101      	bne.n	8007b0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e000      	b.n	8007b10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b18:	b084      	sub	sp, #16
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b086      	sub	sp, #24
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
 8007b22:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007b26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007b32:	2300      	movs	r3, #0
 8007b34:	613b      	str	r3, [r7, #16]
 8007b36:	e009      	b.n	8007b4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	3340      	adds	r3, #64	@ 0x40
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	2200      	movs	r2, #0
 8007b44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	3301      	adds	r3, #1
 8007b4a:	613b      	str	r3, [r7, #16]
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	2b0e      	cmp	r3, #14
 8007b50:	d9f2      	bls.n	8007b38 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007b52:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d11c      	bne.n	8007b94 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b68:	f043 0302 	orr.w	r3, r3, #2
 8007b6c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b72:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b7e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b8a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	639a      	str	r2, [r3, #56]	@ 0x38
 8007b92:	e00b      	b.n	8007bac <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b98:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ba4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bb8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d10d      	bne.n	8007bdc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d104      	bne.n	8007bd2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007bc8:	2100      	movs	r1, #0
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f968 	bl	8007ea0 <USB_SetDevSpeed>
 8007bd0:	e008      	b.n	8007be4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f963 	bl	8007ea0 <USB_SetDevSpeed>
 8007bda:	e003      	b.n	8007be4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007bdc:	2103      	movs	r1, #3
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f95e 	bl	8007ea0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007be4:	2110      	movs	r1, #16
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f8fa 	bl	8007de0 <USB_FlushTxFifo>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f924 	bl	8007e44 <USB_FlushRxFifo>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	2300      	movs	r3, #0
 8007c10:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c18:	461a      	mov	r2, r3
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c24:	461a      	mov	r2, r3
 8007c26:	2300      	movs	r3, #0
 8007c28:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	613b      	str	r3, [r7, #16]
 8007c2e:	e043      	b.n	8007cb8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	015a      	lsls	r2, r3, #5
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c46:	d118      	bne.n	8007c7a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10a      	bne.n	8007c64 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007c60:	6013      	str	r3, [r2, #0]
 8007c62:	e013      	b.n	8007c8c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	015a      	lsls	r2, r3, #5
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c70:	461a      	mov	r2, r3
 8007c72:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007c76:	6013      	str	r3, [r2, #0]
 8007c78:	e008      	b.n	8007c8c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	015a      	lsls	r2, r3, #5
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	4413      	add	r3, r2
 8007c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c86:	461a      	mov	r2, r3
 8007c88:	2300      	movs	r3, #0
 8007c8a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	015a      	lsls	r2, r3, #5
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	4413      	add	r3, r2
 8007c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c98:	461a      	mov	r2, r3
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007caa:	461a      	mov	r2, r3
 8007cac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007cb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	613b      	str	r3, [r7, #16]
 8007cb8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d3b5      	bcc.n	8007c30 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	613b      	str	r3, [r7, #16]
 8007cc8:	e043      	b.n	8007d52 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	015a      	lsls	r2, r3, #5
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ce0:	d118      	bne.n	8007d14 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10a      	bne.n	8007cfe <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	015a      	lsls	r2, r3, #5
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4413      	add	r3, r2
 8007cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007cfa:	6013      	str	r3, [r2, #0]
 8007cfc:	e013      	b.n	8007d26 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	015a      	lsls	r2, r3, #5
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	4413      	add	r3, r2
 8007d06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007d10:	6013      	str	r3, [r2, #0]
 8007d12:	e008      	b.n	8007d26 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	015a      	lsls	r2, r3, #5
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4413      	add	r3, r2
 8007d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d20:	461a      	mov	r2, r3
 8007d22:	2300      	movs	r3, #0
 8007d24:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	015a      	lsls	r2, r3, #5
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d32:	461a      	mov	r2, r3
 8007d34:	2300      	movs	r3, #0
 8007d36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	015a      	lsls	r2, r3, #5
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4413      	add	r3, r2
 8007d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d44:	461a      	mov	r2, r3
 8007d46:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007d4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	613b      	str	r3, [r7, #16]
 8007d52:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007d56:	461a      	mov	r2, r3
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d3b5      	bcc.n	8007cca <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d64:	691b      	ldr	r3, [r3, #16]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d70:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007d7e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007d80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d105      	bne.n	8007d94 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	f043 0210 	orr.w	r2, r3, #16
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	699a      	ldr	r2, [r3, #24]
 8007d98:	4b10      	ldr	r3, [pc, #64]	@ (8007ddc <USB_DevInit+0x2c4>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007da0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d005      	beq.n	8007db4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	f043 0208 	orr.w	r2, r3, #8
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007db4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d107      	bne.n	8007dcc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007dc4:	f043 0304 	orr.w	r3, r3, #4
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007dd8:	b004      	add	sp, #16
 8007dda:	4770      	bx	lr
 8007ddc:	803c3800 	.word	0x803c3800

08007de0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007dea:	2300      	movs	r3, #0
 8007dec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	3301      	adds	r3, #1
 8007df2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007dfa:	d901      	bls.n	8007e00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e01b      	b.n	8007e38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	daf2      	bge.n	8007dee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	019b      	lsls	r3, r3, #6
 8007e10:	f043 0220 	orr.w	r2, r3, #32
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e24:	d901      	bls.n	8007e2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e006      	b.n	8007e38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	f003 0320 	and.w	r3, r3, #32
 8007e32:	2b20      	cmp	r3, #32
 8007e34:	d0f0      	beq.n	8007e18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3714      	adds	r7, #20
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3301      	adds	r3, #1
 8007e54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e5c:	d901      	bls.n	8007e62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e018      	b.n	8007e94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	daf2      	bge.n	8007e50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2210      	movs	r2, #16
 8007e72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	3301      	adds	r3, #1
 8007e78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e80:	d901      	bls.n	8007e86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e006      	b.n	8007e94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	f003 0310 	and.w	r3, r3, #16
 8007e8e:	2b10      	cmp	r3, #16
 8007e90:	d0f0      	beq.n	8007e74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	78fb      	ldrb	r3, [r7, #3]
 8007eba:	68f9      	ldr	r1, [r7, #12]
 8007ebc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b087      	sub	sp, #28
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f003 0306 	and.w	r3, r3, #6
 8007eea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d102      	bne.n	8007ef8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	75fb      	strb	r3, [r7, #23]
 8007ef6:	e00a      	b.n	8007f0e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d002      	beq.n	8007f04 <USB_GetDevSpeed+0x32>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2b06      	cmp	r3, #6
 8007f02:	d102      	bne.n	8007f0a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007f04:	2302      	movs	r3, #2
 8007f06:	75fb      	strb	r3, [r7, #23]
 8007f08:	e001      	b.n	8007f0e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007f0a:	230f      	movs	r3, #15
 8007f0c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	371c      	adds	r7, #28
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	785b      	ldrb	r3, [r3, #1]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d13a      	bne.n	8007fae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f3e:	69da      	ldr	r2, [r3, #28]
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	f003 030f 	and.w	r3, r3, #15
 8007f48:	2101      	movs	r1, #1
 8007f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	68f9      	ldr	r1, [r7, #12]
 8007f52:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007f56:	4313      	orrs	r3, r2
 8007f58:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d155      	bne.n	800801c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	791b      	ldrb	r3, [r3, #4]
 8007f8a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f8c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	059b      	lsls	r3, r3, #22
 8007f92:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007f94:	4313      	orrs	r3, r2
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	0151      	lsls	r1, r2, #5
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	440a      	add	r2, r1
 8007f9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007faa:	6013      	str	r3, [r2, #0]
 8007fac:	e036      	b.n	800801c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fb4:	69da      	ldr	r2, [r3, #28]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	f003 030f 	and.w	r3, r3, #15
 8007fbe:	2101      	movs	r1, #1
 8007fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8007fc4:	041b      	lsls	r3, r3, #16
 8007fc6:	68f9      	ldr	r1, [r7, #12]
 8007fc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d11a      	bne.n	800801c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	015a      	lsls	r2, r3, #5
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	791b      	ldrb	r3, [r3, #4]
 8008000:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008002:	430b      	orrs	r3, r1
 8008004:	4313      	orrs	r3, r2
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	0151      	lsls	r1, r2, #5
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	440a      	add	r2, r1
 800800e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008016:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800801a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
	...

0800802c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	785b      	ldrb	r3, [r3, #1]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d161      	bne.n	800810c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4413      	add	r3, r2
 8008050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800805a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800805e:	d11f      	bne.n	80080a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	015a      	lsls	r2, r3, #5
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4413      	add	r3, r2
 8008068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	0151      	lsls	r1, r2, #5
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	440a      	add	r2, r1
 8008076:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800807a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800807e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	0151      	lsls	r1, r2, #5
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	440a      	add	r2, r1
 8008096:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800809a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800809e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	f003 030f 	and.w	r3, r3, #15
 80080b0:	2101      	movs	r1, #1
 80080b2:	fa01 f303 	lsl.w	r3, r1, r3
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	43db      	mvns	r3, r3
 80080ba:	68f9      	ldr	r1, [r7, #12]
 80080bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080c0:	4013      	ands	r3, r2
 80080c2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080ca:	69da      	ldr	r2, [r3, #28]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	f003 030f 	and.w	r3, r3, #15
 80080d4:	2101      	movs	r1, #1
 80080d6:	fa01 f303 	lsl.w	r3, r1, r3
 80080da:	b29b      	uxth	r3, r3
 80080dc:	43db      	mvns	r3, r3
 80080de:	68f9      	ldr	r1, [r7, #12]
 80080e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80080e4:	4013      	ands	r3, r2
 80080e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	015a      	lsls	r2, r3, #5
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4413      	add	r3, r2
 80080f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	0159      	lsls	r1, r3, #5
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	440b      	add	r3, r1
 80080fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008102:	4619      	mov	r1, r3
 8008104:	4b35      	ldr	r3, [pc, #212]	@ (80081dc <USB_DeactivateEndpoint+0x1b0>)
 8008106:	4013      	ands	r3, r2
 8008108:	600b      	str	r3, [r1, #0]
 800810a:	e060      	b.n	80081ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	015a      	lsls	r2, r3, #5
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4413      	add	r3, r2
 8008114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800811e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008122:	d11f      	bne.n	8008164 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	015a      	lsls	r2, r3, #5
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	4413      	add	r3, r2
 800812c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68ba      	ldr	r2, [r7, #8]
 8008134:	0151      	lsls	r1, r2, #5
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	440a      	add	r2, r1
 800813a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800813e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008142:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	015a      	lsls	r2, r3, #5
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	4413      	add	r3, r2
 800814c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	0151      	lsls	r1, r2, #5
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	440a      	add	r2, r1
 800815a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800815e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008162:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800816a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	f003 030f 	and.w	r3, r3, #15
 8008174:	2101      	movs	r1, #1
 8008176:	fa01 f303 	lsl.w	r3, r1, r3
 800817a:	041b      	lsls	r3, r3, #16
 800817c:	43db      	mvns	r3, r3
 800817e:	68f9      	ldr	r1, [r7, #12]
 8008180:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008184:	4013      	ands	r3, r2
 8008186:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800818e:	69da      	ldr	r2, [r3, #28]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	f003 030f 	and.w	r3, r3, #15
 8008198:	2101      	movs	r1, #1
 800819a:	fa01 f303 	lsl.w	r3, r1, r3
 800819e:	041b      	lsls	r3, r3, #16
 80081a0:	43db      	mvns	r3, r3
 80081a2:	68f9      	ldr	r1, [r7, #12]
 80081a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081a8:	4013      	ands	r3, r2
 80081aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	015a      	lsls	r2, r3, #5
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	4413      	add	r3, r2
 80081b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	0159      	lsls	r1, r3, #5
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	440b      	add	r3, r1
 80081c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081c6:	4619      	mov	r1, r3
 80081c8:	4b05      	ldr	r3, [pc, #20]	@ (80081e0 <USB_DeactivateEndpoint+0x1b4>)
 80081ca:	4013      	ands	r3, r2
 80081cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr
 80081dc:	ec337800 	.word	0xec337800
 80081e0:	eff37800 	.word	0xeff37800

080081e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b08a      	sub	sp, #40	@ 0x28
 80081e8:	af02      	add	r7, sp, #8
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	4613      	mov	r3, r2
 80081f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	785b      	ldrb	r3, [r3, #1]
 8008200:	2b01      	cmp	r3, #1
 8008202:	f040 817f 	bne.w	8008504 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d132      	bne.n	8008274 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	4413      	add	r3, r2
 8008216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800821a:	691b      	ldr	r3, [r3, #16]
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	0151      	lsls	r1, r2, #5
 8008220:	69fa      	ldr	r2, [r7, #28]
 8008222:	440a      	add	r2, r1
 8008224:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008228:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800822c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008230:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	4413      	add	r3, r2
 800823a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	69ba      	ldr	r2, [r7, #24]
 8008242:	0151      	lsls	r1, r2, #5
 8008244:	69fa      	ldr	r2, [r7, #28]
 8008246:	440a      	add	r2, r1
 8008248:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800824c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008250:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	015a      	lsls	r2, r3, #5
 8008256:	69fb      	ldr	r3, [r7, #28]
 8008258:	4413      	add	r3, r2
 800825a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	0151      	lsls	r1, r2, #5
 8008264:	69fa      	ldr	r2, [r7, #28]
 8008266:	440a      	add	r2, r1
 8008268:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800826c:	0cdb      	lsrs	r3, r3, #19
 800826e:	04db      	lsls	r3, r3, #19
 8008270:	6113      	str	r3, [r2, #16]
 8008272:	e097      	b.n	80083a4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	015a      	lsls	r2, r3, #5
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	4413      	add	r3, r2
 800827c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	69ba      	ldr	r2, [r7, #24]
 8008284:	0151      	lsls	r1, r2, #5
 8008286:	69fa      	ldr	r2, [r7, #28]
 8008288:	440a      	add	r2, r1
 800828a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800828e:	0cdb      	lsrs	r3, r3, #19
 8008290:	04db      	lsls	r3, r3, #19
 8008292:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	015a      	lsls	r2, r3, #5
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	4413      	add	r3, r2
 800829c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	69ba      	ldr	r2, [r7, #24]
 80082a4:	0151      	lsls	r1, r2, #5
 80082a6:	69fa      	ldr	r2, [r7, #28]
 80082a8:	440a      	add	r2, r1
 80082aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082ae:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80082b2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80082b6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80082b8:	69bb      	ldr	r3, [r7, #24]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d11a      	bne.n	80082f4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	691a      	ldr	r2, [r3, #16]
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d903      	bls.n	80082d2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	689a      	ldr	r2, [r3, #8]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	015a      	lsls	r2, r3, #5
 80082d6:	69fb      	ldr	r3, [r7, #28]
 80082d8:	4413      	add	r3, r2
 80082da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	69ba      	ldr	r2, [r7, #24]
 80082e2:	0151      	lsls	r1, r2, #5
 80082e4:	69fa      	ldr	r2, [r7, #28]
 80082e6:	440a      	add	r2, r1
 80082e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80082f0:	6113      	str	r3, [r2, #16]
 80082f2:	e044      	b.n	800837e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	691a      	ldr	r2, [r3, #16]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	4413      	add	r3, r2
 80082fe:	1e5a      	subs	r2, r3, #1
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	fbb2 f3f3 	udiv	r3, r2, r3
 8008308:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800830a:	69bb      	ldr	r3, [r7, #24]
 800830c:	015a      	lsls	r2, r3, #5
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	4413      	add	r3, r2
 8008312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008316:	691a      	ldr	r2, [r3, #16]
 8008318:	8afb      	ldrh	r3, [r7, #22]
 800831a:	04d9      	lsls	r1, r3, #19
 800831c:	4ba4      	ldr	r3, [pc, #656]	@ (80085b0 <USB_EPStartXfer+0x3cc>)
 800831e:	400b      	ands	r3, r1
 8008320:	69b9      	ldr	r1, [r7, #24]
 8008322:	0148      	lsls	r0, r1, #5
 8008324:	69f9      	ldr	r1, [r7, #28]
 8008326:	4401      	add	r1, r0
 8008328:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800832c:	4313      	orrs	r3, r2
 800832e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	791b      	ldrb	r3, [r3, #4]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d122      	bne.n	800837e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008338:	69bb      	ldr	r3, [r7, #24]
 800833a:	015a      	lsls	r2, r3, #5
 800833c:	69fb      	ldr	r3, [r7, #28]
 800833e:	4413      	add	r3, r2
 8008340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	69ba      	ldr	r2, [r7, #24]
 8008348:	0151      	lsls	r1, r2, #5
 800834a:	69fa      	ldr	r2, [r7, #28]
 800834c:	440a      	add	r2, r1
 800834e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008352:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008356:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	015a      	lsls	r2, r3, #5
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	4413      	add	r3, r2
 8008360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008364:	691a      	ldr	r2, [r3, #16]
 8008366:	8afb      	ldrh	r3, [r7, #22]
 8008368:	075b      	lsls	r3, r3, #29
 800836a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800836e:	69b9      	ldr	r1, [r7, #24]
 8008370:	0148      	lsls	r0, r1, #5
 8008372:	69f9      	ldr	r1, [r7, #28]
 8008374:	4401      	add	r1, r0
 8008376:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800837a:	4313      	orrs	r3, r2
 800837c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	4413      	add	r3, r2
 8008386:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800838a:	691a      	ldr	r2, [r3, #16]
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	691b      	ldr	r3, [r3, #16]
 8008390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008394:	69b9      	ldr	r1, [r7, #24]
 8008396:	0148      	lsls	r0, r1, #5
 8008398:	69f9      	ldr	r1, [r7, #28]
 800839a:	4401      	add	r1, r0
 800839c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80083a0:	4313      	orrs	r3, r2
 80083a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80083a4:	79fb      	ldrb	r3, [r7, #7]
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d14b      	bne.n	8008442 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	69db      	ldr	r3, [r3, #28]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d009      	beq.n	80083c6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083be:	461a      	mov	r2, r3
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	69db      	ldr	r3, [r3, #28]
 80083c4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	791b      	ldrb	r3, [r3, #4]
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d128      	bne.n	8008420 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083d4:	689b      	ldr	r3, [r3, #8]
 80083d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d110      	bne.n	8008400 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	015a      	lsls	r2, r3, #5
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	4413      	add	r3, r2
 80083e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	69ba      	ldr	r2, [r7, #24]
 80083ee:	0151      	lsls	r1, r2, #5
 80083f0:	69fa      	ldr	r2, [r7, #28]
 80083f2:	440a      	add	r2, r1
 80083f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	e00f      	b.n	8008420 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	015a      	lsls	r2, r3, #5
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	4413      	add	r3, r2
 8008408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	69ba      	ldr	r2, [r7, #24]
 8008410:	0151      	lsls	r1, r2, #5
 8008412:	69fa      	ldr	r2, [r7, #28]
 8008414:	440a      	add	r2, r1
 8008416:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800841a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800841e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	015a      	lsls	r2, r3, #5
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	4413      	add	r3, r2
 8008428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	69ba      	ldr	r2, [r7, #24]
 8008430:	0151      	lsls	r1, r2, #5
 8008432:	69fa      	ldr	r2, [r7, #28]
 8008434:	440a      	add	r2, r1
 8008436:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800843a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800843e:	6013      	str	r3, [r2, #0]
 8008440:	e166      	b.n	8008710 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	69ba      	ldr	r2, [r7, #24]
 8008452:	0151      	lsls	r1, r2, #5
 8008454:	69fa      	ldr	r2, [r7, #28]
 8008456:	440a      	add	r2, r1
 8008458:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800845c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008460:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	791b      	ldrb	r3, [r3, #4]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d015      	beq.n	8008496 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	f000 814e 	beq.w	8008710 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800847a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	f003 030f 	and.w	r3, r3, #15
 8008484:	2101      	movs	r1, #1
 8008486:	fa01 f303 	lsl.w	r3, r1, r3
 800848a:	69f9      	ldr	r1, [r7, #28]
 800848c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008490:	4313      	orrs	r3, r2
 8008492:	634b      	str	r3, [r1, #52]	@ 0x34
 8008494:	e13c      	b.n	8008710 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d110      	bne.n	80084c8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	69ba      	ldr	r2, [r7, #24]
 80084b6:	0151      	lsls	r1, r2, #5
 80084b8:	69fa      	ldr	r2, [r7, #28]
 80084ba:	440a      	add	r2, r1
 80084bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80084c4:	6013      	str	r3, [r2, #0]
 80084c6:	e00f      	b.n	80084e8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	015a      	lsls	r2, r3, #5
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	4413      	add	r3, r2
 80084d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	69ba      	ldr	r2, [r7, #24]
 80084d8:	0151      	lsls	r1, r2, #5
 80084da:	69fa      	ldr	r2, [r7, #28]
 80084dc:	440a      	add	r2, r1
 80084de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084e6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	68d9      	ldr	r1, [r3, #12]
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	781a      	ldrb	r2, [r3, #0]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	b298      	uxth	r0, r3
 80084f6:	79fb      	ldrb	r3, [r7, #7]
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	4603      	mov	r3, r0
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 f9b9 	bl	8008874 <USB_WritePacket>
 8008502:	e105      	b.n	8008710 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	015a      	lsls	r2, r3, #5
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	4413      	add	r3, r2
 800850c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	69ba      	ldr	r2, [r7, #24]
 8008514:	0151      	lsls	r1, r2, #5
 8008516:	69fa      	ldr	r2, [r7, #28]
 8008518:	440a      	add	r2, r1
 800851a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800851e:	0cdb      	lsrs	r3, r3, #19
 8008520:	04db      	lsls	r3, r3, #19
 8008522:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	69ba      	ldr	r2, [r7, #24]
 8008534:	0151      	lsls	r1, r2, #5
 8008536:	69fa      	ldr	r2, [r7, #28]
 8008538:	440a      	add	r2, r1
 800853a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800853e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008542:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008546:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d132      	bne.n	80085b4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d003      	beq.n	800855e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	689a      	ldr	r2, [r3, #8]
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	689a      	ldr	r2, [r3, #8]
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	015a      	lsls	r2, r3, #5
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	4413      	add	r3, r2
 800856e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008572:	691a      	ldr	r2, [r3, #16]
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	6a1b      	ldr	r3, [r3, #32]
 8008578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800857c:	69b9      	ldr	r1, [r7, #24]
 800857e:	0148      	lsls	r0, r1, #5
 8008580:	69f9      	ldr	r1, [r7, #28]
 8008582:	4401      	add	r1, r0
 8008584:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008588:	4313      	orrs	r3, r2
 800858a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	015a      	lsls	r2, r3, #5
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	4413      	add	r3, r2
 8008594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	69ba      	ldr	r2, [r7, #24]
 800859c:	0151      	lsls	r1, r2, #5
 800859e:	69fa      	ldr	r2, [r7, #28]
 80085a0:	440a      	add	r2, r1
 80085a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80085aa:	6113      	str	r3, [r2, #16]
 80085ac:	e062      	b.n	8008674 <USB_EPStartXfer+0x490>
 80085ae:	bf00      	nop
 80085b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d123      	bne.n	8008604 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085c8:	691a      	ldr	r2, [r3, #16]
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085d2:	69b9      	ldr	r1, [r7, #24]
 80085d4:	0148      	lsls	r0, r1, #5
 80085d6:	69f9      	ldr	r1, [r7, #28]
 80085d8:	4401      	add	r1, r0
 80085da:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80085de:	4313      	orrs	r3, r2
 80085e0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	015a      	lsls	r2, r3, #5
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	4413      	add	r3, r2
 80085ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	69ba      	ldr	r2, [r7, #24]
 80085f2:	0151      	lsls	r1, r2, #5
 80085f4:	69fa      	ldr	r2, [r7, #28]
 80085f6:	440a      	add	r2, r1
 80085f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80085fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008600:	6113      	str	r3, [r2, #16]
 8008602:	e037      	b.n	8008674 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	691a      	ldr	r2, [r3, #16]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	4413      	add	r3, r2
 800860e:	1e5a      	subs	r2, r3, #1
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	fbb2 f3f3 	udiv	r3, r2, r3
 8008618:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	8afa      	ldrh	r2, [r7, #22]
 8008620:	fb03 f202 	mul.w	r2, r3, r2
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	015a      	lsls	r2, r3, #5
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	4413      	add	r3, r2
 8008630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008634:	691a      	ldr	r2, [r3, #16]
 8008636:	8afb      	ldrh	r3, [r7, #22]
 8008638:	04d9      	lsls	r1, r3, #19
 800863a:	4b38      	ldr	r3, [pc, #224]	@ (800871c <USB_EPStartXfer+0x538>)
 800863c:	400b      	ands	r3, r1
 800863e:	69b9      	ldr	r1, [r7, #24]
 8008640:	0148      	lsls	r0, r1, #5
 8008642:	69f9      	ldr	r1, [r7, #28]
 8008644:	4401      	add	r1, r0
 8008646:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800864a:	4313      	orrs	r3, r2
 800864c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	015a      	lsls	r2, r3, #5
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	4413      	add	r3, r2
 8008656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800865a:	691a      	ldr	r2, [r3, #16]
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	6a1b      	ldr	r3, [r3, #32]
 8008660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008664:	69b9      	ldr	r1, [r7, #24]
 8008666:	0148      	lsls	r0, r1, #5
 8008668:	69f9      	ldr	r1, [r7, #28]
 800866a:	4401      	add	r1, r0
 800866c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008670:	4313      	orrs	r3, r2
 8008672:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008674:	79fb      	ldrb	r3, [r7, #7]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d10d      	bne.n	8008696 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d009      	beq.n	8008696 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	68d9      	ldr	r1, [r3, #12]
 8008686:	69bb      	ldr	r3, [r7, #24]
 8008688:	015a      	lsls	r2, r3, #5
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	4413      	add	r3, r2
 800868e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008692:	460a      	mov	r2, r1
 8008694:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	791b      	ldrb	r3, [r3, #4]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d128      	bne.n	80086f0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d110      	bne.n	80086d0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	69ba      	ldr	r2, [r7, #24]
 80086be:	0151      	lsls	r1, r2, #5
 80086c0:	69fa      	ldr	r2, [r7, #28]
 80086c2:	440a      	add	r2, r1
 80086c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086c8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80086cc:	6013      	str	r3, [r2, #0]
 80086ce:	e00f      	b.n	80086f0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	69ba      	ldr	r2, [r7, #24]
 80086e0:	0151      	lsls	r1, r2, #5
 80086e2:	69fa      	ldr	r2, [r7, #28]
 80086e4:	440a      	add	r2, r1
 80086e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	69ba      	ldr	r2, [r7, #24]
 8008700:	0151      	lsls	r1, r2, #5
 8008702:	69fa      	ldr	r2, [r7, #28]
 8008704:	440a      	add	r2, r1
 8008706:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800870a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800870e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3720      	adds	r7, #32
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	1ff80000 	.word	0x1ff80000

08008720 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008720:	b480      	push	{r7}
 8008722:	b087      	sub	sp, #28
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800872a:	2300      	movs	r3, #0
 800872c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	785b      	ldrb	r3, [r3, #1]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d14a      	bne.n	80087d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	015a      	lsls	r2, r3, #5
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	4413      	add	r3, r2
 8008748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008752:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008756:	f040 8086 	bne.w	8008866 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	015a      	lsls	r2, r3, #5
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	4413      	add	r3, r2
 8008764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	683a      	ldr	r2, [r7, #0]
 800876c:	7812      	ldrb	r2, [r2, #0]
 800876e:	0151      	lsls	r1, r2, #5
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	440a      	add	r2, r1
 8008774:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008778:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800877c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	4413      	add	r3, r2
 8008788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	683a      	ldr	r2, [r7, #0]
 8008790:	7812      	ldrb	r2, [r2, #0]
 8008792:	0151      	lsls	r1, r2, #5
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	440a      	add	r2, r1
 8008798:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800879c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80087a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	3301      	adds	r3, #1
 80087a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d902      	bls.n	80087b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	75fb      	strb	r3, [r7, #23]
          break;
 80087b6:	e056      	b.n	8008866 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087d0:	d0e7      	beq.n	80087a2 <USB_EPStopXfer+0x82>
 80087d2:	e048      	b.n	8008866 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	015a      	lsls	r2, r3, #5
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	4413      	add	r3, r2
 80087de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087ec:	d13b      	bne.n	8008866 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	015a      	lsls	r2, r3, #5
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	7812      	ldrb	r2, [r2, #0]
 8008802:	0151      	lsls	r1, r2, #5
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	440a      	add	r2, r1
 8008808:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800880c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008810:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	015a      	lsls	r2, r3, #5
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	4413      	add	r3, r2
 800881c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	683a      	ldr	r2, [r7, #0]
 8008824:	7812      	ldrb	r2, [r2, #0]
 8008826:	0151      	lsls	r1, r2, #5
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	440a      	add	r2, r1
 800882c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008830:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008834:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	3301      	adds	r3, #1
 800883a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008842:	4293      	cmp	r3, r2
 8008844:	d902      	bls.n	800884c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	75fb      	strb	r3, [r7, #23]
          break;
 800884a:	e00c      	b.n	8008866 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	015a      	lsls	r2, r3, #5
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	4413      	add	r3, r2
 8008856:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008860:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008864:	d0e7      	beq.n	8008836 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008866:	7dfb      	ldrb	r3, [r7, #23]
}
 8008868:	4618      	mov	r0, r3
 800886a:	371c      	adds	r7, #28
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008874:	b480      	push	{r7}
 8008876:	b089      	sub	sp, #36	@ 0x24
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	60b9      	str	r1, [r7, #8]
 800887e:	4611      	mov	r1, r2
 8008880:	461a      	mov	r2, r3
 8008882:	460b      	mov	r3, r1
 8008884:	71fb      	strb	r3, [r7, #7]
 8008886:	4613      	mov	r3, r2
 8008888:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008892:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008896:	2b00      	cmp	r3, #0
 8008898:	d123      	bne.n	80088e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800889a:	88bb      	ldrh	r3, [r7, #4]
 800889c:	3303      	adds	r3, #3
 800889e:	089b      	lsrs	r3, r3, #2
 80088a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80088a2:	2300      	movs	r3, #0
 80088a4:	61bb      	str	r3, [r7, #24]
 80088a6:	e018      	b.n	80088da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80088a8:	79fb      	ldrb	r3, [r7, #7]
 80088aa:	031a      	lsls	r2, r3, #12
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80088b4:	461a      	mov	r2, r3
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	3301      	adds	r3, #1
 80088c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	3301      	adds	r3, #1
 80088c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	3301      	adds	r3, #1
 80088cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	3301      	adds	r3, #1
 80088d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80088d4:	69bb      	ldr	r3, [r7, #24]
 80088d6:	3301      	adds	r3, #1
 80088d8:	61bb      	str	r3, [r7, #24]
 80088da:	69ba      	ldr	r2, [r7, #24]
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d3e2      	bcc.n	80088a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3724      	adds	r7, #36	@ 0x24
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr

080088f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b08b      	sub	sp, #44	@ 0x2c
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	4613      	mov	r3, r2
 80088fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008906:	88fb      	ldrh	r3, [r7, #6]
 8008908:	089b      	lsrs	r3, r3, #2
 800890a:	b29b      	uxth	r3, r3
 800890c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800890e:	88fb      	ldrh	r3, [r7, #6]
 8008910:	f003 0303 	and.w	r3, r3, #3
 8008914:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008916:	2300      	movs	r3, #0
 8008918:	623b      	str	r3, [r7, #32]
 800891a:	e014      	b.n	8008946 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008922:	681a      	ldr	r2, [r3, #0]
 8008924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008926:	601a      	str	r2, [r3, #0]
    pDest++;
 8008928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892a:	3301      	adds	r3, #1
 800892c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800892e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008930:	3301      	adds	r3, #1
 8008932:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008936:	3301      	adds	r3, #1
 8008938:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800893a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893c:	3301      	adds	r3, #1
 800893e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008940:	6a3b      	ldr	r3, [r7, #32]
 8008942:	3301      	adds	r3, #1
 8008944:	623b      	str	r3, [r7, #32]
 8008946:	6a3a      	ldr	r2, [r7, #32]
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	429a      	cmp	r2, r3
 800894c:	d3e6      	bcc.n	800891c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800894e:	8bfb      	ldrh	r3, [r7, #30]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d01e      	beq.n	8008992 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008954:	2300      	movs	r3, #0
 8008956:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800895e:	461a      	mov	r2, r3
 8008960:	f107 0310 	add.w	r3, r7, #16
 8008964:	6812      	ldr	r2, [r2, #0]
 8008966:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	6a3b      	ldr	r3, [r7, #32]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	00db      	lsls	r3, r3, #3
 8008970:	fa22 f303 	lsr.w	r3, r2, r3
 8008974:	b2da      	uxtb	r2, r3
 8008976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008978:	701a      	strb	r2, [r3, #0]
      i++;
 800897a:	6a3b      	ldr	r3, [r7, #32]
 800897c:	3301      	adds	r3, #1
 800897e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008982:	3301      	adds	r3, #1
 8008984:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008986:	8bfb      	ldrh	r3, [r7, #30]
 8008988:	3b01      	subs	r3, #1
 800898a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800898c:	8bfb      	ldrh	r3, [r7, #30]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1ea      	bne.n	8008968 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008994:	4618      	mov	r0, r3
 8008996:	372c      	adds	r7, #44	@ 0x2c
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	785b      	ldrb	r3, [r3, #1]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d12c      	bne.n	8008a16 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	db12      	blt.n	80089f4 <USB_EPSetStall+0x54>
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d00f      	beq.n	80089f4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68ba      	ldr	r2, [r7, #8]
 80089e4:	0151      	lsls	r1, r2, #5
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	440a      	add	r2, r1
 80089ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089ee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80089f2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	015a      	lsls	r2, r3, #5
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	4413      	add	r3, r2
 80089fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	0151      	lsls	r1, r2, #5
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	440a      	add	r2, r1
 8008a0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a12:	6013      	str	r3, [r2, #0]
 8008a14:	e02b      	b.n	8008a6e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	015a      	lsls	r2, r3, #5
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	4413      	add	r3, r2
 8008a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	db12      	blt.n	8008a4e <USB_EPSetStall+0xae>
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00f      	beq.n	8008a4e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	0151      	lsls	r1, r2, #5
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	440a      	add	r2, r1
 8008a44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a48:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008a4c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	015a      	lsls	r2, r3, #5
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	4413      	add	r3, r2
 8008a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	0151      	lsls	r1, r2, #5
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	440a      	add	r2, r1
 8008a64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008a6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3714      	adds	r7, #20
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	785b      	ldrb	r3, [r3, #1]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d128      	bne.n	8008aea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	015a      	lsls	r2, r3, #5
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	0151      	lsls	r1, r2, #5
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	440a      	add	r2, r1
 8008aae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ab2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008ab6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	791b      	ldrb	r3, [r3, #4]
 8008abc:	2b03      	cmp	r3, #3
 8008abe:	d003      	beq.n	8008ac8 <USB_EPClearStall+0x4c>
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	791b      	ldrb	r3, [r3, #4]
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d138      	bne.n	8008b3a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	015a      	lsls	r2, r3, #5
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	4413      	add	r3, r2
 8008ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	0151      	lsls	r1, r2, #5
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	440a      	add	r2, r1
 8008ade:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ae6:	6013      	str	r3, [r2, #0]
 8008ae8:	e027      	b.n	8008b3a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	015a      	lsls	r2, r3, #5
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	4413      	add	r3, r2
 8008af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68ba      	ldr	r2, [r7, #8]
 8008afa:	0151      	lsls	r1, r2, #5
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	440a      	add	r2, r1
 8008b00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b04:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008b08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	791b      	ldrb	r3, [r3, #4]
 8008b0e:	2b03      	cmp	r3, #3
 8008b10:	d003      	beq.n	8008b1a <USB_EPClearStall+0x9e>
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	791b      	ldrb	r3, [r3, #4]
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d10f      	bne.n	8008b3a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	68ba      	ldr	r2, [r7, #8]
 8008b2a:	0151      	lsls	r1, r2, #5
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	440a      	add	r2, r1
 8008b30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b38:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3714      	adds	r7, #20
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	460b      	mov	r3, r1
 8008b52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b66:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008b6a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	78fb      	ldrb	r3, [r7, #3]
 8008b76:	011b      	lsls	r3, r3, #4
 8008b78:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008b7c:	68f9      	ldr	r1, [r7, #12]
 8008b7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b82:	4313      	orrs	r3, r2
 8008b84:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3714      	adds	r7, #20
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b085      	sub	sp, #20
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008bae:	f023 0303 	bic.w	r3, r3, #3
 8008bb2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008bc2:	f023 0302 	bic.w	r3, r3, #2
 8008bc6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008bd6:	b480      	push	{r7}
 8008bd8:	b085      	sub	sp, #20
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008bf0:	f023 0303 	bic.w	r3, r3, #3
 8008bf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008c04:	f043 0302 	orr.w	r3, r3, #2
 8008c08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	695b      	ldr	r3, [r3, #20]
 8008c24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	699b      	ldr	r3, [r3, #24]
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008c30:	68fb      	ldr	r3, [r7, #12]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b085      	sub	sp, #20
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c50:	699b      	ldr	r3, [r3, #24]
 8008c52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c5a:	69db      	ldr	r3, [r3, #28]
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	4013      	ands	r3, r2
 8008c60:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	0c1b      	lsrs	r3, r3, #16
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b085      	sub	sp, #20
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c84:	699b      	ldr	r3, [r3, #24]
 8008c86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008c8e:	69db      	ldr	r3, [r3, #28]
 8008c90:	68ba      	ldr	r2, [r7, #8]
 8008c92:	4013      	ands	r3, r2
 8008c94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	b29b      	uxth	r3, r3
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3714      	adds	r7, #20
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b085      	sub	sp, #20
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	460b      	mov	r3, r1
 8008cb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008cb6:	78fb      	ldrb	r3, [r7, #3]
 8008cb8:	015a      	lsls	r2, r3, #5
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	4413      	add	r3, r2
 8008cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	68ba      	ldr	r2, [r7, #8]
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008cd4:	68bb      	ldr	r3, [r7, #8]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3714      	adds	r7, #20
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr

08008ce2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008ce2:	b480      	push	{r7}
 8008ce4:	b087      	sub	sp, #28
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
 8008cea:	460b      	mov	r3, r1
 8008cec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d04:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008d06:	78fb      	ldrb	r3, [r7, #3]
 8008d08:	f003 030f 	and.w	r3, r3, #15
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d12:	01db      	lsls	r3, r3, #7
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	693a      	ldr	r2, [r7, #16]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008d1c:	78fb      	ldrb	r3, [r7, #3]
 8008d1e:	015a      	lsls	r2, r3, #5
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	4413      	add	r3, r2
 8008d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008d30:	68bb      	ldr	r3, [r7, #8]
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	371c      	adds	r7, #28
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d3e:	b480      	push	{r7}
 8008d40:	b083      	sub	sp, #12
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	f003 0301 	and.w	r3, r3, #1
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d5a:	b480      	push	{r7}
 8008d5c:	b085      	sub	sp, #20
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d74:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008d78:	f023 0307 	bic.w	r3, r3, #7
 8008d7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3714      	adds	r7, #20
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b087      	sub	sp, #28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	460b      	mov	r3, r1
 8008daa:	607a      	str	r2, [r7, #4]
 8008dac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	333c      	adds	r3, #60	@ 0x3c
 8008db6:	3304      	adds	r3, #4
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	4a26      	ldr	r2, [pc, #152]	@ (8008e58 <USB_EP0_OutStart+0xb8>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d90a      	bls.n	8008dda <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008dd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008dd4:	d101      	bne.n	8008dda <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	e037      	b.n	8008e4a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008de0:	461a      	mov	r2, r3
 8008de2:	2300      	movs	r3, #0
 8008de4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	697a      	ldr	r2, [r7, #20]
 8008df0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008df4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008df8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e00:	691b      	ldr	r3, [r3, #16]
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e08:	f043 0318 	orr.w	r3, r3, #24
 8008e0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e1c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008e20:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008e22:	7afb      	ldrb	r3, [r7, #11]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d10f      	bne.n	8008e48 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e2e:	461a      	mov	r2, r3
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	697a      	ldr	r2, [r7, #20]
 8008e3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e42:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008e46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	371c      	adds	r7, #28
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	4f54300a 	.word	0x4f54300a

08008e5c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e64:	2300      	movs	r3, #0
 8008e66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e74:	d901      	bls.n	8008e7a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e01b      	b.n	8008eb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	daf2      	bge.n	8008e68 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e82:	2300      	movs	r3, #0
 8008e84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	f043 0201 	orr.w	r2, r3, #1
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3301      	adds	r3, #1
 8008e96:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008e9e:	d901      	bls.n	8008ea4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008ea0:	2303      	movs	r3, #3
 8008ea2:	e006      	b.n	8008eb2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	f003 0301 	and.w	r3, r3, #1
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d0f0      	beq.n	8008e92 <USB_CoreReset+0x36>

  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
	...

08008ec0 <Motor_setup_LF>:
char* IN_RF;
char* IN_RB;
char* IN_EXTRA1;
char* IN_EXTRA2;

void Motor_setup_LF(TIM_HandleTypeDef *_TIM_14_CH1 ,TIM_HandleTypeDef *_TIM_5  ,char* _IN_LF){
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
	//Motor_setup_LF(PWM_TIM ,Encoder_TIM   ,IN_LF);

	LF_PWM = _TIM_14_CH1;
 8008ecc:	4a0f      	ldr	r2, [pc, #60]	@ (8008f0c <Motor_setup_LF+0x4c>)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6013      	str	r3, [r2, #0]
	EN_LF      = _TIM_5;
 8008ed2:	4a0f      	ldr	r2, [pc, #60]	@ (8008f10 <Motor_setup_LF+0x50>)
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(LF_PWM, TIM_CHANNEL_1);       //PWM
 8008ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8008f0c <Motor_setup_LF+0x4c>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2100      	movs	r1, #0
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fc ff76 	bl	8005dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_LF , TIM_CHANNEL_ALL);     //Encoder
 8008ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8008f10 <Motor_setup_LF+0x50>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	213c      	movs	r1, #60	@ 0x3c
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fd f8de 	bl	80060ac <HAL_TIM_Encoder_Start>

	IN_LF = _IN_LF;
 8008ef0:	4a08      	ldr	r2, [pc, #32]	@ (8008f14 <Motor_setup_LF+0x54>)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6013      	str	r3, [r2, #0]

	DutyCycle_LF_MAX = (LF_PWM->Init.Period);
 8008ef6:	4b05      	ldr	r3, [pc, #20]	@ (8008f0c <Motor_setup_LF+0x4c>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	b21a      	sxth	r2, r3
 8008efe:	4b06      	ldr	r3, [pc, #24]	@ (8008f18 <Motor_setup_LF+0x58>)
 8008f00:	801a      	strh	r2, [r3, #0]

}
 8008f02:	bf00      	nop
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	2000066c 	.word	0x2000066c
 8008f10:	20000654 	.word	0x20000654
 8008f14:	20000690 	.word	0x20000690
 8008f18:	20000684 	.word	0x20000684

08008f1c <Motor_setup_LB>:

void Motor_setup_LB(TIM_HandleTypeDef *_TIM_12_CH1 ,TIM_HandleTypeDef *_TIM_1  ,char* _IN_LB){
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
    //Motor_setup_LB(PWM_TIM ,Encoder_TIM  ,IN1_LB ,IN2_LB);

	LB_PWM = _TIM_12_CH1;
 8008f28:	4a0f      	ldr	r2, [pc, #60]	@ (8008f68 <Motor_setup_LB+0x4c>)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6013      	str	r3, [r2, #0]
	EN_LB      = _TIM_1;
 8008f2e:	4a0f      	ldr	r2, [pc, #60]	@ (8008f6c <Motor_setup_LB+0x50>)
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(LB_PWM, TIM_CHANNEL_1);       //PWM
 8008f34:	4b0c      	ldr	r3, [pc, #48]	@ (8008f68 <Motor_setup_LB+0x4c>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2100      	movs	r1, #0
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7fc ff48 	bl	8005dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_LB , TIM_CHANNEL_ALL);     //Encoder
 8008f40:	4b0a      	ldr	r3, [pc, #40]	@ (8008f6c <Motor_setup_LB+0x50>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	213c      	movs	r1, #60	@ 0x3c
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7fd f8b0 	bl	80060ac <HAL_TIM_Encoder_Start>

	IN_LB = _IN_LB;
 8008f4c:	4a08      	ldr	r2, [pc, #32]	@ (8008f70 <Motor_setup_LB+0x54>)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6013      	str	r3, [r2, #0]

	DutyCycle_LB_MAX = (LB_PWM->Init.Period);
 8008f52:	4b05      	ldr	r3, [pc, #20]	@ (8008f68 <Motor_setup_LB+0x4c>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	b21a      	sxth	r2, r3
 8008f5a:	4b06      	ldr	r3, [pc, #24]	@ (8008f74 <Motor_setup_LB+0x58>)
 8008f5c:	801a      	strh	r2, [r3, #0]

}
 8008f5e:	bf00      	nop
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	20000670 	.word	0x20000670
 8008f6c:	20000658 	.word	0x20000658
 8008f70:	20000694 	.word	0x20000694
 8008f74:	20000686 	.word	0x20000686

08008f78 <Motor_setup_RF>:

void Motor_setup_RF(TIM_HandleTypeDef *_TIM_11_CH1  ,TIM_HandleTypeDef *_TIM_8  ,char* _IN_RF){
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
    //Motor_setup_RF(PWM_TIM ,Encoder_TIM   ,IN1_RF ,IN2_RF);

	RF_PWM = _TIM_11_CH1;
 8008f84:	4a0f      	ldr	r2, [pc, #60]	@ (8008fc4 <Motor_setup_RF+0x4c>)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6013      	str	r3, [r2, #0]
	EN_RF  = _TIM_8;
 8008f8a:	4a0f      	ldr	r2, [pc, #60]	@ (8008fc8 <Motor_setup_RF+0x50>)
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(RF_PWM, TIM_CHANNEL_1);           //PWM
 8008f90:	4b0c      	ldr	r3, [pc, #48]	@ (8008fc4 <Motor_setup_RF+0x4c>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2100      	movs	r1, #0
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fc ff1a 	bl	8005dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_RF , TIM_CHANNEL_ALL);     //Encoder
 8008f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8008fc8 <Motor_setup_RF+0x50>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	213c      	movs	r1, #60	@ 0x3c
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fd f882 	bl	80060ac <HAL_TIM_Encoder_Start>

	IN_RF = _IN_RF;
 8008fa8:	4a08      	ldr	r2, [pc, #32]	@ (8008fcc <Motor_setup_RF+0x54>)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6013      	str	r3, [r2, #0]

	DutyCycle_RF_MAX = (RF_PWM->Init.Period);
 8008fae:	4b05      	ldr	r3, [pc, #20]	@ (8008fc4 <Motor_setup_RF+0x4c>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	b21a      	sxth	r2, r3
 8008fb6:	4b06      	ldr	r3, [pc, #24]	@ (8008fd0 <Motor_setup_RF+0x58>)
 8008fb8:	801a      	strh	r2, [r3, #0]

}
 8008fba:	bf00      	nop
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	20000674 	.word	0x20000674
 8008fc8:	2000065c 	.word	0x2000065c
 8008fcc:	20000698 	.word	0x20000698
 8008fd0:	20000688 	.word	0x20000688

08008fd4 <Motor_setup_RB>:

void Motor_setup_RB(TIM_HandleTypeDef *_TIM_12_CH2   ,TIM_HandleTypeDef *_TIM_4 ,char* _IN_RB){
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	RB_PWM = _TIM_12_CH2;
 8008fe0:	4a0f      	ldr	r2, [pc, #60]	@ (8009020 <Motor_setup_RB+0x4c>)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6013      	str	r3, [r2, #0]
	EN_RB  = _TIM_4;
 8008fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8009024 <Motor_setup_RB+0x50>)
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(RB_PWM, TIM_CHANNEL_2);            //PWM
 8008fec:	4b0c      	ldr	r3, [pc, #48]	@ (8009020 <Motor_setup_RB+0x4c>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2104      	movs	r1, #4
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fc feec 	bl	8005dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_RB , TIM_CHANNEL_ALL);      //Encoder
 8008ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8009024 <Motor_setup_RB+0x50>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	213c      	movs	r1, #60	@ 0x3c
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7fd f854 	bl	80060ac <HAL_TIM_Encoder_Start>

	IN_RB = _IN_RB;
 8009004:	4a08      	ldr	r2, [pc, #32]	@ (8009028 <Motor_setup_RB+0x54>)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6013      	str	r3, [r2, #0]

	DutyCycle_RB_MAX = (RB_PWM->Init.Period);
 800900a:	4b05      	ldr	r3, [pc, #20]	@ (8009020 <Motor_setup_RB+0x4c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	b21a      	sxth	r2, r3
 8009012:	4b06      	ldr	r3, [pc, #24]	@ (800902c <Motor_setup_RB+0x58>)
 8009014:	801a      	strh	r2, [r3, #0]

}
 8009016:	bf00      	nop
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	20000678 	.word	0x20000678
 8009024:	20000660 	.word	0x20000660
 8009028:	2000069c 	.word	0x2000069c
 800902c:	2000068a 	.word	0x2000068a

08009030 <Motor_setup_EXTRA1>:

void Motor_setup_EXTRA1(TIM_HandleTypeDef *_TIM_9_CH1  ,TIM_HandleTypeDef *_TIM_3  ,char* _IN_EXTRA1){
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	EXTRA1_PWM = _TIM_9_CH1;
 800903c:	4a0f      	ldr	r2, [pc, #60]	@ (800907c <Motor_setup_EXTRA1+0x4c>)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6013      	str	r3, [r2, #0]
	EN_X  = _TIM_3;
 8009042:	4a0f      	ldr	r2, [pc, #60]	@ (8009080 <Motor_setup_EXTRA1+0x50>)
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(EXTRA1_PWM, TIM_CHANNEL_1);            //PWM
 8009048:	4b0c      	ldr	r3, [pc, #48]	@ (800907c <Motor_setup_EXTRA1+0x4c>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2100      	movs	r1, #0
 800904e:	4618      	mov	r0, r3
 8009050:	f7fc febe 	bl	8005dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_X , TIM_CHANNEL_ALL);      //Encoder
 8009054:	4b0a      	ldr	r3, [pc, #40]	@ (8009080 <Motor_setup_EXTRA1+0x50>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	213c      	movs	r1, #60	@ 0x3c
 800905a:	4618      	mov	r0, r3
 800905c:	f7fd f826 	bl	80060ac <HAL_TIM_Encoder_Start>

	IN_EXTRA1 = _IN_EXTRA1;
 8009060:	4a08      	ldr	r2, [pc, #32]	@ (8009084 <Motor_setup_EXTRA1+0x54>)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6013      	str	r3, [r2, #0]

	DutyCycle_EXTRA1_MAX = (EXTRA1_PWM->Init.Period);
 8009066:	4b05      	ldr	r3, [pc, #20]	@ (800907c <Motor_setup_EXTRA1+0x4c>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	b21a      	sxth	r2, r3
 800906e:	4b06      	ldr	r3, [pc, #24]	@ (8009088 <Motor_setup_EXTRA1+0x58>)
 8009070:	801a      	strh	r2, [r3, #0]

}
 8009072:	bf00      	nop
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	2000067c 	.word	0x2000067c
 8009080:	20000664 	.word	0x20000664
 8009084:	200006a0 	.word	0x200006a0
 8009088:	2000068c 	.word	0x2000068c

0800908c <Motor_setup_EXTRA2>:

void Motor_setup_EXTRA2(TIM_HandleTypeDef *_TIM_10_CH1  ,TIM_HandleTypeDef *_TIM_2 ,char* _IN_EXTRA2){
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
    //Motor_setup_RB(PWM_TIM ,Encoder_TIM   ,IN1_RB ,IN2_RB);

	EXTRA2_PWM = _TIM_10_CH1;
 8009098:	4a0f      	ldr	r2, [pc, #60]	@ (80090d8 <Motor_setup_EXTRA2+0x4c>)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	6013      	str	r3, [r2, #0]
	EN_Y  = _TIM_2;
 800909e:	4a0f      	ldr	r2, [pc, #60]	@ (80090dc <Motor_setup_EXTRA2+0x50>)
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	6013      	str	r3, [r2, #0]

	HAL_TIM_PWM_Start(EXTRA2_PWM, TIM_CHANNEL_1);            //PWM
 80090a4:	4b0c      	ldr	r3, [pc, #48]	@ (80090d8 <Motor_setup_EXTRA2+0x4c>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2100      	movs	r1, #0
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fc fe90 	bl	8005dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(EN_Y , TIM_CHANNEL_ALL);      //Encoder
 80090b0:	4b0a      	ldr	r3, [pc, #40]	@ (80090dc <Motor_setup_EXTRA2+0x50>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	213c      	movs	r1, #60	@ 0x3c
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fc fff8 	bl	80060ac <HAL_TIM_Encoder_Start>

	IN_EXTRA2 = _IN_EXTRA2;
 80090bc:	4a08      	ldr	r2, [pc, #32]	@ (80090e0 <Motor_setup_EXTRA2+0x54>)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6013      	str	r3, [r2, #0]

	DutyCycle_EXTRA2_MAX = (EXTRA2_PWM->Init.Period);
 80090c2:	4b05      	ldr	r3, [pc, #20]	@ (80090d8 <Motor_setup_EXTRA2+0x4c>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	b21a      	sxth	r2, r3
 80090ca:	4b06      	ldr	r3, [pc, #24]	@ (80090e4 <Motor_setup_EXTRA2+0x58>)
 80090cc:	801a      	strh	r2, [r3, #0]

}
 80090ce:	bf00      	nop
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	20000680 	.word	0x20000680
 80090dc:	20000668 	.word	0x20000668
 80090e0:	200006a4 	.word	0x200006a4
 80090e4:	2000068e 	.word	0x2000068e

080090e8 <getCount>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////PID///////////////////////////////////////////////////////////////

int16_t getCount(TIM_HandleTypeDef *TIM){
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
	int16_t count = ((int16_t)(TIM->Instance->CNT));
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090f6:	81fb      	strh	r3, [r7, #14]

	return count;
 80090f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3714      	adds	r7, #20
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <Setup_CPR>:

float _RPM[6] = {0 ,0 ,0 ,0 ,0 ,0}; //Speed   //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

uint16_t CPR = 68;

void Setup_CPR(uint16_t _CPR){
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	4603      	mov	r3, r0
 8009110:	80fb      	strh	r3, [r7, #6]
	CPR = _CPR;
 8009112:	4a04      	ldr	r2, [pc, #16]	@ (8009124 <Setup_CPR+0x1c>)
 8009114:	88fb      	ldrh	r3, [r7, #6]
 8009116:	8013      	strh	r3, [r2, #0]
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr
 8009124:	20000018 	.word	0x20000018

08009128 <Setup_Gear_Ratio>:

uint16_t Gear_Ratio = 48;

void Setup_Gear_Ratio(uint16_t _Gear_Ratio){
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	4603      	mov	r3, r0
 8009130:	80fb      	strh	r3, [r7, #6]
	Gear_Ratio = _Gear_Ratio;
 8009132:	4a04      	ldr	r2, [pc, #16]	@ (8009144 <Setup_Gear_Ratio+0x1c>)
 8009134:	88fb      	ldrh	r3, [r7, #6]
 8009136:	8013      	strh	r3, [r2, #0]
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr
 8009144:	2000001a 	.word	0x2000001a

08009148 <Setup_frequency_Motor>:

void Setup_frequency_Motor(uint16_t freq){
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	4603      	mov	r3, r0
 8009150:	80fb      	strh	r3, [r7, #6]
	_freq = freq;
 8009152:	4a04      	ldr	r2, [pc, #16]	@ (8009164 <Setup_frequency_Motor+0x1c>)
 8009154:	88fb      	ldrh	r3, [r7, #6]
 8009156:	8013      	strh	r3, [r2, #0]
}
 8009158:	bf00      	nop
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr
 8009164:	20000016 	.word	0x20000016

08009168 <getRad_s_to_RPM>:
	float Rad_s = RPM * 0.10472f;

	return Rad_s;
}

float getRad_s_to_RPM(float Rad_s){
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	ed87 0a01 	vstr	s0, [r7, #4]
	float RPM__ = Rad_s * 9.549297f;
 8009172:	edd7 7a01 	vldr	s15, [r7, #4]
 8009176:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8009198 <getRad_s_to_RPM+0x30>
 800917a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800917e:	edc7 7a03 	vstr	s15, [r7, #12]

	return RPM__;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	ee07 3a90 	vmov	s15, r3
}
 8009188:	eeb0 0a67 	vmov.f32	s0, s15
 800918c:	3714      	adds	r7, #20
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr
 8009196:	bf00      	nop
 8009198:	4118c9ec 	.word	0x4118c9ec

0800919c <getRPM_TIM_Wheel>:

float getRPM_TIM_Wheel(TIM_HandleTypeDef *TIM ,uint8_t _Wheel){
 800919c:	b590      	push	{r4, r7, lr}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	70fb      	strb	r3, [r7, #3]
	Present_Count[_Wheel] = (int16_t)getCount(TIM);
 80091a8:	78fc      	ldrb	r4, [r7, #3]
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7ff ff9c 	bl	80090e8 <getCount>
 80091b0:	4603      	mov	r3, r0
 80091b2:	461a      	mov	r2, r3
 80091b4:	4b29      	ldr	r3, [pc, #164]	@ (800925c <getRPM_TIM_Wheel+0xc0>)
 80091b6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

	// V = count/t = count*freq
	_RPM[_Wheel] = (float)((int16_t)(Present_Count[_Wheel] - Past_Count[_Wheel]) * _freq);
 80091ba:	78fb      	ldrb	r3, [r7, #3]
 80091bc:	4a27      	ldr	r2, [pc, #156]	@ (800925c <getRPM_TIM_Wheel+0xc0>)
 80091be:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	78fb      	ldrb	r3, [r7, #3]
 80091c6:	4926      	ldr	r1, [pc, #152]	@ (8009260 <getRPM_TIM_Wheel+0xc4>)
 80091c8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	b21b      	sxth	r3, r3
 80091d4:	461a      	mov	r2, r3
 80091d6:	4b23      	ldr	r3, [pc, #140]	@ (8009264 <getRPM_TIM_Wheel+0xc8>)
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	fb03 f202 	mul.w	r2, r3, r2
 80091de:	78fb      	ldrb	r3, [r7, #3]
 80091e0:	ee07 2a90 	vmov	s15, r2
 80091e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091e8:	4a1f      	ldr	r2, [pc, #124]	@ (8009268 <getRPM_TIM_Wheel+0xcc>)
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4413      	add	r3, r2
 80091ee:	edc3 7a00 	vstr	s15, [r3]
	_RPM[_Wheel] = (float)(((_RPM[_Wheel]* 60.0f)/CPR )/Gear_Ratio);
 80091f2:	78fb      	ldrb	r3, [r7, #3]
 80091f4:	4a1c      	ldr	r2, [pc, #112]	@ (8009268 <getRPM_TIM_Wheel+0xcc>)
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	4413      	add	r3, r2
 80091fa:	edd3 7a00 	vldr	s15, [r3]
 80091fe:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800926c <getRPM_TIM_Wheel+0xd0>
 8009202:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009206:	4b1a      	ldr	r3, [pc, #104]	@ (8009270 <getRPM_TIM_Wheel+0xd4>)
 8009208:	881b      	ldrh	r3, [r3, #0]
 800920a:	ee07 3a90 	vmov	s15, r3
 800920e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009212:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009216:	4b17      	ldr	r3, [pc, #92]	@ (8009274 <getRPM_TIM_Wheel+0xd8>)
 8009218:	881b      	ldrh	r3, [r3, #0]
 800921a:	ee07 3a90 	vmov	s15, r3
 800921e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009222:	78fb      	ldrb	r3, [r7, #3]
 8009224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009228:	4a0f      	ldr	r2, [pc, #60]	@ (8009268 <getRPM_TIM_Wheel+0xcc>)
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4413      	add	r3, r2
 800922e:	edc3 7a00 	vstr	s15, [r3]

	Past_Count[_Wheel] = Present_Count[_Wheel];
 8009232:	78fa      	ldrb	r2, [r7, #3]
 8009234:	78fb      	ldrb	r3, [r7, #3]
 8009236:	4909      	ldr	r1, [pc, #36]	@ (800925c <getRPM_TIM_Wheel+0xc0>)
 8009238:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 800923c:	4a08      	ldr	r2, [pc, #32]	@ (8009260 <getRPM_TIM_Wheel+0xc4>)
 800923e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return _RPM[_Wheel];
 8009242:	78fb      	ldrb	r3, [r7, #3]
 8009244:	4a08      	ldr	r2, [pc, #32]	@ (8009268 <getRPM_TIM_Wheel+0xcc>)
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	ee07 3a90 	vmov	s15, r3
}
 8009250:	eeb0 0a67 	vmov.f32	s0, s15
 8009254:	370c      	adds	r7, #12
 8009256:	46bd      	mov	sp, r7
 8009258:	bd90      	pop	{r4, r7, pc}
 800925a:	bf00      	nop
 800925c:	200006a8 	.word	0x200006a8
 8009260:	200006b4 	.word	0x200006b4
 8009264:	20000016 	.word	0x20000016
 8009268:	200006c0 	.word	0x200006c0
 800926c:	42700000 	.word	0x42700000
 8009270:	20000018 	.word	0x20000018
 8009274:	2000001a 	.word	0x2000001a

08009278 <Setup_PID_LF>:

float min_speed[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2
float max_speed[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2


void Setup_PID_LF(float Kp_LF ,float Ki_LF ,float Kd_LF ,float min_speed_LF ,float max_speed_LF){
 8009278:	b480      	push	{r7}
 800927a:	b087      	sub	sp, #28
 800927c:	af00      	add	r7, sp, #0
 800927e:	ed87 0a05 	vstr	s0, [r7, #20]
 8009282:	edc7 0a04 	vstr	s1, [r7, #16]
 8009286:	ed87 1a03 	vstr	s2, [r7, #12]
 800928a:	edc7 1a02 	vstr	s3, [r7, #8]
 800928e:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[0] = Kp_LF;
 8009292:	4a0a      	ldr	r2, [pc, #40]	@ (80092bc <Setup_PID_LF+0x44>)
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	6013      	str	r3, [r2, #0]
	Ki_Wheel[0] = Ki_LF;
 8009298:	4a09      	ldr	r2, [pc, #36]	@ (80092c0 <Setup_PID_LF+0x48>)
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	6013      	str	r3, [r2, #0]
	Kd_Wheel[0] = Kd_LF;
 800929e:	4a09      	ldr	r2, [pc, #36]	@ (80092c4 <Setup_PID_LF+0x4c>)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6013      	str	r3, [r2, #0]

	min_speed[0] = min_speed_LF;
 80092a4:	4a08      	ldr	r2, [pc, #32]	@ (80092c8 <Setup_PID_LF+0x50>)
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	6013      	str	r3, [r2, #0]
	max_speed[0] = max_speed_LF;
 80092aa:	4a08      	ldr	r2, [pc, #32]	@ (80092cc <Setup_PID_LF+0x54>)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6013      	str	r3, [r2, #0]
}
 80092b0:	bf00      	nop
 80092b2:	371c      	adds	r7, #28
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr
 80092bc:	200006d8 	.word	0x200006d8
 80092c0:	200006f0 	.word	0x200006f0
 80092c4:	20000708 	.word	0x20000708
 80092c8:	20000720 	.word	0x20000720
 80092cc:	20000738 	.word	0x20000738

080092d0 <Setup_PID_LB>:

void Setup_PID_LB(float Kp_LB ,float Ki_LB ,float Kd_LB ,float min_speed_LB ,float max_speed_LB){
 80092d0:	b480      	push	{r7}
 80092d2:	b087      	sub	sp, #28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	ed87 0a05 	vstr	s0, [r7, #20]
 80092da:	edc7 0a04 	vstr	s1, [r7, #16]
 80092de:	ed87 1a03 	vstr	s2, [r7, #12]
 80092e2:	edc7 1a02 	vstr	s3, [r7, #8]
 80092e6:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[1] = Kp_LB;
 80092ea:	4a0a      	ldr	r2, [pc, #40]	@ (8009314 <Setup_PID_LB+0x44>)
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	6053      	str	r3, [r2, #4]
	Ki_Wheel[1] = Ki_LB;
 80092f0:	4a09      	ldr	r2, [pc, #36]	@ (8009318 <Setup_PID_LB+0x48>)
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	6053      	str	r3, [r2, #4]
	Kd_Wheel[1] = Kd_LB;
 80092f6:	4a09      	ldr	r2, [pc, #36]	@ (800931c <Setup_PID_LB+0x4c>)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	6053      	str	r3, [r2, #4]

	min_speed[1] = min_speed_LB;
 80092fc:	4a08      	ldr	r2, [pc, #32]	@ (8009320 <Setup_PID_LB+0x50>)
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	6053      	str	r3, [r2, #4]
	max_speed[1] = max_speed_LB;
 8009302:	4a08      	ldr	r2, [pc, #32]	@ (8009324 <Setup_PID_LB+0x54>)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6053      	str	r3, [r2, #4]
}
 8009308:	bf00      	nop
 800930a:	371c      	adds	r7, #28
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr
 8009314:	200006d8 	.word	0x200006d8
 8009318:	200006f0 	.word	0x200006f0
 800931c:	20000708 	.word	0x20000708
 8009320:	20000720 	.word	0x20000720
 8009324:	20000738 	.word	0x20000738

08009328 <Setup_PID_RF>:

void Setup_PID_RF(float Kp_RF ,float Ki_RF ,float Kd_RF ,float min_speed_RF ,float max_speed_RF){
 8009328:	b480      	push	{r7}
 800932a:	b087      	sub	sp, #28
 800932c:	af00      	add	r7, sp, #0
 800932e:	ed87 0a05 	vstr	s0, [r7, #20]
 8009332:	edc7 0a04 	vstr	s1, [r7, #16]
 8009336:	ed87 1a03 	vstr	s2, [r7, #12]
 800933a:	edc7 1a02 	vstr	s3, [r7, #8]
 800933e:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[2] = Kp_RF;
 8009342:	4a0a      	ldr	r2, [pc, #40]	@ (800936c <Setup_PID_RF+0x44>)
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	6093      	str	r3, [r2, #8]
	Ki_Wheel[2] = Ki_RF;
 8009348:	4a09      	ldr	r2, [pc, #36]	@ (8009370 <Setup_PID_RF+0x48>)
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	6093      	str	r3, [r2, #8]
	Kd_Wheel[2] = Kd_RF;
 800934e:	4a09      	ldr	r2, [pc, #36]	@ (8009374 <Setup_PID_RF+0x4c>)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6093      	str	r3, [r2, #8]

	min_speed[2] = min_speed_RF;
 8009354:	4a08      	ldr	r2, [pc, #32]	@ (8009378 <Setup_PID_RF+0x50>)
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	6093      	str	r3, [r2, #8]
	max_speed[2] = max_speed_RF;
 800935a:	4a08      	ldr	r2, [pc, #32]	@ (800937c <Setup_PID_RF+0x54>)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6093      	str	r3, [r2, #8]
}
 8009360:	bf00      	nop
 8009362:	371c      	adds	r7, #28
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr
 800936c:	200006d8 	.word	0x200006d8
 8009370:	200006f0 	.word	0x200006f0
 8009374:	20000708 	.word	0x20000708
 8009378:	20000720 	.word	0x20000720
 800937c:	20000738 	.word	0x20000738

08009380 <Setup_PID_RB>:

void Setup_PID_RB(float Kp_RB ,float Ki_RB ,float Kd_RB ,float min_speed_RB ,float max_speed_RB){
 8009380:	b480      	push	{r7}
 8009382:	b087      	sub	sp, #28
 8009384:	af00      	add	r7, sp, #0
 8009386:	ed87 0a05 	vstr	s0, [r7, #20]
 800938a:	edc7 0a04 	vstr	s1, [r7, #16]
 800938e:	ed87 1a03 	vstr	s2, [r7, #12]
 8009392:	edc7 1a02 	vstr	s3, [r7, #8]
 8009396:	ed87 2a01 	vstr	s4, [r7, #4]
	Kp_Wheel[3] = Kp_RB;
 800939a:	4a0a      	ldr	r2, [pc, #40]	@ (80093c4 <Setup_PID_RB+0x44>)
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	60d3      	str	r3, [r2, #12]
	Ki_Wheel[3] = Ki_RB;
 80093a0:	4a09      	ldr	r2, [pc, #36]	@ (80093c8 <Setup_PID_RB+0x48>)
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	60d3      	str	r3, [r2, #12]
	Kd_Wheel[3] = Kd_RB;
 80093a6:	4a09      	ldr	r2, [pc, #36]	@ (80093cc <Setup_PID_RB+0x4c>)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	60d3      	str	r3, [r2, #12]

	min_speed[3] = min_speed_RB;
 80093ac:	4a08      	ldr	r2, [pc, #32]	@ (80093d0 <Setup_PID_RB+0x50>)
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	60d3      	str	r3, [r2, #12]
	max_speed[3] = max_speed_RB;
 80093b2:	4a08      	ldr	r2, [pc, #32]	@ (80093d4 <Setup_PID_RB+0x54>)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	60d3      	str	r3, [r2, #12]
}
 80093b8:	bf00      	nop
 80093ba:	371c      	adds	r7, #28
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	200006d8 	.word	0x200006d8
 80093c8:	200006f0 	.word	0x200006f0
 80093cc:	20000708 	.word	0x20000708
 80093d0:	20000720 	.word	0x20000720
 80093d4:	20000738 	.word	0x20000738

080093d8 <PID_Speed>:

float Past_Error[6]   = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float Output_PID[6]    = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float PID_Speed(float _Setpoint ,int16_t RPM ,uint8_t _Wheel){
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	ed87 0a01 	vstr	s0, [r7, #4]
 80093e2:	4603      	mov	r3, r0
 80093e4:	460a      	mov	r2, r1
 80093e6:	807b      	strh	r3, [r7, #2]
 80093e8:	4613      	mov	r3, r2
 80093ea:	707b      	strb	r3, [r7, #1]
//	  case 4 : getRPM_TIM_Wheel(EN_X ,EXTRA1 ); break;
//	  case 5 : getRPM_TIM_Wheel(EN_Y ,EXTRA2 ); break;
//	}

//	Error_Speed[_Wheel] = _Setpoint-_RPM[_Wheel];
	Error_Speed[_Wheel] = _Setpoint-RPM;
 80093ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80093f0:	ee07 3a90 	vmov	s15, r3
 80093f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093f8:	787b      	ldrb	r3, [r7, #1]
 80093fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80093fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009402:	4a41      	ldr	r2, [pc, #260]	@ (8009508 <PID_Speed+0x130>)
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	edc3 7a00 	vstr	s15, [r3]

	Proportional[_Wheel] = Error_Speed[_Wheel];
 800940c:	787a      	ldrb	r2, [r7, #1]
 800940e:	787b      	ldrb	r3, [r7, #1]
 8009410:	493d      	ldr	r1, [pc, #244]	@ (8009508 <PID_Speed+0x130>)
 8009412:	0092      	lsls	r2, r2, #2
 8009414:	440a      	add	r2, r1
 8009416:	6812      	ldr	r2, [r2, #0]
 8009418:	493c      	ldr	r1, [pc, #240]	@ (800950c <PID_Speed+0x134>)
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	440b      	add	r3, r1
 800941e:	601a      	str	r2, [r3, #0]
	Integnator[_Wheel]   += Error_Speed[_Wheel];
 8009420:	787b      	ldrb	r3, [r7, #1]
 8009422:	4a3b      	ldr	r2, [pc, #236]	@ (8009510 <PID_Speed+0x138>)
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4413      	add	r3, r2
 8009428:	ed93 7a00 	vldr	s14, [r3]
 800942c:	787b      	ldrb	r3, [r7, #1]
 800942e:	4a36      	ldr	r2, [pc, #216]	@ (8009508 <PID_Speed+0x130>)
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	4413      	add	r3, r2
 8009434:	edd3 7a00 	vldr	s15, [r3]
 8009438:	787b      	ldrb	r3, [r7, #1]
 800943a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800943e:	4a34      	ldr	r2, [pc, #208]	@ (8009510 <PID_Speed+0x138>)
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4413      	add	r3, r2
 8009444:	edc3 7a00 	vstr	s15, [r3]
	Derivative[_Wheel]   = Error_Speed[_Wheel] - Past_Error[_Wheel];
 8009448:	787b      	ldrb	r3, [r7, #1]
 800944a:	4a2f      	ldr	r2, [pc, #188]	@ (8009508 <PID_Speed+0x130>)
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4413      	add	r3, r2
 8009450:	ed93 7a00 	vldr	s14, [r3]
 8009454:	787b      	ldrb	r3, [r7, #1]
 8009456:	4a2f      	ldr	r2, [pc, #188]	@ (8009514 <PID_Speed+0x13c>)
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	edd3 7a00 	vldr	s15, [r3]
 8009460:	787b      	ldrb	r3, [r7, #1]
 8009462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009466:	4a2c      	ldr	r2, [pc, #176]	@ (8009518 <PID_Speed+0x140>)
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	4413      	add	r3, r2
 800946c:	edc3 7a00 	vstr	s15, [r3]

	Past_Error[_Wheel] = Error_Speed[_Wheel];
 8009470:	787a      	ldrb	r2, [r7, #1]
 8009472:	787b      	ldrb	r3, [r7, #1]
 8009474:	4924      	ldr	r1, [pc, #144]	@ (8009508 <PID_Speed+0x130>)
 8009476:	0092      	lsls	r2, r2, #2
 8009478:	440a      	add	r2, r1
 800947a:	6812      	ldr	r2, [r2, #0]
 800947c:	4925      	ldr	r1, [pc, #148]	@ (8009514 <PID_Speed+0x13c>)
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	440b      	add	r3, r1
 8009482:	601a      	str	r2, [r3, #0]

	Output_PID[_Wheel]  = (float)((Proportional[_Wheel]*Kp_Wheel[_Wheel]) + (Integnator[_Wheel]*Ki_Wheel[_Wheel]) + (Derivative[_Wheel]*Kd_Wheel[_Wheel]));
 8009484:	787b      	ldrb	r3, [r7, #1]
 8009486:	4a21      	ldr	r2, [pc, #132]	@ (800950c <PID_Speed+0x134>)
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	4413      	add	r3, r2
 800948c:	ed93 7a00 	vldr	s14, [r3]
 8009490:	787b      	ldrb	r3, [r7, #1]
 8009492:	4a22      	ldr	r2, [pc, #136]	@ (800951c <PID_Speed+0x144>)
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	edd3 7a00 	vldr	s15, [r3]
 800949c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80094a0:	787b      	ldrb	r3, [r7, #1]
 80094a2:	4a1b      	ldr	r2, [pc, #108]	@ (8009510 <PID_Speed+0x138>)
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	edd3 6a00 	vldr	s13, [r3]
 80094ac:	787b      	ldrb	r3, [r7, #1]
 80094ae:	4a1c      	ldr	r2, [pc, #112]	@ (8009520 <PID_Speed+0x148>)
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	4413      	add	r3, r2
 80094b4:	edd3 7a00 	vldr	s15, [r3]
 80094b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80094bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80094c0:	787b      	ldrb	r3, [r7, #1]
 80094c2:	4a15      	ldr	r2, [pc, #84]	@ (8009518 <PID_Speed+0x140>)
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	edd3 6a00 	vldr	s13, [r3]
 80094cc:	787b      	ldrb	r3, [r7, #1]
 80094ce:	4a15      	ldr	r2, [pc, #84]	@ (8009524 <PID_Speed+0x14c>)
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4413      	add	r3, r2
 80094d4:	edd3 7a00 	vldr	s15, [r3]
 80094d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80094dc:	787b      	ldrb	r3, [r7, #1]
 80094de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094e2:	4a11      	ldr	r2, [pc, #68]	@ (8009528 <PID_Speed+0x150>)
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	4413      	add	r3, r2
 80094e8:	edc3 7a00 	vstr	s15, [r3]


	return Output_PID[_Wheel];
 80094ec:	787b      	ldrb	r3, [r7, #1]
 80094ee:	4a0e      	ldr	r2, [pc, #56]	@ (8009528 <PID_Speed+0x150>)
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	4413      	add	r3, r2
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	ee07 3a90 	vmov	s15, r3
}
 80094fa:	eeb0 0a67 	vmov.f32	s0, s15
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr
 8009508:	20000750 	.word	0x20000750
 800950c:	20000768 	.word	0x20000768
 8009510:	20000780 	.word	0x20000780
 8009514:	200007b0 	.word	0x200007b0
 8009518:	20000798 	.word	0x20000798
 800951c:	200006d8 	.word	0x200006d8
 8009520:	200006f0 	.word	0x200006f0
 8009524:	20000708 	.word	0x20000708
 8009528:	200007c8 	.word	0x200007c8

0800952c <Motor_DutyCycle_LF>:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////Motor////////////////////////////////////////////////////////////////////
void Motor_DutyCycle_LF(int16_t DutyCycle_LF){
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	4603      	mov	r3, r0
 8009534:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_LF > DutyCycle_LF_MAX) {
 8009536:	4b26      	ldr	r3, [pc, #152]	@ (80095d0 <Motor_DutyCycle_LF+0xa4>)
 8009538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800953c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009540:	429a      	cmp	r2, r3
 8009542:	dd03      	ble.n	800954c <Motor_DutyCycle_LF+0x20>
	    DutyCycle_LF = DutyCycle_LF_MAX;
 8009544:	4b22      	ldr	r3, [pc, #136]	@ (80095d0 <Motor_DutyCycle_LF+0xa4>)
 8009546:	881b      	ldrh	r3, [r3, #0]
 8009548:	80fb      	strh	r3, [r7, #6]
 800954a:	e00e      	b.n	800956a <Motor_DutyCycle_LF+0x3e>
	} else if (DutyCycle_LF < -DutyCycle_LF_MAX) {
 800954c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009550:	4b1f      	ldr	r3, [pc, #124]	@ (80095d0 <Motor_DutyCycle_LF+0xa4>)
 8009552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009556:	425b      	negs	r3, r3
 8009558:	429a      	cmp	r2, r3
 800955a:	da06      	bge.n	800956a <Motor_DutyCycle_LF+0x3e>
		DutyCycle_LF = -DutyCycle_LF_MAX;
 800955c:	4b1c      	ldr	r3, [pc, #112]	@ (80095d0 <Motor_DutyCycle_LF+0xa4>)
 800955e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009562:	b29b      	uxth	r3, r3
 8009564:	425b      	negs	r3, r3
 8009566:	b29b      	uxth	r3, r3
 8009568:	80fb      	strh	r3, [r7, #6]
	}

	LF_PWM->Instance->CCR1 = (DutyCycle_LF > 0) ? (int16_t)DutyCycle_LF : (DutyCycle_LF_MAX + (int16_t)DutyCycle_LF);
 800956a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800956e:	2b00      	cmp	r3, #0
 8009570:	dd02      	ble.n	8009578 <Motor_DutyCycle_LF+0x4c>
 8009572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009576:	e006      	b.n	8009586 <Motor_DutyCycle_LF+0x5a>
 8009578:	4b15      	ldr	r3, [pc, #84]	@ (80095d0 <Motor_DutyCycle_LF+0xa4>)
 800957a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800957e:	461a      	mov	r2, r3
 8009580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009584:	4413      	add	r3, r2
 8009586:	4a13      	ldr	r2, [pc, #76]	@ (80095d4 <Motor_DutyCycle_LF+0xa8>)
 8009588:	6812      	ldr	r2, [r2, #0]
 800958a:	6812      	ldr	r2, [r2, #0]
 800958c:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_LF , (DutyCycle_LF < 0) ? 1 : 0);
 800958e:	4b12      	ldr	r3, [pc, #72]	@ (80095d8 <Motor_DutyCycle_LF+0xac>)
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009596:	13db      	asrs	r3, r3, #15
 8009598:	b21b      	sxth	r3, r3
 800959a:	b2db      	uxtb	r3, r3
 800959c:	f003 0301 	and.w	r3, r3, #1
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	4619      	mov	r1, r3
 80095a4:	4610      	mov	r0, r2
 80095a6:	f000 fba1 	bl	8009cec <digitalWrite>

	if(DutyCycle_LF == 0){
 80095aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d10a      	bne.n	80095c8 <Motor_DutyCycle_LF+0x9c>
	   LF_PWM->Instance->CCR1 = 0;
 80095b2:	4b08      	ldr	r3, [pc, #32]	@ (80095d4 <Motor_DutyCycle_LF+0xa8>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	2200      	movs	r2, #0
 80095ba:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_LF ,0);
 80095bc:	4b06      	ldr	r3, [pc, #24]	@ (80095d8 <Motor_DutyCycle_LF+0xac>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2100      	movs	r1, #0
 80095c2:	4618      	mov	r0, r3
 80095c4:	f000 fb92 	bl	8009cec <digitalWrite>
	}
}
 80095c8:	bf00      	nop
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	20000684 	.word	0x20000684
 80095d4:	2000066c 	.word	0x2000066c
 80095d8:	20000690 	.word	0x20000690

080095dc <Motor_DutyCycle_LB>:

void Motor_DutyCycle_LB(int16_t DutyCycle_LB){
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	4603      	mov	r3, r0
 80095e4:	80fb      	strh	r3, [r7, #6]
	DutyCycle_LB = -DutyCycle_LB;
 80095e6:	88fb      	ldrh	r3, [r7, #6]
 80095e8:	425b      	negs	r3, r3
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_LB > DutyCycle_LB_MAX) {
 80095ee:	4b26      	ldr	r3, [pc, #152]	@ (8009688 <Motor_DutyCycle_LB+0xac>)
 80095f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	dd03      	ble.n	8009604 <Motor_DutyCycle_LB+0x28>
		DutyCycle_LB = DutyCycle_LB_MAX;
 80095fc:	4b22      	ldr	r3, [pc, #136]	@ (8009688 <Motor_DutyCycle_LB+0xac>)
 80095fe:	881b      	ldrh	r3, [r3, #0]
 8009600:	80fb      	strh	r3, [r7, #6]
 8009602:	e00e      	b.n	8009622 <Motor_DutyCycle_LB+0x46>
	} else if (DutyCycle_LB < -DutyCycle_LB_MAX) {
 8009604:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009608:	4b1f      	ldr	r3, [pc, #124]	@ (8009688 <Motor_DutyCycle_LB+0xac>)
 800960a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800960e:	425b      	negs	r3, r3
 8009610:	429a      	cmp	r2, r3
 8009612:	da06      	bge.n	8009622 <Motor_DutyCycle_LB+0x46>
		DutyCycle_LB = -DutyCycle_LB_MAX;
 8009614:	4b1c      	ldr	r3, [pc, #112]	@ (8009688 <Motor_DutyCycle_LB+0xac>)
 8009616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800961a:	b29b      	uxth	r3, r3
 800961c:	425b      	negs	r3, r3
 800961e:	b29b      	uxth	r3, r3
 8009620:	80fb      	strh	r3, [r7, #6]
	}

	LB_PWM->Instance->CCR1 = (DutyCycle_LB > 0) ? (int16_t)DutyCycle_LB : (DutyCycle_LB_MAX + (int16_t)DutyCycle_LB);
 8009622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009626:	2b00      	cmp	r3, #0
 8009628:	dd02      	ble.n	8009630 <Motor_DutyCycle_LB+0x54>
 800962a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800962e:	e006      	b.n	800963e <Motor_DutyCycle_LB+0x62>
 8009630:	4b15      	ldr	r3, [pc, #84]	@ (8009688 <Motor_DutyCycle_LB+0xac>)
 8009632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009636:	461a      	mov	r2, r3
 8009638:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800963c:	4413      	add	r3, r2
 800963e:	4a13      	ldr	r2, [pc, #76]	@ (800968c <Motor_DutyCycle_LB+0xb0>)
 8009640:	6812      	ldr	r2, [r2, #0]
 8009642:	6812      	ldr	r2, [r2, #0]
 8009644:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_LB , (DutyCycle_LB < 0) ? 1 : 0);
 8009646:	4b12      	ldr	r3, [pc, #72]	@ (8009690 <Motor_DutyCycle_LB+0xb4>)
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800964e:	13db      	asrs	r3, r3, #15
 8009650:	b21b      	sxth	r3, r3
 8009652:	b2db      	uxtb	r3, r3
 8009654:	f003 0301 	and.w	r3, r3, #1
 8009658:	b2db      	uxtb	r3, r3
 800965a:	4619      	mov	r1, r3
 800965c:	4610      	mov	r0, r2
 800965e:	f000 fb45 	bl	8009cec <digitalWrite>

	if(DutyCycle_LB == 0){
 8009662:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d10a      	bne.n	8009680 <Motor_DutyCycle_LB+0xa4>
	   LB_PWM->Instance->CCR1 = 0;
 800966a:	4b08      	ldr	r3, [pc, #32]	@ (800968c <Motor_DutyCycle_LB+0xb0>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2200      	movs	r2, #0
 8009672:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_LB ,0);
 8009674:	4b06      	ldr	r3, [pc, #24]	@ (8009690 <Motor_DutyCycle_LB+0xb4>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	2100      	movs	r1, #0
 800967a:	4618      	mov	r0, r3
 800967c:	f000 fb36 	bl	8009cec <digitalWrite>
	}
}
 8009680:	bf00      	nop
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	20000686 	.word	0x20000686
 800968c:	20000670 	.word	0x20000670
 8009690:	20000694 	.word	0x20000694

08009694 <Motor_DutyCycle_RF>:

void Motor_DutyCycle_RF(int16_t DutyCycle_RF){
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	4603      	mov	r3, r0
 800969c:	80fb      	strh	r3, [r7, #6]
	DutyCycle_RF = -DutyCycle_RF;
 800969e:	88fb      	ldrh	r3, [r7, #6]
 80096a0:	425b      	negs	r3, r3
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_RF > DutyCycle_RF_MAX) {
 80096a6:	4b26      	ldr	r3, [pc, #152]	@ (8009740 <Motor_DutyCycle_RF+0xac>)
 80096a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80096ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	dd03      	ble.n	80096bc <Motor_DutyCycle_RF+0x28>
		DutyCycle_RF = DutyCycle_RF_MAX;
 80096b4:	4b22      	ldr	r3, [pc, #136]	@ (8009740 <Motor_DutyCycle_RF+0xac>)
 80096b6:	881b      	ldrh	r3, [r3, #0]
 80096b8:	80fb      	strh	r3, [r7, #6]
 80096ba:	e00e      	b.n	80096da <Motor_DutyCycle_RF+0x46>
	} else if (DutyCycle_RF < -DutyCycle_RF_MAX) {
 80096bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80096c0:	4b1f      	ldr	r3, [pc, #124]	@ (8009740 <Motor_DutyCycle_RF+0xac>)
 80096c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80096c6:	425b      	negs	r3, r3
 80096c8:	429a      	cmp	r2, r3
 80096ca:	da06      	bge.n	80096da <Motor_DutyCycle_RF+0x46>
		DutyCycle_RF = -DutyCycle_RF_MAX;
 80096cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009740 <Motor_DutyCycle_RF+0xac>)
 80096ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	425b      	negs	r3, r3
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	80fb      	strh	r3, [r7, #6]
	}

	RF_PWM->Instance->CCR1 = (DutyCycle_RF > 0) ? (int16_t)DutyCycle_RF : (DutyCycle_RF_MAX + (int16_t)DutyCycle_RF);
 80096da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	dd02      	ble.n	80096e8 <Motor_DutyCycle_RF+0x54>
 80096e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80096e6:	e006      	b.n	80096f6 <Motor_DutyCycle_RF+0x62>
 80096e8:	4b15      	ldr	r3, [pc, #84]	@ (8009740 <Motor_DutyCycle_RF+0xac>)
 80096ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80096ee:	461a      	mov	r2, r3
 80096f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80096f4:	4413      	add	r3, r2
 80096f6:	4a13      	ldr	r2, [pc, #76]	@ (8009744 <Motor_DutyCycle_RF+0xb0>)
 80096f8:	6812      	ldr	r2, [r2, #0]
 80096fa:	6812      	ldr	r2, [r2, #0]
 80096fc:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_RF , (DutyCycle_RF < 0) ? 1 : 0);
 80096fe:	4b12      	ldr	r3, [pc, #72]	@ (8009748 <Motor_DutyCycle_RF+0xb4>)
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009706:	13db      	asrs	r3, r3, #15
 8009708:	b21b      	sxth	r3, r3
 800970a:	b2db      	uxtb	r3, r3
 800970c:	f003 0301 	and.w	r3, r3, #1
 8009710:	b2db      	uxtb	r3, r3
 8009712:	4619      	mov	r1, r3
 8009714:	4610      	mov	r0, r2
 8009716:	f000 fae9 	bl	8009cec <digitalWrite>

	if(DutyCycle_RF == 0){
 800971a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10a      	bne.n	8009738 <Motor_DutyCycle_RF+0xa4>
	   RF_PWM->Instance->CCR1 = 0;
 8009722:	4b08      	ldr	r3, [pc, #32]	@ (8009744 <Motor_DutyCycle_RF+0xb0>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2200      	movs	r2, #0
 800972a:	635a      	str	r2, [r3, #52]	@ 0x34
	   digitalWrite(IN_RF ,0);
 800972c:	4b06      	ldr	r3, [pc, #24]	@ (8009748 <Motor_DutyCycle_RF+0xb4>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2100      	movs	r1, #0
 8009732:	4618      	mov	r0, r3
 8009734:	f000 fada 	bl	8009cec <digitalWrite>
	}
}
 8009738:	bf00      	nop
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	20000688 	.word	0x20000688
 8009744:	20000674 	.word	0x20000674
 8009748:	20000698 	.word	0x20000698

0800974c <Motor_DutyCycle_RB>:

void Motor_DutyCycle_RB(int16_t DutyCycle_RB){
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	4603      	mov	r3, r0
 8009754:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_RB > DutyCycle_RB_MAX) {
 8009756:	4b26      	ldr	r3, [pc, #152]	@ (80097f0 <Motor_DutyCycle_RB+0xa4>)
 8009758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800975c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009760:	429a      	cmp	r2, r3
 8009762:	dd03      	ble.n	800976c <Motor_DutyCycle_RB+0x20>
		DutyCycle_RB = DutyCycle_RB_MAX;
 8009764:	4b22      	ldr	r3, [pc, #136]	@ (80097f0 <Motor_DutyCycle_RB+0xa4>)
 8009766:	881b      	ldrh	r3, [r3, #0]
 8009768:	80fb      	strh	r3, [r7, #6]
 800976a:	e00e      	b.n	800978a <Motor_DutyCycle_RB+0x3e>
	} else if (DutyCycle_RB < -DutyCycle_RB_MAX) {
 800976c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009770:	4b1f      	ldr	r3, [pc, #124]	@ (80097f0 <Motor_DutyCycle_RB+0xa4>)
 8009772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009776:	425b      	negs	r3, r3
 8009778:	429a      	cmp	r2, r3
 800977a:	da06      	bge.n	800978a <Motor_DutyCycle_RB+0x3e>
	    DutyCycle_RB = -DutyCycle_RB_MAX;
 800977c:	4b1c      	ldr	r3, [pc, #112]	@ (80097f0 <Motor_DutyCycle_RB+0xa4>)
 800977e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009782:	b29b      	uxth	r3, r3
 8009784:	425b      	negs	r3, r3
 8009786:	b29b      	uxth	r3, r3
 8009788:	80fb      	strh	r3, [r7, #6]
	}

	RB_PWM->Instance->CCR2 = (DutyCycle_RB > 0) ? (int16_t)DutyCycle_RB : (DutyCycle_RB_MAX + (int16_t)DutyCycle_RB);
 800978a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800978e:	2b00      	cmp	r3, #0
 8009790:	dd02      	ble.n	8009798 <Motor_DutyCycle_RB+0x4c>
 8009792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009796:	e006      	b.n	80097a6 <Motor_DutyCycle_RB+0x5a>
 8009798:	4b15      	ldr	r3, [pc, #84]	@ (80097f0 <Motor_DutyCycle_RB+0xa4>)
 800979a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800979e:	461a      	mov	r2, r3
 80097a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097a4:	4413      	add	r3, r2
 80097a6:	4a13      	ldr	r2, [pc, #76]	@ (80097f4 <Motor_DutyCycle_RB+0xa8>)
 80097a8:	6812      	ldr	r2, [r2, #0]
 80097aa:	6812      	ldr	r2, [r2, #0]
 80097ac:	6393      	str	r3, [r2, #56]	@ 0x38

	digitalWrite(IN_RB , (DutyCycle_RB < 0) ? 1 : 0);
 80097ae:	4b12      	ldr	r3, [pc, #72]	@ (80097f8 <Motor_DutyCycle_RB+0xac>)
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097b6:	13db      	asrs	r3, r3, #15
 80097b8:	b21b      	sxth	r3, r3
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	f003 0301 	and.w	r3, r3, #1
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	4619      	mov	r1, r3
 80097c4:	4610      	mov	r0, r2
 80097c6:	f000 fa91 	bl	8009cec <digitalWrite>

	if(DutyCycle_RB == 0){
 80097ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10a      	bne.n	80097e8 <Motor_DutyCycle_RB+0x9c>
	    RB_PWM->Instance->CCR2 = 0;
 80097d2:	4b08      	ldr	r3, [pc, #32]	@ (80097f4 <Motor_DutyCycle_RB+0xa8>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2200      	movs	r2, #0
 80097da:	639a      	str	r2, [r3, #56]	@ 0x38
		digitalWrite(IN_RB ,0);
 80097dc:	4b06      	ldr	r3, [pc, #24]	@ (80097f8 <Motor_DutyCycle_RB+0xac>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2100      	movs	r1, #0
 80097e2:	4618      	mov	r0, r3
 80097e4:	f000 fa82 	bl	8009cec <digitalWrite>
	}
}
 80097e8:	bf00      	nop
 80097ea:	3708      	adds	r7, #8
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	2000068a 	.word	0x2000068a
 80097f4:	20000678 	.word	0x20000678
 80097f8:	2000069c 	.word	0x2000069c

080097fc <Motor_DutyCycle_EXTRA1>:

void Motor_DutyCycle_EXTRA1(int16_t DutyCycle_EXTRA1){
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	4603      	mov	r3, r0
 8009804:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_EXTRA1 > DutyCycle_EXTRA1_MAX) {
 8009806:	4b26      	ldr	r3, [pc, #152]	@ (80098a0 <Motor_DutyCycle_EXTRA1+0xa4>)
 8009808:	f9b3 3000 	ldrsh.w	r3, [r3]
 800980c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009810:	429a      	cmp	r2, r3
 8009812:	dd03      	ble.n	800981c <Motor_DutyCycle_EXTRA1+0x20>
		DutyCycle_EXTRA1 = DutyCycle_EXTRA1_MAX;
 8009814:	4b22      	ldr	r3, [pc, #136]	@ (80098a0 <Motor_DutyCycle_EXTRA1+0xa4>)
 8009816:	881b      	ldrh	r3, [r3, #0]
 8009818:	80fb      	strh	r3, [r7, #6]
 800981a:	e00e      	b.n	800983a <Motor_DutyCycle_EXTRA1+0x3e>
	} else if (DutyCycle_EXTRA1 < -DutyCycle_EXTRA1_MAX) {
 800981c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009820:	4b1f      	ldr	r3, [pc, #124]	@ (80098a0 <Motor_DutyCycle_EXTRA1+0xa4>)
 8009822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009826:	425b      	negs	r3, r3
 8009828:	429a      	cmp	r2, r3
 800982a:	da06      	bge.n	800983a <Motor_DutyCycle_EXTRA1+0x3e>
		DutyCycle_EXTRA1 = -DutyCycle_EXTRA1_MAX;
 800982c:	4b1c      	ldr	r3, [pc, #112]	@ (80098a0 <Motor_DutyCycle_EXTRA1+0xa4>)
 800982e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009832:	b29b      	uxth	r3, r3
 8009834:	425b      	negs	r3, r3
 8009836:	b29b      	uxth	r3, r3
 8009838:	80fb      	strh	r3, [r7, #6]
	}

	EXTRA1_PWM->Instance->CCR1 = (DutyCycle_EXTRA1 > 0) ? (int16_t)DutyCycle_EXTRA1 : (DutyCycle_EXTRA1_MAX + (int16_t)DutyCycle_EXTRA1);
 800983a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800983e:	2b00      	cmp	r3, #0
 8009840:	dd02      	ble.n	8009848 <Motor_DutyCycle_EXTRA1+0x4c>
 8009842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009846:	e006      	b.n	8009856 <Motor_DutyCycle_EXTRA1+0x5a>
 8009848:	4b15      	ldr	r3, [pc, #84]	@ (80098a0 <Motor_DutyCycle_EXTRA1+0xa4>)
 800984a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800984e:	461a      	mov	r2, r3
 8009850:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009854:	4413      	add	r3, r2
 8009856:	4a13      	ldr	r2, [pc, #76]	@ (80098a4 <Motor_DutyCycle_EXTRA1+0xa8>)
 8009858:	6812      	ldr	r2, [r2, #0]
 800985a:	6812      	ldr	r2, [r2, #0]
 800985c:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_EXTRA1 , (DutyCycle_EXTRA1 < 0) ? 1 : 0);
 800985e:	4b12      	ldr	r3, [pc, #72]	@ (80098a8 <Motor_DutyCycle_EXTRA1+0xac>)
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009866:	13db      	asrs	r3, r3, #15
 8009868:	b21b      	sxth	r3, r3
 800986a:	b2db      	uxtb	r3, r3
 800986c:	f003 0301 	and.w	r3, r3, #1
 8009870:	b2db      	uxtb	r3, r3
 8009872:	4619      	mov	r1, r3
 8009874:	4610      	mov	r0, r2
 8009876:	f000 fa39 	bl	8009cec <digitalWrite>

	if(DutyCycle_EXTRA1 == 0){
 800987a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d10a      	bne.n	8009898 <Motor_DutyCycle_EXTRA1+0x9c>
		EXTRA1_PWM->Instance->CCR1 = 0;
 8009882:	4b08      	ldr	r3, [pc, #32]	@ (80098a4 <Motor_DutyCycle_EXTRA1+0xa8>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2200      	movs	r2, #0
 800988a:	635a      	str	r2, [r3, #52]	@ 0x34
	    digitalWrite(IN_EXTRA1 ,0);
 800988c:	4b06      	ldr	r3, [pc, #24]	@ (80098a8 <Motor_DutyCycle_EXTRA1+0xac>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2100      	movs	r1, #0
 8009892:	4618      	mov	r0, r3
 8009894:	f000 fa2a 	bl	8009cec <digitalWrite>
	}
}
 8009898:	bf00      	nop
 800989a:	3708      	adds	r7, #8
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	2000068c 	.word	0x2000068c
 80098a4:	2000067c 	.word	0x2000067c
 80098a8:	200006a0 	.word	0x200006a0

080098ac <Motor_DutyCycle_EXTRA2>:

void Motor_DutyCycle_EXTRA2(int16_t DutyCycle_EXTRA2){
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	4603      	mov	r3, r0
 80098b4:	80fb      	strh	r3, [r7, #6]
	if (DutyCycle_EXTRA2 > DutyCycle_EXTRA2_MAX) {
 80098b6:	4b26      	ldr	r3, [pc, #152]	@ (8009950 <Motor_DutyCycle_EXTRA2+0xa4>)
 80098b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	dd03      	ble.n	80098cc <Motor_DutyCycle_EXTRA2+0x20>
		DutyCycle_EXTRA2 = DutyCycle_EXTRA2_MAX;
 80098c4:	4b22      	ldr	r3, [pc, #136]	@ (8009950 <Motor_DutyCycle_EXTRA2+0xa4>)
 80098c6:	881b      	ldrh	r3, [r3, #0]
 80098c8:	80fb      	strh	r3, [r7, #6]
 80098ca:	e00e      	b.n	80098ea <Motor_DutyCycle_EXTRA2+0x3e>
	} else if (DutyCycle_EXTRA2 < -DutyCycle_EXTRA2_MAX) {
 80098cc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80098d0:	4b1f      	ldr	r3, [pc, #124]	@ (8009950 <Motor_DutyCycle_EXTRA2+0xa4>)
 80098d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098d6:	425b      	negs	r3, r3
 80098d8:	429a      	cmp	r2, r3
 80098da:	da06      	bge.n	80098ea <Motor_DutyCycle_EXTRA2+0x3e>
		DutyCycle_EXTRA2 = -DutyCycle_EXTRA2_MAX;
 80098dc:	4b1c      	ldr	r3, [pc, #112]	@ (8009950 <Motor_DutyCycle_EXTRA2+0xa4>)
 80098de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	425b      	negs	r3, r3
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	80fb      	strh	r3, [r7, #6]
	}

	EXTRA2_PWM->Instance->CCR1 = (DutyCycle_EXTRA2 > 0) ? (int16_t)DutyCycle_EXTRA2 : (DutyCycle_EXTRA2_MAX + (int16_t)DutyCycle_EXTRA2);
 80098ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	dd02      	ble.n	80098f8 <Motor_DutyCycle_EXTRA2+0x4c>
 80098f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80098f6:	e006      	b.n	8009906 <Motor_DutyCycle_EXTRA2+0x5a>
 80098f8:	4b15      	ldr	r3, [pc, #84]	@ (8009950 <Motor_DutyCycle_EXTRA2+0xa4>)
 80098fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098fe:	461a      	mov	r2, r3
 8009900:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009904:	4413      	add	r3, r2
 8009906:	4a13      	ldr	r2, [pc, #76]	@ (8009954 <Motor_DutyCycle_EXTRA2+0xa8>)
 8009908:	6812      	ldr	r2, [r2, #0]
 800990a:	6812      	ldr	r2, [r2, #0]
 800990c:	6353      	str	r3, [r2, #52]	@ 0x34

	digitalWrite(IN_EXTRA2 , (DutyCycle_EXTRA2 < 0) ? 1 : 0);
 800990e:	4b12      	ldr	r3, [pc, #72]	@ (8009958 <Motor_DutyCycle_EXTRA2+0xac>)
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009916:	13db      	asrs	r3, r3, #15
 8009918:	b21b      	sxth	r3, r3
 800991a:	b2db      	uxtb	r3, r3
 800991c:	f003 0301 	and.w	r3, r3, #1
 8009920:	b2db      	uxtb	r3, r3
 8009922:	4619      	mov	r1, r3
 8009924:	4610      	mov	r0, r2
 8009926:	f000 f9e1 	bl	8009cec <digitalWrite>

	if(DutyCycle_EXTRA2 == 0){
 800992a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d10a      	bne.n	8009948 <Motor_DutyCycle_EXTRA2+0x9c>
	     EXTRA2_PWM->Instance->CCR1 = 0;
 8009932:	4b08      	ldr	r3, [pc, #32]	@ (8009954 <Motor_DutyCycle_EXTRA2+0xa8>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	2200      	movs	r2, #0
 800993a:	635a      	str	r2, [r3, #52]	@ 0x34
		 digitalWrite(IN_EXTRA2 ,0);
 800993c:	4b06      	ldr	r3, [pc, #24]	@ (8009958 <Motor_DutyCycle_EXTRA2+0xac>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2100      	movs	r1, #0
 8009942:	4618      	mov	r0, r3
 8009944:	f000 f9d2 	bl	8009cec <digitalWrite>
	}
}
 8009948:	bf00      	nop
 800994a:	3708      	adds	r7, #8
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	2000068e 	.word	0x2000068e
 8009954:	20000680 	.word	0x20000680
 8009958:	200006a4 	.word	0x200006a4

0800995c <Motor_Speed_LF>:

int16_t Duty_Cycle[6] = {0 ,0 ,0 ,0 ,0 ,0}; //LF ,LB ,RF ,RB ,EXTRA1 ,EXTRA2

float Motor_Speed_LF(int16_t RPM_INPUT ,float RPM_LF){
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	4603      	mov	r3, r0
 8009964:	ed87 0a00 	vstr	s0, [r7]
 8009968:	80fb      	strh	r3, [r7, #6]
	if (RPM_LF > max_speed[0]) {
 800996a:	4b30      	ldr	r3, [pc, #192]	@ (8009a2c <Motor_Speed_LF+0xd0>)
 800996c:	edd3 7a00 	vldr	s15, [r3]
 8009970:	ed97 7a00 	vldr	s14, [r7]
 8009974:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800997c:	dd03      	ble.n	8009986 <Motor_Speed_LF+0x2a>
	   RPM_LF = max_speed[0];
 800997e:	4b2b      	ldr	r3, [pc, #172]	@ (8009a2c <Motor_Speed_LF+0xd0>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	603b      	str	r3, [r7, #0]
 8009984:	e012      	b.n	80099ac <Motor_Speed_LF+0x50>
	} else if (RPM_LF < -max_speed[0]) {
 8009986:	4b29      	ldr	r3, [pc, #164]	@ (8009a2c <Motor_Speed_LF+0xd0>)
 8009988:	edd3 7a00 	vldr	s15, [r3]
 800998c:	eef1 7a67 	vneg.f32	s15, s15
 8009990:	ed97 7a00 	vldr	s14, [r7]
 8009994:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800999c:	d506      	bpl.n	80099ac <Motor_Speed_LF+0x50>
	   RPM_LF = -max_speed[0];
 800999e:	4b23      	ldr	r3, [pc, #140]	@ (8009a2c <Motor_Speed_LF+0xd0>)
 80099a0:	edd3 7a00 	vldr	s15, [r3]
 80099a4:	eef1 7a67 	vneg.f32	s15, s15
 80099a8:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_LF , 0);
 80099ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80099b0:	ee07 3a90 	vmov	s15, r3
 80099b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80099b8:	edd7 7a00 	vldr	s15, [r7]
 80099bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80099c0:	ee17 3a90 	vmov	r3, s15
 80099c4:	b21b      	sxth	r3, r3
 80099c6:	2100      	movs	r1, #0
 80099c8:	4618      	mov	r0, r3
 80099ca:	eeb0 0a47 	vmov.f32	s0, s14
 80099ce:	f7ff fd03 	bl	80093d8 <PID_Speed>

	Duty_Cycle[0] = (int16_t)((Output_PID[0] / ((float)(max_speed[0] - min_speed[0]))) * DutyCycle_LF_MAX);
 80099d2:	4b17      	ldr	r3, [pc, #92]	@ (8009a30 <Motor_Speed_LF+0xd4>)
 80099d4:	edd3 6a00 	vldr	s13, [r3]
 80099d8:	4b14      	ldr	r3, [pc, #80]	@ (8009a2c <Motor_Speed_LF+0xd0>)
 80099da:	ed93 7a00 	vldr	s14, [r3]
 80099de:	4b15      	ldr	r3, [pc, #84]	@ (8009a34 <Motor_Speed_LF+0xd8>)
 80099e0:	edd3 7a00 	vldr	s15, [r3]
 80099e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ec:	4b12      	ldr	r3, [pc, #72]	@ (8009a38 <Motor_Speed_LF+0xdc>)
 80099ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099f2:	ee07 3a90 	vmov	s15, r3
 80099f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80099fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009a02:	ee17 3a90 	vmov	r3, s15
 8009a06:	b21a      	sxth	r2, r3
 8009a08:	4b0c      	ldr	r3, [pc, #48]	@ (8009a3c <Motor_Speed_LF+0xe0>)
 8009a0a:	801a      	strh	r2, [r3, #0]

	Motor_DutyCycle_LF(Duty_Cycle[0]);
 8009a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8009a3c <Motor_Speed_LF+0xe0>)
 8009a0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7ff fd8a 	bl	800952c <Motor_DutyCycle_LF>

//	return _RPM[0];
	return Output_PID[0];
 8009a18:	4b05      	ldr	r3, [pc, #20]	@ (8009a30 <Motor_Speed_LF+0xd4>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	ee07 3a90 	vmov	s15, r3
}
 8009a20:	eeb0 0a67 	vmov.f32	s0, s15
 8009a24:	3708      	adds	r7, #8
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	20000738 	.word	0x20000738
 8009a30:	200007c8 	.word	0x200007c8
 8009a34:	20000720 	.word	0x20000720
 8009a38:	20000684 	.word	0x20000684
 8009a3c:	200007e0 	.word	0x200007e0

08009a40 <Motor_Speed_LB>:

float Motor_Speed_LB(int16_t RPM_INPUT ,float RPM_LB){
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	4603      	mov	r3, r0
 8009a48:	ed87 0a00 	vstr	s0, [r7]
 8009a4c:	80fb      	strh	r3, [r7, #6]
	if (RPM_LB > max_speed[1]) {
 8009a4e:	4b30      	ldr	r3, [pc, #192]	@ (8009b10 <Motor_Speed_LB+0xd0>)
 8009a50:	edd3 7a01 	vldr	s15, [r3, #4]
 8009a54:	ed97 7a00 	vldr	s14, [r7]
 8009a58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a60:	dd03      	ble.n	8009a6a <Motor_Speed_LB+0x2a>
	   RPM_LB = max_speed[1];
 8009a62:	4b2b      	ldr	r3, [pc, #172]	@ (8009b10 <Motor_Speed_LB+0xd0>)
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	603b      	str	r3, [r7, #0]
 8009a68:	e012      	b.n	8009a90 <Motor_Speed_LB+0x50>
	} else if (RPM_LB < -max_speed[1]) {
 8009a6a:	4b29      	ldr	r3, [pc, #164]	@ (8009b10 <Motor_Speed_LB+0xd0>)
 8009a6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8009a70:	eef1 7a67 	vneg.f32	s15, s15
 8009a74:	ed97 7a00 	vldr	s14, [r7]
 8009a78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a80:	d506      	bpl.n	8009a90 <Motor_Speed_LB+0x50>
	   RPM_LB = -max_speed[1];
 8009a82:	4b23      	ldr	r3, [pc, #140]	@ (8009b10 <Motor_Speed_LB+0xd0>)
 8009a84:	edd3 7a01 	vldr	s15, [r3, #4]
 8009a88:	eef1 7a67 	vneg.f32	s15, s15
 8009a8c:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_LB ,1);
 8009a90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a94:	ee07 3a90 	vmov	s15, r3
 8009a98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009a9c:	edd7 7a00 	vldr	s15, [r7]
 8009aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009aa4:	ee17 3a90 	vmov	r3, s15
 8009aa8:	b21b      	sxth	r3, r3
 8009aaa:	2101      	movs	r1, #1
 8009aac:	4618      	mov	r0, r3
 8009aae:	eeb0 0a47 	vmov.f32	s0, s14
 8009ab2:	f7ff fc91 	bl	80093d8 <PID_Speed>

	Duty_Cycle[1] = (int16_t)((Output_PID[1]/((float)(max_speed[1] - min_speed[1]))) * DutyCycle_LB_MAX);
 8009ab6:	4b17      	ldr	r3, [pc, #92]	@ (8009b14 <Motor_Speed_LB+0xd4>)
 8009ab8:	edd3 6a01 	vldr	s13, [r3, #4]
 8009abc:	4b14      	ldr	r3, [pc, #80]	@ (8009b10 <Motor_Speed_LB+0xd0>)
 8009abe:	ed93 7a01 	vldr	s14, [r3, #4]
 8009ac2:	4b15      	ldr	r3, [pc, #84]	@ (8009b18 <Motor_Speed_LB+0xd8>)
 8009ac4:	edd3 7a01 	vldr	s15, [r3, #4]
 8009ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009acc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ad0:	4b12      	ldr	r3, [pc, #72]	@ (8009b1c <Motor_Speed_LB+0xdc>)
 8009ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ad6:	ee07 3a90 	vmov	s15, r3
 8009ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ae2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009ae6:	ee17 3a90 	vmov	r3, s15
 8009aea:	b21a      	sxth	r2, r3
 8009aec:	4b0c      	ldr	r3, [pc, #48]	@ (8009b20 <Motor_Speed_LB+0xe0>)
 8009aee:	805a      	strh	r2, [r3, #2]

	Motor_DutyCycle_LB(Duty_Cycle[1]);
 8009af0:	4b0b      	ldr	r3, [pc, #44]	@ (8009b20 <Motor_Speed_LB+0xe0>)
 8009af2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7ff fd70 	bl	80095dc <Motor_DutyCycle_LB>

//	return _RPM[1];
	return Output_PID[1];
 8009afc:	4b05      	ldr	r3, [pc, #20]	@ (8009b14 <Motor_Speed_LB+0xd4>)
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	ee07 3a90 	vmov	s15, r3
}
 8009b04:	eeb0 0a67 	vmov.f32	s0, s15
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop
 8009b10:	20000738 	.word	0x20000738
 8009b14:	200007c8 	.word	0x200007c8
 8009b18:	20000720 	.word	0x20000720
 8009b1c:	20000686 	.word	0x20000686
 8009b20:	200007e0 	.word	0x200007e0

08009b24 <Motor_Speed_RF>:

float Motor_Speed_RF(int16_t RPM_INPUT ,float RPM_RF){
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	ed87 0a00 	vstr	s0, [r7]
 8009b30:	80fb      	strh	r3, [r7, #6]
	if (RPM_RF > max_speed[2]) {
 8009b32:	4b30      	ldr	r3, [pc, #192]	@ (8009bf4 <Motor_Speed_RF+0xd0>)
 8009b34:	edd3 7a02 	vldr	s15, [r3, #8]
 8009b38:	ed97 7a00 	vldr	s14, [r7]
 8009b3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b44:	dd03      	ble.n	8009b4e <Motor_Speed_RF+0x2a>
	   RPM_RF = max_speed[2];
 8009b46:	4b2b      	ldr	r3, [pc, #172]	@ (8009bf4 <Motor_Speed_RF+0xd0>)
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	603b      	str	r3, [r7, #0]
 8009b4c:	e012      	b.n	8009b74 <Motor_Speed_RF+0x50>
	} else if (RPM_RF < -max_speed[2]) {
 8009b4e:	4b29      	ldr	r3, [pc, #164]	@ (8009bf4 <Motor_Speed_RF+0xd0>)
 8009b50:	edd3 7a02 	vldr	s15, [r3, #8]
 8009b54:	eef1 7a67 	vneg.f32	s15, s15
 8009b58:	ed97 7a00 	vldr	s14, [r7]
 8009b5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b64:	d506      	bpl.n	8009b74 <Motor_Speed_RF+0x50>
	   RPM_RF = -max_speed[2];
 8009b66:	4b23      	ldr	r3, [pc, #140]	@ (8009bf4 <Motor_Speed_RF+0xd0>)
 8009b68:	edd3 7a02 	vldr	s15, [r3, #8]
 8009b6c:	eef1 7a67 	vneg.f32	s15, s15
 8009b70:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_RF ,2);
 8009b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b78:	ee07 3a90 	vmov	s15, r3
 8009b7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009b80:	edd7 7a00 	vldr	s15, [r7]
 8009b84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009b88:	ee17 3a90 	vmov	r3, s15
 8009b8c:	b21b      	sxth	r3, r3
 8009b8e:	2102      	movs	r1, #2
 8009b90:	4618      	mov	r0, r3
 8009b92:	eeb0 0a47 	vmov.f32	s0, s14
 8009b96:	f7ff fc1f 	bl	80093d8 <PID_Speed>

	Duty_Cycle[2] = (int16_t)((Output_PID[2]/((float)(max_speed[2] - min_speed[2]))) * DutyCycle_RF_MAX);
 8009b9a:	4b17      	ldr	r3, [pc, #92]	@ (8009bf8 <Motor_Speed_RF+0xd4>)
 8009b9c:	edd3 6a02 	vldr	s13, [r3, #8]
 8009ba0:	4b14      	ldr	r3, [pc, #80]	@ (8009bf4 <Motor_Speed_RF+0xd0>)
 8009ba2:	ed93 7a02 	vldr	s14, [r3, #8]
 8009ba6:	4b15      	ldr	r3, [pc, #84]	@ (8009bfc <Motor_Speed_RF+0xd8>)
 8009ba8:	edd3 7a02 	vldr	s15, [r3, #8]
 8009bac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bb4:	4b12      	ldr	r3, [pc, #72]	@ (8009c00 <Motor_Speed_RF+0xdc>)
 8009bb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009bba:	ee07 3a90 	vmov	s15, r3
 8009bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009bca:	ee17 3a90 	vmov	r3, s15
 8009bce:	b21a      	sxth	r2, r3
 8009bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8009c04 <Motor_Speed_RF+0xe0>)
 8009bd2:	809a      	strh	r2, [r3, #4]

	Motor_DutyCycle_RF(Duty_Cycle[2]);
 8009bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8009c04 <Motor_Speed_RF+0xe0>)
 8009bd6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7ff fd5a 	bl	8009694 <Motor_DutyCycle_RF>

//	return _RPM[2];
	return Output_PID[2];
 8009be0:	4b05      	ldr	r3, [pc, #20]	@ (8009bf8 <Motor_Speed_RF+0xd4>)
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	ee07 3a90 	vmov	s15, r3
}
 8009be8:	eeb0 0a67 	vmov.f32	s0, s15
 8009bec:	3708      	adds	r7, #8
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	20000738 	.word	0x20000738
 8009bf8:	200007c8 	.word	0x200007c8
 8009bfc:	20000720 	.word	0x20000720
 8009c00:	20000688 	.word	0x20000688
 8009c04:	200007e0 	.word	0x200007e0

08009c08 <Motor_Speed_RB>:

float Motor_Speed_RB(int16_t RPM_INPUT ,float RPM_RB){
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	ed87 0a00 	vstr	s0, [r7]
 8009c14:	80fb      	strh	r3, [r7, #6]
	if (RPM_RB > max_speed[3]) {
 8009c16:	4b30      	ldr	r3, [pc, #192]	@ (8009cd8 <Motor_Speed_RB+0xd0>)
 8009c18:	edd3 7a03 	vldr	s15, [r3, #12]
 8009c1c:	ed97 7a00 	vldr	s14, [r7]
 8009c20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c28:	dd03      	ble.n	8009c32 <Motor_Speed_RB+0x2a>
		RPM_RB = max_speed[3];
 8009c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8009cd8 <Motor_Speed_RB+0xd0>)
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	603b      	str	r3, [r7, #0]
 8009c30:	e012      	b.n	8009c58 <Motor_Speed_RB+0x50>
	} else if (RPM_RB < -max_speed[3]) {
 8009c32:	4b29      	ldr	r3, [pc, #164]	@ (8009cd8 <Motor_Speed_RB+0xd0>)
 8009c34:	edd3 7a03 	vldr	s15, [r3, #12]
 8009c38:	eef1 7a67 	vneg.f32	s15, s15
 8009c3c:	ed97 7a00 	vldr	s14, [r7]
 8009c40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c48:	d506      	bpl.n	8009c58 <Motor_Speed_RB+0x50>
		RPM_RB = -max_speed[3];
 8009c4a:	4b23      	ldr	r3, [pc, #140]	@ (8009cd8 <Motor_Speed_RB+0xd0>)
 8009c4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8009c50:	eef1 7a67 	vneg.f32	s15, s15
 8009c54:	edc7 7a00 	vstr	s15, [r7]
	}

	PID_Speed(RPM_INPUT ,RPM_RB ,3);
 8009c58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c5c:	ee07 3a90 	vmov	s15, r3
 8009c60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009c64:	edd7 7a00 	vldr	s15, [r7]
 8009c68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009c6c:	ee17 3a90 	vmov	r3, s15
 8009c70:	b21b      	sxth	r3, r3
 8009c72:	2103      	movs	r1, #3
 8009c74:	4618      	mov	r0, r3
 8009c76:	eeb0 0a47 	vmov.f32	s0, s14
 8009c7a:	f7ff fbad 	bl	80093d8 <PID_Speed>

	Duty_Cycle[3] = (int16_t)((Output_PID[3]/((float)(max_speed[3] - min_speed[3]))) * DutyCycle_RB_MAX);
 8009c7e:	4b17      	ldr	r3, [pc, #92]	@ (8009cdc <Motor_Speed_RB+0xd4>)
 8009c80:	edd3 6a03 	vldr	s13, [r3, #12]
 8009c84:	4b14      	ldr	r3, [pc, #80]	@ (8009cd8 <Motor_Speed_RB+0xd0>)
 8009c86:	ed93 7a03 	vldr	s14, [r3, #12]
 8009c8a:	4b15      	ldr	r3, [pc, #84]	@ (8009ce0 <Motor_Speed_RB+0xd8>)
 8009c8c:	edd3 7a03 	vldr	s15, [r3, #12]
 8009c90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c98:	4b12      	ldr	r3, [pc, #72]	@ (8009ce4 <Motor_Speed_RB+0xdc>)
 8009c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c9e:	ee07 3a90 	vmov	s15, r3
 8009ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009caa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009cae:	ee17 3a90 	vmov	r3, s15
 8009cb2:	b21a      	sxth	r2, r3
 8009cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8009ce8 <Motor_Speed_RB+0xe0>)
 8009cb6:	80da      	strh	r2, [r3, #6]

	Motor_DutyCycle_RB(Duty_Cycle[3]);
 8009cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8009ce8 <Motor_Speed_RB+0xe0>)
 8009cba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7ff fd44 	bl	800974c <Motor_DutyCycle_RB>

//	return _RPM[3];
	return Output_PID[3];
 8009cc4:	4b05      	ldr	r3, [pc, #20]	@ (8009cdc <Motor_Speed_RB+0xd4>)
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	ee07 3a90 	vmov	s15, r3
}
 8009ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8009cd0:	3708      	adds	r7, #8
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	20000738 	.word	0x20000738
 8009cdc:	200007c8 	.word	0x200007c8
 8009ce0:	20000720 	.word	0x20000720
 8009ce4:	2000068a 	.word	0x2000068a
 8009ce8:	200007e0 	.word	0x200007e0

08009cec <digitalWrite>:

//	return _RPM[5];
	return Output_PID[5];
}

void digitalWrite(char* _PIN , uint8_t vlue){
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	70fb      	strb	r3, [r7, #3]
	uint8_t PIN = (_PIN[2] - '0') * 10 + (_PIN[3] - '0');
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	3302      	adds	r3, #2
 8009cfc:	781b      	ldrb	r3, [r3, #0]
 8009cfe:	3b30      	subs	r3, #48	@ 0x30
 8009d00:	b2db      	uxtb	r3, r3
 8009d02:	461a      	mov	r2, r3
 8009d04:	0092      	lsls	r2, r2, #2
 8009d06:	4413      	add	r3, r2
 8009d08:	005b      	lsls	r3, r3, #1
 8009d0a:	b2da      	uxtb	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	3303      	adds	r3, #3
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	4413      	add	r3, r2
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	3b30      	subs	r3, #48	@ 0x30
 8009d18:	73fb      	strb	r3, [r7, #15]

	if (_PIN[1] == 'A') {
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	2b41      	cmp	r3, #65	@ 0x41
 8009d22:	f040 809f 	bne.w	8009e64 <digitalWrite+0x178>
	        switch (PIN) {
 8009d26:	7bfb      	ldrb	r3, [r7, #15]
 8009d28:	2b0f      	cmp	r3, #15
 8009d2a:	f200 833f 	bhi.w	800a3ac <digitalWrite+0x6c0>
 8009d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8009d34 <digitalWrite+0x48>)
 8009d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d34:	08009d75 	.word	0x08009d75
 8009d38:	08009d83 	.word	0x08009d83
 8009d3c:	08009d91 	.word	0x08009d91
 8009d40:	08009d9f 	.word	0x08009d9f
 8009d44:	08009dad 	.word	0x08009dad
 8009d48:	08009dbb 	.word	0x08009dbb
 8009d4c:	08009dc9 	.word	0x08009dc9
 8009d50:	08009dd7 	.word	0x08009dd7
 8009d54:	08009de5 	.word	0x08009de5
 8009d58:	08009df5 	.word	0x08009df5
 8009d5c:	08009e05 	.word	0x08009e05
 8009d60:	08009e15 	.word	0x08009e15
 8009d64:	08009e25 	.word	0x08009e25
 8009d68:	08009e35 	.word	0x08009e35
 8009d6c:	08009e45 	.word	0x08009e45
 8009d70:	08009e55 	.word	0x08009e55
	            case 0: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, vlue); break;
 8009d74:	78fb      	ldrb	r3, [r7, #3]
 8009d76:	461a      	mov	r2, r3
 8009d78:	2101      	movs	r1, #1
 8009d7a:	48bd      	ldr	r0, [pc, #756]	@ (800a070 <digitalWrite+0x384>)
 8009d7c:	f7f8 ffd8 	bl	8002d30 <HAL_GPIO_WritePin>
 8009d80:	e314      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, vlue); break;
 8009d82:	78fb      	ldrb	r3, [r7, #3]
 8009d84:	461a      	mov	r2, r3
 8009d86:	2102      	movs	r1, #2
 8009d88:	48b9      	ldr	r0, [pc, #740]	@ (800a070 <digitalWrite+0x384>)
 8009d8a:	f7f8 ffd1 	bl	8002d30 <HAL_GPIO_WritePin>
 8009d8e:	e30d      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, vlue); break;
 8009d90:	78fb      	ldrb	r3, [r7, #3]
 8009d92:	461a      	mov	r2, r3
 8009d94:	2104      	movs	r1, #4
 8009d96:	48b6      	ldr	r0, [pc, #728]	@ (800a070 <digitalWrite+0x384>)
 8009d98:	f7f8 ffca 	bl	8002d30 <HAL_GPIO_WritePin>
 8009d9c:	e306      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, vlue); break;
 8009d9e:	78fb      	ldrb	r3, [r7, #3]
 8009da0:	461a      	mov	r2, r3
 8009da2:	2108      	movs	r1, #8
 8009da4:	48b2      	ldr	r0, [pc, #712]	@ (800a070 <digitalWrite+0x384>)
 8009da6:	f7f8 ffc3 	bl	8002d30 <HAL_GPIO_WritePin>
 8009daa:	e2ff      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, vlue); break;
 8009dac:	78fb      	ldrb	r3, [r7, #3]
 8009dae:	461a      	mov	r2, r3
 8009db0:	2110      	movs	r1, #16
 8009db2:	48af      	ldr	r0, [pc, #700]	@ (800a070 <digitalWrite+0x384>)
 8009db4:	f7f8 ffbc 	bl	8002d30 <HAL_GPIO_WritePin>
 8009db8:	e2f8      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, vlue); break;
 8009dba:	78fb      	ldrb	r3, [r7, #3]
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	2120      	movs	r1, #32
 8009dc0:	48ab      	ldr	r0, [pc, #684]	@ (800a070 <digitalWrite+0x384>)
 8009dc2:	f7f8 ffb5 	bl	8002d30 <HAL_GPIO_WritePin>
 8009dc6:	e2f1      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, vlue); break;
 8009dc8:	78fb      	ldrb	r3, [r7, #3]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	2140      	movs	r1, #64	@ 0x40
 8009dce:	48a8      	ldr	r0, [pc, #672]	@ (800a070 <digitalWrite+0x384>)
 8009dd0:	f7f8 ffae 	bl	8002d30 <HAL_GPIO_WritePin>
 8009dd4:	e2ea      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, vlue); break;
 8009dd6:	78fb      	ldrb	r3, [r7, #3]
 8009dd8:	461a      	mov	r2, r3
 8009dda:	2180      	movs	r1, #128	@ 0x80
 8009ddc:	48a4      	ldr	r0, [pc, #656]	@ (800a070 <digitalWrite+0x384>)
 8009dde:	f7f8 ffa7 	bl	8002d30 <HAL_GPIO_WritePin>
 8009de2:	e2e3      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, vlue); break;
 8009de4:	78fb      	ldrb	r3, [r7, #3]
 8009de6:	461a      	mov	r2, r3
 8009de8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009dec:	48a0      	ldr	r0, [pc, #640]	@ (800a070 <digitalWrite+0x384>)
 8009dee:	f7f8 ff9f 	bl	8002d30 <HAL_GPIO_WritePin>
 8009df2:	e2db      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, vlue); break;
 8009df4:	78fb      	ldrb	r3, [r7, #3]
 8009df6:	461a      	mov	r2, r3
 8009df8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009dfc:	489c      	ldr	r0, [pc, #624]	@ (800a070 <digitalWrite+0x384>)
 8009dfe:	f7f8 ff97 	bl	8002d30 <HAL_GPIO_WritePin>
 8009e02:	e2d3      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, vlue); break;
 8009e04:	78fb      	ldrb	r3, [r7, #3]
 8009e06:	461a      	mov	r2, r3
 8009e08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009e0c:	4898      	ldr	r0, [pc, #608]	@ (800a070 <digitalWrite+0x384>)
 8009e0e:	f7f8 ff8f 	bl	8002d30 <HAL_GPIO_WritePin>
 8009e12:	e2cb      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, vlue); break;
 8009e14:	78fb      	ldrb	r3, [r7, #3]
 8009e16:	461a      	mov	r2, r3
 8009e18:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009e1c:	4894      	ldr	r0, [pc, #592]	@ (800a070 <digitalWrite+0x384>)
 8009e1e:	f7f8 ff87 	bl	8002d30 <HAL_GPIO_WritePin>
 8009e22:	e2c3      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, vlue); break;
 8009e24:	78fb      	ldrb	r3, [r7, #3]
 8009e26:	461a      	mov	r2, r3
 8009e28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009e2c:	4890      	ldr	r0, [pc, #576]	@ (800a070 <digitalWrite+0x384>)
 8009e2e:	f7f8 ff7f 	bl	8002d30 <HAL_GPIO_WritePin>
 8009e32:	e2bb      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, vlue); break;
 8009e34:	78fb      	ldrb	r3, [r7, #3]
 8009e36:	461a      	mov	r2, r3
 8009e38:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009e3c:	488c      	ldr	r0, [pc, #560]	@ (800a070 <digitalWrite+0x384>)
 8009e3e:	f7f8 ff77 	bl	8002d30 <HAL_GPIO_WritePin>
 8009e42:	e2b3      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, vlue); break;
 8009e44:	78fb      	ldrb	r3, [r7, #3]
 8009e46:	461a      	mov	r2, r3
 8009e48:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009e4c:	4888      	ldr	r0, [pc, #544]	@ (800a070 <digitalWrite+0x384>)
 8009e4e:	f7f8 ff6f 	bl	8002d30 <HAL_GPIO_WritePin>
 8009e52:	e2ab      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, vlue); break;
 8009e54:	78fb      	ldrb	r3, [r7, #3]
 8009e56:	461a      	mov	r2, r3
 8009e58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009e5c:	4884      	ldr	r0, [pc, #528]	@ (800a070 <digitalWrite+0x384>)
 8009e5e:	f7f8 ff67 	bl	8002d30 <HAL_GPIO_WritePin>
 8009e62:	e2a3      	b.n	800a3ac <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'B') {
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	3301      	adds	r3, #1
 8009e68:	781b      	ldrb	r3, [r3, #0]
 8009e6a:	2b42      	cmp	r3, #66	@ 0x42
 8009e6c:	f040 80a0 	bne.w	8009fb0 <digitalWrite+0x2c4>
	        switch (PIN) {
 8009e70:	7bfb      	ldrb	r3, [r7, #15]
 8009e72:	2b0f      	cmp	r3, #15
 8009e74:	f200 829a 	bhi.w	800a3ac <digitalWrite+0x6c0>
 8009e78:	a201      	add	r2, pc, #4	@ (adr r2, 8009e80 <digitalWrite+0x194>)
 8009e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7e:	bf00      	nop
 8009e80:	08009ec1 	.word	0x08009ec1
 8009e84:	08009ecf 	.word	0x08009ecf
 8009e88:	08009edd 	.word	0x08009edd
 8009e8c:	08009eeb 	.word	0x08009eeb
 8009e90:	08009ef9 	.word	0x08009ef9
 8009e94:	08009f07 	.word	0x08009f07
 8009e98:	08009f15 	.word	0x08009f15
 8009e9c:	08009f23 	.word	0x08009f23
 8009ea0:	08009f31 	.word	0x08009f31
 8009ea4:	08009f41 	.word	0x08009f41
 8009ea8:	08009f51 	.word	0x08009f51
 8009eac:	08009f61 	.word	0x08009f61
 8009eb0:	08009f71 	.word	0x08009f71
 8009eb4:	08009f81 	.word	0x08009f81
 8009eb8:	08009f91 	.word	0x08009f91
 8009ebc:	08009fa1 	.word	0x08009fa1
	            case 0: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, vlue); break;
 8009ec0:	78fb      	ldrb	r3, [r7, #3]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	2101      	movs	r1, #1
 8009ec6:	486b      	ldr	r0, [pc, #428]	@ (800a074 <digitalWrite+0x388>)
 8009ec8:	f7f8 ff32 	bl	8002d30 <HAL_GPIO_WritePin>
 8009ecc:	e26e      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, vlue); break;
 8009ece:	78fb      	ldrb	r3, [r7, #3]
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	2102      	movs	r1, #2
 8009ed4:	4867      	ldr	r0, [pc, #412]	@ (800a074 <digitalWrite+0x388>)
 8009ed6:	f7f8 ff2b 	bl	8002d30 <HAL_GPIO_WritePin>
 8009eda:	e267      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, vlue); break;
 8009edc:	78fb      	ldrb	r3, [r7, #3]
 8009ede:	461a      	mov	r2, r3
 8009ee0:	2104      	movs	r1, #4
 8009ee2:	4864      	ldr	r0, [pc, #400]	@ (800a074 <digitalWrite+0x388>)
 8009ee4:	f7f8 ff24 	bl	8002d30 <HAL_GPIO_WritePin>
 8009ee8:	e260      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, vlue); break;
 8009eea:	78fb      	ldrb	r3, [r7, #3]
 8009eec:	461a      	mov	r2, r3
 8009eee:	2108      	movs	r1, #8
 8009ef0:	4860      	ldr	r0, [pc, #384]	@ (800a074 <digitalWrite+0x388>)
 8009ef2:	f7f8 ff1d 	bl	8002d30 <HAL_GPIO_WritePin>
 8009ef6:	e259      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, vlue); break;
 8009ef8:	78fb      	ldrb	r3, [r7, #3]
 8009efa:	461a      	mov	r2, r3
 8009efc:	2110      	movs	r1, #16
 8009efe:	485d      	ldr	r0, [pc, #372]	@ (800a074 <digitalWrite+0x388>)
 8009f00:	f7f8 ff16 	bl	8002d30 <HAL_GPIO_WritePin>
 8009f04:	e252      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, vlue); break;
 8009f06:	78fb      	ldrb	r3, [r7, #3]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	2120      	movs	r1, #32
 8009f0c:	4859      	ldr	r0, [pc, #356]	@ (800a074 <digitalWrite+0x388>)
 8009f0e:	f7f8 ff0f 	bl	8002d30 <HAL_GPIO_WritePin>
 8009f12:	e24b      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, vlue); break;
 8009f14:	78fb      	ldrb	r3, [r7, #3]
 8009f16:	461a      	mov	r2, r3
 8009f18:	2140      	movs	r1, #64	@ 0x40
 8009f1a:	4856      	ldr	r0, [pc, #344]	@ (800a074 <digitalWrite+0x388>)
 8009f1c:	f7f8 ff08 	bl	8002d30 <HAL_GPIO_WritePin>
 8009f20:	e244      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, vlue); break;
 8009f22:	78fb      	ldrb	r3, [r7, #3]
 8009f24:	461a      	mov	r2, r3
 8009f26:	2180      	movs	r1, #128	@ 0x80
 8009f28:	4852      	ldr	r0, [pc, #328]	@ (800a074 <digitalWrite+0x388>)
 8009f2a:	f7f8 ff01 	bl	8002d30 <HAL_GPIO_WritePin>
 8009f2e:	e23d      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, vlue); break;
 8009f30:	78fb      	ldrb	r3, [r7, #3]
 8009f32:	461a      	mov	r2, r3
 8009f34:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009f38:	484e      	ldr	r0, [pc, #312]	@ (800a074 <digitalWrite+0x388>)
 8009f3a:	f7f8 fef9 	bl	8002d30 <HAL_GPIO_WritePin>
 8009f3e:	e235      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, vlue); break;
 8009f40:	78fb      	ldrb	r3, [r7, #3]
 8009f42:	461a      	mov	r2, r3
 8009f44:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009f48:	484a      	ldr	r0, [pc, #296]	@ (800a074 <digitalWrite+0x388>)
 8009f4a:	f7f8 fef1 	bl	8002d30 <HAL_GPIO_WritePin>
 8009f4e:	e22d      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, vlue); break;
 8009f50:	78fb      	ldrb	r3, [r7, #3]
 8009f52:	461a      	mov	r2, r3
 8009f54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009f58:	4846      	ldr	r0, [pc, #280]	@ (800a074 <digitalWrite+0x388>)
 8009f5a:	f7f8 fee9 	bl	8002d30 <HAL_GPIO_WritePin>
 8009f5e:	e225      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, vlue); break;
 8009f60:	78fb      	ldrb	r3, [r7, #3]
 8009f62:	461a      	mov	r2, r3
 8009f64:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009f68:	4842      	ldr	r0, [pc, #264]	@ (800a074 <digitalWrite+0x388>)
 8009f6a:	f7f8 fee1 	bl	8002d30 <HAL_GPIO_WritePin>
 8009f6e:	e21d      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, vlue); break;
 8009f70:	78fb      	ldrb	r3, [r7, #3]
 8009f72:	461a      	mov	r2, r3
 8009f74:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009f78:	483e      	ldr	r0, [pc, #248]	@ (800a074 <digitalWrite+0x388>)
 8009f7a:	f7f8 fed9 	bl	8002d30 <HAL_GPIO_WritePin>
 8009f7e:	e215      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, vlue); break;
 8009f80:	78fb      	ldrb	r3, [r7, #3]
 8009f82:	461a      	mov	r2, r3
 8009f84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009f88:	483a      	ldr	r0, [pc, #232]	@ (800a074 <digitalWrite+0x388>)
 8009f8a:	f7f8 fed1 	bl	8002d30 <HAL_GPIO_WritePin>
 8009f8e:	e20d      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, vlue); break;
 8009f90:	78fb      	ldrb	r3, [r7, #3]
 8009f92:	461a      	mov	r2, r3
 8009f94:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009f98:	4836      	ldr	r0, [pc, #216]	@ (800a074 <digitalWrite+0x388>)
 8009f9a:	f7f8 fec9 	bl	8002d30 <HAL_GPIO_WritePin>
 8009f9e:	e205      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, vlue); break;
 8009fa0:	78fb      	ldrb	r3, [r7, #3]
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009fa8:	4832      	ldr	r0, [pc, #200]	@ (800a074 <digitalWrite+0x388>)
 8009faa:	f7f8 fec1 	bl	8002d30 <HAL_GPIO_WritePin>
 8009fae:	e1fd      	b.n	800a3ac <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'C') {
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	2b43      	cmp	r3, #67	@ 0x43
 8009fb8:	f040 80a7 	bne.w	800a10a <digitalWrite+0x41e>
	        switch (PIN) {
 8009fbc:	7bfb      	ldrb	r3, [r7, #15]
 8009fbe:	2b0f      	cmp	r3, #15
 8009fc0:	f200 81f4 	bhi.w	800a3ac <digitalWrite+0x6c0>
 8009fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8009fcc <digitalWrite+0x2e0>)
 8009fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fca:	bf00      	nop
 8009fcc:	0800a00d 	.word	0x0800a00d
 8009fd0:	0800a01b 	.word	0x0800a01b
 8009fd4:	0800a029 	.word	0x0800a029
 8009fd8:	0800a037 	.word	0x0800a037
 8009fdc:	0800a045 	.word	0x0800a045
 8009fe0:	0800a053 	.word	0x0800a053
 8009fe4:	0800a061 	.word	0x0800a061
 8009fe8:	0800a07d 	.word	0x0800a07d
 8009fec:	0800a08b 	.word	0x0800a08b
 8009ff0:	0800a09b 	.word	0x0800a09b
 8009ff4:	0800a0ab 	.word	0x0800a0ab
 8009ff8:	0800a0bb 	.word	0x0800a0bb
 8009ffc:	0800a0cb 	.word	0x0800a0cb
 800a000:	0800a0db 	.word	0x0800a0db
 800a004:	0800a0eb 	.word	0x0800a0eb
 800a008:	0800a0fb 	.word	0x0800a0fb
	            case 0: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, vlue); break;
 800a00c:	78fb      	ldrb	r3, [r7, #3]
 800a00e:	461a      	mov	r2, r3
 800a010:	2101      	movs	r1, #1
 800a012:	4819      	ldr	r0, [pc, #100]	@ (800a078 <digitalWrite+0x38c>)
 800a014:	f7f8 fe8c 	bl	8002d30 <HAL_GPIO_WritePin>
 800a018:	e1c8      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, vlue); break;
 800a01a:	78fb      	ldrb	r3, [r7, #3]
 800a01c:	461a      	mov	r2, r3
 800a01e:	2102      	movs	r1, #2
 800a020:	4815      	ldr	r0, [pc, #84]	@ (800a078 <digitalWrite+0x38c>)
 800a022:	f7f8 fe85 	bl	8002d30 <HAL_GPIO_WritePin>
 800a026:	e1c1      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, vlue); break;
 800a028:	78fb      	ldrb	r3, [r7, #3]
 800a02a:	461a      	mov	r2, r3
 800a02c:	2104      	movs	r1, #4
 800a02e:	4812      	ldr	r0, [pc, #72]	@ (800a078 <digitalWrite+0x38c>)
 800a030:	f7f8 fe7e 	bl	8002d30 <HAL_GPIO_WritePin>
 800a034:	e1ba      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, vlue); break;
 800a036:	78fb      	ldrb	r3, [r7, #3]
 800a038:	461a      	mov	r2, r3
 800a03a:	2108      	movs	r1, #8
 800a03c:	480e      	ldr	r0, [pc, #56]	@ (800a078 <digitalWrite+0x38c>)
 800a03e:	f7f8 fe77 	bl	8002d30 <HAL_GPIO_WritePin>
 800a042:	e1b3      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, vlue); break;
 800a044:	78fb      	ldrb	r3, [r7, #3]
 800a046:	461a      	mov	r2, r3
 800a048:	2110      	movs	r1, #16
 800a04a:	480b      	ldr	r0, [pc, #44]	@ (800a078 <digitalWrite+0x38c>)
 800a04c:	f7f8 fe70 	bl	8002d30 <HAL_GPIO_WritePin>
 800a050:	e1ac      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, vlue); break;
 800a052:	78fb      	ldrb	r3, [r7, #3]
 800a054:	461a      	mov	r2, r3
 800a056:	2120      	movs	r1, #32
 800a058:	4807      	ldr	r0, [pc, #28]	@ (800a078 <digitalWrite+0x38c>)
 800a05a:	f7f8 fe69 	bl	8002d30 <HAL_GPIO_WritePin>
 800a05e:	e1a5      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, vlue); break;
 800a060:	78fb      	ldrb	r3, [r7, #3]
 800a062:	461a      	mov	r2, r3
 800a064:	2140      	movs	r1, #64	@ 0x40
 800a066:	4804      	ldr	r0, [pc, #16]	@ (800a078 <digitalWrite+0x38c>)
 800a068:	f7f8 fe62 	bl	8002d30 <HAL_GPIO_WritePin>
 800a06c:	e19e      	b.n	800a3ac <digitalWrite+0x6c0>
 800a06e:	bf00      	nop
 800a070:	40020000 	.word	0x40020000
 800a074:	40020400 	.word	0x40020400
 800a078:	40020800 	.word	0x40020800
	            case 7: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, vlue); break;
 800a07c:	78fb      	ldrb	r3, [r7, #3]
 800a07e:	461a      	mov	r2, r3
 800a080:	2180      	movs	r1, #128	@ 0x80
 800a082:	48bb      	ldr	r0, [pc, #748]	@ (800a370 <digitalWrite+0x684>)
 800a084:	f7f8 fe54 	bl	8002d30 <HAL_GPIO_WritePin>
 800a088:	e190      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, vlue); break;
 800a08a:	78fb      	ldrb	r3, [r7, #3]
 800a08c:	461a      	mov	r2, r3
 800a08e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a092:	48b7      	ldr	r0, [pc, #732]	@ (800a370 <digitalWrite+0x684>)
 800a094:	f7f8 fe4c 	bl	8002d30 <HAL_GPIO_WritePin>
 800a098:	e188      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, vlue); break;
 800a09a:	78fb      	ldrb	r3, [r7, #3]
 800a09c:	461a      	mov	r2, r3
 800a09e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a0a2:	48b3      	ldr	r0, [pc, #716]	@ (800a370 <digitalWrite+0x684>)
 800a0a4:	f7f8 fe44 	bl	8002d30 <HAL_GPIO_WritePin>
 800a0a8:	e180      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, vlue); break;
 800a0aa:	78fb      	ldrb	r3, [r7, #3]
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a0b2:	48af      	ldr	r0, [pc, #700]	@ (800a370 <digitalWrite+0x684>)
 800a0b4:	f7f8 fe3c 	bl	8002d30 <HAL_GPIO_WritePin>
 800a0b8:	e178      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, vlue); break;
 800a0ba:	78fb      	ldrb	r3, [r7, #3]
 800a0bc:	461a      	mov	r2, r3
 800a0be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a0c2:	48ab      	ldr	r0, [pc, #684]	@ (800a370 <digitalWrite+0x684>)
 800a0c4:	f7f8 fe34 	bl	8002d30 <HAL_GPIO_WritePin>
 800a0c8:	e170      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, vlue); break;
 800a0ca:	78fb      	ldrb	r3, [r7, #3]
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a0d2:	48a7      	ldr	r0, [pc, #668]	@ (800a370 <digitalWrite+0x684>)
 800a0d4:	f7f8 fe2c 	bl	8002d30 <HAL_GPIO_WritePin>
 800a0d8:	e168      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, vlue); break;
 800a0da:	78fb      	ldrb	r3, [r7, #3]
 800a0dc:	461a      	mov	r2, r3
 800a0de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a0e2:	48a3      	ldr	r0, [pc, #652]	@ (800a370 <digitalWrite+0x684>)
 800a0e4:	f7f8 fe24 	bl	8002d30 <HAL_GPIO_WritePin>
 800a0e8:	e160      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, vlue); break;
 800a0ea:	78fb      	ldrb	r3, [r7, #3]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a0f2:	489f      	ldr	r0, [pc, #636]	@ (800a370 <digitalWrite+0x684>)
 800a0f4:	f7f8 fe1c 	bl	8002d30 <HAL_GPIO_WritePin>
 800a0f8:	e158      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, vlue); break;
 800a0fa:	78fb      	ldrb	r3, [r7, #3]
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a102:	489b      	ldr	r0, [pc, #620]	@ (800a370 <digitalWrite+0x684>)
 800a104:	f7f8 fe14 	bl	8002d30 <HAL_GPIO_WritePin>
 800a108:	e150      	b.n	800a3ac <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'D') {
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	3301      	adds	r3, #1
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	2b44      	cmp	r3, #68	@ 0x44
 800a112:	f040 809f 	bne.w	800a254 <digitalWrite+0x568>
	        switch (PIN) {
 800a116:	7bfb      	ldrb	r3, [r7, #15]
 800a118:	2b0f      	cmp	r3, #15
 800a11a:	f200 8147 	bhi.w	800a3ac <digitalWrite+0x6c0>
 800a11e:	a201      	add	r2, pc, #4	@ (adr r2, 800a124 <digitalWrite+0x438>)
 800a120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a124:	0800a165 	.word	0x0800a165
 800a128:	0800a173 	.word	0x0800a173
 800a12c:	0800a181 	.word	0x0800a181
 800a130:	0800a18f 	.word	0x0800a18f
 800a134:	0800a19d 	.word	0x0800a19d
 800a138:	0800a1ab 	.word	0x0800a1ab
 800a13c:	0800a1b9 	.word	0x0800a1b9
 800a140:	0800a1c7 	.word	0x0800a1c7
 800a144:	0800a1d5 	.word	0x0800a1d5
 800a148:	0800a1e5 	.word	0x0800a1e5
 800a14c:	0800a1f5 	.word	0x0800a1f5
 800a150:	0800a205 	.word	0x0800a205
 800a154:	0800a215 	.word	0x0800a215
 800a158:	0800a225 	.word	0x0800a225
 800a15c:	0800a235 	.word	0x0800a235
 800a160:	0800a245 	.word	0x0800a245
	            case 0: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, vlue); break;
 800a164:	78fb      	ldrb	r3, [r7, #3]
 800a166:	461a      	mov	r2, r3
 800a168:	2101      	movs	r1, #1
 800a16a:	4882      	ldr	r0, [pc, #520]	@ (800a374 <digitalWrite+0x688>)
 800a16c:	f7f8 fde0 	bl	8002d30 <HAL_GPIO_WritePin>
 800a170:	e11c      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, vlue); break;
 800a172:	78fb      	ldrb	r3, [r7, #3]
 800a174:	461a      	mov	r2, r3
 800a176:	2102      	movs	r1, #2
 800a178:	487e      	ldr	r0, [pc, #504]	@ (800a374 <digitalWrite+0x688>)
 800a17a:	f7f8 fdd9 	bl	8002d30 <HAL_GPIO_WritePin>
 800a17e:	e115      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, vlue); break;
 800a180:	78fb      	ldrb	r3, [r7, #3]
 800a182:	461a      	mov	r2, r3
 800a184:	2104      	movs	r1, #4
 800a186:	487b      	ldr	r0, [pc, #492]	@ (800a374 <digitalWrite+0x688>)
 800a188:	f7f8 fdd2 	bl	8002d30 <HAL_GPIO_WritePin>
 800a18c:	e10e      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, vlue); break;
 800a18e:	78fb      	ldrb	r3, [r7, #3]
 800a190:	461a      	mov	r2, r3
 800a192:	2108      	movs	r1, #8
 800a194:	4877      	ldr	r0, [pc, #476]	@ (800a374 <digitalWrite+0x688>)
 800a196:	f7f8 fdcb 	bl	8002d30 <HAL_GPIO_WritePin>
 800a19a:	e107      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, vlue); break;
 800a19c:	78fb      	ldrb	r3, [r7, #3]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	2110      	movs	r1, #16
 800a1a2:	4874      	ldr	r0, [pc, #464]	@ (800a374 <digitalWrite+0x688>)
 800a1a4:	f7f8 fdc4 	bl	8002d30 <HAL_GPIO_WritePin>
 800a1a8:	e100      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, vlue); break;
 800a1aa:	78fb      	ldrb	r3, [r7, #3]
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	2120      	movs	r1, #32
 800a1b0:	4870      	ldr	r0, [pc, #448]	@ (800a374 <digitalWrite+0x688>)
 800a1b2:	f7f8 fdbd 	bl	8002d30 <HAL_GPIO_WritePin>
 800a1b6:	e0f9      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, vlue); break;
 800a1b8:	78fb      	ldrb	r3, [r7, #3]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	2140      	movs	r1, #64	@ 0x40
 800a1be:	486d      	ldr	r0, [pc, #436]	@ (800a374 <digitalWrite+0x688>)
 800a1c0:	f7f8 fdb6 	bl	8002d30 <HAL_GPIO_WritePin>
 800a1c4:	e0f2      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, vlue); break;
 800a1c6:	78fb      	ldrb	r3, [r7, #3]
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	2180      	movs	r1, #128	@ 0x80
 800a1cc:	4869      	ldr	r0, [pc, #420]	@ (800a374 <digitalWrite+0x688>)
 800a1ce:	f7f8 fdaf 	bl	8002d30 <HAL_GPIO_WritePin>
 800a1d2:	e0eb      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, vlue); break;
 800a1d4:	78fb      	ldrb	r3, [r7, #3]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a1dc:	4865      	ldr	r0, [pc, #404]	@ (800a374 <digitalWrite+0x688>)
 800a1de:	f7f8 fda7 	bl	8002d30 <HAL_GPIO_WritePin>
 800a1e2:	e0e3      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, vlue); break;
 800a1e4:	78fb      	ldrb	r3, [r7, #3]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a1ec:	4861      	ldr	r0, [pc, #388]	@ (800a374 <digitalWrite+0x688>)
 800a1ee:	f7f8 fd9f 	bl	8002d30 <HAL_GPIO_WritePin>
 800a1f2:	e0db      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, vlue); break;
 800a1f4:	78fb      	ldrb	r3, [r7, #3]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a1fc:	485d      	ldr	r0, [pc, #372]	@ (800a374 <digitalWrite+0x688>)
 800a1fe:	f7f8 fd97 	bl	8002d30 <HAL_GPIO_WritePin>
 800a202:	e0d3      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, vlue); break;
 800a204:	78fb      	ldrb	r3, [r7, #3]
 800a206:	461a      	mov	r2, r3
 800a208:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a20c:	4859      	ldr	r0, [pc, #356]	@ (800a374 <digitalWrite+0x688>)
 800a20e:	f7f8 fd8f 	bl	8002d30 <HAL_GPIO_WritePin>
 800a212:	e0cb      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, vlue); break;
 800a214:	78fb      	ldrb	r3, [r7, #3]
 800a216:	461a      	mov	r2, r3
 800a218:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a21c:	4855      	ldr	r0, [pc, #340]	@ (800a374 <digitalWrite+0x688>)
 800a21e:	f7f8 fd87 	bl	8002d30 <HAL_GPIO_WritePin>
 800a222:	e0c3      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 13: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, vlue); break;
 800a224:	78fb      	ldrb	r3, [r7, #3]
 800a226:	461a      	mov	r2, r3
 800a228:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a22c:	4851      	ldr	r0, [pc, #324]	@ (800a374 <digitalWrite+0x688>)
 800a22e:	f7f8 fd7f 	bl	8002d30 <HAL_GPIO_WritePin>
 800a232:	e0bb      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, vlue); break;
 800a234:	78fb      	ldrb	r3, [r7, #3]
 800a236:	461a      	mov	r2, r3
 800a238:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a23c:	484d      	ldr	r0, [pc, #308]	@ (800a374 <digitalWrite+0x688>)
 800a23e:	f7f8 fd77 	bl	8002d30 <HAL_GPIO_WritePin>
 800a242:	e0b3      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, vlue); break;
 800a244:	78fb      	ldrb	r3, [r7, #3]
 800a246:	461a      	mov	r2, r3
 800a248:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a24c:	4849      	ldr	r0, [pc, #292]	@ (800a374 <digitalWrite+0x688>)
 800a24e:	f7f8 fd6f 	bl	8002d30 <HAL_GPIO_WritePin>
 800a252:	e0ab      	b.n	800a3ac <digitalWrite+0x6c0>
	        }
	    } else if (_PIN[1] == 'E') {
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	3301      	adds	r3, #1
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	2b45      	cmp	r3, #69	@ 0x45
 800a25c:	f040 80a6 	bne.w	800a3ac <digitalWrite+0x6c0>
	        switch (PIN) {
 800a260:	7bfb      	ldrb	r3, [r7, #15]
 800a262:	2b0f      	cmp	r3, #15
 800a264:	f200 80a2 	bhi.w	800a3ac <digitalWrite+0x6c0>
 800a268:	a201      	add	r2, pc, #4	@ (adr r2, 800a270 <digitalWrite+0x584>)
 800a26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a26e:	bf00      	nop
 800a270:	0800a2b1 	.word	0x0800a2b1
 800a274:	0800a2bf 	.word	0x0800a2bf
 800a278:	0800a2cd 	.word	0x0800a2cd
 800a27c:	0800a2db 	.word	0x0800a2db
 800a280:	0800a2e9 	.word	0x0800a2e9
 800a284:	0800a2f7 	.word	0x0800a2f7
 800a288:	0800a305 	.word	0x0800a305
 800a28c:	0800a313 	.word	0x0800a313
 800a290:	0800a321 	.word	0x0800a321
 800a294:	0800a331 	.word	0x0800a331
 800a298:	0800a341 	.word	0x0800a341
 800a29c:	0800a351 	.word	0x0800a351
 800a2a0:	0800a361 	.word	0x0800a361
 800a2a4:	0800a37d 	.word	0x0800a37d
 800a2a8:	0800a38d 	.word	0x0800a38d
 800a2ac:	0800a39d 	.word	0x0800a39d
	            case 0: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, vlue); break;
 800a2b0:	78fb      	ldrb	r3, [r7, #3]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	2101      	movs	r1, #1
 800a2b6:	4830      	ldr	r0, [pc, #192]	@ (800a378 <digitalWrite+0x68c>)
 800a2b8:	f7f8 fd3a 	bl	8002d30 <HAL_GPIO_WritePin>
 800a2bc:	e076      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 1: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, vlue); break;
 800a2be:	78fb      	ldrb	r3, [r7, #3]
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	2102      	movs	r1, #2
 800a2c4:	482c      	ldr	r0, [pc, #176]	@ (800a378 <digitalWrite+0x68c>)
 800a2c6:	f7f8 fd33 	bl	8002d30 <HAL_GPIO_WritePin>
 800a2ca:	e06f      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 2: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, vlue); break;
 800a2cc:	78fb      	ldrb	r3, [r7, #3]
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	2104      	movs	r1, #4
 800a2d2:	4829      	ldr	r0, [pc, #164]	@ (800a378 <digitalWrite+0x68c>)
 800a2d4:	f7f8 fd2c 	bl	8002d30 <HAL_GPIO_WritePin>
 800a2d8:	e068      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 3: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, vlue); break;
 800a2da:	78fb      	ldrb	r3, [r7, #3]
 800a2dc:	461a      	mov	r2, r3
 800a2de:	2108      	movs	r1, #8
 800a2e0:	4825      	ldr	r0, [pc, #148]	@ (800a378 <digitalWrite+0x68c>)
 800a2e2:	f7f8 fd25 	bl	8002d30 <HAL_GPIO_WritePin>
 800a2e6:	e061      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 4: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, vlue); break;
 800a2e8:	78fb      	ldrb	r3, [r7, #3]
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	2110      	movs	r1, #16
 800a2ee:	4822      	ldr	r0, [pc, #136]	@ (800a378 <digitalWrite+0x68c>)
 800a2f0:	f7f8 fd1e 	bl	8002d30 <HAL_GPIO_WritePin>
 800a2f4:	e05a      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 5: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, vlue); break;
 800a2f6:	78fb      	ldrb	r3, [r7, #3]
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	2120      	movs	r1, #32
 800a2fc:	481e      	ldr	r0, [pc, #120]	@ (800a378 <digitalWrite+0x68c>)
 800a2fe:	f7f8 fd17 	bl	8002d30 <HAL_GPIO_WritePin>
 800a302:	e053      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 6: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, vlue); break;
 800a304:	78fb      	ldrb	r3, [r7, #3]
 800a306:	461a      	mov	r2, r3
 800a308:	2140      	movs	r1, #64	@ 0x40
 800a30a:	481b      	ldr	r0, [pc, #108]	@ (800a378 <digitalWrite+0x68c>)
 800a30c:	f7f8 fd10 	bl	8002d30 <HAL_GPIO_WritePin>
 800a310:	e04c      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 7: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, vlue); break;
 800a312:	78fb      	ldrb	r3, [r7, #3]
 800a314:	461a      	mov	r2, r3
 800a316:	2180      	movs	r1, #128	@ 0x80
 800a318:	4817      	ldr	r0, [pc, #92]	@ (800a378 <digitalWrite+0x68c>)
 800a31a:	f7f8 fd09 	bl	8002d30 <HAL_GPIO_WritePin>
 800a31e:	e045      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 8: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, vlue); break;
 800a320:	78fb      	ldrb	r3, [r7, #3]
 800a322:	461a      	mov	r2, r3
 800a324:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a328:	4813      	ldr	r0, [pc, #76]	@ (800a378 <digitalWrite+0x68c>)
 800a32a:	f7f8 fd01 	bl	8002d30 <HAL_GPIO_WritePin>
 800a32e:	e03d      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 9: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, vlue); break;
 800a330:	78fb      	ldrb	r3, [r7, #3]
 800a332:	461a      	mov	r2, r3
 800a334:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a338:	480f      	ldr	r0, [pc, #60]	@ (800a378 <digitalWrite+0x68c>)
 800a33a:	f7f8 fcf9 	bl	8002d30 <HAL_GPIO_WritePin>
 800a33e:	e035      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 10: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, vlue); break;
 800a340:	78fb      	ldrb	r3, [r7, #3]
 800a342:	461a      	mov	r2, r3
 800a344:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a348:	480b      	ldr	r0, [pc, #44]	@ (800a378 <digitalWrite+0x68c>)
 800a34a:	f7f8 fcf1 	bl	8002d30 <HAL_GPIO_WritePin>
 800a34e:	e02d      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 11: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, vlue); break;
 800a350:	78fb      	ldrb	r3, [r7, #3]
 800a352:	461a      	mov	r2, r3
 800a354:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a358:	4807      	ldr	r0, [pc, #28]	@ (800a378 <digitalWrite+0x68c>)
 800a35a:	f7f8 fce9 	bl	8002d30 <HAL_GPIO_WritePin>
 800a35e:	e025      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 12: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, vlue); break;
 800a360:	78fb      	ldrb	r3, [r7, #3]
 800a362:	461a      	mov	r2, r3
 800a364:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800a368:	4803      	ldr	r0, [pc, #12]	@ (800a378 <digitalWrite+0x68c>)
 800a36a:	f7f8 fce1 	bl	8002d30 <HAL_GPIO_WritePin>
 800a36e:	e01d      	b.n	800a3ac <digitalWrite+0x6c0>
 800a370:	40020800 	.word	0x40020800
 800a374:	40020c00 	.word	0x40020c00
 800a378:	40021000 	.word	0x40021000
	            case 13: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13, vlue); break;
 800a37c:	78fb      	ldrb	r3, [r7, #3]
 800a37e:	461a      	mov	r2, r3
 800a380:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a384:	480b      	ldr	r0, [pc, #44]	@ (800a3b4 <digitalWrite+0x6c8>)
 800a386:	f7f8 fcd3 	bl	8002d30 <HAL_GPIO_WritePin>
 800a38a:	e00f      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 14: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, vlue); break;
 800a38c:	78fb      	ldrb	r3, [r7, #3]
 800a38e:	461a      	mov	r2, r3
 800a390:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800a394:	4807      	ldr	r0, [pc, #28]	@ (800a3b4 <digitalWrite+0x6c8>)
 800a396:	f7f8 fccb 	bl	8002d30 <HAL_GPIO_WritePin>
 800a39a:	e007      	b.n	800a3ac <digitalWrite+0x6c0>
	            case 15: HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, vlue); break;
 800a39c:	78fb      	ldrb	r3, [r7, #3]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a3a4:	4803      	ldr	r0, [pc, #12]	@ (800a3b4 <digitalWrite+0x6c8>)
 800a3a6:	f7f8 fcc3 	bl	8002d30 <HAL_GPIO_WritePin>
 800a3aa:	bf00      	nop
	        }
	    }
}
 800a3ac:	bf00      	nop
 800a3ae:	3710      	adds	r7, #16
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	40021000 	.word	0x40021000

0800a3b8 <Setup_Forward_Kinematic>:

float _Lx;
float _Ly;
float _Radius_wheel;

void Setup_Forward_Kinematic(float Lx ,float Ly ,float Radius_wheel){
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	ed87 0a03 	vstr	s0, [r7, #12]
 800a3c2:	edc7 0a02 	vstr	s1, [r7, #8]
 800a3c6:	ed87 1a01 	vstr	s2, [r7, #4]
	_Lx = Lx;
 800a3ca:	4a07      	ldr	r2, [pc, #28]	@ (800a3e8 <Setup_Forward_Kinematic+0x30>)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6013      	str	r3, [r2, #0]
	_Ly = Ly;
 800a3d0:	4a06      	ldr	r2, [pc, #24]	@ (800a3ec <Setup_Forward_Kinematic+0x34>)
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	6013      	str	r3, [r2, #0]
	_Radius_wheel = Radius_wheel;
 800a3d6:	4a06      	ldr	r2, [pc, #24]	@ (800a3f0 <Setup_Forward_Kinematic+0x38>)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6013      	str	r3, [r2, #0]
}
 800a3dc:	bf00      	nop
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr
 800a3e8:	200007ec 	.word	0x200007ec
 800a3ec:	200007f0 	.word	0x200007f0
 800a3f0:	200007f4 	.word	0x200007f4

0800a3f4 <Setup_frequency_Forward_Kinematic>:

float _Pos_X = 0.0f;
float _Pos_Y = 0.0f;
float _Pos_Z = 0.0f;

void Setup_frequency_Forward_Kinematic(uint8_t freq){
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	71fb      	strb	r3, [r7, #7]
	__freq = freq;
 800a3fe:	4a04      	ldr	r2, [pc, #16]	@ (800a410 <Setup_frequency_Forward_Kinematic+0x1c>)
 800a400:	79fb      	ldrb	r3, [r7, #7]
 800a402:	7013      	strb	r3, [r2, #0]
}
 800a404:	bf00      	nop
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr
 800a410:	2000001c 	.word	0x2000001c

0800a414 <Setup_Inverse_Kinematic>:

float Lx_;
float Ly_;
float Radius_wheel_;

void Setup_Inverse_Kinematic(float Lx ,float Ly ,float Radius_wheel){
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	ed87 0a03 	vstr	s0, [r7, #12]
 800a41e:	edc7 0a02 	vstr	s1, [r7, #8]
 800a422:	ed87 1a01 	vstr	s2, [r7, #4]
	Lx_ = Lx;
 800a426:	4a07      	ldr	r2, [pc, #28]	@ (800a444 <Setup_Inverse_Kinematic+0x30>)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	6013      	str	r3, [r2, #0]
	Ly_ = Ly;
 800a42c:	4a06      	ldr	r2, [pc, #24]	@ (800a448 <Setup_Inverse_Kinematic+0x34>)
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	6013      	str	r3, [r2, #0]
	Radius_wheel_ = Radius_wheel;
 800a432:	4a06      	ldr	r2, [pc, #24]	@ (800a44c <Setup_Inverse_Kinematic+0x38>)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6013      	str	r3, [r2, #0]
}
 800a438:	bf00      	nop
 800a43a:	3714      	adds	r7, #20
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr
 800a444:	200007f8 	.word	0x200007f8
 800a448:	200007fc 	.word	0x200007fc
 800a44c:	20000800 	.word	0x20000800

0800a450 <Inverse_Kinematic>:
float w_LF = 0.0f;
float w_LB = 0.0f;
float w_RF = 0.0f;
float w_RB = 0.0f;

void Inverse_Kinematic(float Vx ,float Vy ,float wz){
 800a450:	b480      	push	{r7}
 800a452:	b085      	sub	sp, #20
 800a454:	af00      	add	r7, sp, #0
 800a456:	ed87 0a03 	vstr	s0, [r7, #12]
 800a45a:	edc7 0a02 	vstr	s1, [r7, #8]
 800a45e:	ed87 1a01 	vstr	s2, [r7, #4]
	w_LF = (Vx - Vy - (Lx_ +Ly_)*wz)/Radius_wheel_;
 800a462:	ed97 7a03 	vldr	s14, [r7, #12]
 800a466:	edd7 7a02 	vldr	s15, [r7, #8]
 800a46a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a46e:	4b3a      	ldr	r3, [pc, #232]	@ (800a558 <Inverse_Kinematic+0x108>)
 800a470:	edd3 6a00 	vldr	s13, [r3]
 800a474:	4b39      	ldr	r3, [pc, #228]	@ (800a55c <Inverse_Kinematic+0x10c>)
 800a476:	edd3 7a00 	vldr	s15, [r3]
 800a47a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a47e:	edd7 7a01 	vldr	s15, [r7, #4]
 800a482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a486:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a48a:	4b35      	ldr	r3, [pc, #212]	@ (800a560 <Inverse_Kinematic+0x110>)
 800a48c:	ed93 7a00 	vldr	s14, [r3]
 800a490:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a494:	4b33      	ldr	r3, [pc, #204]	@ (800a564 <Inverse_Kinematic+0x114>)
 800a496:	edc3 7a00 	vstr	s15, [r3]
	w_RF = -(Vx + Vy + (Lx_ +Ly_)*wz)/Radius_wheel_;
 800a49a:	ed97 7a03 	vldr	s14, [r7, #12]
 800a49e:	edd7 7a02 	vldr	s15, [r7, #8]
 800a4a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a4a6:	4b2c      	ldr	r3, [pc, #176]	@ (800a558 <Inverse_Kinematic+0x108>)
 800a4a8:	edd3 6a00 	vldr	s13, [r3]
 800a4ac:	4b2b      	ldr	r3, [pc, #172]	@ (800a55c <Inverse_Kinematic+0x10c>)
 800a4ae:	edd3 7a00 	vldr	s15, [r3]
 800a4b2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a4b6:	edd7 7a01 	vldr	s15, [r7, #4]
 800a4ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a4be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4c2:	eef1 6a67 	vneg.f32	s13, s15
 800a4c6:	4b26      	ldr	r3, [pc, #152]	@ (800a560 <Inverse_Kinematic+0x110>)
 800a4c8:	ed93 7a00 	vldr	s14, [r3]
 800a4cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a4d0:	4b25      	ldr	r3, [pc, #148]	@ (800a568 <Inverse_Kinematic+0x118>)
 800a4d2:	edc3 7a00 	vstr	s15, [r3]
	w_LB = (Vx + Vy - (Lx_ +Ly_)*wz)/Radius_wheel_;
 800a4d6:	ed97 7a03 	vldr	s14, [r7, #12]
 800a4da:	edd7 7a02 	vldr	s15, [r7, #8]
 800a4de:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a4e2:	4b1d      	ldr	r3, [pc, #116]	@ (800a558 <Inverse_Kinematic+0x108>)
 800a4e4:	edd3 6a00 	vldr	s13, [r3]
 800a4e8:	4b1c      	ldr	r3, [pc, #112]	@ (800a55c <Inverse_Kinematic+0x10c>)
 800a4ea:	edd3 7a00 	vldr	s15, [r3]
 800a4ee:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a4f2:	edd7 7a01 	vldr	s15, [r7, #4]
 800a4f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a4fa:	ee77 6a67 	vsub.f32	s13, s14, s15
 800a4fe:	4b18      	ldr	r3, [pc, #96]	@ (800a560 <Inverse_Kinematic+0x110>)
 800a500:	ed93 7a00 	vldr	s14, [r3]
 800a504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a508:	4b18      	ldr	r3, [pc, #96]	@ (800a56c <Inverse_Kinematic+0x11c>)
 800a50a:	edc3 7a00 	vstr	s15, [r3]
	w_RB = -(Vx - Vy + (Lx_ +Ly_)*wz)/Radius_wheel_;
 800a50e:	ed97 7a03 	vldr	s14, [r7, #12]
 800a512:	edd7 7a02 	vldr	s15, [r7, #8]
 800a516:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a51a:	4b0f      	ldr	r3, [pc, #60]	@ (800a558 <Inverse_Kinematic+0x108>)
 800a51c:	edd3 6a00 	vldr	s13, [r3]
 800a520:	4b0e      	ldr	r3, [pc, #56]	@ (800a55c <Inverse_Kinematic+0x10c>)
 800a522:	edd3 7a00 	vldr	s15, [r3]
 800a526:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a52a:	edd7 7a01 	vldr	s15, [r7, #4]
 800a52e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a532:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a536:	eef1 6a67 	vneg.f32	s13, s15
 800a53a:	4b09      	ldr	r3, [pc, #36]	@ (800a560 <Inverse_Kinematic+0x110>)
 800a53c:	ed93 7a00 	vldr	s14, [r3]
 800a540:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a544:	4b0a      	ldr	r3, [pc, #40]	@ (800a570 <Inverse_Kinematic+0x120>)
 800a546:	edc3 7a00 	vstr	s15, [r3]
}
 800a54a:	bf00      	nop
 800a54c:	3714      	adds	r7, #20
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr
 800a556:	bf00      	nop
 800a558:	200007f8 	.word	0x200007f8
 800a55c:	200007fc 	.word	0x200007fc
 800a560:	20000800 	.word	0x20000800
 800a564:	20000804 	.word	0x20000804
 800a568:	2000080c 	.word	0x2000080c
 800a56c:	20000808 	.word	0x20000808
 800a570:	20000810 	.word	0x20000810

0800a574 <get_w_LF>:

float get_w_LF(){
 800a574:	b480      	push	{r7}
 800a576:	af00      	add	r7, sp, #0
	return w_LF;
 800a578:	4b04      	ldr	r3, [pc, #16]	@ (800a58c <get_w_LF+0x18>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	ee07 3a90 	vmov	s15, r3
}
 800a580:	eeb0 0a67 	vmov.f32	s0, s15
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr
 800a58c:	20000804 	.word	0x20000804

0800a590 <get_w_LB>:

float get_w_LB(){
 800a590:	b480      	push	{r7}
 800a592:	af00      	add	r7, sp, #0
	return w_LB;
 800a594:	4b04      	ldr	r3, [pc, #16]	@ (800a5a8 <get_w_LB+0x18>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	ee07 3a90 	vmov	s15, r3
}
 800a59c:	eeb0 0a67 	vmov.f32	s0, s15
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr
 800a5a8:	20000808 	.word	0x20000808

0800a5ac <get_w_RF>:

float get_w_RF(){
 800a5ac:	b480      	push	{r7}
 800a5ae:	af00      	add	r7, sp, #0
	return w_RF;
 800a5b0:	4b04      	ldr	r3, [pc, #16]	@ (800a5c4 <get_w_RF+0x18>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	ee07 3a90 	vmov	s15, r3
}
 800a5b8:	eeb0 0a67 	vmov.f32	s0, s15
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr
 800a5c4:	2000080c 	.word	0x2000080c

0800a5c8 <get_w_RB>:

float get_w_RB(){
 800a5c8:	b480      	push	{r7}
 800a5ca:	af00      	add	r7, sp, #0
	return w_RB;
 800a5cc:	4b04      	ldr	r3, [pc, #16]	@ (800a5e0 <get_w_RB+0x18>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	ee07 3a90 	vmov	s15, r3
}
 800a5d4:	eeb0 0a67 	vmov.f32	s0, s15
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5de:	4770      	bx	lr
 800a5e0:	20000810 	.word	0x20000810

0800a5e4 <map>:

float map(float value, float fromLow, float fromHigh, float toLow, float toHigh) {
 800a5e4:	b480      	push	{r7}
 800a5e6:	b087      	sub	sp, #28
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	ed87 0a05 	vstr	s0, [r7, #20]
 800a5ee:	edc7 0a04 	vstr	s1, [r7, #16]
 800a5f2:	ed87 1a03 	vstr	s2, [r7, #12]
 800a5f6:	edc7 1a02 	vstr	s3, [r7, #8]
 800a5fa:	ed87 2a01 	vstr	s4, [r7, #4]
    return toLow + (toHigh - toLow) * ((value - fromLow) / (fromHigh - fromLow));
 800a5fe:	ed97 7a01 	vldr	s14, [r7, #4]
 800a602:	edd7 7a02 	vldr	s15, [r7, #8]
 800a606:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a60a:	edd7 6a05 	vldr	s13, [r7, #20]
 800a60e:	edd7 7a04 	vldr	s15, [r7, #16]
 800a612:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800a616:	edd7 6a03 	vldr	s13, [r7, #12]
 800a61a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a61e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a622:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800a626:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a62a:	edd7 7a02 	vldr	s15, [r7, #8]
 800a62e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800a632:	eeb0 0a67 	vmov.f32	s0, s15
 800a636:	371c      	adds	r7, #28
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <Setup_MPU6050>:
	return _addr;
}

I2C_HandleTypeDef* I2C_MPU6050;

void Setup_MPU6050(I2C_HandleTypeDef *I2Cinstance){
 800a640:	b580      	push	{r7, lr}
 800a642:	b088      	sub	sp, #32
 800a644:	af04      	add	r7, sp, #16
 800a646:	6078      	str	r0, [r7, #4]
		I2C_MPU6050 = I2Cinstance;
 800a648:	4a2e      	ldr	r2, [pc, #184]	@ (800a704 <Setup_MPU6050+0xc4>)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6013      	str	r3, [r2, #0]

		// power management register 0X6B we should write all 0's to wake the sensor up
		uint8_t Data = 0;
 800a64e:	2300      	movs	r3, #0
 800a650:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(I2C_MPU6050, MPU6050_ADDR, power_management, 1, &Data, 1, 2000);
 800a652:	4b2c      	ldr	r3, [pc, #176]	@ (800a704 <Setup_MPU6050+0xc4>)
 800a654:	6818      	ldr	r0, [r3, #0]
 800a656:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800a65a:	9302      	str	r3, [sp, #8]
 800a65c:	2301      	movs	r3, #1
 800a65e:	9301      	str	r3, [sp, #4]
 800a660:	f107 030f 	add.w	r3, r7, #15
 800a664:	9300      	str	r3, [sp, #0]
 800a666:	2301      	movs	r3, #1
 800a668:	226b      	movs	r2, #107	@ 0x6b
 800a66a:	21d0      	movs	r1, #208	@ 0xd0
 800a66c:	f7f8 fcbe 	bl	8002fec <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 800a670:	2307      	movs	r3, #7
 800a672:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(I2C_MPU6050, MPU6050_ADDR, DATA_RATE, 1, &Data, 1, 2000);
 800a674:	4b23      	ldr	r3, [pc, #140]	@ (800a704 <Setup_MPU6050+0xc4>)
 800a676:	6818      	ldr	r0, [r3, #0]
 800a678:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800a67c:	9302      	str	r3, [sp, #8]
 800a67e:	2301      	movs	r3, #1
 800a680:	9301      	str	r3, [sp, #4]
 800a682:	f107 030f 	add.w	r3, r7, #15
 800a686:	9300      	str	r3, [sp, #0]
 800a688:	2301      	movs	r3, #1
 800a68a:	2219      	movs	r2, #25
 800a68c:	21d0      	movs	r1, #208	@ 0xd0
 800a68e:	f7f8 fcad 	bl	8002fec <HAL_I2C_Mem_Write>

		Data = 0x03;
 800a692:	2303      	movs	r3, #3
 800a694:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(I2C_MPU6050, MPU6050_ADDR, REG_DLPFCONF, 1, &Data, 1, 2000);
 800a696:	4b1b      	ldr	r3, [pc, #108]	@ (800a704 <Setup_MPU6050+0xc4>)
 800a698:	6818      	ldr	r0, [r3, #0]
 800a69a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800a69e:	9302      	str	r3, [sp, #8]
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	9301      	str	r3, [sp, #4]
 800a6a4:	f107 030f 	add.w	r3, r7, #15
 800a6a8:	9300      	str	r3, [sp, #0]
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	221a      	movs	r2, #26
 800a6ae:	21d0      	movs	r1, #208	@ 0xd0
 800a6b0:	f7f8 fc9c 	bl	8002fec <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		Data = 18;  // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ± 2g
 800a6b4:	2312      	movs	r3, #18
 800a6b6:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(I2C_MPU6050, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 2000);
 800a6b8:	4b12      	ldr	r3, [pc, #72]	@ (800a704 <Setup_MPU6050+0xc4>)
 800a6ba:	6818      	ldr	r0, [r3, #0]
 800a6bc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800a6c0:	9302      	str	r3, [sp, #8]
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	9301      	str	r3, [sp, #4]
 800a6c6:	f107 030f 	add.w	r3, r7, #15
 800a6ca:	9300      	str	r3, [sp, #0]
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	221c      	movs	r2, #28
 800a6d0:	21d0      	movs	r1, #208	@ 0xd0
 800a6d2:	f7f8 fc8b 	bl	8002fec <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		Data = 18;  // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ± 250 ̐/s
 800a6d6:	2312      	movs	r3, #18
 800a6d8:	73fb      	strb	r3, [r7, #15]
		HAL_I2C_Mem_Write(I2C_MPU6050, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 2000);
 800a6da:	4b0a      	ldr	r3, [pc, #40]	@ (800a704 <Setup_MPU6050+0xc4>)
 800a6dc:	6818      	ldr	r0, [r3, #0]
 800a6de:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800a6e2:	9302      	str	r3, [sp, #8]
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	9301      	str	r3, [sp, #4]
 800a6e8:	f107 030f 	add.w	r3, r7, #15
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	221b      	movs	r2, #27
 800a6f2:	21d0      	movs	r1, #208	@ 0xd0
 800a6f4:	f7f8 fc7a 	bl	8002fec <HAL_I2C_Mem_Write>


		MPU6050_calib();
 800a6f8:	f000 f87a 	bl	800a7f0 <MPU6050_calib>
}
 800a6fc:	bf00      	nop
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	20000814 	.word	0x20000814

0800a708 <ReadMPU6050>:

MPU6050 imu_data;

float gyro_offset = 0;

void ReadMPU6050(){
 800a708:	b580      	push	{r7, lr}
 800a70a:	b088      	sub	sp, #32
 800a70c:	af04      	add	r7, sp, #16
	uint8_t Rec_Data[6];
	// Read 6 BYTES of data starting from ACCEL_XOUT_H (0x3B) register
	HAL_I2C_Mem_Read (I2C_MPU6050, MPU6050_ADDR, 0x3B, 1, Rec_Data, 6, 1000);
 800a70e:	4b35      	ldr	r3, [pc, #212]	@ (800a7e4 <ReadMPU6050+0xdc>)
 800a710:	6818      	ldr	r0, [r3, #0]
 800a712:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a716:	9302      	str	r3, [sp, #8]
 800a718:	2306      	movs	r3, #6
 800a71a:	9301      	str	r3, [sp, #4]
 800a71c:	f107 0308 	add.w	r3, r7, #8
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	2301      	movs	r3, #1
 800a724:	223b      	movs	r2, #59	@ 0x3b
 800a726:	21d0      	movs	r1, #208	@ 0xd0
 800a728:	f7f8 fd5a 	bl	80031e0 <HAL_I2C_Mem_Read>

	imu_data.Ax = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 800a72c:	7a3b      	ldrb	r3, [r7, #8]
 800a72e:	021b      	lsls	r3, r3, #8
 800a730:	b21a      	sxth	r2, r3
 800a732:	7a7b      	ldrb	r3, [r7, #9]
 800a734:	b21b      	sxth	r3, r3
 800a736:	4313      	orrs	r3, r2
 800a738:	b21a      	sxth	r2, r3
 800a73a:	4b2b      	ldr	r3, [pc, #172]	@ (800a7e8 <ReadMPU6050+0xe0>)
 800a73c:	80da      	strh	r2, [r3, #6]
	imu_data.Ay = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 800a73e:	7abb      	ldrb	r3, [r7, #10]
 800a740:	021b      	lsls	r3, r3, #8
 800a742:	b21a      	sxth	r2, r3
 800a744:	7afb      	ldrb	r3, [r7, #11]
 800a746:	b21b      	sxth	r3, r3
 800a748:	4313      	orrs	r3, r2
 800a74a:	b21a      	sxth	r2, r3
 800a74c:	4b26      	ldr	r3, [pc, #152]	@ (800a7e8 <ReadMPU6050+0xe0>)
 800a74e:	811a      	strh	r2, [r3, #8]
	imu_data.Az = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800a750:	7b3b      	ldrb	r3, [r7, #12]
 800a752:	021b      	lsls	r3, r3, #8
 800a754:	b21a      	sxth	r2, r3
 800a756:	7b7b      	ldrb	r3, [r7, #13]
 800a758:	b21b      	sxth	r3, r3
 800a75a:	4313      	orrs	r3, r2
 800a75c:	b21a      	sxth	r2, r3
 800a75e:	4b22      	ldr	r3, [pc, #136]	@ (800a7e8 <ReadMPU6050+0xe0>)
 800a760:	815a      	strh	r2, [r3, #10]

	uint8_t data[6];

	// Read 6 BYTES of data starting from GYRO_XOUT_H register
	HAL_I2C_Mem_Read (I2C_MPU6050, MPU6050_ADDR, GYRO_XOUT_H, 1, data, 6, 1000);
 800a762:	4b20      	ldr	r3, [pc, #128]	@ (800a7e4 <ReadMPU6050+0xdc>)
 800a764:	6818      	ldr	r0, [r3, #0]
 800a766:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a76a:	9302      	str	r3, [sp, #8]
 800a76c:	2306      	movs	r3, #6
 800a76e:	9301      	str	r3, [sp, #4]
 800a770:	463b      	mov	r3, r7
 800a772:	9300      	str	r3, [sp, #0]
 800a774:	2301      	movs	r3, #1
 800a776:	2243      	movs	r2, #67	@ 0x43
 800a778:	21d0      	movs	r1, #208	@ 0xd0
 800a77a:	f7f8 fd31 	bl	80031e0 <HAL_I2C_Mem_Read>

	// Step 3: Combine the high and low bytes into 16-bit values
	imu_data.gx = (int16_t)(data[0] << 8 | data[1]);  // X-axis gyroscope data
 800a77e:	783b      	ldrb	r3, [r7, #0]
 800a780:	021b      	lsls	r3, r3, #8
 800a782:	b21a      	sxth	r2, r3
 800a784:	787b      	ldrb	r3, [r7, #1]
 800a786:	b21b      	sxth	r3, r3
 800a788:	4313      	orrs	r3, r2
 800a78a:	b21a      	sxth	r2, r3
 800a78c:	4b16      	ldr	r3, [pc, #88]	@ (800a7e8 <ReadMPU6050+0xe0>)
 800a78e:	801a      	strh	r2, [r3, #0]
	imu_data.gy = (int16_t)(data[2] << 8 | data[3]);  // Y-axis gyroscope data
 800a790:	78bb      	ldrb	r3, [r7, #2]
 800a792:	021b      	lsls	r3, r3, #8
 800a794:	b21a      	sxth	r2, r3
 800a796:	78fb      	ldrb	r3, [r7, #3]
 800a798:	b21b      	sxth	r3, r3
 800a79a:	4313      	orrs	r3, r2
 800a79c:	b21a      	sxth	r2, r3
 800a79e:	4b12      	ldr	r3, [pc, #72]	@ (800a7e8 <ReadMPU6050+0xe0>)
 800a7a0:	805a      	strh	r2, [r3, #2]
	imu_data.gz = (int16_t)(data[4] << 8 | data[5]);  // Z-axis gyroscope data
 800a7a2:	793b      	ldrb	r3, [r7, #4]
 800a7a4:	021b      	lsls	r3, r3, #8
 800a7a6:	b21a      	sxth	r2, r3
 800a7a8:	797b      	ldrb	r3, [r7, #5]
 800a7aa:	b21b      	sxth	r3, r3
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	b21a      	sxth	r2, r3
 800a7b0:	4b0d      	ldr	r3, [pc, #52]	@ (800a7e8 <ReadMPU6050+0xe0>)
 800a7b2:	809a      	strh	r2, [r3, #4]

	imu_data.gz = imu_data.gz - gyro_offset;
 800a7b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a7e8 <ReadMPU6050+0xe0>)
 800a7b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a7ba:	ee07 3a90 	vmov	s15, r3
 800a7be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a7c2:	4b0a      	ldr	r3, [pc, #40]	@ (800a7ec <ReadMPU6050+0xe4>)
 800a7c4:	edd3 7a00 	vldr	s15, [r3]
 800a7c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a7d0:	ee17 3a90 	vmov	r3, s15
 800a7d4:	b21a      	sxth	r2, r3
 800a7d6:	4b04      	ldr	r3, [pc, #16]	@ (800a7e8 <ReadMPU6050+0xe0>)
 800a7d8:	809a      	strh	r2, [r3, #4]
}
 800a7da:	bf00      	nop
 800a7dc:	3710      	adds	r7, #16
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	bf00      	nop
 800a7e4:	20000814 	.word	0x20000814
 800a7e8:	20000818 	.word	0x20000818
 800a7ec:	20000824 	.word	0x20000824

0800a7f0 <MPU6050_calib>:
//}


float gyro_raw = 0;

void MPU6050_calib(){
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
	for(uint16_t i=0; i < 2000; i++){
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	80fb      	strh	r3, [r7, #6]
 800a7fa:	e016      	b.n	800a82a <MPU6050_calib+0x3a>
		ReadMPU6050();
 800a7fc:	f7ff ff84 	bl	800a708 <ReadMPU6050>
		gyro_raw += imu_data.gz;
 800a800:	4b13      	ldr	r3, [pc, #76]	@ (800a850 <MPU6050_calib+0x60>)
 800a802:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a806:	ee07 3a90 	vmov	s15, r3
 800a80a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a80e:	4b11      	ldr	r3, [pc, #68]	@ (800a854 <MPU6050_calib+0x64>)
 800a810:	edd3 7a00 	vldr	s15, [r3]
 800a814:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a818:	4b0e      	ldr	r3, [pc, #56]	@ (800a854 <MPU6050_calib+0x64>)
 800a81a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(1);
 800a81e:	2001      	movs	r0, #1
 800a820:	f7f7 fcc0 	bl	80021a4 <HAL_Delay>
	for(uint16_t i=0; i < 2000; i++){
 800a824:	88fb      	ldrh	r3, [r7, #6]
 800a826:	3301      	adds	r3, #1
 800a828:	80fb      	strh	r3, [r7, #6]
 800a82a:	88fb      	ldrh	r3, [r7, #6]
 800a82c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800a830:	d3e4      	bcc.n	800a7fc <MPU6050_calib+0xc>
	}
	gyro_offset = ((float)gyro_raw)/2000.0f;
 800a832:	4b08      	ldr	r3, [pc, #32]	@ (800a854 <MPU6050_calib+0x64>)
 800a834:	ed93 7a00 	vldr	s14, [r3]
 800a838:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800a858 <MPU6050_calib+0x68>
 800a83c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a840:	4b06      	ldr	r3, [pc, #24]	@ (800a85c <MPU6050_calib+0x6c>)
 800a842:	edc3 7a00 	vstr	s15, [r3]
}
 800a846:	bf00      	nop
 800a848:	3708      	adds	r7, #8
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	20000818 	.word	0x20000818
 800a854:	20000828 	.word	0x20000828
 800a858:	44fa0000 	.word	0x44fa0000
 800a85c:	20000824 	.word	0x20000824

0800a860 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	460b      	mov	r3, r1
 800a86a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a86c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a870:	f002 fc50 	bl	800d114 <USBD_static_malloc>
 800a874:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d109      	bne.n	800a890 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	32b0      	adds	r2, #176	@ 0xb0
 800a886:	2100      	movs	r1, #0
 800a888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a88c:	2302      	movs	r3, #2
 800a88e:	e0d4      	b.n	800aa3a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a890:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a894:	2100      	movs	r1, #0
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f002 fc80 	bl	800d19c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	32b0      	adds	r2, #176	@ 0xb0
 800a8a6:	68f9      	ldr	r1, [r7, #12]
 800a8a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	32b0      	adds	r2, #176	@ 0xb0
 800a8b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	7c1b      	ldrb	r3, [r3, #16]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d138      	bne.n	800a93a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a8c8:	4b5e      	ldr	r3, [pc, #376]	@ (800aa44 <USBD_CDC_Init+0x1e4>)
 800a8ca:	7819      	ldrb	r1, [r3, #0]
 800a8cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a8d0:	2202      	movs	r2, #2
 800a8d2:	6878      	ldr	r0, [r7, #4]
 800a8d4:	f002 fafb 	bl	800cece <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a8d8:	4b5a      	ldr	r3, [pc, #360]	@ (800aa44 <USBD_CDC_Init+0x1e4>)
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	f003 020f 	and.w	r2, r3, #15
 800a8e0:	6879      	ldr	r1, [r7, #4]
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	4413      	add	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	440b      	add	r3, r1
 800a8ec:	3324      	adds	r3, #36	@ 0x24
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a8f2:	4b55      	ldr	r3, [pc, #340]	@ (800aa48 <USBD_CDC_Init+0x1e8>)
 800a8f4:	7819      	ldrb	r1, [r3, #0]
 800a8f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a8fa:	2202      	movs	r2, #2
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f002 fae6 	bl	800cece <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a902:	4b51      	ldr	r3, [pc, #324]	@ (800aa48 <USBD_CDC_Init+0x1e8>)
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	f003 020f 	and.w	r2, r3, #15
 800a90a:	6879      	ldr	r1, [r7, #4]
 800a90c:	4613      	mov	r3, r2
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	4413      	add	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	440b      	add	r3, r1
 800a916:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a91a:	2201      	movs	r2, #1
 800a91c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a91e:	4b4b      	ldr	r3, [pc, #300]	@ (800aa4c <USBD_CDC_Init+0x1ec>)
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	f003 020f 	and.w	r2, r3, #15
 800a926:	6879      	ldr	r1, [r7, #4]
 800a928:	4613      	mov	r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	4413      	add	r3, r2
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	440b      	add	r3, r1
 800a932:	3326      	adds	r3, #38	@ 0x26
 800a934:	2210      	movs	r2, #16
 800a936:	801a      	strh	r2, [r3, #0]
 800a938:	e035      	b.n	800a9a6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a93a:	4b42      	ldr	r3, [pc, #264]	@ (800aa44 <USBD_CDC_Init+0x1e4>)
 800a93c:	7819      	ldrb	r1, [r3, #0]
 800a93e:	2340      	movs	r3, #64	@ 0x40
 800a940:	2202      	movs	r2, #2
 800a942:	6878      	ldr	r0, [r7, #4]
 800a944:	f002 fac3 	bl	800cece <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a948:	4b3e      	ldr	r3, [pc, #248]	@ (800aa44 <USBD_CDC_Init+0x1e4>)
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	f003 020f 	and.w	r2, r3, #15
 800a950:	6879      	ldr	r1, [r7, #4]
 800a952:	4613      	mov	r3, r2
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	4413      	add	r3, r2
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	440b      	add	r3, r1
 800a95c:	3324      	adds	r3, #36	@ 0x24
 800a95e:	2201      	movs	r2, #1
 800a960:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a962:	4b39      	ldr	r3, [pc, #228]	@ (800aa48 <USBD_CDC_Init+0x1e8>)
 800a964:	7819      	ldrb	r1, [r3, #0]
 800a966:	2340      	movs	r3, #64	@ 0x40
 800a968:	2202      	movs	r2, #2
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f002 faaf 	bl	800cece <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a970:	4b35      	ldr	r3, [pc, #212]	@ (800aa48 <USBD_CDC_Init+0x1e8>)
 800a972:	781b      	ldrb	r3, [r3, #0]
 800a974:	f003 020f 	and.w	r2, r3, #15
 800a978:	6879      	ldr	r1, [r7, #4]
 800a97a:	4613      	mov	r3, r2
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	4413      	add	r3, r2
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	440b      	add	r3, r1
 800a984:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a988:	2201      	movs	r2, #1
 800a98a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a98c:	4b2f      	ldr	r3, [pc, #188]	@ (800aa4c <USBD_CDC_Init+0x1ec>)
 800a98e:	781b      	ldrb	r3, [r3, #0]
 800a990:	f003 020f 	and.w	r2, r3, #15
 800a994:	6879      	ldr	r1, [r7, #4]
 800a996:	4613      	mov	r3, r2
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	4413      	add	r3, r2
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	440b      	add	r3, r1
 800a9a0:	3326      	adds	r3, #38	@ 0x26
 800a9a2:	2210      	movs	r2, #16
 800a9a4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a9a6:	4b29      	ldr	r3, [pc, #164]	@ (800aa4c <USBD_CDC_Init+0x1ec>)
 800a9a8:	7819      	ldrb	r1, [r3, #0]
 800a9aa:	2308      	movs	r3, #8
 800a9ac:	2203      	movs	r2, #3
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f002 fa8d 	bl	800cece <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a9b4:	4b25      	ldr	r3, [pc, #148]	@ (800aa4c <USBD_CDC_Init+0x1ec>)
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	f003 020f 	and.w	r2, r3, #15
 800a9bc:	6879      	ldr	r1, [r7, #4]
 800a9be:	4613      	mov	r3, r2
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	4413      	add	r3, r2
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	440b      	add	r3, r1
 800a9c8:	3324      	adds	r3, #36	@ 0x24
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	33b0      	adds	r3, #176	@ 0xb0
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	4413      	add	r3, r2
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d101      	bne.n	800aa08 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800aa04:	2302      	movs	r3, #2
 800aa06:	e018      	b.n	800aa3a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	7c1b      	ldrb	r3, [r3, #16]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d10a      	bne.n	800aa26 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa10:	4b0d      	ldr	r3, [pc, #52]	@ (800aa48 <USBD_CDC_Init+0x1e8>)
 800aa12:	7819      	ldrb	r1, [r3, #0]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f002 fb44 	bl	800d0ac <USBD_LL_PrepareReceive>
 800aa24:	e008      	b.n	800aa38 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa26:	4b08      	ldr	r3, [pc, #32]	@ (800aa48 <USBD_CDC_Init+0x1e8>)
 800aa28:	7819      	ldrb	r1, [r3, #0]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa30:	2340      	movs	r3, #64	@ 0x40
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f002 fb3a 	bl	800d0ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3710      	adds	r7, #16
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	200000a7 	.word	0x200000a7
 800aa48:	200000a8 	.word	0x200000a8
 800aa4c:	200000a9 	.word	0x200000a9

0800aa50 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800aa5c:	4b3a      	ldr	r3, [pc, #232]	@ (800ab48 <USBD_CDC_DeInit+0xf8>)
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	4619      	mov	r1, r3
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f002 fa59 	bl	800cf1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800aa68:	4b37      	ldr	r3, [pc, #220]	@ (800ab48 <USBD_CDC_DeInit+0xf8>)
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	f003 020f 	and.w	r2, r3, #15
 800aa70:	6879      	ldr	r1, [r7, #4]
 800aa72:	4613      	mov	r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	4413      	add	r3, r2
 800aa78:	009b      	lsls	r3, r3, #2
 800aa7a:	440b      	add	r3, r1
 800aa7c:	3324      	adds	r3, #36	@ 0x24
 800aa7e:	2200      	movs	r2, #0
 800aa80:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800aa82:	4b32      	ldr	r3, [pc, #200]	@ (800ab4c <USBD_CDC_DeInit+0xfc>)
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	4619      	mov	r1, r3
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f002 fa46 	bl	800cf1a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800aa8e:	4b2f      	ldr	r3, [pc, #188]	@ (800ab4c <USBD_CDC_DeInit+0xfc>)
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	f003 020f 	and.w	r2, r3, #15
 800aa96:	6879      	ldr	r1, [r7, #4]
 800aa98:	4613      	mov	r3, r2
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	4413      	add	r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	440b      	add	r3, r1
 800aaa2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800aaaa:	4b29      	ldr	r3, [pc, #164]	@ (800ab50 <USBD_CDC_DeInit+0x100>)
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	4619      	mov	r1, r3
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f002 fa32 	bl	800cf1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800aab6:	4b26      	ldr	r3, [pc, #152]	@ (800ab50 <USBD_CDC_DeInit+0x100>)
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	f003 020f 	and.w	r2, r3, #15
 800aabe:	6879      	ldr	r1, [r7, #4]
 800aac0:	4613      	mov	r3, r2
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	4413      	add	r3, r2
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	440b      	add	r3, r1
 800aaca:	3324      	adds	r3, #36	@ 0x24
 800aacc:	2200      	movs	r2, #0
 800aace:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800aad0:	4b1f      	ldr	r3, [pc, #124]	@ (800ab50 <USBD_CDC_DeInit+0x100>)
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	f003 020f 	and.w	r2, r3, #15
 800aad8:	6879      	ldr	r1, [r7, #4]
 800aada:	4613      	mov	r3, r2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	4413      	add	r3, r2
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	440b      	add	r3, r1
 800aae4:	3326      	adds	r3, #38	@ 0x26
 800aae6:	2200      	movs	r2, #0
 800aae8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	32b0      	adds	r2, #176	@ 0xb0
 800aaf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d01f      	beq.n	800ab3c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	33b0      	adds	r3, #176	@ 0xb0
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	4413      	add	r3, r2
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	32b0      	adds	r2, #176	@ 0xb0
 800ab1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f002 fb06 	bl	800d130 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	32b0      	adds	r2, #176	@ 0xb0
 800ab2e:	2100      	movs	r1, #0
 800ab30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2200      	movs	r2, #0
 800ab38:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	200000a7 	.word	0x200000a7
 800ab4c:	200000a8 	.word	0x200000a8
 800ab50:	200000a9 	.word	0x200000a9

0800ab54 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b086      	sub	sp, #24
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	32b0      	adds	r2, #176	@ 0xb0
 800ab68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab6c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ab72:	2300      	movs	r3, #0
 800ab74:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab76:	2300      	movs	r3, #0
 800ab78:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d101      	bne.n	800ab84 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ab80:	2303      	movs	r3, #3
 800ab82:	e0bf      	b.n	800ad04 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d050      	beq.n	800ac32 <USBD_CDC_Setup+0xde>
 800ab90:	2b20      	cmp	r3, #32
 800ab92:	f040 80af 	bne.w	800acf4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	88db      	ldrh	r3, [r3, #6]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d03a      	beq.n	800ac14 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	b25b      	sxtb	r3, r3
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	da1b      	bge.n	800abe0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	33b0      	adds	r3, #176	@ 0xb0
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	4413      	add	r3, r2
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	683a      	ldr	r2, [r7, #0]
 800abbc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800abbe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800abc0:	683a      	ldr	r2, [r7, #0]
 800abc2:	88d2      	ldrh	r2, [r2, #6]
 800abc4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	88db      	ldrh	r3, [r3, #6]
 800abca:	2b07      	cmp	r3, #7
 800abcc:	bf28      	it	cs
 800abce:	2307      	movcs	r3, #7
 800abd0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	89fa      	ldrh	r2, [r7, #14]
 800abd6:	4619      	mov	r1, r3
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f001 fd53 	bl	800c684 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800abde:	e090      	b.n	800ad02 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	785a      	ldrb	r2, [r3, #1]
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	88db      	ldrh	r3, [r3, #6]
 800abee:	2b3f      	cmp	r3, #63	@ 0x3f
 800abf0:	d803      	bhi.n	800abfa <USBD_CDC_Setup+0xa6>
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	88db      	ldrh	r3, [r3, #6]
 800abf6:	b2da      	uxtb	r2, r3
 800abf8:	e000      	b.n	800abfc <USBD_CDC_Setup+0xa8>
 800abfa:	2240      	movs	r2, #64	@ 0x40
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ac02:	6939      	ldr	r1, [r7, #16]
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f001 fd65 	bl	800c6dc <USBD_CtlPrepareRx>
      break;
 800ac12:	e076      	b.n	800ad02 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac1a:	687a      	ldr	r2, [r7, #4]
 800ac1c:	33b0      	adds	r3, #176	@ 0xb0
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	4413      	add	r3, r2
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	683a      	ldr	r2, [r7, #0]
 800ac28:	7850      	ldrb	r0, [r2, #1]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	6839      	ldr	r1, [r7, #0]
 800ac2e:	4798      	blx	r3
      break;
 800ac30:	e067      	b.n	800ad02 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	785b      	ldrb	r3, [r3, #1]
 800ac36:	2b0b      	cmp	r3, #11
 800ac38:	d851      	bhi.n	800acde <USBD_CDC_Setup+0x18a>
 800ac3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac40 <USBD_CDC_Setup+0xec>)
 800ac3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac40:	0800ac71 	.word	0x0800ac71
 800ac44:	0800aced 	.word	0x0800aced
 800ac48:	0800acdf 	.word	0x0800acdf
 800ac4c:	0800acdf 	.word	0x0800acdf
 800ac50:	0800acdf 	.word	0x0800acdf
 800ac54:	0800acdf 	.word	0x0800acdf
 800ac58:	0800acdf 	.word	0x0800acdf
 800ac5c:	0800acdf 	.word	0x0800acdf
 800ac60:	0800acdf 	.word	0x0800acdf
 800ac64:	0800acdf 	.word	0x0800acdf
 800ac68:	0800ac9b 	.word	0x0800ac9b
 800ac6c:	0800acc5 	.word	0x0800acc5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac76:	b2db      	uxtb	r3, r3
 800ac78:	2b03      	cmp	r3, #3
 800ac7a:	d107      	bne.n	800ac8c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ac7c:	f107 030a 	add.w	r3, r7, #10
 800ac80:	2202      	movs	r2, #2
 800ac82:	4619      	mov	r1, r3
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f001 fcfd 	bl	800c684 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ac8a:	e032      	b.n	800acf2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ac8c:	6839      	ldr	r1, [r7, #0]
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f001 fc7b 	bl	800c58a <USBD_CtlError>
            ret = USBD_FAIL;
 800ac94:	2303      	movs	r3, #3
 800ac96:	75fb      	strb	r3, [r7, #23]
          break;
 800ac98:	e02b      	b.n	800acf2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	2b03      	cmp	r3, #3
 800aca4:	d107      	bne.n	800acb6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aca6:	f107 030d 	add.w	r3, r7, #13
 800acaa:	2201      	movs	r2, #1
 800acac:	4619      	mov	r1, r3
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f001 fce8 	bl	800c684 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800acb4:	e01d      	b.n	800acf2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800acb6:	6839      	ldr	r1, [r7, #0]
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f001 fc66 	bl	800c58a <USBD_CtlError>
            ret = USBD_FAIL;
 800acbe:	2303      	movs	r3, #3
 800acc0:	75fb      	strb	r3, [r7, #23]
          break;
 800acc2:	e016      	b.n	800acf2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800acca:	b2db      	uxtb	r3, r3
 800accc:	2b03      	cmp	r3, #3
 800acce:	d00f      	beq.n	800acf0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800acd0:	6839      	ldr	r1, [r7, #0]
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f001 fc59 	bl	800c58a <USBD_CtlError>
            ret = USBD_FAIL;
 800acd8:	2303      	movs	r3, #3
 800acda:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800acdc:	e008      	b.n	800acf0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800acde:	6839      	ldr	r1, [r7, #0]
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f001 fc52 	bl	800c58a <USBD_CtlError>
          ret = USBD_FAIL;
 800ace6:	2303      	movs	r3, #3
 800ace8:	75fb      	strb	r3, [r7, #23]
          break;
 800acea:	e002      	b.n	800acf2 <USBD_CDC_Setup+0x19e>
          break;
 800acec:	bf00      	nop
 800acee:	e008      	b.n	800ad02 <USBD_CDC_Setup+0x1ae>
          break;
 800acf0:	bf00      	nop
      }
      break;
 800acf2:	e006      	b.n	800ad02 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800acf4:	6839      	ldr	r1, [r7, #0]
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f001 fc47 	bl	800c58a <USBD_CtlError>
      ret = USBD_FAIL;
 800acfc:	2303      	movs	r3, #3
 800acfe:	75fb      	strb	r3, [r7, #23]
      break;
 800ad00:	bf00      	nop
  }

  return (uint8_t)ret;
 800ad02:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3718      	adds	r7, #24
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	460b      	mov	r3, r1
 800ad16:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	32b0      	adds	r2, #176	@ 0xb0
 800ad2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d101      	bne.n	800ad36 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ad32:	2303      	movs	r3, #3
 800ad34:	e065      	b.n	800ae02 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	32b0      	adds	r2, #176	@ 0xb0
 800ad40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad44:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ad46:	78fb      	ldrb	r3, [r7, #3]
 800ad48:	f003 020f 	and.w	r2, r3, #15
 800ad4c:	6879      	ldr	r1, [r7, #4]
 800ad4e:	4613      	mov	r3, r2
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4413      	add	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	440b      	add	r3, r1
 800ad58:	3318      	adds	r3, #24
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d02f      	beq.n	800adc0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ad60:	78fb      	ldrb	r3, [r7, #3]
 800ad62:	f003 020f 	and.w	r2, r3, #15
 800ad66:	6879      	ldr	r1, [r7, #4]
 800ad68:	4613      	mov	r3, r2
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	4413      	add	r3, r2
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	440b      	add	r3, r1
 800ad72:	3318      	adds	r3, #24
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	78fb      	ldrb	r3, [r7, #3]
 800ad78:	f003 010f 	and.w	r1, r3, #15
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	460b      	mov	r3, r1
 800ad80:	00db      	lsls	r3, r3, #3
 800ad82:	440b      	add	r3, r1
 800ad84:	009b      	lsls	r3, r3, #2
 800ad86:	4403      	add	r3, r0
 800ad88:	331c      	adds	r3, #28
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ad90:	fb01 f303 	mul.w	r3, r1, r3
 800ad94:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d112      	bne.n	800adc0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ad9a:	78fb      	ldrb	r3, [r7, #3]
 800ad9c:	f003 020f 	and.w	r2, r3, #15
 800ada0:	6879      	ldr	r1, [r7, #4]
 800ada2:	4613      	mov	r3, r2
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	4413      	add	r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	440b      	add	r3, r1
 800adac:	3318      	adds	r3, #24
 800adae:	2200      	movs	r2, #0
 800adb0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800adb2:	78f9      	ldrb	r1, [r7, #3]
 800adb4:	2300      	movs	r3, #0
 800adb6:	2200      	movs	r2, #0
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f002 f956 	bl	800d06a <USBD_LL_Transmit>
 800adbe:	e01f      	b.n	800ae00 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	2200      	movs	r2, #0
 800adc4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	33b0      	adds	r3, #176	@ 0xb0
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	4413      	add	r3, r2
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	691b      	ldr	r3, [r3, #16]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d010      	beq.n	800ae00 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	33b0      	adds	r3, #176	@ 0xb0
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	4413      	add	r3, r2
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	691b      	ldr	r3, [r3, #16]
 800adf0:	68ba      	ldr	r2, [r7, #8]
 800adf2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800adf6:	68ba      	ldr	r2, [r7, #8]
 800adf8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800adfc:	78fa      	ldrb	r2, [r7, #3]
 800adfe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b084      	sub	sp, #16
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
 800ae12:	460b      	mov	r3, r1
 800ae14:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	32b0      	adds	r2, #176	@ 0xb0
 800ae20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae24:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	32b0      	adds	r2, #176	@ 0xb0
 800ae30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d101      	bne.n	800ae3c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ae38:	2303      	movs	r3, #3
 800ae3a:	e01a      	b.n	800ae72 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ae3c:	78fb      	ldrb	r3, [r7, #3]
 800ae3e:	4619      	mov	r1, r3
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f002 f954 	bl	800d0ee <USBD_LL_GetRxDataSize>
 800ae46:	4602      	mov	r2, r0
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	33b0      	adds	r3, #176	@ 0xb0
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4413      	add	r3, r2
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	68fa      	ldr	r2, [r7, #12]
 800ae62:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ae66:	68fa      	ldr	r2, [r7, #12]
 800ae68:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ae6c:	4611      	mov	r1, r2
 800ae6e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ae70:	2300      	movs	r3, #0
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b084      	sub	sp, #16
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	32b0      	adds	r2, #176	@ 0xb0
 800ae8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d101      	bne.n	800ae9c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ae98:	2303      	movs	r3, #3
 800ae9a:	e024      	b.n	800aee6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	33b0      	adds	r3, #176	@ 0xb0
 800aea6:	009b      	lsls	r3, r3, #2
 800aea8:	4413      	add	r3, r2
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d019      	beq.n	800aee4 <USBD_CDC_EP0_RxReady+0x6a>
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800aeb6:	2bff      	cmp	r3, #255	@ 0xff
 800aeb8:	d014      	beq.n	800aee4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	33b0      	adds	r3, #176	@ 0xb0
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	4413      	add	r3, r2
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800aed2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800aed4:	68fa      	ldr	r2, [r7, #12]
 800aed6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800aeda:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	22ff      	movs	r2, #255	@ 0xff
 800aee0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800aee4:	2300      	movs	r3, #0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3710      	adds	r7, #16
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
	...

0800aef0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b086      	sub	sp, #24
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aef8:	2182      	movs	r1, #130	@ 0x82
 800aefa:	4818      	ldr	r0, [pc, #96]	@ (800af5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800aefc:	f000 fd0f 	bl	800b91e <USBD_GetEpDesc>
 800af00:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800af02:	2101      	movs	r1, #1
 800af04:	4815      	ldr	r0, [pc, #84]	@ (800af5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800af06:	f000 fd0a 	bl	800b91e <USBD_GetEpDesc>
 800af0a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800af0c:	2181      	movs	r1, #129	@ 0x81
 800af0e:	4813      	ldr	r0, [pc, #76]	@ (800af5c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800af10:	f000 fd05 	bl	800b91e <USBD_GetEpDesc>
 800af14:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d002      	beq.n	800af22 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	2210      	movs	r2, #16
 800af20:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d006      	beq.n	800af36 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af30:	711a      	strb	r2, [r3, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d006      	beq.n	800af4a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2200      	movs	r2, #0
 800af40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800af44:	711a      	strb	r2, [r3, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2243      	movs	r2, #67	@ 0x43
 800af4e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800af50:	4b02      	ldr	r3, [pc, #8]	@ (800af5c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800af52:	4618      	mov	r0, r3
 800af54:	3718      	adds	r7, #24
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	20000064 	.word	0x20000064

0800af60 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b086      	sub	sp, #24
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800af68:	2182      	movs	r1, #130	@ 0x82
 800af6a:	4818      	ldr	r0, [pc, #96]	@ (800afcc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800af6c:	f000 fcd7 	bl	800b91e <USBD_GetEpDesc>
 800af70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800af72:	2101      	movs	r1, #1
 800af74:	4815      	ldr	r0, [pc, #84]	@ (800afcc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800af76:	f000 fcd2 	bl	800b91e <USBD_GetEpDesc>
 800af7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800af7c:	2181      	movs	r1, #129	@ 0x81
 800af7e:	4813      	ldr	r0, [pc, #76]	@ (800afcc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800af80:	f000 fccd 	bl	800b91e <USBD_GetEpDesc>
 800af84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d002      	beq.n	800af92 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	2210      	movs	r2, #16
 800af90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d006      	beq.n	800afa6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	2200      	movs	r2, #0
 800af9c:	711a      	strb	r2, [r3, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f042 0202 	orr.w	r2, r2, #2
 800afa4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d006      	beq.n	800afba <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	711a      	strb	r2, [r3, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f042 0202 	orr.w	r2, r2, #2
 800afb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2243      	movs	r2, #67	@ 0x43
 800afbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800afc0:	4b02      	ldr	r3, [pc, #8]	@ (800afcc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3718      	adds	r7, #24
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	20000064 	.word	0x20000064

0800afd0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b086      	sub	sp, #24
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800afd8:	2182      	movs	r1, #130	@ 0x82
 800afda:	4818      	ldr	r0, [pc, #96]	@ (800b03c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800afdc:	f000 fc9f 	bl	800b91e <USBD_GetEpDesc>
 800afe0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800afe2:	2101      	movs	r1, #1
 800afe4:	4815      	ldr	r0, [pc, #84]	@ (800b03c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800afe6:	f000 fc9a 	bl	800b91e <USBD_GetEpDesc>
 800afea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800afec:	2181      	movs	r1, #129	@ 0x81
 800afee:	4813      	ldr	r0, [pc, #76]	@ (800b03c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aff0:	f000 fc95 	bl	800b91e <USBD_GetEpDesc>
 800aff4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d002      	beq.n	800b002 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	2210      	movs	r2, #16
 800b000:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d006      	beq.n	800b016 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	2200      	movs	r2, #0
 800b00c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b010:	711a      	strb	r2, [r3, #4]
 800b012:	2200      	movs	r2, #0
 800b014:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d006      	beq.n	800b02a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2200      	movs	r2, #0
 800b020:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b024:	711a      	strb	r2, [r3, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2243      	movs	r2, #67	@ 0x43
 800b02e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b030:	4b02      	ldr	r3, [pc, #8]	@ (800b03c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b032:	4618      	mov	r0, r3
 800b034:	3718      	adds	r7, #24
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	20000064 	.word	0x20000064

0800b040 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	220a      	movs	r2, #10
 800b04c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b04e:	4b03      	ldr	r3, [pc, #12]	@ (800b05c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b050:	4618      	mov	r0, r3
 800b052:	370c      	adds	r7, #12
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr
 800b05c:	20000020 	.word	0x20000020

0800b060 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b060:	b480      	push	{r7}
 800b062:	b083      	sub	sp, #12
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d101      	bne.n	800b074 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b070:	2303      	movs	r3, #3
 800b072:	e009      	b.n	800b088 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	33b0      	adds	r3, #176	@ 0xb0
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	4413      	add	r3, r2
 800b082:	683a      	ldr	r2, [r7, #0]
 800b084:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b086:	2300      	movs	r3, #0
}
 800b088:	4618      	mov	r0, r3
 800b08a:	370c      	adds	r7, #12
 800b08c:	46bd      	mov	sp, r7
 800b08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b092:	4770      	bx	lr

0800b094 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b094:	b480      	push	{r7}
 800b096:	b087      	sub	sp, #28
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	32b0      	adds	r2, #176	@ 0xb0
 800b0aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ae:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d101      	bne.n	800b0ba <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b0b6:	2303      	movs	r3, #3
 800b0b8:	e008      	b.n	800b0cc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	68ba      	ldr	r2, [r7, #8]
 800b0be:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	371c      	adds	r7, #28
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d6:	4770      	bx	lr

0800b0d8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b085      	sub	sp, #20
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	32b0      	adds	r2, #176	@ 0xb0
 800b0ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0f0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b0f8:	2303      	movs	r3, #3
 800b0fa:	e004      	b.n	800b106 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	683a      	ldr	r2, [r7, #0]
 800b100:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b104:	2300      	movs	r3, #0
}
 800b106:	4618      	mov	r0, r3
 800b108:	3714      	adds	r7, #20
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
	...

0800b114 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	32b0      	adds	r2, #176	@ 0xb0
 800b126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b12a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	32b0      	adds	r2, #176	@ 0xb0
 800b136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d101      	bne.n	800b142 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b13e:	2303      	movs	r3, #3
 800b140:	e018      	b.n	800b174 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	7c1b      	ldrb	r3, [r3, #16]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d10a      	bne.n	800b160 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b14a:	4b0c      	ldr	r3, [pc, #48]	@ (800b17c <USBD_CDC_ReceivePacket+0x68>)
 800b14c:	7819      	ldrb	r1, [r3, #0]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b154:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f001 ffa7 	bl	800d0ac <USBD_LL_PrepareReceive>
 800b15e:	e008      	b.n	800b172 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b160:	4b06      	ldr	r3, [pc, #24]	@ (800b17c <USBD_CDC_ReceivePacket+0x68>)
 800b162:	7819      	ldrb	r1, [r3, #0]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b16a:	2340      	movs	r3, #64	@ 0x40
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f001 ff9d 	bl	800d0ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3710      	adds	r7, #16
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}
 800b17c:	200000a8 	.word	0x200000a8

0800b180 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b086      	sub	sp, #24
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	4613      	mov	r3, r2
 800b18c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d101      	bne.n	800b198 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b194:	2303      	movs	r3, #3
 800b196:	e01f      	b.n	800b1d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2200      	movs	r2, #0
 800b19c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d003      	beq.n	800b1be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	68ba      	ldr	r2, [r7, #8]
 800b1ba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	79fa      	ldrb	r2, [r7, #7]
 800b1ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b1cc:	68f8      	ldr	r0, [r7, #12]
 800b1ce:	f001 fe17 	bl	800ce00 <USBD_LL_Init>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b1d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3718      	adds	r7, #24
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d101      	bne.n	800b1f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b1f4:	2303      	movs	r3, #3
 800b1f6:	e025      	b.n	800b244 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	683a      	ldr	r2, [r7, #0]
 800b1fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	32ae      	adds	r2, #174	@ 0xae
 800b20a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b20e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b210:	2b00      	cmp	r3, #0
 800b212:	d00f      	beq.n	800b234 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	32ae      	adds	r2, #174	@ 0xae
 800b21e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b224:	f107 020e 	add.w	r2, r7, #14
 800b228:	4610      	mov	r0, r2
 800b22a:	4798      	blx	r3
 800b22c:	4602      	mov	r2, r0
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b23a:	1c5a      	adds	r2, r3, #1
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b242:	2300      	movs	r3, #0
}
 800b244:	4618      	mov	r0, r3
 800b246:	3710      	adds	r7, #16
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f001 fe1f 	bl	800ce98 <USBD_LL_Start>
 800b25a:	4603      	mov	r3, r0
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3708      	adds	r7, #8
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b264:	b480      	push	{r7}
 800b266:	b083      	sub	sp, #12
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b26c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b26e:	4618      	mov	r0, r3
 800b270:	370c      	adds	r7, #12
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr

0800b27a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b084      	sub	sp, #16
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
 800b282:	460b      	mov	r3, r1
 800b284:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b286:	2300      	movs	r3, #0
 800b288:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b290:	2b00      	cmp	r3, #0
 800b292:	d009      	beq.n	800b2a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	78fa      	ldrb	r2, [r7, #3]
 800b29e:	4611      	mov	r1, r2
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	4798      	blx	r3
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3710      	adds	r7, #16
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b084      	sub	sp, #16
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	78fa      	ldrb	r2, [r7, #3]
 800b2cc:	4611      	mov	r1, r2
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	4798      	blx	r3
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d001      	beq.n	800b2dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b2d8:	2303      	movs	r3, #3
 800b2da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b084      	sub	sp, #16
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
 800b2ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b2f6:	6839      	ldr	r1, [r7, #0]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f001 f90c 	bl	800c516 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2201      	movs	r2, #1
 800b302:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b30c:	461a      	mov	r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b31a:	f003 031f 	and.w	r3, r3, #31
 800b31e:	2b02      	cmp	r3, #2
 800b320:	d01a      	beq.n	800b358 <USBD_LL_SetupStage+0x72>
 800b322:	2b02      	cmp	r3, #2
 800b324:	d822      	bhi.n	800b36c <USBD_LL_SetupStage+0x86>
 800b326:	2b00      	cmp	r3, #0
 800b328:	d002      	beq.n	800b330 <USBD_LL_SetupStage+0x4a>
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d00a      	beq.n	800b344 <USBD_LL_SetupStage+0x5e>
 800b32e:	e01d      	b.n	800b36c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b336:	4619      	mov	r1, r3
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 fb63 	bl	800ba04 <USBD_StdDevReq>
 800b33e:	4603      	mov	r3, r0
 800b340:	73fb      	strb	r3, [r7, #15]
      break;
 800b342:	e020      	b.n	800b386 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b34a:	4619      	mov	r1, r3
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 fbcb 	bl	800bae8 <USBD_StdItfReq>
 800b352:	4603      	mov	r3, r0
 800b354:	73fb      	strb	r3, [r7, #15]
      break;
 800b356:	e016      	b.n	800b386 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b35e:	4619      	mov	r1, r3
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f000 fc2d 	bl	800bbc0 <USBD_StdEPReq>
 800b366:	4603      	mov	r3, r0
 800b368:	73fb      	strb	r3, [r7, #15]
      break;
 800b36a:	e00c      	b.n	800b386 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b372:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b376:	b2db      	uxtb	r3, r3
 800b378:	4619      	mov	r1, r3
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f001 fdec 	bl	800cf58 <USBD_LL_StallEP>
 800b380:	4603      	mov	r3, r0
 800b382:	73fb      	strb	r3, [r7, #15]
      break;
 800b384:	bf00      	nop
  }

  return ret;
 800b386:	7bfb      	ldrb	r3, [r7, #15]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3710      	adds	r7, #16
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b086      	sub	sp, #24
 800b394:	af00      	add	r7, sp, #0
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	460b      	mov	r3, r1
 800b39a:	607a      	str	r2, [r7, #4]
 800b39c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b3a2:	7afb      	ldrb	r3, [r7, #11]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d16e      	bne.n	800b486 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b3ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b3b6:	2b03      	cmp	r3, #3
 800b3b8:	f040 8098 	bne.w	800b4ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	689a      	ldr	r2, [r3, #8]
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d913      	bls.n	800b3f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	689a      	ldr	r2, [r3, #8]
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	1ad2      	subs	r2, r2, r3
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	68da      	ldr	r2, [r3, #12]
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	689b      	ldr	r3, [r3, #8]
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	bf28      	it	cs
 800b3e2:	4613      	movcs	r3, r2
 800b3e4:	461a      	mov	r2, r3
 800b3e6:	6879      	ldr	r1, [r7, #4]
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f001 f994 	bl	800c716 <USBD_CtlContinueRx>
 800b3ee:	e07d      	b.n	800b4ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b3f6:	f003 031f 	and.w	r3, r3, #31
 800b3fa:	2b02      	cmp	r3, #2
 800b3fc:	d014      	beq.n	800b428 <USBD_LL_DataOutStage+0x98>
 800b3fe:	2b02      	cmp	r3, #2
 800b400:	d81d      	bhi.n	800b43e <USBD_LL_DataOutStage+0xae>
 800b402:	2b00      	cmp	r3, #0
 800b404:	d002      	beq.n	800b40c <USBD_LL_DataOutStage+0x7c>
 800b406:	2b01      	cmp	r3, #1
 800b408:	d003      	beq.n	800b412 <USBD_LL_DataOutStage+0x82>
 800b40a:	e018      	b.n	800b43e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b40c:	2300      	movs	r3, #0
 800b40e:	75bb      	strb	r3, [r7, #22]
            break;
 800b410:	e018      	b.n	800b444 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	4619      	mov	r1, r3
 800b41c:	68f8      	ldr	r0, [r7, #12]
 800b41e:	f000 fa64 	bl	800b8ea <USBD_CoreFindIF>
 800b422:	4603      	mov	r3, r0
 800b424:	75bb      	strb	r3, [r7, #22]
            break;
 800b426:	e00d      	b.n	800b444 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	4619      	mov	r1, r3
 800b432:	68f8      	ldr	r0, [r7, #12]
 800b434:	f000 fa66 	bl	800b904 <USBD_CoreFindEP>
 800b438:	4603      	mov	r3, r0
 800b43a:	75bb      	strb	r3, [r7, #22]
            break;
 800b43c:	e002      	b.n	800b444 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b43e:	2300      	movs	r3, #0
 800b440:	75bb      	strb	r3, [r7, #22]
            break;
 800b442:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b444:	7dbb      	ldrb	r3, [r7, #22]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d119      	bne.n	800b47e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b450:	b2db      	uxtb	r3, r3
 800b452:	2b03      	cmp	r3, #3
 800b454:	d113      	bne.n	800b47e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b456:	7dba      	ldrb	r2, [r7, #22]
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	32ae      	adds	r2, #174	@ 0xae
 800b45c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b460:	691b      	ldr	r3, [r3, #16]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00b      	beq.n	800b47e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b466:	7dba      	ldrb	r2, [r7, #22]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b46e:	7dba      	ldrb	r2, [r7, #22]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	32ae      	adds	r2, #174	@ 0xae
 800b474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	68f8      	ldr	r0, [r7, #12]
 800b47c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f001 f95a 	bl	800c738 <USBD_CtlSendStatus>
 800b484:	e032      	b.n	800b4ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b486:	7afb      	ldrb	r3, [r7, #11]
 800b488:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	4619      	mov	r1, r3
 800b490:	68f8      	ldr	r0, [r7, #12]
 800b492:	f000 fa37 	bl	800b904 <USBD_CoreFindEP>
 800b496:	4603      	mov	r3, r0
 800b498:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b49a:	7dbb      	ldrb	r3, [r7, #22]
 800b49c:	2bff      	cmp	r3, #255	@ 0xff
 800b49e:	d025      	beq.n	800b4ec <USBD_LL_DataOutStage+0x15c>
 800b4a0:	7dbb      	ldrb	r3, [r7, #22]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d122      	bne.n	800b4ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	2b03      	cmp	r3, #3
 800b4b0:	d117      	bne.n	800b4e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b4b2:	7dba      	ldrb	r2, [r7, #22]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	32ae      	adds	r2, #174	@ 0xae
 800b4b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4bc:	699b      	ldr	r3, [r3, #24]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00f      	beq.n	800b4e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b4c2:	7dba      	ldrb	r2, [r7, #22]
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b4ca:	7dba      	ldrb	r2, [r7, #22]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	32ae      	adds	r2, #174	@ 0xae
 800b4d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4d4:	699b      	ldr	r3, [r3, #24]
 800b4d6:	7afa      	ldrb	r2, [r7, #11]
 800b4d8:	4611      	mov	r1, r2
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	4798      	blx	r3
 800b4de:	4603      	mov	r3, r0
 800b4e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b4e2:	7dfb      	ldrb	r3, [r7, #23]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d001      	beq.n	800b4ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b4e8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ea:	e000      	b.n	800b4ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3718      	adds	r7, #24
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b086      	sub	sp, #24
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	60f8      	str	r0, [r7, #12]
 800b4fe:	460b      	mov	r3, r1
 800b500:	607a      	str	r2, [r7, #4]
 800b502:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b504:	7afb      	ldrb	r3, [r7, #11]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d16f      	bne.n	800b5ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	3314      	adds	r3, #20
 800b50e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b516:	2b02      	cmp	r3, #2
 800b518:	d15a      	bne.n	800b5d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	689a      	ldr	r2, [r3, #8]
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	68db      	ldr	r3, [r3, #12]
 800b522:	429a      	cmp	r2, r3
 800b524:	d914      	bls.n	800b550 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	689a      	ldr	r2, [r3, #8]
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	68db      	ldr	r3, [r3, #12]
 800b52e:	1ad2      	subs	r2, r2, r3
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	461a      	mov	r2, r3
 800b53a:	6879      	ldr	r1, [r7, #4]
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f001 f8bc 	bl	800c6ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b542:	2300      	movs	r3, #0
 800b544:	2200      	movs	r2, #0
 800b546:	2100      	movs	r1, #0
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f001 fdaf 	bl	800d0ac <USBD_LL_PrepareReceive>
 800b54e:	e03f      	b.n	800b5d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	68da      	ldr	r2, [r3, #12]
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d11c      	bne.n	800b596 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	685a      	ldr	r2, [r3, #4]
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b564:	429a      	cmp	r2, r3
 800b566:	d316      	bcc.n	800b596 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	685a      	ldr	r2, [r3, #4]
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b572:	429a      	cmp	r2, r3
 800b574:	d20f      	bcs.n	800b596 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b576:	2200      	movs	r2, #0
 800b578:	2100      	movs	r1, #0
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	f001 f89d 	bl	800c6ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2200      	movs	r2, #0
 800b584:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b588:	2300      	movs	r3, #0
 800b58a:	2200      	movs	r2, #0
 800b58c:	2100      	movs	r1, #0
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	f001 fd8c 	bl	800d0ac <USBD_LL_PrepareReceive>
 800b594:	e01c      	b.n	800b5d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	2b03      	cmp	r3, #3
 800b5a0:	d10f      	bne.n	800b5c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d009      	beq.n	800b5c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5bc:	68db      	ldr	r3, [r3, #12]
 800b5be:	68f8      	ldr	r0, [r7, #12]
 800b5c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5c2:	2180      	movs	r1, #128	@ 0x80
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f001 fcc7 	bl	800cf58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b5ca:	68f8      	ldr	r0, [r7, #12]
 800b5cc:	f001 f8c7 	bl	800c75e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d03a      	beq.n	800b650 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	f7ff fe42 	bl	800b264 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b5e8:	e032      	b.n	800b650 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b5ea:	7afb      	ldrb	r3, [r7, #11]
 800b5ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	f000 f985 	bl	800b904 <USBD_CoreFindEP>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b5fe:	7dfb      	ldrb	r3, [r7, #23]
 800b600:	2bff      	cmp	r3, #255	@ 0xff
 800b602:	d025      	beq.n	800b650 <USBD_LL_DataInStage+0x15a>
 800b604:	7dfb      	ldrb	r3, [r7, #23]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d122      	bne.n	800b650 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b610:	b2db      	uxtb	r3, r3
 800b612:	2b03      	cmp	r3, #3
 800b614:	d11c      	bne.n	800b650 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b616:	7dfa      	ldrb	r2, [r7, #23]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	32ae      	adds	r2, #174	@ 0xae
 800b61c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b620:	695b      	ldr	r3, [r3, #20]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d014      	beq.n	800b650 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b626:	7dfa      	ldrb	r2, [r7, #23]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b62e:	7dfa      	ldrb	r2, [r7, #23]
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	32ae      	adds	r2, #174	@ 0xae
 800b634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b638:	695b      	ldr	r3, [r3, #20]
 800b63a:	7afa      	ldrb	r2, [r7, #11]
 800b63c:	4611      	mov	r1, r2
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	4798      	blx	r3
 800b642:	4603      	mov	r3, r0
 800b644:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b646:	7dbb      	ldrb	r3, [r7, #22]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d001      	beq.n	800b650 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b64c:	7dbb      	ldrb	r3, [r7, #22]
 800b64e:	e000      	b.n	800b652 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b650:	2300      	movs	r3, #0
}
 800b652:	4618      	mov	r0, r3
 800b654:	3718      	adds	r7, #24
 800b656:	46bd      	mov	sp, r7
 800b658:	bd80      	pop	{r7, pc}

0800b65a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b65a:	b580      	push	{r7, lr}
 800b65c:	b084      	sub	sp, #16
 800b65e:	af00      	add	r7, sp, #0
 800b660:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b662:	2300      	movs	r3, #0
 800b664:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2201      	movs	r2, #1
 800b66a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2200      	movs	r2, #0
 800b67a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2200      	movs	r2, #0
 800b688:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b692:	2b00      	cmp	r3, #0
 800b694:	d014      	beq.n	800b6c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d00e      	beq.n	800b6c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	687a      	ldr	r2, [r7, #4]
 800b6ac:	6852      	ldr	r2, [r2, #4]
 800b6ae:	b2d2      	uxtb	r2, r2
 800b6b0:	4611      	mov	r1, r2
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	4798      	blx	r3
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d001      	beq.n	800b6c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b6bc:	2303      	movs	r3, #3
 800b6be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b6c0:	2340      	movs	r3, #64	@ 0x40
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f001 fc01 	bl	800cece <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2240      	movs	r2, #64	@ 0x40
 800b6d8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b6dc:	2340      	movs	r3, #64	@ 0x40
 800b6de:	2200      	movs	r2, #0
 800b6e0:	2180      	movs	r1, #128	@ 0x80
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f001 fbf3 	bl	800cece <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2240      	movs	r2, #64	@ 0x40
 800b6f2:	621a      	str	r2, [r3, #32]

  return ret;
 800b6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b6fe:	b480      	push	{r7}
 800b700:	b083      	sub	sp, #12
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
 800b706:	460b      	mov	r3, r1
 800b708:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	78fa      	ldrb	r2, [r7, #3]
 800b70e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b710:	2300      	movs	r3, #0
}
 800b712:	4618      	mov	r0, r3
 800b714:	370c      	adds	r7, #12
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr

0800b71e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b71e:	b480      	push	{r7}
 800b720:	b083      	sub	sp, #12
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	2b04      	cmp	r3, #4
 800b730:	d006      	beq.n	800b740 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b738:	b2da      	uxtb	r2, r3
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2204      	movs	r2, #4
 800b744:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b748:	2300      	movs	r3, #0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	370c      	adds	r7, #12
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr

0800b756 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b756:	b480      	push	{r7}
 800b758:	b083      	sub	sp, #12
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b764:	b2db      	uxtb	r3, r3
 800b766:	2b04      	cmp	r3, #4
 800b768:	d106      	bne.n	800b778 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b770:	b2da      	uxtb	r2, r3
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	370c      	adds	r7, #12
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr

0800b786 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b082      	sub	sp, #8
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b794:	b2db      	uxtb	r3, r3
 800b796:	2b03      	cmp	r3, #3
 800b798:	d110      	bne.n	800b7bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d00b      	beq.n	800b7bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7aa:	69db      	ldr	r3, [r3, #28]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d005      	beq.n	800b7bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7b6:	69db      	ldr	r3, [r3, #28]
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b7bc:	2300      	movs	r3, #0
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3708      	adds	r7, #8
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}

0800b7c6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b082      	sub	sp, #8
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	32ae      	adds	r2, #174	@ 0xae
 800b7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d101      	bne.n	800b7e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b7e4:	2303      	movs	r3, #3
 800b7e6:	e01c      	b.n	800b822 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7ee:	b2db      	uxtb	r3, r3
 800b7f0:	2b03      	cmp	r3, #3
 800b7f2:	d115      	bne.n	800b820 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	32ae      	adds	r2, #174	@ 0xae
 800b7fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b802:	6a1b      	ldr	r3, [r3, #32]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d00b      	beq.n	800b820 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	32ae      	adds	r2, #174	@ 0xae
 800b812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b816:	6a1b      	ldr	r3, [r3, #32]
 800b818:	78fa      	ldrb	r2, [r7, #3]
 800b81a:	4611      	mov	r1, r2
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3708      	adds	r7, #8
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b082      	sub	sp, #8
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
 800b832:	460b      	mov	r3, r1
 800b834:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	32ae      	adds	r2, #174	@ 0xae
 800b840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d101      	bne.n	800b84c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b848:	2303      	movs	r3, #3
 800b84a:	e01c      	b.n	800b886 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b852:	b2db      	uxtb	r3, r3
 800b854:	2b03      	cmp	r3, #3
 800b856:	d115      	bne.n	800b884 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	32ae      	adds	r2, #174	@ 0xae
 800b862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d00b      	beq.n	800b884 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	32ae      	adds	r2, #174	@ 0xae
 800b876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b87a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b87c:	78fa      	ldrb	r2, [r7, #3]
 800b87e:	4611      	mov	r1, r2
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b884:	2300      	movs	r3, #0
}
 800b886:	4618      	mov	r0, r3
 800b888:	3708      	adds	r7, #8
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}

0800b88e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b88e:	b480      	push	{r7}
 800b890:	b083      	sub	sp, #12
 800b892:	af00      	add	r7, sp, #0
 800b894:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b896:	2300      	movs	r3, #0
}
 800b898:	4618      	mov	r0, r3
 800b89a:	370c      	adds	r7, #12
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d00e      	beq.n	800b8e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8c8:	685b      	ldr	r3, [r3, #4]
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	6852      	ldr	r2, [r2, #4]
 800b8ce:	b2d2      	uxtb	r2, r2
 800b8d0:	4611      	mov	r1, r2
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	4798      	blx	r3
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d001      	beq.n	800b8e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b8ea:	b480      	push	{r7}
 800b8ec:	b083      	sub	sp, #12
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b8f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	370c      	adds	r7, #12
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b902:	4770      	bx	lr

0800b904 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b904:	b480      	push	{r7}
 800b906:	b083      	sub	sp, #12
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	460b      	mov	r3, r1
 800b90e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b910:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b912:	4618      	mov	r0, r3
 800b914:	370c      	adds	r7, #12
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr

0800b91e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b086      	sub	sp, #24
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
 800b926:	460b      	mov	r3, r1
 800b928:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b932:	2300      	movs	r3, #0
 800b934:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	885b      	ldrh	r3, [r3, #2]
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	7812      	ldrb	r2, [r2, #0]
 800b940:	4293      	cmp	r3, r2
 800b942:	d91f      	bls.n	800b984 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b94a:	e013      	b.n	800b974 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b94c:	f107 030a 	add.w	r3, r7, #10
 800b950:	4619      	mov	r1, r3
 800b952:	6978      	ldr	r0, [r7, #20]
 800b954:	f000 f81b 	bl	800b98e <USBD_GetNextDesc>
 800b958:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	785b      	ldrb	r3, [r3, #1]
 800b95e:	2b05      	cmp	r3, #5
 800b960:	d108      	bne.n	800b974 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	789b      	ldrb	r3, [r3, #2]
 800b96a:	78fa      	ldrb	r2, [r7, #3]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d008      	beq.n	800b982 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b970:	2300      	movs	r3, #0
 800b972:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	885b      	ldrh	r3, [r3, #2]
 800b978:	b29a      	uxth	r2, r3
 800b97a:	897b      	ldrh	r3, [r7, #10]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d8e5      	bhi.n	800b94c <USBD_GetEpDesc+0x2e>
 800b980:	e000      	b.n	800b984 <USBD_GetEpDesc+0x66>
          break;
 800b982:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b984:	693b      	ldr	r3, [r7, #16]
}
 800b986:	4618      	mov	r0, r3
 800b988:	3718      	adds	r7, #24
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b98e:	b480      	push	{r7}
 800b990:	b085      	sub	sp, #20
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
 800b996:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	881b      	ldrh	r3, [r3, #0]
 800b9a0:	68fa      	ldr	r2, [r7, #12]
 800b9a2:	7812      	ldrb	r2, [r2, #0]
 800b9a4:	4413      	add	r3, r2
 800b9a6:	b29a      	uxth	r2, r3
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3714      	adds	r7, #20
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr

0800b9c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b9c6:	b480      	push	{r7}
 800b9c8:	b087      	sub	sp, #28
 800b9ca:	af00      	add	r7, sp, #0
 800b9cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	781b      	ldrb	r3, [r3, #0]
 800b9e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b9e4:	8a3b      	ldrh	r3, [r7, #16]
 800b9e6:	021b      	lsls	r3, r3, #8
 800b9e8:	b21a      	sxth	r2, r3
 800b9ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	b21b      	sxth	r3, r3
 800b9f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b9f4:	89fb      	ldrh	r3, [r7, #14]
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	371c      	adds	r7, #28
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr
	...

0800ba04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	781b      	ldrb	r3, [r3, #0]
 800ba16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba1a:	2b40      	cmp	r3, #64	@ 0x40
 800ba1c:	d005      	beq.n	800ba2a <USBD_StdDevReq+0x26>
 800ba1e:	2b40      	cmp	r3, #64	@ 0x40
 800ba20:	d857      	bhi.n	800bad2 <USBD_StdDevReq+0xce>
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00f      	beq.n	800ba46 <USBD_StdDevReq+0x42>
 800ba26:	2b20      	cmp	r3, #32
 800ba28:	d153      	bne.n	800bad2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	32ae      	adds	r2, #174	@ 0xae
 800ba34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	6839      	ldr	r1, [r7, #0]
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	4798      	blx	r3
 800ba40:	4603      	mov	r3, r0
 800ba42:	73fb      	strb	r3, [r7, #15]
      break;
 800ba44:	e04a      	b.n	800badc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	785b      	ldrb	r3, [r3, #1]
 800ba4a:	2b09      	cmp	r3, #9
 800ba4c:	d83b      	bhi.n	800bac6 <USBD_StdDevReq+0xc2>
 800ba4e:	a201      	add	r2, pc, #4	@ (adr r2, 800ba54 <USBD_StdDevReq+0x50>)
 800ba50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba54:	0800baa9 	.word	0x0800baa9
 800ba58:	0800babd 	.word	0x0800babd
 800ba5c:	0800bac7 	.word	0x0800bac7
 800ba60:	0800bab3 	.word	0x0800bab3
 800ba64:	0800bac7 	.word	0x0800bac7
 800ba68:	0800ba87 	.word	0x0800ba87
 800ba6c:	0800ba7d 	.word	0x0800ba7d
 800ba70:	0800bac7 	.word	0x0800bac7
 800ba74:	0800ba9f 	.word	0x0800ba9f
 800ba78:	0800ba91 	.word	0x0800ba91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ba7c:	6839      	ldr	r1, [r7, #0]
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 fa3c 	bl	800befc <USBD_GetDescriptor>
          break;
 800ba84:	e024      	b.n	800bad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ba86:	6839      	ldr	r1, [r7, #0]
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f000 fba1 	bl	800c1d0 <USBD_SetAddress>
          break;
 800ba8e:	e01f      	b.n	800bad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ba90:	6839      	ldr	r1, [r7, #0]
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f000 fbe0 	bl	800c258 <USBD_SetConfig>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	73fb      	strb	r3, [r7, #15]
          break;
 800ba9c:	e018      	b.n	800bad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ba9e:	6839      	ldr	r1, [r7, #0]
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f000 fc83 	bl	800c3ac <USBD_GetConfig>
          break;
 800baa6:	e013      	b.n	800bad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800baa8:	6839      	ldr	r1, [r7, #0]
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 fcb4 	bl	800c418 <USBD_GetStatus>
          break;
 800bab0:	e00e      	b.n	800bad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bab2:	6839      	ldr	r1, [r7, #0]
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 fce3 	bl	800c480 <USBD_SetFeature>
          break;
 800baba:	e009      	b.n	800bad0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800babc:	6839      	ldr	r1, [r7, #0]
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fd07 	bl	800c4d2 <USBD_ClrFeature>
          break;
 800bac4:	e004      	b.n	800bad0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bac6:	6839      	ldr	r1, [r7, #0]
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 fd5e 	bl	800c58a <USBD_CtlError>
          break;
 800bace:	bf00      	nop
      }
      break;
 800bad0:	e004      	b.n	800badc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bad2:	6839      	ldr	r1, [r7, #0]
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 fd58 	bl	800c58a <USBD_CtlError>
      break;
 800bada:	bf00      	nop
  }

  return ret;
 800badc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3710      	adds	r7, #16
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop

0800bae8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800baf2:	2300      	movs	r3, #0
 800baf4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bafe:	2b40      	cmp	r3, #64	@ 0x40
 800bb00:	d005      	beq.n	800bb0e <USBD_StdItfReq+0x26>
 800bb02:	2b40      	cmp	r3, #64	@ 0x40
 800bb04:	d852      	bhi.n	800bbac <USBD_StdItfReq+0xc4>
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d001      	beq.n	800bb0e <USBD_StdItfReq+0x26>
 800bb0a:	2b20      	cmp	r3, #32
 800bb0c:	d14e      	bne.n	800bbac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	3b01      	subs	r3, #1
 800bb18:	2b02      	cmp	r3, #2
 800bb1a:	d840      	bhi.n	800bb9e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	889b      	ldrh	r3, [r3, #4]
 800bb20:	b2db      	uxtb	r3, r3
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d836      	bhi.n	800bb94 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	889b      	ldrh	r3, [r3, #4]
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f7ff fedb 	bl	800b8ea <USBD_CoreFindIF>
 800bb34:	4603      	mov	r3, r0
 800bb36:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb38:	7bbb      	ldrb	r3, [r7, #14]
 800bb3a:	2bff      	cmp	r3, #255	@ 0xff
 800bb3c:	d01d      	beq.n	800bb7a <USBD_StdItfReq+0x92>
 800bb3e:	7bbb      	ldrb	r3, [r7, #14]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d11a      	bne.n	800bb7a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bb44:	7bba      	ldrb	r2, [r7, #14]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	32ae      	adds	r2, #174	@ 0xae
 800bb4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb4e:	689b      	ldr	r3, [r3, #8]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d00f      	beq.n	800bb74 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bb54:	7bba      	ldrb	r2, [r7, #14]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bb5c:	7bba      	ldrb	r2, [r7, #14]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	32ae      	adds	r2, #174	@ 0xae
 800bb62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	6839      	ldr	r1, [r7, #0]
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	4798      	blx	r3
 800bb6e:	4603      	mov	r3, r0
 800bb70:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bb72:	e004      	b.n	800bb7e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bb74:	2303      	movs	r3, #3
 800bb76:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bb78:	e001      	b.n	800bb7e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	88db      	ldrh	r3, [r3, #6]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d110      	bne.n	800bba8 <USBD_StdItfReq+0xc0>
 800bb86:	7bfb      	ldrb	r3, [r7, #15]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10d      	bne.n	800bba8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f000 fdd3 	bl	800c738 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bb92:	e009      	b.n	800bba8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bb94:	6839      	ldr	r1, [r7, #0]
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 fcf7 	bl	800c58a <USBD_CtlError>
          break;
 800bb9c:	e004      	b.n	800bba8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bb9e:	6839      	ldr	r1, [r7, #0]
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 fcf2 	bl	800c58a <USBD_CtlError>
          break;
 800bba6:	e000      	b.n	800bbaa <USBD_StdItfReq+0xc2>
          break;
 800bba8:	bf00      	nop
      }
      break;
 800bbaa:	e004      	b.n	800bbb6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bbac:	6839      	ldr	r1, [r7, #0]
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 fceb 	bl	800c58a <USBD_CtlError>
      break;
 800bbb4:	bf00      	nop
  }

  return ret;
 800bbb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	3710      	adds	r7, #16
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	889b      	ldrh	r3, [r3, #4]
 800bbd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bbdc:	2b40      	cmp	r3, #64	@ 0x40
 800bbde:	d007      	beq.n	800bbf0 <USBD_StdEPReq+0x30>
 800bbe0:	2b40      	cmp	r3, #64	@ 0x40
 800bbe2:	f200 817f 	bhi.w	800bee4 <USBD_StdEPReq+0x324>
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d02a      	beq.n	800bc40 <USBD_StdEPReq+0x80>
 800bbea:	2b20      	cmp	r3, #32
 800bbec:	f040 817a 	bne.w	800bee4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bbf0:	7bbb      	ldrb	r3, [r7, #14]
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f7ff fe85 	bl	800b904 <USBD_CoreFindEP>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bbfe:	7b7b      	ldrb	r3, [r7, #13]
 800bc00:	2bff      	cmp	r3, #255	@ 0xff
 800bc02:	f000 8174 	beq.w	800beee <USBD_StdEPReq+0x32e>
 800bc06:	7b7b      	ldrb	r3, [r7, #13]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	f040 8170 	bne.w	800beee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bc0e:	7b7a      	ldrb	r2, [r7, #13]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bc16:	7b7a      	ldrb	r2, [r7, #13]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	32ae      	adds	r2, #174	@ 0xae
 800bc1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc20:	689b      	ldr	r3, [r3, #8]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	f000 8163 	beq.w	800beee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bc28:	7b7a      	ldrb	r2, [r7, #13]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	32ae      	adds	r2, #174	@ 0xae
 800bc2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	6839      	ldr	r1, [r7, #0]
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	4798      	blx	r3
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bc3e:	e156      	b.n	800beee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	785b      	ldrb	r3, [r3, #1]
 800bc44:	2b03      	cmp	r3, #3
 800bc46:	d008      	beq.n	800bc5a <USBD_StdEPReq+0x9a>
 800bc48:	2b03      	cmp	r3, #3
 800bc4a:	f300 8145 	bgt.w	800bed8 <USBD_StdEPReq+0x318>
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	f000 809b 	beq.w	800bd8a <USBD_StdEPReq+0x1ca>
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d03c      	beq.n	800bcd2 <USBD_StdEPReq+0x112>
 800bc58:	e13e      	b.n	800bed8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	2b02      	cmp	r3, #2
 800bc64:	d002      	beq.n	800bc6c <USBD_StdEPReq+0xac>
 800bc66:	2b03      	cmp	r3, #3
 800bc68:	d016      	beq.n	800bc98 <USBD_StdEPReq+0xd8>
 800bc6a:	e02c      	b.n	800bcc6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc6c:	7bbb      	ldrb	r3, [r7, #14]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d00d      	beq.n	800bc8e <USBD_StdEPReq+0xce>
 800bc72:	7bbb      	ldrb	r3, [r7, #14]
 800bc74:	2b80      	cmp	r3, #128	@ 0x80
 800bc76:	d00a      	beq.n	800bc8e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc78:	7bbb      	ldrb	r3, [r7, #14]
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f001 f96b 	bl	800cf58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc82:	2180      	movs	r1, #128	@ 0x80
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f001 f967 	bl	800cf58 <USBD_LL_StallEP>
 800bc8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc8c:	e020      	b.n	800bcd0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bc8e:	6839      	ldr	r1, [r7, #0]
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 fc7a 	bl	800c58a <USBD_CtlError>
              break;
 800bc96:	e01b      	b.n	800bcd0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	885b      	ldrh	r3, [r3, #2]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d10e      	bne.n	800bcbe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bca0:	7bbb      	ldrb	r3, [r7, #14]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00b      	beq.n	800bcbe <USBD_StdEPReq+0xfe>
 800bca6:	7bbb      	ldrb	r3, [r7, #14]
 800bca8:	2b80      	cmp	r3, #128	@ 0x80
 800bcaa:	d008      	beq.n	800bcbe <USBD_StdEPReq+0xfe>
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	88db      	ldrh	r3, [r3, #6]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d104      	bne.n	800bcbe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bcb4:	7bbb      	ldrb	r3, [r7, #14]
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f001 f94d 	bl	800cf58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 fd3a 	bl	800c738 <USBD_CtlSendStatus>

              break;
 800bcc4:	e004      	b.n	800bcd0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bcc6:	6839      	ldr	r1, [r7, #0]
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f000 fc5e 	bl	800c58a <USBD_CtlError>
              break;
 800bcce:	bf00      	nop
          }
          break;
 800bcd0:	e107      	b.n	800bee2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcd8:	b2db      	uxtb	r3, r3
 800bcda:	2b02      	cmp	r3, #2
 800bcdc:	d002      	beq.n	800bce4 <USBD_StdEPReq+0x124>
 800bcde:	2b03      	cmp	r3, #3
 800bce0:	d016      	beq.n	800bd10 <USBD_StdEPReq+0x150>
 800bce2:	e04b      	b.n	800bd7c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bce4:	7bbb      	ldrb	r3, [r7, #14]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d00d      	beq.n	800bd06 <USBD_StdEPReq+0x146>
 800bcea:	7bbb      	ldrb	r3, [r7, #14]
 800bcec:	2b80      	cmp	r3, #128	@ 0x80
 800bcee:	d00a      	beq.n	800bd06 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bcf0:	7bbb      	ldrb	r3, [r7, #14]
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f001 f92f 	bl	800cf58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bcfa:	2180      	movs	r1, #128	@ 0x80
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f001 f92b 	bl	800cf58 <USBD_LL_StallEP>
 800bd02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd04:	e040      	b.n	800bd88 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bd06:	6839      	ldr	r1, [r7, #0]
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 fc3e 	bl	800c58a <USBD_CtlError>
              break;
 800bd0e:	e03b      	b.n	800bd88 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	885b      	ldrh	r3, [r3, #2]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d136      	bne.n	800bd86 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bd18:	7bbb      	ldrb	r3, [r7, #14]
 800bd1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d004      	beq.n	800bd2c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bd22:	7bbb      	ldrb	r3, [r7, #14]
 800bd24:	4619      	mov	r1, r3
 800bd26:	6878      	ldr	r0, [r7, #4]
 800bd28:	f001 f935 	bl	800cf96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 fd03 	bl	800c738 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bd32:	7bbb      	ldrb	r3, [r7, #14]
 800bd34:	4619      	mov	r1, r3
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f7ff fde4 	bl	800b904 <USBD_CoreFindEP>
 800bd3c:	4603      	mov	r3, r0
 800bd3e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd40:	7b7b      	ldrb	r3, [r7, #13]
 800bd42:	2bff      	cmp	r3, #255	@ 0xff
 800bd44:	d01f      	beq.n	800bd86 <USBD_StdEPReq+0x1c6>
 800bd46:	7b7b      	ldrb	r3, [r7, #13]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d11c      	bne.n	800bd86 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bd4c:	7b7a      	ldrb	r2, [r7, #13]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bd54:	7b7a      	ldrb	r2, [r7, #13]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	32ae      	adds	r2, #174	@ 0xae
 800bd5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d010      	beq.n	800bd86 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bd64:	7b7a      	ldrb	r2, [r7, #13]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	32ae      	adds	r2, #174	@ 0xae
 800bd6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd6e:	689b      	ldr	r3, [r3, #8]
 800bd70:	6839      	ldr	r1, [r7, #0]
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	4798      	blx	r3
 800bd76:	4603      	mov	r3, r0
 800bd78:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bd7a:	e004      	b.n	800bd86 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bd7c:	6839      	ldr	r1, [r7, #0]
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f000 fc03 	bl	800c58a <USBD_CtlError>
              break;
 800bd84:	e000      	b.n	800bd88 <USBD_StdEPReq+0x1c8>
              break;
 800bd86:	bf00      	nop
          }
          break;
 800bd88:	e0ab      	b.n	800bee2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd90:	b2db      	uxtb	r3, r3
 800bd92:	2b02      	cmp	r3, #2
 800bd94:	d002      	beq.n	800bd9c <USBD_StdEPReq+0x1dc>
 800bd96:	2b03      	cmp	r3, #3
 800bd98:	d032      	beq.n	800be00 <USBD_StdEPReq+0x240>
 800bd9a:	e097      	b.n	800becc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd9c:	7bbb      	ldrb	r3, [r7, #14]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d007      	beq.n	800bdb2 <USBD_StdEPReq+0x1f2>
 800bda2:	7bbb      	ldrb	r3, [r7, #14]
 800bda4:	2b80      	cmp	r3, #128	@ 0x80
 800bda6:	d004      	beq.n	800bdb2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bda8:	6839      	ldr	r1, [r7, #0]
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 fbed 	bl	800c58a <USBD_CtlError>
                break;
 800bdb0:	e091      	b.n	800bed6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	da0b      	bge.n	800bdd2 <USBD_StdEPReq+0x212>
 800bdba:	7bbb      	ldrb	r3, [r7, #14]
 800bdbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bdc0:	4613      	mov	r3, r2
 800bdc2:	009b      	lsls	r3, r3, #2
 800bdc4:	4413      	add	r3, r2
 800bdc6:	009b      	lsls	r3, r3, #2
 800bdc8:	3310      	adds	r3, #16
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	4413      	add	r3, r2
 800bdce:	3304      	adds	r3, #4
 800bdd0:	e00b      	b.n	800bdea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bdd2:	7bbb      	ldrb	r3, [r7, #14]
 800bdd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdd8:	4613      	mov	r3, r2
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	4413      	add	r3, r2
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	4413      	add	r3, r2
 800bde8:	3304      	adds	r3, #4
 800bdea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	2202      	movs	r2, #2
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 fc43 	bl	800c684 <USBD_CtlSendData>
              break;
 800bdfe:	e06a      	b.n	800bed6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800be00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be04:	2b00      	cmp	r3, #0
 800be06:	da11      	bge.n	800be2c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800be08:	7bbb      	ldrb	r3, [r7, #14]
 800be0a:	f003 020f 	and.w	r2, r3, #15
 800be0e:	6879      	ldr	r1, [r7, #4]
 800be10:	4613      	mov	r3, r2
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	4413      	add	r3, r2
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	440b      	add	r3, r1
 800be1a:	3324      	adds	r3, #36	@ 0x24
 800be1c:	881b      	ldrh	r3, [r3, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d117      	bne.n	800be52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800be22:	6839      	ldr	r1, [r7, #0]
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 fbb0 	bl	800c58a <USBD_CtlError>
                  break;
 800be2a:	e054      	b.n	800bed6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800be2c:	7bbb      	ldrb	r3, [r7, #14]
 800be2e:	f003 020f 	and.w	r2, r3, #15
 800be32:	6879      	ldr	r1, [r7, #4]
 800be34:	4613      	mov	r3, r2
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	4413      	add	r3, r2
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	440b      	add	r3, r1
 800be3e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800be42:	881b      	ldrh	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d104      	bne.n	800be52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800be48:	6839      	ldr	r1, [r7, #0]
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 fb9d 	bl	800c58a <USBD_CtlError>
                  break;
 800be50:	e041      	b.n	800bed6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be56:	2b00      	cmp	r3, #0
 800be58:	da0b      	bge.n	800be72 <USBD_StdEPReq+0x2b2>
 800be5a:	7bbb      	ldrb	r3, [r7, #14]
 800be5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be60:	4613      	mov	r3, r2
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	4413      	add	r3, r2
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	3310      	adds	r3, #16
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	4413      	add	r3, r2
 800be6e:	3304      	adds	r3, #4
 800be70:	e00b      	b.n	800be8a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be72:	7bbb      	ldrb	r3, [r7, #14]
 800be74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be78:	4613      	mov	r3, r2
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	4413      	add	r3, r2
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	4413      	add	r3, r2
 800be88:	3304      	adds	r3, #4
 800be8a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800be8c:	7bbb      	ldrb	r3, [r7, #14]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d002      	beq.n	800be98 <USBD_StdEPReq+0x2d8>
 800be92:	7bbb      	ldrb	r3, [r7, #14]
 800be94:	2b80      	cmp	r3, #128	@ 0x80
 800be96:	d103      	bne.n	800bea0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	2200      	movs	r2, #0
 800be9c:	601a      	str	r2, [r3, #0]
 800be9e:	e00e      	b.n	800bebe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bea0:	7bbb      	ldrb	r3, [r7, #14]
 800bea2:	4619      	mov	r1, r3
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f001 f895 	bl	800cfd4 <USBD_LL_IsStallEP>
 800beaa:	4603      	mov	r3, r0
 800beac:	2b00      	cmp	r3, #0
 800beae:	d003      	beq.n	800beb8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	2201      	movs	r2, #1
 800beb4:	601a      	str	r2, [r3, #0]
 800beb6:	e002      	b.n	800bebe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	2200      	movs	r2, #0
 800bebc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	2202      	movs	r2, #2
 800bec2:	4619      	mov	r1, r3
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 fbdd 	bl	800c684 <USBD_CtlSendData>
              break;
 800beca:	e004      	b.n	800bed6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800becc:	6839      	ldr	r1, [r7, #0]
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 fb5b 	bl	800c58a <USBD_CtlError>
              break;
 800bed4:	bf00      	nop
          }
          break;
 800bed6:	e004      	b.n	800bee2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bed8:	6839      	ldr	r1, [r7, #0]
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 fb55 	bl	800c58a <USBD_CtlError>
          break;
 800bee0:	bf00      	nop
      }
      break;
 800bee2:	e005      	b.n	800bef0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bee4:	6839      	ldr	r1, [r7, #0]
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f000 fb4f 	bl	800c58a <USBD_CtlError>
      break;
 800beec:	e000      	b.n	800bef0 <USBD_StdEPReq+0x330>
      break;
 800beee:	bf00      	nop
  }

  return ret;
 800bef0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
	...

0800befc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bf06:	2300      	movs	r3, #0
 800bf08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	885b      	ldrh	r3, [r3, #2]
 800bf16:	0a1b      	lsrs	r3, r3, #8
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	3b01      	subs	r3, #1
 800bf1c:	2b06      	cmp	r3, #6
 800bf1e:	f200 8128 	bhi.w	800c172 <USBD_GetDescriptor+0x276>
 800bf22:	a201      	add	r2, pc, #4	@ (adr r2, 800bf28 <USBD_GetDescriptor+0x2c>)
 800bf24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf28:	0800bf45 	.word	0x0800bf45
 800bf2c:	0800bf5d 	.word	0x0800bf5d
 800bf30:	0800bf9d 	.word	0x0800bf9d
 800bf34:	0800c173 	.word	0x0800c173
 800bf38:	0800c173 	.word	0x0800c173
 800bf3c:	0800c113 	.word	0x0800c113
 800bf40:	0800c13f 	.word	0x0800c13f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	687a      	ldr	r2, [r7, #4]
 800bf4e:	7c12      	ldrb	r2, [r2, #16]
 800bf50:	f107 0108 	add.w	r1, r7, #8
 800bf54:	4610      	mov	r0, r2
 800bf56:	4798      	blx	r3
 800bf58:	60f8      	str	r0, [r7, #12]
      break;
 800bf5a:	e112      	b.n	800c182 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	7c1b      	ldrb	r3, [r3, #16]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d10d      	bne.n	800bf80 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf6c:	f107 0208 	add.w	r2, r7, #8
 800bf70:	4610      	mov	r0, r2
 800bf72:	4798      	blx	r3
 800bf74:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	2202      	movs	r2, #2
 800bf7c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bf7e:	e100      	b.n	800c182 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf88:	f107 0208 	add.w	r2, r7, #8
 800bf8c:	4610      	mov	r0, r2
 800bf8e:	4798      	blx	r3
 800bf90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	3301      	adds	r3, #1
 800bf96:	2202      	movs	r2, #2
 800bf98:	701a      	strb	r2, [r3, #0]
      break;
 800bf9a:	e0f2      	b.n	800c182 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	885b      	ldrh	r3, [r3, #2]
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	2b05      	cmp	r3, #5
 800bfa4:	f200 80ac 	bhi.w	800c100 <USBD_GetDescriptor+0x204>
 800bfa8:	a201      	add	r2, pc, #4	@ (adr r2, 800bfb0 <USBD_GetDescriptor+0xb4>)
 800bfaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfae:	bf00      	nop
 800bfb0:	0800bfc9 	.word	0x0800bfc9
 800bfb4:	0800bffd 	.word	0x0800bffd
 800bfb8:	0800c031 	.word	0x0800c031
 800bfbc:	0800c065 	.word	0x0800c065
 800bfc0:	0800c099 	.word	0x0800c099
 800bfc4:	0800c0cd 	.word	0x0800c0cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d00b      	beq.n	800bfec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	687a      	ldr	r2, [r7, #4]
 800bfde:	7c12      	ldrb	r2, [r2, #16]
 800bfe0:	f107 0108 	add.w	r1, r7, #8
 800bfe4:	4610      	mov	r0, r2
 800bfe6:	4798      	blx	r3
 800bfe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfea:	e091      	b.n	800c110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bfec:	6839      	ldr	r1, [r7, #0]
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 facb 	bl	800c58a <USBD_CtlError>
            err++;
 800bff4:	7afb      	ldrb	r3, [r7, #11]
 800bff6:	3301      	adds	r3, #1
 800bff8:	72fb      	strb	r3, [r7, #11]
          break;
 800bffa:	e089      	b.n	800c110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c002:	689b      	ldr	r3, [r3, #8]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d00b      	beq.n	800c020 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	7c12      	ldrb	r2, [r2, #16]
 800c014:	f107 0108 	add.w	r1, r7, #8
 800c018:	4610      	mov	r0, r2
 800c01a:	4798      	blx	r3
 800c01c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c01e:	e077      	b.n	800c110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c020:	6839      	ldr	r1, [r7, #0]
 800c022:	6878      	ldr	r0, [r7, #4]
 800c024:	f000 fab1 	bl	800c58a <USBD_CtlError>
            err++;
 800c028:	7afb      	ldrb	r3, [r7, #11]
 800c02a:	3301      	adds	r3, #1
 800c02c:	72fb      	strb	r3, [r7, #11]
          break;
 800c02e:	e06f      	b.n	800c110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d00b      	beq.n	800c054 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c042:	68db      	ldr	r3, [r3, #12]
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	7c12      	ldrb	r2, [r2, #16]
 800c048:	f107 0108 	add.w	r1, r7, #8
 800c04c:	4610      	mov	r0, r2
 800c04e:	4798      	blx	r3
 800c050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c052:	e05d      	b.n	800c110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c054:	6839      	ldr	r1, [r7, #0]
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 fa97 	bl	800c58a <USBD_CtlError>
            err++;
 800c05c:	7afb      	ldrb	r3, [r7, #11]
 800c05e:	3301      	adds	r3, #1
 800c060:	72fb      	strb	r3, [r7, #11]
          break;
 800c062:	e055      	b.n	800c110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c06a:	691b      	ldr	r3, [r3, #16]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d00b      	beq.n	800c088 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c076:	691b      	ldr	r3, [r3, #16]
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	7c12      	ldrb	r2, [r2, #16]
 800c07c:	f107 0108 	add.w	r1, r7, #8
 800c080:	4610      	mov	r0, r2
 800c082:	4798      	blx	r3
 800c084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c086:	e043      	b.n	800c110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c088:	6839      	ldr	r1, [r7, #0]
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 fa7d 	bl	800c58a <USBD_CtlError>
            err++;
 800c090:	7afb      	ldrb	r3, [r7, #11]
 800c092:	3301      	adds	r3, #1
 800c094:	72fb      	strb	r3, [r7, #11]
          break;
 800c096:	e03b      	b.n	800c110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c09e:	695b      	ldr	r3, [r3, #20]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d00b      	beq.n	800c0bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0aa:	695b      	ldr	r3, [r3, #20]
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	7c12      	ldrb	r2, [r2, #16]
 800c0b0:	f107 0108 	add.w	r1, r7, #8
 800c0b4:	4610      	mov	r0, r2
 800c0b6:	4798      	blx	r3
 800c0b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0ba:	e029      	b.n	800c110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0bc:	6839      	ldr	r1, [r7, #0]
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 fa63 	bl	800c58a <USBD_CtlError>
            err++;
 800c0c4:	7afb      	ldrb	r3, [r7, #11]
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	72fb      	strb	r3, [r7, #11]
          break;
 800c0ca:	e021      	b.n	800c110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0d2:	699b      	ldr	r3, [r3, #24]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d00b      	beq.n	800c0f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0de:	699b      	ldr	r3, [r3, #24]
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	7c12      	ldrb	r2, [r2, #16]
 800c0e4:	f107 0108 	add.w	r1, r7, #8
 800c0e8:	4610      	mov	r0, r2
 800c0ea:	4798      	blx	r3
 800c0ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0ee:	e00f      	b.n	800c110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 fa49 	bl	800c58a <USBD_CtlError>
            err++;
 800c0f8:	7afb      	ldrb	r3, [r7, #11]
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	72fb      	strb	r3, [r7, #11]
          break;
 800c0fe:	e007      	b.n	800c110 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c100:	6839      	ldr	r1, [r7, #0]
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 fa41 	bl	800c58a <USBD_CtlError>
          err++;
 800c108:	7afb      	ldrb	r3, [r7, #11]
 800c10a:	3301      	adds	r3, #1
 800c10c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c10e:	bf00      	nop
      }
      break;
 800c110:	e037      	b.n	800c182 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	7c1b      	ldrb	r3, [r3, #16]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d109      	bne.n	800c12e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c122:	f107 0208 	add.w	r2, r7, #8
 800c126:	4610      	mov	r0, r2
 800c128:	4798      	blx	r3
 800c12a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c12c:	e029      	b.n	800c182 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c12e:	6839      	ldr	r1, [r7, #0]
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 fa2a 	bl	800c58a <USBD_CtlError>
        err++;
 800c136:	7afb      	ldrb	r3, [r7, #11]
 800c138:	3301      	adds	r3, #1
 800c13a:	72fb      	strb	r3, [r7, #11]
      break;
 800c13c:	e021      	b.n	800c182 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	7c1b      	ldrb	r3, [r3, #16]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d10d      	bne.n	800c162 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c14c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c14e:	f107 0208 	add.w	r2, r7, #8
 800c152:	4610      	mov	r0, r2
 800c154:	4798      	blx	r3
 800c156:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	3301      	adds	r3, #1
 800c15c:	2207      	movs	r2, #7
 800c15e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c160:	e00f      	b.n	800c182 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c162:	6839      	ldr	r1, [r7, #0]
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 fa10 	bl	800c58a <USBD_CtlError>
        err++;
 800c16a:	7afb      	ldrb	r3, [r7, #11]
 800c16c:	3301      	adds	r3, #1
 800c16e:	72fb      	strb	r3, [r7, #11]
      break;
 800c170:	e007      	b.n	800c182 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c172:	6839      	ldr	r1, [r7, #0]
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 fa08 	bl	800c58a <USBD_CtlError>
      err++;
 800c17a:	7afb      	ldrb	r3, [r7, #11]
 800c17c:	3301      	adds	r3, #1
 800c17e:	72fb      	strb	r3, [r7, #11]
      break;
 800c180:	bf00      	nop
  }

  if (err != 0U)
 800c182:	7afb      	ldrb	r3, [r7, #11]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d11e      	bne.n	800c1c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	88db      	ldrh	r3, [r3, #6]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d016      	beq.n	800c1be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c190:	893b      	ldrh	r3, [r7, #8]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d00e      	beq.n	800c1b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	88da      	ldrh	r2, [r3, #6]
 800c19a:	893b      	ldrh	r3, [r7, #8]
 800c19c:	4293      	cmp	r3, r2
 800c19e:	bf28      	it	cs
 800c1a0:	4613      	movcs	r3, r2
 800c1a2:	b29b      	uxth	r3, r3
 800c1a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c1a6:	893b      	ldrh	r3, [r7, #8]
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	68f9      	ldr	r1, [r7, #12]
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 fa69 	bl	800c684 <USBD_CtlSendData>
 800c1b2:	e009      	b.n	800c1c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c1b4:	6839      	ldr	r1, [r7, #0]
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f000 f9e7 	bl	800c58a <USBD_CtlError>
 800c1bc:	e004      	b.n	800c1c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 faba 	bl	800c738 <USBD_CtlSendStatus>
 800c1c4:	e000      	b.n	800c1c8 <USBD_GetDescriptor+0x2cc>
    return;
 800c1c6:	bf00      	nop
  }
}
 800c1c8:	3710      	adds	r7, #16
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop

0800c1d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	889b      	ldrh	r3, [r3, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d131      	bne.n	800c246 <USBD_SetAddress+0x76>
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	88db      	ldrh	r3, [r3, #6]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d12d      	bne.n	800c246 <USBD_SetAddress+0x76>
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	885b      	ldrh	r3, [r3, #2]
 800c1ee:	2b7f      	cmp	r3, #127	@ 0x7f
 800c1f0:	d829      	bhi.n	800c246 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	885b      	ldrh	r3, [r3, #2]
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c204:	b2db      	uxtb	r3, r3
 800c206:	2b03      	cmp	r3, #3
 800c208:	d104      	bne.n	800c214 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c20a:	6839      	ldr	r1, [r7, #0]
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f000 f9bc 	bl	800c58a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c212:	e01d      	b.n	800c250 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	7bfa      	ldrb	r2, [r7, #15]
 800c218:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c21c:	7bfb      	ldrb	r3, [r7, #15]
 800c21e:	4619      	mov	r1, r3
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 ff03 	bl	800d02c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 fa86 	bl	800c738 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c22c:	7bfb      	ldrb	r3, [r7, #15]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d004      	beq.n	800c23c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2202      	movs	r2, #2
 800c236:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c23a:	e009      	b.n	800c250 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2201      	movs	r2, #1
 800c240:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c244:	e004      	b.n	800c250 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c246:	6839      	ldr	r1, [r7, #0]
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f000 f99e 	bl	800c58a <USBD_CtlError>
  }
}
 800c24e:	bf00      	nop
 800c250:	bf00      	nop
 800c252:	3710      	adds	r7, #16
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}

0800c258 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c262:	2300      	movs	r3, #0
 800c264:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	885b      	ldrh	r3, [r3, #2]
 800c26a:	b2da      	uxtb	r2, r3
 800c26c:	4b4e      	ldr	r3, [pc, #312]	@ (800c3a8 <USBD_SetConfig+0x150>)
 800c26e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c270:	4b4d      	ldr	r3, [pc, #308]	@ (800c3a8 <USBD_SetConfig+0x150>)
 800c272:	781b      	ldrb	r3, [r3, #0]
 800c274:	2b01      	cmp	r3, #1
 800c276:	d905      	bls.n	800c284 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c278:	6839      	ldr	r1, [r7, #0]
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f000 f985 	bl	800c58a <USBD_CtlError>
    return USBD_FAIL;
 800c280:	2303      	movs	r3, #3
 800c282:	e08c      	b.n	800c39e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c28a:	b2db      	uxtb	r3, r3
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d002      	beq.n	800c296 <USBD_SetConfig+0x3e>
 800c290:	2b03      	cmp	r3, #3
 800c292:	d029      	beq.n	800c2e8 <USBD_SetConfig+0x90>
 800c294:	e075      	b.n	800c382 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c296:	4b44      	ldr	r3, [pc, #272]	@ (800c3a8 <USBD_SetConfig+0x150>)
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d020      	beq.n	800c2e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c29e:	4b42      	ldr	r3, [pc, #264]	@ (800c3a8 <USBD_SetConfig+0x150>)
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c2a8:	4b3f      	ldr	r3, [pc, #252]	@ (800c3a8 <USBD_SetConfig+0x150>)
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f7fe ffe3 	bl	800b27a <USBD_SetClassConfig>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c2b8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d008      	beq.n	800c2d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c2be:	6839      	ldr	r1, [r7, #0]
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 f962 	bl	800c58a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2202      	movs	r2, #2
 800c2ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c2ce:	e065      	b.n	800c39c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 fa31 	bl	800c738 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2203      	movs	r2, #3
 800c2da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c2de:	e05d      	b.n	800c39c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f000 fa29 	bl	800c738 <USBD_CtlSendStatus>
      break;
 800c2e6:	e059      	b.n	800c39c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c2e8:	4b2f      	ldr	r3, [pc, #188]	@ (800c3a8 <USBD_SetConfig+0x150>)
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d112      	bne.n	800c316 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2202      	movs	r2, #2
 800c2f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c2f8:	4b2b      	ldr	r3, [pc, #172]	@ (800c3a8 <USBD_SetConfig+0x150>)
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c302:	4b29      	ldr	r3, [pc, #164]	@ (800c3a8 <USBD_SetConfig+0x150>)
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	4619      	mov	r1, r3
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f7fe ffd2 	bl	800b2b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 fa12 	bl	800c738 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c314:	e042      	b.n	800c39c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c316:	4b24      	ldr	r3, [pc, #144]	@ (800c3a8 <USBD_SetConfig+0x150>)
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	461a      	mov	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	429a      	cmp	r2, r3
 800c322:	d02a      	beq.n	800c37a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	4619      	mov	r1, r3
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f7fe ffc0 	bl	800b2b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c332:	4b1d      	ldr	r3, [pc, #116]	@ (800c3a8 <USBD_SetConfig+0x150>)
 800c334:	781b      	ldrb	r3, [r3, #0]
 800c336:	461a      	mov	r2, r3
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c33c:	4b1a      	ldr	r3, [pc, #104]	@ (800c3a8 <USBD_SetConfig+0x150>)
 800c33e:	781b      	ldrb	r3, [r3, #0]
 800c340:	4619      	mov	r1, r3
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f7fe ff99 	bl	800b27a <USBD_SetClassConfig>
 800c348:	4603      	mov	r3, r0
 800c34a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c34c:	7bfb      	ldrb	r3, [r7, #15]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d00f      	beq.n	800c372 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c352:	6839      	ldr	r1, [r7, #0]
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 f918 	bl	800c58a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	b2db      	uxtb	r3, r3
 800c360:	4619      	mov	r1, r3
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f7fe ffa5 	bl	800b2b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2202      	movs	r2, #2
 800c36c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c370:	e014      	b.n	800c39c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 f9e0 	bl	800c738 <USBD_CtlSendStatus>
      break;
 800c378:	e010      	b.n	800c39c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 f9dc 	bl	800c738 <USBD_CtlSendStatus>
      break;
 800c380:	e00c      	b.n	800c39c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c382:	6839      	ldr	r1, [r7, #0]
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 f900 	bl	800c58a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c38a:	4b07      	ldr	r3, [pc, #28]	@ (800c3a8 <USBD_SetConfig+0x150>)
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	4619      	mov	r1, r3
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f7fe ff8e 	bl	800b2b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c396:	2303      	movs	r3, #3
 800c398:	73fb      	strb	r3, [r7, #15]
      break;
 800c39a:	bf00      	nop
  }

  return ret;
 800c39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	20000859 	.word	0x20000859

0800c3ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	88db      	ldrh	r3, [r3, #6]
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d004      	beq.n	800c3c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c3be:	6839      	ldr	r1, [r7, #0]
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f000 f8e2 	bl	800c58a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c3c6:	e023      	b.n	800c410 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3ce:	b2db      	uxtb	r3, r3
 800c3d0:	2b02      	cmp	r3, #2
 800c3d2:	dc02      	bgt.n	800c3da <USBD_GetConfig+0x2e>
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	dc03      	bgt.n	800c3e0 <USBD_GetConfig+0x34>
 800c3d8:	e015      	b.n	800c406 <USBD_GetConfig+0x5a>
 800c3da:	2b03      	cmp	r3, #3
 800c3dc:	d00b      	beq.n	800c3f6 <USBD_GetConfig+0x4a>
 800c3de:	e012      	b.n	800c406 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	3308      	adds	r3, #8
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f000 f948 	bl	800c684 <USBD_CtlSendData>
        break;
 800c3f4:	e00c      	b.n	800c410 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	3304      	adds	r3, #4
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 f940 	bl	800c684 <USBD_CtlSendData>
        break;
 800c404:	e004      	b.n	800c410 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c406:	6839      	ldr	r1, [r7, #0]
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 f8be 	bl	800c58a <USBD_CtlError>
        break;
 800c40e:	bf00      	nop
}
 800c410:	bf00      	nop
 800c412:	3708      	adds	r7, #8
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}

0800c418 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c428:	b2db      	uxtb	r3, r3
 800c42a:	3b01      	subs	r3, #1
 800c42c:	2b02      	cmp	r3, #2
 800c42e:	d81e      	bhi.n	800c46e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	88db      	ldrh	r3, [r3, #6]
 800c434:	2b02      	cmp	r3, #2
 800c436:	d004      	beq.n	800c442 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c438:	6839      	ldr	r1, [r7, #0]
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 f8a5 	bl	800c58a <USBD_CtlError>
        break;
 800c440:	e01a      	b.n	800c478 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2201      	movs	r2, #1
 800c446:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d005      	beq.n	800c45e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	68db      	ldr	r3, [r3, #12]
 800c456:	f043 0202 	orr.w	r2, r3, #2
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	330c      	adds	r3, #12
 800c462:	2202      	movs	r2, #2
 800c464:	4619      	mov	r1, r3
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 f90c 	bl	800c684 <USBD_CtlSendData>
      break;
 800c46c:	e004      	b.n	800c478 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c46e:	6839      	ldr	r1, [r7, #0]
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 f88a 	bl	800c58a <USBD_CtlError>
      break;
 800c476:	bf00      	nop
  }
}
 800c478:	bf00      	nop
 800c47a:	3708      	adds	r7, #8
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	885b      	ldrh	r3, [r3, #2]
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d107      	bne.n	800c4a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2201      	movs	r2, #1
 800c496:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 f94c 	bl	800c738 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c4a0:	e013      	b.n	800c4ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	885b      	ldrh	r3, [r3, #2]
 800c4a6:	2b02      	cmp	r3, #2
 800c4a8:	d10b      	bne.n	800c4c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	889b      	ldrh	r3, [r3, #4]
 800c4ae:	0a1b      	lsrs	r3, r3, #8
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	b2da      	uxtb	r2, r3
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 f93c 	bl	800c738 <USBD_CtlSendStatus>
}
 800c4c0:	e003      	b.n	800c4ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c4c2:	6839      	ldr	r1, [r7, #0]
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f000 f860 	bl	800c58a <USBD_CtlError>
}
 800c4ca:	bf00      	nop
 800c4cc:	3708      	adds	r7, #8
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}

0800c4d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4d2:	b580      	push	{r7, lr}
 800c4d4:	b082      	sub	sp, #8
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
 800c4da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	3b01      	subs	r3, #1
 800c4e6:	2b02      	cmp	r3, #2
 800c4e8:	d80b      	bhi.n	800c502 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	885b      	ldrh	r3, [r3, #2]
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	d10c      	bne.n	800c50c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 f91c 	bl	800c738 <USBD_CtlSendStatus>
      }
      break;
 800c500:	e004      	b.n	800c50c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c502:	6839      	ldr	r1, [r7, #0]
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 f840 	bl	800c58a <USBD_CtlError>
      break;
 800c50a:	e000      	b.n	800c50e <USBD_ClrFeature+0x3c>
      break;
 800c50c:	bf00      	nop
  }
}
 800c50e:	bf00      	nop
 800c510:	3708      	adds	r7, #8
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}

0800c516 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c516:	b580      	push	{r7, lr}
 800c518:	b084      	sub	sp, #16
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
 800c51e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	781a      	ldrb	r2, [r3, #0]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	3301      	adds	r3, #1
 800c530:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	781a      	ldrb	r2, [r3, #0]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	3301      	adds	r3, #1
 800c53e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c540:	68f8      	ldr	r0, [r7, #12]
 800c542:	f7ff fa40 	bl	800b9c6 <SWAPBYTE>
 800c546:	4603      	mov	r3, r0
 800c548:	461a      	mov	r2, r3
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	3301      	adds	r3, #1
 800c552:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	3301      	adds	r3, #1
 800c558:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c55a:	68f8      	ldr	r0, [r7, #12]
 800c55c:	f7ff fa33 	bl	800b9c6 <SWAPBYTE>
 800c560:	4603      	mov	r3, r0
 800c562:	461a      	mov	r2, r3
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	3301      	adds	r3, #1
 800c56c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	3301      	adds	r3, #1
 800c572:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	f7ff fa26 	bl	800b9c6 <SWAPBYTE>
 800c57a:	4603      	mov	r3, r0
 800c57c:	461a      	mov	r2, r3
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	80da      	strh	r2, [r3, #6]
}
 800c582:	bf00      	nop
 800c584:	3710      	adds	r7, #16
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}

0800c58a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c58a:	b580      	push	{r7, lr}
 800c58c:	b082      	sub	sp, #8
 800c58e:	af00      	add	r7, sp, #0
 800c590:	6078      	str	r0, [r7, #4]
 800c592:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c594:	2180      	movs	r1, #128	@ 0x80
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 fcde 	bl	800cf58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c59c:	2100      	movs	r1, #0
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 fcda 	bl	800cf58 <USBD_LL_StallEP>
}
 800c5a4:	bf00      	nop
 800c5a6:	3708      	adds	r7, #8
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b086      	sub	sp, #24
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	60b9      	str	r1, [r7, #8]
 800c5b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d042      	beq.n	800c648 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c5c6:	6938      	ldr	r0, [r7, #16]
 800c5c8:	f000 f842 	bl	800c650 <USBD_GetLen>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	005b      	lsls	r3, r3, #1
 800c5d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5d6:	d808      	bhi.n	800c5ea <USBD_GetString+0x3e>
 800c5d8:	6938      	ldr	r0, [r7, #16]
 800c5da:	f000 f839 	bl	800c650 <USBD_GetLen>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	005b      	lsls	r3, r3, #1
 800c5e6:	b29a      	uxth	r2, r3
 800c5e8:	e001      	b.n	800c5ee <USBD_GetString+0x42>
 800c5ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c5f2:	7dfb      	ldrb	r3, [r7, #23]
 800c5f4:	68ba      	ldr	r2, [r7, #8]
 800c5f6:	4413      	add	r3, r2
 800c5f8:	687a      	ldr	r2, [r7, #4]
 800c5fa:	7812      	ldrb	r2, [r2, #0]
 800c5fc:	701a      	strb	r2, [r3, #0]
  idx++;
 800c5fe:	7dfb      	ldrb	r3, [r7, #23]
 800c600:	3301      	adds	r3, #1
 800c602:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c604:	7dfb      	ldrb	r3, [r7, #23]
 800c606:	68ba      	ldr	r2, [r7, #8]
 800c608:	4413      	add	r3, r2
 800c60a:	2203      	movs	r2, #3
 800c60c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c60e:	7dfb      	ldrb	r3, [r7, #23]
 800c610:	3301      	adds	r3, #1
 800c612:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c614:	e013      	b.n	800c63e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c616:	7dfb      	ldrb	r3, [r7, #23]
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	4413      	add	r3, r2
 800c61c:	693a      	ldr	r2, [r7, #16]
 800c61e:	7812      	ldrb	r2, [r2, #0]
 800c620:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c622:	693b      	ldr	r3, [r7, #16]
 800c624:	3301      	adds	r3, #1
 800c626:	613b      	str	r3, [r7, #16]
    idx++;
 800c628:	7dfb      	ldrb	r3, [r7, #23]
 800c62a:	3301      	adds	r3, #1
 800c62c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c62e:	7dfb      	ldrb	r3, [r7, #23]
 800c630:	68ba      	ldr	r2, [r7, #8]
 800c632:	4413      	add	r3, r2
 800c634:	2200      	movs	r2, #0
 800c636:	701a      	strb	r2, [r3, #0]
    idx++;
 800c638:	7dfb      	ldrb	r3, [r7, #23]
 800c63a:	3301      	adds	r3, #1
 800c63c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d1e7      	bne.n	800c616 <USBD_GetString+0x6a>
 800c646:	e000      	b.n	800c64a <USBD_GetString+0x9e>
    return;
 800c648:	bf00      	nop
  }
}
 800c64a:	3718      	adds	r7, #24
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c650:	b480      	push	{r7}
 800c652:	b085      	sub	sp, #20
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c658:	2300      	movs	r3, #0
 800c65a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c660:	e005      	b.n	800c66e <USBD_GetLen+0x1e>
  {
    len++;
 800c662:	7bfb      	ldrb	r3, [r7, #15]
 800c664:	3301      	adds	r3, #1
 800c666:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	3301      	adds	r3, #1
 800c66c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d1f5      	bne.n	800c662 <USBD_GetLen+0x12>
  }

  return len;
 800c676:	7bfb      	ldrb	r3, [r7, #15]
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3714      	adds	r7, #20
 800c67c:	46bd      	mov	sp, r7
 800c67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c682:	4770      	bx	lr

0800c684 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2202      	movs	r2, #2
 800c694:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	687a      	ldr	r2, [r7, #4]
 800c69c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	68ba      	ldr	r2, [r7, #8]
 800c6a8:	2100      	movs	r1, #0
 800c6aa:	68f8      	ldr	r0, [r7, #12]
 800c6ac:	f000 fcdd 	bl	800d06a <USBD_LL_Transmit>

  return USBD_OK;
 800c6b0:	2300      	movs	r3, #0
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3710      	adds	r7, #16
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}

0800c6ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b084      	sub	sp, #16
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	60f8      	str	r0, [r7, #12]
 800c6c2:	60b9      	str	r1, [r7, #8]
 800c6c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	68ba      	ldr	r2, [r7, #8]
 800c6ca:	2100      	movs	r1, #0
 800c6cc:	68f8      	ldr	r0, [r7, #12]
 800c6ce:	f000 fccc 	bl	800d06a <USBD_LL_Transmit>

  return USBD_OK;
 800c6d2:	2300      	movs	r3, #0
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3710      	adds	r7, #16
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}

0800c6dc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2203      	movs	r2, #3
 800c6ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	68ba      	ldr	r2, [r7, #8]
 800c704:	2100      	movs	r1, #0
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	f000 fcd0 	bl	800d0ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c70c:	2300      	movs	r3, #0
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c716:	b580      	push	{r7, lr}
 800c718:	b084      	sub	sp, #16
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	60f8      	str	r0, [r7, #12]
 800c71e:	60b9      	str	r1, [r7, #8]
 800c720:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	68ba      	ldr	r2, [r7, #8]
 800c726:	2100      	movs	r1, #0
 800c728:	68f8      	ldr	r0, [r7, #12]
 800c72a:	f000 fcbf 	bl	800d0ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c72e:	2300      	movs	r3, #0
}
 800c730:	4618      	mov	r0, r3
 800c732:	3710      	adds	r7, #16
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}

0800c738 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2204      	movs	r2, #4
 800c744:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c748:	2300      	movs	r3, #0
 800c74a:	2200      	movs	r2, #0
 800c74c:	2100      	movs	r1, #0
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 fc8b 	bl	800d06a <USBD_LL_Transmit>

  return USBD_OK;
 800c754:	2300      	movs	r3, #0
}
 800c756:	4618      	mov	r0, r3
 800c758:	3708      	adds	r7, #8
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c75e:	b580      	push	{r7, lr}
 800c760:	b082      	sub	sp, #8
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2205      	movs	r2, #5
 800c76a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c76e:	2300      	movs	r3, #0
 800c770:	2200      	movs	r2, #0
 800c772:	2100      	movs	r1, #0
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f000 fc99 	bl	800d0ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c77a:	2300      	movs	r3, #0
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3708      	adds	r7, #8
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c788:	2200      	movs	r2, #0
 800c78a:	4912      	ldr	r1, [pc, #72]	@ (800c7d4 <MX_USB_DEVICE_Init+0x50>)
 800c78c:	4812      	ldr	r0, [pc, #72]	@ (800c7d8 <MX_USB_DEVICE_Init+0x54>)
 800c78e:	f7fe fcf7 	bl	800b180 <USBD_Init>
 800c792:	4603      	mov	r3, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d001      	beq.n	800c79c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c798:	f7f4 ff3e 	bl	8001618 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c79c:	490f      	ldr	r1, [pc, #60]	@ (800c7dc <MX_USB_DEVICE_Init+0x58>)
 800c79e:	480e      	ldr	r0, [pc, #56]	@ (800c7d8 <MX_USB_DEVICE_Init+0x54>)
 800c7a0:	f7fe fd1e 	bl	800b1e0 <USBD_RegisterClass>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d001      	beq.n	800c7ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c7aa:	f7f4 ff35 	bl	8001618 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c7ae:	490c      	ldr	r1, [pc, #48]	@ (800c7e0 <MX_USB_DEVICE_Init+0x5c>)
 800c7b0:	4809      	ldr	r0, [pc, #36]	@ (800c7d8 <MX_USB_DEVICE_Init+0x54>)
 800c7b2:	f7fe fc55 	bl	800b060 <USBD_CDC_RegisterInterface>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d001      	beq.n	800c7c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c7bc:	f7f4 ff2c 	bl	8001618 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c7c0:	4805      	ldr	r0, [pc, #20]	@ (800c7d8 <MX_USB_DEVICE_Init+0x54>)
 800c7c2:	f7fe fd43 	bl	800b24c <USBD_Start>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d001      	beq.n	800c7d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c7cc:	f7f4 ff24 	bl	8001618 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c7d0:	bf00      	nop
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	200000c0 	.word	0x200000c0
 800c7d8:	2000085c 	.word	0x2000085c
 800c7dc:	2000002c 	.word	0x2000002c
 800c7e0:	200000ac 	.word	0x200000ac

0800c7e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	4905      	ldr	r1, [pc, #20]	@ (800c800 <CDC_Init_FS+0x1c>)
 800c7ec:	4805      	ldr	r0, [pc, #20]	@ (800c804 <CDC_Init_FS+0x20>)
 800c7ee:	f7fe fc51 	bl	800b094 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c7f2:	4905      	ldr	r1, [pc, #20]	@ (800c808 <CDC_Init_FS+0x24>)
 800c7f4:	4803      	ldr	r0, [pc, #12]	@ (800c804 <CDC_Init_FS+0x20>)
 800c7f6:	f7fe fc6f 	bl	800b0d8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c7fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	2000133c 	.word	0x2000133c
 800c804:	2000085c 	.word	0x2000085c
 800c808:	20000b3c 	.word	0x20000b3c

0800c80c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c80c:	b480      	push	{r7}
 800c80e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c810:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c812:	4618      	mov	r0, r3
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr

0800c81c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b083      	sub	sp, #12
 800c820:	af00      	add	r7, sp, #0
 800c822:	4603      	mov	r3, r0
 800c824:	6039      	str	r1, [r7, #0]
 800c826:	71fb      	strb	r3, [r7, #7]
 800c828:	4613      	mov	r3, r2
 800c82a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c82c:	79fb      	ldrb	r3, [r7, #7]
 800c82e:	2b23      	cmp	r3, #35	@ 0x23
 800c830:	d84a      	bhi.n	800c8c8 <CDC_Control_FS+0xac>
 800c832:	a201      	add	r2, pc, #4	@ (adr r2, 800c838 <CDC_Control_FS+0x1c>)
 800c834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c838:	0800c8c9 	.word	0x0800c8c9
 800c83c:	0800c8c9 	.word	0x0800c8c9
 800c840:	0800c8c9 	.word	0x0800c8c9
 800c844:	0800c8c9 	.word	0x0800c8c9
 800c848:	0800c8c9 	.word	0x0800c8c9
 800c84c:	0800c8c9 	.word	0x0800c8c9
 800c850:	0800c8c9 	.word	0x0800c8c9
 800c854:	0800c8c9 	.word	0x0800c8c9
 800c858:	0800c8c9 	.word	0x0800c8c9
 800c85c:	0800c8c9 	.word	0x0800c8c9
 800c860:	0800c8c9 	.word	0x0800c8c9
 800c864:	0800c8c9 	.word	0x0800c8c9
 800c868:	0800c8c9 	.word	0x0800c8c9
 800c86c:	0800c8c9 	.word	0x0800c8c9
 800c870:	0800c8c9 	.word	0x0800c8c9
 800c874:	0800c8c9 	.word	0x0800c8c9
 800c878:	0800c8c9 	.word	0x0800c8c9
 800c87c:	0800c8c9 	.word	0x0800c8c9
 800c880:	0800c8c9 	.word	0x0800c8c9
 800c884:	0800c8c9 	.word	0x0800c8c9
 800c888:	0800c8c9 	.word	0x0800c8c9
 800c88c:	0800c8c9 	.word	0x0800c8c9
 800c890:	0800c8c9 	.word	0x0800c8c9
 800c894:	0800c8c9 	.word	0x0800c8c9
 800c898:	0800c8c9 	.word	0x0800c8c9
 800c89c:	0800c8c9 	.word	0x0800c8c9
 800c8a0:	0800c8c9 	.word	0x0800c8c9
 800c8a4:	0800c8c9 	.word	0x0800c8c9
 800c8a8:	0800c8c9 	.word	0x0800c8c9
 800c8ac:	0800c8c9 	.word	0x0800c8c9
 800c8b0:	0800c8c9 	.word	0x0800c8c9
 800c8b4:	0800c8c9 	.word	0x0800c8c9
 800c8b8:	0800c8c9 	.word	0x0800c8c9
 800c8bc:	0800c8c9 	.word	0x0800c8c9
 800c8c0:	0800c8c9 	.word	0x0800c8c9
 800c8c4:	0800c8c9 	.word	0x0800c8c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c8c8:	bf00      	nop
  }

  return (USBD_OK);
 800c8ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	370c      	adds	r7, #12
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b084      	sub	sp, #16
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c8e2:	6879      	ldr	r1, [r7, #4]
 800c8e4:	480e      	ldr	r0, [pc, #56]	@ (800c920 <CDC_Receive_FS+0x48>)
 800c8e6:	f7fe fbf7 	bl	800b0d8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c8ea:	480d      	ldr	r0, [pc, #52]	@ (800c920 <CDC_Receive_FS+0x48>)
 800c8ec:	f7fe fc12 	bl	800b114 <USBD_CDC_ReceivePacket>

  //https://controllerstech.com/send-and-receive-data-to-pc-without-uart-stm32-usb-com/

  uint8_t len = (uint8_t) *Len;
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	73fb      	strb	r3, [r7, #15]

    if(len == ROS_COMM_RX_SIZE){
 800c8f6:	7bfb      	ldrb	r3, [r7, #15]
 800c8f8:	2b0d      	cmp	r3, #13
 800c8fa:	d105      	bne.n	800c908 <CDC_Receive_FS+0x30>
	  memcpy((uint8_t *)&rbc_Packet_t, Buf, len);  // copy the data to the buffer
 800c8fc:	7bfb      	ldrb	r3, [r7, #15]
 800c8fe:	461a      	mov	r2, r3
 800c900:	6879      	ldr	r1, [r7, #4]
 800c902:	4808      	ldr	r0, [pc, #32]	@ (800c924 <CDC_Receive_FS+0x4c>)
 800c904:	f000 fc76 	bl	800d1f4 <memcpy>
    }

    rx_flag = 1;
 800c908:	4b07      	ldr	r3, [pc, #28]	@ (800c928 <CDC_Receive_FS+0x50>)
 800c90a:	2201      	movs	r2, #1
 800c90c:	701a      	strb	r2, [r3, #0]
    tx_flag = 0;
 800c90e:	4b07      	ldr	r3, [pc, #28]	@ (800c92c <CDC_Receive_FS+0x54>)
 800c910:	2200      	movs	r2, #0
 800c912:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800c914:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c916:	4618      	mov	r0, r3
 800c918:	3710      	adds	r7, #16
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop
 800c920:	2000085c 	.word	0x2000085c
 800c924:	2000082c 	.word	0x2000082c
 800c928:	20000b38 	.word	0x20000b38
 800c92c:	200000aa 	.word	0x200000aa

0800c930 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c930:	b480      	push	{r7}
 800c932:	b087      	sub	sp, #28
 800c934:	af00      	add	r7, sp, #0
 800c936:	60f8      	str	r0, [r7, #12]
 800c938:	60b9      	str	r1, [r7, #8]
 800c93a:	4613      	mov	r3, r2
 800c93c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c93e:	2300      	movs	r3, #0
 800c940:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
    UNUSED(Buf);
    UNUSED(Len);
    UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c942:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c946:	4618      	mov	r0, r3
 800c948:	371c      	adds	r7, #28
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr
	...

0800c954 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
 800c95a:	4603      	mov	r3, r0
 800c95c:	6039      	str	r1, [r7, #0]
 800c95e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	2212      	movs	r2, #18
 800c964:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c966:	4b03      	ldr	r3, [pc, #12]	@ (800c974 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c968:	4618      	mov	r0, r3
 800c96a:	370c      	adds	r7, #12
 800c96c:	46bd      	mov	sp, r7
 800c96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c972:	4770      	bx	lr
 800c974:	200000dc 	.word	0x200000dc

0800c978 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	4603      	mov	r3, r0
 800c980:	6039      	str	r1, [r7, #0]
 800c982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	2204      	movs	r2, #4
 800c988:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c98a:	4b03      	ldr	r3, [pc, #12]	@ (800c998 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	370c      	adds	r7, #12
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr
 800c998:	200000f0 	.word	0x200000f0

0800c99c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	6039      	str	r1, [r7, #0]
 800c9a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c9a8:	79fb      	ldrb	r3, [r7, #7]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d105      	bne.n	800c9ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c9ae:	683a      	ldr	r2, [r7, #0]
 800c9b0:	4907      	ldr	r1, [pc, #28]	@ (800c9d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c9b2:	4808      	ldr	r0, [pc, #32]	@ (800c9d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c9b4:	f7ff fdfa 	bl	800c5ac <USBD_GetString>
 800c9b8:	e004      	b.n	800c9c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c9ba:	683a      	ldr	r2, [r7, #0]
 800c9bc:	4904      	ldr	r1, [pc, #16]	@ (800c9d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800c9be:	4805      	ldr	r0, [pc, #20]	@ (800c9d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800c9c0:	f7ff fdf4 	bl	800c5ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9c4:	4b02      	ldr	r3, [pc, #8]	@ (800c9d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3708      	adds	r7, #8
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	20001b3c 	.word	0x20001b3c
 800c9d4:	0800d268 	.word	0x0800d268

0800c9d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b082      	sub	sp, #8
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	4603      	mov	r3, r0
 800c9e0:	6039      	str	r1, [r7, #0]
 800c9e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c9e4:	683a      	ldr	r2, [r7, #0]
 800c9e6:	4904      	ldr	r1, [pc, #16]	@ (800c9f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c9e8:	4804      	ldr	r0, [pc, #16]	@ (800c9fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c9ea:	f7ff fddf 	bl	800c5ac <USBD_GetString>
  return USBD_StrDesc;
 800c9ee:	4b02      	ldr	r3, [pc, #8]	@ (800c9f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3708      	adds	r7, #8
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}
 800c9f8:	20001b3c 	.word	0x20001b3c
 800c9fc:	0800d280 	.word	0x0800d280

0800ca00 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b082      	sub	sp, #8
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	4603      	mov	r3, r0
 800ca08:	6039      	str	r1, [r7, #0]
 800ca0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	221a      	movs	r2, #26
 800ca10:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ca12:	f000 f843 	bl	800ca9c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ca16:	4b02      	ldr	r3, [pc, #8]	@ (800ca20 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3708      	adds	r7, #8
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	200000f4 	.word	0x200000f4

0800ca24 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	6039      	str	r1, [r7, #0]
 800ca2e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ca30:	79fb      	ldrb	r3, [r7, #7]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d105      	bne.n	800ca42 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ca36:	683a      	ldr	r2, [r7, #0]
 800ca38:	4907      	ldr	r1, [pc, #28]	@ (800ca58 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ca3a:	4808      	ldr	r0, [pc, #32]	@ (800ca5c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ca3c:	f7ff fdb6 	bl	800c5ac <USBD_GetString>
 800ca40:	e004      	b.n	800ca4c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ca42:	683a      	ldr	r2, [r7, #0]
 800ca44:	4904      	ldr	r1, [pc, #16]	@ (800ca58 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ca46:	4805      	ldr	r0, [pc, #20]	@ (800ca5c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ca48:	f7ff fdb0 	bl	800c5ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca4c:	4b02      	ldr	r3, [pc, #8]	@ (800ca58 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3708      	adds	r7, #8
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	20001b3c 	.word	0x20001b3c
 800ca5c:	0800d294 	.word	0x0800d294

0800ca60 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	4603      	mov	r3, r0
 800ca68:	6039      	str	r1, [r7, #0]
 800ca6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ca6c:	79fb      	ldrb	r3, [r7, #7]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d105      	bne.n	800ca7e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ca72:	683a      	ldr	r2, [r7, #0]
 800ca74:	4907      	ldr	r1, [pc, #28]	@ (800ca94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ca76:	4808      	ldr	r0, [pc, #32]	@ (800ca98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ca78:	f7ff fd98 	bl	800c5ac <USBD_GetString>
 800ca7c:	e004      	b.n	800ca88 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ca7e:	683a      	ldr	r2, [r7, #0]
 800ca80:	4904      	ldr	r1, [pc, #16]	@ (800ca94 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ca82:	4805      	ldr	r0, [pc, #20]	@ (800ca98 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ca84:	f7ff fd92 	bl	800c5ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca88:	4b02      	ldr	r3, [pc, #8]	@ (800ca94 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3708      	adds	r7, #8
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	20001b3c 	.word	0x20001b3c
 800ca98:	0800d2a0 	.word	0x0800d2a0

0800ca9c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800caa2:	4b0f      	ldr	r3, [pc, #60]	@ (800cae0 <Get_SerialNum+0x44>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800caa8:	4b0e      	ldr	r3, [pc, #56]	@ (800cae4 <Get_SerialNum+0x48>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800caae:	4b0e      	ldr	r3, [pc, #56]	@ (800cae8 <Get_SerialNum+0x4c>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cab4:	68fa      	ldr	r2, [r7, #12]
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	4413      	add	r3, r2
 800caba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d009      	beq.n	800cad6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cac2:	2208      	movs	r2, #8
 800cac4:	4909      	ldr	r1, [pc, #36]	@ (800caec <Get_SerialNum+0x50>)
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	f000 f814 	bl	800caf4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cacc:	2204      	movs	r2, #4
 800cace:	4908      	ldr	r1, [pc, #32]	@ (800caf0 <Get_SerialNum+0x54>)
 800cad0:	68b8      	ldr	r0, [r7, #8]
 800cad2:	f000 f80f 	bl	800caf4 <IntToUnicode>
  }
}
 800cad6:	bf00      	nop
 800cad8:	3710      	adds	r7, #16
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	1fff7a10 	.word	0x1fff7a10
 800cae4:	1fff7a14 	.word	0x1fff7a14
 800cae8:	1fff7a18 	.word	0x1fff7a18
 800caec:	200000f6 	.word	0x200000f6
 800caf0:	20000106 	.word	0x20000106

0800caf4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b087      	sub	sp, #28
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	4613      	mov	r3, r2
 800cb00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cb02:	2300      	movs	r3, #0
 800cb04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cb06:	2300      	movs	r3, #0
 800cb08:	75fb      	strb	r3, [r7, #23]
 800cb0a:	e027      	b.n	800cb5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	0f1b      	lsrs	r3, r3, #28
 800cb10:	2b09      	cmp	r3, #9
 800cb12:	d80b      	bhi.n	800cb2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	0f1b      	lsrs	r3, r3, #28
 800cb18:	b2da      	uxtb	r2, r3
 800cb1a:	7dfb      	ldrb	r3, [r7, #23]
 800cb1c:	005b      	lsls	r3, r3, #1
 800cb1e:	4619      	mov	r1, r3
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	440b      	add	r3, r1
 800cb24:	3230      	adds	r2, #48	@ 0x30
 800cb26:	b2d2      	uxtb	r2, r2
 800cb28:	701a      	strb	r2, [r3, #0]
 800cb2a:	e00a      	b.n	800cb42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	0f1b      	lsrs	r3, r3, #28
 800cb30:	b2da      	uxtb	r2, r3
 800cb32:	7dfb      	ldrb	r3, [r7, #23]
 800cb34:	005b      	lsls	r3, r3, #1
 800cb36:	4619      	mov	r1, r3
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	440b      	add	r3, r1
 800cb3c:	3237      	adds	r2, #55	@ 0x37
 800cb3e:	b2d2      	uxtb	r2, r2
 800cb40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	011b      	lsls	r3, r3, #4
 800cb46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cb48:	7dfb      	ldrb	r3, [r7, #23]
 800cb4a:	005b      	lsls	r3, r3, #1
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	68ba      	ldr	r2, [r7, #8]
 800cb50:	4413      	add	r3, r2
 800cb52:	2200      	movs	r2, #0
 800cb54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cb56:	7dfb      	ldrb	r3, [r7, #23]
 800cb58:	3301      	adds	r3, #1
 800cb5a:	75fb      	strb	r3, [r7, #23]
 800cb5c:	7dfa      	ldrb	r2, [r7, #23]
 800cb5e:	79fb      	ldrb	r3, [r7, #7]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d3d3      	bcc.n	800cb0c <IntToUnicode+0x18>
  }
}
 800cb64:	bf00      	nop
 800cb66:	bf00      	nop
 800cb68:	371c      	adds	r7, #28
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr
	...

0800cb74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b08a      	sub	sp, #40	@ 0x28
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb7c:	f107 0314 	add.w	r3, r7, #20
 800cb80:	2200      	movs	r2, #0
 800cb82:	601a      	str	r2, [r3, #0]
 800cb84:	605a      	str	r2, [r3, #4]
 800cb86:	609a      	str	r2, [r3, #8]
 800cb88:	60da      	str	r2, [r3, #12]
 800cb8a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cb94:	d13a      	bne.n	800cc0c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cb96:	2300      	movs	r3, #0
 800cb98:	613b      	str	r3, [r7, #16]
 800cb9a:	4b1e      	ldr	r3, [pc, #120]	@ (800cc14 <HAL_PCD_MspInit+0xa0>)
 800cb9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb9e:	4a1d      	ldr	r2, [pc, #116]	@ (800cc14 <HAL_PCD_MspInit+0xa0>)
 800cba0:	f043 0301 	orr.w	r3, r3, #1
 800cba4:	6313      	str	r3, [r2, #48]	@ 0x30
 800cba6:	4b1b      	ldr	r3, [pc, #108]	@ (800cc14 <HAL_PCD_MspInit+0xa0>)
 800cba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbaa:	f003 0301 	and.w	r3, r3, #1
 800cbae:	613b      	str	r3, [r7, #16]
 800cbb0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cbb2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800cbb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbb8:	2302      	movs	r3, #2
 800cbba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cbc0:	2303      	movs	r3, #3
 800cbc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cbc4:	230a      	movs	r3, #10
 800cbc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cbc8:	f107 0314 	add.w	r3, r7, #20
 800cbcc:	4619      	mov	r1, r3
 800cbce:	4812      	ldr	r0, [pc, #72]	@ (800cc18 <HAL_PCD_MspInit+0xa4>)
 800cbd0:	f7f5 ff12 	bl	80029f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cbd4:	4b0f      	ldr	r3, [pc, #60]	@ (800cc14 <HAL_PCD_MspInit+0xa0>)
 800cbd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbd8:	4a0e      	ldr	r2, [pc, #56]	@ (800cc14 <HAL_PCD_MspInit+0xa0>)
 800cbda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbde:	6353      	str	r3, [r2, #52]	@ 0x34
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	60fb      	str	r3, [r7, #12]
 800cbe4:	4b0b      	ldr	r3, [pc, #44]	@ (800cc14 <HAL_PCD_MspInit+0xa0>)
 800cbe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbe8:	4a0a      	ldr	r2, [pc, #40]	@ (800cc14 <HAL_PCD_MspInit+0xa0>)
 800cbea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cbee:	6453      	str	r3, [r2, #68]	@ 0x44
 800cbf0:	4b08      	ldr	r3, [pc, #32]	@ (800cc14 <HAL_PCD_MspInit+0xa0>)
 800cbf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cbf8:	60fb      	str	r3, [r7, #12]
 800cbfa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	2100      	movs	r1, #0
 800cc00:	2043      	movs	r0, #67	@ 0x43
 800cc02:	f7f5 fe30 	bl	8002866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cc06:	2043      	movs	r0, #67	@ 0x43
 800cc08:	f7f5 fe49 	bl	800289e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cc0c:	bf00      	nop
 800cc0e:	3728      	adds	r7, #40	@ 0x28
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}
 800cc14:	40023800 	.word	0x40023800
 800cc18:	40020000 	.word	0x40020000

0800cc1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b082      	sub	sp, #8
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cc30:	4619      	mov	r1, r3
 800cc32:	4610      	mov	r0, r2
 800cc34:	f7fe fb57 	bl	800b2e6 <USBD_LL_SetupStage>
}
 800cc38:	bf00      	nop
 800cc3a:	3708      	adds	r7, #8
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	460b      	mov	r3, r1
 800cc4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cc52:	78fa      	ldrb	r2, [r7, #3]
 800cc54:	6879      	ldr	r1, [r7, #4]
 800cc56:	4613      	mov	r3, r2
 800cc58:	00db      	lsls	r3, r3, #3
 800cc5a:	4413      	add	r3, r2
 800cc5c:	009b      	lsls	r3, r3, #2
 800cc5e:	440b      	add	r3, r1
 800cc60:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cc64:	681a      	ldr	r2, [r3, #0]
 800cc66:	78fb      	ldrb	r3, [r7, #3]
 800cc68:	4619      	mov	r1, r3
 800cc6a:	f7fe fb91 	bl	800b390 <USBD_LL_DataOutStage>
}
 800cc6e:	bf00      	nop
 800cc70:	3708      	adds	r7, #8
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc76:	b580      	push	{r7, lr}
 800cc78:	b082      	sub	sp, #8
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
 800cc7e:	460b      	mov	r3, r1
 800cc80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cc88:	78fa      	ldrb	r2, [r7, #3]
 800cc8a:	6879      	ldr	r1, [r7, #4]
 800cc8c:	4613      	mov	r3, r2
 800cc8e:	00db      	lsls	r3, r3, #3
 800cc90:	4413      	add	r3, r2
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	440b      	add	r3, r1
 800cc96:	3320      	adds	r3, #32
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	78fb      	ldrb	r3, [r7, #3]
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	f7fe fc2a 	bl	800b4f6 <USBD_LL_DataInStage>
}
 800cca2:	bf00      	nop
 800cca4:	3708      	adds	r7, #8
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}

0800ccaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccaa:	b580      	push	{r7, lr}
 800ccac:	b082      	sub	sp, #8
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7fe fd64 	bl	800b786 <USBD_LL_SOF>
}
 800ccbe:	bf00      	nop
 800ccc0:	3708      	adds	r7, #8
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccc6:	b580      	push	{r7, lr}
 800ccc8:	b084      	sub	sp, #16
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ccce:	2301      	movs	r3, #1
 800ccd0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	79db      	ldrb	r3, [r3, #7]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d102      	bne.n	800cce0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	73fb      	strb	r3, [r7, #15]
 800ccde:	e008      	b.n	800ccf2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	79db      	ldrb	r3, [r3, #7]
 800cce4:	2b02      	cmp	r3, #2
 800cce6:	d102      	bne.n	800ccee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cce8:	2301      	movs	r3, #1
 800ccea:	73fb      	strb	r3, [r7, #15]
 800ccec:	e001      	b.n	800ccf2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ccee:	f7f4 fc93 	bl	8001618 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ccf8:	7bfa      	ldrb	r2, [r7, #15]
 800ccfa:	4611      	mov	r1, r2
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f7fe fcfe 	bl	800b6fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7fe fca6 	bl	800b65a <USBD_LL_Reset>
}
 800cd0e:	bf00      	nop
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
	...

0800cd18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7fe fcf9 	bl	800b71e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	687a      	ldr	r2, [r7, #4]
 800cd38:	6812      	ldr	r2, [r2, #0]
 800cd3a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800cd3e:	f043 0301 	orr.w	r3, r3, #1
 800cd42:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	7adb      	ldrb	r3, [r3, #11]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d005      	beq.n	800cd58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd4c:	4b04      	ldr	r3, [pc, #16]	@ (800cd60 <HAL_PCD_SuspendCallback+0x48>)
 800cd4e:	691b      	ldr	r3, [r3, #16]
 800cd50:	4a03      	ldr	r2, [pc, #12]	@ (800cd60 <HAL_PCD_SuspendCallback+0x48>)
 800cd52:	f043 0306 	orr.w	r3, r3, #6
 800cd56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cd58:	bf00      	nop
 800cd5a:	3708      	adds	r7, #8
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}
 800cd60:	e000ed00 	.word	0xe000ed00

0800cd64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b082      	sub	sp, #8
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7fe fcef 	bl	800b756 <USBD_LL_Resume>
}
 800cd78:	bf00      	nop
 800cd7a:	3708      	adds	r7, #8
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b082      	sub	sp, #8
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	460b      	mov	r3, r1
 800cd8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cd92:	78fa      	ldrb	r2, [r7, #3]
 800cd94:	4611      	mov	r1, r2
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7fe fd47 	bl	800b82a <USBD_LL_IsoOUTIncomplete>
}
 800cd9c:	bf00      	nop
 800cd9e:	3708      	adds	r7, #8
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b082      	sub	sp, #8
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	460b      	mov	r3, r1
 800cdae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cdb6:	78fa      	ldrb	r2, [r7, #3]
 800cdb8:	4611      	mov	r1, r2
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7fe fd03 	bl	800b7c6 <USBD_LL_IsoINIncomplete>
}
 800cdc0:	bf00      	nop
 800cdc2:	3708      	adds	r7, #8
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7fe fd59 	bl	800b88e <USBD_LL_DevConnected>
}
 800cddc:	bf00      	nop
 800cdde:	3708      	adds	r7, #8
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b082      	sub	sp, #8
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7fe fd56 	bl	800b8a4 <USBD_LL_DevDisconnected>
}
 800cdf8:	bf00      	nop
 800cdfa:	3708      	adds	r7, #8
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d13c      	bne.n	800ce8a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ce10:	4a20      	ldr	r2, [pc, #128]	@ (800ce94 <USBD_LL_Init+0x94>)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	4a1e      	ldr	r2, [pc, #120]	@ (800ce94 <USBD_LL_Init+0x94>)
 800ce1c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ce20:	4b1c      	ldr	r3, [pc, #112]	@ (800ce94 <USBD_LL_Init+0x94>)
 800ce22:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ce26:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ce28:	4b1a      	ldr	r3, [pc, #104]	@ (800ce94 <USBD_LL_Init+0x94>)
 800ce2a:	2204      	movs	r2, #4
 800ce2c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ce2e:	4b19      	ldr	r3, [pc, #100]	@ (800ce94 <USBD_LL_Init+0x94>)
 800ce30:	2202      	movs	r2, #2
 800ce32:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ce34:	4b17      	ldr	r3, [pc, #92]	@ (800ce94 <USBD_LL_Init+0x94>)
 800ce36:	2200      	movs	r2, #0
 800ce38:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ce3a:	4b16      	ldr	r3, [pc, #88]	@ (800ce94 <USBD_LL_Init+0x94>)
 800ce3c:	2202      	movs	r2, #2
 800ce3e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ce40:	4b14      	ldr	r3, [pc, #80]	@ (800ce94 <USBD_LL_Init+0x94>)
 800ce42:	2200      	movs	r2, #0
 800ce44:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ce46:	4b13      	ldr	r3, [pc, #76]	@ (800ce94 <USBD_LL_Init+0x94>)
 800ce48:	2200      	movs	r2, #0
 800ce4a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ce4c:	4b11      	ldr	r3, [pc, #68]	@ (800ce94 <USBD_LL_Init+0x94>)
 800ce4e:	2200      	movs	r2, #0
 800ce50:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ce52:	4b10      	ldr	r3, [pc, #64]	@ (800ce94 <USBD_LL_Init+0x94>)
 800ce54:	2200      	movs	r2, #0
 800ce56:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ce58:	4b0e      	ldr	r3, [pc, #56]	@ (800ce94 <USBD_LL_Init+0x94>)
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ce5e:	480d      	ldr	r0, [pc, #52]	@ (800ce94 <USBD_LL_Init+0x94>)
 800ce60:	f7f6 ffa4 	bl	8003dac <HAL_PCD_Init>
 800ce64:	4603      	mov	r3, r0
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d001      	beq.n	800ce6e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ce6a:	f7f4 fbd5 	bl	8001618 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ce6e:	2180      	movs	r1, #128	@ 0x80
 800ce70:	4808      	ldr	r0, [pc, #32]	@ (800ce94 <USBD_LL_Init+0x94>)
 800ce72:	f7f8 f9d0 	bl	8005216 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ce76:	2240      	movs	r2, #64	@ 0x40
 800ce78:	2100      	movs	r1, #0
 800ce7a:	4806      	ldr	r0, [pc, #24]	@ (800ce94 <USBD_LL_Init+0x94>)
 800ce7c:	f7f8 f984 	bl	8005188 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ce80:	2280      	movs	r2, #128	@ 0x80
 800ce82:	2101      	movs	r1, #1
 800ce84:	4803      	ldr	r0, [pc, #12]	@ (800ce94 <USBD_LL_Init+0x94>)
 800ce86:	f7f8 f97f 	bl	8005188 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ce8a:	2300      	movs	r3, #0
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3708      	adds	r7, #8
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	20001d3c 	.word	0x20001d3c

0800ce98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b084      	sub	sp, #16
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cea0:	2300      	movs	r3, #0
 800cea2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cea4:	2300      	movs	r3, #0
 800cea6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7f7 f88b 	bl	8003fca <HAL_PCD_Start>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ceb8:	7bfb      	ldrb	r3, [r7, #15]
 800ceba:	4618      	mov	r0, r3
 800cebc:	f000 f942 	bl	800d144 <USBD_Get_USB_Status>
 800cec0:	4603      	mov	r3, r0
 800cec2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cec4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	3710      	adds	r7, #16
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cece:	b580      	push	{r7, lr}
 800ced0:	b084      	sub	sp, #16
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
 800ced6:	4608      	mov	r0, r1
 800ced8:	4611      	mov	r1, r2
 800ceda:	461a      	mov	r2, r3
 800cedc:	4603      	mov	r3, r0
 800cede:	70fb      	strb	r3, [r7, #3]
 800cee0:	460b      	mov	r3, r1
 800cee2:	70bb      	strb	r3, [r7, #2]
 800cee4:	4613      	mov	r3, r2
 800cee6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cee8:	2300      	movs	r3, #0
 800ceea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceec:	2300      	movs	r3, #0
 800ceee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800cef6:	78bb      	ldrb	r3, [r7, #2]
 800cef8:	883a      	ldrh	r2, [r7, #0]
 800cefa:	78f9      	ldrb	r1, [r7, #3]
 800cefc:	f7f7 fd5f 	bl	80049be <HAL_PCD_EP_Open>
 800cf00:	4603      	mov	r3, r0
 800cf02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf04:	7bfb      	ldrb	r3, [r7, #15]
 800cf06:	4618      	mov	r0, r3
 800cf08:	f000 f91c 	bl	800d144 <USBD_Get_USB_Status>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf10:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	3710      	adds	r7, #16
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b084      	sub	sp, #16
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	6078      	str	r0, [r7, #4]
 800cf22:	460b      	mov	r3, r1
 800cf24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf26:	2300      	movs	r3, #0
 800cf28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cf34:	78fa      	ldrb	r2, [r7, #3]
 800cf36:	4611      	mov	r1, r2
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7f7 fdaa 	bl	8004a92 <HAL_PCD_EP_Close>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf42:	7bfb      	ldrb	r3, [r7, #15]
 800cf44:	4618      	mov	r0, r3
 800cf46:	f000 f8fd 	bl	800d144 <USBD_Get_USB_Status>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf4e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3710      	adds	r7, #16
 800cf54:	46bd      	mov	sp, r7
 800cf56:	bd80      	pop	{r7, pc}

0800cf58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b084      	sub	sp, #16
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	460b      	mov	r3, r1
 800cf62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf64:	2300      	movs	r3, #0
 800cf66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cf72:	78fa      	ldrb	r2, [r7, #3]
 800cf74:	4611      	mov	r1, r2
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7f7 fe62 	bl	8004c40 <HAL_PCD_EP_SetStall>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf80:	7bfb      	ldrb	r3, [r7, #15]
 800cf82:	4618      	mov	r0, r3
 800cf84:	f000 f8de 	bl	800d144 <USBD_Get_USB_Status>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3710      	adds	r7, #16
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}

0800cf96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf96:	b580      	push	{r7, lr}
 800cf98:	b084      	sub	sp, #16
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	6078      	str	r0, [r7, #4]
 800cf9e:	460b      	mov	r3, r1
 800cfa0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cfb0:	78fa      	ldrb	r2, [r7, #3]
 800cfb2:	4611      	mov	r1, r2
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7f7 fea6 	bl	8004d06 <HAL_PCD_EP_ClrStall>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfbe:	7bfb      	ldrb	r3, [r7, #15]
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f000 f8bf 	bl	800d144 <USBD_Get_USB_Status>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfca:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3710      	adds	r7, #16
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	460b      	mov	r3, r1
 800cfde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cfe6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cfe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	da0b      	bge.n	800d008 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cff0:	78fb      	ldrb	r3, [r7, #3]
 800cff2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cff6:	68f9      	ldr	r1, [r7, #12]
 800cff8:	4613      	mov	r3, r2
 800cffa:	00db      	lsls	r3, r3, #3
 800cffc:	4413      	add	r3, r2
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	440b      	add	r3, r1
 800d002:	3316      	adds	r3, #22
 800d004:	781b      	ldrb	r3, [r3, #0]
 800d006:	e00b      	b.n	800d020 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d008:	78fb      	ldrb	r3, [r7, #3]
 800d00a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d00e:	68f9      	ldr	r1, [r7, #12]
 800d010:	4613      	mov	r3, r2
 800d012:	00db      	lsls	r3, r3, #3
 800d014:	4413      	add	r3, r2
 800d016:	009b      	lsls	r3, r3, #2
 800d018:	440b      	add	r3, r1
 800d01a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d01e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d020:	4618      	mov	r0, r3
 800d022:	3714      	adds	r7, #20
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr

0800d02c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	460b      	mov	r3, r1
 800d036:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d038:	2300      	movs	r3, #0
 800d03a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d03c:	2300      	movs	r3, #0
 800d03e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d046:	78fa      	ldrb	r2, [r7, #3]
 800d048:	4611      	mov	r1, r2
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7f7 fc93 	bl	8004976 <HAL_PCD_SetAddress>
 800d050:	4603      	mov	r3, r0
 800d052:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d054:	7bfb      	ldrb	r3, [r7, #15]
 800d056:	4618      	mov	r0, r3
 800d058:	f000 f874 	bl	800d144 <USBD_Get_USB_Status>
 800d05c:	4603      	mov	r3, r0
 800d05e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d060:	7bbb      	ldrb	r3, [r7, #14]
}
 800d062:	4618      	mov	r0, r3
 800d064:	3710      	adds	r7, #16
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}

0800d06a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d06a:	b580      	push	{r7, lr}
 800d06c:	b086      	sub	sp, #24
 800d06e:	af00      	add	r7, sp, #0
 800d070:	60f8      	str	r0, [r7, #12]
 800d072:	607a      	str	r2, [r7, #4]
 800d074:	603b      	str	r3, [r7, #0]
 800d076:	460b      	mov	r3, r1
 800d078:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d07a:	2300      	movs	r3, #0
 800d07c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d07e:	2300      	movs	r3, #0
 800d080:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d088:	7af9      	ldrb	r1, [r7, #11]
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	687a      	ldr	r2, [r7, #4]
 800d08e:	f7f7 fd9d 	bl	8004bcc <HAL_PCD_EP_Transmit>
 800d092:	4603      	mov	r3, r0
 800d094:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d096:	7dfb      	ldrb	r3, [r7, #23]
 800d098:	4618      	mov	r0, r3
 800d09a:	f000 f853 	bl	800d144 <USBD_Get_USB_Status>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d0a2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3718      	adds	r7, #24
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}

0800d0ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b086      	sub	sp, #24
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	60f8      	str	r0, [r7, #12]
 800d0b4:	607a      	str	r2, [r7, #4]
 800d0b6:	603b      	str	r3, [r7, #0]
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d0ca:	7af9      	ldrb	r1, [r7, #11]
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	f7f7 fd29 	bl	8004b26 <HAL_PCD_EP_Receive>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0d8:	7dfb      	ldrb	r3, [r7, #23]
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f000 f832 	bl	800d144 <USBD_Get_USB_Status>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d0e4:	7dbb      	ldrb	r3, [r7, #22]
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3718      	adds	r7, #24
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}

0800d0ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0ee:	b580      	push	{r7, lr}
 800d0f0:	b082      	sub	sp, #8
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	6078      	str	r0, [r7, #4]
 800d0f6:	460b      	mov	r3, r1
 800d0f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d100:	78fa      	ldrb	r2, [r7, #3]
 800d102:	4611      	mov	r1, r2
 800d104:	4618      	mov	r0, r3
 800d106:	f7f7 fd49 	bl	8004b9c <HAL_PCD_EP_GetRxCount>
 800d10a:	4603      	mov	r3, r0
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	3708      	adds	r7, #8
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d114:	b480      	push	{r7}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d11c:	4b03      	ldr	r3, [pc, #12]	@ (800d12c <USBD_static_malloc+0x18>)
}
 800d11e:	4618      	mov	r0, r3
 800d120:	370c      	adds	r7, #12
 800d122:	46bd      	mov	sp, r7
 800d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d128:	4770      	bx	lr
 800d12a:	bf00      	nop
 800d12c:	20002220 	.word	0x20002220

0800d130 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d130:	b480      	push	{r7}
 800d132:	b083      	sub	sp, #12
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]

}
 800d138:	bf00      	nop
 800d13a:	370c      	adds	r7, #12
 800d13c:	46bd      	mov	sp, r7
 800d13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d142:	4770      	bx	lr

0800d144 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d144:	b480      	push	{r7}
 800d146:	b085      	sub	sp, #20
 800d148:	af00      	add	r7, sp, #0
 800d14a:	4603      	mov	r3, r0
 800d14c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d14e:	2300      	movs	r3, #0
 800d150:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d152:	79fb      	ldrb	r3, [r7, #7]
 800d154:	2b03      	cmp	r3, #3
 800d156:	d817      	bhi.n	800d188 <USBD_Get_USB_Status+0x44>
 800d158:	a201      	add	r2, pc, #4	@ (adr r2, 800d160 <USBD_Get_USB_Status+0x1c>)
 800d15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d15e:	bf00      	nop
 800d160:	0800d171 	.word	0x0800d171
 800d164:	0800d177 	.word	0x0800d177
 800d168:	0800d17d 	.word	0x0800d17d
 800d16c:	0800d183 	.word	0x0800d183
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d170:	2300      	movs	r3, #0
 800d172:	73fb      	strb	r3, [r7, #15]
    break;
 800d174:	e00b      	b.n	800d18e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d176:	2303      	movs	r3, #3
 800d178:	73fb      	strb	r3, [r7, #15]
    break;
 800d17a:	e008      	b.n	800d18e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d17c:	2301      	movs	r3, #1
 800d17e:	73fb      	strb	r3, [r7, #15]
    break;
 800d180:	e005      	b.n	800d18e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d182:	2303      	movs	r3, #3
 800d184:	73fb      	strb	r3, [r7, #15]
    break;
 800d186:	e002      	b.n	800d18e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d188:	2303      	movs	r3, #3
 800d18a:	73fb      	strb	r3, [r7, #15]
    break;
 800d18c:	bf00      	nop
  }
  return usb_status;
 800d18e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d190:	4618      	mov	r0, r3
 800d192:	3714      	adds	r7, #20
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr

0800d19c <memset>:
 800d19c:	4402      	add	r2, r0
 800d19e:	4603      	mov	r3, r0
 800d1a0:	4293      	cmp	r3, r2
 800d1a2:	d100      	bne.n	800d1a6 <memset+0xa>
 800d1a4:	4770      	bx	lr
 800d1a6:	f803 1b01 	strb.w	r1, [r3], #1
 800d1aa:	e7f9      	b.n	800d1a0 <memset+0x4>

0800d1ac <__libc_init_array>:
 800d1ac:	b570      	push	{r4, r5, r6, lr}
 800d1ae:	4d0d      	ldr	r5, [pc, #52]	@ (800d1e4 <__libc_init_array+0x38>)
 800d1b0:	4c0d      	ldr	r4, [pc, #52]	@ (800d1e8 <__libc_init_array+0x3c>)
 800d1b2:	1b64      	subs	r4, r4, r5
 800d1b4:	10a4      	asrs	r4, r4, #2
 800d1b6:	2600      	movs	r6, #0
 800d1b8:	42a6      	cmp	r6, r4
 800d1ba:	d109      	bne.n	800d1d0 <__libc_init_array+0x24>
 800d1bc:	4d0b      	ldr	r5, [pc, #44]	@ (800d1ec <__libc_init_array+0x40>)
 800d1be:	4c0c      	ldr	r4, [pc, #48]	@ (800d1f0 <__libc_init_array+0x44>)
 800d1c0:	f000 f826 	bl	800d210 <_init>
 800d1c4:	1b64      	subs	r4, r4, r5
 800d1c6:	10a4      	asrs	r4, r4, #2
 800d1c8:	2600      	movs	r6, #0
 800d1ca:	42a6      	cmp	r6, r4
 800d1cc:	d105      	bne.n	800d1da <__libc_init_array+0x2e>
 800d1ce:	bd70      	pop	{r4, r5, r6, pc}
 800d1d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1d4:	4798      	blx	r3
 800d1d6:	3601      	adds	r6, #1
 800d1d8:	e7ee      	b.n	800d1b8 <__libc_init_array+0xc>
 800d1da:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1de:	4798      	blx	r3
 800d1e0:	3601      	adds	r6, #1
 800d1e2:	e7f2      	b.n	800d1ca <__libc_init_array+0x1e>
 800d1e4:	0800d2d0 	.word	0x0800d2d0
 800d1e8:	0800d2d0 	.word	0x0800d2d0
 800d1ec:	0800d2d0 	.word	0x0800d2d0
 800d1f0:	0800d2d4 	.word	0x0800d2d4

0800d1f4 <memcpy>:
 800d1f4:	440a      	add	r2, r1
 800d1f6:	4291      	cmp	r1, r2
 800d1f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d1fc:	d100      	bne.n	800d200 <memcpy+0xc>
 800d1fe:	4770      	bx	lr
 800d200:	b510      	push	{r4, lr}
 800d202:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d206:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d20a:	4291      	cmp	r1, r2
 800d20c:	d1f9      	bne.n	800d202 <memcpy+0xe>
 800d20e:	bd10      	pop	{r4, pc}

0800d210 <_init>:
 800d210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d212:	bf00      	nop
 800d214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d216:	bc08      	pop	{r3}
 800d218:	469e      	mov	lr, r3
 800d21a:	4770      	bx	lr

0800d21c <_fini>:
 800d21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d21e:	bf00      	nop
 800d220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d222:	bc08      	pop	{r3}
 800d224:	469e      	mov	lr, r3
 800d226:	4770      	bx	lr
